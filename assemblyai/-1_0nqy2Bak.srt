1
00:00:26,930 --> 00:00:30,034
Good evening and thanks for joining me for my talk on subdomain hijacking.

2
00:00:30,162 --> 00:00:33,814
Why DevOps is making us more vulnerable. So before we jump into

3
00:00:33,852 --> 00:00:37,106
the topic, who am I? So my name is Simon Gurney, I'm a co founder

4
00:00:37,138 --> 00:00:40,278
of punk Security. We're a devsecops company here in

5
00:00:40,284 --> 00:00:43,682
the UK, based in the northeast. I'm a devsecops consultant,

6
00:00:43,746 --> 00:00:47,858
still do consultancy as the company's grown.

7
00:00:48,034 --> 00:00:51,230
Still very much a geek at heart, so very technical.

8
00:00:51,650 --> 00:00:55,146
Python developer, also security guy, came from an infrastructure

9
00:00:55,178 --> 00:00:58,560
background, so really quite broad skill set.

10
00:00:59,890 --> 00:01:02,640
And what's the agenda for this evening's talk?

11
00:01:03,570 --> 00:01:07,118
So first we'll go into quickly how DNS works. So we're

12
00:01:07,134 --> 00:01:10,258
going to look at what does the infrastructure behind DNS look like? What are some

13
00:01:10,264 --> 00:01:14,994
of the common records look like? And then what

14
00:01:15,032 --> 00:01:18,498
happens when you request a DNS record for a website. So you go

15
00:01:18,504 --> 00:01:22,150
to a website or you try and connect to a server, whatever that may be.

16
00:01:22,220 --> 00:01:25,222
You punch in a human friendly name and it resolves it to an IP address.

17
00:01:25,276 --> 00:01:28,282
But how does that work under the scenes? Because that's going to be important.

18
00:01:28,336 --> 00:01:31,754
When we start talking about how we attack that, we're going to go through two

19
00:01:31,792 --> 00:01:33,690
methods to attack subdomains.

20
00:01:34,510 --> 00:01:39,894
Typically there's plenty of different SaaS

21
00:01:39,942 --> 00:01:43,478
platforms we can try and attack, but typically they fall into two methods.

22
00:01:43,494 --> 00:01:46,030
So we're going to cover both those methods this evening.

23
00:01:46,450 --> 00:01:50,350
One, we're going to demo against GitHub pages and one against AWS.

24
00:01:50,770 --> 00:01:54,846
And then we're going to quickly touch on why should you care? So when

25
00:01:54,868 --> 00:01:57,950
we understand what are subdomain hijacking attacks,

26
00:01:58,550 --> 00:02:02,226
why should you be interested and why should you try and prevent it? And what

27
00:02:02,248 --> 00:02:04,814
can you do to defend your organization? So it's not all doom and gloom,

28
00:02:04,862 --> 00:02:07,766
the end. We'll show that it's actually quite simple to keep on top of this

29
00:02:07,788 --> 00:02:11,218
stuff. So let's kick

30
00:02:11,234 --> 00:02:14,194
it off. Can intro to DNS. So what is DNS?

31
00:02:14,242 --> 00:02:18,274
We're going to go to the infrastructure first, so you understand what actually is

32
00:02:18,412 --> 00:02:21,466
responsible for making DNS work. And then we'll have

33
00:02:21,488 --> 00:02:25,180
a look at how DNS, these process itself works.

34
00:02:25,630 --> 00:02:29,174
So DNS starts with some routing servers. There's 13

35
00:02:29,222 --> 00:02:32,826
of these servers all dotted around the globe, typically mostly centered

36
00:02:32,858 --> 00:02:36,334
on the US, actually like the US army runs it and I think Nasa's got

37
00:02:36,372 --> 00:02:39,818
some. So these are fairly static servers,

38
00:02:39,994 --> 00:02:43,600
really high load tolerant servers, really highly available.

39
00:02:44,290 --> 00:02:48,154
They are hard coded onto DNS servers.

40
00:02:48,202 --> 00:02:51,374
So if you deploy a Windows DNS server, for instance,

41
00:02:51,422 --> 00:02:54,766
there'll be an option to use root hints. So these are hard coded IP

42
00:02:54,798 --> 00:02:58,738
addresses where it knows that it can go to

43
00:02:58,904 --> 00:03:02,418
start the whole DNS journey of how do I resolve a domain

44
00:03:02,434 --> 00:03:05,362
name? So if it hasn't got anything in its cache or no other direction,

45
00:03:05,506 --> 00:03:08,982
the routing server is where it's going to start its journey. As I said,

46
00:03:09,036 --> 00:03:12,714
that's generally hard coded into the applications. It doesn't change very often.

47
00:03:12,912 --> 00:03:16,202
And what do these routine servers hold? So they have a record

48
00:03:16,256 --> 00:03:19,610
type called a name server record and they point

49
00:03:19,760 --> 00:03:22,870
at the DNS servers responsible for what we call

50
00:03:22,880 --> 00:03:26,538
a top level domain. So these you recognize as coms.org

51
00:03:26,634 --> 00:03:30,014
co uK. So these very top level of a domain that is

52
00:03:30,052 --> 00:03:33,822
maintained by an organization. So co UK here in the UK is

53
00:03:33,956 --> 00:03:37,246
maintained by nominate. So these will have their own DNS servers.

54
00:03:37,278 --> 00:03:40,482
So the job of the routine server is to point people when they're after a

55
00:03:40,536 --> 00:03:43,810
co UK subdomain at nominates co UK

56
00:03:44,390 --> 00:03:47,726
services. So these are the TLD servers.

57
00:03:47,758 --> 00:03:50,566
So as I say, we've got co UK there by nominates and we have these

58
00:03:50,588 --> 00:03:54,006
name server records pointing at these

59
00:03:54,028 --> 00:03:57,462
TLD servers. The routines aren't going to get updated that often.

60
00:03:57,516 --> 00:04:00,966
Only if nominate decide to change their ip addresses for their co UK

61
00:04:00,998 --> 00:04:04,822
servers. Or recently you probably novices, there's a flood of tlds.

62
00:04:04,886 --> 00:04:08,442
We used to be just co UK, maybe 100

63
00:04:08,496 --> 00:04:12,640
tlds, now there's thousands. You can get kitchen security,

64
00:04:13,010 --> 00:04:16,506
shop, Google. It just exploded

65
00:04:16,538 --> 00:04:19,918
recently, the number of tlds and then

66
00:04:20,084 --> 00:04:23,598
the tlds will have the same NS records, but this time they're

67
00:04:23,604 --> 00:04:26,898
going to point to their customers domains and then they're going to

68
00:04:26,904 --> 00:04:30,706
point to wherever you've told them you're hosting your DNS records. So in

69
00:04:30,728 --> 00:04:34,222
this case we're co UK again. So we're over at nominate,

70
00:04:34,286 --> 00:04:37,538
we've purchased a domain test co UK and

71
00:04:37,624 --> 00:04:40,678
we've told nominate that we're serving that from Azure. So if someone wants to go

72
00:04:40,684 --> 00:04:44,162
and find our websites, these can look up our DNS records over Azure.

73
00:04:44,306 --> 00:04:48,226
So we tell them that they provision NS records or we provision it via

74
00:04:48,258 --> 00:04:52,378
their web interface or whatever mechanism they've got. And then

75
00:04:52,544 --> 00:04:55,706
they can then point all people at our azure servers which we can

76
00:04:55,728 --> 00:04:58,300
update as fast or as slow as we like.

77
00:05:00,190 --> 00:05:03,886
So on our servers we have more records than NS now. So we can have

78
00:05:03,908 --> 00:05:07,422
a records which are how to turn a name into an IP address

79
00:05:07,556 --> 00:05:11,662
quad a records which are how to turn a name into an IPV six address

80
00:05:11,796 --> 00:05:15,746
cname records which are kind of like a

81
00:05:15,768 --> 00:05:19,714
reference. So you get Cname records to another DNS record

82
00:05:19,752 --> 00:05:23,006
and you may even start that whole journey again for an alias

83
00:05:23,038 --> 00:05:26,206
record or NS. So we can do the same trick

84
00:05:26,318 --> 00:05:29,846
that these registrars are doing and say actually this

85
00:05:29,868 --> 00:05:33,158
part of the domain, you can go and fetch them another server. So those are

86
00:05:33,164 --> 00:05:36,866
typically the records. There are more text records and mail records

87
00:05:36,898 --> 00:05:40,214
and we don't mean to concern ourselves with that for subdomain hijacking, but we'll cover

88
00:05:40,252 --> 00:05:43,958
these records again as we go through. That's what the infrastructure

89
00:05:43,974 --> 00:05:47,418
of DNS looks like. So when you purchase a domain and you pay in a

90
00:05:47,424 --> 00:05:51,510
registration for each year of ten pounds a year, some nominal fee

91
00:05:51,670 --> 00:05:55,466
to nominate or whoever your registrar is, that's because maintaining

92
00:05:55,498 --> 00:05:59,274
these TLD servers is expensive. They have to maintain who is records,

93
00:05:59,322 --> 00:06:02,574
which are who owns the domains. And then they have to keep this really

94
00:06:02,612 --> 00:06:06,082
highly available infrastructure up because if their servers go down, if that co

95
00:06:06,136 --> 00:06:10,340
uk DNS server was to break, your website would go off.

96
00:06:10,790 --> 00:06:14,018
That's not quite true. It wouldn't be that instant. But if they were down for

97
00:06:14,024 --> 00:06:16,900
a long time, then that would happen.

98
00:06:17,590 --> 00:06:20,950
So when you purchase a subdomain, you're basically funding that process.

99
00:06:21,020 --> 00:06:25,474
And generally these orgs up until recently when the tlds exploded, are nonprofits

100
00:06:25,522 --> 00:06:28,310
like nominet, which are public sector owned.

101
00:06:29,050 --> 00:06:32,326
So that's the infrastructure behind DNS. So when you

102
00:06:32,348 --> 00:06:36,406
purchase these domain, what you're effectively doing by your registrar, whether that's GoDaddy

103
00:06:36,438 --> 00:06:40,346
or directly with a domain

104
00:06:40,378 --> 00:06:43,758
provider, is you're paying to have your

105
00:06:43,924 --> 00:06:47,738
NS record and your details put on TLD

106
00:06:47,834 --> 00:06:51,498
server. And then when you create subdomains,

107
00:06:51,514 --> 00:06:54,494
so you bought a subdomain test pump, securitycurity Co?

108
00:06:54,532 --> 00:06:57,902
Uk and you've decided to

109
00:06:57,956 --> 00:07:01,106
create a subdomain of tests. Then you would

110
00:07:01,128 --> 00:07:04,626
configure that in your DNS records. That's free. You can have as many of those

111
00:07:04,648 --> 00:07:07,970
as you like, but to actually buy a domain

112
00:07:08,630 --> 00:07:11,080
to go on co UK you have to pay for.

113
00:07:12,170 --> 00:07:15,094
So just to go over that again, root hint servers, no one's got any access

114
00:07:15,132 --> 00:07:18,918
to those other than the bodies that manage them. The tlds you

115
00:07:19,004 --> 00:07:22,406
do indirectly configure via the registrar. So you go onto your registrar,

116
00:07:22,438 --> 00:07:25,590
GoDaddy and say my domain is available on these NS

117
00:07:25,670 --> 00:07:29,018
records and you configure that directly generally, so you

118
00:07:29,024 --> 00:07:32,750
can configure them, but it's via the registrar. Normally it's 24 hours delay

119
00:07:33,250 --> 00:07:37,258
for that to fully propagate. And that's

120
00:07:37,274 --> 00:07:41,246
the only real access you get. Whereas the azure layer or wherever you

121
00:07:41,268 --> 00:07:44,560
put your DNS servers, you can configure that how you like,

122
00:07:44,930 --> 00:07:48,878
really easy, really quick. That's infrastructure behind DNS.

123
00:07:48,974 --> 00:07:52,706
And now we're going to look at how the DNS flow goes. So got a

124
00:07:52,728 --> 00:07:55,902
laptop here and it wants to go to my website, www.

125
00:07:56,046 --> 00:07:59,698
Pumpsecurity. Co. UK. So I type that into the URL or I

126
00:07:59,704 --> 00:08:03,378
go on Google and search us and that comes up and then the computer's

127
00:08:03,394 --> 00:08:06,902
got this task now of I've got a human friendly name, I need to connect

128
00:08:06,956 --> 00:08:10,294
to a server somewhere on the globe that's going to serve me this website.

129
00:08:10,412 --> 00:08:13,674
How do I turn a human friendly name into an IP address? An IP address

130
00:08:13,712 --> 00:08:17,340
is structured in such a way that given that IP address,

131
00:08:18,110 --> 00:08:21,446
the traffic that goes to that services can work its way around the Internet.

132
00:08:21,478 --> 00:08:24,522
That's the whole point of IP addresses, they're fairly hierarchical.

133
00:08:24,666 --> 00:08:28,398
So given an IP address, a computer can work out where on the

134
00:08:28,404 --> 00:08:32,270
planet it needs to get that data to.

135
00:08:32,420 --> 00:08:36,554
So we need to turn that human friendly name, which isn't hierarchical, into an

136
00:08:36,612 --> 00:08:40,382
address. So at this point, the laptop

137
00:08:40,526 --> 00:08:43,966
is connected to a BT home hub, so its DNS records

138
00:08:43,998 --> 00:08:47,974
are with BT. BT is maintaining some DNS servers that allow its

139
00:08:48,012 --> 00:08:51,842
customers to then use. So this is fairly automatic

140
00:08:51,906 --> 00:08:55,590
behind the scenes. Some organizations will have their own

141
00:08:55,660 --> 00:08:59,398
way protected. DNS is quite common now where they do like malware filtering at

142
00:08:59,404 --> 00:09:02,526
the DNS layer. So you make a DNS request and it says, oh, it's malware.

143
00:09:02,578 --> 00:09:05,674
So I'm not going to bother responding or I'll send you to a different

144
00:09:05,712 --> 00:09:09,254
page that says that's malware. But typically in a home environment,

145
00:09:09,302 --> 00:09:12,614
you're just going to get served whatever your ISP is providing.

146
00:09:12,742 --> 00:09:16,046
So in this case, my request goes off to the DNS server at

147
00:09:16,068 --> 00:09:19,470
BT. The DNS server at BT says, where is

148
00:09:19,540 --> 00:09:23,054
co. UK? So how do I start this journey? So it goes off to those

149
00:09:23,092 --> 00:09:26,846
routine servers and says where is co. UK? And then

150
00:09:26,868 --> 00:09:30,146
that responds to that NS record we talked about. So back to BT and

151
00:09:30,168 --> 00:09:33,406
says if you want to find co UK, you need to go to the nominet

152
00:09:33,438 --> 00:09:37,086
services in the NS record. So now we go to the nominet

153
00:09:37,118 --> 00:09:40,694
services and we say, where punk Security Co. UK? And that

154
00:09:40,732 --> 00:09:44,166
responds with an NS record and says for that part of the domain, you need

155
00:09:44,188 --> 00:09:47,362
to go and speak to these servers over in Azure.

156
00:09:47,506 --> 00:09:51,594
So then we go to Azure and says where is punk Security Co.

157
00:09:51,632 --> 00:09:55,322
UK? And Azure says, I know that one, this is the a record.

158
00:09:55,376 --> 00:09:59,046
So this is the IP address. BT then responds and puts

159
00:09:59,078 --> 00:10:03,050
that back on your computer. So your computer's now got an answer to that query,

160
00:10:03,390 --> 00:10:07,134
it's got an IP address. It then sends traffic to that server and says

161
00:10:07,172 --> 00:10:10,942
give me the website. And that all works wonderfully on future

162
00:10:10,996 --> 00:10:14,926
requests. What we actually see in DNS is there's lots of layers of caching.

163
00:10:15,038 --> 00:10:19,234
So in future when someone says where is punk

164
00:10:19,352 --> 00:10:21,982
security co. UK? BT is cached.

165
00:10:22,046 --> 00:10:25,218
Punk security UK is over on Azure. So it's not

166
00:10:25,224 --> 00:10:27,790
going to go to the TLD, it's not going to go to the routing server,

167
00:10:27,870 --> 00:10:31,058
it's just going to go straight to Azure because it's cached it. And that cache

168
00:10:31,074 --> 00:10:35,078
is configurable as different lifetimes. Typically it's like an hour it gets cached and

169
00:10:35,084 --> 00:10:38,794
DNS is heavily cached because we don't want those routing servers getting hit with

170
00:10:38,832 --> 00:10:42,426
every single DNS request. So that

171
00:10:42,448 --> 00:10:46,058
is DNS in a nutshell, both infrastructure and how it

172
00:10:46,064 --> 00:10:49,786
works on your laptop. So what are subdomains? This topic is

173
00:10:49,808 --> 00:10:53,398
obviously all about subdomain hijacking. So subdomains are those parts

174
00:10:53,414 --> 00:10:57,310
of the subdomains that you control. So in this instance punk security

175
00:10:57,380 --> 00:11:00,830
UK is a domain. So I've got the TLD Co.

176
00:11:00,900 --> 00:11:04,506
UK that's sitting over at nominate, I've purchased punk

177
00:11:04,538 --> 00:11:08,754
security from them. So Punksecurity Co. UK is the domain and

178
00:11:08,792 --> 00:11:12,414
then I can add as many subdomains as I like, the WWW blog

179
00:11:12,462 --> 00:11:16,094
docs, there's no cost to those. I just go on to wherever my DNS

180
00:11:16,142 --> 00:11:19,794
provider is as your cloudflare AWS and add a new subdomain.

181
00:11:19,842 --> 00:11:23,474
I can point it wherever I want a website or SFTP

182
00:11:23,522 --> 00:11:27,298
server, it doesn't really matter. So that is what we're talking about with subdomains.

183
00:11:27,314 --> 00:11:30,346
We're not going to be taking over the full domain. We're looking at taking over

184
00:11:30,368 --> 00:11:33,706
those subdomain records that are provisioned and on this

185
00:11:33,728 --> 00:11:37,066
slide they're all green. And what are

186
00:11:37,088 --> 00:11:40,842
subdomain takeovers? Well hopefully now it's fairly obvious but

187
00:11:40,896 --> 00:11:44,542
essentially we're going to try and take those domains over.

188
00:11:44,596 --> 00:11:48,426
So because those domains have got misconfiguration that is detectable

189
00:11:48,618 --> 00:11:51,806
we're going to services our own content from them. So in this case on this

190
00:11:51,828 --> 00:11:55,594
slide we've got docs punk Security Co. UK and actually

191
00:11:55,652 --> 00:11:58,862
this is going to lead into the first demo which is the GitHub pages takeover.

192
00:11:59,006 --> 00:12:01,742
So in this scenario that's pointing at GitHub pages,

193
00:12:01,806 --> 00:12:05,074
GitHub pages has no idea what docs punk Security Co.

194
00:12:05,112 --> 00:12:08,814
UK is and we can then as an attacker detect

195
00:12:08,862 --> 00:12:12,170
that, go and provide our own solution via GitHub

196
00:12:12,190 --> 00:12:15,734
pages, our own website. And then if someone was to go to punk security Co.

197
00:12:15,772 --> 00:12:18,200
UK, they get served our malicious content.

198
00:12:19,210 --> 00:12:23,110
So these are what we're talking about with subdomain takeover. So let's

199
00:12:23,190 --> 00:12:27,226
dive straight into that GitL pages takeover because it's a really quite simple one to

200
00:12:27,328 --> 00:12:31,500
get your head around. So in this case we have

201
00:12:31,870 --> 00:12:36,078
punkecuritydocs punksecurity Co. UK. So I

202
00:12:36,084 --> 00:12:38,702
couldn't use docs because I burnt it on a previous demo.

203
00:12:38,836 --> 00:12:42,346
So on this one, that's the domain. And when we do a ping

204
00:12:42,378 --> 00:12:46,286
to it, what happens is that DNS process we just discussed kicks off and

205
00:12:46,308 --> 00:12:49,506
we turn it into an ip address. And I've just highlighted that in this part

206
00:12:49,528 --> 00:12:53,186
of the output here. So I've pinged it and I've got an IP address.

207
00:12:53,288 --> 00:12:56,242
That IP address is a GitHub pages IP address.

208
00:12:56,296 --> 00:12:59,186
There's only like four, I think there's two IP version, four ones and two IP

209
00:12:59,218 --> 00:13:02,358
version, six addresses that you could get back. So we know that this

210
00:13:02,444 --> 00:13:06,006
domain is served by GitHub pages. That's the

211
00:13:06,028 --> 00:13:09,046
first step. The next step is to go to these domain. So if we go

212
00:13:09,068 --> 00:13:12,598
to the domain, we get a 404 and a page saying there isn't

213
00:13:12,614 --> 00:13:16,054
a GitHub site here. So the DNS

214
00:13:16,102 --> 00:13:19,414
lookup went through fine, went through that whole process of going to the routing,

215
00:13:19,462 --> 00:13:23,218
going to the TLD, going to wherever our DNS was is your AWS

216
00:13:23,254 --> 00:13:26,686
or cloudflare. And these that gave us a record to say you need

217
00:13:26,708 --> 00:13:30,654
to go to GitHub pages. So that process is

218
00:13:30,692 --> 00:13:33,850
end to end complete. When we go to GitHub pages,

219
00:13:34,010 --> 00:13:37,586
it knows nothing about that domain. So this is

220
00:13:37,608 --> 00:13:40,786
a condition that we can detect. And as an attacker, if we can then

221
00:13:40,888 --> 00:13:44,542
convince GitHub to serve our content under that domain,

222
00:13:44,686 --> 00:13:47,510
then we can serve content under that domain.

223
00:13:48,330 --> 00:13:51,574
So this is a very quick demo of how that

224
00:13:51,612 --> 00:13:55,446
works. So I'll press play on this and

225
00:13:55,628 --> 00:13:59,110
you can see it. So I've got a

226
00:13:59,180 --> 00:14:02,966
repository here, I go into the settings, there's a GitHub

227
00:14:02,998 --> 00:14:06,426
pages branch specified which has got a load of web

228
00:14:06,608 --> 00:14:10,890
content in there. I add the domain and GitHub now does a quick check

229
00:14:11,040 --> 00:14:14,650
and says, right, is that DNS record pointing at GitHub pages?

230
00:14:14,730 --> 00:14:17,646
And if it is, it's happy.

231
00:14:17,828 --> 00:14:21,358
So as an attacker I've got no reason, there's no reason for

232
00:14:21,364 --> 00:14:24,698
GitHub to trust me more than anyone else, but it

233
00:14:24,724 --> 00:14:28,226
has done because the DNS flow was complete so

234
00:14:28,328 --> 00:14:32,398
now, as you can see, if I refresh the page, I'm now serving

235
00:14:32,574 --> 00:14:36,542
the content out of my repository. So as an attacker with no authentication,

236
00:14:36,606 --> 00:14:39,990
no method of proving that that domain is mine, I can serve content

237
00:14:40,060 --> 00:14:43,814
for it. And that's because GitHub is happy to

238
00:14:43,852 --> 00:14:47,538
do the DNS check as proof that you own the

239
00:14:47,564 --> 00:14:50,490
subdomain because you've set it up to point it at GitHub pages.

240
00:14:54,990 --> 00:14:59,574
So we've seen an attack there where can administrator

241
00:14:59,622 --> 00:15:03,006
has set up a domain to point at GitHub pages. And either they haven't done

242
00:15:03,028 --> 00:15:07,134
the GitHub pages set up yet, or more likely they

243
00:15:07,172 --> 00:15:10,638
have, years ago and they've decided that they want to use it anymore and

244
00:15:10,644 --> 00:15:13,946
they've deleted it. So now it's pointing to GitHub

245
00:15:13,978 --> 00:15:16,786
pages and it's not actually becoming used. So they've cleaned up the GitHub pages but

246
00:15:16,808 --> 00:15:20,126
not the DNS records. So how does DevOps

247
00:15:20,158 --> 00:15:24,194
make this worse? And the first thing really is

248
00:15:24,312 --> 00:15:27,918
a really interesting quote from Gene

249
00:15:27,934 --> 00:15:31,086
Kim. If you follow the DevOps

250
00:15:31,278 --> 00:15:35,350
research in academia, there's this whole pull in DevOps to

251
00:15:35,420 --> 00:15:39,014
focus on what's core to your

252
00:15:39,052 --> 00:15:42,838
product and all the context, stuff like auth et

253
00:15:42,854 --> 00:15:46,458
cetera and whole swathes of

254
00:15:46,464 --> 00:15:49,420
the app if it's not bespoke to your application.

255
00:15:50,110 --> 00:15:53,466
The argument quite often in DevOps now is you shouldn't be devin

256
00:15:53,498 --> 00:15:57,546
it. You should not waste developer time and effort reproducing

257
00:15:57,578 --> 00:16:00,750
something that you can buy off these shelf. It's almost never going to be as

258
00:16:00,820 --> 00:16:04,222
affordable and it's something else that could break.

259
00:16:04,276 --> 00:16:07,906
You've got to maintain, maintain dependencies, all that sort of stuff. So there's these

260
00:16:07,928 --> 00:16:11,806
huge drive to say let's focus on what's core for your app and anything that's

261
00:16:11,838 --> 00:16:16,130
context, go and push it out elsewhere. Form rendering

262
00:16:18,070 --> 00:16:21,366
or is a common one. Now let's go and use okta. Let's not bother with

263
00:16:21,388 --> 00:16:25,126
or let's use cognito. So when we do that and

264
00:16:25,148 --> 00:16:28,470
we shift more and more services to SaaS providers,

265
00:16:29,930 --> 00:16:33,706
naturally there's going to be more chance that we point records at SaaS services and

266
00:16:33,728 --> 00:16:38,026
then don't use these. So rather than implement a

267
00:16:38,048 --> 00:16:42,234
blog on our app, we'll just go and use a blogging service. Or rather

268
00:16:42,272 --> 00:16:46,046
than introduce a forum, we'll go and use a forum service. But then

269
00:16:46,068 --> 00:16:48,958
when we stop using them, we leave the records there, people can take them over.

270
00:16:49,044 --> 00:16:52,866
So these drive to say, actually let's use more and more SaaS services

271
00:16:52,968 --> 00:16:56,274
and not host stuff inside ourselves is

272
00:16:56,312 --> 00:17:00,050
driving a lot of this. And then also as

273
00:17:00,200 --> 00:17:04,178
developers are empowered now to use these SaaS services and also

274
00:17:04,344 --> 00:17:08,222
quite often under their own steam. So it's not for the IT person now

275
00:17:08,296 --> 00:17:11,186
in central Ops to go and Provision GitHub pages,

276
00:17:11,298 --> 00:17:15,346
for instance, or that forum. Maybe the DevOps are doing an enabled

277
00:17:15,378 --> 00:17:19,334
team, a highly agile high velocity team. They're developing systems and

278
00:17:19,372 --> 00:17:22,886
being able to provision infrastructure themselves. But actually DNS, maybe they

279
00:17:22,908 --> 00:17:26,726
can't do that because Ops has still got control over DNS. This is a pattern

280
00:17:26,758 --> 00:17:29,482
we see all the time and these debate to that is these ticketing system.

281
00:17:29,536 --> 00:17:33,366
So typically a developer will go well, I need to do a GitHub pages

282
00:17:33,398 --> 00:17:36,550
thing. So I've looked in the docs and I need to point

283
00:17:36,560 --> 00:17:39,678
this DNS record at GitHub pages. GitHub pages won't let me do that at the

284
00:17:39,684 --> 00:17:42,458
moment because the DNS record is not pointing at it. So I'll create a ticket

285
00:17:42,474 --> 00:17:46,426
and assign it to Ops to say, can you create me this DNS

286
00:17:46,458 --> 00:17:49,474
record? So these ops do that and maybe the ticket doesn't come back straight away

287
00:17:49,512 --> 00:17:52,418
or it comes back in, it's not in that sprint, that developer is going to

288
00:17:52,424 --> 00:17:55,986
do that, or maybe they just lost interest and forgotten about it. This interface of

289
00:17:56,008 --> 00:17:59,938
tickets and systems can quite often lead to work being a

290
00:17:59,944 --> 00:18:03,394
one week or two week gap between objectives being delivered, even though it's a reasonably

291
00:18:03,442 --> 00:18:06,726
trivial thing to implement, and we see that quite a lot. So there's a

292
00:18:06,748 --> 00:18:10,438
bit of a race condition here where an attacker can detect and

293
00:18:10,444 --> 00:18:13,930
take over a subdomain before the ticket has been completed.

294
00:18:15,630 --> 00:18:19,354
So we're going to go on to the other type of attack name, which is

295
00:18:19,392 --> 00:18:22,758
NS delegation. So name server delegation. This is why

296
00:18:22,784 --> 00:18:26,080
we covered NS records a bit more in detail at the start.

297
00:18:26,690 --> 00:18:30,286
So if we look at this DNS configuration here, we're back

298
00:18:30,308 --> 00:18:33,722
punk security co. UK. It's sitting on these azure server

299
00:18:33,786 --> 00:18:37,522
and we've got a record for the website www. So that's all fine,

300
00:18:37,576 --> 00:18:41,502
maybe central ops manage this. What we're seeing now is these agile

301
00:18:41,566 --> 00:18:44,258
development teams. They want to be able to manage their own DNS, particularly if you're

302
00:18:44,264 --> 00:18:48,066
using services like Netlify or whatever the AWS

303
00:18:48,098 --> 00:18:52,326
equivalent is nowadays. You want to provision maybe

304
00:18:52,508 --> 00:18:56,114
a web app on a pull request and it has a unique domain,

305
00:18:56,162 --> 00:18:59,606
et cetera. So you end up with this situation where because of

306
00:18:59,628 --> 00:19:03,514
content security policies and calls and all that sort of stuff, it's really

307
00:19:03,552 --> 00:19:07,702
convenient to use a legitimate domain. But equally

308
00:19:07,766 --> 00:19:11,386
central ops and security are resistant to say yes you

309
00:19:11,408 --> 00:19:13,930
can go and provision your own records on DNS.

310
00:19:15,250 --> 00:19:17,822
There's a potential for a huge problem there. If you were to break something,

311
00:19:17,876 --> 00:19:21,754
you could bring down all services. So what we see is NS delegation.

312
00:19:21,882 --> 00:19:25,306
So in this instance we've punk Security Co. UK and we create an NS

313
00:19:25,338 --> 00:19:29,346
record, punk Security Co. UK and we say to the developers, okay, will you

314
00:19:29,368 --> 00:19:33,154
go and provision your own DNS server somewhere in AWS, et cetera? And then

315
00:19:33,192 --> 00:19:37,262
we'll point dev Punksecurity Co. UK to that server

316
00:19:37,326 --> 00:19:41,206
via a name services record exactly like the tlds are doing with us.

317
00:19:41,388 --> 00:19:44,642
This is really simple to do. And these now as a developer

318
00:19:44,706 --> 00:19:47,942
you've got your own DNS server and anything that comes before dev

319
00:19:47,996 --> 00:19:51,818
is under your control. So if you want to create www dot dev or

320
00:19:51,904 --> 00:19:55,418
a pull request specific record dev,

321
00:19:55,584 --> 00:19:59,226
you can do that straight away in your DNS and root to free and the

322
00:19:59,248 --> 00:20:02,058
chain is complete because now it goes rootint.

323
00:20:02,234 --> 00:20:06,782
Where is co. UK TLD? Where is punk security next

324
00:20:06,836 --> 00:20:10,954
sends you over to Azure. Azure, where is dev Punksuity

325
00:20:11,002 --> 00:20:14,634
Co. UK. Oh, that's over on the dev servers and root free Aws.

326
00:20:14,762 --> 00:20:17,986
Boom. I'll go and ask those. And that completes the chain. So we

327
00:20:18,008 --> 00:20:21,218
can use this exact same trick to delegate parts of DNS control. We haven't got

328
00:20:21,224 --> 00:20:24,910
to worry now that the devs might accidentally remove www

329
00:20:24,990 --> 00:20:26,900
and break our main website.

330
00:20:29,030 --> 00:20:32,406
So this is just to see that pictorial. This is where we were before we

331
00:20:32,428 --> 00:20:36,498
had all that, the root hint TLD and the azure server.

332
00:20:36,594 --> 00:20:39,494
And now with the NS record we can send it over to a completely different

333
00:20:39,532 --> 00:20:42,586
DNS server and it can serve all the same records. There's no difference there.

334
00:20:42,608 --> 00:20:45,626
We've just added an extra hop. So what

335
00:20:45,648 --> 00:20:49,340
is an NS takeover? It's very similar to what we saw before.

336
00:20:49,870 --> 00:20:53,994
DNS now is predominantly provided by SaaS services. So historically

337
00:20:54,042 --> 00:20:57,886
you might host your own DNS servers. But DNS is so critical and it

338
00:20:57,908 --> 00:21:03,038
needs to be so reliable. Typically now you're going to use cloudflare AWS or

339
00:21:03,124 --> 00:21:06,660
your registrars like Godaddy, et cetera. So in this case,

340
00:21:07,990 --> 00:21:11,086
maybe because of these ticketing system, maybe because of a typo,

341
00:21:11,278 --> 00:21:14,706
maybe because it's not used anymore, we have two NSF code

342
00:21:14,728 --> 00:21:19,262
set up, Dev, which is working fine, working beautifully, and these, this punk security

343
00:21:19,326 --> 00:21:22,726
co. UK, which is an incorrect NS record. And we'll go into what that

344
00:21:22,748 --> 00:21:25,974
looks like in a moment. Basically pointed at a DNS server that

345
00:21:26,012 --> 00:21:28,594
has no idea about this subdomain,

346
00:21:28,722 --> 00:21:32,610
so much like we did with GitHub pages as an attacker.

347
00:21:32,690 --> 00:21:36,086
Typically a lot of these SaaS services, we can just provision our own records onto

348
00:21:36,118 --> 00:21:39,258
that server and it's probably going to, if it wants to

349
00:21:39,264 --> 00:21:41,562
do a check model, don't anyway. But if it wants to do a check,

350
00:21:41,616 --> 00:21:45,146
it's probably going to do a record check and say, actually yes, it's pointing

351
00:21:45,178 --> 00:21:49,070
at me. So that's all good. So this is an NS takeover

352
00:21:49,490 --> 00:21:52,640
and we're going to do this on AWS route 53.

353
00:21:53,490 --> 00:21:57,106
So in this instance we have, I'm going to quickly show you what

354
00:21:57,128 --> 00:22:00,766
this looks like to set this up. So we have AWS

355
00:22:00,798 --> 00:22:04,466
weekly free here with punk Security Co. UK, top level,

356
00:22:04,648 --> 00:22:07,940
the domain that we want to create the delegation for.

357
00:22:08,310 --> 00:22:11,654
And this very quick video we're going to see what this looks like. So create

358
00:22:11,692 --> 00:22:15,574
a hosted zone in AWS. Click the button, we're going to type in

359
00:22:15,772 --> 00:22:19,594
punk Security Co. UK. So it's a completely different zone, completely separate from

360
00:22:19,632 --> 00:22:23,098
the main zone. We've got, I'm just going to

361
00:22:23,104 --> 00:22:26,090
put like a little note in here. Developers, when we create the zone,

362
00:22:28,030 --> 00:22:31,318
it has got there. The DNS records go down there in a minute.

363
00:22:31,334 --> 00:22:34,734
So we can see that we created the zone dev Punk security UK. And then

364
00:22:34,772 --> 00:22:38,954
under NS records we can see four servers.

365
00:22:39,082 --> 00:22:42,266
That's basically AWS has picked up random some servers

366
00:22:42,298 --> 00:22:46,258
around the globe and provisioned our hosted zone onto it.

367
00:22:46,424 --> 00:22:50,046
So to complete these flow now if we go back to the original

368
00:22:50,158 --> 00:22:53,602
infrastructure, look, we need to go back to the top level

369
00:22:53,656 --> 00:22:57,346
one and add the NS records to say where the

370
00:22:57,368 --> 00:23:02,626
person should go next. And I've just copy and pasted those out of the developer's

371
00:23:02,818 --> 00:23:06,166
zone. So I've copied and pasted them in and then now when you go

372
00:23:06,188 --> 00:23:09,560
for that flow, you'll get one of those and the path will be complete.

373
00:23:10,250 --> 00:23:13,498
So that's how simple it is to do delegation. Now if you

374
00:23:13,504 --> 00:23:16,666
noticed in that video, but when I created the

375
00:23:16,688 --> 00:23:20,294
zone, I called it punk Security Co. UK, but then when I aimed

376
00:23:20,342 --> 00:23:24,006
it to the parent zone, I put developers pump security UK.

377
00:23:24,118 --> 00:23:27,486
So at this point the dev zone is working and

378
00:23:27,508 --> 00:23:31,310
fully functional and servicing on those AWS name servers,

379
00:23:32,370 --> 00:23:35,626
but it's not Internet resolvable

380
00:23:35,738 --> 00:23:39,138
because it's not on the parent domain. When you go to the parent domain and

381
00:23:39,144 --> 00:23:42,098
say where's punk security Co. UK? It has no idea.

382
00:23:42,184 --> 00:23:45,618
Just because they're both in AWS doesn't mean it's going to magically work. If you

383
00:23:45,624 --> 00:23:48,814
would go to it and say where's developers punk security UK?

384
00:23:48,862 --> 00:23:50,998
It's going to say it's on these name servers. But when you go to the

385
00:23:51,004 --> 00:23:54,866
name servers, they have no idea what that is either, because we never created

386
00:23:54,898 --> 00:23:58,566
a zone on them. So how can we exploit that? Well,

387
00:23:58,668 --> 00:24:02,054
we can just ask AWS to provision as an attacker the

388
00:24:02,092 --> 00:24:05,690
developers punk security UK and there's going to be no checks on it.

389
00:24:05,840 --> 00:24:09,434
Now I did say that AWS had randomly put those records on

390
00:24:09,472 --> 00:24:12,938
servers around the globe. So we have to take that into account. We end up

391
00:24:12,944 --> 00:24:16,798
with a slight amount of brute forcing. The services here,

392
00:24:16,964 --> 00:24:20,254
even though they're randomly allocated aren't quite as random as you'd expect.

393
00:24:20,292 --> 00:24:23,582
And there aren't that many. So brute forcing is possible within sort of five minutes.

394
00:24:23,636 --> 00:24:26,906
It's not an exhaustive process. We do bump

395
00:24:26,938 --> 00:24:29,858
against AWS rate limiting. We've got a bit of a demo, so you'll see that

396
00:24:29,864 --> 00:24:33,166
in a minute. So how can we exploit it? So when we created

397
00:24:33,198 --> 00:24:36,274
those records though just then it gave

398
00:24:36,312 --> 00:24:40,086
us the NS record. So it told us which servers it put

399
00:24:40,108 --> 00:24:44,178
the zone on. And then when we incorrectly set up the NS record pointer,

400
00:24:44,354 --> 00:24:47,718
we told it those exact same services. So if I was to do

401
00:24:47,724 --> 00:24:51,990
an nslookup now against developers Punk Security UK,

402
00:24:52,150 --> 00:24:55,674
I would see these NS records. So as an attacker I can just

403
00:24:55,712 --> 00:24:59,622
get these. So what we need to do now is go and ask AWS

404
00:24:59,686 --> 00:25:03,402
to provision Us developers Punkycurity Co. UK and

405
00:25:03,536 --> 00:25:06,906
see what servers it puts us on. So in this scenario that's

406
00:25:06,938 --> 00:25:10,238
exactly what we've done. We've got the target servers we want to get

407
00:25:10,324 --> 00:25:13,358
and then AWS has responded and said, I've put them on these and as you

408
00:25:13,364 --> 00:25:16,814
can see there's no matches at all. So that is absolutely useless to us.

409
00:25:16,852 --> 00:25:19,758
We just basically delete the zone. It comes under AWS free tier. We haven't got

410
00:25:19,764 --> 00:25:23,278
to worry about it and we ask them again. In this instance, I'm not

411
00:25:23,284 --> 00:25:26,934
sure why AWS does it in pairs, but we've got two or four

412
00:25:27,132 --> 00:25:31,302
now this isn't too much of a problem because we can keep this one

413
00:25:31,436 --> 00:25:34,566
and then just go again. So if we get two or four and then they

414
00:25:34,588 --> 00:25:38,230
get another two or four, and the overlap is that we've got all four,

415
00:25:38,380 --> 00:25:41,398
then we've got complete control. Anyway, it doesn't matter that we've scattered it on a

416
00:25:41,404 --> 00:25:44,138
couple of extra servers, it makes no odds at all.

417
00:25:44,304 --> 00:25:47,610
So in this case that's great, we'll keep that. And then we do another

418
00:25:47,680 --> 00:25:50,906
request and we get the other two. So now we've got full control.

419
00:25:51,088 --> 00:25:54,458
At this point they're in our AWS account, we can add records,

420
00:25:54,554 --> 00:25:58,160
these flow works perfectly fine and we can services up whatever we want

421
00:25:58,530 --> 00:26:01,918
from those DNS servers. So in

422
00:26:01,924 --> 00:26:04,770
these situation, how is DevOps making it worse?

423
00:26:05,430 --> 00:26:08,926
Typically when we see NS takeover attacks it's

424
00:26:08,958 --> 00:26:12,206
because of things like terraform and copy and pasting.

425
00:26:12,318 --> 00:26:16,418
So provisioning stuff in AWS root these

426
00:26:16,504 --> 00:26:19,950
is typically done now with terraform or cloud formation.

427
00:26:20,110 --> 00:26:22,694
And what we see is that people just copy and paste these blocks over.

428
00:26:22,732 --> 00:26:25,446
And it's not quite obvious on a pull request when you're looking at these sort

429
00:26:25,468 --> 00:26:29,126
of NS records that you spot that they're not right.

430
00:26:29,308 --> 00:26:33,018
So you might provision a record in AWS and then someone goes in and

431
00:26:33,024 --> 00:26:37,370
copies and pastes them into the pull request to update the parent zone,

432
00:26:38,430 --> 00:26:41,546
but it's not obvious that those records are correct. And what

433
00:26:41,568 --> 00:26:44,302
if we haven't updated them? What if we copy and pasted the block from another

434
00:26:44,356 --> 00:26:47,200
delegation we've done and not updated them?

435
00:26:49,010 --> 00:26:52,986
So infrastructure as code, as good as it is, and copy and pasting bits

436
00:26:53,018 --> 00:26:56,606
of code rather than doing it, click ops, which is, I'm not saying don't do

437
00:26:56,628 --> 00:27:00,306
that. I absolutely advocate infrastructure as code, but this is a common cause of

438
00:27:00,328 --> 00:27:04,558
these sort of typos making it through and these, these issues occurring.

439
00:27:04,734 --> 00:27:08,374
And then as DevOps, with developers being enabled in

440
00:27:08,412 --> 00:27:12,310
small focus teams with all the ops and SRE and security support

441
00:27:12,380 --> 00:27:15,654
they need, delegation is more rife than ever. People want to

442
00:27:15,692 --> 00:27:18,742
be able to spin up web apps on pull requests,

443
00:27:18,806 --> 00:27:22,294
devs and Uats and all these different environments and they don't want to be frottled

444
00:27:22,342 --> 00:27:26,460
by waiting on ops. So the delegation is obviously huge now

445
00:27:26,990 --> 00:27:28,490
that's really becoming.

446
00:27:32,510 --> 00:27:35,134
In fact, before I go on to this, I've got a quick demo of the

447
00:27:35,172 --> 00:27:39,306
brute forcing, so I'm just going to drag this over. So I've

448
00:27:39,338 --> 00:27:42,494
got a quick view here of my AWS account

449
00:27:42,532 --> 00:27:45,598
and I've got no hosted zones in it. So this is the attacker and what

450
00:27:45,604 --> 00:27:48,286
we're going to do is take those exact servers I've just got on the slide

451
00:27:48,318 --> 00:27:51,570
there and try and brute force to get our zone onto them.

452
00:27:51,640 --> 00:27:55,074
So it got no zones in there. At the moment I'm going to bring

453
00:27:55,112 --> 00:27:58,262
over this terminal with vs code. I've got a very quick

454
00:27:58,316 --> 00:28:01,974
python brute force script from a brute force in AWS root these.

455
00:28:02,092 --> 00:28:05,990
I haven't released this anywhere, so you can't get it. It's not

456
00:28:06,140 --> 00:28:08,950
massively difficult, but we don't tend to release tactile.

457
00:28:09,290 --> 00:28:12,514
So at this point every dot is us requesting a zone.

458
00:28:12,642 --> 00:28:16,522
So we are, as I said, as aggressive rate limiting on the AWS side,

459
00:28:16,656 --> 00:28:19,898
so we try and fraught it a little bit. We do sort of free at

460
00:28:19,904 --> 00:28:23,130
a time, so every dot is us requesting a zone.

461
00:28:23,210 --> 00:28:27,070
And if that zone then doesn't match any of the target records,

462
00:28:27,970 --> 00:28:31,566
we delete it and move on. So we just keep cycling through and

463
00:28:31,588 --> 00:28:34,746
then hopefully eventually we will hit one of the servers

464
00:28:34,778 --> 00:28:38,186
that we want and this script will just output to the command

465
00:28:38,218 --> 00:28:40,818
line and say that we've got that with the zone id and then it will

466
00:28:40,824 --> 00:28:44,434
carry on until we get all four. So hopefully we won't wait too long

467
00:28:44,472 --> 00:28:47,026
to see that. And these we'll switch back to the AWS console and just see

468
00:28:47,048 --> 00:28:50,726
that we've achieved it. As I said, there's nothing going on

469
00:28:50,748 --> 00:28:54,850
in AWS land. Now to say that I own punk security

470
00:28:54,930 --> 00:28:58,866
Co. UK domain, this is just random AWS account, so there's

471
00:28:58,898 --> 00:29:02,106
no checks going on to say that I should be able to do it.

472
00:29:02,128 --> 00:29:05,926
So as long as you can imagine that the flow is correct, because we've spotted

473
00:29:05,958 --> 00:29:09,420
this condition, we should be fairly happy. This is

474
00:29:09,790 --> 00:29:13,046
perfectly possible attack. There are some mitigations. This isn't

475
00:29:13,078 --> 00:29:16,622
always possible. So just because you detect this attack doesn't mean it's always possible.

476
00:29:16,676 --> 00:29:20,026
I will caveat that. So if you recently had it in AWS and deleted

477
00:29:20,058 --> 00:29:24,266
it off, it marks those particular zones, like out of scope. No one can request

478
00:29:24,298 --> 00:29:27,426
them. And obviously they don't release the exact details of that.

479
00:29:27,448 --> 00:29:30,946
So there won't be like in three months time you can request them or six

480
00:29:30,968 --> 00:29:34,914
months time. Or if it's provisioned on so many other servers that

481
00:29:34,952 --> 00:29:38,146
it's unavailable that they don't tell you how to circumvent it,

482
00:29:38,168 --> 00:29:42,054
essentially. But this demo is going absolutely fantastic because

483
00:29:42,092 --> 00:29:44,440
we haven't found a single match yet.

484
00:29:46,890 --> 00:29:50,282
But yes, they won't tell you how to circumvent it. You could probably

485
00:29:50,336 --> 00:29:53,686
do a little bit of research into it. So sometimes this will work straight

486
00:29:53,718 --> 00:29:57,050
away. Sometimes it's a bit of a long brute force.

487
00:29:59,150 --> 00:30:02,198
I might see this running. Oh, there we go. Okay, so we finally got the

488
00:30:02,224 --> 00:30:05,982
first one. So DNS 99, we have managed to

489
00:30:06,036 --> 00:30:09,214
put that zone onto that. So I've just obviously picked a domain there.

490
00:30:09,252 --> 00:30:13,066
So that is how you would attack. And then we've

491
00:30:13,098 --> 00:30:14,960
also got seven six six now.

492
00:30:16,370 --> 00:30:19,218
And if we go back, I move the head out of the way and go

493
00:30:19,224 --> 00:30:22,498
back into AWS. We might push against the rate limit in here.

494
00:30:22,584 --> 00:30:25,490
Yeah, so we can see the zones it's created.

495
00:30:26,470 --> 00:30:29,734
And then of these some of them will have the correct

496
00:30:29,852 --> 00:30:33,218
name server records, which is what we're after. So we've

497
00:30:33,234 --> 00:30:37,560
brute forced that and now we've managed to take over that NS record.

498
00:30:39,050 --> 00:30:41,110
I'm just going to stop this python script.

499
00:30:44,010 --> 00:30:47,434
Okay. An attacker can

500
00:30:47,472 --> 00:30:51,194
either take over a particular domain or with the NS record, take over

501
00:30:51,392 --> 00:30:54,558
all the subdomains beneath it. So what can they do with that?

502
00:30:54,724 --> 00:30:58,606
So the first obvious one is credible phishing links. We tell our users and

503
00:30:58,628 --> 00:31:02,758
our customers to make sure to check that the links that they get purporting

504
00:31:02,794 --> 00:31:06,526
to come from us are legitimate. And that's

505
00:31:06,558 --> 00:31:09,886
a huge part of the human layer

506
00:31:09,918 --> 00:31:13,582
of defense against phishing and malware. These are legitimate,

507
00:31:13,646 --> 00:31:17,106
taking over domains from hacker one. So hacker one

508
00:31:17,208 --> 00:31:20,242
is a bug bounty platform and they do a lot of public disclosure.

509
00:31:20,306 --> 00:31:23,926
So if someone takes over a subdomain via that platform, they'll get

510
00:31:23,948 --> 00:31:27,746
a reward and ask the company if these can disclose.

511
00:31:27,778 --> 00:31:29,686
So you can go on there and just go through some of the ones that

512
00:31:29,708 --> 00:31:33,546
have been taken over. So these are legitimate ones. So the Uber one

513
00:31:33,568 --> 00:31:36,860
I think is really interesting. So signup uber.com, if you got

514
00:31:37,230 --> 00:31:43,818
an email from Uber saying you've

515
00:31:43,914 --> 00:31:47,098
signed up to Uber and you owe

516
00:31:47,114 --> 00:31:50,990
us $50 for sign up now and get $100 free Uber things,

517
00:31:51,060 --> 00:31:54,926
et cetera, and it's legitimate URL, there's like no way that you can see

518
00:31:54,948 --> 00:31:59,218
that it's not legitimate, then you're probably going to be more susceptible to it.

519
00:31:59,384 --> 00:32:02,786
So that's the first thing. Incredible phishing links. When we look at

520
00:32:02,808 --> 00:32:07,054
NS takeover, we have a slightly different vector

521
00:32:07,102 --> 00:32:10,614
there. So now we've got the ability to send

522
00:32:10,652 --> 00:32:13,874
and receive mail from those domains because we can control all the records.

523
00:32:13,922 --> 00:32:17,046
So we briefly touched upon different types of records. One's MX for

524
00:32:17,068 --> 00:32:20,646
mail here. Again, these are the legitimate

525
00:32:20,678 --> 00:32:24,282
URLs taken over. So help at signup uber.com.

526
00:32:24,336 --> 00:32:28,122
So maybe we're going to send an email now from signup uber.com saying,

527
00:32:28,176 --> 00:32:31,626
oh, you've signed up, here's some money.

528
00:32:31,728 --> 00:32:35,066
Was this definitely you sort of thing? You can respond

529
00:32:35,098 --> 00:32:38,506
to that email and the attacker can then respond to you. And it's all legitimate

530
00:32:38,538 --> 00:32:41,646
and it's not like a weird spoofed email address.

531
00:32:41,828 --> 00:32:45,346
So there's obviously a huge amount of power there in what you can do

532
00:32:45,368 --> 00:32:49,234
with the takeovers. And these, this last attack vector is

533
00:32:49,272 --> 00:32:53,106
the most interesting and it does require almost a

534
00:32:53,128 --> 00:32:56,678
second misconfiguration with some cookies on

535
00:32:56,684 --> 00:32:59,990
a web app. But again, it's something we see that's relatively common,

536
00:33:00,060 --> 00:33:03,794
particularly on microservice apps which span multiple

537
00:33:03,842 --> 00:33:07,746
subdomains. So let's briefly cover what are lucid scope cookies

538
00:33:07,778 --> 00:33:11,370
and why you should care about that. So this is the punk security

539
00:33:11,440 --> 00:33:14,346
website and I've just brought up the cookie tab so you can see what's going

540
00:33:14,368 --> 00:33:18,054
on in our cookies. So we use calendarly for some calendar

541
00:33:18,102 --> 00:33:21,654
scheduling and Cloudflare have handily

542
00:33:21,702 --> 00:33:24,958
added a token, presumably for some traffic steering or something.

543
00:33:25,044 --> 00:33:28,606
So we've got free cookies on our website there and you

544
00:33:28,628 --> 00:33:32,014
can see that on the domain column there. They all start

545
00:33:32,052 --> 00:33:35,694
with a dot, not sure if that's coming out on the video. So it's calendar.com

546
00:33:35,732 --> 00:33:39,074
is the domain and then we've got punk security Co.

547
00:33:39,112 --> 00:33:42,238
UK and that starts with a dot as well. So these cookies,

548
00:33:42,334 --> 00:33:46,502
this is legitimate website, these cookies are loosely scoped. So because that

549
00:33:46,636 --> 00:33:50,258
starts with a dot on the domain, any subdomain

550
00:33:50,434 --> 00:33:53,734
that a user goes to, so dev Punkcurity Co.

551
00:33:53,772 --> 00:33:58,234
UK will receive those cookies. So this

552
00:33:58,272 --> 00:34:02,314
is an important issue

553
00:34:02,352 --> 00:34:05,930
for security. So if there wasn't a dot there, that cookie which is sent

554
00:34:06,000 --> 00:34:09,354
automatically without any user interaction, that cookie would only

555
00:34:09,392 --> 00:34:12,506
get sent to people visiting Punkcurity Co. UK.

556
00:34:12,538 --> 00:34:16,814
They went to www dot, they wouldn't get it. So if you've got

557
00:34:17,012 --> 00:34:20,890
a misconfiguration in your app, or a poor misguided

558
00:34:20,970 --> 00:34:24,234
misconfiguration, you might say that an auth session token

559
00:34:24,362 --> 00:34:27,698
is required on different parts of your app. It's needed on the forum and the

560
00:34:27,704 --> 00:34:31,934
blog. So they go to Orf and they get a session token scoped

561
00:34:31,982 --> 00:34:35,042
to app.com, whatever your app is called.

562
00:34:35,176 --> 00:34:39,286
And now wherever domain they go to, that cookie goes over and

563
00:34:39,388 --> 00:34:42,758
that's login again. That's all just they get the session token and

564
00:34:42,764 --> 00:34:46,134
they can consume those services and you know who they are, which sounds

565
00:34:46,172 --> 00:34:49,754
idyllic, but actually means that if an attacker takes over any

566
00:34:49,792 --> 00:34:53,802
single subdomain, then the

567
00:34:53,856 --> 00:34:57,606
session cookies of the user are going to flow that way. So let's

568
00:34:57,638 --> 00:35:01,900
just see that visually so we fully understand what's going on there.

569
00:35:03,250 --> 00:35:06,586
So as I say, if an attacker

570
00:35:06,618 --> 00:35:10,186
was to take over a single subdomain, and these lucid scope cookies are punk Security

571
00:35:10,218 --> 00:35:13,678
Co. Uk for sessions that you just logged in, then as an attacker, if I

572
00:35:13,684 --> 00:35:17,026
can just trick a person to go into punk Security Co. UK, I can get

573
00:35:17,048 --> 00:35:21,154
those cookies and it can be as simple as I'll put

574
00:35:21,192 --> 00:35:25,874
an image tag somewhere. So maybe

575
00:35:25,912 --> 00:35:29,550
I go on another website and I

576
00:35:29,640 --> 00:35:33,106
pop an image tag on there that says go and get this image from Docs

577
00:35:33,138 --> 00:35:36,518
punk Security Co. UK it's an image of a cat meme or something,

578
00:35:36,604 --> 00:35:40,358
so it renders, the person doesn't really realize what's going on there, but actually

579
00:35:40,524 --> 00:35:43,666
their browsers made a web request over to Docs Punecurity Co.

580
00:35:43,708 --> 00:35:47,146
UK and when it's done that it's sent all the cookies. So just by having

581
00:35:47,168 --> 00:35:50,570
an image tag we can steal their session tokens.

582
00:35:51,310 --> 00:35:54,526
So there's a lot of danger to lucid scope cookies when

583
00:35:54,548 --> 00:35:58,494
we talk about subdomain takeovers. So let's have a look at what

584
00:35:58,692 --> 00:36:02,560
that looks like. So in this demo, which I think we should

585
00:36:03,990 --> 00:36:08,062
not play automatically this time, what I've done is I've just spoofed

586
00:36:08,126 --> 00:36:10,210
host records, for example.

587
00:36:11,270 --> 00:36:14,938
So this is example and these haven't got any cookies.

588
00:36:15,054 --> 00:36:17,990
So what we're going to do is we're going to add a cookie.

589
00:36:20,250 --> 00:36:22,790
So let's go in here and we'll create a cookie,

590
00:36:23,690 --> 00:36:27,800
called it now an orph cookie and

591
00:36:28,570 --> 00:36:32,198
give it a value. Now the domain there has been tightly scoped out these box.

592
00:36:32,284 --> 00:36:35,098
So as you read that cookie into the dev console it doesn't start with a

593
00:36:35,104 --> 00:36:38,842
dot. So it'll only ever go to example. So we

594
00:36:38,896 --> 00:36:41,500
put a dot in front of it now to loosely scope it.

595
00:36:45,800 --> 00:36:48,916
Just get that done. So we changed

596
00:36:48,948 --> 00:36:52,616
it now so that cookie goes to anything example. Then what

597
00:36:52,638 --> 00:36:56,148
we've done is we've aimed the host file here, we've just pretended we've

598
00:36:56,164 --> 00:36:59,524
got a subdomain takeover in the example DNS

599
00:36:59,572 --> 00:37:02,708
space. So see that now we got a quick python web server

600
00:37:02,724 --> 00:37:06,056
and all that does is it's going to dump out the headers. We get when

601
00:37:06,158 --> 00:37:09,552
people browse that page it's a really trivial thing to do.

602
00:37:09,606 --> 00:37:14,012
So we're going to now browse the takeover subdomain

603
00:37:14,076 --> 00:37:16,704
site. So here we go,

604
00:37:16,742 --> 00:37:20,336
subdomain example. As soon

605
00:37:20,358 --> 00:37:22,768
as we do that, I'll highlight it. These on the left you can see the

606
00:37:22,774 --> 00:37:25,300
cookie came over of cookie equals secret.

607
00:37:25,720 --> 00:37:29,424
So as soon as they browse that we haven't done anything. There's no weird Javascript

608
00:37:29,472 --> 00:37:32,756
going on. As soon as you browse that you get the cookie. If I go

609
00:37:32,778 --> 00:37:35,828
in here now and remove the dot so the cookie

610
00:37:35,844 --> 00:37:41,176
is scoped only to that domain and refresh these page and

611
00:37:41,198 --> 00:37:44,328
then just let the terminal run. You see the cookie is gone.

612
00:37:44,494 --> 00:37:48,732
So in the case these we've got a Luciscope cookie subdomain attacks become much

613
00:37:48,786 --> 00:37:52,536
more problematic because now we can start to leverage a subdomain

614
00:37:52,568 --> 00:37:55,660
takeover with the Lucid scope cookie attack and then

615
00:37:55,730 --> 00:37:59,116
vulnerability. And now we've got a much bigger attack. We can start stealing session tokens,

616
00:37:59,148 --> 00:38:01,810
et cetera, and targeting the app that way.

617
00:38:08,580 --> 00:38:11,776
Okay, so that is the two attack vectors that we

618
00:38:11,798 --> 00:38:15,430
were looking at, which is taking over a generic SaaS service

619
00:38:15,960 --> 00:38:19,152
behind a subdomain and then doing an NS takeover

620
00:38:19,216 --> 00:38:22,928
attack. And then we've looked at what an attacker can do with these subdomains

621
00:38:22,944 --> 00:38:26,312
once they've got them. So how do we defend against it?

622
00:38:26,366 --> 00:38:29,448
So DNS hygiene is really important.

623
00:38:29,534 --> 00:38:33,304
So this just typically doesn't happen. DNS is quite

624
00:38:33,342 --> 00:38:36,852
often in almost all organizations seen as a set and forget.

625
00:38:36,996 --> 00:38:40,184
So you'll go and configure it, but you're never tidied up afterwards.

626
00:38:40,312 --> 00:38:43,310
It's just a chore that doesn't happen. It's not seen as an issue.

627
00:38:45,280 --> 00:38:48,956
So just auditing DNS and maybe having a removal

628
00:38:48,988 --> 00:38:53,212
process is a good place to start bug bounty

629
00:38:53,276 --> 00:38:56,896
programs. So as I mentioned earlier, the hacker one program, there are

630
00:38:56,918 --> 00:39:00,364
other programs, there are researchers

631
00:39:00,492 --> 00:39:03,076
who will be looking for this sort of stuff. So you can get on that

632
00:39:03,098 --> 00:39:06,516
program, put a nominal fee reward on

633
00:39:06,538 --> 00:39:09,510
there, and people will report it when they see it.

634
00:39:11,400 --> 00:39:14,856
Extending pen testing scopes. So this is a real passionate point of

635
00:39:14,878 --> 00:39:18,424
mind, particularly coming from the DevOps side. Pen testing is still

636
00:39:18,462 --> 00:39:22,068
very much focused on web app big ticket Oauth

637
00:39:22,084 --> 00:39:25,576
top ten attacks or infra attacks with vulnerability scanning and

638
00:39:25,598 --> 00:39:29,464
those sort of things. We still don't see much traction on pen

639
00:39:29,502 --> 00:39:32,696
tests for looking at what's the state of your git

640
00:39:32,728 --> 00:39:35,704
repos, what's the state of your file servers, what's the state of your DNS,

641
00:39:35,752 --> 00:39:39,040
all these auxiliary services you've got, how are they configured and actually

642
00:39:39,110 --> 00:39:42,316
are they open to abuse? So extending pen testing

643
00:39:42,348 --> 00:39:46,224
scope is something I hope to see.

644
00:39:46,422 --> 00:39:50,076
And then we at punk security have built a tool called DNS

645
00:39:50,108 --> 00:39:54,168
Reaper to automate the process of finding these attacks.

646
00:39:54,284 --> 00:39:58,132
So when we looked at the GitHub pages tag, for instance, we said,

647
00:39:58,186 --> 00:40:01,716
actually there's a few ips that it might be for GitHub pages, and the

648
00:40:01,738 --> 00:40:05,340
page has got some fairly static content on there. To say that there's no Gitl

649
00:40:05,360 --> 00:40:09,368
pages site here, well, that's obviously dead easy to programmatically check.

650
00:40:09,454 --> 00:40:13,320
So we've got around 60 signatures now on DNS Reaper,

651
00:40:14,060 --> 00:40:17,384
and that's essentially what it does. Does DNS checks and it

652
00:40:17,422 --> 00:40:20,776
does web checks correlate the two to see if there's

653
00:40:20,888 --> 00:40:23,950
a potential attack vector that you need to just have a look at.

654
00:40:24,480 --> 00:40:27,550
So I'm going to quickly go on to DNS Reaper now.

655
00:40:28,400 --> 00:40:31,696
So it's a docker container. It is a python based tool.

656
00:40:31,718 --> 00:40:34,192
So you can run it in Python if you want. But we always advocate running

657
00:40:34,246 --> 00:40:37,200
in docker. That's what's good for functional testing.

658
00:40:39,060 --> 00:40:41,968
I will say DNS, completely open source by the way, so feel free to fork

659
00:40:41,984 --> 00:40:45,284
it, extend it, raise issues, there's no

660
00:40:45,482 --> 00:40:49,392
paid for model to it, there's no licensing,

661
00:40:49,456 --> 00:40:52,896
it's just open source. So yes, so DNS,

662
00:40:52,928 --> 00:40:55,028
repeat, you can either give it domains, you can give it a domain in the

663
00:40:55,034 --> 00:40:58,120
command line, you can give it a list of domains in a file,

664
00:40:58,940 --> 00:41:02,072
or you can have it fetch them. So really the power is in fetching them.

665
00:41:02,126 --> 00:41:06,116
So if you run it in AWS, you can just in like an ECS

666
00:41:06,148 --> 00:41:09,900
container or something, or an EC two, you can just have it assume a role

667
00:41:10,480 --> 00:41:13,212
and it will try and do that actually just out of the box.

668
00:41:13,346 --> 00:41:16,744
Or if it's azure Cloudflare, you basically give it API keys,

669
00:41:16,792 --> 00:41:19,800
it will go into your environment, it will pull all your DNS records,

670
00:41:19,880 --> 00:41:23,484
so you haven't got to really worry about it. You can run on a daily

671
00:41:23,532 --> 00:41:26,956
schedule, for instance. So it gets domains,

672
00:41:26,988 --> 00:41:30,752
effectively gets all those records and it tests them, as I say, with nearly 60

673
00:41:30,806 --> 00:41:34,404
signatures. And we pattern match the records to say, does it match this

674
00:41:34,442 --> 00:41:38,324
criteria for what signature this might

675
00:41:38,362 --> 00:41:41,524
be? And then we have a look at the web response. So false positive rate

676
00:41:41,562 --> 00:41:45,536
is really, really low. And then it just outputs

677
00:41:45,568 --> 00:41:48,036
nicely as a screen to say if you've got any attacks, we'll see that in

678
00:41:48,058 --> 00:41:51,176
a second. And you also get a CSV and adjacent output. So if you did

679
00:41:51,198 --> 00:41:54,328
want as a pen tester, if you were bringing this into the scope of what

680
00:41:54,334 --> 00:41:58,136
you were doing, or you just wanted a one time audit, CSV, open it in

681
00:41:58,158 --> 00:42:01,196
excel or Google sheets and you can have a look at that data if

682
00:42:01,218 --> 00:42:04,396
you want to be programmatic with it, obviously you've got JSOn there, so you can

683
00:42:04,418 --> 00:42:07,628
then pivot the data. So what

684
00:42:07,634 --> 00:42:11,360
are the use cases for DNS repo or auditing? DNS configuration

685
00:42:11,940 --> 00:42:15,456
typically we see an organization will be carrying a huge amount of

686
00:42:15,478 --> 00:42:18,704
debt. So actually a DNS attack might

687
00:42:18,742 --> 00:42:21,972
not come back for three months,

688
00:42:22,026 --> 00:42:25,652
six months. There's a low likelihood that a service goes

689
00:42:25,706 --> 00:42:28,912
through this process or gets decommissioned,

690
00:42:29,056 --> 00:42:32,916
but actually they've not been checked for ten years. So can

691
00:42:32,938 --> 00:42:36,368
initial audit is generally quite fruitful. You can use it to scan

692
00:42:36,384 --> 00:42:39,956
for bounty. People are doing this on bubba platforms, they're using this as a detection

693
00:42:39,988 --> 00:42:44,120
engine, start up about 1600 stars. Now on GitHub

694
00:42:44,460 --> 00:42:48,116
it's quite a popular tool, about 1500 docker pools

695
00:42:48,308 --> 00:42:51,516
and then prevent bad deployment. So it is built to run in these pipeline as

696
00:42:51,538 --> 00:42:54,952
well. So what you can do as part of your deployment is you would update

697
00:42:55,096 --> 00:42:58,536
AWS rooted free, for instance, get to do the scan,

698
00:42:58,568 --> 00:43:02,764
it will file the pipeline. If it detects a detection,

699
00:43:02,892 --> 00:43:06,028
detects a takeover opportunity, you can then go nit

700
00:43:06,044 --> 00:43:09,536
that in the bud. If you're doing blue green DNS deployments, which we don't see

701
00:43:09,558 --> 00:43:12,736
that often, but there's a potential there for really risk

702
00:43:12,768 --> 00:43:16,820
conscious organizations with particularly dedicated

703
00:43:17,480 --> 00:43:21,504
threat actors. You could do a blue green deployment where you update DNS.

704
00:43:21,632 --> 00:43:25,016
DNS Reaper will pull your records in and treat them as if they are the

705
00:43:25,038 --> 00:43:28,650
live records. Scan it and you could prevent that

706
00:43:29,340 --> 00:43:32,730
switchover of zone. So that's another option.

707
00:43:33,820 --> 00:43:37,656
What we also typically see with DNS, just to go back to that, is that

708
00:43:37,758 --> 00:43:40,830
when you make a change because of the way DNS caching works,

709
00:43:41,760 --> 00:43:45,388
if you add a record, people can access it pretty much straight away. But if

710
00:43:45,394 --> 00:43:47,390
you were to remove a record,

711
00:43:48,560 --> 00:43:51,456
then that can be quite slow because it's cached, people will still be able to

712
00:43:51,478 --> 00:43:55,264
resolve it. So there's a potential that we can catch situations before they

713
00:43:55,302 --> 00:43:57,120
turn into attacks.

714
00:43:58,980 --> 00:44:02,208
So this is what DNS Reaper looks like. So a bit of ascii art,

715
00:44:02,294 --> 00:44:05,796
you can see all the providers there. So we support zone transfer. If you've got

716
00:44:05,898 --> 00:44:09,424
traditional DNS server running bind or windows enable zone

717
00:44:09,472 --> 00:44:12,916
transfer, whitelist the IP that DNS Reaper is coming from,

718
00:44:13,018 --> 00:44:16,468
because that's all what zone transfers need. And we'll just fetch all your records via

719
00:44:16,484 --> 00:44:20,596
zone transfer and test them. You can provide a file where we load domains

720
00:44:20,628 --> 00:44:24,116
in, you can have it connect to Cloudflare and fetch

721
00:44:24,148 --> 00:44:27,572
those AWS exactly the same. Same with digitalocean and azure.

722
00:44:27,636 --> 00:44:31,176
So we'll fetch all those records. You can provide a bind file. So if you've

723
00:44:31,208 --> 00:44:34,716
got a service like Godaddy or something, and we haven't got a provider for it,

724
00:44:34,738 --> 00:44:38,536
but they support bind export, you can export it and feed it into Reaper

725
00:44:38,568 --> 00:44:41,804
and we'll scan it that way. There's lots of different

726
00:44:41,842 --> 00:44:44,848
ways that you can get Reaper to ingest domains to try and save you a

727
00:44:44,854 --> 00:44:48,156
bit of effort when you're doing an audit. And then this is what the output

728
00:44:48,188 --> 00:44:51,956
looks like. So we've got these records from AWS. This is

729
00:44:51,978 --> 00:44:55,456
actually the attack we demoed, and then we've got the same record reported

730
00:44:55,488 --> 00:44:59,424
twice, just because there's one with a potential confidence.

731
00:44:59,552 --> 00:45:03,616
So what's happened there is, we've noticed there's

732
00:45:03,648 --> 00:45:07,380
a NS record provided and when we connect to that DNS server,

733
00:45:07,460 --> 00:45:10,888
DNS server knows nothing about it. So there's a potential that we can

734
00:45:10,894 --> 00:45:14,024
take that over. We see quite a lot that when

735
00:45:14,062 --> 00:45:17,464
that happens, maybe the DNS server you're pointing at

736
00:45:17,582 --> 00:45:20,676
is like an elastic IP or something in someone's

737
00:45:20,708 --> 00:45:23,736
infrastructure that no way can attacks is going to be able to control and therefore

738
00:45:23,768 --> 00:45:26,908
it's not a real thing. But it could be a SaaS service we haven't got

739
00:45:26,914 --> 00:45:30,416
another signature for. So we get a potential finding, there's an

740
00:45:30,438 --> 00:45:33,788
ARG switch, you can disable potential findings and then we've

741
00:45:33,804 --> 00:45:37,836
got the confirmed one. So actually not only did we notice that that DNS

742
00:45:37,868 --> 00:45:41,004
server knew nothing about it, it maps the AWS

743
00:45:41,052 --> 00:45:44,404
signature and we know that AWS is a SaaS provider for rooted free

744
00:45:44,442 --> 00:45:48,304
DNS and you can take it over. So we've got a confirmed finding.

745
00:45:48,432 --> 00:45:51,908
So quite useful to keep potentials on. But if

746
00:45:51,914 --> 00:45:55,476
you did want less noise on the output, you could toggle it off.

747
00:45:55,658 --> 00:45:59,016
We say yeah, run it with it on, and then the CSV, if there's too

748
00:45:59,038 --> 00:46:02,728
much noise you can just say don't do potentials. As you can

749
00:46:02,734 --> 00:46:06,590
see, it did that in 1.68 seconds. It is really fast to do this.

750
00:46:06,960 --> 00:46:10,876
I've never tested an organization that's taken more than

751
00:46:10,898 --> 00:46:14,168
about six or 7 seconds. There's no concern,

752
00:46:14,264 --> 00:46:18,190
don't disable potential to save time because it's really fast.

753
00:46:19,920 --> 00:46:23,224
So as I say, it's on GitHub, these was taken a few months ago,

754
00:46:23,282 --> 00:46:26,812
sits on one and a half thousand stars at this point. All the documentation

755
00:46:26,876 --> 00:46:29,724
is on there. So if you want to set it up for AWS or Cloudflare,

756
00:46:29,772 --> 00:46:33,136
you go into that docs folder and there'll be a guide for how to set

757
00:46:33,158 --> 00:46:36,436
it up. So this is the AWS one. This is basically the minimum permissions you

758
00:46:36,458 --> 00:46:39,620
need, which is just to get and list some DNS records.

759
00:46:40,600 --> 00:46:43,828
So you can just create the role, you can feed the AWS keys, but as

760
00:46:43,834 --> 00:46:46,872
I say, if you run it in AWS in an AWS pipeline or

761
00:46:46,926 --> 00:46:50,216
ECS or EC two, you can just assume that

762
00:46:50,238 --> 00:46:53,624
role through standard sort of boto free python means

763
00:46:53,822 --> 00:46:56,510
you haven't got to worry about providing keys and stuff.

764
00:46:57,760 --> 00:47:00,620
So yeah, that's all documented on GitHub.

765
00:47:02,640 --> 00:47:06,668
So that is the end of these evening's talk.

766
00:47:06,834 --> 00:47:10,972
So what are subdomains, how does DNS work? What are subdomains,

767
00:47:11,036 --> 00:47:14,556
how do we take them over? With two different attack methods, a couple of demos

768
00:47:14,588 --> 00:47:18,076
for doing those attacks obviously brute forcing rooted

769
00:47:18,108 --> 00:47:21,488
free earlier and why you should care and what you can

770
00:47:21,494 --> 00:47:24,788
do about it. And hopefully go and have a look at DNS Reaper. Go and

771
00:47:24,794 --> 00:47:28,148
have a look at your own DNS. But you save yourself a bit

772
00:47:28,154 --> 00:47:31,736
of time with DNS Reaper and hopefully we see less of

773
00:47:31,738 --> 00:47:35,350
these attacks as we go forward.

774
00:47:35,800 --> 00:47:39,284
There's a bit of a shameless plug as well. Punk security. To celebrate

775
00:47:39,332 --> 00:47:41,716
our second birthday this year we're doing a devsecops theme,

776
00:47:41,748 --> 00:47:45,636
CTF. So if anyone was up for that, that's on may

777
00:47:45,678 --> 00:47:49,390
the fourth. So that's the 4 may

778
00:47:50,080 --> 00:47:54,284
this year. So what's that? That is just about these

779
00:47:54,322 --> 00:47:57,588
and a half months away now. And yeah, devsecops these. So there'll

780
00:47:57,624 --> 00:48:01,116
be subdomain takeovers, attacks, they'll be abusing SaaS

781
00:48:01,148 --> 00:48:05,072
services, AWS, abusing access keys and

782
00:48:05,126 --> 00:48:08,320
looking to do stuff that way. Kubernetes breakouts.

783
00:48:08,740 --> 00:48:12,672
We've got rather than traditional CTF challenges

784
00:48:12,736 --> 00:48:16,036
around passwords, we're doing cracking jwts and

785
00:48:16,058 --> 00:48:19,556
ansible vaults and traditional these

786
00:48:19,578 --> 00:48:23,536
hack. If anyone's ever done a CTF before, they are basically bite

787
00:48:23,568 --> 00:48:27,604
sized challenges to get you exposed to technology with a security theme.

788
00:48:27,732 --> 00:48:30,996
And in this one we're going to be focusing devsecops.

789
00:48:31,028 --> 00:48:34,600
So how to abuse things in git, how to abuse CI CD

790
00:48:35,500 --> 00:48:38,090
and all those sort of things. So hopefully it's going to be really good.

791
00:48:38,860 --> 00:48:42,804
And yeah, if you can make it, that's may the fourth shameless

792
00:48:42,852 --> 00:48:45,944
plug. Our website is down there at the bottom, right? Yeah, you can go over

793
00:48:45,982 --> 00:48:49,324
there and get some more it on the CTF as we release

794
00:48:49,372 --> 00:48:52,930
it. Thank you very much

795
00:48:54,180 --> 00:48:58,016
for attending. Any questions at all, reach out to me on

796
00:48:58,038 --> 00:49:00,992
the Discord channel and yeah,

