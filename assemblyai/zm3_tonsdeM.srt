1
00:00:39,170 --> 00:00:42,534
Everyone, my name is Michael Zion. I'm the co

2
00:00:42,572 --> 00:00:46,626
founder and CTO at Meteorops. We are a DevOps

3
00:00:46,658 --> 00:00:50,286
services company, and I'm here to talk to

4
00:00:50,308 --> 00:00:54,798
you today about DevOps course,

5
00:00:54,964 --> 00:00:59,310
but more specifically, a handbook that I created for

6
00:00:59,460 --> 00:01:03,218
ctos mostly, but actually

7
00:01:03,304 --> 00:01:06,660
it's for anyone that wants to understand,

8
00:01:08,310 --> 00:01:12,226
in simple words, what's DevOps and

9
00:01:12,408 --> 00:01:16,466
wants CTO get simple principles

10
00:01:16,578 --> 00:01:19,350
in order to make decisions easily.

11
00:01:19,770 --> 00:01:23,606
And hopefully by the end of this talk, you'll have

12
00:01:23,708 --> 00:01:27,602
a bunch of principles that are useful with

13
00:01:27,676 --> 00:01:31,610
some examples of what you should be doing

14
00:01:31,680 --> 00:01:35,242
and when. And, yeah, let's jump right into

15
00:01:35,296 --> 00:01:38,502
it. So maybe you are a CTO,

16
00:01:38,566 --> 00:01:42,174
maybe you're a DevOps engineer, maybe you're VPR and D in your

17
00:01:42,212 --> 00:01:45,934
company. Either way, this handbook is

18
00:01:45,972 --> 00:01:49,040
useful. Hopefully it's useful for you.

19
00:01:52,630 --> 00:01:56,850
Okay, so the goals, it's mostly

20
00:01:57,670 --> 00:02:01,042
to understand what's DevOps in simple words.

21
00:02:01,176 --> 00:02:04,942
And why am I saying in simple words? Because for some

22
00:02:05,016 --> 00:02:05,640
reason,

23
00:02:08,010 --> 00:02:11,110
with every role in the R D organization,

24
00:02:12,090 --> 00:02:16,146
if you ask someone what this role is and someone gives you a definition,

25
00:02:16,338 --> 00:02:20,166
no problem. But with DevOps, try telling someone what DevOps

26
00:02:20,198 --> 00:02:24,074
is. Somehow it's controversial. People will

27
00:02:24,112 --> 00:02:28,042
tell you, no, it's something else. Every company

28
00:02:28,096 --> 00:02:31,822
whats its own philosophy. So I'm aiming to give you a very simple,

29
00:02:31,956 --> 00:02:36,314
very common definition and practical

30
00:02:36,362 --> 00:02:40,318
one as well. I want to tell you what's possible. So many

31
00:02:40,404 --> 00:02:44,186
founders don't know what to expect from DevOps.

32
00:02:44,218 --> 00:02:48,014
They don't know. Okay, so I heard about this thing called DevOps.

33
00:02:48,062 --> 00:02:51,698
I heard it should help me do this and that,

34
00:02:51,784 --> 00:02:55,800
but what should I expect from it? So, what's possible?

35
00:02:56,250 --> 00:03:00,390
And I'll provide you with some simple examples.

36
00:03:00,730 --> 00:03:04,454
And the final thing is when to do what. This is the

37
00:03:04,492 --> 00:03:08,506
principles part. This is the part where I

38
00:03:08,528 --> 00:03:11,946
give you some use cases, and you

39
00:03:11,968 --> 00:03:17,274
can take those use cases and apply those

40
00:03:17,312 --> 00:03:21,094
scenarios in your company. I don't have

41
00:03:21,152 --> 00:03:25,214
everything from the handbook in this talk, so I

42
00:03:25,252 --> 00:03:27,850
do have a link. At the end of the stock,

43
00:03:28,010 --> 00:03:31,806
you can scan the QR and go to the

44
00:03:31,828 --> 00:03:35,810
full handbook. And, yeah, let's jump right into it.

45
00:03:35,960 --> 00:03:39,266
So, first part, understand the desired result.

46
00:03:39,368 --> 00:03:42,738
So, as a software company,

47
00:03:42,904 --> 00:03:46,514
you have two goals. One is

48
00:03:46,552 --> 00:03:50,166
to serve your product to your customers, of course.

49
00:03:50,348 --> 00:03:53,766
And the second goal is in order to

50
00:03:53,788 --> 00:03:58,140
do the first one, you want to be able to build and improve your system

51
00:03:58,670 --> 00:04:02,394
all the time. Okay, so what

52
00:04:02,432 --> 00:04:05,834
do you need in order to be able to build and improve your system?

53
00:04:06,032 --> 00:04:09,580
So, in essence, run experiments and test changes.

54
00:04:11,490 --> 00:04:15,006
When it comes to software engineering, it's computer

55
00:04:15,108 --> 00:04:16,320
science, right?

56
00:04:18,450 --> 00:04:21,802
There's a reference from a lecture of Uncle

57
00:04:21,866 --> 00:04:25,838
Bob. It's the clean code guy. He said he

58
00:04:25,844 --> 00:04:29,060
was talking about Dixta. Diexta is one of the

59
00:04:29,990 --> 00:04:34,334
founding fathers of computer science. And he thought programming

60
00:04:34,382 --> 00:04:37,814
is going to be a mathematical discipline. He thought

61
00:04:37,932 --> 00:04:42,210
people will, programmers will write functions,

62
00:04:42,290 --> 00:04:46,226
mathematically prove them, and then we'll

63
00:04:46,258 --> 00:04:49,558
have sort of a library of mathematically proven

64
00:04:49,654 --> 00:04:53,798
functions which will be used to build more and more elaborate

65
00:04:53,894 --> 00:04:56,460
functions. Of course that's not the case.

66
00:04:57,470 --> 00:05:00,082
We don't mathematically prove functions,

67
00:05:00,166 --> 00:05:03,566
we test them. We treat it as

68
00:05:03,588 --> 00:05:06,862
a science, not as a mathematical discipline. So we

69
00:05:06,916 --> 00:05:10,320
do something and then we test if it works, and if it does,

70
00:05:12,470 --> 00:05:15,890
that's good. So second thing is,

71
00:05:16,040 --> 00:05:20,514
DevOps has a simple meaning. And I

72
00:05:20,552 --> 00:05:24,558
know some people won't agree with this definition,

73
00:05:24,734 --> 00:05:28,690
but I'm using this definition because

74
00:05:28,760 --> 00:05:32,566
I find it useful. Or for so

75
00:05:32,588 --> 00:05:36,786
many companys that adopted this definition,

76
00:05:36,898 --> 00:05:41,126
just found it easier to go forward with DevOps.

77
00:05:41,238 --> 00:05:44,106
So the idea is this,

78
00:05:44,208 --> 00:05:46,170
originally it's a culture,

79
00:05:46,990 --> 00:05:50,860
originally somewhere in 2008.

80
00:05:52,850 --> 00:05:57,066
Whats just about the idea that developers and operators

81
00:05:57,098 --> 00:06:01,854
should work together in practice today the

82
00:06:01,892 --> 00:06:05,378
definition is developers operate system.

83
00:06:05,464 --> 00:06:08,658
And I'll say what it means in a sec, you already see it on the

84
00:06:08,664 --> 00:06:12,302
screen of course. And DevOps engineers enable

85
00:06:12,366 --> 00:06:15,878
developers to operate the system and

86
00:06:16,044 --> 00:06:20,006
to some extent operate the system themselves. So when

87
00:06:20,028 --> 00:06:23,938
I say operate I mean provision.

88
00:06:24,034 --> 00:06:26,594
So provision is creating infrastructure,

89
00:06:26,722 --> 00:06:30,442
resources, et cetera, test, course,

90
00:06:30,576 --> 00:06:34,380
deploy. This means we did something, we want to

91
00:06:36,190 --> 00:06:39,906
push it into the system. So introducing

92
00:06:39,958 --> 00:06:44,080
changes, monitor. So this means seeing the state of the system,

93
00:06:45,970 --> 00:06:49,418
getting alerts for it, et cetera, secure.

94
00:06:49,514 --> 00:06:52,794
So this means limiting the

95
00:06:52,852 --> 00:06:58,034
network access to the system, limiting access

96
00:06:58,152 --> 00:07:00,610
using authentication and authorization,

97
00:07:01,350 --> 00:07:04,926
limiting and preventing any potential issues,

98
00:07:05,048 --> 00:07:09,266
vulnerabilities, et cetera. So next thing is configure.

99
00:07:09,378 --> 00:07:13,254
So configure is just a way

100
00:07:13,292 --> 00:07:17,234
to sort of modify configurations

101
00:07:17,282 --> 00:07:22,694
in your system. This could mean changing

102
00:07:22,742 --> 00:07:28,346
configuration in git, could mean changing configuration in a database or

103
00:07:28,448 --> 00:07:32,366
in any KV store, something of that sort

104
00:07:32,548 --> 00:07:35,966
and scale up and down, scale the system up and

105
00:07:35,988 --> 00:07:39,422
down based on the demand. So taking

106
00:07:39,476 --> 00:07:44,274
all of that, I think some people might already look

107
00:07:44,312 --> 00:07:46,930
at this slide and say this guy is delusional,

108
00:07:47,910 --> 00:07:51,730
developers should do all of that. So I'm saying yes

109
00:07:51,880 --> 00:07:55,494
to some extent, and the DevOps engineers should do

110
00:07:55,532 --> 00:07:58,662
the rest. To some extent. When I say the rest,

111
00:07:58,716 --> 00:08:03,074
I mean both developers and DevOps engineers have responsibility

112
00:08:03,202 --> 00:08:07,142
over operating the system. And every

113
00:08:07,196 --> 00:08:10,826
company chooses the balance between how much the

114
00:08:10,848 --> 00:08:14,140
developers should do it, how much the DevOps engineers should do it.

115
00:08:14,750 --> 00:08:18,458
From this slide, the key thing I want you to take is this words

116
00:08:18,624 --> 00:08:22,494
enable. So the main function of a DevOps engineer is

117
00:08:22,532 --> 00:08:25,726
to enable to operate, okay? So if

118
00:08:25,748 --> 00:08:29,502
you had to take one thing from this slide. So now

119
00:08:29,556 --> 00:08:33,134
choose a balance. We said in the previous

120
00:08:33,182 --> 00:08:36,798
slide, developers operate the system. DevOps engineers enable

121
00:08:36,894 --> 00:08:40,580
developers to operate the system and operate some of it themselves.

122
00:08:41,830 --> 00:08:45,006
And operate some of it themselves. How much do

123
00:08:45,048 --> 00:08:48,774
they operate it? This is choose the balance. So when I say choose

124
00:08:48,812 --> 00:08:53,462
a balance, there are three things within

125
00:08:53,516 --> 00:08:57,358
this balance that you can tweak.

126
00:08:57,474 --> 00:09:00,538
So you can, as a

127
00:09:00,544 --> 00:09:03,914
DevOps engineer, like the DevOps engineer in your company,

128
00:09:04,032 --> 00:09:07,446
can choose how much they enable,

129
00:09:07,558 --> 00:09:10,618
how much they do, how much they automate.

130
00:09:10,714 --> 00:09:14,462
Okay? There's overlap between

131
00:09:14,516 --> 00:09:17,610
these things. So enabler, an enabler

132
00:09:17,690 --> 00:09:21,680
provides tools and knowledge, okay, so a tool could be

133
00:09:22,050 --> 00:09:25,700
ready made, community built tool could be

134
00:09:26,950 --> 00:09:30,190
a tool that some company built and sells.

135
00:09:30,270 --> 00:09:33,474
It could be a script that you built,

136
00:09:33,592 --> 00:09:35,990
any abstraction that exists.

137
00:09:36,330 --> 00:09:40,520
And knowledge, of course, it's the knowledge for how to achieve something.

138
00:09:41,050 --> 00:09:44,498
So that's enabler,

139
00:09:44,674 --> 00:09:46,950
Doer does the tasks,

140
00:09:48,170 --> 00:09:52,070
of course that's the most time consuming for the DevOps engineer

141
00:09:52,230 --> 00:09:56,330
and the least scalable way of doing things because

142
00:09:56,400 --> 00:10:00,038
it's completely relying on the available capacity of the

143
00:10:00,064 --> 00:10:03,040
DevOps engineer in the moment. Okay,

144
00:10:03,650 --> 00:10:07,722
automator. So automating

145
00:10:07,786 --> 00:10:13,566
any repeating tasks. So this means you're

146
00:10:13,598 --> 00:10:17,394
taking some of the stuff that you did and you automate it.

147
00:10:17,592 --> 00:10:20,722
This is before enabling it for someone else,

148
00:10:20,776 --> 00:10:23,060
meaning maybe you,

149
00:10:23,990 --> 00:10:27,234
let's take the example. So a developer asks for DB,

150
00:10:27,362 --> 00:10:30,840
an enabler gives them a script or

151
00:10:31,210 --> 00:10:35,090
some tool to create the database. The doer

152
00:10:35,170 --> 00:10:37,890
just creates the database, goes into the UI,

153
00:10:38,050 --> 00:10:41,590
clicks some stuff and gets the database.

154
00:10:41,670 --> 00:10:45,370
The automator will maybe

155
00:10:45,440 --> 00:10:49,306
create a script, but give it to the developer or

156
00:10:49,488 --> 00:10:53,546
sorry, no, the automator will create a script

157
00:10:53,738 --> 00:10:57,578
and use it himself. So that's one step before the enablement.

158
00:10:57,754 --> 00:11:02,190
Okay, so one principle here is tools

159
00:11:02,950 --> 00:11:06,914
have bigger leverage, better leverage than

160
00:11:06,952 --> 00:11:10,706
knowledge, and enable has

161
00:11:10,808 --> 00:11:14,580
much more leverage than doing so.

162
00:11:15,370 --> 00:11:19,240
If I want you to take one thing from here is

163
00:11:20,170 --> 00:11:23,554
this line, because that's the guidelines principle

164
00:11:23,602 --> 00:11:27,362
for your decision making. And every

165
00:11:27,436 --> 00:11:31,002
company has it differently. Meaning I saw

166
00:11:31,056 --> 00:11:34,682
companies whats just decided to

167
00:11:34,736 --> 00:11:38,106
give developers full freedom and make

168
00:11:38,128 --> 00:11:42,030
sure part of the onboarding process is them learning some tools.

169
00:11:42,610 --> 00:11:46,094
So they went completely with knowledge. I saw some

170
00:11:46,132 --> 00:11:49,550
companies that the DevOps engineer abstracted away everything.

171
00:11:49,700 --> 00:11:52,560
The developers don't need to know anything about it.

172
00:11:52,950 --> 00:11:55,570
And that's another discussion.

173
00:11:56,230 --> 00:11:59,586
The next thing is choose the right tools. So when

174
00:11:59,608 --> 00:12:03,300
I say choose the right tools, this one is

175
00:12:03,750 --> 00:12:06,840
so important, it's about

176
00:12:07,610 --> 00:12:11,062
tackling common use

177
00:12:11,116 --> 00:12:14,390
cases using solutions that were already

178
00:12:14,460 --> 00:12:19,146
built to tackle those use cases. And I

179
00:12:19,168 --> 00:12:22,886
found there to be three things that are the biggest

180
00:12:22,998 --> 00:12:27,050
time savers. One is that the tool

181
00:12:27,120 --> 00:12:31,314
whats native state management built inside, like terraform

182
00:12:31,382 --> 00:12:36,346
does, like Kubernetes does, like Pulumi

183
00:12:36,378 --> 00:12:39,582
does. So just to name a few examples of tools with

184
00:12:39,636 --> 00:12:43,422
state management. And why is it such a time

185
00:12:43,476 --> 00:12:46,740
saver? Because when you operate a system,

186
00:12:47,190 --> 00:12:49,890
as its complexity grows,

187
00:12:50,550 --> 00:12:53,860
understand what the current state is,

188
00:12:54,470 --> 00:12:58,166
is crucial in order to introduce any change. Because if

189
00:12:58,188 --> 00:13:01,382
you don't know if something exists or not,

190
00:13:01,516 --> 00:13:04,886
it's very difficult to make any change to

191
00:13:04,908 --> 00:13:09,234
the system. We know that with Git,

192
00:13:09,282 --> 00:13:12,646
for example, git is a perfect example, right? You want developers

193
00:13:12,678 --> 00:13:16,374
to collaborate, they have to agree on what the source of truth

194
00:13:16,422 --> 00:13:20,686
is. They have to agree on what the truth is. That's the entire idea of

195
00:13:20,868 --> 00:13:24,122
continuous integration. Again, another conversation.

196
00:13:24,186 --> 00:13:28,046
But in order to collaborate, in order to

197
00:13:28,068 --> 00:13:32,206
introduce changes, you need to understand the state. Managing the

198
00:13:32,228 --> 00:13:35,774
state of the system is not trivial. If you don't have native

199
00:13:35,822 --> 00:13:39,554
state management, you'll have to implement it yourself. Second thing, it has

200
00:13:39,592 --> 00:13:42,914
a big community and good docs. Why is

201
00:13:42,952 --> 00:13:46,566
that important? Because when you

202
00:13:46,588 --> 00:13:50,306
stumble upon any issue, if there isn't

203
00:13:50,338 --> 00:13:54,470
a community there that you can get their assistant,

204
00:13:55,050 --> 00:13:58,442
their assistance, and if you have no

205
00:13:58,496 --> 00:14:01,818
good documentation of the issues,

206
00:14:01,984 --> 00:14:05,900
so you'll find yourself solving problems,

207
00:14:06,510 --> 00:14:09,958
that you'll have to

208
00:14:09,984 --> 00:14:13,166
solve them yourself. So the more common a

209
00:14:13,188 --> 00:14:17,082
tool is, the more popular a tool is, the more likely

210
00:14:17,226 --> 00:14:21,280
you are to have solutions or common problems

211
00:14:22,390 --> 00:14:25,810
somewhere. Okay, so that's the idea. Saves time.

212
00:14:25,960 --> 00:14:30,210
Debugging stuff. Whats multiple interface types?

213
00:14:30,550 --> 00:14:34,354
API cliui why is that? This is

214
00:14:34,392 --> 00:14:37,800
because when you use a tool,

215
00:14:38,730 --> 00:14:42,546
it's not the only thing you use. Probably, you're probably using other tools

216
00:14:42,578 --> 00:14:46,102
as well. You might use some scripts to glue stuff,

217
00:14:46,156 --> 00:14:48,540
you might write service cto glue stuff,

218
00:14:49,950 --> 00:14:55,180
you might do all sorts of things. And having

219
00:14:55,870 --> 00:14:59,830
a native interface that you don't have to hack around

220
00:15:00,000 --> 00:15:03,198
in order to understand how it works and

221
00:15:03,364 --> 00:15:07,306
integrate it in non native ways. So having official

222
00:15:07,418 --> 00:15:11,486
APIs or having an

223
00:15:11,508 --> 00:15:15,346
official CLI, having a UI, having all

224
00:15:15,368 --> 00:15:18,910
of those interfaces, makes it easy to integrate

225
00:15:18,990 --> 00:15:22,914
the different parts of the system, which is something you are

226
00:15:22,952 --> 00:15:26,766
most likely going to do. So as

227
00:15:26,808 --> 00:15:29,890
multiple interfaces. So these are the biggest time servers.

228
00:15:30,050 --> 00:15:33,874
Okay, so next up is set useful

229
00:15:33,922 --> 00:15:37,880
goals. What do I mean by set useful goals? I mean

230
00:15:38,510 --> 00:15:41,994
you want to do

231
00:15:42,032 --> 00:15:46,358
DevOps. And of course we gave some abstract

232
00:15:46,454 --> 00:15:49,834
definitions, we gave some practical definitions we

233
00:15:49,872 --> 00:15:54,154
discussed some very practical things, right. But now

234
00:15:54,272 --> 00:15:58,074
what should your goal be? There are some goals

235
00:15:58,122 --> 00:16:01,710
that are derived from the previous things we discussed,

236
00:16:02,630 --> 00:16:05,122
and I'm not going to cover all of these,

237
00:16:05,176 --> 00:16:09,234
but let's take two examples. So one

238
00:16:09,272 --> 00:16:13,214
click environments. So earlier we said software

239
00:16:13,262 --> 00:16:16,226
engineering is a science discipline,

240
00:16:16,338 --> 00:16:20,520
it's a scientific discipline, meaning in order to

241
00:16:21,690 --> 00:16:24,854
understand if your system works or if it

242
00:16:24,892 --> 00:16:28,746
works as expected, you perform a

243
00:16:28,768 --> 00:16:32,634
test, you run an experiment. So one

244
00:16:32,672 --> 00:16:37,514
click environment is something that says, it's a goal that says let's be

245
00:16:37,552 --> 00:16:41,054
able to, we want the ability to create an

246
00:16:41,092 --> 00:16:44,400
entire environment of the system with one click,

247
00:16:45,570 --> 00:16:48,734
run, keypress, you name it. So in some

248
00:16:48,772 --> 00:16:52,366
companies it could be Jenkins pipeline that

249
00:16:52,388 --> 00:16:54,180
creates everything, in other companies,

250
00:16:57,190 --> 00:17:00,674
something else, maybe a script that someone is able

251
00:17:00,712 --> 00:17:04,530
to run. The idea is I want an entire

252
00:17:04,600 --> 00:17:08,166
environment in order to run an experiment in order to introduce a

253
00:17:08,188 --> 00:17:14,166
change to the system. Okay, so another

254
00:17:14,268 --> 00:17:18,002
goal, let's take this example. So split shared and end

255
00:17:18,076 --> 00:17:21,820
specific resources deployment. What does that mean?

256
00:17:22,750 --> 00:17:25,820
So as your company scales up,

257
00:17:27,310 --> 00:17:31,214
let's say you want to run an end to end test on every pull

258
00:17:31,252 --> 00:17:34,858
request. So when your company scales

259
00:17:34,874 --> 00:17:37,918
up, this becomes difficult. Why does it become difficult?

260
00:17:38,004 --> 00:17:41,550
Because deploying an entire environment

261
00:17:42,870 --> 00:17:46,562
is one, it costs a lot as

262
00:17:46,616 --> 00:17:49,860
your company scales, of course. And two,

263
00:17:52,230 --> 00:17:56,134
it might take a lot of time. So let's say

264
00:17:56,332 --> 00:17:59,958
if you create a database, every time you deploy a

265
00:17:59,964 --> 00:18:03,942
new environment, this one click environment. So this

266
00:18:04,076 --> 00:18:06,930
takes time, it takes budget.

267
00:18:07,010 --> 00:18:10,950
So the idea here is let's split

268
00:18:11,030 --> 00:18:13,450
the shared resources.

269
00:18:13,950 --> 00:18:17,286
What could the shared resources be? Database,

270
00:18:17,478 --> 00:18:21,198
the network. Let's say

271
00:18:21,284 --> 00:18:24,766
everything is running on Kubernetes cluster. So the

272
00:18:24,788 --> 00:18:27,998
Kubernetes cluster and the NF specific

273
00:18:28,084 --> 00:18:31,338
resources. So what's the NF specific resources?

274
00:18:31,434 --> 00:18:32,640
That's the application.

275
00:18:34,150 --> 00:18:37,794
Maybe a migration that you can run in order

276
00:18:37,832 --> 00:18:42,914
to create a new database within your

277
00:18:42,952 --> 00:18:46,406
database instance. So the idea here

278
00:18:46,508 --> 00:18:50,422
is when you deploy a new environment, you only deploy the end

279
00:18:50,476 --> 00:18:54,374
specific resources, the shared just

280
00:18:54,572 --> 00:18:57,766
underlying infrastructure that stays there, you deploy

281
00:18:57,798 --> 00:19:01,706
on top of it. So just

282
00:19:01,728 --> 00:19:05,046
to name a few. So atomic commits

283
00:19:05,158 --> 00:19:07,990
and automating local dev to production.

284
00:19:08,150 --> 00:19:10,060
I can elaborate on that.

285
00:19:12,590 --> 00:19:15,742
I'm not going to do it now, just save you some time.

286
00:19:15,796 --> 00:19:19,054
But feel free to reach out and ask me about

287
00:19:19,092 --> 00:19:22,486
it. What does it mean? I'll be available Twitter,

288
00:19:22,538 --> 00:19:25,170
LinkedIn discord.

289
00:19:25,670 --> 00:19:29,362
So I'll be happy to answer

290
00:19:29,416 --> 00:19:32,702
any questions about that. So let's

291
00:19:32,766 --> 00:19:36,806
do some examples. So when to do what? So when

292
00:19:36,988 --> 00:19:39,400
you walk alone and the system is simple,

293
00:19:40,650 --> 00:19:44,786
so you should simplify development. So dockerizing

294
00:19:44,818 --> 00:19:48,250
your application doing some post commit test.

295
00:19:48,400 --> 00:19:52,106
The idea is don't complicate things, just keep it

296
00:19:52,128 --> 00:19:55,354
simple and make it easier for you

297
00:19:55,392 --> 00:19:58,060
to work and introduce changes into the system.

298
00:19:58,830 --> 00:20:01,902
And yeah, I see many

299
00:20:01,956 --> 00:20:06,014
founders this stage writing telephone code and

300
00:20:06,132 --> 00:20:09,626
wondering why. Maybe in some cases it's

301
00:20:09,658 --> 00:20:13,380
justified, but most cases not sure.

302
00:20:13,830 --> 00:20:17,646
So you need new ends quickly for devs,

303
00:20:17,678 --> 00:20:21,570
for clients. Let's say you have a new client, they want a new environment.

304
00:20:22,710 --> 00:20:25,342
If you are b two b startups startup,

305
00:20:25,406 --> 00:20:28,642
maybe it's a hospital and they want it on their

306
00:20:28,696 --> 00:20:32,294
own cloud account for compliance reasons or

307
00:20:32,332 --> 00:20:35,782
whatever. Or maybe it's for developers, they want to

308
00:20:35,916 --> 00:20:39,754
test changes separately. So this is

309
00:20:39,792 --> 00:20:43,434
probably when you want to implement a one click environment. When you have

310
00:20:43,472 --> 00:20:46,250
this demand from developers and clients,

311
00:20:46,990 --> 00:20:50,206
end to end tests become hard. There are

312
00:20:50,228 --> 00:20:54,030
many code changes. So let's say you used to

313
00:20:54,100 --> 00:20:57,470
create an entire environment on pull request

314
00:20:57,810 --> 00:21:00,766
and run an end to end test,

315
00:21:00,948 --> 00:21:04,514
and now it hurts. Now you

316
00:21:04,552 --> 00:21:08,638
have, let's say 30 open pull requests

317
00:21:08,814 --> 00:21:12,514
at any given moment. So if you

318
00:21:12,632 --> 00:21:16,450
deploy a Kubernetes cluster per pull request, of course that's very expensive,

319
00:21:16,530 --> 00:21:20,546
very painful, very slow. So split

320
00:21:20,578 --> 00:21:23,798
your one click environment into shared and

321
00:21:23,884 --> 00:21:26,950
specific resources. So that's the example I gave earlier.

322
00:21:27,470 --> 00:21:32,074
Now your system's complexity increases and

323
00:21:32,272 --> 00:21:35,366
you need to standardize how you operate it. Have a typo.

324
00:21:35,478 --> 00:21:38,906
So that's probably when I

325
00:21:38,928 --> 00:21:41,630
would say implement an orchestrator,

326
00:21:41,970 --> 00:21:45,614
just something that's very useful to standardize different

327
00:21:45,652 --> 00:21:49,742
processes. With something

328
00:21:49,796 --> 00:21:54,100
like kubernetes, there are more when to do what

329
00:21:54,710 --> 00:21:58,610
use cases, and it's all in the

330
00:21:58,680 --> 00:22:02,014
full handbook. Again, you'll have a QR

331
00:22:02,062 --> 00:22:05,654
at the end of the presentation. You can go into

332
00:22:05,692 --> 00:22:09,062
the handbook and see everything there. And again,

333
00:22:09,116 --> 00:22:12,854
feel free to ask me anything. So regarding that

334
00:22:12,892 --> 00:22:16,486
part, of course that's not necessarily the case,

335
00:22:16,588 --> 00:22:20,118
but I'm just oversimplifying it to

336
00:22:20,284 --> 00:22:23,546
sort of get the point across. Let's do

337
00:22:23,568 --> 00:22:27,654
a quick recap. So this is the full CTO

338
00:22:27,702 --> 00:22:31,326
DevOps handbook. You can scan the QR and get to the

339
00:22:31,348 --> 00:22:35,578
original blog post to do a quick recap.

340
00:22:35,754 --> 00:22:40,030
Devs operate. DevOps enable and operate.

341
00:22:40,850 --> 00:22:44,100
You have to choose a balance. The balance is between

342
00:22:44,550 --> 00:22:48,210
an enabler, a doer, and an automator.

343
00:22:48,950 --> 00:22:52,820
I had a nice phrase that

344
00:22:53,670 --> 00:22:56,850
sort of encapsulates this balance.

345
00:22:57,430 --> 00:23:00,866
The phrase goes like this. It's called other phrase,

346
00:23:00,898 --> 00:23:04,982
it's a term, it's called automation. Automation is

347
00:23:05,036 --> 00:23:09,606
sort of choosing the balance between these three goals

348
00:23:09,638 --> 00:23:12,250
are leveraged, use them wisely.

349
00:23:12,590 --> 00:23:15,834
Tools can be a huge time saver. They can

350
00:23:15,872 --> 00:23:20,286
also slow down your operation to

351
00:23:20,308 --> 00:23:23,374
such an extent where it's detrimental for

352
00:23:23,412 --> 00:23:25,950
it. Set useful goals.

353
00:23:26,610 --> 00:23:29,886
So if you want to be able to words,

354
00:23:30,068 --> 00:23:33,300
you have to have goals to work towards

355
00:23:33,670 --> 00:23:37,346
when it comes CTO DevOps there are very useful goals that

356
00:23:37,368 --> 00:23:40,786
you can set and that of course,

357
00:23:40,808 --> 00:23:44,770
they depend on your roadmap, your company's requirements

358
00:23:45,370 --> 00:23:48,706
and so on. So set useful goals.

359
00:23:48,898 --> 00:23:53,042
We mentioned the one click environment, the splitting,

360
00:23:53,186 --> 00:23:56,614
shared and specific resources. And the last

361
00:23:56,652 --> 00:23:59,340
thing is, know when to do what.

362
00:24:00,590 --> 00:24:05,450
Again, there are some more examples over the handbook.

363
00:24:06,030 --> 00:24:09,866
I think that's it. If you want to ask me

364
00:24:09,888 --> 00:24:13,310
anything, you can go

365
00:24:13,380 --> 00:24:17,614
over Twitter. That's my handle. Feel free to

366
00:24:17,812 --> 00:24:21,102
follow and send me a message. And you can also

367
00:24:21,156 --> 00:24:24,494
use this QR code to reach out

368
00:24:24,532 --> 00:24:28,720
to me on LinkedIn. Just say something that starts with,

369
00:24:29,570 --> 00:24:33,390
I was over your talk, I have a question or

370
00:24:33,460 --> 00:24:36,854
I have a note. I know that you came

371
00:24:36,892 --> 00:24:38,520
from here and.

372
00:24:39,370 --> 00:24:42,280
Yeah, I guess that's it.

373
00:24:43,130 --> 00:24:47,126
It was a pleasure giving this talk. I hope I didn't miss

374
00:24:47,148 --> 00:24:51,942
out on anything important. And yeah,

375
00:24:51,996 --> 00:24:55,480
looking forward to hearing from you guys.

376
00:24:56,010 --> 00:24:56,370
Cheers.

