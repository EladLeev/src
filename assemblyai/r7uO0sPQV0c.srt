1
00:01:54,490 --> 00:01:57,982
This post is from Shangping Zhao, the CEO of

2
00:01:58,036 --> 00:02:00,720
world's largest cryptocurrency trading platform.

3
00:02:01,330 --> 00:02:05,494
What he's referring to is one of the largest data each

4
00:02:05,612 --> 00:02:08,470
in terms of number of people affected.

5
00:02:08,970 --> 00:02:12,486
In the summer of this year, a national police database of a

6
00:02:12,508 --> 00:02:16,658
certain country was leaked. This database contained

7
00:02:16,754 --> 00:02:20,540
terabytes of information on a billion people.

8
00:02:20,990 --> 00:02:25,206
The hacker offered to sell the lot for ten bitcoins,

9
00:02:25,398 --> 00:02:28,380
roughly $200,000 at the time,

10
00:02:28,750 --> 00:02:32,062
CZ or Shangbang. Zhao's post came in. Four days

11
00:02:32,116 --> 00:02:35,662
after the hacker's post, a reporter from

12
00:02:35,716 --> 00:02:39,054
Wall Street Journal verified that the leaked information is

13
00:02:39,092 --> 00:02:42,486
valid when they started calling people from that leaked

14
00:02:42,538 --> 00:02:45,806
database. As software professionals,

15
00:02:45,998 --> 00:02:49,694
we might be more interested to learn how this leak

16
00:02:49,742 --> 00:02:52,500
happened and how to prevent this.

17
00:02:52,950 --> 00:02:56,626
Apparently a developer wrote a piece of blog

18
00:02:56,738 --> 00:03:00,802
with valid elasticsearch credentials. This credential

19
00:03:00,866 --> 00:03:05,430
was valid for a year and the service could be accessed publicly.

20
00:03:06,330 --> 00:03:09,914
If that breach doesn't scare you, and you think

21
00:03:09,952 --> 00:03:13,482
that you and your organization are immune to data

22
00:03:13,536 --> 00:03:17,114
breach, I'll recommend checking out this website that

23
00:03:17,152 --> 00:03:20,530
visualizes largest data breaches across the globe.

24
00:03:20,710 --> 00:03:23,854
Welcome to Devsecops 2022 in the

25
00:03:23,892 --> 00:03:27,210
security track. I'm Devon Ahmed with the session,

26
00:03:27,290 --> 00:03:30,858
who's managing the credentials for your data infrastructure.

27
00:03:31,034 --> 00:03:34,962
I'm a developer advocate at Ivan, a company that

28
00:03:35,016 --> 00:03:38,754
builds and manages your data infrastructure based on

29
00:03:38,792 --> 00:03:42,082
open source technologies. I'm from the beautiful

30
00:03:42,216 --> 00:03:45,390
New Brunswick, which is in the east coast of Canada.

31
00:03:45,550 --> 00:03:49,542
For the last ten years I have been focusing on application and data

32
00:03:49,596 --> 00:03:53,442
infrastructure. In my free time. I'm a pro bono

33
00:03:53,506 --> 00:03:57,106
carrier coach. That means I help students and new grads

34
00:03:57,218 --> 00:04:00,540
to start or transition into a carrier in tech.

35
00:04:01,550 --> 00:04:04,650
Now, when we talk about data infrastructure security,

36
00:04:04,800 --> 00:04:08,394
that's a very wide field. There could be issue of

37
00:04:08,432 --> 00:04:11,978
physical access. Someone might run away with the

38
00:04:11,984 --> 00:04:16,046
disks and then there is nothing you can do. Your data services are

39
00:04:16,068 --> 00:04:18,830
running on some physical or virtual machines.

40
00:04:19,650 --> 00:04:23,358
If the host machine is corrupted or compromised,

41
00:04:23,534 --> 00:04:27,154
then the services that are running will be impacted as

42
00:04:27,192 --> 00:04:31,038
well. There could be some SQL injection or insertion

43
00:04:31,134 --> 00:04:33,700
attacks from a web application,

44
00:04:34,230 --> 00:04:37,382
and any of these three might mean you would

45
00:04:37,436 --> 00:04:40,840
have data loss or some backup related issues.

46
00:04:41,290 --> 00:04:44,726
Today, I'm not talking about any of these. I'm talking

47
00:04:44,748 --> 00:04:48,842
about database access. And that is because 80%

48
00:04:48,976 --> 00:04:52,886
of data breaches are the result of poor or reused

49
00:04:52,918 --> 00:04:57,542
passwords. Talking about poor or reused passwords

50
00:04:57,686 --> 00:05:00,880
in the agenda, we have the problem,

51
00:05:01,410 --> 00:05:04,990
the database access. We'll talk about how

52
00:05:05,060 --> 00:05:08,814
dynamic credential can be a solution since

53
00:05:08,852 --> 00:05:12,574
we don't have any limit on the number of choice we have.

54
00:05:12,612 --> 00:05:16,002
I'll talk about the strategy on choosing the right tool.

55
00:05:16,136 --> 00:05:19,474
And finally, the best way to understand something is by

56
00:05:19,512 --> 00:05:22,894
a demo. So let's talk about secret

57
00:05:22,942 --> 00:05:26,994
sprawl. What is secret sprawl? You might have a CI

58
00:05:27,042 --> 00:05:30,870
server running somewhere with your database credential.

59
00:05:31,770 --> 00:05:35,542
Some unhappy employee left the company six months ago

60
00:05:35,676 --> 00:05:39,670
and they might have access to your data infrastructure.

61
00:05:39,830 --> 00:05:43,350
You just don't know where you have your passwords.

62
00:05:43,510 --> 00:05:46,170
This issue is called secret sprawl.

63
00:05:47,790 --> 00:05:51,262
Since we all love to roll our own, you might

64
00:05:51,316 --> 00:05:54,606
be inclined to create an encryption as a

65
00:05:54,628 --> 00:05:57,710
service, although that might not be your business expertise.

66
00:05:58,130 --> 00:06:01,598
So this is another issue where companies

67
00:06:01,764 --> 00:06:05,570
are creating their own custom solutions, including custom

68
00:06:05,640 --> 00:06:09,422
cryptography, whereas there are tons of useful

69
00:06:09,486 --> 00:06:13,506
solutions or products out there. Here's my

70
00:06:13,528 --> 00:06:17,254
favorite. Using the same database password since

71
00:06:17,452 --> 00:06:21,094
forever. And this is password under

72
00:06:21,132 --> 00:06:24,774
the table where everyone sort of knows the password which is using

73
00:06:24,812 --> 00:06:28,410
passed around in the office. And if

74
00:06:28,480 --> 00:06:32,870
you have passed any credential

75
00:06:32,950 --> 00:06:35,866
to an application, that's a bad idea.

76
00:06:36,048 --> 00:06:40,214
Applications are not very good at keeping secrets. The moment they have it,

77
00:06:40,352 --> 00:06:44,670
they're going to leak it to some audit logs,

78
00:06:45,010 --> 00:06:48,334
some sort of outputs, and it

79
00:06:48,372 --> 00:06:50,590
creates a disaster all throughout.

80
00:06:51,410 --> 00:06:55,166
So with that in mind, let's talk about the protection,

81
00:06:55,278 --> 00:06:59,246
the AAA model, which is authentication,

82
00:06:59,438 --> 00:07:03,714
authorization and auditing. It's easier to

83
00:07:03,832 --> 00:07:07,222
use that AAA model to a product

84
00:07:07,276 --> 00:07:11,394
or service that we might be aware of. So let's take Apache

85
00:07:11,442 --> 00:07:15,010
Kafka as an example. How does a or authentication

86
00:07:15,090 --> 00:07:18,682
works with that? So the idea is we have to be able to

87
00:07:18,736 --> 00:07:22,262
properly authenticate Kafka clients to the brokers.

88
00:07:22,326 --> 00:07:26,282
And for that there are two mechanisms. One is using SL

89
00:07:26,416 --> 00:07:29,910
or secure sockets layer, and the second one is

90
00:07:30,080 --> 00:07:33,546
SASL simple authorization service layer.

91
00:07:33,658 --> 00:07:37,086
So with SSL the idea is to issue certificates to your

92
00:07:37,108 --> 00:07:40,960
clients signed by a certificate authority or a CA.

93
00:07:41,730 --> 00:07:45,314
This is the most default or common setup if you're talking to

94
00:07:45,352 --> 00:07:50,206
a managed Kafka cluster. The second one which is SASL.

95
00:07:50,398 --> 00:07:54,318
There's a term simple within the name, but don't be deceived.

96
00:07:54,414 --> 00:07:58,498
It's not that simple. The idea is that the authentication mechanism

97
00:07:58,594 --> 00:08:02,374
is separated from the Kafka protocol. It's popular in

98
00:08:02,412 --> 00:08:05,842
big data systems and most likely if you have Hadoop setup,

99
00:08:05,906 --> 00:08:08,140
you are already leveraging this.

100
00:08:09,310 --> 00:08:13,302
Once your kafka client is authenticated, the brokers

101
00:08:13,366 --> 00:08:16,906
need to decide what they can or cannot do. This is

102
00:08:16,928 --> 00:08:20,750
where authorization come in in the form of ACl or access control

103
00:08:20,820 --> 00:08:24,314
list. The idea is pretty simple. User a can't

104
00:08:24,362 --> 00:08:27,898
do operation b on resource c from host

105
00:08:27,994 --> 00:08:31,306
D. The last a which is auditing.

106
00:08:31,418 --> 00:08:34,882
And you can think of Kafka audit logs. The value

107
00:08:34,936 --> 00:08:38,466
of audit logs is that they provide data you

108
00:08:38,488 --> 00:08:42,462
can use to assess security risks in your kafka clusters.

109
00:08:42,606 --> 00:08:46,086
You can also use a number of sync connectors to move your

110
00:08:46,108 --> 00:08:50,194
audit log data. Let's say an s three bucket so that you can analyze

111
00:08:50,242 --> 00:08:54,326
data. However, there are some challenges to

112
00:08:54,348 --> 00:08:58,210
address with ways in which enterprise handle

113
00:08:58,370 --> 00:09:01,370
tasks related to Apache KafK configuration.

114
00:09:01,790 --> 00:09:05,962
That's why open source projects like Claw can help

115
00:09:06,016 --> 00:09:09,930
to add an audit layer on top of Apache Kafka.

116
00:09:10,370 --> 00:09:14,186
Claw, as a data governance toolkit can manage topics

117
00:09:14,298 --> 00:09:18,078
sels schemas. With Claw, it's easy

118
00:09:18,164 --> 00:09:22,494
to check later who requested what and when the

119
00:09:22,532 --> 00:09:26,178
change went live thanks to the audit logging feature. If you'd like

120
00:09:26,184 --> 00:09:30,210
to know more, check out Clawproject IO.

121
00:09:30,710 --> 00:09:33,506
So now that we talked about the problem,

122
00:09:33,688 --> 00:09:37,862
let's talk about the solution. What is dynamic credential and how can this

123
00:09:37,916 --> 00:09:41,010
be a solution? As the name suggests,

124
00:09:41,170 --> 00:09:45,062
dynamic credentials are generated on demand. They did not

125
00:09:45,116 --> 00:09:48,374
exist before. This provides time bound

126
00:09:48,422 --> 00:09:52,986
access. Let's think of a scenario. You have an engineering team

127
00:09:53,168 --> 00:09:57,018
where the engineers need access to your database for

128
00:09:57,104 --> 00:10:00,746
8 hours the time period. They work every day.

129
00:10:00,928 --> 00:10:04,314
So at the morning they start their work and they generated

130
00:10:04,362 --> 00:10:08,634
a dynamic credentials which is good for the day. Now imagine

131
00:10:08,762 --> 00:10:12,534
you have some applications that also talk to your database

132
00:10:12,682 --> 00:10:16,270
and an average call is a few seconds

133
00:10:16,430 --> 00:10:19,954
and the application generate credentials right before

134
00:10:19,992 --> 00:10:23,730
they make the call. Does it make sense to give

135
00:10:23,800 --> 00:10:27,320
those applications an eight hour access as well?

136
00:10:27,690 --> 00:10:31,026
Probably not. Probably you want those applications

137
00:10:31,058 --> 00:10:34,582
to have a few minute of TTL or time to live for

138
00:10:34,636 --> 00:10:38,682
their credentials, whereas your human users might have

139
00:10:38,736 --> 00:10:40,700
eight or 9 hours of access.

140
00:10:42,110 --> 00:10:45,706
Dynamic credentials mean that the calls that your human and

141
00:10:45,728 --> 00:10:49,066
machine users are making, they can be audited as

142
00:10:49,088 --> 00:10:52,666
well. One thing we're certain that there is no shortage

143
00:10:52,698 --> 00:10:56,142
of tools. That's why it's important to talk about the

144
00:10:56,196 --> 00:11:00,058
factors when choosing the right tool, the first one being flexibility.

145
00:11:00,234 --> 00:11:03,650
Your developers love flexibility. They might

146
00:11:03,720 --> 00:11:06,286
be talking to the tool using a UI,

147
00:11:06,398 --> 00:11:08,900
ClI or an API call.

148
00:11:09,590 --> 00:11:14,482
Your engineering team might have a number of services for

149
00:11:14,536 --> 00:11:18,034
cloud providers, some other managed services. You don't

150
00:11:18,082 --> 00:11:21,862
want to have different secret management tool for each.

151
00:11:21,996 --> 00:11:25,094
So you ideally would like a lot of integrations for

152
00:11:25,132 --> 00:11:28,646
the tool you choose. If encryption

153
00:11:28,758 --> 00:11:31,878
or cryptography is not your core business strength,

154
00:11:32,054 --> 00:11:35,498
you might want the secret management tool

155
00:11:35,584 --> 00:11:38,540
to handle the encryption as well.

156
00:11:39,310 --> 00:11:43,306
You'd also want the automatic expiry of tokens or secrets

157
00:11:43,338 --> 00:11:47,630
to be handled so that you don't have to create business logic for that and

158
00:11:47,700 --> 00:11:51,598
in the event of a breach, you would expect

159
00:11:51,684 --> 00:11:54,580
the passwords to be able to revoked as well.

160
00:11:55,590 --> 00:11:58,946
With that, I propose Hashicorp Vault, which is

161
00:11:58,968 --> 00:12:02,386
an open source secret management tool that started at

162
00:12:02,408 --> 00:12:04,500
Hashicorp as an open source project.

163
00:12:05,370 --> 00:12:09,446
With Hashicorp you can interact with a tool using a

164
00:12:09,468 --> 00:12:13,590
CLI UI or an HTTP API call.

165
00:12:13,740 --> 00:12:17,694
There are a number of providers, including different cloud providers

166
00:12:17,762 --> 00:12:21,206
or database, so that you can generate dynamic credentials.

167
00:12:21,398 --> 00:12:25,322
Besides dynamic credentials, you can store long

168
00:12:25,376 --> 00:12:29,734
lived credentials within vault as well. Vault provides

169
00:12:29,782 --> 00:12:33,178
encryption as a service so that your data would be encrypted

170
00:12:33,274 --> 00:12:35,870
both at rest and in transit.

171
00:12:36,370 --> 00:12:39,950
You can manage or revoke leases on secrets.

172
00:12:40,370 --> 00:12:44,894
If you have experience handling x aiven hundred and nine certificates

173
00:12:45,022 --> 00:12:48,226
yourself, you know how much painful that process is.

174
00:12:48,328 --> 00:12:51,502
So Vault can actually take away that burden

175
00:12:51,566 --> 00:12:55,274
from you and it can act as a root certificate authority

176
00:12:55,342 --> 00:12:59,000
or an intermediate certificate authority. Depends on how you set it up.

177
00:12:59,850 --> 00:13:03,350
Finally, a number of customers have used

178
00:13:03,420 --> 00:13:06,600
Hashicorp vault in production and still they are.

179
00:13:07,050 --> 00:13:10,662
It's safe to say that vault has been battle tested.

180
00:13:10,726 --> 00:13:14,666
So that's one more factor to consider when

181
00:13:14,688 --> 00:13:17,180
you choose your secret management tool.

182
00:13:17,630 --> 00:13:20,794
Now let's take a look at a setup where there is no

183
00:13:20,832 --> 00:13:24,366
secret management tool and you're using static password to communicate to

184
00:13:24,388 --> 00:13:28,160
the database directly. How would that interaction look?

185
00:13:28,530 --> 00:13:31,834
So you tell the database, here's my static database password,

186
00:13:31,962 --> 00:13:35,178
give me some data. And the database would say,

187
00:13:35,284 --> 00:13:37,940
yep, that looks okay, here's your data.

188
00:13:38,630 --> 00:13:42,306
Now let's take a look at a setup where you have something like Vault in

189
00:13:42,328 --> 00:13:46,130
the middle. At first you'd have to authenticate to Vault.

190
00:13:46,950 --> 00:13:49,970
Vault would talk to the provider. In this example,

191
00:13:50,040 --> 00:13:53,574
this is the database and verify that your user credential is

192
00:13:53,612 --> 00:13:57,366
valid based on the ACL or

193
00:13:57,388 --> 00:14:00,630
access control list that is set up. Vault would generate

194
00:14:00,710 --> 00:14:04,134
a dynamic credential for you that would be time bound

195
00:14:04,262 --> 00:14:07,882
and you, a human or an application would be

196
00:14:07,936 --> 00:14:11,390
talking to the database using that dynamic credential.

197
00:14:12,930 --> 00:14:16,302
Let's take a look at Vault's architecture so that we can better

198
00:14:16,356 --> 00:14:20,394
understand the demo. There's a clear separation of components

199
00:14:20,442 --> 00:14:24,462
here. Vault's encryption layer, referred to as the barrier,

200
00:14:24,526 --> 00:14:28,030
is responsible for encrypting and decrypting

201
00:14:28,110 --> 00:14:31,934
vault data. The HTTP API and storage

202
00:14:31,982 --> 00:14:35,326
backend, they're outside of the barrier and that's why they're

203
00:14:35,358 --> 00:14:38,754
untrusted. Data that is written to the

204
00:14:38,792 --> 00:14:42,294
backend is encrypted. In order

205
00:14:42,332 --> 00:14:45,990
to make any request to vault, the vault has to be

206
00:14:46,060 --> 00:14:49,500
unsealed. Following an unsealing process,

207
00:14:50,190 --> 00:14:53,654
when the vault is unsealed, a user

208
00:14:53,782 --> 00:14:57,766
can make request to vault and each request

209
00:14:57,878 --> 00:15:01,662
has to have a valid token that is

210
00:15:01,796 --> 00:15:05,882
handled by the auth method. The token

211
00:15:05,946 --> 00:15:10,094
store is responsible for actually generating the tokens and

212
00:15:10,132 --> 00:15:14,178
you have policy store to configure and see

213
00:15:14,264 --> 00:15:17,220
the proper authorization is in place.

214
00:15:17,830 --> 00:15:21,522
You have different secret engines for cloud

215
00:15:21,576 --> 00:15:25,810
providers or databases to generate these dynamic credentials.

216
00:15:26,810 --> 00:15:30,290
You can configure one or more audit device

217
00:15:30,450 --> 00:15:33,558
for doing auditing, but we can only understand

218
00:15:33,644 --> 00:15:37,186
so much by looking at an architecture diagram. So let's dive

219
00:15:37,218 --> 00:15:40,614
in to the demo. Here we have the Aiven

220
00:15:40,662 --> 00:15:44,314
console where we can create PostgreSQL or

221
00:15:44,352 --> 00:15:48,086
any other data related services using the Aiven

222
00:15:48,118 --> 00:15:51,230
console, Aiven CLI or terraform provider.

223
00:15:51,890 --> 00:15:55,194
Now I'm choosing Google Cloud North

224
00:15:55,242 --> 00:15:58,782
America Northeast one region and I'm using

225
00:15:58,916 --> 00:16:02,526
a specific startup plan. But for your

226
00:16:02,628 --> 00:16:05,620
business case you might choose a higher plan.

227
00:16:06,470 --> 00:16:10,286
I'm going to the service to see the service creation.

228
00:16:10,478 --> 00:16:14,698
You can see that under connection information I have the URI,

229
00:16:14,894 --> 00:16:19,154
the hostname, port name and other connection details. The blinking

230
00:16:19,202 --> 00:16:23,110
blue indicates that a VM is being provisioned.

231
00:16:23,690 --> 00:16:27,750
For the sake of time, I'll fast forward the service creation.

232
00:16:32,350 --> 00:16:36,106
A solid green indicates that my service is up and

233
00:16:36,128 --> 00:16:39,574
running and now I can use a postgreSQL client

234
00:16:39,702 --> 00:16:41,580
to connect to the service.

235
00:16:43,730 --> 00:16:47,440
I'm using the PostgreSQL admin credentials here,

236
00:16:48,610 --> 00:16:51,630
and by the time you're watching this video,

237
00:16:51,780 --> 00:16:54,830
these credentials are already invalid.

238
00:16:57,670 --> 00:17:01,634
All right, so now that we are connected to our PostgreSQL service,

239
00:17:01,832 --> 00:17:05,522
let's start by creating two tables. The first

240
00:17:05,576 --> 00:17:08,546
table is weekly metrics reporting table.

241
00:17:08,738 --> 00:17:11,794
This has information like product downloads,

242
00:17:11,842 --> 00:17:15,320
GitHub stars, Twitter followers, so all public information.

243
00:17:16,250 --> 00:17:20,074
The second table is employee salary table. This would

244
00:17:20,112 --> 00:17:23,206
have sensitive data on our employees.

245
00:17:23,398 --> 00:17:26,490
So imagine an application that is supposed

246
00:17:26,560 --> 00:17:30,262
to be able to read the weekly matrix reporting table,

247
00:17:30,406 --> 00:17:33,962
but should not have read access to the employee salary table.

248
00:17:34,106 --> 00:17:37,598
So let's now add some sample data

249
00:17:37,764 --> 00:17:39,710
to both of these tables.

250
00:17:40,930 --> 00:17:44,474
After that, we'll configure hashicor vault to generate

251
00:17:44,522 --> 00:17:48,706
dynamic credentials so that we can only read the

252
00:17:48,728 --> 00:17:52,254
weekly matrix reporting table and not the employee salary

253
00:17:52,302 --> 00:17:55,774
table. So let's start vault by Vault server

254
00:17:55,902 --> 00:17:59,634
dev. The dev flag indicates that vault

255
00:17:59,682 --> 00:18:03,654
server started in a development mode. This means that

256
00:18:03,692 --> 00:18:07,138
the server is unsealed. It gives us the root token,

257
00:18:07,234 --> 00:18:10,954
which is like the master password. And this is almost

258
00:18:11,072 --> 00:18:14,522
all the time. This is for demo purposes. Do not use this

259
00:18:14,576 --> 00:18:16,540
in production. All right,

260
00:18:17,470 --> 00:18:21,146
so now that we have the vault server up and running,

261
00:18:21,328 --> 00:18:25,214
let's export vault underscore ADTR so the

262
00:18:25,252 --> 00:18:29,098
address of the vault server on our CLI,

263
00:18:29,194 --> 00:18:32,282
just so that our CLI knows where the vault

264
00:18:32,346 --> 00:18:35,906
server is running. So I'm running the vault server on

265
00:18:35,928 --> 00:18:39,698
my same machine. So that's why it's local host localhost and

266
00:18:39,784 --> 00:18:42,100
it's running on port 8200.

267
00:18:43,270 --> 00:18:47,314
So once I have that, I need to

268
00:18:47,512 --> 00:18:50,774
enter my postgresql service password a couple of times.

269
00:18:50,892 --> 00:18:54,786
That's why rather than typing it again and again, I'm adding

270
00:18:54,818 --> 00:18:58,086
that as the environment variable as well. So once I do

271
00:18:58,108 --> 00:19:02,422
that, I enable the database secret engine. You can have different secret

272
00:19:02,486 --> 00:19:06,106
engines enabled for different providers, but this demo we are

273
00:19:06,128 --> 00:19:10,298
creating database secrets. So I'm enabling the database secret engine.

274
00:19:10,464 --> 00:19:14,142
The second step is I'm configuring vault with proper

275
00:19:14,196 --> 00:19:18,478
plugin and connection information. So the plugin for database is

276
00:19:18,644 --> 00:19:20,590
postgreSQl database plugin.

277
00:19:21,570 --> 00:19:25,134
I'm calling the role metrics read and write and

278
00:19:25,172 --> 00:19:28,418
the username and password. Rather than hard coding the value

279
00:19:28,504 --> 00:19:32,114
within the connection URL, I'm using a template. This is for best

280
00:19:32,152 --> 00:19:35,330
practices. So once I do that,

281
00:19:35,400 --> 00:19:38,850
the third step is I'm configuring a role that maps a name

282
00:19:38,920 --> 00:19:42,502
involved to a SQL statement to execute and create

283
00:19:42,556 --> 00:19:44,070
the database credential.

284
00:19:45,530 --> 00:19:48,934
So here I'm saying that for this

285
00:19:48,972 --> 00:19:53,030
specific metrics read and write role, the creation statement

286
00:19:53,110 --> 00:19:57,270
is granting all on weekly matrix reporting

287
00:19:57,350 --> 00:20:00,010
table so it can perform all operations.

288
00:20:00,350 --> 00:20:03,674
And the credential would be valid for 1 hour.

289
00:20:03,712 --> 00:20:07,166
So that's the default TTl or time to aiven. So these

290
00:20:07,188 --> 00:20:11,006
were the three steps. Enable the database secret engine, configure vault with

291
00:20:11,028 --> 00:20:14,138
the plugin information and then configure a role.

292
00:20:14,234 --> 00:20:18,046
So once I do that, I can use vault ClI,

293
00:20:18,158 --> 00:20:21,470
the vault read command to generate a dynamic credential

294
00:20:21,550 --> 00:20:25,534
like this. Or we can also make the HTTP

295
00:20:25,582 --> 00:20:28,862
API call to generate the credentials.

296
00:20:29,006 --> 00:20:32,534
You can use the vault UI as well, but I'm not showing that in

297
00:20:32,572 --> 00:20:36,134
this demo. So in order to make the API call

298
00:20:36,252 --> 00:20:39,726
we need a token. So I'm using the root

299
00:20:39,778 --> 00:20:43,386
token here. So here

300
00:20:43,408 --> 00:20:47,206
you can see that we generated two sets of postgreSQl

301
00:20:47,238 --> 00:20:50,458
credentials and both are valid. They will be valid for the

302
00:20:50,464 --> 00:20:54,062
next 1 hour or so. So once

303
00:20:54,116 --> 00:20:57,898
I have that, I'll go back to my postgresql

304
00:20:57,914 --> 00:21:01,150
service. I'll connect and then start my testing.

305
00:21:01,490 --> 00:21:05,294
My testing will have two steps. Step number one is

306
00:21:05,412 --> 00:21:09,154
I'll connect using the admin credentials and try to

307
00:21:09,192 --> 00:21:12,626
read these two tables and expect that I should be able to

308
00:21:12,648 --> 00:21:16,146
read it because those are admin credentials. Step number two would

309
00:21:16,168 --> 00:21:20,706
be to connect using one of these dynamically generated credentials

310
00:21:20,738 --> 00:21:23,830
and see if I can still see those two tables.

311
00:21:24,250 --> 00:21:28,066
So first I'm connected using the admin credentials

312
00:21:28,178 --> 00:21:31,846
and I'll try to read the weekly metrics reporting

313
00:21:31,878 --> 00:21:35,034
table. I can see it,

314
00:21:35,072 --> 00:21:38,986
it's expected. And then I'll try to read

315
00:21:39,088 --> 00:21:41,050
the employee salary table.

316
00:21:42,930 --> 00:21:46,138
I can see that because this is an admin credential.

317
00:21:46,314 --> 00:21:50,170
Cool. So now let's disconnect and reconnect

318
00:21:50,250 --> 00:21:53,870
using the dynamically generated credential.

319
00:21:58,550 --> 00:22:01,938
So we generated two credentials. We can pick any

320
00:22:02,024 --> 00:22:06,114
one of those, whether the one using the CLI or using the

321
00:22:06,232 --> 00:22:09,220
HTTP API. Doesn't matter, both are same.

322
00:22:09,830 --> 00:22:13,666
All right, so let's pick the one we generated using the CLI.

323
00:22:13,858 --> 00:22:17,286
So this is the username, and default Db is the name of the

324
00:22:17,308 --> 00:22:21,094
database. And let's copy the password for

325
00:22:21,132 --> 00:22:24,934
this username. All right,

326
00:22:24,972 --> 00:22:28,730
so since the authentication works, so we are able to actually connect

327
00:22:28,800 --> 00:22:32,874
to the database using this dynamically generated password. Let's check

328
00:22:32,912 --> 00:22:36,954
the authorization part. We can read the weekly matrix reporting table

329
00:22:37,002 --> 00:22:40,510
because that's how we set up the role. Now, moment of truth.

330
00:22:42,290 --> 00:22:45,882
Okay, so we are denied permission on the employee salary

331
00:22:45,946 --> 00:22:49,118
because we didn't give any permission other than the weekly

332
00:22:49,214 --> 00:22:53,394
metrics reporting table. So it seems that our authentication and

333
00:22:53,432 --> 00:22:57,202
authorization worked. Now time to test the

334
00:22:57,256 --> 00:23:00,298
auditing feature for Hashikar fault. By default,

335
00:23:00,334 --> 00:23:03,686
auditing is not enabled. So step one is enabling the

336
00:23:03,708 --> 00:23:07,638
audit option, and you can enable the

337
00:23:07,644 --> 00:23:10,854
audit in the default path or a custom path like in this case,

338
00:23:10,892 --> 00:23:14,262
I'm enabling it under vault underscore audit underscore

339
00:23:14,326 --> 00:23:17,642
one file. Once I read

340
00:23:17,776 --> 00:23:21,402
the audit file, I don't see any information because after

341
00:23:21,456 --> 00:23:24,650
enabling auditing, I didn't interact with fault.

342
00:23:24,730 --> 00:23:27,962
So let's interact with fault. Let's generate

343
00:23:28,026 --> 00:23:31,678
a dynamic credential and then let's see

344
00:23:31,764 --> 00:23:35,454
the audit file. This time

345
00:23:35,572 --> 00:23:39,202
we can actually see some data. We can see that a secret was

346
00:23:39,256 --> 00:23:43,346
generated, it has a lease id, and under the data we

347
00:23:43,368 --> 00:23:46,194
can see that the secret is not in plain text,

348
00:23:46,312 --> 00:23:49,886
which is expected. You don't want your credentials to be in plain

349
00:23:49,918 --> 00:23:53,000
text on an audit file. In this case,

350
00:23:53,530 --> 00:23:57,800
the data is hashed with a salt using HMaC Shah 256.

351
00:23:59,130 --> 00:24:02,538
If you are a system administrator, you might be thinking that

352
00:24:02,624 --> 00:24:05,754
how can I use this information to be able to tell

353
00:24:05,872 --> 00:24:08,490
who accessed my resources?

354
00:24:09,070 --> 00:24:12,742
In order to do so, you can actually generate hash

355
00:24:12,886 --> 00:24:16,254
using the same audit hash function. So in this case,

356
00:24:16,292 --> 00:24:20,458
let's copy this username. So let's say you have a suspection

357
00:24:20,634 --> 00:24:24,202
suspicion on this user and you're

358
00:24:24,266 --> 00:24:27,742
passing their username into let's say a payload

359
00:24:27,806 --> 00:24:31,902
file. And the idea is to use this payload

360
00:24:31,966 --> 00:24:35,346
file to make an API call using the same

361
00:24:35,448 --> 00:24:39,018
audit hash function, you generate the audit hash

362
00:24:39,134 --> 00:24:42,278
and the hash would match

363
00:24:42,444 --> 00:24:45,190
the hash under the log file.

364
00:24:46,330 --> 00:24:50,774
So now let's make the call and

365
00:24:50,812 --> 00:24:54,198
this is going to under Sys

366
00:24:54,294 --> 00:24:57,814
path into the vault audit one audit

367
00:24:57,862 --> 00:25:01,770
hash function. So you can see that the

368
00:25:01,920 --> 00:25:05,626
hash that's generated, it matches. It ends

369
00:25:05,658 --> 00:25:08,990
at 10 two, and the username

370
00:25:09,730 --> 00:25:13,118
from your audit log also ends at 10 two.

371
00:25:13,204 --> 00:25:17,146
So you can run one or more username or any other

372
00:25:17,188 --> 00:25:21,154
data on this audit hash function and then

373
00:25:21,192 --> 00:25:24,786
generate the hash yourself. This would let you take care of

374
00:25:24,808 --> 00:25:27,934
the auditing as well. So with Hashicorp vault,

375
00:25:28,062 --> 00:25:31,842
we checked the authentication that worked. Authorization also

376
00:25:31,896 --> 00:25:35,430
worked. We were not able to read the tables, which we are not allowed to.

377
00:25:35,500 --> 00:25:39,574
And now it shows you how you can use auditing as well.

378
00:25:39,772 --> 00:25:43,146
So you did everything that you were told, you followed all

379
00:25:43,168 --> 00:25:46,714
the best practices, but someone still figured out how

380
00:25:46,752 --> 00:25:50,314
to crack your infrastructure. What do you do? Do you

381
00:25:50,352 --> 00:25:53,994
have a break glass procedure? That means do you

382
00:25:54,032 --> 00:25:58,234
have a bypass mechanism that in case something catastrophic

383
00:25:58,282 --> 00:26:01,534
happens, do you have a procedure where

384
00:26:01,572 --> 00:26:05,006
you can still access your services? I'm not going to

385
00:26:05,028 --> 00:26:08,722
go into too much details on the break glass procedure for

386
00:26:08,776 --> 00:26:12,242
data infrastructure security, but you can read

387
00:26:12,296 --> 00:26:16,610
more on that and make sure that your organization has

388
00:26:16,680 --> 00:26:20,294
a break glass procedure besides having the

389
00:26:20,332 --> 00:26:23,894
regular procedures in place. I know this is

390
00:26:23,932 --> 00:26:28,102
a ton of information for 30 minutes and you might

391
00:26:28,156 --> 00:26:31,960
be wanting to do the demo yourself.

392
00:26:32,570 --> 00:26:35,894
If you'd like to do that, there's a blog link in

393
00:26:35,932 --> 00:26:39,574
this slide and there's a QR code that will take you to the

394
00:26:39,612 --> 00:26:43,574
same blog. You can follow along the blog. You can

395
00:26:43,612 --> 00:26:47,310
create free account on Aiven. Alternatively, you can use

396
00:26:47,460 --> 00:26:50,974
another postgresql service for the demo if you have one running.

397
00:26:51,172 --> 00:26:54,990
I'd love to hear your feedback. You can reach out using

398
00:26:55,060 --> 00:26:58,846
the LinkedIn or Twitter handles or shoot me an email if

399
00:26:58,868 --> 00:27:02,074
you have any question. I look forward to networking

400
00:27:02,122 --> 00:27:05,374
with you throughout the event and thank you so

401
00:27:05,412 --> 00:27:06,700
much for joining my talk.

