1
00:00:27,730 --> 00:00:30,966
Hey everyone, I hope you've been having a great time at the conference so

2
00:00:30,988 --> 00:00:34,326
far. My name is Arsh Sharma and my session is going to be

3
00:00:34,348 --> 00:00:37,030
about making DevOps friendlier for developers.

4
00:00:38,010 --> 00:00:41,366
So before I start this talk, I want to catch you up all on what

5
00:00:41,388 --> 00:00:45,318
the story has been till now. Like before microservices, cloud and all

6
00:00:45,324 --> 00:00:49,254
the fancy stuff related to DevOps started coming into picture where we were.

7
00:00:49,372 --> 00:00:52,298
So earlier, people who built applications,

8
00:00:52,474 --> 00:00:55,710
sorry, people who wrote application code like developers, were different

9
00:00:55,780 --> 00:00:59,690
from people who packaged up the application, which were application builders.

10
00:00:59,850 --> 00:01:03,118
But Docker popularized the use of containers and

11
00:01:03,204 --> 00:01:07,374
that sort of led us to ask the question that hey, now, the developer

12
00:01:07,422 --> 00:01:11,390
can itself, they can themselves package the application in a container.

13
00:01:11,470 --> 00:01:14,882
So these two kind of people got merged and

14
00:01:15,016 --> 00:01:19,126
basically application building got shifted left. Shifted left means

15
00:01:19,308 --> 00:01:22,946
became a responsibility of the developers. Now this led to teams

16
00:01:22,978 --> 00:01:26,646
which could iterate much more faster because now, because every time you know

17
00:01:26,668 --> 00:01:29,686
that there's a dependency on someone and task has to go from one team to

18
00:01:29,708 --> 00:01:33,066
the other, there is a delay. But when you sort of merge those kind of

19
00:01:33,088 --> 00:01:37,274
teams, you sort of skip that delay. And this is how we started

20
00:01:37,392 --> 00:01:41,182
shipping code more faster. And agile culture came to be the norm

21
00:01:41,236 --> 00:01:45,370
in the industry. But this was still separated

22
00:01:45,450 --> 00:01:49,342
from the ops people whose primary responsibility still

23
00:01:49,396 --> 00:01:52,526
was like managing clusters and doing deployments and all the

24
00:01:52,548 --> 00:01:56,530
infrastructure side of things. So developers still sort of

25
00:01:56,600 --> 00:01:59,666
were not self sufficient in a sense because they had to rely on

26
00:01:59,688 --> 00:02:02,942
ops people. But then came DevOps.

27
00:02:03,006 --> 00:02:06,126
So DevOps, the idea was to make developers more independent.

28
00:02:06,158 --> 00:02:09,874
The idea was that the dependency for developers

29
00:02:09,922 --> 00:02:13,346
on other people should reduce so that we are able to ship features

30
00:02:13,378 --> 00:02:16,886
and bug fixes much more faster. So the whole goal was that the

31
00:02:16,908 --> 00:02:20,566
Ops team now sets up processes which developers can rely

32
00:02:20,598 --> 00:02:23,914
on to be self sufficient. And this is where

33
00:02:23,952 --> 00:02:27,926
things started to get tricky because we sort of agreed

34
00:02:27,958 --> 00:02:31,866
upon two processes which were CI pipelines, CI CD pipelines

35
00:02:31,898 --> 00:02:35,966
and staging environments. But these processes didn't exactly

36
00:02:36,068 --> 00:02:39,742
solve what they set. But to let's see how things

37
00:02:39,796 --> 00:02:43,166
changed for developers, like with these processes. The problem with both these

38
00:02:43,188 --> 00:02:46,654
processes was that development still took place in can environment,

39
00:02:46,702 --> 00:02:50,622
which was nothing like production. So in production you have all these clusters and kubernetes

40
00:02:50,686 --> 00:02:54,498
running, but when you're developing, you're still developing locally in

41
00:02:54,584 --> 00:02:57,350
your editor and bringing up services locally,

42
00:02:57,770 --> 00:03:01,810
or even if you went the extra step and ran containers,

43
00:03:01,890 --> 00:03:05,186
everything was not exactly like it would be in production.

44
00:03:05,298 --> 00:03:08,994
So let's say whenever there's a but in the production environment,

45
00:03:09,042 --> 00:03:12,886
and now you have to replicate that bug locally. Developers would call upon ops

46
00:03:12,918 --> 00:03:16,618
people and try to spin up local kubernetes, clusters and do all of

47
00:03:16,624 --> 00:03:19,738
that. But even then it's tough because you can use minikube or kind or

48
00:03:19,744 --> 00:03:23,486
something like that, but you can never get the exact same thing you were

49
00:03:23,508 --> 00:03:27,118
getting in production locally. So CI CD pipelines and

50
00:03:27,124 --> 00:03:30,494
staging environments have their use. They help you ship code

51
00:03:30,532 --> 00:03:34,206
better and faster. But still the use does not come into

52
00:03:34,228 --> 00:03:37,594
picture when the developer is writing code, that is, they are far from developer

53
00:03:37,722 --> 00:03:41,730
like. A developer would have to commit and push these changes for

54
00:03:41,800 --> 00:03:44,670
CI pipelines to come into picture. And same for staging environments,

55
00:03:44,750 --> 00:03:47,906
you would have to wait for accesses and a build to complete, and then these

56
00:03:47,928 --> 00:03:51,142
things come into picture. But when you're writing code, it's just you and your local

57
00:03:51,196 --> 00:03:54,214
environment which is problematic and which leads to

58
00:03:54,252 --> 00:03:57,986
the feedback loop. The outer feedback loop got simplified because of CI CD pipelines

59
00:03:58,018 --> 00:04:01,634
and staging environments. But the inner feedback loop, which is like when you writing

60
00:04:01,682 --> 00:04:06,086
code and seeing your changes, that became longer because now you saw your changes locally

61
00:04:06,118 --> 00:04:09,402
on your laptop as you coded them out, but you still weren't sure if how

62
00:04:09,456 --> 00:04:11,914
they would look in production, because for that you would have to commit and build

63
00:04:11,952 --> 00:04:15,742
them and all that sort of thing. Similarly for Ops people.

64
00:04:15,796 --> 00:04:19,454
Also, things did not get that easy, right? Because now,

65
00:04:19,492 --> 00:04:22,078
like we said, if there was a bug in production and that had to be

66
00:04:22,084 --> 00:04:26,442
replicated locally, Ops people would have to configure environments for each developer

67
00:04:26,506 --> 00:04:30,494
so that they can now replicate that bug. And these environments weren't replicable.

68
00:04:30,542 --> 00:04:34,162
Sure, you could use something like terraform to have a standard thing spin up,

69
00:04:34,216 --> 00:04:37,270
but that's just for your infrastructure, right? Not for your application.

70
00:04:37,420 --> 00:04:40,866
So developers weren't that happy. Ops people weren't

71
00:04:40,898 --> 00:04:45,654
that happy. How do we fix this is the inevitable question to

72
00:04:45,692 --> 00:04:49,670
that. I think the best solution I have found is cloud dev environments.

73
00:04:50,010 --> 00:04:53,786
And what these dev environments do we'll soon see in a demo. But the

74
00:04:53,808 --> 00:04:57,722
whole idea is that if everything is happening in the cloud like

75
00:04:57,776 --> 00:05:01,434
production is there, staging environments are there, CI CD pipelines are there.

76
00:05:01,472 --> 00:05:04,926
So why shouldn't your dev environments live there too? Because we as an

77
00:05:04,948 --> 00:05:08,794
industry have always agreed on the fact that development should happen in an exactly production

78
00:05:08,842 --> 00:05:13,006
like environment. And if that's the case, then why

79
00:05:13,028 --> 00:05:16,066
haven't we been moving close towards it? Developers should not

80
00:05:16,088 --> 00:05:20,114
have to rely on Ops and infrastructure people every

81
00:05:20,152 --> 00:05:24,466
time they need such an environment. And this is why we

82
00:05:24,488 --> 00:05:28,002
came up with a solution which was Okteto Cli, which is a completely open

83
00:05:28,056 --> 00:05:31,554
source project and this is the problem it aims to solve.

84
00:05:31,682 --> 00:05:35,858
The way this problem is solved is that the operations team configures an Okteto

85
00:05:35,874 --> 00:05:39,174
manifest, which is just like a one time process. And this Okteto manifest

86
00:05:39,222 --> 00:05:42,614
contains all the instructions required to spin up a dev environment.

87
00:05:42,742 --> 00:05:46,860
Now that includes how to deploy your application, something which

88
00:05:47,950 --> 00:05:52,086
Ops people would have to spend like synchronous

89
00:05:52,118 --> 00:05:56,074
calls with developers to do that. Now all of that is in a one configuration

90
00:05:56,122 --> 00:05:59,726
file and it's easily replicable and reproducible. So what

91
00:05:59,748 --> 00:06:03,614
happens is these dev environment gets deployed in a Kubernetes cluster. So your

92
00:06:03,652 --> 00:06:07,406
application, all these microservices are deployed to a cluster and then a two way file

93
00:06:07,438 --> 00:06:11,026
synchronization service is set up. So what this means is that the

94
00:06:11,048 --> 00:06:14,398
code you write gets synced with the code running in the cluster.

95
00:06:14,494 --> 00:06:17,346
So this way you are able to seems all your changes as soon as you

96
00:06:17,368 --> 00:06:20,934
make them and you get live feedback. And that feedback is in a productivity like

97
00:06:20,972 --> 00:06:24,342
environment. So you know that whenever you

98
00:06:24,396 --> 00:06:27,862
build it or push it, nothing will fall apart, right? And even if,

99
00:06:27,916 --> 00:06:30,694
let's say there are some bugs, you catch them early on, or if there are

100
00:06:30,732 --> 00:06:34,346
already existing bugs, then you're able to replicate them because this environment is

101
00:06:34,368 --> 00:06:37,206
exactly like the environment which is there in production.

102
00:06:37,398 --> 00:06:40,906
So that was the idea. To make it super clear, I'm going

103
00:06:40,928 --> 00:06:44,286
to show you a demo of how this works and I'm going to be

104
00:06:44,308 --> 00:06:47,230
using this simple application which is a movies application,

105
00:06:47,300 --> 00:06:51,774
which is a movies rental application. The source code for this is at forward

106
00:06:51,812 --> 00:06:54,974
slash movies. I have it already cloned and

107
00:06:55,092 --> 00:06:58,846
I have Okteto Cli installed. And with octo Cli

108
00:06:58,878 --> 00:07:02,318
all you have to do is set a context which is basically the Kubernetes cluster

109
00:07:02,334 --> 00:07:05,906
you want to use and deploy to. I'm using Okteto cloud, but you

110
00:07:05,928 --> 00:07:09,158
can use any cluster like it works with AWS, Google Cloud,

111
00:07:09,244 --> 00:07:12,966
any vanilla Kubernetes cluster. And once you do that, all you have to

112
00:07:12,988 --> 00:07:16,706
do is run Okteto up. It's one single command.

113
00:07:16,818 --> 00:07:20,018
And this common uses this configuration file

114
00:07:20,034 --> 00:07:23,514
which I was talking to you about, which the Ops people said it's one time

115
00:07:23,552 --> 00:07:26,598
configuration. It tells how to build all the microservices. So let's

116
00:07:26,614 --> 00:07:30,394
say these front end microservice, the context for building that is in the front end

117
00:07:30,512 --> 00:07:33,690
folder and there it uses all the existing docker files there are,

118
00:07:33,760 --> 00:07:37,006
and then how you deploy all the stuff you need using helm. And then

119
00:07:37,028 --> 00:07:40,954
there's a dev section which tells how the development for these microservices

120
00:07:41,002 --> 00:07:45,134
should happen like what folders should be synced and all port forwarding

121
00:07:45,262 --> 00:07:48,738
stuff is here. So let's wait for the

122
00:07:48,744 --> 00:07:49,860
deployment to complete.

123
00:07:52,070 --> 00:07:55,298
Once the deployment is complete, Okta will prompt you to choose which one of

124
00:07:55,304 --> 00:07:58,834
your microservices you want to develop. Let's just keep it simple in this

125
00:07:58,872 --> 00:08:02,070
video and make a change on the front end. So I'll choose front end.

126
00:08:02,140 --> 00:08:05,538
But these beauty of this approach is that all of these microservices are now deployed

127
00:08:05,554 --> 00:08:09,234
to the cloud and are working together. So let's say if you personally

128
00:08:09,282 --> 00:08:11,706
wanted to bring up this application, you as a developer would have to bring each

129
00:08:11,728 --> 00:08:14,938
of these services up individually. Whereas with things approach all of

130
00:08:14,944 --> 00:08:17,462
them are up and deployed in one single command.

131
00:08:17,606 --> 00:08:21,418
So once you select which service you want to develop, what happens

132
00:08:21,504 --> 00:08:24,462
is there is a container replacement step.

133
00:08:24,516 --> 00:08:28,186
The container running in the cluster gets replaced by a dev container. And what's

134
00:08:28,218 --> 00:08:32,266
special about things Dev container is that whatever code we write on our local machine

135
00:08:32,378 --> 00:08:36,254
gets synced with the code running in the dev container. So that way any

136
00:08:36,292 --> 00:08:39,826
change we make here will be reflected live in that environment which is

137
00:08:39,848 --> 00:08:43,166
running in the cluster. So that's how you are able to develop in a production

138
00:08:43,198 --> 00:08:46,850
like environment. And to see this, like you see we have access

139
00:08:46,920 --> 00:08:50,422
to the terminal in that dev container and we also have access

140
00:08:50,476 --> 00:08:54,598
to endpoints where we can visit our application. So this

141
00:08:54,604 --> 00:08:57,814
is the endpoint where the front end lives. But like I said, this is running

142
00:08:57,852 --> 00:09:01,386
in the cluster, running in the cloud cluster. But everything is sort of like

143
00:09:01,408 --> 00:09:04,938
how you would be developing locally because it is still at the end of the

144
00:09:04,944 --> 00:09:08,406
day like development which is happening on your machine,

145
00:09:08,438 --> 00:09:12,362
right. So to do that you would have to first run

146
00:09:12,416 --> 00:09:15,982
yarn to install all the dependencies. So let's just go back

147
00:09:16,036 --> 00:09:19,306
to our ide and run yarn like you would locally.

148
00:09:19,338 --> 00:09:21,486
So all of this is like locally but all of this is happening in the

149
00:09:21,508 --> 00:09:25,266
cloud. And then you run yarn start. And what that basically does

150
00:09:25,288 --> 00:09:29,746
is start the server where the application is. And if

151
00:09:29,768 --> 00:09:33,794
we hit refresh now, we see that our application is up

152
00:09:33,832 --> 00:09:37,458
and running. Now like I said, this is just the application running and

153
00:09:37,464 --> 00:09:40,582
whatever code you write will get synced. So let's also test that out.

154
00:09:40,636 --> 00:09:44,006
And I have things code already written, I'll just uncomment it which is

155
00:09:44,028 --> 00:09:47,714
basically a discount coupon. And if we go back

156
00:09:47,772 --> 00:09:51,046
here we see that this thing appears,

157
00:09:51,078 --> 00:09:54,778
which is the code we just wrote. If we comment it again,

158
00:09:54,944 --> 00:09:58,380
go back, hit refresh, it's gone.

159
00:09:58,750 --> 00:10:02,122
So I hope you can now see the beauty of this approach

160
00:10:02,266 --> 00:10:05,754
how whatever code we write gets synced, and how the inner

161
00:10:05,802 --> 00:10:09,802
dev cycle has now reduced and its dependencies

162
00:10:09,866 --> 00:10:13,694
on things like CI pipelines and waiting for builds to complete or waiting for

163
00:10:13,732 --> 00:10:17,422
ops people to set up environments has reduced significantly. And developers

164
00:10:17,486 --> 00:10:20,834
now are much more independent and much more confident when

165
00:10:20,872 --> 00:10:24,306
writing code, because you know that if that code works here, it will work in

166
00:10:24,328 --> 00:10:27,906
production, it will work in your CI pipelines and your staging environments. So that's the

167
00:10:27,928 --> 00:10:31,142
whole idea, that's the whole goal, that we simplify DevOps by giving

168
00:10:31,196 --> 00:10:34,614
developers all the tools to be self sufficient and the ops people only

169
00:10:34,652 --> 00:10:38,326
have to be responsible for setting up and maintaining these tools. Going back

170
00:10:38,348 --> 00:10:42,438
to the slides, just a recap of all the benefits of this approach is like

171
00:10:42,604 --> 00:10:46,026
developers can now get to the code writing phase by skipping all the

172
00:10:46,048 --> 00:10:49,226
configuration. Like you saw, we only needed to run octeto up. We did

173
00:10:49,248 --> 00:10:52,618
not need to bring up front end by writing yarn start and then bring up

174
00:10:52,624 --> 00:10:56,110
the back end and then configure the database and all that sort of microservices stuff.

175
00:10:56,180 --> 00:10:58,986
All of that was skipped. All you had to do was run one single command

176
00:10:59,018 --> 00:11:02,954
of Tetoap and the environment was exactly like production. The feedback

177
00:11:03,002 --> 00:11:06,186
is instantaneous. So as soon as you hit save you get to see your results.

178
00:11:06,218 --> 00:11:09,086
Whereas with a CI pipeline you would have to wait a few minutes for all

179
00:11:09,108 --> 00:11:12,320
the building and deployment to happen.

180
00:11:12,690 --> 00:11:15,958
So the goal is that shipping for the cloud,

181
00:11:16,044 --> 00:11:19,574
then you have to develop in these cloud as well, because that is

182
00:11:19,612 --> 00:11:23,382
how you're going to make less mistakes and ship applications which are

183
00:11:23,516 --> 00:11:27,350
much more smoother and much more cloud native in nature. Thanks.

184
00:11:27,420 --> 00:11:30,502
This was it. Thanks for watching. If you have any questions,

185
00:11:30,556 --> 00:11:33,766
feel free to reach out to me on Twitter at these razorinkyakidad and

186
00:11:33,788 --> 00:11:35,460
I hope you have a fun conference ahead.

