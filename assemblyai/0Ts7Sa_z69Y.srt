1
00:00:00,410 --> 00:00:06,174
Jamaica. Make a real

2
00:00:06,212 --> 00:00:09,610
time feedback into the behavior of your distributed systems

3
00:00:09,690 --> 00:00:13,374
and observing changes exceptions. Errors in

4
00:00:13,412 --> 00:00:16,746
real time allows you to not only experiment with confidence,

5
00:00:16,858 --> 00:00:20,560
but respond instantly to get things working. Again.

6
00:00:24,610 --> 00:00:48,362
Close this

7
00:00:48,416 --> 00:00:52,590
talk is on algorithmically generated visual designs.

8
00:00:53,730 --> 00:00:58,154
So again, my name is Michael Wehar, and you'll see my collaborators,

9
00:00:58,282 --> 00:01:02,106
John, Maya and Alyssa, and each of us introduced

10
00:01:02,138 --> 00:01:05,998
our own algorithms to generate artwork, and were

11
00:01:06,014 --> 00:01:09,442
going to tell you a little bit about our motivation and how we started

12
00:01:09,496 --> 00:01:13,714
doing this. So we

13
00:01:13,752 --> 00:01:17,558
wanted to bring together artists and computer scientists to develop a

14
00:01:17,564 --> 00:01:20,934
better understanding of drawing processes. And we also

15
00:01:20,972 --> 00:01:24,802
wanted to explore how programming can be used as a tool for generating

16
00:01:24,866 --> 00:01:28,374
visual designs and artworks. And we had several questions.

17
00:01:28,492 --> 00:01:32,266
We weren't sure what the answers were, and we wanted to investigate these.

18
00:01:32,448 --> 00:01:36,102
What kinds of designs and artworks can algorithms generate?

19
00:01:36,246 --> 00:01:40,626
Can generated artworks be appealing? And how can drawing processes

20
00:01:40,678 --> 00:01:43,550
be improved based on user feedback?

21
00:01:44,370 --> 00:01:48,554
So this is what we actually did. We investigated how computer algorithms

22
00:01:48,602 --> 00:01:52,410
can be used to generate visual designs and artworks. We did this

23
00:01:52,500 --> 00:01:55,490
by designing and implementing nine algorithms.

24
00:01:56,070 --> 00:01:59,506
Each algorithm generates a different type of design or a different type

25
00:01:59,528 --> 00:02:03,262
of artwork. We coded these algorithms in JavaScript,

26
00:02:03,406 --> 00:02:06,726
and these algorithms basically just draw lines and

27
00:02:06,748 --> 00:02:10,514
shapes onto a digital canvas following a certain procedural

28
00:02:10,562 --> 00:02:14,482
process. And these procedural processes were inspired

29
00:02:14,546 --> 00:02:18,870
by mathematical concepts, natural phenomena and artistic trends.

30
00:02:20,650 --> 00:02:24,022
So here are the nine algorithms that we implemented,

31
00:02:24,086 --> 00:02:27,546
and you'll see who the author was of each of them. Next to it,

32
00:02:27,648 --> 00:02:31,706
we actually have a blog article about each of the nine algorithms, and we

33
00:02:31,728 --> 00:02:34,990
encourage you to take a look. So if you see an algorithm that's interesting

34
00:02:35,060 --> 00:02:38,160
to you, please do read more about it.

35
00:02:39,330 --> 00:02:42,946
So now we're going to show you a video that'll demonstrate the

36
00:02:42,968 --> 00:02:44,370
drawing processes.

37
00:02:48,310 --> 00:02:52,542
So this is our first algorithms, called geometric patterns.

38
00:02:52,686 --> 00:02:56,582
And on the left you can see it actually drawing the image step

39
00:02:56,636 --> 00:03:00,098
by step. And on the right, you can see a list of parameters

40
00:03:00,194 --> 00:03:03,810
that were used to actually generate this image.

41
00:03:03,970 --> 00:03:07,686
Each of the algorithms can be varied based on

42
00:03:07,708 --> 00:03:11,254
these parameters. So this is the final image

43
00:03:11,302 --> 00:03:14,378
here on the left. Now I'm going

44
00:03:14,384 --> 00:03:18,326
two show you a different image that was generated with the same algorithm,

45
00:03:18,438 --> 00:03:20,890
but it was given different parameters.

46
00:03:24,110 --> 00:03:27,294
Okay, now I'm going to show you one more algorithm. This is called

47
00:03:27,332 --> 00:03:30,910
the wrapping paper algorithms. This was done by Alyssa,

48
00:03:31,330 --> 00:03:34,794
were you can see the parameters on the left, and hopefully

49
00:03:34,842 --> 00:03:38,206
you notice that these designs that were generated with wrapping

50
00:03:38,238 --> 00:03:41,438
paper, they just show a lot of different shapes

51
00:03:41,534 --> 00:03:44,818
drawn in a systematic way, overlapping with each other.

52
00:03:44,904 --> 00:03:48,210
And it kind of looks like some wrapping paper designs.

53
00:03:48,550 --> 00:03:51,734
Now, if you want to see the rest of our algorithms. I just showed you

54
00:03:51,772 --> 00:03:55,206
two. Please take a look at our websites. Also, we have

55
00:03:55,228 --> 00:03:59,270
a full length video showing six of our algorithms running,

56
00:03:59,340 --> 00:04:02,380
which you're welcome to take a look at on YouTube as well.

57
00:04:03,470 --> 00:04:06,380
So now we're going to talk a bit about our drawing program.

58
00:04:06,750 --> 00:04:10,314
So in order to understand how it works, we have to tell you about

59
00:04:10,352 --> 00:04:13,774
this framework that we built. These framework. It's still a work

60
00:04:13,812 --> 00:04:17,594
in progress, but it allows you to design drawing

61
00:04:17,642 --> 00:04:21,022
algorithms in JavaScript, and it'll actually draw them

62
00:04:21,076 --> 00:04:24,506
onto an HTML canvas. Our drawing

63
00:04:24,538 --> 00:04:27,954
program will take in one of these algorithms, it'll run it,

64
00:04:27,992 --> 00:04:31,554
and it'll display the resulting images in real time.

65
00:04:31,752 --> 00:04:34,942
Our drawing algorithms have to be written in this framework

66
00:04:35,006 --> 00:04:37,922
where you have an initialize, start, pause,

67
00:04:37,986 --> 00:04:40,520
reset, and draw one step function.

68
00:04:41,450 --> 00:04:44,642
You can see our public repo@GitHub.com slash

69
00:04:44,706 --> 00:04:46,790
algorithmically generated.

70
00:04:50,250 --> 00:04:54,234
Here's our public repository on GitHub, and you'll see

71
00:04:54,272 --> 00:04:58,854
that there's a lot of files here. There's three different pairs.

72
00:04:58,982 --> 00:05:01,130
There's one for ALG dots,

73
00:05:01,470 --> 00:05:05,134
ALGP lines. Those are

74
00:05:05,172 --> 00:05:08,622
three of the different drawing algorithms. If you're just getting

75
00:05:08,676 --> 00:05:12,026
started and trying to implement your own drawing algorithm,

76
00:05:12,138 --> 00:05:17,094
please start with the ALG js and algorithms

77
00:05:17,162 --> 00:05:21,102
js files. There's also a very extensive readme

78
00:05:21,166 --> 00:05:24,594
file that goes into a lot of detail about what is this

79
00:05:24,632 --> 00:05:28,258
framework, how does it work and how can you get started? So we're going

80
00:05:28,264 --> 00:05:32,194
to take a look at the ALG js and the params associations

81
00:05:32,242 --> 00:05:35,766
with it, and we're going to start manipulating it to produce some interesting

82
00:05:35,868 --> 00:05:39,334
images and visual designs. So you'll see

83
00:05:39,372 --> 00:05:42,342
on the left side of the screen a user interface.

84
00:05:42,486 --> 00:05:45,898
We actually have a front end web application that's going

85
00:05:45,904 --> 00:05:49,914
to display a canvas and have several buttons there. And when we

86
00:05:49,952 --> 00:05:53,342
click start, it's going to load in and execute this

87
00:05:53,396 --> 00:05:57,258
algorithms. On the right hand side you'll see dots.

88
00:05:57,354 --> 00:06:01,226
That's the dots algorithm. And the dots algorithms

89
00:06:01,338 --> 00:06:04,698
is a dictionary that contains various methods

90
00:06:04,794 --> 00:06:08,114
which are going to make it runnable, and you're going to be able to

91
00:06:08,152 --> 00:06:12,066
run it within that front end web application. So if

92
00:06:12,088 --> 00:06:16,574
we take a look at the code, you'll see various methods associated

93
00:06:16,622 --> 00:06:19,942
with the docs algorithm. There's draw, one step,

94
00:06:20,076 --> 00:06:24,518
reset, initialize, pause, and start together.

95
00:06:24,604 --> 00:06:28,546
Those are the methods we need to be able to start creating

96
00:06:28,578 --> 00:06:31,786
these visual designs and artworks. Now,

97
00:06:31,808 --> 00:06:35,062
we also have a params file associated with the dots

98
00:06:35,126 --> 00:06:38,746
algorithms. Let's start modifying these parameters and

99
00:06:38,768 --> 00:06:42,094
see how it affects the images. Say we

100
00:06:42,132 --> 00:06:45,680
adjust it so the transparency is just one.

101
00:06:48,850 --> 00:06:52,080
You'll see that all of the circles are now black.

102
00:06:57,110 --> 00:06:59,922
Now, if we make the radius larger, say,

103
00:06:59,976 --> 00:07:00,580
50,

104
00:07:03,830 --> 00:07:07,230
the circles are much larger. And now almost the full canvas

105
00:07:07,310 --> 00:07:11,442
is filled. We can even adjust the speed.

106
00:07:11,586 --> 00:07:15,334
So if we wanted there to be some delay so that we could see our

107
00:07:15,372 --> 00:07:19,070
drawing happen more slowly, we can make that speed

108
00:07:19,170 --> 00:07:22,826
value larger to increase the number of milliseconds there

109
00:07:22,848 --> 00:07:24,570
are for the delay.

110
00:07:31,310 --> 00:07:34,954
Now, let's adjust the parameters back the way we want. And let's

111
00:07:35,002 --> 00:07:39,114
start manipulating our algorithm and see what kinds of interesting designs

112
00:07:39,162 --> 00:07:42,526
we might be able to create. Now, I decided to make

113
00:07:42,548 --> 00:07:46,446
some changes. I decided to create this new member

114
00:07:46,478 --> 00:07:49,742
variable called x and this new variable

115
00:07:49,806 --> 00:07:53,314
called y. They're going to keep track of

116
00:07:53,352 --> 00:07:57,106
where our paintbrush is located, and I'm going to start them at the

117
00:07:57,128 --> 00:08:00,806
center of the screen. So x is going to be width divided by two,

118
00:08:00,908 --> 00:08:03,640
and y is going to be height divided by two.

119
00:08:04,330 --> 00:08:08,098
And just to show you what this looks like, we're going to increment

120
00:08:08,194 --> 00:08:11,914
Alg dots x and increment alg dots y.

121
00:08:12,032 --> 00:08:15,594
Now, we should have the paintbrush move across the canvas in

122
00:08:15,632 --> 00:08:16,300
a line.

123
00:08:20,030 --> 00:08:24,430
As you can see, we gradually drew a line across the canvas.

124
00:08:24,770 --> 00:08:28,954
Now, I modified it so we're not just incrementing, but we're also wrapping

125
00:08:29,002 --> 00:08:32,202
around. So when we reach these end of the canvas,

126
00:08:32,266 --> 00:08:36,162
it should wrap back around and continue drawing. Let's test

127
00:08:36,216 --> 00:08:37,060
that out.

128
00:08:39,830 --> 00:08:43,374
Great. It worked as we expected. As it was drawing,

129
00:08:43,422 --> 00:08:47,102
it wrapped around the canvas. Now let's try some more complex

130
00:08:47,166 --> 00:08:50,694
things besides just drawing a line. Maybe we want to add

131
00:08:50,732 --> 00:08:53,938
a little bit of noise to it, a little bit of randomness.

132
00:08:54,034 --> 00:08:58,194
Let's try that out. I'm using the math random

133
00:08:58,242 --> 00:09:00,380
function here. Let's see what happens.

134
00:09:03,630 --> 00:09:06,854
But there is some noise there. It's not perfectly

135
00:09:06,902 --> 00:09:10,090
aligned. Let's add a little bit

136
00:09:10,160 --> 00:09:13,182
more to the x coordinate at every step.

137
00:09:13,316 --> 00:09:14,640
Let's see what happens.

138
00:09:19,090 --> 00:09:22,830
Now we're drawing what looks almost like a striped pattern.

139
00:09:26,630 --> 00:09:31,330
Okay, now let's try to incorporate some functions from trigonometry.

140
00:09:31,830 --> 00:09:34,946
And were going to use the number of steps that

141
00:09:34,968 --> 00:09:38,626
have elapsed thus far to help us compute an angle,

142
00:09:38,738 --> 00:09:41,910
which we feed into those trigonometric functions.

143
00:09:42,570 --> 00:09:46,134
So here I'm going to increment x by ten at

144
00:09:46,172 --> 00:09:49,766
each step. And I'm going to increment y by ten times

145
00:09:49,868 --> 00:09:53,474
cosine of this angle. And this angle

146
00:09:53,522 --> 00:09:57,206
is going to move between zero and two PI as the

147
00:09:57,228 --> 00:10:00,502
number of steps increase. So, let's see what

148
00:10:00,556 --> 00:10:01,920
is graphed it.

149
00:10:07,170 --> 00:10:11,310
You can see we have an interesting design that combines different weights.

150
00:10:12,450 --> 00:10:15,554
Now we're going to do something a little bit different. Were going to try to

151
00:10:15,592 --> 00:10:19,074
draw a spiral design, and we're going to adjust the

152
00:10:19,112 --> 00:10:23,250
params and we're going to adjust the algorithm.

153
00:10:24,630 --> 00:10:28,150
And as we adjusted the algorithms, we made these

154
00:10:28,220 --> 00:10:32,054
circle's radius increase a little bit each time and

155
00:10:32,092 --> 00:10:35,702
also the transparency increase. And now

156
00:10:35,756 --> 00:10:38,934
we're no longer wrapping around when we go outside the

157
00:10:38,972 --> 00:10:42,634
image's boundaries and we've adjusted the

158
00:10:42,672 --> 00:10:45,914
functions we use to increment X and

159
00:10:45,952 --> 00:10:49,020
Y. So let's see what happens.

160
00:10:53,490 --> 00:10:56,590
And these we go, it's drawing a spiral pattern.

161
00:10:58,770 --> 00:11:02,026
And now you can see, just writing a few lines

162
00:11:02,058 --> 00:11:06,690
of code were able to create some interesting visual designs.

163
00:11:07,030 --> 00:11:11,170
Now, these ALG dots algorithms is just a simple example

164
00:11:11,240 --> 00:11:14,546
you can play around with. But I do encourage you to take a look at

165
00:11:14,568 --> 00:11:18,306
our other algorithms and some of the videos showing how we generate

166
00:11:18,338 --> 00:11:20,710
these other images and other designs.

167
00:11:22,730 --> 00:11:26,006
If you liked these designs and you liked our

168
00:11:26,028 --> 00:11:29,746
framework, well, we encourage you to contribute. You can contribute

169
00:11:29,778 --> 00:11:33,618
to our project by implementing your own drawing algorithms

170
00:11:33,714 --> 00:11:36,886
following this framework and share it with us. We would love

171
00:11:36,908 --> 00:11:40,742
to see your images and potentially collaborate with you

172
00:11:40,876 --> 00:11:44,446
all. So we are looking for reviewers to review

173
00:11:44,548 --> 00:11:48,254
images that we've generated. And finally,

174
00:11:48,452 --> 00:11:52,154
again, this is an open source repo. There's a lot of improvements

175
00:11:52,202 --> 00:11:55,582
we can make to our drawing program, and we would love

176
00:11:55,636 --> 00:11:59,230
for any users to submit pull requests,

177
00:11:59,650 --> 00:12:03,790
submit issues, and you can contact us anytime.

178
00:12:04,210 --> 00:12:05,180
Thank you so much.

