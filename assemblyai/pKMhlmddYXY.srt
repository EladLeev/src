1
00:00:38,930 --> 00:00:42,326
Hi, welcome to this talk. Today we're going

2
00:00:42,348 --> 00:00:45,970
to talk about code reviews and how to master

3
00:00:46,050 --> 00:00:49,654
to be efficient in this code practice. My name

4
00:00:49,692 --> 00:00:53,562
is Israel. I'm brazilian,

5
00:00:53,626 --> 00:00:56,720
living in the UK. This is my family.

6
00:00:57,330 --> 00:01:01,114
Two things that I do like doing games and traveling.

7
00:01:01,242 --> 00:01:05,010
And currently I'm software engineer at Meta.

8
00:01:05,510 --> 00:01:09,106
Just a brief introduction. Code reviews what

9
00:01:09,128 --> 00:01:12,402
is it? It's a process that focus on

10
00:01:12,456 --> 00:01:16,260
examining and reading someone's code.

11
00:01:16,710 --> 00:01:19,974
There are good references in this site

12
00:01:20,012 --> 00:01:23,606
that I put and why do we do code reveals? Well, there's plenty of

13
00:01:23,628 --> 00:01:26,802
reasons we could do it to discover bugs earlier,

14
00:01:26,866 --> 00:01:30,394
improve code quality, enhance security of the

15
00:01:30,432 --> 00:01:33,340
code, share knowledge across the team,

16
00:01:33,710 --> 00:01:37,514
mentor newer engineers, maintain compliance and so

17
00:01:37,552 --> 00:01:41,022
on. But also, what's not code

18
00:01:41,076 --> 00:01:44,510
review? Well, first, it's not blaming someone's code,

19
00:01:44,580 --> 00:01:48,846
shaming someone. It's not also an opportunity to

20
00:01:48,868 --> 00:01:52,566
show off your amazing engineering skills.

21
00:01:52,698 --> 00:01:56,514
And also, it's not about executing, actually executing the code.

22
00:01:56,552 --> 00:01:59,698
It's more about reading, analyzing it,

23
00:01:59,784 --> 00:02:03,954
putting comments and helping the code the change to

24
00:02:03,992 --> 00:02:07,474
get better. And there are three main approaches

25
00:02:07,522 --> 00:02:10,418
to code review. First is pair programming.

26
00:02:10,514 --> 00:02:14,054
So generally you have two engineers working side

27
00:02:14,092 --> 00:02:17,582
by side while one is coding, the other one is observing

28
00:02:17,666 --> 00:02:21,366
and giving some comments over the shoulder

29
00:02:21,398 --> 00:02:25,370
reviews. It's usually done after some change is implemented.

30
00:02:26,110 --> 00:02:30,086
You do it like live in person or maybe remotely.

31
00:02:30,198 --> 00:02:33,446
And another one is tool reviews.

32
00:02:33,638 --> 00:02:36,890
Usually, for example, you submit a code review,

33
00:02:37,040 --> 00:02:40,894
an online pull request, and someone checks the

34
00:02:40,932 --> 00:02:44,410
code replies with comments approving or declining,

35
00:02:44,490 --> 00:02:48,206
something like that. Most of the examples and things we'll be

36
00:02:48,228 --> 00:02:51,486
talking are more related to the third one, but I

37
00:02:51,508 --> 00:02:55,926
believe almost everything could also be applied to

38
00:02:56,108 --> 00:02:59,080
any of these approaches. With that said,

39
00:02:59,770 --> 00:03:03,398
before actually starting code reviewing the team,

40
00:03:03,484 --> 00:03:07,366
we need to do three things. We need to understand the

41
00:03:07,388 --> 00:03:10,998
context that we are. First, about the team. So what's

42
00:03:11,014 --> 00:03:15,114
the seniority of the team? Is the team composed only by

43
00:03:15,312 --> 00:03:19,450
senior engineers who are working in the code base for like five years?

44
00:03:19,600 --> 00:03:23,434
Or do we have a lot of junior engineers or newborns,

45
00:03:23,562 --> 00:03:27,374
new people in the team who are getting on

46
00:03:27,412 --> 00:03:31,294
boarded there? What's the familiarity that people have with the code?

47
00:03:31,412 --> 00:03:34,830
What's the work dynamics? Do people work more independently

48
00:03:34,910 --> 00:03:39,406
or do people work more collaboratively when building features?

49
00:03:39,518 --> 00:03:42,766
What's the communication style of the team? What's the global

50
00:03:42,798 --> 00:03:46,100
distribution time zones? There are many things that

51
00:03:47,450 --> 00:03:50,998
we should take in consideration in the team before setting up the

52
00:03:51,004 --> 00:03:54,742
process or before trying to establish some rules around

53
00:03:54,796 --> 00:03:58,102
code reviewing. Secondly, we need to look at the code, of course.

54
00:03:58,156 --> 00:04:01,706
So what are the coding standards? What's the testability of what

55
00:04:01,728 --> 00:04:05,578
we already have. What are the riskier paths in the code?

56
00:04:05,664 --> 00:04:09,382
Maybe, I don't know. You work in a bank and what's the core banking feature

57
00:04:09,446 --> 00:04:11,920
that can't break in any way?

58
00:04:12,530 --> 00:04:16,074
Also, for example, maybe you are working on legacy

59
00:04:16,122 --> 00:04:20,062
code or you are working on a complete new project. These things do change

60
00:04:20,116 --> 00:04:23,460
the dynamics of code reviews in many ways.

61
00:04:23,910 --> 00:04:27,634
And third, the goals. So are

62
00:04:27,672 --> 00:04:31,042
we trying to find bugs earlier? Are we trying to improve code

63
00:04:31,096 --> 00:04:34,914
quality, test coverage? Are we trying to just

64
00:04:35,112 --> 00:04:38,338
onboard new engineers and make sure they understand

65
00:04:38,424 --> 00:04:41,782
the code ways? And what I want to say here is that

66
00:04:41,916 --> 00:04:45,586
the goals may change over time, the issues may change over time, and that's

67
00:04:45,618 --> 00:04:49,080
okay. We can move the focus of code reviews around.

68
00:04:49,770 --> 00:04:53,146
But I do believe that code review is a process that's important and can

69
00:04:53,168 --> 00:04:56,762
help any team in the long term. And it's a process that usually

70
00:04:56,816 --> 00:05:00,650
is here to stay. It's implemented to stay, not temporarily.

71
00:05:01,730 --> 00:05:04,826
That said, what is efficient

72
00:05:04,858 --> 00:05:08,478
code reviews? How can we do them? Well, I think

73
00:05:08,564 --> 00:05:12,302
almost everyone who work with code reviews saw this, and once, like,

74
00:05:12,356 --> 00:05:15,714
you submit ten line pull requests and you

75
00:05:15,752 --> 00:05:19,378
receive ten comments on how to improve it. But if you

76
00:05:19,544 --> 00:05:22,606
submit 500 lines of code, someone reply,

77
00:05:22,638 --> 00:05:25,874
yeah, looks good to me. Just like, yeah, that's not

78
00:05:25,912 --> 00:05:29,110
exactly the most efficient way to do code reviews, of course.

79
00:05:29,180 --> 00:05:32,726
So what's code review? First, we have to read

80
00:05:32,908 --> 00:05:36,646
carefully reviews carefully. The code. Actually read the

81
00:05:36,668 --> 00:05:40,362
code. It's not supposed to just skim it through and say, yeah,

82
00:05:40,496 --> 00:05:43,914
looks directional, right? We are not trying

83
00:05:43,952 --> 00:05:47,020
to be fast. We are trying to be efficient to do it. Well,

84
00:05:47,790 --> 00:05:51,646
it's not a stamp competition. So some people say,

85
00:05:51,668 --> 00:05:55,546
hey, I've reviewed 200 reviews.

86
00:05:55,658 --> 00:05:59,198
I did 200 reviews in this month or in this

87
00:05:59,284 --> 00:06:02,862
week, in this year. It's not a competition of

88
00:06:02,996 --> 00:06:06,930
how much reviews you did and actually it's how much you improved

89
00:06:07,270 --> 00:06:10,706
the team, the code base, you helped the team to get better.

90
00:06:10,888 --> 00:06:14,270
And also, just be clear, it's not a competition.

91
00:06:14,350 --> 00:06:18,022
It's about improving. And when

92
00:06:18,156 --> 00:06:22,262
doing. Any comments, leaving comments, suggestions, we need to be

93
00:06:22,316 --> 00:06:25,654
clear, leave actionable comments. If you just

94
00:06:25,692 --> 00:06:29,186
say, actually, the code doesn't look good and doesn't

95
00:06:29,218 --> 00:06:32,822
give an alternative or material, let's say

96
00:06:32,876 --> 00:06:36,794
for research to check coding practices that are

97
00:06:36,912 --> 00:06:40,206
related to what you are seeing, you are not actually helping the

98
00:06:40,228 --> 00:06:43,918
code to get better, you are just creating problems

99
00:06:44,004 --> 00:06:47,566
in your team. Also, focus on

100
00:06:47,588 --> 00:06:51,214
what's important. I'm not here to say what is important,

101
00:06:51,332 --> 00:06:54,962
what is not important, but usually we want to see

102
00:06:55,016 --> 00:06:58,386
the functionality of the code. Like, let's say I

103
00:06:58,408 --> 00:07:02,370
want to change behavior of a to

104
00:07:02,440 --> 00:07:06,454
do b and in the code instead of calling

105
00:07:06,652 --> 00:07:10,326
b and calling c. That's something I would expect to

106
00:07:10,348 --> 00:07:14,566
be caught in the cold review if of course it

107
00:07:14,588 --> 00:07:18,182
was not caught earlier by the developer with automated tests or

108
00:07:18,236 --> 00:07:21,750
something. But what's the design? So is it overall complex?

109
00:07:21,830 --> 00:07:25,914
Is it simple enough? Is it too over engineered? What the

110
00:07:25,952 --> 00:07:29,174
test coverage? Is it being well tested?

111
00:07:29,302 --> 00:07:32,766
Do we have evidence that this code is doing what it did?

112
00:07:32,948 --> 00:07:37,134
Some teams have different practices. I know some companies can

113
00:07:37,172 --> 00:07:40,974
only submit code with automated tests back in it.

114
00:07:41,012 --> 00:07:44,610
Some companies allow you not submitting anything while

115
00:07:44,680 --> 00:07:47,922
some accept manual tests like a video

116
00:07:47,976 --> 00:07:50,910
recording on a screenshot. So anyways,

117
00:07:50,990 --> 00:07:54,706
what works best for you? It's important to have the

118
00:07:54,728 --> 00:07:58,198
best the evidence. Also it may be important

119
00:07:58,284 --> 00:08:01,186
like the code style, the consistency,

120
00:08:01,378 --> 00:08:04,694
naming and a lot of other things.

121
00:08:04,892 --> 00:08:08,646
And also it may be

122
00:08:08,668 --> 00:08:12,200
important like comments, documentation and

123
00:08:12,510 --> 00:08:16,810
relevance of these things change with the context

124
00:08:17,230 --> 00:08:20,890
and which should be splicit when these things

125
00:08:20,960 --> 00:08:24,942
are majorly blocking or the comments are just about

126
00:08:24,996 --> 00:08:28,318
minor improvements. Nitpicking if you don't know, is when you

127
00:08:28,324 --> 00:08:32,014
are trying to do like you do. Small suggestions that

128
00:08:32,132 --> 00:08:35,902
could be done, but it's optional. Usually a good practice.

129
00:08:35,966 --> 00:08:39,966
Like you write nit and put what your suggestion

130
00:08:39,998 --> 00:08:43,774
is so the owner has clear feedback.

131
00:08:43,822 --> 00:08:47,654
Hey, okay, this could be improved, but we are

132
00:08:47,692 --> 00:08:51,206
happy with the code as it is. So this is

133
00:08:51,228 --> 00:08:55,126
a way to do efficiently to reduce the back and

134
00:08:55,148 --> 00:08:57,990
forth of the challenges being proposed.

135
00:08:58,510 --> 00:09:02,090
Another very important thing, automating anything

136
00:09:02,160 --> 00:09:05,718
that's possible to automate. We have like rent of tools,

137
00:09:05,734 --> 00:09:09,574
we have auto formatters, we have linkers for almost any language

138
00:09:09,622 --> 00:09:13,514
that's used in modern software. Engineer CI warnings error

139
00:09:13,562 --> 00:09:17,038
so it's possible to automate a lot of the work. I remember

140
00:09:17,124 --> 00:09:20,382
one project that I worked like many years ago.

141
00:09:20,516 --> 00:09:23,840
We sometimes had to send back

142
00:09:24,530 --> 00:09:27,842
pull requests because the engineer was using

143
00:09:27,896 --> 00:09:31,780
tabs instead of spaces and that would be a problem later. I mean,

144
00:09:32,230 --> 00:09:35,862
you can have many ways to do that without having

145
00:09:35,916 --> 00:09:39,654
a human review to check which charter was used there.

146
00:09:39,692 --> 00:09:42,902
So this is really not a good use

147
00:09:42,956 --> 00:09:46,374
of engineers time. And also

148
00:09:46,492 --> 00:09:49,766
one very important thing, code review is not an individual task,

149
00:09:49,798 --> 00:09:53,370
an individual effort. It's not just like you individually looking

150
00:09:53,440 --> 00:09:56,842
at the code and having the sole responsibility over

151
00:09:56,896 --> 00:10:00,218
it. When we should look at the other side of

152
00:10:00,224 --> 00:10:04,218
the table, like who's writing the code, we should write the code meaning

153
00:10:04,314 --> 00:10:08,138
it would be read by other people, it will be understood

154
00:10:08,234 --> 00:10:11,998
by other people, it will be evolved by other people.

155
00:10:12,164 --> 00:10:16,210
Actually, keep in mind that code is often read

156
00:10:16,360 --> 00:10:20,434
more often read than written, which is quite

157
00:10:20,472 --> 00:10:23,954
an important statistic because readability should

158
00:10:23,992 --> 00:10:27,654
be very important. Also, one very important thing

159
00:10:27,692 --> 00:10:31,254
is that when you are submitting pull

160
00:10:31,292 --> 00:10:35,510
request change, if you submit something that's very big,

161
00:10:35,660 --> 00:10:38,458
it's going to take a lot of time,

162
00:10:38,624 --> 00:10:42,346
and the review will take longer. It's harder to review,

163
00:10:42,528 --> 00:10:46,054
it's harder to iterate on it, because any change affects

164
00:10:46,182 --> 00:10:49,450
a handful of other files and related changes.

165
00:10:49,600 --> 00:10:52,986
So the best thing is split it into smaller

166
00:10:53,018 --> 00:10:56,494
and meaningful changes. What's small, what's big. Of course

167
00:10:56,532 --> 00:10:59,918
it will change depending on the context, the project,

168
00:11:00,004 --> 00:11:03,666
et cetera. But that's a very important thing. And when reviewing the

169
00:11:03,688 --> 00:11:07,182
code, don't be bossy,

170
00:11:07,246 --> 00:11:10,622
don't be judgmental. The language

171
00:11:10,686 --> 00:11:14,734
we use can be helpful, especially when we don't

172
00:11:14,862 --> 00:11:18,374
have a history of interaction in this

173
00:11:18,412 --> 00:11:22,006
way before. So instead of just saying, hey, you should

174
00:11:22,028 --> 00:11:26,182
have done that, you could say, hey, have you considered doing x

175
00:11:26,236 --> 00:11:29,514
instead of y? Or maybe z is another option.

176
00:11:29,632 --> 00:11:33,162
So we should be always careful of

177
00:11:33,216 --> 00:11:36,854
how we say things. And lastly, don't forget

178
00:11:36,982 --> 00:11:40,550
testing scenarios and evidences. So if

179
00:11:40,640 --> 00:11:43,806
you have automated testing, which is a good thing,

180
00:11:43,988 --> 00:11:48,106
add it, say, hey, I did run this test. It's backing

181
00:11:48,138 --> 00:11:51,280
the challenges, so it does help the reviewer, too.

182
00:11:52,370 --> 00:11:55,818
And last part, some things

183
00:11:55,844 --> 00:11:59,026
I want to talk about of how to kick off the process in

184
00:11:59,048 --> 00:12:02,562
the team or how to make the process better when you start

185
00:12:02,616 --> 00:12:06,002
reviews in the team. So, well, first thing is

186
00:12:06,056 --> 00:12:09,794
to keep engineers autonomy. No one wants to have that feeling

187
00:12:09,842 --> 00:12:13,494
that their work is not autonomous anymore. They don't have any

188
00:12:13,532 --> 00:12:16,898
power in the change they are doing. Everything is bureaucratic.

189
00:12:17,074 --> 00:12:21,034
So, yeah, first, avoid the gatekeeper. Gatekeeper is that person

190
00:12:21,232 --> 00:12:24,186
that, intentionally or not, becomes, like,

191
00:12:24,208 --> 00:12:28,300
the guardian of the code. So every code review, this person

192
00:12:29,070 --> 00:12:32,670
checks and has to approve for some reason.

193
00:12:32,820 --> 00:12:35,886
And this is bad for both the person and the team.

194
00:12:36,068 --> 00:12:39,386
Also, map exceptional scenarios and workarounds.

195
00:12:39,418 --> 00:12:42,706
So let's say, for example, we implement a

196
00:12:42,728 --> 00:12:46,260
process that always requires an approval to

197
00:12:46,710 --> 00:12:50,162
land a code in production. Okay, looks very nice

198
00:12:50,216 --> 00:12:53,426
for me. But what if someone is on call,

199
00:12:53,528 --> 00:12:57,606
receives, like, a problem mid of the night, and there's no one around to

200
00:12:57,628 --> 00:13:00,758
approve code? We should

201
00:13:00,844 --> 00:13:04,418
understand what are the exception scenarios and workarounds

202
00:13:04,434 --> 00:13:08,374
that we have in place to make sure people still are able to

203
00:13:08,412 --> 00:13:11,794
fix problems when they appear? And lastly,

204
00:13:11,842 --> 00:13:15,546
it's relatable before about code reviews should not be

205
00:13:15,568 --> 00:13:19,260
a high friction process. Code review should be part

206
00:13:20,110 --> 00:13:23,898
of a sequence of developing and putting code into production,

207
00:13:23,994 --> 00:13:26,750
but it definitely should not feel as a high friction.

208
00:13:28,130 --> 00:13:32,106
Okay, how to do that. So first encourage open discussion

209
00:13:32,138 --> 00:13:35,838
in the team. We shouldn't start pointer fingering

210
00:13:35,934 --> 00:13:39,730
or we need to understand that this is a team process.

211
00:13:39,880 --> 00:13:43,810
As I said before, it's a good practice to often

212
00:13:43,880 --> 00:13:47,586
review pain points, evaluate results. How is it going

213
00:13:47,688 --> 00:13:51,278
if it's the first time it's been implemented in a team and actually

214
00:13:51,384 --> 00:13:55,362
iterate on the process? One good tip I would have here is recognize

215
00:13:55,426 --> 00:13:59,154
contribution. So people who take their time to do good reviews

216
00:13:59,202 --> 00:14:03,462
to help the teammates, help the projects moving forward recognize

217
00:14:03,526 --> 00:14:06,666
that. Make this a good example and it could be

218
00:14:06,688 --> 00:14:10,880
a motivation for other people who maybe are not willing to spend more time

219
00:14:11,250 --> 00:14:14,990
doing code reviews. Also some ideas

220
00:14:15,330 --> 00:14:18,766
to unblock if the team doesn't feel like they

221
00:14:18,788 --> 00:14:21,950
can absorb this process all at once.

222
00:14:22,020 --> 00:14:26,174
So we can start by selecting projects, selecting critical

223
00:14:26,222 --> 00:14:30,174
code paths. For example, in the example that I said like about banking,

224
00:14:30,222 --> 00:14:34,142
maybe you can start reviewing only code that affect the car banking

225
00:14:34,206 --> 00:14:38,374
instead of reviewing every single feature. And then as

226
00:14:38,412 --> 00:14:42,230
the team grows with the process, we can

227
00:14:42,300 --> 00:14:45,858
incorporate into one more things. Other example, sampling reviews.

228
00:14:45,874 --> 00:14:49,354
So instead of reviews every single thing, we can sample it

229
00:14:49,472 --> 00:14:53,642
preferentially randomly. So it doesn't seem like you are just

230
00:14:53,696 --> 00:14:57,100
reviewing someone specific person's code.

231
00:14:57,790 --> 00:15:01,114
Another example, usually I don't see it applied much,

232
00:15:01,152 --> 00:15:04,526
but you could even have non blocking reviews. So we

233
00:15:04,548 --> 00:15:08,494
could say hey yeah, every code should be reviews. But after one,

234
00:15:08,532 --> 00:15:11,790
two, three days, I don't know what the time would be.

235
00:15:11,860 --> 00:15:15,700
Maybe the person is allowed to lend it without a review.

236
00:15:16,310 --> 00:15:20,162
Just some tips. Ideally we want every

237
00:15:20,216 --> 00:15:23,970
single piece of code reviewed by someone to make

238
00:15:24,120 --> 00:15:28,114
sure the code has a good quality. But this could help to start and iterate

239
00:15:28,162 --> 00:15:32,422
over it. So to wrap up what we said today, we talked

240
00:15:32,476 --> 00:15:36,022
about what and whatnot. What is not code review.

241
00:15:36,156 --> 00:15:39,482
Some reasons to do code review we were

242
00:15:39,536 --> 00:15:43,034
understanding a bit the context of the team code goals, what we

243
00:15:43,072 --> 00:15:45,980
want to do code reviews for.

244
00:15:46,350 --> 00:15:50,538
Then we took a look for what

245
00:15:50,624 --> 00:15:54,734
we should look when reviewing code, what to avoid looking at

246
00:15:54,772 --> 00:15:57,838
when reviewing code remembering that code review is a

247
00:15:57,844 --> 00:16:01,262
team process. And also I shared some ideas to help

248
00:16:01,316 --> 00:16:04,000
to kick off this process within the team.

249
00:16:05,010 --> 00:16:08,526
Thank you. Feel free to ping me on LinkedIn. This is

250
00:16:08,548 --> 00:16:11,706
also my GitHub here, although I haven't

251
00:16:11,738 --> 00:16:14,918
populated much. Thank you. I hope you enjoyed it.

