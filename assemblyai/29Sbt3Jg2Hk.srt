1
00:00:27,010 --> 00:00:30,406
Hello. Welcome and thank you for joining my session. My name

2
00:00:30,428 --> 00:00:33,990
is Eran Bibi and I'm the co founder and chief product

3
00:00:34,060 --> 00:00:37,874
officer of Firefly and in the past decade

4
00:00:37,922 --> 00:00:41,618
I'm doing DevOps as an Obi and also as my profession.

5
00:00:41,794 --> 00:00:45,762
And today's talk will be about some of the lesson learned

6
00:00:45,826 --> 00:00:48,520
while writing infrastructure as code,

7
00:00:49,130 --> 00:00:53,130
specifically in terraform by embracing the immutable

8
00:00:53,210 --> 00:00:57,022
infrastructure concept. So let's start with

9
00:00:57,076 --> 00:01:00,106
understanding what is immutable infrastructure.

10
00:01:00,298 --> 00:01:04,210
So the concept saying that you cannot change or

11
00:01:04,280 --> 00:01:08,354
alter any configuration after you are provisioning a

12
00:01:08,392 --> 00:01:12,450
server. And it's very different than the traditional way

13
00:01:12,600 --> 00:01:16,514
of provisioning infrastructure where you provision

14
00:01:16,562 --> 00:01:20,802
a server and then keep patching it and changing the configuration

15
00:01:20,866 --> 00:01:24,450
over time. By having immutable infrastructure,

16
00:01:24,530 --> 00:01:28,570
you can enjoy a lot of benefits, lines keeping everything

17
00:01:28,720 --> 00:01:32,314
consist, and also you are

18
00:01:32,512 --> 00:01:35,882
getting more predictability about what is going

19
00:01:35,936 --> 00:01:39,322
on because everything is the same. And in case

20
00:01:39,376 --> 00:01:43,850
you have some issue, you just need to create a new infrastructure

21
00:01:43,930 --> 00:01:47,198
and you don't need to worry about the changes between

22
00:01:47,364 --> 00:01:51,040
the service that you have or the setting that you have in place.

23
00:01:51,570 --> 00:01:54,738
And as Bernie says, new is always

24
00:01:54,824 --> 00:01:55,460
better.

25
00:01:57,270 --> 00:02:01,246
Okay, let's dive into the details. So in this section

26
00:02:01,278 --> 00:02:04,642
I'm going to share with you a few of the tips. I'm going to use

27
00:02:04,696 --> 00:02:08,214
terraform as the main language for infrastructure, as code

28
00:02:08,252 --> 00:02:12,466
in my example. But some of the tips are relevant for other frameworks

29
00:02:12,498 --> 00:02:16,070
like Pulumi and CDK. The first

30
00:02:16,140 --> 00:02:20,086
one is a very basic pattern of using models.

31
00:02:20,198 --> 00:02:23,622
So instead of having a huge terraform file

32
00:02:23,686 --> 00:02:27,386
describing all of your application and infrastructure in

33
00:02:27,408 --> 00:02:31,306
a single place, you can split it into smaller

34
00:02:31,338 --> 00:02:34,526
parts and then reuse them. So if I need

35
00:02:34,548 --> 00:02:38,782
to describe in few words what is models? Models are

36
00:02:38,916 --> 00:02:42,926
smaller pieces of infrastructure, has code that the

37
00:02:42,948 --> 00:02:46,674
queue can share between project. And if you want to get

38
00:02:46,712 --> 00:02:50,546
the idea of how modules look like, you can see

39
00:02:50,648 --> 00:02:53,906
in this diagram. So you have the

40
00:02:53,928 --> 00:02:57,414
main project, this is the root model, this is what you are

41
00:02:57,452 --> 00:03:01,286
doing as a default. But if you would lines to have

42
00:03:01,388 --> 00:03:04,994
smaller pieces and reuse them in few separate

43
00:03:05,042 --> 00:03:10,070
use cases, you just creating that directory

44
00:03:10,150 --> 00:03:13,306
called models. And then you even can create a

45
00:03:13,328 --> 00:03:16,778
child model inside. So a child model

46
00:03:16,864 --> 00:03:20,640
can be that networking piece or the storage piece,

47
00:03:21,010 --> 00:03:24,480
everything that you can reuse in other project.

48
00:03:24,930 --> 00:03:28,510
So by embracing that practice you

49
00:03:28,580 --> 00:03:32,522
basically going to the other suggestions that I have

50
00:03:32,676 --> 00:03:36,660
is to use the dry patterns, do not repeat yourself.

51
00:03:37,190 --> 00:03:40,914
So try to minimize the duplication of code when

52
00:03:40,952 --> 00:03:44,606
you're writing. Even if you are going deep dive

53
00:03:44,638 --> 00:03:48,246
into one project and you think you will be done

54
00:03:48,428 --> 00:03:52,182
after completing that project, think about going

55
00:03:52,236 --> 00:03:56,530
ahead and you will assume that infrastructure

56
00:03:56,610 --> 00:04:00,998
changes happening only on a certain level

57
00:04:01,164 --> 00:04:04,442
or a certainly resources. So make

58
00:04:04,496 --> 00:04:08,762
sure to create that logical separation between

59
00:04:08,816 --> 00:04:11,854
the resources so you will minimize the

60
00:04:11,892 --> 00:04:15,118
risk. If you are writing comes change.

61
00:04:15,204 --> 00:04:18,846
You don't want to take the risk that if you

62
00:04:18,868 --> 00:04:23,410
are putting a typo or something that you missed

63
00:04:24,390 --> 00:04:27,700
in your pipeline will damage the entire application.

64
00:04:28,070 --> 00:04:32,194
You want that the blast radius will be small as possible,

65
00:04:32,392 --> 00:04:37,302
so try to create smaller pieces and

66
00:04:37,436 --> 00:04:39,560
reuse them whenever you can.

67
00:04:41,050 --> 00:04:44,550
Another tip that I have for you is keep

68
00:04:44,620 --> 00:04:48,154
everything consistent. So before you are

69
00:04:48,192 --> 00:04:51,580
creating your first project just

70
00:04:52,750 --> 00:04:56,150
do the reading and understand what is the best practice

71
00:04:56,230 --> 00:04:59,926
for naming convention and try to keep everything in the

72
00:04:59,968 --> 00:05:03,470
same convention. If you are using

73
00:05:03,540 --> 00:05:07,230
variable which is highly recommend just to make sure

74
00:05:07,380 --> 00:05:10,526
what is the right order to use them and if you

75
00:05:10,548 --> 00:05:13,922
are inherent resources from place

76
00:05:13,976 --> 00:05:19,458
to place, make sure that you are doing it in

77
00:05:19,464 --> 00:05:23,518
the right place and also about the use of the models.

78
00:05:23,614 --> 00:05:26,806
So you can use out of the box models that you can find in

79
00:05:26,828 --> 00:05:30,134
terraform registry but you can create new one.

80
00:05:30,252 --> 00:05:33,880
So before just writing a lot of code by yourself,

81
00:05:36,570 --> 00:05:40,618
make sure if that code can be available for you already

82
00:05:40,704 --> 00:05:44,134
written in the web. My next few tips

83
00:05:44,182 --> 00:05:47,306
will be regarding terraform state file and

84
00:05:47,328 --> 00:05:51,374
if you are familiar with the terraform architecture then

85
00:05:51,412 --> 00:05:54,522
you know that state file is the persistent

86
00:05:54,586 --> 00:05:57,886
way to keep the current state of

87
00:05:57,908 --> 00:06:02,218
the cloud. So terraform will know how to create new plan

88
00:06:02,404 --> 00:06:05,620
once you are introducing a change to your cloud.

89
00:06:07,030 --> 00:06:11,042
So if you are a team with multiple people

90
00:06:11,176 --> 00:06:14,434
that using terraform against a certain type

91
00:06:14,472 --> 00:06:18,134
of infrastructure you should use remote state and

92
00:06:18,172 --> 00:06:21,894
terraform providing a backend service that can help you to save

93
00:06:21,932 --> 00:06:25,842
the state in remote location. I personally

94
00:06:25,906 --> 00:06:30,710
prefer the s three bucket as the place to save the

95
00:06:30,780 --> 00:06:34,586
tf state file and this is what taking me to

96
00:06:34,608 --> 00:06:38,246
the next point of you need to make sure you are backing

97
00:06:38,278 --> 00:06:42,094
up the state file. So because the state file is so

98
00:06:42,132 --> 00:06:46,094
crucial in the piece of having a

99
00:06:46,132 --> 00:06:50,126
healthy terraform deployment, you need

100
00:06:50,148 --> 00:06:53,646
to make sure that you always keep in a

101
00:06:53,668 --> 00:06:57,474
backup of the specific state file. So if you are using s

102
00:06:57,512 --> 00:07:01,106
three as I did, you need to make sure that you

103
00:07:01,128 --> 00:07:04,974
are turn on the versioning in the s three bucket

104
00:07:05,022 --> 00:07:08,598
and then you have that peace of mind that you can always

105
00:07:08,684 --> 00:07:12,466
go back to the previous revision of the state file

106
00:07:12,578 --> 00:07:16,742
in case there is comes disaster of something happened

107
00:07:16,796 --> 00:07:20,806
to the state file and you need to go back. The next tip

108
00:07:20,838 --> 00:07:24,698
is to use the state locking. So we started

109
00:07:24,784 --> 00:07:28,822
with understanding the terraform is something that you can collaborate

110
00:07:28,886 --> 00:07:32,766
with other team members. So you need to make sure you

111
00:07:32,788 --> 00:07:36,960
know how to handle a situation where multiple people

112
00:07:37,330 --> 00:07:41,454
trying to provision and introducing changes into

113
00:07:41,492 --> 00:07:45,090
the infrastructure in the same time. And this is why

114
00:07:45,160 --> 00:07:49,378
there is a feature called state locking. So if you are using

115
00:07:49,464 --> 00:07:53,186
s three, you need also to use dynobodb in

116
00:07:53,208 --> 00:07:56,930
order to manage the lock. So the entire locking mechanism

117
00:07:57,010 --> 00:08:00,902
is just to prevent that

118
00:08:00,956 --> 00:08:04,486
situation where two people trying to

119
00:08:04,508 --> 00:08:08,658
write to the same file in the same time. So if

120
00:08:08,764 --> 00:08:11,894
someone doing a change while terraform

121
00:08:11,942 --> 00:08:15,050
is writing the state file is basically locking it for

122
00:08:15,120 --> 00:08:18,954
changes. The other team member will get a message that

123
00:08:18,992 --> 00:08:23,098
the state file is locked. And there, there is no situation where

124
00:08:23,184 --> 00:08:26,560
two people creating to the same file in the same time.

125
00:08:27,650 --> 00:08:32,094
The next tip is try to avoid situation when

126
00:08:32,132 --> 00:08:36,034
you are manually changing the state file. So as

127
00:08:36,072 --> 00:08:39,374
I mentioned, state file is only a JSON

128
00:08:39,422 --> 00:08:43,202
file and is human readable and you

129
00:08:43,256 --> 00:08:46,950
have the power to edit it

130
00:08:47,020 --> 00:08:50,502
and remove lines and add lines. But this is

131
00:08:50,556 --> 00:08:54,006
a bad practice and what will happen

132
00:08:54,108 --> 00:08:57,862
when you will manually change the state file is

133
00:08:57,916 --> 00:09:01,190
basically a place for a lot of errors.

134
00:09:01,350 --> 00:09:05,674
So if you are in a situation when you would like to import

135
00:09:05,872 --> 00:09:09,786
new resources that you are not managing terraform and

136
00:09:09,808 --> 00:09:14,590
you like to make them manage, just use the terraform import command.

137
00:09:15,010 --> 00:09:19,290
So I didn't face any situation that required

138
00:09:19,370 --> 00:09:22,310
a manually modification of state file,

139
00:09:22,490 --> 00:09:26,114
but I heard about a lot of people that tried to do that

140
00:09:26,152 --> 00:09:30,062
in some cases and they ended up with a corrupted

141
00:09:30,126 --> 00:09:31,490
terraform deploying.

142
00:09:34,230 --> 00:09:37,974
Next, I highly recommend you to use data form

143
00:09:38,092 --> 00:09:41,782
data block. So the data function

144
00:09:41,916 --> 00:09:46,614
is basically a fantastic way to get information

145
00:09:46,812 --> 00:09:50,266
out of the cloud provider APIs. It can

146
00:09:50,288 --> 00:09:54,102
be the cloud provider or other provider that terraform uses.

147
00:09:54,246 --> 00:09:58,726
But the thing is, just think about it as a query language

148
00:09:58,918 --> 00:10:02,526
that you can use to get information from the

149
00:10:02,548 --> 00:10:06,494
providers. And I can give you a very quick example

150
00:10:06,612 --> 00:10:09,626
of a great use of data calls.

151
00:10:09,818 --> 00:10:13,614
So if you have a model and you have an r coded

152
00:10:13,662 --> 00:10:17,106
list, for example, I would like to have a

153
00:10:17,128 --> 00:10:21,234
list of the availability zones. I put them in the

154
00:10:21,272 --> 00:10:25,754
file. So this list is basically statically

155
00:10:25,822 --> 00:10:29,938
handled and each time there is a changed in the availability

156
00:10:30,034 --> 00:10:33,894
zones I need to do a manual change. But if

157
00:10:33,932 --> 00:10:37,494
I will use the data block, I basically have

158
00:10:37,532 --> 00:10:40,826
in a call to the cloud using the provider and in

159
00:10:40,848 --> 00:10:44,374
this case I will use a call called AWS

160
00:10:44,422 --> 00:10:48,170
availability zone and I will give it a property called

161
00:10:48,240 --> 00:10:51,994
state available. And basically this data block

162
00:10:52,122 --> 00:10:56,122
will get the list of AWS availability zones

163
00:10:56,266 --> 00:10:59,582
which are available in a dynamic way

164
00:10:59,716 --> 00:11:02,938
through the API of the cloud provider.

165
00:11:03,114 --> 00:11:06,862
So the only thing I need to do is just to create that variable,

166
00:11:07,006 --> 00:11:10,834
the availability zones and put the value of

167
00:11:10,872 --> 00:11:14,340
the data call. So this is just an example.

168
00:11:14,790 --> 00:11:18,678
And a data call also allow you to share

169
00:11:18,764 --> 00:11:22,054
information between project. So if you will

170
00:11:22,092 --> 00:11:25,766
use it wisely, you will find that data call is a

171
00:11:25,788 --> 00:11:28,650
powerful feature in terraform.

172
00:11:30,430 --> 00:11:34,534
My next tip for you is don't bypass the infrastructure

173
00:11:34,582 --> 00:11:38,826
as code pipeline. So when

174
00:11:38,848 --> 00:11:43,054
you are creating an infrastructure has code, it's basically a

175
00:11:43,092 --> 00:11:46,986
committing to a certainly way of provisioning

176
00:11:47,098 --> 00:11:50,240
infrastructure and then infrastructure changes.

177
00:11:50,770 --> 00:11:54,242
While it's very easy to go to the cloud console or

178
00:11:54,296 --> 00:11:57,700
to use the CLI or API of the cloud,

179
00:11:58,150 --> 00:12:02,242
all of the changes from now on have to be through

180
00:12:02,376 --> 00:12:05,018
the infrastructure as code pipeline.

181
00:12:05,214 --> 00:12:08,710
So do your base your best

182
00:12:08,780 --> 00:12:12,006
and put those safety measurement in order to

183
00:12:12,028 --> 00:12:15,174
make sure no one can alter and change the

184
00:12:15,212 --> 00:12:17,800
infrastructure directly from the cloud.

185
00:12:19,950 --> 00:12:23,994
And this has got me to the next point of you

186
00:12:24,032 --> 00:12:28,220
should understand that even if you will put those

187
00:12:28,670 --> 00:12:31,742
safety measurement and try to do

188
00:12:31,796 --> 00:12:35,374
everything for education and behavioral change

189
00:12:35,572 --> 00:12:38,846
in your team, you need to make sure that you

190
00:12:38,868 --> 00:12:42,586
are monitoring for infrastructure drift. And just

191
00:12:42,628 --> 00:12:46,590
to make sure everybody here understand what is infrastructure drift.

192
00:12:46,750 --> 00:12:50,162
So drift is when your infrastructure become

193
00:12:50,296 --> 00:12:54,494
different than the one you describe in your infrastructure

194
00:12:54,542 --> 00:12:58,194
as code manifest. So it's

195
00:12:58,242 --> 00:13:01,398
mainly because somebody doing a manual change,

196
00:13:01,564 --> 00:13:05,782
but it also can happen by a third party application

197
00:13:05,916 --> 00:13:10,350
like a CSPM machine that also creating

198
00:13:10,450 --> 00:13:13,994
stuff to the cloud. So you

199
00:13:14,032 --> 00:13:17,898
need to make sure to have the right tooling in place that always

200
00:13:17,984 --> 00:13:22,410
evaluates your terraform state and terraform

201
00:13:22,570 --> 00:13:26,554
HCL configuration against the real actual deployment

202
00:13:26,602 --> 00:13:30,046
on your cloud, there is few projects that can help you to

203
00:13:30,068 --> 00:13:33,934
do that. And I think the most important tip that I

204
00:13:33,972 --> 00:13:37,890
have you today is just treat your

205
00:13:37,960 --> 00:13:41,570
infrastructure as code, the same as any other

206
00:13:41,640 --> 00:13:44,834
code. And the meaning is that

207
00:13:44,872 --> 00:13:48,790
if you have a very good CI CD pipeline with

208
00:13:48,860 --> 00:13:52,690
reviews and static code analysis and lines

209
00:13:52,770 --> 00:13:55,926
and scanners and all of the good stuff that the queue can

210
00:13:55,948 --> 00:13:59,802
put in the shift left in the CI, just make sure

211
00:13:59,856 --> 00:14:03,180
to have them also in your infrastructure as code.

212
00:14:03,550 --> 00:14:08,022
For example, there is a great project for security scanning

213
00:14:08,166 --> 00:14:11,806
like TF scan and Chekhov. There is a

214
00:14:11,828 --> 00:14:16,474
very good project that even can give you a cost projection

215
00:14:16,522 --> 00:14:20,174
like infra cost I o. So just make sure

216
00:14:20,292 --> 00:14:23,714
that you put all of those stuff even for your

217
00:14:23,752 --> 00:14:26,914
terraform code on the other infrastructure as code

218
00:14:26,952 --> 00:14:30,530
language. And also don't forget about getting

219
00:14:30,600 --> 00:14:33,842
your peer reviewing and approving your pull

220
00:14:33,896 --> 00:14:37,270
request. And this is something that we

221
00:14:37,340 --> 00:14:41,014
tend to be more loose with that state of

222
00:14:41,052 --> 00:14:44,914
mind. But from my experience, once we became

223
00:14:44,962 --> 00:14:48,486
more measures with understanding that infrastructure

224
00:14:48,518 --> 00:14:52,378
has code is just like another code, we see

225
00:14:52,464 --> 00:14:56,426
how the quality become much much better

226
00:14:56,528 --> 00:14:57,500
over time.

227
00:14:59,550 --> 00:15:02,894
So if I would like to conclude all the stuff that

228
00:15:02,932 --> 00:15:06,414
I mentioned here, and I think if you take not all

229
00:15:06,452 --> 00:15:09,502
of those items, only few of them,

230
00:15:09,636 --> 00:15:12,762
and you implement them in your journey,

231
00:15:12,906 --> 00:15:17,200
you will be with a very successful point

232
00:15:17,570 --> 00:15:21,630
and you will have a better experience using

233
00:15:21,700 --> 00:15:25,270
infrastructure as code. Thank you very much much.

234
00:15:25,340 --> 00:15:29,894
I will be available for any other question after the

235
00:15:29,932 --> 00:15:32,900
talk. Thank you and see you again.

