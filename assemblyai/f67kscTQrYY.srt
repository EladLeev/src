1
00:01:45,770 --> 00:01:49,514
Hi everyone, welcome to this session. My name is Arfan Sharif.

2
00:01:49,642 --> 00:01:53,146
I'm a technical marketing engineer at Crowdstrike

3
00:01:53,338 --> 00:01:56,602
and I work in the Falcon

4
00:01:56,666 --> 00:02:00,266
log scale team. And today I'm going to be covering it's

5
00:02:00,298 --> 00:02:04,154
a log eat log world. Crucial log management skills

6
00:02:04,202 --> 00:02:05,990
for devsecops.

7
00:02:08,870 --> 00:02:12,286
Let's have a look at the agenda for today and what we'll

8
00:02:12,318 --> 00:02:16,638
do is we'll start with Devsecops and talk about the fundamentals

9
00:02:16,814 --> 00:02:20,354
around that area. We'll talk through the fundamentals

10
00:02:20,402 --> 00:02:23,958
of logging and then we'll tie the two together.

11
00:02:24,044 --> 00:02:27,554
So we'll look at what boxes can log management tick

12
00:02:27,602 --> 00:02:31,930
for devsecops. We can then go into data

13
00:02:32,000 --> 00:02:35,930
types and data sources which may be relevant for Devsecops.

14
00:02:36,750 --> 00:02:40,454
We can then talk about best practice and we'll wrap

15
00:02:40,502 --> 00:02:44,542
up on why log management is important for

16
00:02:44,596 --> 00:02:46,270
Devsecops teams.

17
00:02:51,460 --> 00:02:55,884
So just to start, let's talk about Devsecops fundamentals,

18
00:02:56,012 --> 00:02:59,936
particularly about why do you need Devsecops?

19
00:03:00,128 --> 00:03:03,696
So with the rise of cloud technology as well as containers

20
00:03:03,728 --> 00:03:07,476
and microservices, this has really fundamentally changed the way

21
00:03:07,498 --> 00:03:11,340
that software is developed. And in a DevOps culture,

22
00:03:11,520 --> 00:03:15,320
APIs and configuration tools are needed to

23
00:03:15,390 --> 00:03:18,904
break down the infrastructure as code, which can then

24
00:03:18,942 --> 00:03:23,192
be adapted and revised by the development team.

25
00:03:23,326 --> 00:03:27,500
So this allows developers to provision and scale the infrastructure

26
00:03:28,320 --> 00:03:32,110
without involvement of a separate infrastructure team.

27
00:03:32,560 --> 00:03:35,320
And there's been a growth of serverless functions,

28
00:03:35,400 --> 00:03:38,656
microservices and containers by developers. And this

29
00:03:38,678 --> 00:03:41,744
has introduced new security risks that now

30
00:03:41,782 --> 00:03:45,676
need to be accounted for. So if you think about the architecture

31
00:03:45,708 --> 00:03:49,264
of cloud native applications and it requiring

32
00:03:49,312 --> 00:03:53,380
its own infrastructure, sorry, its own unique approach

33
00:03:53,720 --> 00:03:57,728
to security in terms of policies and controls,

34
00:03:57,904 --> 00:04:01,464
this additionally having to meet

35
00:04:01,502 --> 00:04:05,524
the challenge of maintain a consistent security approach

36
00:04:05,572 --> 00:04:09,544
across data center and public cloud environments where

37
00:04:09,582 --> 00:04:11,800
the applications are being deployed.

38
00:04:12,540 --> 00:04:15,956
And it often have to contend with lack

39
00:04:15,988 --> 00:04:19,992
of maturity of tools for securing containers, API vulnerabilities

40
00:04:20,056 --> 00:04:23,852
and other issues. And if you think about the VM or

41
00:04:23,906 --> 00:04:27,564
virtual machine based cloud deployments, security tools and best

42
00:04:27,602 --> 00:04:31,312
practices are a bit more mature and they offer more full

43
00:04:31,366 --> 00:04:34,944
feature detection and visibility into threats and performance issues.

44
00:04:35,142 --> 00:04:38,864
So at the moment we can't say the same about cloud native environments

45
00:04:38,912 --> 00:04:43,460
that are leveraging microservices and containers. And despite these challenges,

46
00:04:43,880 --> 00:04:48,432
cloud native approaches offer an opportunity for businesses

47
00:04:48,496 --> 00:04:52,084
to transform the security alongside digital initiatives

48
00:04:52,132 --> 00:04:56,376
to support the organization and to reach the

49
00:04:56,398 --> 00:04:58,520
peak of DevOps organizations.

50
00:04:59,420 --> 00:05:03,096
So to reach that peak, organizations need to find a way to

51
00:05:03,118 --> 00:05:06,940
embrace cloud native application development securely and

52
00:05:07,010 --> 00:05:10,712
making security an equal consideration alongside

53
00:05:10,776 --> 00:05:14,270
the development and operations. It's really

54
00:05:14,640 --> 00:05:18,592
another important aspect. So coming

55
00:05:18,646 --> 00:05:22,290
back to how does Devsecops work?

56
00:05:22,820 --> 00:05:26,432
So, in a DevsecOps approach, security is

57
00:05:26,486 --> 00:05:29,860
built into every part of the DevOps lifecycle

58
00:05:30,360 --> 00:05:33,616
and the key tactics they involve,

59
00:05:33,808 --> 00:05:37,140
incorporating infosec professionals

60
00:05:37,480 --> 00:05:41,476
or security experts within the DevOps team to oversee

61
00:05:41,508 --> 00:05:44,920
the security agenda within the development lifecycle.

62
00:05:45,420 --> 00:05:48,916
Also elevating the security skill

63
00:05:48,948 --> 00:05:52,484
set of the it team so to understand cyber risks

64
00:05:52,532 --> 00:05:56,408
and best practice so that each member can consider implications

65
00:05:56,504 --> 00:06:00,220
during the developers process and writing code with

66
00:06:00,290 --> 00:06:04,220
security in mind, and then also automating

67
00:06:05,040 --> 00:06:08,480
security processes and tasks such as

68
00:06:08,550 --> 00:06:12,288
testing for security exploits to enable an

69
00:06:12,374 --> 00:06:16,188
agile workflow and developing security processes

70
00:06:16,204 --> 00:06:20,164
and tools that are specifically designed to

71
00:06:20,202 --> 00:06:24,100
support agile technologies such as cloud containers and microservices.

72
00:06:24,760 --> 00:06:28,532
In a traditional DevOps approach, security testing is often

73
00:06:28,586 --> 00:06:31,848
done near the end of the development process and

74
00:06:31,934 --> 00:06:35,160
typically once the application has been deployed to production.

75
00:06:35,740 --> 00:06:39,336
And this is because security related tasks such

76
00:06:39,358 --> 00:06:43,408
as secure configuration and management, and also vulnerability scanning,

77
00:06:43,604 --> 00:06:48,028
they historically have been known to be fairly time

78
00:06:48,114 --> 00:06:52,270
intensive and essentially they slow down the development process.

79
00:06:54,880 --> 00:06:57,756
Let's talk about logs management fundamentals.

80
00:06:57,948 --> 00:07:01,564
So if you're not familiar with log management itself, essentially,

81
00:07:01,612 --> 00:07:05,184
if you think about a log file, it is a text file where

82
00:07:05,222 --> 00:07:09,020
applications, including operating systems, write events and logs

83
00:07:09,100 --> 00:07:12,836
show you what happened behind the scenes when it happened.

84
00:07:13,018 --> 00:07:16,464
So if something should go wrong with your systems, you've got a detailed

85
00:07:16,512 --> 00:07:19,888
record of every action prior to the anomaly.

86
00:07:19,984 --> 00:07:23,268
Therefore, log files make it easier for developers, DevOps,

87
00:07:23,284 --> 00:07:26,788
sysadmins and secops to get insights and identify the root

88
00:07:26,804 --> 00:07:30,372
cause of an issue with applications and infrastructure.

89
00:07:30,516 --> 00:07:33,720
And logs are also useful when systems behave normally.

90
00:07:34,060 --> 00:07:37,484
You can get insights into how your applications react and perform

91
00:07:37,602 --> 00:07:41,036
in order to improve them. And there are many different sources of

92
00:07:41,058 --> 00:07:44,556
logs as well as log types, and we can

93
00:07:44,578 --> 00:07:48,000
talk about some of them as we go through the session.

94
00:07:49,460 --> 00:07:53,564
So now we've had an overview of both what boxes can log management

95
00:07:53,612 --> 00:07:57,584
tick for devsecops. So log management provides insight into

96
00:07:57,622 --> 00:08:01,344
the health and the compliance of your systems, platforms and applications.

97
00:08:01,472 --> 00:08:04,864
Without it, you'd be stumbling around in the dark, hoping to pinpoint sources

98
00:08:04,912 --> 00:08:08,484
of performance issues, bugs, unexpected behavior and other

99
00:08:08,522 --> 00:08:12,196
similar issues, and you'd be forced to manually inspect multiple

100
00:08:12,228 --> 00:08:15,464
log files while trying to troubleshoot production issues.

101
00:08:15,662 --> 00:08:20,184
This can be a painful, slow, error prone and expensive process.

102
00:08:20,302 --> 00:08:24,556
It's not often scalable either. Log management is especially important

103
00:08:24,658 --> 00:08:28,364
for cloud native applications because of their dynamic, distributed and

104
00:08:28,402 --> 00:08:31,912
ephemeral nature. So unlike traditional applications,

105
00:08:32,056 --> 00:08:35,208
cloud native applications often run in containers.

106
00:08:35,384 --> 00:08:39,296
They emit logs to standard output rather than writing them

107
00:08:39,318 --> 00:08:43,312
to files. So this means you don't have the default option

108
00:08:43,446 --> 00:08:47,356
for manually grepping logs. Typically, you'd capture the logs

109
00:08:47,388 --> 00:08:50,580
and ship them to a centralized log management solution.

110
00:08:52,040 --> 00:08:55,364
Essentially in a nutshell, log management enables applications and

111
00:08:55,402 --> 00:08:59,220
infrastructure operations to troubleshoot problems and allow

112
00:08:59,290 --> 00:09:02,792
business stakeholders to derive insights from data

113
00:09:02,846 --> 00:09:06,232
embedded in log events. And logs are also known as the key

114
00:09:06,286 --> 00:09:09,716
sources of data for many use cases,

115
00:09:09,908 --> 00:09:12,388
whether it be it operations,

116
00:09:12,564 --> 00:09:15,420
DevOps and security analytics.

117
00:09:16,080 --> 00:09:19,884
And log management solutions bring

118
00:09:19,922 --> 00:09:23,164
in data from many different areas behind the

119
00:09:23,202 --> 00:09:26,992
use cases we've just discussed. So let's just touch on

120
00:09:27,126 --> 00:09:30,944
some of the areas that log

121
00:09:30,982 --> 00:09:35,116
management will help devsecops with. So firstly,

122
00:09:35,148 --> 00:09:39,104
let's talk about monitoring and troubleshooting. So if you think about the most

123
00:09:39,142 --> 00:09:42,820
common and core log management use case is a software application

124
00:09:42,890 --> 00:09:47,568
and infrastructure troubleshooting. So this is one of the most popular historically,

125
00:09:47,664 --> 00:09:51,860
and log events go hand in hand with application monitoring and server monitoring

126
00:09:52,220 --> 00:09:56,116
developers devsecops, sysadmins and devsecops. They utilize

127
00:09:56,148 --> 00:09:59,720
both metrics and logs, so they're alerted

128
00:10:00,060 --> 00:10:03,464
about application and infrastructure performance and health issues,

129
00:10:03,662 --> 00:10:07,356
but also to find the root cause of those issues. Having a good

130
00:10:07,378 --> 00:10:11,352
log management tool really helps to reduce the meantime to recovery,

131
00:10:11,496 --> 00:10:15,324
which in turn improves the user experience and

132
00:10:15,362 --> 00:10:18,912
long downtimes. Or even applications and infrastructure that perform

133
00:10:19,046 --> 00:10:22,352
poorly can also be an impact on the

134
00:10:22,406 --> 00:10:25,424
organization and the business.

135
00:10:25,622 --> 00:10:28,972
Therefore, log management plays a critical role in reducing

136
00:10:29,036 --> 00:10:32,736
the meantime to recovery. Logs provide value beyond

137
00:10:32,768 --> 00:10:36,576
troubleshooting though. So if you have structured logs, either from the source or parsed

138
00:10:36,688 --> 00:10:40,304
in the pipeline, you can extract interesting metadata.

139
00:10:40,352 --> 00:10:44,696
For example, we often look at slow queries as an example,

140
00:10:44,878 --> 00:10:48,756
and we can answer lots of questions depending

141
00:10:48,788 --> 00:10:50,650
on how we query the data.

142
00:10:51,340 --> 00:10:56,804
So as

143
00:10:56,862 --> 00:11:00,716
touched on, there's a vast amount of data that

144
00:11:00,738 --> 00:11:04,412
can be brought into these platforms and you have the ability to query them based

145
00:11:04,466 --> 00:11:07,948
on your requirements and your use cases. And it can be

146
00:11:07,954 --> 00:11:11,436
across use cases. So it doesn't have to be structured logs,

147
00:11:11,468 --> 00:11:14,704
they can be unstructured logs too, and then you can structure them as you go

148
00:11:14,742 --> 00:11:18,064
along. Now, if you think

149
00:11:18,102 --> 00:11:22,116
about improving operations as applications and systems become more

150
00:11:22,138 --> 00:11:25,780
and more complex, so does the size and the difficulty of the operation.

151
00:11:26,120 --> 00:11:29,968
Secops, sysadmins and devsecops would have a harder

152
00:11:29,984 --> 00:11:33,464
time monitoring everything manually, thus requiring more

153
00:11:33,502 --> 00:11:36,772
and more financial resources. And by logging, you can identify

154
00:11:36,836 --> 00:11:39,636
trends across your company's infrastructure,

155
00:11:39,748 --> 00:11:43,428
allowing you to adapt early and come up with solutions that prevent fires

156
00:11:43,524 --> 00:11:47,144
versus having to put them out. Another aspect

157
00:11:47,192 --> 00:11:50,364
is actually better resource usage. So when it comes to system performance and

158
00:11:50,402 --> 00:11:54,284
system overload is also like a dark cloud looming over

159
00:11:54,322 --> 00:11:57,832
an organization. And you need to keep in mind that

160
00:11:57,906 --> 00:12:01,296
it's not always the software at fault, but rather the requests that

161
00:12:01,318 --> 00:12:04,400
are going to the server or the environment.

162
00:12:05,780 --> 00:12:08,812
Whether there's too many requests or whether they're too complex,

163
00:12:08,956 --> 00:12:12,372
your system can have difficulties dealing with them.

164
00:12:12,506 --> 00:12:16,096
And in this case, log management helps you track resource usage.

165
00:12:16,208 --> 00:12:19,348
And you can see when your system is close to being overloaded, so you can

166
00:12:19,354 --> 00:12:23,156
allocate enough resources for it to cope.

167
00:12:23,348 --> 00:12:26,884
Performance monitoring can let you know if there's any performance

168
00:12:26,932 --> 00:12:30,484
issues, for example, if the nintieth percentile

169
00:12:30,532 --> 00:12:34,320
queries are slow and they may also reveal bottlenecks.

170
00:12:34,500 --> 00:12:38,124
So if you think about many requests going

171
00:12:38,162 --> 00:12:41,644
to a particular node or a particular server, this can cause some

172
00:12:41,682 --> 00:12:45,212
issues. And essentially log management will help

173
00:12:45,266 --> 00:12:50,272
you identify the issue and

174
00:12:50,326 --> 00:12:54,400
be a step in addressing the problem that you're facing.

175
00:12:55,460 --> 00:12:58,384
Now, most of the above actually ties up with user experience,

176
00:12:58,502 --> 00:13:02,708
but this is one of the biggest headaches people report is

177
00:13:02,874 --> 00:13:06,404
with applications, long response time to query or

178
00:13:06,442 --> 00:13:10,404
not getting a response at all is a major challenge. And log management really

179
00:13:10,442 --> 00:13:14,116
allows you to monitor requests at any level, whether it's at API

180
00:13:14,148 --> 00:13:18,180
level, whether it's at database level, to see what's actually underperforming.

181
00:13:18,260 --> 00:13:21,800
And this enables you to step in and understand why

182
00:13:21,870 --> 00:13:25,944
something occurred and helps you keep in control of your user

183
00:13:25,992 --> 00:13:29,404
experience. And last

184
00:13:29,442 --> 00:13:33,576
but not least, security and compliance. So there's

185
00:13:33,608 --> 00:13:37,536
no such thing as too much protection when it comes to it. Security and

186
00:13:37,558 --> 00:13:41,324
log analysis is really at the heart of any log management

187
00:13:41,372 --> 00:13:45,024
or SIEM solution. So from network system and audit to

188
00:13:45,062 --> 00:13:50,384
application logs, anomalies may

189
00:13:50,422 --> 00:13:54,304
signal an attack. And logs really help security administrators diagnose

190
00:13:54,352 --> 00:13:57,696
anomalies in real time. So they provide a live stream

191
00:13:57,728 --> 00:14:01,764
of log events. So whenever someone's attempting

192
00:14:01,812 --> 00:14:04,884
to breach,

193
00:14:05,012 --> 00:14:08,536
to carry out a breach or impact the environment, whether it's from the inside or

194
00:14:08,558 --> 00:14:12,280
an external threat, you'll have more insight into what actually happened.

195
00:14:12,430 --> 00:14:16,220
And if you have enough data, you can go back in time

196
00:14:16,370 --> 00:14:20,044
and look at the trail the adversary may

197
00:14:20,082 --> 00:14:24,156
have left as they went through the environment and

198
00:14:24,178 --> 00:14:27,884
then compliance the best way to ensure compliance and security and audit

199
00:14:27,932 --> 00:14:31,804
requirements is to create a logging and monitoring policy. And a log management

200
00:14:31,852 --> 00:14:35,180
policy sets security standards for audit logs,

201
00:14:35,260 --> 00:14:38,860
including system logs, network access logs, authentication logs,

202
00:14:38,940 --> 00:14:42,124
and any other data that correlates a network or

203
00:14:42,182 --> 00:14:45,876
system event with a user's activity. And more

204
00:14:45,898 --> 00:14:49,316
specifically, it provides guidelines as to what to log, where to store the

205
00:14:49,338 --> 00:14:52,536
logs, how long you keep this data, how often it should be

206
00:14:52,558 --> 00:14:56,552
reviewed. So compliance is a really key

207
00:14:56,606 --> 00:15:00,330
area when it comes to log management itself.

208
00:15:04,700 --> 00:15:07,948
Now let's go into a bit more detail and just talk about

209
00:15:08,114 --> 00:15:11,768
some of the logs which are relevant for devsecops.

210
00:15:11,864 --> 00:15:15,420
So in this example here, on the left hand side, we've got many different

211
00:15:15,570 --> 00:15:19,550
areas of it which would generate data,

212
00:15:20,080 --> 00:15:23,904
and some of these are much more relevant to devsecops than others.

213
00:15:24,102 --> 00:15:26,816
On the right hand side we've got the more relevant ones. So we've got things

214
00:15:26,838 --> 00:15:29,916
like network data. And as we interact with mobile

215
00:15:29,948 --> 00:15:33,220
apps and web apps, websites, we generate a lot of network traffic.

216
00:15:34,040 --> 00:15:37,220
And this could be network routers or switches and so on,

217
00:15:37,290 --> 00:15:40,372
they can generate lots of data.

218
00:15:40,506 --> 00:15:44,564
And unlike servers and application logs, even cloud logs

219
00:15:44,612 --> 00:15:46,600
which are in more modern formats,

220
00:15:47,340 --> 00:15:51,384
network data historically has been based on

221
00:15:51,422 --> 00:15:55,160
Syslog in terms of the format and the transmission.

222
00:15:56,000 --> 00:15:59,628
So that's a common method of working with network data.

223
00:15:59,714 --> 00:16:03,432
You also have server and application logs. So traditional sources of logs

224
00:16:03,496 --> 00:16:07,244
like servers and applications running on those servers. The kernel

225
00:16:07,292 --> 00:16:11,212
limits log messages such as which drivers it loads,

226
00:16:11,356 --> 00:16:13,330
and then there could be system services.

227
00:16:15,780 --> 00:16:19,476
It will help to show which services are up and available and which

228
00:16:19,498 --> 00:16:23,584
ones have been stopped. And then you can have information and context

229
00:16:23,632 --> 00:16:27,604
around when a user logged in. And this information really

230
00:16:27,642 --> 00:16:31,190
helps you diagnose stability and security issues.

231
00:16:31,640 --> 00:16:35,368
As for applications, you can have, let's say

232
00:16:35,374 --> 00:16:39,000
you've got NgInX web server, or a Java web app running

233
00:16:39,070 --> 00:16:43,156
on a Apache Tomcat, or a PHP application running in Apache

234
00:16:43,188 --> 00:16:46,936
web server. They'll emit various information, whether it's

235
00:16:46,968 --> 00:16:50,264
errors or debug logs events, or whether it's HTTP status

236
00:16:50,312 --> 00:16:53,608
codes. And some of the logs use standard formats.

237
00:16:53,784 --> 00:16:57,212
It could be like a common log format, while others use various

238
00:16:57,276 --> 00:17:00,816
custom formats including structured logging. So you typically would

239
00:17:00,838 --> 00:17:04,956
have like key and value logging as well as JSON

240
00:17:04,988 --> 00:17:07,984
logs as examples. If you write your own application,

241
00:17:08,182 --> 00:17:11,776
it's often suggested to use a structured logging method,

242
00:17:11,888 --> 00:17:14,740
which is easier to case down the pipeline.

243
00:17:15,560 --> 00:17:18,944
One area which is really relevant devsecops would be container

244
00:17:18,992 --> 00:17:22,616
logs. And nowadays more and more applications are

245
00:17:22,638 --> 00:17:26,040
deployed in containers, containers and applications running inside

246
00:17:26,110 --> 00:17:29,556
them. They're a big source of logs, and unlike

247
00:17:29,588 --> 00:17:31,640
traditional applications and servers,

248
00:17:32,780 --> 00:17:36,184
they're quite promiscuous. So a container orchestration framework

249
00:17:36,232 --> 00:17:39,736
like Kubernetes moves containers from host to host,

250
00:17:39,848 --> 00:17:43,336
adapting to demand and resource availability. And an average

251
00:17:43,368 --> 00:17:46,928
container's lifespan can be really short. On top of

252
00:17:46,934 --> 00:17:50,480
that, you don't have the practice to SSH in

253
00:17:50,630 --> 00:17:54,320
and tail and grep the logs to troubleshoot.

254
00:17:54,660 --> 00:17:58,956
This was deemed a bad practice in the cloud native world and

255
00:17:58,998 --> 00:18:02,404
hence it's more important to have log management solution where

256
00:18:02,442 --> 00:18:05,744
all of this ephemeral data can reside

257
00:18:05,792 --> 00:18:09,684
and be available. Should you need to troubleshoot or

258
00:18:09,802 --> 00:18:13,476
carry out an investigation, then beyond that

259
00:18:13,498 --> 00:18:17,176
you have mobile devices which are ubiquitous, so you might not think of them

260
00:18:17,198 --> 00:18:20,648
as sources of logs because you can't easily access system or application

261
00:18:20,734 --> 00:18:23,876
logs on an iOS or an Android device.

262
00:18:23,988 --> 00:18:27,756
So there's often limited disk space and unreliable network means you can't log

263
00:18:27,858 --> 00:18:31,624
verbose messages locally and you can't

264
00:18:31,672 --> 00:18:35,624
assume that you'll ship the logs to a central location

265
00:18:35,672 --> 00:18:38,928
in real time. In spite of those challenges, there are ways to

266
00:18:38,934 --> 00:18:42,672
get that data in and move them

267
00:18:42,726 --> 00:18:46,080
into a central log management solution.

268
00:18:47,060 --> 00:18:50,436
Now, security has a large role to play in all of

269
00:18:50,458 --> 00:18:54,244
this data and it really depends on the

270
00:18:54,282 --> 00:18:57,876
use case and what lens you're using, even if you go

271
00:18:57,898 --> 00:19:01,796
beyond security. So you could be interested in performance

272
00:19:01,828 --> 00:19:05,608
and uptime and availability, or you could be interested in

273
00:19:05,774 --> 00:19:08,824
getting security context from that

274
00:19:08,862 --> 00:19:12,952
data. So logging is quite unique from that perspective as

275
00:19:13,086 --> 00:19:15,630
you can look at it from the lens you choose to,

276
00:19:19,440 --> 00:19:23,180
there's a variety of data, you can look at it from many different aspects.

277
00:19:27,540 --> 00:19:30,908
Now let's just touch on some Devsecops best practices

278
00:19:31,004 --> 00:19:34,972
and organizations they want to unify

279
00:19:35,036 --> 00:19:39,844
it operations the security team and application developers need

280
00:19:39,882 --> 00:19:43,904
to make security a core component of the software

281
00:19:43,952 --> 00:19:47,504
development workflow. So in order to enable devsecops,

282
00:19:47,552 --> 00:19:50,470
the organization should do some basic things.

283
00:19:50,920 --> 00:19:55,124
Firstly, they should ensure that security testing is incorporated throughout

284
00:19:55,172 --> 00:19:59,210
the development cycle and completed by the development team.

285
00:20:00,700 --> 00:20:03,748
So this was often something that was left right to the end, so it really

286
00:20:03,774 --> 00:20:07,624
should be incorporated into the full process. They should enable

287
00:20:07,672 --> 00:20:11,132
the development team to manage and solve issues found during

288
00:20:11,186 --> 00:20:13,916
the testing. And to that end,

289
00:20:14,018 --> 00:20:17,584
there's a few Devsecops best practices that

290
00:20:17,622 --> 00:20:21,216
help ensure that the organization can shift to this

291
00:20:21,238 --> 00:20:25,036
new agile method. Essentially, it would be good to dedicate

292
00:20:25,068 --> 00:20:28,764
an info security leader within the Devsecops team, and many teams enable

293
00:20:28,812 --> 00:20:32,464
a devsecops mindset by including a security champion within their development

294
00:20:32,512 --> 00:20:36,052
teams. This is someone who has expertise in application security

295
00:20:36,186 --> 00:20:39,700
and has taken a more advanced training in this field

296
00:20:39,850 --> 00:20:43,636
than most of the team, and this person can review security fixes

297
00:20:43,668 --> 00:20:46,968
to make sure they're correct. So if you involve your security

298
00:20:47,054 --> 00:20:50,196
champion or team early in the development

299
00:20:50,228 --> 00:20:54,540
process, integrating best practice from the initial phases of development,

300
00:20:56,000 --> 00:20:59,816
and really being able to upskill

301
00:20:59,848 --> 00:21:03,352
the IT team to ensure security is infused throughout every aspect

302
00:21:03,416 --> 00:21:07,116
of the development lifecycle itself. So this

303
00:21:07,138 --> 00:21:10,480
is really essential. And given that

304
00:21:10,550 --> 00:21:14,256
this wasn't a core responsibility of a DevOps engineer in

305
00:21:14,278 --> 00:21:17,676
the past, it might be necessary for the organization to upskill staff

306
00:21:17,708 --> 00:21:20,996
to support these new requirements. Organizations can work with

307
00:21:21,018 --> 00:21:24,308
their cybersecurity partners to develop a curriculum or training

308
00:21:24,474 --> 00:21:27,750
to really advance with this process.

309
00:21:28,200 --> 00:21:31,800
Now, some of the other key aspects that should be

310
00:21:31,870 --> 00:21:36,180
considered is really automation and recurring security processes

311
00:21:36,260 --> 00:21:40,184
should be automated logs analysis is really

312
00:21:40,222 --> 00:21:44,212
the next part of the process. So from a security viewpoint,

313
00:21:44,356 --> 00:21:48,232
it's vital that devsecops engineers in charge of the production environment

314
00:21:48,296 --> 00:21:51,260
understand how to read and analyze logs.

315
00:21:51,600 --> 00:21:55,548
DevOps teams usually lack the knowledge and the ability to identify security

316
00:21:55,634 --> 00:21:58,304
breaches or hacking attempts from log data.

317
00:21:58,422 --> 00:22:02,384
And having a log management tool capable of reading and parsing logs and

318
00:22:02,422 --> 00:22:05,936
distinguishing between permitted and unauthorized activities is really

319
00:22:05,958 --> 00:22:09,652
crucial for both tracking each action within the system

320
00:22:09,706 --> 00:22:13,510
and creating confidence in the application and the devsecops process.

321
00:22:14,680 --> 00:22:18,096
And essentially, you want to make sure that you ensure

322
00:22:18,208 --> 00:22:21,336
you log data from all the relevant data sources that

323
00:22:21,358 --> 00:22:24,712
you have to give you context over both

324
00:22:24,766 --> 00:22:26,760
devsecops and secops.

325
00:22:31,180 --> 00:22:34,712
So let's just wrap up on this particular subject

326
00:22:34,776 --> 00:22:38,430
and talk about why log management is so important.

327
00:22:38,880 --> 00:22:42,680
So logging and log analysis are really essential factors in achieving

328
00:22:42,760 --> 00:22:46,572
and maintaining application security. They're also essential for

329
00:22:46,706 --> 00:22:49,712
the success of a Devsecops organization as a whole.

330
00:22:49,846 --> 00:22:53,324
One of the biggest concepts in agile development is the idea of continuously

331
00:22:53,372 --> 00:22:56,876
evaluating the application, and examples include

332
00:22:56,988 --> 00:23:00,820
continuously testing the application to catch errors at the earliest possible moment

333
00:23:00,970 --> 00:23:04,464
in the development cycle, or continuously integrating

334
00:23:04,592 --> 00:23:08,630
code into a common code base to allow for detection of code

335
00:23:09,480 --> 00:23:13,120
integration issues at the earliest viewpoint

336
00:23:13,280 --> 00:23:17,076
possible. Now, there's no different for logging and log analysis

337
00:23:17,108 --> 00:23:21,204
as it relates to application security. While developing the software, the engineer

338
00:23:21,252 --> 00:23:25,212
should be sure to write code that will log information regarding any

339
00:23:25,266 --> 00:23:28,888
relevant security events, such as authorization

340
00:23:28,984 --> 00:23:33,032
failures, maybe even successes and input validation

341
00:23:33,096 --> 00:23:36,924
issues. In doing so, the developers will

342
00:23:36,962 --> 00:23:40,336
help build the foundation for a secure application

343
00:23:40,518 --> 00:23:44,784
as they integrate their code in a common code base to be deployed to

344
00:23:44,822 --> 00:23:48,960
test environments that mimic the specifications of production environments.

345
00:23:49,560 --> 00:23:53,428
Logs provide excellent visibility into

346
00:23:53,514 --> 00:23:58,064
potential security considerations and related

347
00:23:58,112 --> 00:24:02,052
to newly developers software. So most importantly, logs come

348
00:24:02,106 --> 00:24:05,496
from every system in your pipeline. A CI server could

349
00:24:05,518 --> 00:24:08,628
be used to identify anomalous code and operations,

350
00:24:08,804 --> 00:24:13,204
and log files from application tests and builds provide an opportunity to evaluate

351
00:24:13,252 --> 00:24:17,368
how software runs and find potential vulnerabilities before deployment.

352
00:24:17,464 --> 00:24:21,004
And logs from production environments can help in the detection of

353
00:24:21,042 --> 00:24:24,030
security issues that may arise from a running application.

354
00:24:25,040 --> 00:24:28,604
The other aspect is really about faster processes and investigation.

355
00:24:28,732 --> 00:24:32,972
So if we think about when a security issue arises

356
00:24:33,036 --> 00:24:37,292
in production developers, IT engineers, and security engineers,

357
00:24:37,436 --> 00:24:40,308
they need to react quickly and efficiently to resolve problems.

358
00:24:40,474 --> 00:24:45,060
And logging is critical for enabling fast and coordinated responses.

359
00:24:45,400 --> 00:24:48,836
Waiting on manual sharing of sensitive data can slow down the

360
00:24:48,858 --> 00:24:51,956
reaction times. But when every stakeholders can

361
00:24:51,978 --> 00:24:55,368
get the data they need from logs, access to the information

362
00:24:55,454 --> 00:24:59,530
is no longer the weakest link in the security incident remediation process.

363
00:25:00,060 --> 00:25:03,220
And I guess lastly, to touch on the final aspect,

364
00:25:03,300 --> 00:25:07,272
which is better collaboration, you can't practice

365
00:25:07,416 --> 00:25:10,588
devsecops if your developers, IT engineers and security

366
00:25:10,674 --> 00:25:14,396
engineers lack shared visibility into the state of each application

367
00:25:14,498 --> 00:25:18,224
release, in which features are coming next and

368
00:25:18,262 --> 00:25:21,548
which features are actually coming next and therefore need to be secured.

369
00:25:21,644 --> 00:25:25,152
So you could try to gain this shared visibility by asking

370
00:25:25,206 --> 00:25:29,264
various stakeholders to collaborate manually. They could

371
00:25:29,302 --> 00:25:33,348
hold meetings, talk on Slack, or so on. Yet having

372
00:25:33,434 --> 00:25:36,756
some live collaboration is always helpful, so you're unlikely to

373
00:25:36,778 --> 00:25:40,768
achieve complete shared visibility through manual collaboration alone. So that's

374
00:25:40,784 --> 00:25:44,920
why it's critical to leverage logs as a single source of truth

375
00:25:45,340 --> 00:25:48,724
to provide visibility into the pipeline. When security engineers,

376
00:25:48,772 --> 00:25:53,044
developers and IT engineers have access to log data from across the pipeline,

377
00:25:53,172 --> 00:25:56,572
they can use that data to assess its state,

378
00:25:56,706 --> 00:25:57,950
and as a result,

379
00:25:59,920 --> 00:26:02,590
they can find security issues better.

380
00:26:03,840 --> 00:26:07,360
And these may be overlooked

381
00:26:08,900 --> 00:26:12,768
if a centralized solution isn't used where

382
00:26:12,854 --> 00:26:16,316
multiple teams

383
00:26:16,508 --> 00:26:20,004
or people within a team are having

384
00:26:20,042 --> 00:26:21,030
the same access.

385
00:26:25,400 --> 00:26:29,028
Now, I just like to talk about

386
00:26:29,194 --> 00:26:32,852
Falcon log scale. So this is CrowdStrike's log management

387
00:26:32,916 --> 00:26:36,216
solution, and essentially what this

388
00:26:36,238 --> 00:26:40,500
allows you to do is bring in data from your entire estate.

389
00:26:40,580 --> 00:26:44,280
So if you think about cloud

390
00:26:44,350 --> 00:26:47,676
data as an example, it allows you to bring

391
00:26:47,698 --> 00:26:51,704
in that type of data, as well as other telemetry multicloud

392
00:26:51,752 --> 00:26:55,368
tools from your data center, from your network, from your applications,

393
00:26:55,464 --> 00:26:59,570
and then it allows you to work against that data, correlate that data,

394
00:27:00,340 --> 00:27:04,044
and you have the ability to configure alerts

395
00:27:04,092 --> 00:27:07,296
for any errors or issues. And on the right

396
00:27:07,318 --> 00:27:10,710
hand side, you can see the number of use cases that you can work with

397
00:27:12,040 --> 00:27:15,236
Falcon log case. So it helps across use cases such

398
00:27:15,258 --> 00:27:18,740
as DevOps, it operations, security and compliance, as well as business

399
00:27:18,810 --> 00:27:19,780
analytics.

400
00:27:22,540 --> 00:27:25,864
Now, Crowdstrike also offers an all in one

401
00:27:25,902 --> 00:27:28,724
cloud native platform that simplifies monitoring,

402
00:27:28,772 --> 00:27:32,840
detecting and acting on potential cloud security threats and vulnerabilities.

403
00:27:33,180 --> 00:27:37,112
As an increasing number of organizations adopt devsecops,

404
00:27:37,256 --> 00:27:40,590
they're looking for ways to ensure cloud native application security,

405
00:27:41,680 --> 00:27:45,100
protect business critical workloads and streamline operations.

406
00:27:45,940 --> 00:27:49,712
And the solution combines multiple tools and capabilities into a single

407
00:27:49,766 --> 00:27:53,536
software solution to minimize complexity and facilitate DevOps and

408
00:27:53,558 --> 00:27:57,632
devsecops team operations. Further, it offers an

409
00:27:57,686 --> 00:28:00,756
end to end cloud and application security

410
00:28:00,858 --> 00:28:04,244
through the whole CI CD application

411
00:28:04,362 --> 00:28:08,116
lifecycle. I'd like to thank you very

412
00:28:08,138 --> 00:28:11,556
much for joining this session, and if you

413
00:28:11,578 --> 00:28:15,508
have any further queries or you'd like to learn more about

414
00:28:15,674 --> 00:28:20,416
Falcon log scale or any of Crowdstrike's

415
00:28:20,448 --> 00:28:23,700
other solutions which help with challenges

416
00:28:24,400 --> 00:28:27,996
that devsecops teams face, please have a look on

417
00:28:28,018 --> 00:28:30,730
our website or reach out. Thank you again.

