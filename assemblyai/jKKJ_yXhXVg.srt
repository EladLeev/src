1
00:00:00,730 --> 00:00:04,366
What if you could work with some of the world's most innovative companies,

2
00:00:04,548 --> 00:00:07,338
all from the comfort of a remote workplace?

3
00:00:07,514 --> 00:00:10,874
Andela has matched thousands of technologists across the globe

4
00:00:10,922 --> 00:00:14,234
to their next career adventure. We're empowering

5
00:00:14,282 --> 00:00:18,714
new talent worldwide, from Sao Paulo to Egypt and Lagos

6
00:00:18,762 --> 00:00:22,414
to Warsaw. Now the future of work is yours to

7
00:00:22,452 --> 00:00:27,030
create. Anytime, anywhere. The world is at your fingertips.

8
00:00:27,370 --> 00:00:29,190
This is Andela,

9
00:01:13,250 --> 00:01:16,850
everyone. Ranjan here. Today I'll be taking a session

10
00:01:16,930 --> 00:01:20,246
on Gotchas and a few best practices in

11
00:01:20,268 --> 00:01:22,840
Golang. So let's get started.

12
00:01:24,330 --> 00:01:28,018
To start with, if you take a look at this snippet

13
00:01:28,034 --> 00:01:30,810
of code, as innocent as it may seem,

14
00:01:31,390 --> 00:01:34,794
it does primarily one thing. It takes

15
00:01:34,832 --> 00:01:38,058
in a list of numbers, or in this case, it's an array of numbers,

16
00:01:38,224 --> 00:01:41,546
and then it prints them out, and then it tries

17
00:01:41,578 --> 00:01:45,280
to call a square numbers function, which ends up squaring them,

18
00:01:45,650 --> 00:01:48,622
and then it prints the number again,

19
00:01:48,756 --> 00:01:52,346
and after which, you're printing the output,

20
00:01:52,458 --> 00:01:56,098
which is squared numbers. Now, why are we doing this? Why are

21
00:01:56,104 --> 00:01:59,714
we printing it before and after calling the function? We'll figure out why.

22
00:01:59,832 --> 00:02:04,194
That's one behavior that's common to many languages, where more

23
00:02:04,232 --> 00:02:08,146
expensive objects like arrays, lists, and other data structures

24
00:02:08,258 --> 00:02:11,640
are passed by reference, as opposed to passed by value.

25
00:02:12,090 --> 00:02:15,480
So if I run this program, as you can see,

26
00:02:15,850 --> 00:02:19,542
the numbers that I has passed were 12345 and minus six,

27
00:02:19,676 --> 00:02:23,466
and that's what has been printed here. And that was what was passed to

28
00:02:23,488 --> 00:02:26,074
square numbers to obtain the result.

29
00:02:26,272 --> 00:02:30,702
But the funny part over here is when you go inside and

30
00:02:30,756 --> 00:02:34,350
then you look at the logic of this, what you're doing here is

31
00:02:34,500 --> 00:02:39,022
you're squaring the numbers and

32
00:02:39,076 --> 00:02:42,942
storing it in the same array. So when you're doing that, it points

33
00:02:42,996 --> 00:02:46,830
to the same memory location as the array that has passed.

34
00:02:46,910 --> 00:02:50,126
So since it was a pass by reference, the original

35
00:02:50,158 --> 00:02:53,506
location gets updated. And on calling this, even though it

36
00:02:53,528 --> 00:02:57,222
returns the same array with the

37
00:02:57,276 --> 00:03:01,302
squared numbers, at this point, squared numbers

38
00:03:01,356 --> 00:03:04,710
and numbers have the same reference. That's the reason why

39
00:03:04,860 --> 00:03:08,806
the numbers and square numbers that are printed after have

40
00:03:08,828 --> 00:03:12,922
the same values. Even if you look at the addresses, it'll remain the same.

41
00:03:13,056 --> 00:03:16,070
So one thing to be careful of is when you pass trucks,

42
00:03:16,150 --> 00:03:19,578
or when you pass arrays or any other objects that are

43
00:03:19,584 --> 00:03:23,322
not primitive types, always consider the possibility of pass by reference.

44
00:03:23,386 --> 00:03:27,514
And especially if the function that you're passing the input to is manipulating

45
00:03:27,562 --> 00:03:31,134
the input in some way and reusing the variable, it could cause

46
00:03:31,172 --> 00:03:34,900
problems later, so keep a keen eye on that regard.

47
00:03:36,150 --> 00:03:39,682
Moving on, when we talk about this

48
00:03:39,736 --> 00:03:41,890
example, it's pretty straightforward.

49
00:03:42,710 --> 00:03:46,162
You have an array of variables similar to the previous example.

50
00:03:46,296 --> 00:03:49,714
You're printing it out, and then you're calling a function called rpositive

51
00:03:49,762 --> 00:03:52,710
numbers, where you pass it, and inside that,

52
00:03:52,860 --> 00:03:56,198
the gist of the logic is to check if everything

53
00:03:56,284 --> 00:03:59,950
within the past input array is positive. If it's

54
00:03:59,970 --> 00:04:02,982
positive, it's going to return true, else it's going to return false.

55
00:04:03,126 --> 00:04:07,334
So with such a simple example, as innocent

56
00:04:07,382 --> 00:04:10,746
as it may look, iterates through the numbers. It checks if any

57
00:04:10,768 --> 00:04:14,206
of the numbers while iterating is less than zero, then it sets the result to

58
00:04:14,228 --> 00:04:18,238
false, prints it out and breaks. What would we expect

59
00:04:18,324 --> 00:04:21,354
as the answer for this? Since it contains a negative

60
00:04:21,402 --> 00:04:25,378
number, we would expect the result to be false. It's not

61
00:04:25,384 --> 00:04:28,802
going to be all positive, but the actual result

62
00:04:28,856 --> 00:04:32,834
is true. And why is that? We're going to look at that.

63
00:04:33,032 --> 00:04:36,898
So what is happening here is it enters this place,

64
00:04:37,064 --> 00:04:40,722
this if loop, and the proof of that is this print statement

65
00:04:40,866 --> 00:04:44,914
result, and result is set to false. But one minor

66
00:04:44,962 --> 00:04:48,650
detail over here is the fact that we are redeclaring that variable.

67
00:04:49,150 --> 00:04:53,082
That's what colon equal to is a shorthand notation for. So when

68
00:04:53,136 --> 00:04:56,940
we are doing that, this local variable within this code

69
00:04:57,470 --> 00:05:00,650
shadows this variable.

70
00:05:01,010 --> 00:05:05,310
So any result, reference in these two lines is

71
00:05:05,380 --> 00:05:09,230
a reference to this result, not this result.

72
00:05:09,380 --> 00:05:13,410
So that is another thing to be careful of. It may seem ridiculously

73
00:05:14,630 --> 00:05:18,274
small, but it can cause problems like

74
00:05:18,312 --> 00:05:21,746
what we saw here. So to fix this, we shouldn't be

75
00:05:21,768 --> 00:05:25,318
redeclaring the variable, we should be reinitializing the

76
00:05:25,324 --> 00:05:28,966
variable. And when we do that, we get the

77
00:05:28,988 --> 00:05:32,258
actual result as desired. So be careful

78
00:05:32,354 --> 00:05:35,510
when redeclaring variables using the shorthand notation.

79
00:05:35,930 --> 00:05:39,478
It can get a bit tricky in terms of shadowing

80
00:05:39,574 --> 00:05:43,722
variable shadowing. Okay, moving on.

81
00:05:43,856 --> 00:05:46,700
Coming to slices, one of my favorite parts of code.

82
00:05:47,710 --> 00:05:51,094
We have an array of strings over here of names.

83
00:05:51,222 --> 00:05:54,270
And over here, when I say names of colon two,

84
00:05:54,340 --> 00:05:57,866
I'm basically taking a subset of the original array,

85
00:05:57,898 --> 00:06:01,086
right, a slice of it. And when I take the slice, I would

86
00:06:01,108 --> 00:06:05,086
like to see whether the slice produces a completely new string

87
00:06:05,118 --> 00:06:08,622
array or whether it only refers to the original string array.

88
00:06:08,686 --> 00:06:11,794
Hence these details. Right.

89
00:06:11,832 --> 00:06:15,478
I'm printing the length of the names as well as the new names which are

90
00:06:15,484 --> 00:06:19,366
supposed to be a subset, the capacity of it and the address of

91
00:06:19,388 --> 00:06:23,334
it. Let's see what it looks like. So if you take

92
00:06:23,372 --> 00:06:27,222
a look over

93
00:06:27,276 --> 00:06:30,954
here for names, the length is

94
00:06:30,992 --> 00:06:34,380
four, the capacity is four, and the address ends in.

95
00:06:35,230 --> 00:06:38,330
Whereas for the new names, which are supposed to be the slice,

96
00:06:39,230 --> 00:06:42,794
the length is two, right? Since we are cutting it colon two,

97
00:06:42,832 --> 00:06:45,934
it's only going to take the values in the index zero and one, which makes

98
00:06:45,972 --> 00:06:49,630
complete sense. But the capacity is four. How is that possible?

99
00:06:49,780 --> 00:06:53,566
Isn't it supposed to be smaller? This answers it.

100
00:06:53,748 --> 00:06:57,294
It's 00:40 the same address as the original

101
00:06:57,342 --> 00:07:01,170
array. So any changes that you make to the slice

102
00:07:01,830 --> 00:07:05,086
variable, the sliced portion of the string array that you store in new

103
00:07:05,128 --> 00:07:09,554
names, will affect the original array. So you got to be careful while slicing

104
00:07:09,602 --> 00:07:12,150
arrays or any other data structures,

105
00:07:13,770 --> 00:07:17,110
as it can affect the original data structure.

106
00:07:18,330 --> 00:07:22,282
Moving on, something as innocent as

107
00:07:22,336 --> 00:07:25,434
getting the length of the string right, we just go ahead and say le n

108
00:07:25,472 --> 00:07:29,146
of the string. But in certain cases, especially when you have

109
00:07:29,168 --> 00:07:31,870
unicode characters emojis symbols,

110
00:07:33,970 --> 00:07:37,178
the len output is basically the number of bytes.

111
00:07:37,354 --> 00:07:41,098
It's no longer the number of characters.

112
00:07:41,274 --> 00:07:44,782
A clear proof of it is running

113
00:07:44,836 --> 00:07:48,174
this. You see the length of that particular string, even though visually

114
00:07:48,222 --> 00:07:51,922
it's one character, it's three. So a safer way

115
00:07:51,976 --> 00:07:55,666
to actually measure the length of the string if you are expecting any unicode

116
00:07:55,698 --> 00:07:59,122
characters like these, is to use Rune count and string

117
00:07:59,266 --> 00:08:02,870
and not Len. So that's also another thing to note.

118
00:08:04,090 --> 00:08:08,206
Now, coming to logical operators in Python,

119
00:08:08,258 --> 00:08:11,770
Java, and a lot of other languages, you may have used the exclamation mark

120
00:08:11,920 --> 00:08:15,126
or even the tilde symbol for not operation,

121
00:08:15,318 --> 00:08:18,262
but in Golang specifically,

122
00:08:18,406 --> 00:08:22,874
it uses the mountain symbol or the carrot symbol for

123
00:08:22,992 --> 00:08:26,286
not as well as xor. So that is something to note. When it is used

124
00:08:26,308 --> 00:08:29,818
in a unitary sense, it's taken as a not operator. When it's

125
00:08:29,834 --> 00:08:33,102
used in a binary sense with two operands on either

126
00:08:33,156 --> 00:08:37,118
side, it's taken as an XOR operator. So that is something to note

127
00:08:37,134 --> 00:08:39,922
as well. So when you see it like this,

128
00:08:39,976 --> 00:08:43,070
you may be wondering what this is. And in some languages

129
00:08:43,230 --> 00:08:47,174
this is also used for exponentiation to

130
00:08:47,212 --> 00:08:50,358
say this can be interpreted as one part two in some of

131
00:08:50,364 --> 00:08:53,574
the languages. So that's something to note over

132
00:08:53,612 --> 00:08:59,420
here. And this is an interesting problem.

133
00:09:00,590 --> 00:09:04,220
Let's say I'm iterating through a range of numbers,

134
00:09:04,750 --> 00:09:09,178
and within that I'm using a switch case to see if

135
00:09:09,264 --> 00:09:12,426
any number that I'm iterating through, any of the numbers that

136
00:09:12,448 --> 00:09:16,430
I'm iterating through, is the maximum possible unsigned integer value.

137
00:09:16,580 --> 00:09:21,006
If that's the case, there is no way for me to compute the sum in

138
00:09:21,028 --> 00:09:24,206
a variable with the same capacity. So I'm just going to set the sum to

139
00:09:24,228 --> 00:09:28,290
max uint and break. That's the desired behavior over here.

140
00:09:28,440 --> 00:09:31,746
So for that particular scenario, what I'm going to do

141
00:09:31,848 --> 00:09:35,170
is I'm going to just say sum is equal to max un,

142
00:09:35,320 --> 00:09:38,902
break. And then after that, since the sum value

143
00:09:38,956 --> 00:09:42,694
has been set, it has to print here. And what I am expecting over

144
00:09:42,732 --> 00:09:45,762
here is for it to break and come out of the loop.

145
00:09:45,906 --> 00:09:49,046
But that's

146
00:09:49,078 --> 00:09:52,362
exactly what doesn't happen. So if I run this

147
00:09:52,496 --> 00:09:53,740
snippet of code,

148
00:09:56,430 --> 00:10:00,346
sorry about that. So if I run the snippet

149
00:10:00,378 --> 00:10:03,966
of code, you see

150
00:10:04,148 --> 00:10:08,014
the result is nine. There is a

151
00:10:08,052 --> 00:10:11,946
value here called max un, right? Which maximizes

152
00:10:11,978 --> 00:10:15,054
the sum, and there's nine. How can we

153
00:10:15,092 --> 00:10:18,538
explain that? Whenever it identifies max un, it sets

154
00:10:18,554 --> 00:10:22,046
the sum to max un. And what are the remaining values?

155
00:10:22,158 --> 00:10:24,782
1234. And what are the sum of it?

156
00:10:24,936 --> 00:10:29,410
7910. Right. So when you overflow

157
00:10:29,570 --> 00:10:35,734
past the maximum value, you start from 012-34-5678

158
00:10:35,772 --> 00:10:40,482
910 values, basically. And that's the reason why the sum is nine, just basically overflowing.

159
00:10:40,626 --> 00:10:43,958
And that's definitely not a desired behavior.

160
00:10:44,054 --> 00:10:47,334
So in order to fix this, when you want to break out of force,

161
00:10:47,382 --> 00:10:50,894
switch cases like this and break out of the loop, the way

162
00:10:50,932 --> 00:10:56,720
to approach this problem is

163
00:11:02,870 --> 00:11:06,606
to use something that all of us would have seen in much older

164
00:11:06,638 --> 00:11:09,970
languages, labels.

165
00:11:12,310 --> 00:11:14,260
So if you take a look here.

166
00:11:16,630 --> 00:11:19,794
Sorry about that. So if you take a look

167
00:11:19,832 --> 00:11:23,720
here, I set a label for this group of statements, right?

168
00:11:24,250 --> 00:11:27,554
For this particular for loop. And whenever

169
00:11:27,602 --> 00:11:31,402
I want to break out of the for loop, I just specify the label along

170
00:11:31,456 --> 00:11:35,034
with the break keyword. So that tells me I need to break

171
00:11:35,072 --> 00:11:38,550
out of the statements contained within that label.

172
00:11:38,710 --> 00:11:42,220
So that exits the loop. Now, if I run it,

173
00:11:42,830 --> 00:11:45,710
when it iterates through this list or this array,

174
00:11:46,690 --> 00:11:51,178
it hits a maximum unsigned integer value. In that scenario,

175
00:11:51,354 --> 00:11:55,166
it sets the sum to that and it just breaks the loop, which should exit

176
00:11:55,198 --> 00:11:59,630
the loop, and then the sum should be the maximum unsigned integer

177
00:11:59,710 --> 00:12:02,370
value with a lot of digits.

178
00:12:03,990 --> 00:12:07,974
So keep that in mind whenever you talk about nested loops or

179
00:12:08,012 --> 00:12:11,122
even for switch scenarios,

180
00:12:11,266 --> 00:12:13,720
consider using labels to break out.

181
00:12:15,690 --> 00:12:17,800
Okay, next one,

182
00:12:19,310 --> 00:12:23,162
we're moving to a very, very interesting part of go,

183
00:12:23,296 --> 00:12:27,290
using the defer keyword to run tasks after

184
00:12:27,360 --> 00:12:31,466
everything else in the function is done. So considering

185
00:12:31,498 --> 00:12:35,502
this particular scenario, let's see how the call argument evaluation works

186
00:12:35,556 --> 00:12:38,590
for tiffo. In this particular scenario,

187
00:12:39,250 --> 00:12:42,638
if you take a look, we have

188
00:12:42,724 --> 00:12:47,570
a list of strings, basically a bunch of names that

189
00:12:47,640 --> 00:12:51,090
we want to pass to the say goodbye function,

190
00:12:51,160 --> 00:12:54,386
which ends up just printing goodbye followed by the name. And how are

191
00:12:54,408 --> 00:12:58,038
we passing the array of strings over there? We're using strings join and

192
00:12:58,044 --> 00:13:01,750
we are passing it now, since I have differ over here,

193
00:13:01,900 --> 00:13:05,414
this method, say goodbye is basically going to be

194
00:13:05,452 --> 00:13:09,058
executed after the main method

195
00:13:09,234 --> 00:13:12,746
content is processed. So over here, if I

196
00:13:12,768 --> 00:13:16,506
change the value of the names, which is evaluated as a

197
00:13:16,528 --> 00:13:19,706
part of the argument to the function, is it going to

198
00:13:19,728 --> 00:13:23,162
affect the argument that goes into say goodbye?

199
00:13:23,306 --> 00:13:27,306
If this change is going to affect it, then he's

200
00:13:27,338 --> 00:13:30,910
no longer going to be called albus, he'll be called goodbye

201
00:13:31,730 --> 00:13:35,902
megabus perceiver Wolfreg, Bryant, Dumbledore whereas if

202
00:13:36,036 --> 00:13:39,950
any changes post the defer statement does not affect

203
00:13:40,110 --> 00:13:43,586
the arguments provided to the defer function at

204
00:13:43,608 --> 00:13:47,142
that point of time, we can be sure that it's evaluated right

205
00:13:47,196 --> 00:13:50,840
here. So let's run it and check it out.

206
00:13:51,290 --> 00:13:54,454
Perfect. We have his original name, so what does that

207
00:13:54,492 --> 00:13:57,838
tell us? It tells us that the argument evaluation for default

208
00:13:57,874 --> 00:14:01,974
statements are done then and there. So plan accordingly. While writing

209
00:14:02,022 --> 00:14:06,486
code, you cannot change the code or the arguments,

210
00:14:06,598 --> 00:14:10,158
the variables that are referred to in the arguments after the

211
00:14:10,164 --> 00:14:12,590
deferred statement, and expect that to be passed.

212
00:14:14,050 --> 00:14:18,318
So, moving on. Another very simple

213
00:14:18,484 --> 00:14:22,442
fact. Whenever we use deferred statements, the behavior

214
00:14:22,506 --> 00:14:26,030
is like a stack. When we stack multiple deferred statements,

215
00:14:26,190 --> 00:14:29,730
whatever is the last function that's deferred is what

216
00:14:29,800 --> 00:14:34,190
runs first. So it's as though you are stacking up the deferred functions

217
00:14:34,270 --> 00:14:38,150
in a stack. So last and first out. So first,

218
00:14:38,220 --> 00:14:42,002
when I run this code, it first differs printing first defer,

219
00:14:42,066 --> 00:14:44,994
and then it then defers. Printing second defer.

220
00:14:45,122 --> 00:14:47,718
And then since this is the last function,

221
00:14:47,804 --> 00:14:51,194
that's function call that's put into the stack that gets

222
00:14:51,312 --> 00:14:55,290
executed first, followed by the other one. So it prints second differ

223
00:14:55,360 --> 00:14:58,666
followed by first defer. So that's pretty

224
00:14:58,688 --> 00:15:02,286
much the order of execution of differ statements in

225
00:15:02,308 --> 00:15:05,422
a leaf form fashion. Okay,

226
00:15:05,556 --> 00:15:09,130
moving on. When we talk about iteration variable closure,

227
00:15:09,210 --> 00:15:13,294
especially in the context of a differ, right, I'm taking

228
00:15:13,332 --> 00:15:17,266
the same example of a list of names, and I'm iterating through that. And then

229
00:15:17,288 --> 00:15:21,250
I'm going to check out over here to see if I print the

230
00:15:21,320 --> 00:15:25,250
index and the name within this.

231
00:15:25,400 --> 00:15:28,886
It'll be interesting to note this and differ as well. My bad. This is an

232
00:15:28,908 --> 00:15:32,390
example for the go keyword where we are actually

233
00:15:32,540 --> 00:15:36,406
running subroutines. What is the value that it would take?

234
00:15:36,508 --> 00:15:40,106
That is the question. So when

235
00:15:40,128 --> 00:15:43,946
we run this piece of code, you see it has taken

236
00:15:44,048 --> 00:15:47,050
the last value for all iterations.

237
00:15:47,710 --> 00:15:51,550
It doesn't do it for each loop, because what happens is this

238
00:15:51,620 --> 00:15:54,826
runs pretty fast. And when the subroutines kick

239
00:15:54,858 --> 00:15:58,682
in whatever is the latest value in index

240
00:15:58,746 --> 00:16:02,350
name gets referred to over here within the subroutines.

241
00:16:02,850 --> 00:16:06,306
So to prevent this from happening, what you do

242
00:16:06,328 --> 00:16:09,874
is you need to redeclare those

243
00:16:09,912 --> 00:16:14,130
variables and then use them in the subroutine if you want to take that route.

244
00:16:14,470 --> 00:16:18,840
So say I have index copy and then I have name

245
00:16:19,290 --> 00:16:20,230
copy,

246
00:16:23,530 --> 00:16:27,230
right? And then here I'm going to use index copy,

247
00:16:27,410 --> 00:16:30,598
and here I'm going to use name copy.

248
00:16:30,774 --> 00:16:32,860
And let's see what happens now.

249
00:16:34,750 --> 00:16:38,634
Perfect. It's out of order. Because just

250
00:16:38,672 --> 00:16:42,134
because we kick off subroutines, it doesn't mean all of them will occur

251
00:16:42,262 --> 00:16:46,074
one after the other. It occurs concurrently. Some may terminate

252
00:16:46,122 --> 00:16:49,690
before, some may terminate after, so the order will not be preserved.

253
00:16:49,770 --> 00:16:53,154
But at least you're getting the different values as the output over here, which was

254
00:16:53,192 --> 00:16:56,820
the expected behavior. Okay,

255
00:16:57,430 --> 00:17:00,654
moving on. When we talk about recovering panics

256
00:17:00,702 --> 00:17:04,302
in general in Golan, one important thing to note

257
00:17:04,366 --> 00:17:08,290
is you cannot recover panics from panics

258
00:17:08,450 --> 00:17:11,954
by just calling recover in the same context

259
00:17:12,002 --> 00:17:15,654
of a panic or even after it. So when you panic, that's when

260
00:17:15,692 --> 00:17:19,298
it basically, the panic propagates. It's like throwing an exception or error in

261
00:17:19,324 --> 00:17:22,582
other languages. It's going to go up the call stack.

262
00:17:22,726 --> 00:17:26,394
So one way to actually prevent panicking is not

263
00:17:26,432 --> 00:17:30,778
by doing this. This will continue, it'll panic and it'll tell hey

264
00:17:30,944 --> 00:17:34,334
omg. Oh my God. So if you want to go ahead

265
00:17:34,372 --> 00:17:37,742
and prevent that from happening, the approach to take is

266
00:17:37,796 --> 00:17:40,878
by recovering in a defer call.

267
00:17:41,044 --> 00:17:44,418
So here I have a function that I've deferred for execution until

268
00:17:44,584 --> 00:17:48,558
the rest of the contents in main has been executed, and within that I'm

269
00:17:48,574 --> 00:17:51,374
calling the recover function, and then I'm panicking.

270
00:17:51,422 --> 00:17:54,914
OMG. So let's see what happens in

271
00:17:54,952 --> 00:17:58,134
this scenario. Perfect. It has

272
00:17:58,172 --> 00:18:01,558
recovered, and it has also printed out the output of

273
00:18:01,564 --> 00:18:04,978
the recover call, which is the panic that has been recovered,

274
00:18:05,154 --> 00:18:08,726
that it has recovered from. So if you ever want to recover

275
00:18:08,758 --> 00:18:12,698
from panics, you don't use recover in the same place,

276
00:18:12,784 --> 00:18:14,700
you use it in a differ.

277
00:18:17,390 --> 00:18:18,780
Moving on,

278
00:18:21,890 --> 00:18:23,520
last but not least,

279
00:18:28,210 --> 00:18:28,960
okay.

280
00:18:40,870 --> 00:18:44,354
Oh perfect, I think we're done. So please feel

281
00:18:44,392 --> 00:18:48,386
free to reach out if you have any questions, any comments, any concerns,

282
00:18:48,578 --> 00:18:51,762
and I'll be uploading this to a git repository,

283
00:18:51,906 --> 00:18:55,414
GitHub specifically on GitHub, and I'll share

284
00:18:55,452 --> 00:18:59,366
the link. So it'll containing all the sample codes you could play around with it,

285
00:18:59,468 --> 00:19:03,110
and it will not only contain this, eventually I'll add a lot more

286
00:19:03,260 --> 00:19:05,670
go gotchas and best practices.

287
00:19:06,090 --> 00:19:10,222
So please feel free to take a look, reach out to me,

288
00:19:10,396 --> 00:19:13,742
and I would love to hear from you. So thank you for your time

289
00:19:13,876 --> 00:19:16,890
and hope to see you soon in another conference.

