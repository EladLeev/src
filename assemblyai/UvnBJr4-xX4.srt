1
00:00:25,570 --> 00:00:29,318
Hello everyone, my name is Matilde, I am from Kudelski Security and I

2
00:00:29,324 --> 00:00:33,158
am very happy to be here and to welcome you to the presentation. Taking the

3
00:00:33,164 --> 00:00:36,726
postquantum leap with so a bit of background before we start,

4
00:00:36,828 --> 00:00:40,610
the library I'm going to present was developed as part of my master thesis.

5
00:00:40,690 --> 00:00:44,390
So this is technically a joint contribution between Kudelski Security

6
00:00:44,540 --> 00:00:47,862
and my university EPFL. So without me,

7
00:00:47,916 --> 00:00:51,854
I enjoy working with all kinds of crypto two and eventually apply them

8
00:00:51,892 --> 00:00:55,774
towards privacy enhancing technologies. I would like to mention and

9
00:00:55,812 --> 00:00:59,818
thanks one more, my supervisor, Yoland Homay. At Kudelski

10
00:00:59,834 --> 00:01:03,418
Security we are studying state of the art technologies

11
00:01:03,514 --> 00:01:07,538
actively involved in research. We also run a crypto blog and

12
00:01:07,704 --> 00:01:11,566
provide quantum resistant security services. Because what's

13
00:01:11,598 --> 00:01:14,794
more state of the art than post quantum cryptography?

14
00:01:14,942 --> 00:01:18,402
So let's start with a quick introduction. Just like classical

15
00:01:18,466 --> 00:01:21,686
computers work with bits and logical gates to

16
00:01:21,708 --> 00:01:25,650
create softwares, quantum computers use qubits,

17
00:01:25,810 --> 00:01:29,082
and this enables them to perform some

18
00:01:29,136 --> 00:01:33,174
computation way faster than any classical supercomputer

19
00:01:33,222 --> 00:01:37,162
could. This has a lot of benefits in many areas, such as health,

20
00:01:37,216 --> 00:01:41,022
finances, pharmaceuticals. But the problem is that it

21
00:01:41,076 --> 00:01:44,474
also threatens the security of the cryptographic

22
00:01:44,522 --> 00:01:47,322
algorithms that we know and use nowadays.

23
00:01:47,466 --> 00:01:51,434
So quantum attacks, basically quantum

24
00:01:51,482 --> 00:01:55,742
algorithms run on quantum computers totally

25
00:01:55,806 --> 00:01:59,294
break the security of public key schemes

26
00:01:59,342 --> 00:02:02,834
such as RSA, meaning that such algorithms will

27
00:02:02,872 --> 00:02:06,322
not protect your sensible information when facing

28
00:02:06,386 --> 00:02:10,134
postquantum adversaries. Symmetric key and hash functions are

29
00:02:10,172 --> 00:02:13,446
also expected, but not broken. Their security

30
00:02:13,548 --> 00:02:16,886
is weakened, but can be fixed by increasing the

31
00:02:16,908 --> 00:02:20,614
key size. So you might be wondering, yeah, but why

32
00:02:20,652 --> 00:02:24,410
can't we just get rid of public key cryptography then, if it's broken? The problem

33
00:02:24,480 --> 00:02:27,802
is that we are using public key cryptography all the time

34
00:02:27,856 --> 00:02:31,594
in our online world. Whether it is to store encrypted password

35
00:02:31,642 --> 00:02:34,778
with GOPAss, using some SSH,

36
00:02:34,874 --> 00:02:38,170
with traffic, encrypting emails,

37
00:02:38,330 --> 00:02:43,174
using virtual private networks, or exchanging cryptocurrencies,

38
00:02:43,322 --> 00:02:46,642
all of these projects rely on the security of

39
00:02:46,696 --> 00:02:50,260
public key cryptography. So it is very much needed,

40
00:02:51,030 --> 00:02:54,754
but not always lost, right? There exists a new

41
00:02:54,792 --> 00:02:58,194
kind of cryptography, namely the post quantum cryptography,

42
00:02:58,322 --> 00:03:02,258
which as its name states, is quantum resistant,

43
00:03:02,354 --> 00:03:05,974
remaining that in addition to being resistant to attacks that

44
00:03:06,012 --> 00:03:09,302
run on classical computers, it is also resistant

45
00:03:09,366 --> 00:03:13,174
to these new kinds of attacks run on postquantum

46
00:03:13,222 --> 00:03:17,318
computers. There exist many classes of postquantum cryptography

47
00:03:17,414 --> 00:03:21,462
that offer different kinds of tradeoff. For example, a lower runtime,

48
00:03:21,526 --> 00:03:25,406
a lower bandwidth, and it is important to know your application and

49
00:03:25,428 --> 00:03:29,914
your setup in order for you to choose the best kind of postquantum cryptography

50
00:03:29,962 --> 00:03:33,874
to use. So if you're wondering when

51
00:03:33,992 --> 00:03:37,246
should you start thinking about using post quantum cryptography,

52
00:03:37,358 --> 00:03:42,130
the correct answer actually was yesterday, because the

53
00:03:42,200 --> 00:03:46,194
process from scratch to actually complete transition to post

54
00:03:46,232 --> 00:03:50,182
quantum alternatives is extremely wrong. It works

55
00:03:50,236 --> 00:03:53,974
in few steps that include the research and standardization process

56
00:03:54,092 --> 00:03:59,170
where we at the deployment of the implementation,

57
00:03:59,330 --> 00:04:03,642
and then the integration of the said implementation into

58
00:04:03,696 --> 00:04:07,590
the security infrastructures. Right. A problem arises

59
00:04:07,750 --> 00:04:11,742
from the fact that we don't know how long do we have before

60
00:04:11,876 --> 00:04:15,866
scalable quantum computers are accessible to attackers?

61
00:04:16,058 --> 00:04:19,422
And if it is the case before the

62
00:04:19,476 --> 00:04:22,954
transition to post quantum alternatives is finished,

63
00:04:23,082 --> 00:04:26,270
then we are potentially exposing our data,

64
00:04:26,340 --> 00:04:30,162
whether it is messages, bank's information of passwords, to the

65
00:04:30,216 --> 00:04:33,842
quantum attackers. We have no idea of

66
00:04:33,896 --> 00:04:37,314
how long it will take for this quantum

67
00:04:37,362 --> 00:04:40,562
computer to be built and accessible to attackers.

68
00:04:40,706 --> 00:04:44,850
But we should not overestimated it, just like the way that git

69
00:04:44,930 --> 00:04:48,726
did it, for example, with Shawan. So for

70
00:04:48,748 --> 00:04:53,210
the story, Shawan was known to be vulnerable since 2005.

71
00:04:53,360 --> 00:04:57,082
But git suited and waited, and it took a really long time

72
00:04:57,216 --> 00:05:00,634
to finish the transition from Shawan to the

73
00:05:00,672 --> 00:05:02,526
safe alternative shot 2056.

74
00:05:02,548 --> 00:05:06,766
And actually an attack was

75
00:05:06,868 --> 00:05:10,606
mounted in 2012, if I'm correct,

76
00:05:10,788 --> 00:05:13,810
and attackers created a collision on Shao one.

77
00:05:13,960 --> 00:05:17,810
And this had disastrous effect on some repositories.

78
00:05:18,230 --> 00:05:22,190
So if git were to have been faster in this transition,

79
00:05:22,350 --> 00:05:26,166
this attack would not have been possible. And the process

80
00:05:26,268 --> 00:05:29,462
in postquantum computer computing has been really fast.

81
00:05:29,596 --> 00:05:33,554
So, as I mentioned, quantum computers now are protocols,

82
00:05:33,602 --> 00:05:36,854
right? People cannot, attackers cannot really break

83
00:05:36,892 --> 00:05:40,022
the keys and security level of the things that we use nowadays.

84
00:05:40,086 --> 00:05:43,254
But it is a matter of years before fully functional

85
00:05:43,302 --> 00:05:46,650
computers are accessible. And we should not

86
00:05:46,720 --> 00:05:49,980
wait more, because as we saw with a few

87
00:05:50,530 --> 00:05:54,426
examples, crypto agility. So changing crypto

88
00:05:54,458 --> 00:05:57,994
primitives is a true challenge. And moreover,

89
00:05:58,122 --> 00:06:02,094
we cannot simply run with the fact of. But can't we

90
00:06:02,132 --> 00:06:05,586
increase the key sizes? Because if you want something that

91
00:06:05,608 --> 00:06:09,294
is somewhat quantum resistant, taken for example, for Erisa,

92
00:06:09,342 --> 00:06:12,654
you would need to use 1 tb large keys,

93
00:06:12,782 --> 00:06:16,530
not very practical. And before I introduce our library,

94
00:06:16,610 --> 00:06:20,054
I would like to give a little crypto refresher. So I talked

95
00:06:20,092 --> 00:06:24,102
about public key cryptography. And public key cryptography has two

96
00:06:24,156 --> 00:06:28,226
main uses. The first one being authentication.

97
00:06:28,418 --> 00:06:32,630
And authentication is given by digital

98
00:06:32,710 --> 00:06:36,822
signature algorithms, certain to DSA. Digital signature

99
00:06:36,886 --> 00:06:40,602
algorithms produce a signature on the message. Given a secret

100
00:06:40,666 --> 00:06:44,122
signing key, the signature can taken, be checked,

101
00:06:44,266 --> 00:06:47,758
verified against the message, and a

102
00:06:47,764 --> 00:06:50,430
verification key that is openly disclosed.

103
00:06:50,770 --> 00:06:54,026
The DSA have the enforceability property,

104
00:06:54,148 --> 00:06:57,858
meaning that it is very hard to produce a valid signature without

105
00:06:57,944 --> 00:07:01,554
actually knowing and holding the secret signing key. And in that

106
00:07:01,592 --> 00:07:05,446
case, GSA actually do provide authentication because a

107
00:07:05,468 --> 00:07:09,318
signature in that case is the proof that

108
00:07:09,404 --> 00:07:13,266
the signer knows and holds the secret signing

109
00:07:13,298 --> 00:07:16,614
key. A second case where public key cryptography is very

110
00:07:16,652 --> 00:07:20,886
useful is for encryption. The thing with public key cryptography

111
00:07:20,998 --> 00:07:24,858
and encryption is that it is extremely slow and people want

112
00:07:24,944 --> 00:07:28,982
fast internets. So this is why public key encryption

113
00:07:29,046 --> 00:07:32,778
is mainly used in hybrid encryption schemes.

114
00:07:32,874 --> 00:07:37,194
Hybrid encryption schemes are a specific case of encryption

115
00:07:37,322 --> 00:07:41,546
where the public key part is used to transmit

116
00:07:41,658 --> 00:07:45,246
securely a symmetric key and the said symmetric

117
00:07:45,278 --> 00:07:48,754
key will later on be used to exchange the

118
00:07:48,792 --> 00:07:52,846
actual data via symmetric encryption, which is way faster.

119
00:07:52,958 --> 00:07:56,466
And so this step of encapsulating this symmetric key

120
00:07:56,488 --> 00:08:00,482
and securely transmit it is obtained with key encapsulation

121
00:08:00,546 --> 00:08:04,594
protocols shortened to KeM. So in our crystal

122
00:08:04,642 --> 00:08:08,642
go library we propose both a DSA dilithium

123
00:08:08,706 --> 00:08:12,586
and a Kem Kyber. Both Kyber and dilithium are

124
00:08:12,608 --> 00:08:15,994
quantum resistant and very good candidates for

125
00:08:16,032 --> 00:08:19,718
the plus postquantum area. They both are finalists

126
00:08:19,894 --> 00:08:23,386
in the NIST standardization competition and if

127
00:08:23,408 --> 00:08:26,826
you want more technical details, they are lattice based and they stood

128
00:08:26,858 --> 00:08:30,634
out to us because of their simplicity, tight security and overall

129
00:08:30,682 --> 00:08:34,382
versatility. Both have a very high performance and

130
00:08:34,436 --> 00:08:37,986
as you will see, they can even excel some of the classical schemes that we

131
00:08:38,008 --> 00:08:41,214
use nowadays. The main drawback of the crystal

132
00:08:41,262 --> 00:08:45,186
suite is their relatively large output size. And when

133
00:08:45,208 --> 00:08:49,042
I say outputs, I mean public key ciphertext or signature

134
00:08:49,106 --> 00:08:52,434
size. It will impact the performance

135
00:08:52,482 --> 00:08:56,294
of your project, but it will never be a bottleneck, just like a

136
00:08:56,332 --> 00:08:59,674
1 tb key could be. So really our

137
00:08:59,712 --> 00:09:03,306
contribution is that we ported the reference implementation of the

138
00:09:03,328 --> 00:09:06,842
crystal algorithms from the original C language two

139
00:09:06,896 --> 00:09:10,554
go. We make our implementation open source and available at the following

140
00:09:10,602 --> 00:09:15,054
link. We also included the QR code for faster access

141
00:09:15,252 --> 00:09:18,942
at Kudelski Security. Our mission is really to

142
00:09:19,076 --> 00:09:23,354
focus on practical security. So the theoretical part has dealt

143
00:09:23,402 --> 00:09:27,458
with with the crystal papers which include title security

144
00:09:27,544 --> 00:09:30,818
proofs which were reviewed and confirmed. So we put a lot

145
00:09:30,824 --> 00:09:34,622
of effort into having an implementation that is secure

146
00:09:34,686 --> 00:09:37,814
and we integrated as many security features as possible.

147
00:09:38,012 --> 00:09:41,522
We want this security process two be continuous.

148
00:09:41,666 --> 00:09:45,510
So we encourage you to open issues on our GitHub either

149
00:09:45,580 --> 00:09:48,774
to challenge our code or just engage in some kind

150
00:09:48,812 --> 00:09:52,166
of discussion. I will now present our API and demonstrate

151
00:09:52,198 --> 00:09:55,706
how easy to use our library is. So the

152
00:09:55,728 --> 00:09:59,482
flow of Kyber and dilithium is very similar. It works

153
00:09:59,536 --> 00:10:03,790
in two steps. First, the user has to choose a security level

154
00:10:03,940 --> 00:10:07,694
they want to work with, and this will define all the parameters that are

155
00:10:07,732 --> 00:10:11,326
used internally so that no mistake is made, and once all the

156
00:10:11,348 --> 00:10:14,938
parameters are defined, then the core functions can

157
00:10:14,964 --> 00:10:18,594
be used. Our library also has helper functions other

158
00:10:18,632 --> 00:10:22,402
than the core functions, but I will not go much

159
00:10:22,456 --> 00:10:25,586
into the detail as I want to say very high level. If you want

160
00:10:25,608 --> 00:10:29,142
to learn more about all the features that our library has,

161
00:10:29,276 --> 00:10:32,274
I suggest to go and read the readme.

162
00:10:32,402 --> 00:10:36,374
So the two steps that I mentioned are really clear when

163
00:10:36,412 --> 00:10:39,994
looking at the API. So the functions are really divided into two

164
00:10:40,032 --> 00:10:44,106
groups. The first group are the type functions that define a

165
00:10:44,128 --> 00:10:48,106
delifum instance with a specified security level. So from

166
00:10:48,128 --> 00:10:52,146
top to bottom we have an increasing security level, meaning that delifum

167
00:10:52,198 --> 00:10:55,790
two is the lightest schemes, while dilithium five

168
00:10:55,860 --> 00:10:59,422
is the strongest scheme in terms of security taken.

169
00:10:59,476 --> 00:11:03,254
Once the parameters are defined, the code function of gefium signature

170
00:11:03,322 --> 00:11:07,182
can be invoked and the code methods are of course the key generation

171
00:11:07,246 --> 00:11:10,878
functions, the signature and the verification functions.

172
00:11:11,054 --> 00:11:14,980
Otherwise it looks like this. First a user wants to

173
00:11:15,290 --> 00:11:19,206
go and have a signature protocol, agree on

174
00:11:19,228 --> 00:11:23,058
a security level and create the dailyfam instance.

175
00:11:23,234 --> 00:11:26,390
Then on this delifam instance they can call

176
00:11:26,460 --> 00:11:30,314
the core function. So the first user, for example, generates the

177
00:11:30,352 --> 00:11:32,650
verification and signing key pairs.

178
00:11:33,070 --> 00:11:36,294
The public verification key can be openly

179
00:11:36,342 --> 00:11:39,466
disclosed. Then when the first user wants to sign the

180
00:11:39,488 --> 00:11:43,134
message, he can take his sign in, key the message and

181
00:11:43,172 --> 00:11:46,334
produce a signature signature that can be transmitted along

182
00:11:46,372 --> 00:11:50,254
with the message and checked again. The public verification key

183
00:11:50,292 --> 00:11:54,298
that the second user receives. If everything went fine and the users are

184
00:11:54,324 --> 00:11:57,746
honest taken, the boolean returned by verify is going to be

185
00:11:57,768 --> 00:12:01,346
true. Similarly for Kyber, we have two groups of

186
00:12:01,368 --> 00:12:04,626
function. So front, top to bottom, we also have

187
00:12:04,648 --> 00:12:08,246
increasing security, meaning that Kyber 512 is the

188
00:12:08,268 --> 00:12:11,878
lightest and Kyber 1024 is the strongest in

189
00:12:11,884 --> 00:12:15,394
terms of security. So Kyber being a key encapsulation

190
00:12:15,442 --> 00:12:19,542
mechanism, the core functions are different. Now we have the key generation

191
00:12:19,606 --> 00:12:22,678
function that creates public and secret key pair

192
00:12:22,774 --> 00:12:26,438
and we have the encapsulation and decapsulation functions.

193
00:12:26,534 --> 00:12:30,090
The encapsulation function, given a public key and some

194
00:12:30,160 --> 00:12:33,566
coins creates a shared secret and the

195
00:12:33,588 --> 00:12:37,178
encryption of the state secret. So the encryption of the shared

196
00:12:37,194 --> 00:12:41,578
secret can be transmitted to the secret key holder for it to be decapitulated

197
00:12:41,674 --> 00:12:44,650
and thus the shared secret recovered.

198
00:12:44,810 --> 00:12:48,302
So for practical example, similarly,

199
00:12:48,366 --> 00:12:51,442
the user have to agree on the security level they want to use.

200
00:12:51,496 --> 00:12:54,626
In that case they want to use lite security. They create the

201
00:12:54,648 --> 00:12:58,006
Kyber instance and invoke the core functions. So following the

202
00:12:58,028 --> 00:13:01,814
flow of the kem, the first user generates the public and

203
00:13:01,852 --> 00:13:05,238
secret key pairs. Openly disclose the public key,

204
00:13:05,324 --> 00:13:09,558
and the second user can now engage in the translation

205
00:13:09,654 --> 00:13:13,850
mechanism by taking this public key and generating

206
00:13:14,190 --> 00:13:17,510
a shared secret and its encryption. By calling encaps,

207
00:13:17,590 --> 00:13:21,318
the ciphertext can be shared back to the first participant,

208
00:13:21,414 --> 00:13:25,210
who can use his secret key to recover the shared secret.

209
00:13:25,370 --> 00:13:28,686
In our case, the value of fs is going to

210
00:13:28,708 --> 00:13:31,854
be the same for both participants, and can be used as

211
00:13:31,892 --> 00:13:35,310
symmetric key material to then go further

212
00:13:35,390 --> 00:13:37,954
into this hybrid encryption process.

213
00:13:38,152 --> 00:13:41,886
Performance wise, what do we have? So if we're

214
00:13:41,918 --> 00:13:45,734
talking about security, our library is both theoretically and

215
00:13:45,772 --> 00:13:50,082
practically secure in comparison to the other libraries

216
00:13:50,146 --> 00:13:53,442
that provide the crystal sweeps. We integrated

217
00:13:53,506 --> 00:13:57,090
countermeasure for many of the published implementation

218
00:13:57,170 --> 00:14:00,214
attacks, so namely the side channel attacks.

219
00:14:00,342 --> 00:14:03,206
Regarding the runtime and the size of the outputs,

220
00:14:03,318 --> 00:14:07,254
we reported in this table the numbers for the recommended

221
00:14:07,302 --> 00:14:10,842
security level. So which is the medium one? And you can see that

222
00:14:10,896 --> 00:14:15,146
a function call takes from a fraction up to two milliseconds,

223
00:14:15,258 --> 00:14:19,546
and the size of the outputs ranges from 1 megabytes.

224
00:14:19,738 --> 00:14:23,438
So we thought that this number might give you some idea of

225
00:14:23,444 --> 00:14:26,946
the practicality, but still be a bit abstract. So what we did is

226
00:14:26,968 --> 00:14:30,082
that we actually compared the performance of our library against

227
00:14:30,136 --> 00:14:34,414
the library that are contained into the go crypto official package.

228
00:14:34,542 --> 00:14:38,778
So we compared dilithium against ECDSA

229
00:14:38,894 --> 00:14:42,326
and Kyber against RSA. OAB for can

230
00:14:42,348 --> 00:14:46,914
equal security level, of course, in the classical setting, because ECGSA

231
00:14:46,962 --> 00:14:51,014
and RSA are of course broken when facing quantum

232
00:14:51,062 --> 00:14:54,774
algorithms. And as you can see, our scheme, our library

233
00:14:54,822 --> 00:14:58,358
in blue is actually way more performance in term

234
00:14:58,374 --> 00:15:02,826
of runtime than the go crypto implementations highlighted

235
00:15:02,858 --> 00:15:06,430
in orange. But the tradeoff becomes evident when looking

236
00:15:06,500 --> 00:15:10,494
at the bandwidth that is being used. Just as like I mentioned,

237
00:15:10,692 --> 00:15:14,366
the output size of the crystal suite

238
00:15:14,478 --> 00:15:18,242
is way larger than what we use to deal

239
00:15:18,296 --> 00:15:22,194
with. Nevertheless, we wanted to test the practicality of

240
00:15:22,232 --> 00:15:26,802
our library. So what we did is that we implemented it and integrated

241
00:15:26,866 --> 00:15:30,838
it into the wireguard protocols. And when adding quantum resistance to

242
00:15:30,844 --> 00:15:34,422
the Wireguard protocol, while spoilers alert, it is still

243
00:15:34,476 --> 00:15:38,454
practical. It has another head of zero two milliseconds

244
00:15:38,502 --> 00:15:42,650
regarding the runtime and requires sending two extra

245
00:15:42,720 --> 00:15:46,966
IP packets. This overhead is totally

246
00:15:47,158 --> 00:15:50,422
acceptable, especially knowing that the transition

247
00:15:50,486 --> 00:15:54,346
towards postquantum schemes must happen with the arrival

248
00:15:54,378 --> 00:15:58,750
of quantum computers. And if you want more details, we encourage you to

249
00:15:58,900 --> 00:16:02,470
attend our talk at Nistford standardization

250
00:16:02,570 --> 00:16:05,618
conference. So to conclude with,

251
00:16:05,784 --> 00:16:08,930
we presented a library that is fast,

252
00:16:09,000 --> 00:16:12,926
secure and easy to use, and we therefore more showed

253
00:16:12,958 --> 00:16:17,014
you some experimental results that you should use as motivation to

254
00:16:17,052 --> 00:16:20,918
start integrating post quantum cryptography in your project

255
00:16:21,084 --> 00:16:25,062
as last word, I would say that if you're going to use cryptography any

256
00:16:25,116 --> 00:16:29,202
kind, you should make sure that it is very safe,

257
00:16:29,266 --> 00:16:33,014
especially regarding implementation security which is

258
00:16:33,052 --> 00:16:37,106
often overlooked, and make sure to use library

259
00:16:37,218 --> 00:16:40,766
that are secure in that aspect, just like we made

260
00:16:40,788 --> 00:16:44,410
sure to do with ours. So I hope that you enjoyed this presentation.

261
00:16:44,490 --> 00:16:47,630
If you want to learn more about post quantum cryptography in general,

262
00:16:47,780 --> 00:16:51,326
I added some other material that might be of interest to

263
00:16:51,348 --> 00:16:54,750
you, so thank you for very much for your attention,

264
00:16:55,570 --> 00:16:57,980
and if you have any questions, feel free to contact me.

