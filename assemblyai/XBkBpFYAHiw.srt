1
00:00:00,730 --> 00:00:04,366
What if you could work with some of the world's most innovative companies,

2
00:00:04,548 --> 00:00:07,338
all from the comfort of a remote workplace?

3
00:00:07,514 --> 00:00:11,294
Andela has matched thousands of technologists across the globe to their

4
00:00:11,332 --> 00:00:15,818
next career adventure. We're empowering new talent worldwide,

5
00:00:15,914 --> 00:00:19,802
from Sao Paulo to Egypt and Lagos to Warsaw.

6
00:00:19,946 --> 00:00:23,038
Now the future of work is yours to create.

7
00:00:23,204 --> 00:00:27,030
Anytime, anywhere, the world is at your fingertips.

8
00:00:27,370 --> 00:00:29,190
This is Andela.

9
00:01:12,950 --> 00:01:15,986
Hey everyone, my name is Tamimi. Thanks for coming to my talk.

10
00:01:16,088 --> 00:01:19,814
I'm super excited for today's presentation because

11
00:01:19,852 --> 00:01:22,600
it's a topic that is near and dear to my heart.

12
00:01:23,050 --> 00:01:27,554
We're going to be talking about gopher in an event driven playground

13
00:01:27,682 --> 00:01:31,354
and hopefully you'll have a combination of slides and hands

14
00:01:31,392 --> 00:01:35,178
on demo and then some interactions on the Discord channel.

15
00:01:35,264 --> 00:01:39,206
So let's get right into it. I'm hoping

16
00:01:39,238 --> 00:01:42,606
towards the end of this talk you will get an idea

17
00:01:42,708 --> 00:01:46,154
on what is an event driven system, how go fits

18
00:01:46,202 --> 00:01:49,454
in an event driven world by talking

19
00:01:49,492 --> 00:01:52,706
about existing messaging protocols, frameworks and tools that

20
00:01:52,728 --> 00:01:56,660
can be used in Golang, highlight the potential challenges behind

21
00:01:57,190 --> 00:02:01,134
using go and the existing messaging graph protocols,

22
00:02:01,182 --> 00:02:04,686
and finally, showcase the new solace pubsa plus messaging

23
00:02:04,718 --> 00:02:08,662
API for Golang and how y'all can get your hands on it.

24
00:02:08,716 --> 00:02:12,646
Today's topic will be pretty light hearted and fun.

25
00:02:12,828 --> 00:02:16,530
So let's assume that our cute little gopher

26
00:02:16,610 --> 00:02:19,778
is walking around in a playground. In the real world,

27
00:02:19,964 --> 00:02:23,958
there are other animals that communicate in different languages and protocols.

28
00:02:24,054 --> 00:02:27,738
Some animals are not even on the ground and they're just hovering in

29
00:02:27,744 --> 00:02:31,002
the clouds. And gopher is wondering, how can I communicate

30
00:02:31,066 --> 00:02:35,034
with these other animals? How can I send and receive

31
00:02:35,082 --> 00:02:37,550
information from these creatures?

32
00:02:37,890 --> 00:02:41,610
So these animals could be other microservices and applications

33
00:02:41,690 --> 00:02:44,542
either within the same ecosystem or other ecosystems.

34
00:02:44,606 --> 00:02:47,934
There are different languages, whether it's Java, Python, C, Ruby,

35
00:02:47,982 --> 00:02:51,854
JavaScript, or even go from these microservices. These microservices

36
00:02:51,902 --> 00:02:55,466
communicate with different protocols, whether it's rest over HTTP,

37
00:02:55,518 --> 00:02:59,442
MQTT, AMQP, there's open standards like JMS.

38
00:02:59,586 --> 00:03:03,174
There are other things around as well

39
00:03:03,212 --> 00:03:06,754
that communicate. Whether there are sensors, there are applications

40
00:03:06,802 --> 00:03:10,730
that are on ground or on cloud.

41
00:03:10,880 --> 00:03:14,730
So Gopher is wandering around

42
00:03:14,880 --> 00:03:18,266
in this playground looking for friends to help

43
00:03:18,288 --> 00:03:22,590
him answer the question. And he meets Soli the Otter and starts the conversation.

44
00:03:23,090 --> 00:03:26,794
Hi Soli, how can I accomplish a language and protocol

45
00:03:26,842 --> 00:03:29,866
agnostic real time communication with other microservices?

46
00:03:29,978 --> 00:03:33,710
You can use an event driven architecture approach, but what is

47
00:03:33,780 --> 00:03:37,186
an event driven architecture? Follow along. Let me tell you what

48
00:03:37,208 --> 00:03:41,614
event driven architecture is. Event driven architectures involve asynchronous

49
00:03:41,662 --> 00:03:45,022
communication between applications via publishing and

50
00:03:45,096 --> 00:03:49,190
subscribing to events over an event broker using

51
00:03:49,260 --> 00:03:52,726
a messaging protocol. Gopher is getting a bit

52
00:03:52,748 --> 00:03:56,162
interested. Messaging protocol basically is a structured

53
00:03:56,226 --> 00:04:00,278
way for applications to exchange payloads with other applications.

54
00:04:00,374 --> 00:04:03,466
These protocols can describe the way that the

55
00:04:03,488 --> 00:04:05,530
message being processed,

56
00:04:06,590 --> 00:04:09,306
prioritization, routing, security,

57
00:04:09,408 --> 00:04:13,054
access control are some of the many things that a

58
00:04:13,092 --> 00:04:16,494
messaging protocol is involved with.

59
00:04:16,612 --> 00:04:19,706
So in a nutshell, to animate this concept,

60
00:04:19,818 --> 00:04:23,246
you have publishers that publish messages on a predefined topic

61
00:04:23,278 --> 00:04:26,866
to brokers and subscribers subscribe to topics and the brokers can

62
00:04:26,888 --> 00:04:30,018
handle the routing. So this is fundamentally what a

63
00:04:30,024 --> 00:04:33,362
pub sub system at its base looks

64
00:04:33,416 --> 00:04:36,998
like. A real world use case of an

65
00:04:37,004 --> 00:04:40,306
event driven architecture involves several applications,

66
00:04:40,418 --> 00:04:43,906
multiple protocols, applications that are developed in different languages

67
00:04:44,018 --> 00:04:47,746
and different form factors of deployment between on premise

68
00:04:47,858 --> 00:04:51,514
public cloud and private cloud deployment. So think

69
00:04:51,552 --> 00:04:55,034
of the green lines you can see here on the diagram as

70
00:04:55,072 --> 00:04:58,506
a central nervous system for everything that happens across

71
00:04:58,608 --> 00:05:03,018
your business, whether you have different forms of deployment.

72
00:05:03,194 --> 00:05:07,534
This is basically the interaction between the different form

73
00:05:07,572 --> 00:05:11,566
factors. All right, so let's go back to the conversation between

74
00:05:11,588 --> 00:05:15,650
Gopher and Sally. Gopher wants real world examples.

75
00:05:15,990 --> 00:05:19,698
Do you do any online shopping? Do you trade on the stock market?

76
00:05:19,784 --> 00:05:23,074
Do you track airplanes in real time? All these

77
00:05:23,112 --> 00:05:27,014
are examples of event driven architectures. Another example of

78
00:05:27,052 --> 00:05:30,502
a scenario where event driven architectures are

79
00:05:30,556 --> 00:05:33,986
deployed. So let's pretend that there's

80
00:05:34,018 --> 00:05:37,798
a customer that places an order on a mobile phone, they click the

81
00:05:37,884 --> 00:05:41,274
but button and that triggers a series of actions. Behind the

82
00:05:41,312 --> 00:05:45,206
scenes digital events are being triggered. So let's

83
00:05:45,238 --> 00:05:49,174
say to check and confirm and update the back end inventory

84
00:05:49,222 --> 00:05:52,262
system, you have a payment that needs to be authorized,

85
00:05:52,326 --> 00:05:55,582
you need to start a shipment process. What if

86
00:05:55,716 --> 00:05:59,054
the company that you're working with has a loyalty program that also

87
00:05:59,092 --> 00:06:02,718
gets triggered at every purchase order and we want to update

88
00:06:02,734 --> 00:06:06,786
the customer data platform. So all this happens in real time and

89
00:06:06,968 --> 00:06:10,674
triggered from one event. So these

90
00:06:10,712 --> 00:06:13,890
applications that you look at. So another example,

91
00:06:13,960 --> 00:06:17,650
let's say that you have event producers that generate

92
00:06:17,730 --> 00:06:20,678
events through purchase requires the mobile application,

93
00:06:20,764 --> 00:06:25,010
the point of sale system, ecommerce websites, they're all different microservices

94
00:06:25,170 --> 00:06:28,962
that publishes events. These microservices or applications,

95
00:06:29,026 --> 00:06:32,666
keep in mind, could be developed in different languages, communicate over

96
00:06:32,688 --> 00:06:36,554
different protocols, but they all publish events to a network of

97
00:06:36,592 --> 00:06:39,670
event brokers. And this is what we're going to call an event mesh.

98
00:06:39,750 --> 00:06:43,766
On the other side, there are other microservices that subscribe to these events,

99
00:06:43,798 --> 00:06:47,114
whether you're a warehouse, database, finance, microservices,

100
00:06:47,162 --> 00:06:50,446
customer service. And these are event consumers that subscribe to

101
00:06:50,548 --> 00:06:54,050
relevant topics and react based

102
00:06:54,120 --> 00:06:57,458
on whatever the topic is and the payload of the

103
00:06:57,544 --> 00:07:01,778
topic is. So let's talk about kind of

104
00:07:01,944 --> 00:07:06,146
MQTT and this is one

105
00:07:06,168 --> 00:07:10,370
of the many messaging protocols, open standard messaging protocols

106
00:07:10,450 --> 00:07:14,246
that could be used in an event driven architecture. So Soli is

107
00:07:14,268 --> 00:07:18,206
coming here to talk about what MQTT is. It's a simple lightweight messaging protocol

108
00:07:18,338 --> 00:07:22,422
based on the pubsub model. It is an Oasis

109
00:07:22,566 --> 00:07:26,314
standard messaging protocol for IAT devices. You can read more about

110
00:07:26,352 --> 00:07:29,738
it@mqtt.org and I'm going

111
00:07:29,744 --> 00:07:33,390
to give you a quick hands on demo on how to use

112
00:07:33,460 --> 00:07:37,738
mqtt using the Paho Go mqtt library

113
00:07:37,914 --> 00:07:42,026
and have a simple pub sub application written

114
00:07:42,058 --> 00:07:46,126
in go. So basically what I'll be doing is I will be initializing

115
00:07:46,238 --> 00:07:49,454
a directory and installing

116
00:07:49,502 --> 00:07:53,134
the go MqtT library.

117
00:07:53,262 --> 00:07:56,866
From there I will configure my application to connect to an MQtT

118
00:07:56,978 --> 00:08:00,486
broker, subscribe to a topic, publish messaging on a

119
00:08:00,508 --> 00:08:04,054
topic and show what message handlers are all

120
00:08:04,092 --> 00:08:07,818
about and callback functions. So let's go ahead into this

121
00:08:07,904 --> 00:08:11,338
demo and I'll be back. Let's go ahead and create a

122
00:08:11,344 --> 00:08:15,020
new directory and call it conf 42 demo

123
00:08:16,190 --> 00:08:19,402
navigate to it. I'm going to initialize this

124
00:08:19,536 --> 00:08:27,070
as a go project and

125
00:08:27,220 --> 00:08:34,980
install the dependency go get so

126
00:08:35,350 --> 00:08:38,750
what I did right now is installed the Paho mqtt

127
00:08:38,910 --> 00:08:42,500
Golang. Let's open this project.

128
00:08:45,690 --> 00:08:49,574
So what I will do is create a new file, call it main

129
00:08:49,772 --> 00:08:53,286
go. In this file I

130
00:08:53,308 --> 00:08:56,920
will import the packages that I want.

131
00:08:57,530 --> 00:09:01,138
So this is a package main and I will

132
00:09:01,164 --> 00:09:04,646
be using mqtt from the Paho

133
00:09:04,678 --> 00:09:06,650
mqtt Golang package.

134
00:09:09,970 --> 00:09:13,710
I have a main program, a very simple main programming

135
00:09:13,860 --> 00:09:17,802
written here. So I define the broker

136
00:09:17,866 --> 00:09:21,450
as a MqtT broker. I'm using a solace

137
00:09:21,610 --> 00:09:25,506
cloud instance and the port

138
00:09:25,608 --> 00:09:29,598
one eight three is the exposed mqtt

139
00:09:29,774 --> 00:09:33,406
port. I set the username password

140
00:09:33,598 --> 00:09:37,810
and assign a callback functions

141
00:09:37,970 --> 00:09:41,906
right here for the MqtT client. These callback

142
00:09:41,938 --> 00:09:45,414
functions, I will define them shortly. They are

143
00:09:45,452 --> 00:09:49,034
callback functions for when successful connection happens

144
00:09:49,232 --> 00:09:52,934
and any message comes in. So let's go ahead and define

145
00:09:52,982 --> 00:09:55,478
these callback functions.

146
00:09:55,654 --> 00:09:59,180
So what do we have? Right here is

147
00:09:59,630 --> 00:10:03,226
a message handler for every time the MQtc

148
00:10:03,258 --> 00:10:07,706
client receives a message. We have callback

149
00:10:07,738 --> 00:10:11,502
functions for successful connection and lost connection to

150
00:10:11,556 --> 00:10:15,970
the broker. So right now after this, what we want to do is

151
00:10:16,120 --> 00:10:20,286
define a publish and subscribe functions.

152
00:10:20,398 --> 00:10:23,826
So let's go ahead and create this.

153
00:10:24,008 --> 00:10:27,634
So my publish function basically takes an MQtT

154
00:10:27,682 --> 00:10:31,010
client and publishes ten messages

155
00:10:31,090 --> 00:10:34,546
with a 1 second sleep.

156
00:10:34,658 --> 00:10:38,140
And the body of the message is

157
00:10:38,830 --> 00:10:42,394
the number that this

158
00:10:42,432 --> 00:10:45,978
message is in the subscribe function.

159
00:10:46,144 --> 00:10:49,306
Basically subscribes to a topic, mind you. Here as well, I want

160
00:10:49,328 --> 00:10:53,022
to point out that in the publish function we are publishing to this

161
00:10:53,076 --> 00:10:56,606
particular topic, conf 42 Go. And in

162
00:10:56,628 --> 00:11:02,442
the subscribe function I'm subscribing to Conf 42 Poundkey

163
00:11:02,506 --> 00:11:08,126
and this is a wildcard. You can read more about MQTT wildcards.

164
00:11:08,318 --> 00:11:13,182
So now that I have the publish and subscribe methods

165
00:11:13,326 --> 00:11:16,866
already done, let's go ahead in our main loop and

166
00:11:16,968 --> 00:11:20,470
what we're going to do is we're going to start the main loop by subscribing

167
00:11:21,130 --> 00:11:25,106
to the topic of choice, and then we start the publishing.

168
00:11:25,218 --> 00:11:28,442
After we publish ten messages in a loop, we go ahead

169
00:11:28,496 --> 00:11:32,202
and disconnect the client. So let's go ahead

170
00:11:32,256 --> 00:11:35,818
and run this, go back to my terminal, I'm going

171
00:11:35,824 --> 00:11:40,394
to do go run main so

172
00:11:40,432 --> 00:11:43,566
what happened? Right here it says we're connected to the message broker and

173
00:11:43,588 --> 00:11:47,146
we subscribe to this topic. Now the publisher behind the scene

174
00:11:47,178 --> 00:11:50,270
is publishing ten messages from zero to nine,

175
00:11:50,420 --> 00:11:54,306
and the subscriber receives messages on the topic of

176
00:11:54,328 --> 00:11:58,420
choice. Cool. Now that we had this demo,

177
00:11:59,270 --> 00:12:02,962
Sal is still wondering. Great. Now I know how to use go with

178
00:12:03,016 --> 00:12:06,466
messaging protocols. I'm still not sure how I can achieve

179
00:12:06,578 --> 00:12:09,270
a protocol and language agnostic approach.

180
00:12:09,770 --> 00:12:13,174
That's when you use abstraction frameworks or even

181
00:12:13,212 --> 00:12:16,514
an advanced message broker. So let's

182
00:12:16,642 --> 00:12:21,142
delve into details about what an event driven architecture

183
00:12:21,286 --> 00:12:25,034
framework is in go. These are pretty much

184
00:12:25,072 --> 00:12:28,234
go libraries that abstract the underlying implementation of an event

185
00:12:28,272 --> 00:12:31,694
driven technology via APIs. Let's take a look at an example. So basically we would

186
00:12:31,732 --> 00:12:35,214
have an interface that abstracts all

187
00:12:35,252 --> 00:12:38,954
the different integrations of different messaging APIs.

188
00:12:39,082 --> 00:12:43,738
An example to this framework is Watermill,

189
00:12:43,834 --> 00:12:47,570
and Watermill IO has several

190
00:12:48,630 --> 00:12:52,862
integrations that abstracts the implementation

191
00:12:53,006 --> 00:12:57,080
of the messaging system, the pub messaging system.

192
00:12:57,610 --> 00:12:59,430
At its core,

193
00:13:00,330 --> 00:13:03,522
Watermill has two interfaces.

194
00:13:03,586 --> 00:13:07,494
You have a publish interface and a subscribe interface. And you can see here that

195
00:13:07,612 --> 00:13:10,310
the different integrations,

196
00:13:11,290 --> 00:13:14,586
they follow the two interfaces, whether the publish or

197
00:13:14,608 --> 00:13:18,490
the subscribe interface. Keep in mind that things

198
00:13:18,560 --> 00:13:22,190
library only allows protocols communication

199
00:13:22,610 --> 00:13:26,506
on the supported integrations and it's isolated for go applications.

200
00:13:26,618 --> 00:13:30,730
So you would have a publisher

201
00:13:30,890 --> 00:13:34,818
that publishes messages and a subscriber that listens for incoming messages and

202
00:13:34,824 --> 00:13:37,858
reacts to them. So pretty much you got a

203
00:13:37,944 --> 00:13:42,110
publisher. Regardless what this publisher is, it's abstracted.

204
00:13:42,270 --> 00:13:46,354
It will publish messages on a predefined topic and the subscriber

205
00:13:46,402 --> 00:13:49,362
subscribes to the predefined topic,

206
00:13:49,426 --> 00:13:53,586
as you know, further abstraction

207
00:13:53,618 --> 00:13:57,302
on the implementation of the understanding pub messaging API you've got. For example,

208
00:13:57,356 --> 00:14:00,826
let's say you want to have an AMQP publisher. All you got to

209
00:14:00,848 --> 00:14:04,490
do is define a new AMQP publisher and then

210
00:14:04,560 --> 00:14:07,702
publish messages using the publish

211
00:14:07,766 --> 00:14:10,950
and subscribe interface. So it's basic at its implementation you

212
00:14:10,960 --> 00:14:13,310
have a publish and subscribe interface.

213
00:14:13,730 --> 00:14:16,878
So sometimes you want to think about

214
00:14:16,964 --> 00:14:21,194
how can I achieve protocol and multilanguage EDA microservices?

215
00:14:21,322 --> 00:14:24,370
And this is where we would have to look into

216
00:14:24,440 --> 00:14:27,822
advanced message brokers that support multiple languages

217
00:14:27,886 --> 00:14:31,634
and protocols. When you use a library or

218
00:14:31,672 --> 00:14:35,250
a tool that has a basic publish and

219
00:14:35,320 --> 00:14:39,142
subscribe interfaces or operations, you could

220
00:14:39,196 --> 00:14:42,130
achieve what you want. You could achieve an event driven architecture.

221
00:14:42,210 --> 00:14:45,878
But then if you want to expand this further to other

222
00:14:45,964 --> 00:14:48,726
things that you want to use, think about security,

223
00:14:48,828 --> 00:14:52,554
think about role based access control, think about governance of your

224
00:14:52,592 --> 00:14:56,106
EDA architecture. Think about, as you can see here, multi protocol and

225
00:14:56,128 --> 00:14:59,674
a multi language EDA microservices. Let's say that you even

226
00:14:59,712 --> 00:15:03,006
have some legacy infrastructure and legacy tools and you want them to interact with

227
00:15:03,028 --> 00:15:06,958
your Go microservices. I'll quickly cover

228
00:15:07,124 --> 00:15:10,574
what Solace Pubsub plus Eventdriven is all

229
00:15:10,612 --> 00:15:14,798
about. One of the advantages or benefits of

230
00:15:14,884 --> 00:15:19,230
the Solace Pubsub plus Eventdriven is the protocol interoperability

231
00:15:19,310 --> 00:15:23,358
and the protocol translation. So you can see here, I've highlighted

232
00:15:23,454 --> 00:15:27,138
in the diagram below that one

233
00:15:27,144 --> 00:15:30,790
of the solace native APIs, languages, Go is

234
00:15:30,860 --> 00:15:34,600
one of them. So you can communicate with the solace broker using Go,

235
00:15:35,050 --> 00:15:39,030
the pubsublus messaging API for Go and publish

236
00:15:39,110 --> 00:15:41,958
or subscribe to messages on the broker.

237
00:15:42,054 --> 00:15:45,862
There's other microservices and languages

238
00:15:45,926 --> 00:15:49,770
that are involved. Let's say, for example, that you have another web

239
00:15:49,840 --> 00:15:53,662
browser, microservice, that is publishing messages using

240
00:15:53,716 --> 00:15:56,938
an open standard protocol like MQTT using JavaScript.

241
00:15:57,034 --> 00:16:00,906
So with the benefits of using an advanced

242
00:16:00,938 --> 00:16:04,002
message broker in the middle of your

243
00:16:04,056 --> 00:16:07,966
architecture, in your infrastructure, you leverage

244
00:16:08,078 --> 00:16:11,454
the interoperability feature and the protocol

245
00:16:11,502 --> 00:16:15,310
translation feature of this brokerage. So let's

246
00:16:15,390 --> 00:16:18,946
have a wants on demo using the Solace hub subplus messaging

247
00:16:18,978 --> 00:16:22,600
API for go and we will come back to this.

248
00:16:23,050 --> 00:16:26,678
Now back to our conf 42 demo directory. I'm going to install

249
00:16:26,764 --> 00:16:32,570
the solace go API through Gogetsollas Devgo

250
00:16:32,910 --> 00:16:36,394
messaging. Once I execute this command, it will download the

251
00:16:36,512 --> 00:16:39,922
solace go API. I will not run it because I ran it previously.

252
00:16:40,006 --> 00:16:43,738
So let's go ahead and open up this directory.

253
00:16:43,914 --> 00:16:47,600
I'm going to create a new file over here and call it,

254
00:16:49,890 --> 00:16:53,150
I will call it Solacepublisher.

255
00:16:53,670 --> 00:16:57,106
Go. Let me make this bigger and

256
00:16:57,208 --> 00:17:01,154
increase the size over here. So this

257
00:17:01,192 --> 00:17:05,060
is package main and I will

258
00:17:05,450 --> 00:17:12,182
go ahead and start my main

259
00:17:12,236 --> 00:17:16,226
program. So what I'm going to do at first I'm going to define my configuration

260
00:17:16,418 --> 00:17:20,282
parameters to connect to the broker. So our

261
00:17:20,336 --> 00:17:25,930
host is tcpublic

262
00:17:26,350 --> 00:17:30,060
messaging solace cloud.

263
00:17:31,550 --> 00:17:35,280
There's a typo VPN name is

264
00:17:35,650 --> 00:17:39,102
public, username is Conf fourty

265
00:17:39,156 --> 00:17:42,400
two and the password is public.

266
00:17:43,830 --> 00:17:47,794
Then what I'm going to do is create a messaging service

267
00:17:47,912 --> 00:17:51,858
and start that messaging service. Note that the

268
00:17:52,024 --> 00:17:55,590
Solisco API is built

269
00:17:55,660 --> 00:17:59,506
on a builder

270
00:17:59,538 --> 00:18:03,320
pattern. So right now what I'm going to do is that

271
00:18:03,770 --> 00:18:07,480
created a messaging service and started the

272
00:18:07,870 --> 00:18:11,258
messaging service from the messaging service.

273
00:18:11,344 --> 00:18:15,126
I want to build a direct message builder

274
00:18:15,158 --> 00:18:19,014
because right now what we wants to do is have a publisher that publishes

275
00:18:19,062 --> 00:18:22,654
messages to a solace broker using the

276
00:18:22,772 --> 00:18:26,306
solace native API. So what I'm going

277
00:18:26,308 --> 00:18:29,994
to do over here is I have a direct publisher.

278
00:18:30,042 --> 00:18:34,338
I'm going to create a direct message publisher from the messaging service and start

279
00:18:34,424 --> 00:18:37,886
that messaging publisher. And now let's

280
00:18:37,918 --> 00:18:41,874
go ahead and create the message that we

281
00:18:41,912 --> 00:18:45,798
want to be sending. So I will be

282
00:18:45,964 --> 00:18:50,694
creating the message right now. So what

283
00:18:50,732 --> 00:18:54,486
we have over here is I'm going to create a message

284
00:18:54,588 --> 00:18:58,538
sequence number so I can dynamically have or build

285
00:18:58,624 --> 00:19:02,138
the payload of the body. The message body

286
00:19:02,224 --> 00:19:06,506
will be let's say hello from Conf

287
00:19:06,608 --> 00:19:10,540
42 and I'm creating a message

288
00:19:11,150 --> 00:19:15,242
through a message builder. I'm creating a message builder basically from the messaging

289
00:19:15,306 --> 00:19:18,926
service and adding different properties to the message. Right now what

290
00:19:18,948 --> 00:19:22,394
I wants to do is I want to have an infinite

291
00:19:22,442 --> 00:19:26,490
program that publishes messages every second.

292
00:19:26,660 --> 00:19:29,140
So this is what I will be doing.

293
00:19:29,670 --> 00:19:33,118
Let me put a new line here to make it look better. So I'm

294
00:19:33,134 --> 00:19:36,334
going to run forever until can interrupt signal is received.

295
00:19:36,382 --> 00:19:40,210
What I'll be doing is I have my message sequence number variable.

296
00:19:40,370 --> 00:19:44,166
Incrementing it, I'm going to be creating a message

297
00:19:44,348 --> 00:19:47,862
that has the payload of the message is the message body hello from conf fourty

298
00:19:47,916 --> 00:19:51,846
two and I'm just going to add concatenate to it the message sequence

299
00:19:51,878 --> 00:19:55,478
number to have dynamic message body. And then I'm

300
00:19:55,494 --> 00:19:58,934
golang to create a topic. So I will be sending

301
00:19:58,982 --> 00:20:02,622
a message on the following topic, the Conf 42

302
00:20:02,676 --> 00:20:06,302
solace go and also concatenating elements to

303
00:20:06,356 --> 00:20:11,578
the topics to show how we can create dynamic

304
00:20:11,674 --> 00:20:15,122
topics in here. All right, and then

305
00:20:15,176 --> 00:20:19,646
what I will be doing is publishing the message on the predefined

306
00:20:19,758 --> 00:20:23,186
topic and then sleeping for a second. And that's about

307
00:20:23,208 --> 00:20:26,534
it. We're going to be doing this going in an

308
00:20:26,572 --> 00:20:29,814
infinite loop over here until

309
00:20:29,932 --> 00:20:33,558
an interrupt is received. What I will do is I'm going

310
00:20:33,564 --> 00:20:36,866
to handle the interrupt using Go channels.

311
00:20:36,898 --> 00:20:40,230
This is one way to handle interrupts.

312
00:20:40,390 --> 00:20:44,266
So what I did is I created a channel

313
00:20:44,368 --> 00:20:48,090
that listens to an operating system

314
00:20:48,160 --> 00:20:52,446
signal interrupt. So I

315
00:20:52,468 --> 00:20:56,538
will block the program until an interrupt is received.

316
00:20:56,634 --> 00:20:59,918
And once we're done with the program,

317
00:21:00,084 --> 00:21:03,220
for good practice, what I'll be doing is

318
00:21:05,750 --> 00:21:08,946
terminating the messaging service

319
00:21:09,048 --> 00:21:12,898
and quitting the publisher. So that's about it.

320
00:21:12,984 --> 00:21:17,254
So what this program will do is connect

321
00:21:17,292 --> 00:21:20,994
to the messaging service on the predefined host

322
00:21:21,122 --> 00:21:24,774
and from here publishes messages. So what I'm trying

323
00:21:24,812 --> 00:21:28,562
to do is if you recall this diagram, we have the

324
00:21:28,636 --> 00:21:32,086
go application using the solace native API. We'll be connecting

325
00:21:32,118 --> 00:21:35,466
to the solace broker and publishing messages every second. It'll be

326
00:21:35,488 --> 00:21:39,322
cool to connect to the broker using any

327
00:21:39,376 --> 00:21:42,942
other API. So let's say I'm going to use an open

328
00:21:42,996 --> 00:21:46,800
protocol MQTT Javascript MQTT application

329
00:21:47,250 --> 00:21:50,926
and connect to the broker that

330
00:21:50,948 --> 00:21:53,970
way. So I have prepared a

331
00:21:54,040 --> 00:21:57,934
public MQTT broker provided by Hive MQ.

332
00:21:58,062 --> 00:22:01,794
So this MQTT broker connects to any

333
00:22:01,912 --> 00:22:05,922
MQTT broker using MQTT Javascript.

334
00:22:05,986 --> 00:22:11,830
So our host is public messaging

335
00:22:13,370 --> 00:22:17,334
messaging solace cloud on port 8000,

336
00:22:17,452 --> 00:22:21,180
username is Conf 42, password is

337
00:22:21,550 --> 00:22:24,794
public, I will connect to it. There you go.

338
00:22:24,832 --> 00:22:28,314
I am connected to the broker and

339
00:22:28,352 --> 00:22:32,126
the subscription that I want to add is Conf

340
00:22:32,308 --> 00:22:35,566
42 greater than. So this means I want to

341
00:22:35,588 --> 00:22:40,126
subscribe to any topic that comes to any

342
00:22:40,148 --> 00:22:44,194
message that comes to this topic. So let's go ahead to our program over

343
00:22:44,232 --> 00:22:48,420
here, open my terminal again and I'm going to run the

344
00:22:53,030 --> 00:22:56,430
solace publisher, the application that was just created.

345
00:22:56,510 --> 00:22:59,974
So what I'm doing right here is I'm publishing messages on this topic to the

346
00:23:00,012 --> 00:23:03,954
solace broker. So it's coming from the microservice

347
00:23:04,002 --> 00:23:08,214
that we have written in the Go native solace

348
00:23:08,262 --> 00:23:11,786
API into the solace broker. And then I have here

349
00:23:11,888 --> 00:23:15,414
another application, another client

350
00:23:15,462 --> 00:23:19,514
that is connected to the solace broker using an

351
00:23:19,632 --> 00:23:23,182
MQTT open protocol and

352
00:23:23,236 --> 00:23:26,990
subscribing to the topic of choice. So this showcase a

353
00:23:27,140 --> 00:23:29,994
multilingual, multi protocol,

354
00:23:30,122 --> 00:23:33,634
event driven architecture where we

355
00:23:33,672 --> 00:23:37,154
have one language using Go

356
00:23:37,272 --> 00:23:40,830
and connect it to solace using a solace

357
00:23:40,910 --> 00:23:44,906
message protocol. And then we have another protocol

358
00:23:45,038 --> 00:23:49,090
and another microservice which is this client the web browser

359
00:23:49,170 --> 00:23:52,994
connected to the same broker, using a different protocol

360
00:23:53,042 --> 00:23:56,534
and a different programming language, JavaScript, and still

361
00:23:56,572 --> 00:24:00,058
receiving the same messages that were sent by

362
00:24:00,144 --> 00:24:02,140
the original application.

363
00:24:04,830 --> 00:24:08,330
Keep in mind that the solid pub supplies messaging API for Go is available

364
00:24:08,400 --> 00:24:12,238
for download on April 1 and I promise this is not

365
00:24:12,324 --> 00:24:14,810
an API fool's joke.

366
00:24:14,970 --> 00:24:18,800
So final remarks I want to

367
00:24:19,970 --> 00:24:23,374
cover just before we end it.

368
00:24:23,492 --> 00:24:26,734
This was kind of a very quick, light hearted talk

369
00:24:26,852 --> 00:24:30,426
and presentation to talk about what event

370
00:24:30,468 --> 00:24:34,114
driven architectures are about how Go can fit

371
00:24:34,232 --> 00:24:37,698
in an event driven architecture system.

372
00:24:37,864 --> 00:24:41,214
A couple of know when we think about event

373
00:24:41,272 --> 00:24:44,518
driven at an enterprise, I want to encourage you to

374
00:24:44,524 --> 00:24:48,054
step back and take a look at EdA in general. Whether you're using Go or

375
00:24:48,092 --> 00:24:51,418
any other programming languages, there are a lot of things that are involved and a

376
00:24:51,424 --> 00:24:55,190
lot of moving parts are involved. When it comes to dealing

377
00:24:55,270 --> 00:24:58,890
with event driven architectures, you have complex environments,

378
00:24:59,390 --> 00:25:02,842
whether it's hybrid, cloud, multicloud or multiple geographical

379
00:25:02,906 --> 00:25:06,366
locations. You got diverse set of technologies. So you have

380
00:25:06,388 --> 00:25:10,126
the microservices, IoT devices, cloud native services,

381
00:25:10,228 --> 00:25:13,662
you got legacy technologies, infrastructure platform

382
00:25:13,716 --> 00:25:17,506
as surface ipasses and you want to communicate with these. You even have

383
00:25:17,528 --> 00:25:20,430
like enterprise demands. Do you have the performance,

384
00:25:20,510 --> 00:25:23,858
scalability, security? There are other capabilities that

385
00:25:23,864 --> 00:25:27,714
are required. So when you think about event driven architectures

386
00:25:27,762 --> 00:25:31,318
and can event driven system, you have to

387
00:25:31,324 --> 00:25:34,674
take into account the design of that system, the documentation,

388
00:25:34,722 --> 00:25:38,086
the discovery, the governance, the access control on

389
00:25:38,108 --> 00:25:42,362
that system. So event driven architecture is not just about pub

390
00:25:42,416 --> 00:25:46,314
sub, it's not just about how you publish messages and subscribe to

391
00:25:46,352 --> 00:25:50,406
messaging. There are other factors that take into account to deploy an

392
00:25:50,448 --> 00:25:55,226
event driven architecture in an enterprise and production

393
00:25:55,338 --> 00:25:59,134
ready level. So you

394
00:25:59,172 --> 00:26:02,986
can use go in different programming and different programming

395
00:26:03,018 --> 00:26:06,482
languages in this and I showcased how this is done.

396
00:26:06,536 --> 00:26:10,162
So all that to say, I wanted

397
00:26:10,216 --> 00:26:13,746
to mention that it's a lot to think about. It can

398
00:26:13,768 --> 00:26:17,074
feel daunting at first, but it's all necessary

399
00:26:17,122 --> 00:26:20,546
to do this well at skills.

400
00:26:20,578 --> 00:26:23,960
So this is something that I wanted to keep in mind.

401
00:26:24,650 --> 00:26:27,926
What next? Before we head out and call

402
00:26:27,948 --> 00:26:30,454
it a day for this presentation, a couple of things I want to point out.

403
00:26:30,492 --> 00:26:33,706
We have a live coding event on API twelveth. So mark your calendars. It will

404
00:26:33,728 --> 00:26:37,862
be live streamed on YouTube and LinkedIn and I'll

405
00:26:37,926 --> 00:26:41,434
probably also be live streaming it on Twitter. I'll be

406
00:26:41,472 --> 00:26:44,878
using the solace type supplies messaging API on

407
00:26:44,884 --> 00:26:48,126
a live coding session. So getting a lot of feedback and questions from

408
00:26:48,148 --> 00:26:51,646
the audience is great. Solace community join the solace community.

409
00:26:51,748 --> 00:26:54,882
We have an Easter egg hunt event that is starting very

410
00:26:54,936 --> 00:26:58,178
soon, so stay tuned. There's a lot of prizes, a lot

411
00:26:58,184 --> 00:27:01,666
of giveaways for this. Follow us on Twitter at

412
00:27:01,688 --> 00:27:05,242
solace devs and at tweet to mimi.

413
00:27:05,406 --> 00:27:09,318
And finally, if you're interested in

414
00:27:09,404 --> 00:27:13,490
event driven architectures, there's an EDA summit coming up on May 4

415
00:27:13,650 --> 00:27:16,918
at edasummit.com. So you can take a

416
00:27:16,924 --> 00:27:20,726
look at that, check it out and see if you have any other

417
00:27:20,828 --> 00:27:24,310
questions there. So that is pretty much it,

418
00:27:24,460 --> 00:27:28,326
folks. Thanks again for tuning in.

419
00:27:28,508 --> 00:27:31,998
I am more, more than happy to take any

420
00:27:32,164 --> 00:27:36,222
questions. If anybody has any questions, feel free to ask

421
00:27:36,276 --> 00:27:39,566
on the Discord channel. Or if you're watching this

422
00:27:39,668 --> 00:27:43,086
recording after the conference, feel free

423
00:27:43,108 --> 00:27:46,446
to reach out to me on Twitter at tweet to

424
00:27:46,468 --> 00:27:49,534
Tamimi or at solace devs, and I will make sure

425
00:27:49,572 --> 00:27:52,700
to answer your questions. Thank you. Take care.

