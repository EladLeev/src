1
00:00:41,090 --> 00:00:44,566
Hi, thanks for having me at Conf 42. Cloud native my name

2
00:00:44,588 --> 00:00:48,274
is Lian Li. I'm a cloud native engineer and engineering manager

3
00:00:48,322 --> 00:00:51,934
at Container Solutions in Amsterdam. We are a

4
00:00:51,972 --> 00:00:55,774
consultancy focused on programmable infrastructure and we

5
00:00:55,812 --> 00:00:59,742
help our customers move into the cloud. And you can follow me

6
00:00:59,796 --> 00:01:02,958
on GitHub or on Twitter at chimney 42.

7
00:01:03,044 --> 00:01:06,606
I'm also one of the organizers for serverless days Amsterdam.

8
00:01:06,718 --> 00:01:10,494
So we are the Amsterdam chapter of the Serverless Days conference

9
00:01:10,542 --> 00:01:14,210
series. It's a global series of community events and

10
00:01:14,360 --> 00:01:18,230
we had two conferences so far in 2019 and

11
00:01:18,300 --> 00:01:22,022
in 2020, unfortunately online and we also

12
00:01:22,076 --> 00:01:26,038
have monthly meetups every first Wednesday of the month. So if you're interested

13
00:01:26,204 --> 00:01:29,794
in checking out what this is about, then let me know and I'll

14
00:01:29,842 --> 00:01:33,194
tell you where you can find us. Or just Google serverless days in Amsterdam so

15
00:01:33,232 --> 00:01:36,522
today I'm here to tell you Kubernetes wont save you.

16
00:01:36,576 --> 00:01:39,674
You and now I told you a little bit about me. You might

17
00:01:39,712 --> 00:01:43,534
be thinking, well what about serverless? Well bad news,

18
00:01:43,652 --> 00:01:46,446
serverless won't save you either. Why?

19
00:01:46,548 --> 00:01:50,122
Because it's not about technology, it's about your culture.

20
00:01:50,186 --> 00:01:53,578
It's about your culture of problem solving, of adapting to change,

21
00:01:53,684 --> 00:01:57,698
building trust and resilience in your organization. That's the crucial thing.

22
00:01:57,784 --> 00:02:01,682
And everything I tell you today is based on my

23
00:02:01,736 --> 00:02:05,150
experience working in tech for about the last decade.

24
00:02:05,230 --> 00:02:09,346
I started as a web developer with PHP, actually moved

25
00:02:09,378 --> 00:02:12,866
to front end, then full stack, then DevOps, and now I'm

26
00:02:12,898 --> 00:02:16,006
a consultant. First things first, let's take a look at the

27
00:02:16,028 --> 00:02:19,350
state of Kubernetes. So originally, if we were in the same room,

28
00:02:19,420 --> 00:02:22,634
I would ask you to do a show of hands who has heard about

29
00:02:22,672 --> 00:02:26,202
Kubernetes? And even though I can't see you right now, I will

30
00:02:26,256 --> 00:02:30,250
assume that most people probably have heard about it. If not, the very

31
00:02:30,320 --> 00:02:34,410
brief explanation is that Kubernetes is a containers orchestration

32
00:02:34,490 --> 00:02:38,158
platform and it has become quite popular in the last couple of years

33
00:02:38,244 --> 00:02:42,074
because it providers to make infrastructure tasks easier to automate

34
00:02:42,122 --> 00:02:45,678
and thus cheaper and faster. But as I said before, this talk is

35
00:02:45,684 --> 00:02:49,106
not really about Kubernetes specifically. So this is just a

36
00:02:49,128 --> 00:02:53,006
stand andor for the popular tool of the month, really. This same principles

37
00:02:53,038 --> 00:02:56,758
apply to any kind of cloud native tooling that you can think of.

38
00:02:56,844 --> 00:03:00,866
So this image is taken from a white paper written by our CTO

39
00:03:00,898 --> 00:03:04,902
Ian Crosby, which in turn is based on a book called

40
00:03:04,956 --> 00:03:08,374
crossing the chasm by Joffrey a. Moore. And in that

41
00:03:08,412 --> 00:03:12,282
book, Moore takes a look at the technology adoption cycle and his

42
00:03:12,336 --> 00:03:16,374
hypothesis is that before any tech is adopted to the mainstream

43
00:03:16,422 --> 00:03:20,442
market, it needs to cross something called the, you know,

44
00:03:20,496 --> 00:03:24,170
before it's only available or only interesting to early adopters,

45
00:03:24,250 --> 00:03:28,014
and then at some point it will cross this chasm and

46
00:03:28,052 --> 00:03:31,630
become part of the mainstream. And this image is about two years

47
00:03:31,700 --> 00:03:35,166
old when, two or three years when the white paper came out. And I

48
00:03:35,188 --> 00:03:38,382
would argue that in fact, kubernetes has already crossed the chasm.

49
00:03:38,446 --> 00:03:42,306
Kubernetes has become mainstream. And that is both kind of good and

50
00:03:42,328 --> 00:03:45,518
kind of bad. So these are a couple of headlines that I've taken from the

51
00:03:45,544 --> 00:03:49,222
last three years that have caused some outrage andor

52
00:03:49,356 --> 00:03:52,934
interest in the DevOps community. This is a very interesting story

53
00:03:53,052 --> 00:03:56,694
where pivotal was sued by Ford because

54
00:03:56,812 --> 00:04:00,714
Ford claimed that kubernetes is the industry standard and

55
00:04:00,752 --> 00:04:04,138
pivotal didn't teach them properly to use it.

56
00:04:04,224 --> 00:04:07,834
So I guess they alleged malpractice or something. I'm not super

57
00:04:07,872 --> 00:04:10,986
sure about the american legal system here, but I

58
00:04:11,008 --> 00:04:15,038
encourage you to Google these stories later because it's quite interesting that

59
00:04:15,044 --> 00:04:18,874
even Google tells developers now kubernetes has become boring.

60
00:04:18,922 --> 00:04:22,030
And that is good. And I think these headlines are super interesting

61
00:04:22,100 --> 00:04:25,422
because they point to two things. So first of all, kubernetes kind of

62
00:04:25,476 --> 00:04:28,898
the de facto industry standard right now, which generally I think is good because I

63
00:04:28,904 --> 00:04:32,402
think Kubernetes is a great tool. But they also point to the fact that people

64
00:04:32,456 --> 00:04:36,326
are slowly waking up from this dream that kubernetes will come and

65
00:04:36,348 --> 00:04:39,574
just magically solve all of their problems. You have to

66
00:04:39,612 --> 00:04:43,030
put actual elbow grease in it, too. So to me

67
00:04:43,100 --> 00:04:46,354
there are two aspects why cloud native

68
00:04:46,402 --> 00:04:50,118
transformations sometimes fail or don't go as fast as you expect them

69
00:04:50,204 --> 00:04:53,930
to. One is the attitude towards technology, towards the products

70
00:04:54,000 --> 00:04:57,226
and tools that we use, but also the ones that we build. And the

71
00:04:57,248 --> 00:05:00,586
other is the attitude towards people, the attitude towards how

72
00:05:00,608 --> 00:05:03,214
we work together and how we collaborate with each other.

73
00:05:03,332 --> 00:05:07,262
So I want to start with the definition of cloud native. What is cloud

74
00:05:07,316 --> 00:05:11,566
native? Who has good explanation, please put it in the chat or

75
00:05:11,748 --> 00:05:15,306
on Twitter. I'd be very interested in your definitions.

76
00:05:15,418 --> 00:05:19,282
I find quite fuzzy. If I ask 20 people, I'm probably going to get 40

77
00:05:19,336 --> 00:05:22,994
different answers. To me, it's kind of at the intersection of

78
00:05:23,032 --> 00:05:26,358
culture, people and technology. And I'm going to tell you what I mean by that.

79
00:05:26,444 --> 00:05:29,586
First, let's look at what the CNCF defines

80
00:05:29,618 --> 00:05:34,290
in its charter. So they say cloud native technologies empower organizations

81
00:05:34,370 --> 00:05:38,794
to build and run scalable applications in modern dynamic environments such

82
00:05:38,832 --> 00:05:42,534
as public, private and hybrid clouds, containers, service meshes,

83
00:05:42,582 --> 00:05:46,390
microservices, immutable infrastructure and declarative APIs

84
00:05:46,470 --> 00:05:50,038
exemplify this approach. This is a very interesting definition

85
00:05:50,134 --> 00:05:53,962
for two reasons I feel so. First of all, it's very technical.

86
00:05:54,106 --> 00:05:57,466
It's only about computing. But then again, it also doesn't

87
00:05:57,498 --> 00:06:00,794
really define specifically what cloud native

88
00:06:00,842 --> 00:06:04,514
technologies are and what they aren't, but more what

89
00:06:04,552 --> 00:06:08,258
they do. They empower organizations to build and

90
00:06:08,344 --> 00:06:11,570
run things in settings like public,

91
00:06:11,640 --> 00:06:15,726
private and hybrid clouds. And then they list a couple of examples

92
00:06:15,838 --> 00:06:18,234
that would exemplify this approach.

93
00:06:18,382 --> 00:06:21,686
So it's also not 100% clear. It's kind

94
00:06:21,708 --> 00:06:25,106
of like just a list of examples. But then also it leaves

95
00:06:25,138 --> 00:06:28,194
us all these other aspects, like what but project management?

96
00:06:28,242 --> 00:06:31,858
What but your business strategy, how do those change? So this is another way

97
00:06:31,884 --> 00:06:35,462
to look at cloud native. This is something that we call the cloud native maturity

98
00:06:35,526 --> 00:06:38,938
matrix, and we use it as a tool to assess kind

99
00:06:38,944 --> 00:06:42,346
of the current state of a customer, also show them where we

100
00:06:42,368 --> 00:06:46,142
could take them and how far away they might be from

101
00:06:46,196 --> 00:06:50,174
their goal. And what's important to understand is that cloud native is not just

102
00:06:50,212 --> 00:06:53,702
a collection of tools here, but more like a philosophy

103
00:06:53,786 --> 00:06:57,454
or mindset or approach around individual aspects,

104
00:06:57,502 --> 00:07:01,054
like culture, like architecture, like infrastructure

105
00:07:01,102 --> 00:07:03,970
alignment. So when you meet a client for the first or second time,

106
00:07:04,040 --> 00:07:07,970
you sometimes do an assessment with them to gauge where the organization currently

107
00:07:08,040 --> 00:07:11,366
lies on each of these axes. And this

108
00:07:11,388 --> 00:07:14,246
is what it could look like then. What's nice about this tool is that it

109
00:07:14,268 --> 00:07:17,606
really visualizes all the dimensions of cloud native. So for

110
00:07:17,628 --> 00:07:20,854
example, if you look at microservices, most experts

111
00:07:20,902 --> 00:07:24,358
in the cloud native space would recommend microservice architecture.

112
00:07:24,454 --> 00:07:28,234
But if you do that in a waterfall culture, it will not yield the best

113
00:07:28,272 --> 00:07:31,514
results for you. So you're still carrying maybe legacy processes

114
00:07:31,562 --> 00:07:35,130
around you, but only when you couple microservices

115
00:07:35,210 --> 00:07:38,846
architecture with an agile and lean mindset. Then you'll be

116
00:07:38,868 --> 00:07:43,066
able to leverage all the fast and speed and flexibility

117
00:07:43,258 --> 00:07:46,958
and the goodness of cloud nature. So I don't claim that there's

118
00:07:46,974 --> 00:07:51,086
any objective truth with this matrix. This is our interpretation

119
00:07:51,118 --> 00:07:55,026
of cloud native and we iterate on it and we could make an

120
00:07:55,048 --> 00:07:58,674
argument, is serverless really the next level of provisioning?

121
00:07:58,722 --> 00:08:02,514
Or is it just another tool in cloud native

122
00:08:02,562 --> 00:08:05,990
orchestration, similar to like Kubernetes? If you feel like

123
00:08:06,060 --> 00:08:09,574
you want to discuss kind of what we put in there, then feel free

124
00:08:09,612 --> 00:08:12,986
to hit me up, because I would be very interested in your definition of

125
00:08:13,008 --> 00:08:16,266
cloud native and what it means to you. If you're interested in looking more

126
00:08:16,288 --> 00:08:19,946
deeply into the maturity matrix. You can also follow this link and do an

127
00:08:19,968 --> 00:08:23,626
interactive assessment for yourself or for your organization and

128
00:08:23,648 --> 00:08:27,086
then message me or message us because I guess we would be interested in what

129
00:08:27,108 --> 00:08:30,606
it came out for you. So another aspect of how we are

130
00:08:30,628 --> 00:08:33,838
solving the wrong problem, in my opinion, is illustrated in

131
00:08:33,844 --> 00:08:36,746
this XKCD entitled automation.

132
00:08:36,858 --> 00:08:40,142
So in this XKCD, I think this is something that we're all kind of familiar

133
00:08:40,206 --> 00:08:43,342
with. You spend a lot of time on a manual task.

134
00:08:43,406 --> 00:08:46,834
Annoying, it's boring, it's slow. So you think I should write a program to

135
00:08:46,872 --> 00:08:50,534
automate it. And in theory what you're thinking, what you're imagining is

136
00:08:50,652 --> 00:08:54,338
I will write some code and then in the beginning

137
00:08:54,434 --> 00:08:57,734
it will take me a bit more work and time, but then at

138
00:08:57,772 --> 00:09:01,378
some point automation will take over and then actually I

139
00:09:01,404 --> 00:09:05,434
will have all this free time because my script is doing

140
00:09:05,472 --> 00:09:08,922
the task automatically, I don't have to spend any time on it. But what happens

141
00:09:08,976 --> 00:09:12,538
in reality is that you start writing the code, then you need to debug it

142
00:09:12,544 --> 00:09:15,806
because it's not working correctly. Then you have to redesign the whole thing and

143
00:09:15,828 --> 00:09:19,226
it just takes forever and it just takes on its own life and you don't

144
00:09:19,258 --> 00:09:22,766
have any time for the original task anymore. And I

145
00:09:22,788 --> 00:09:25,930
think kind of most of us know this problem,

146
00:09:26,100 --> 00:09:29,650
some of us might have been victim to this, I know that I certainly

147
00:09:29,720 --> 00:09:33,022
have. And this is basically the stunk Andor cost fallacy.

148
00:09:33,086 --> 00:09:36,418
So as an example, we had a customer that

149
00:09:36,504 --> 00:09:40,214
developed a piece of technology, and this was a camera that

150
00:09:40,332 --> 00:09:43,954
had a chip that could do object detection and facial

151
00:09:44,002 --> 00:09:47,238
detection on an incoming video stream. And this was a

152
00:09:47,244 --> 00:09:50,686
pretty cool piece of software, and it would send that detected

153
00:09:50,738 --> 00:09:54,042
face or object to a platform which we were supposed to build.

154
00:09:54,096 --> 00:09:57,434
And it should be highly scalable, highly available. So we built everything in

155
00:09:57,472 --> 00:10:01,034
microservices Kubernetes. We were partnering with a company

156
00:10:01,152 --> 00:10:05,034
that were then on the platform that we built, built some applications

157
00:10:05,082 --> 00:10:08,826
to do mood detection, and we used Kotlin

158
00:10:08,858 --> 00:10:12,810
and we migrated to typescript in the middle of the project. Andor AI and Iot.

159
00:10:12,890 --> 00:10:15,986
It was really, really fun and interesting. As an engineer, it was one of my

160
00:10:16,008 --> 00:10:19,886
favorite projects ever to work on. At some point the customer pushed

161
00:10:19,918 --> 00:10:23,426
us to deliver for a demo with investors in press and the

162
00:10:23,448 --> 00:10:26,882
use case changed, so now they wanted it to run

163
00:10:26,936 --> 00:10:30,854
only on one physical server. And we were like yeah sure. I mean we can

164
00:10:30,892 --> 00:10:33,938
run a single node Kubernetes cluster. It's not ideal,

165
00:10:34,034 --> 00:10:37,298
but the nice thing about Kubernetes is that you can just do all kinds

166
00:10:37,314 --> 00:10:41,146
of things with it. It's very flexible. So we can run one instance of this

167
00:10:41,248 --> 00:10:44,890
platform on ones physical server andor we can still

168
00:10:44,960 --> 00:10:49,018
run a public version of it on GKE. So we were like yeah sure,

169
00:10:49,104 --> 00:10:52,666
physical server, no problem. And they're like yeah, but this server also can't

170
00:10:52,698 --> 00:10:56,862
be connected to the Internet ever. So what

171
00:10:56,916 --> 00:10:59,818
happened was they bought a physical server,

172
00:10:59,914 --> 00:11:03,086
they shipped it to us. We installed our application on

173
00:11:03,108 --> 00:11:06,526
it on a USB drive. Actually we had a helm shot on a USB

174
00:11:06,558 --> 00:11:10,078
drive and then shipped the server back to them by mail.

175
00:11:10,174 --> 00:11:13,602
And there's two ways to look at this. So we either were

176
00:11:13,656 --> 00:11:17,394
working with entirely different projects in mind, or we did

177
00:11:17,432 --> 00:11:20,790
the most physical handover of a cloud application that I've ever seen.

178
00:11:20,860 --> 00:11:24,962
But in any case, we already built everything in the cloud native

179
00:11:25,026 --> 00:11:28,546
way. And then even though the entire use case changed,

180
00:11:28,578 --> 00:11:31,446
we were like we already built it, so we're going to still use it,

181
00:11:31,468 --> 00:11:34,794
we're going to still do that, even though in retrospect we could have just built

182
00:11:34,912 --> 00:11:38,186
one monolith, one Java application, put it on a Tomcat server and

183
00:11:38,208 --> 00:11:41,866
be done with it. The title text of this XKCd

184
00:11:41,898 --> 00:11:44,762
by the way, reads automating comes from the roots,

185
00:11:44,826 --> 00:11:48,538
auto meaning self and mating meaning screwing.

186
00:11:48,634 --> 00:11:52,234
You might have heard of this design principle. Form follows

187
00:11:52,282 --> 00:11:56,702
function, which means that the shape of a building or object should primarily

188
00:11:56,766 --> 00:12:00,162
relate to its intended functional purpose. Or to put it in a different

189
00:12:00,216 --> 00:12:03,714
way, first think but what something should do and

190
00:12:03,752 --> 00:12:07,606
then think about how it should look like. Kind of fairly straightforward, but when we

191
00:12:07,628 --> 00:12:11,254
transfer this into business, sometimes what we see is that

192
00:12:11,292 --> 00:12:15,014
not all companies follow this principle. Some companies will use

193
00:12:15,052 --> 00:12:18,582
tech like AI or blockchain or kubernetes, simply because

194
00:12:18,716 --> 00:12:21,834
everyone is doing it. And it might be interesting to

195
00:12:22,032 --> 00:12:25,846
shareholders or vc funding, but it actually has no added

196
00:12:25,878 --> 00:12:29,514
value to the actual product or business. In my mind, tech is

197
00:12:29,552 --> 00:12:33,254
a byproduct of problem solving. So the goal

198
00:12:33,302 --> 00:12:37,102
is to solve a problem for your customer and you do it by the

199
00:12:37,156 --> 00:12:40,366
tech is the means to solve that problem. So you really need to

200
00:12:40,388 --> 00:12:44,154
ask yourself whether the tech you're maintaining and building, is it still solving

201
00:12:44,202 --> 00:12:47,634
the core problem and contributing to your core business? Or has

202
00:12:47,672 --> 00:12:50,846
it kind of begun to have a life of itself? Is it like a Frankenstein

203
00:12:50,878 --> 00:12:54,226
monster with an unquenchable thirst for resources that

204
00:12:54,248 --> 00:12:58,082
just keeps on growing? Most companies, they don't need to manage

205
00:12:58,136 --> 00:13:01,254
their own kubernetes cluster, but somehow a lot of them still feel

206
00:13:01,292 --> 00:13:05,126
like they do. One way, if you're uncertain about the purpose of your

207
00:13:05,148 --> 00:13:08,566
business is to use this model developed by Simon Sinek, which is

208
00:13:08,588 --> 00:13:12,650
called the Golden Circle. And he uses it to illustrate why people

209
00:13:12,720 --> 00:13:16,294
tend to flock to companies like Apple because they have a clearly

210
00:13:16,342 --> 00:13:19,722
communicated purpose. But you can also use this as a tool

211
00:13:19,776 --> 00:13:23,310
to try and find your purpose. And this is how you could do that.

212
00:13:23,380 --> 00:13:26,766
You start from the outside with the consistency of what,

213
00:13:26,868 --> 00:13:30,334
what are the products solved, the services offers, or your

214
00:13:30,372 --> 00:13:34,270
role at work. So let's say you are a company that sells

215
00:13:34,350 --> 00:13:37,570
photo cameras. Andor also a community platform

216
00:13:37,640 --> 00:13:42,078
where people can share their cameras, where people can maybe touch up images.

217
00:13:42,174 --> 00:13:45,406
It's very simple to use and it's

218
00:13:45,438 --> 00:13:49,126
great. So then look at the next level, the discipline of how, what are your

219
00:13:49,148 --> 00:13:52,290
strengths, what are your values, what are your guiding principles?

220
00:13:52,370 --> 00:13:56,502
So maybe you just have great customer support. Maybe your

221
00:13:56,556 --> 00:14:00,374
tools are amazing at helping people really express

222
00:14:00,422 --> 00:14:03,834
themselves. Because your guiding principle is that you want

223
00:14:03,872 --> 00:14:07,366
people to be able to express themselves through a visual medium.

224
00:14:07,478 --> 00:14:10,742
So finally, you will then look at the clarity

225
00:14:10,806 --> 00:14:14,766
of why? Why do you do this? What's your purpose? What's your cause? What is

226
00:14:14,788 --> 00:14:18,110
your belief? Maybe you believe that every

227
00:14:18,180 --> 00:14:22,094
person has an eye for beauty, everyone is an artist, and you

228
00:14:22,132 --> 00:14:25,762
really want to give every single person on earth the chance to

229
00:14:25,896 --> 00:14:29,042
share the beauty of the world as they perceive it to

230
00:14:29,096 --> 00:14:32,386
other people. And this purpose, this cause, is something that your

231
00:14:32,408 --> 00:14:35,582
customer can really understand, can ideally

232
00:14:35,646 --> 00:14:39,154
relate to, and that will then be expressed through loyalty

233
00:14:39,202 --> 00:14:43,302
to your brand, to your purpose. This is why companies like Apple are

234
00:14:43,356 --> 00:14:46,962
much more like the brand of Apple is much more successful,

235
00:14:47,026 --> 00:14:50,822
like has for example, the brand of a thinkpad or Lenovo,

236
00:14:50,886 --> 00:14:54,106
because it doesn't have this purpose, this belief that

237
00:14:54,128 --> 00:14:58,070
people can relate to. So finally, at the end of this section,

238
00:14:58,150 --> 00:15:02,010
I want to share this quote by Tatiana Mack, who's an engineer

239
00:15:02,090 --> 00:15:05,914
building inclusive, accessible and ethical products with thoughtful

240
00:15:05,962 --> 00:15:09,294
practices. And she says that a solution is

241
00:15:09,332 --> 00:15:12,814
only as good as your framing of the problem. Everyone who has ever worked with

242
00:15:12,852 --> 00:15:16,722
machine learning or anything like that understands that you really need to understand

243
00:15:16,856 --> 00:15:20,162
why your customers are using your business, why you,

244
00:15:20,216 --> 00:15:23,794
why not another company that provides the same product? Only when

245
00:15:23,832 --> 00:15:27,874
you understand that can you also understand how to best optimize your

246
00:15:27,912 --> 00:15:31,526
solution. So your technology, your services. So I spoke about

247
00:15:31,628 --> 00:15:35,346
attitude towards tech, and now I want to talk a bit about the attitude

248
00:15:35,378 --> 00:15:38,566
towards culture, andor towards people. And a lot of this, what I call the

249
00:15:38,588 --> 00:15:42,166
cloud native mindset we probably already know, are familiar

250
00:15:42,198 --> 00:15:45,754
with from agile thinking and agile working, for example,

251
00:15:45,872 --> 00:15:49,386
the concept of continuous learning. Quite important because we're all

252
00:15:49,408 --> 00:15:52,966
kind of new to this. Kubernetes was released six, seven years

253
00:15:53,008 --> 00:15:56,266
ago, 2014, if I'm not mistaken. And so we're

254
00:15:56,298 --> 00:16:00,110
kind of like, no one's really an expert expert, like a 20

255
00:16:00,180 --> 00:16:03,646
year experience kind of expert. And most, if not all

256
00:16:03,668 --> 00:16:07,422
modern paradigms in the tech industry now kind of show the same trend where we're

257
00:16:07,486 --> 00:16:11,810
moving away from really stagnant processes that are kind of like trains.

258
00:16:12,470 --> 00:16:15,666
If you get into it, you just go straight ahead,

259
00:16:15,768 --> 00:16:19,078
and if you want to turn left or right, then someone

260
00:16:19,164 --> 00:16:22,742
has to have already planned this, someone has to have already put

261
00:16:22,796 --> 00:16:26,422
like a check, but for you to do that, and now we kind of move

262
00:16:26,476 --> 00:16:29,922
in much more fast and flexible processes, like a bike,

263
00:16:29,986 --> 00:16:33,574
where you can react very quickly to obstacles

264
00:16:33,622 --> 00:16:36,394
by just turning left and right, and you don't even need a road sometimes.

265
00:16:36,512 --> 00:16:39,866
So instead of planning out our releases for months or years in

266
00:16:39,888 --> 00:16:43,382
advance, most companies now follow agile principles

267
00:16:43,526 --> 00:16:47,342
of failing fast and early and often. And then they build

268
00:16:47,396 --> 00:16:51,146
this process of failing fast and often into this perpetual feedback

269
00:16:51,178 --> 00:16:54,702
loop with ceremonies to optimize this failing process

270
00:16:54,836 --> 00:16:58,386
with the feedback. And we call this kaizen, or continuous learning.

271
00:16:58,488 --> 00:17:02,098
An example of this is scrum, which I think most of us are kind

272
00:17:02,104 --> 00:17:05,842
of familiar with. So you have these sprints, which are usually probably

273
00:17:05,896 --> 00:17:09,254
two to three weeks, and at the end of each sprint, you have

274
00:17:09,292 --> 00:17:12,486
a retrospective andor retrospective. You discuss kind

275
00:17:12,508 --> 00:17:16,406
of issues you had that you could improve. And everything is

276
00:17:16,428 --> 00:17:19,986
kind of geared towards optimizing your delivery, your delivery

277
00:17:20,018 --> 00:17:23,414
of value. And then you take the action

278
00:17:23,462 --> 00:17:26,506
items from the retrospective and you try to implement them in the

279
00:17:26,528 --> 00:17:30,694
next sprint. Andor then at the end of that, you know, you have another retrospective.

280
00:17:30,742 --> 00:17:34,014
So you constantly have this loop forever if you want to do that,

281
00:17:34,052 --> 00:17:37,342
if you want to have this cycle of continuous failure, but not

282
00:17:37,396 --> 00:17:41,102
burn out your employees, then you need to create a culture that

283
00:17:41,156 --> 00:17:44,254
encourages failing and learning from it. And we have

284
00:17:44,292 --> 00:17:47,586
to be intentional about these things because failing is not

285
00:17:47,608 --> 00:17:51,506
something that we're happy with or that we enjoy or that makes us happy.

286
00:17:51,608 --> 00:17:55,442
So to be able to be resilient through these kinds of things,

287
00:17:55,576 --> 00:17:58,866
this will require abilities like taking responsibility,

288
00:17:59,058 --> 00:18:02,646
self efficacy, so the belief that you can do something, that you

289
00:18:02,668 --> 00:18:06,098
can learn something, also being able to handle stress properly.

290
00:18:06,194 --> 00:18:10,050
So all of these things tie into this need of psychological safety,

291
00:18:10,130 --> 00:18:13,466
why it's so crucial if you work in a

292
00:18:13,488 --> 00:18:17,594
sector that is moving very quickly, where you have to try things Andor fail often.

293
00:18:17,712 --> 00:18:20,950
So, to illustrate what I mean, we can look at this grid.

294
00:18:21,030 --> 00:18:25,130
So you see now that there are two axes the accountability

295
00:18:25,210 --> 00:18:28,954
axes, which just kind of means how much are you being pushed

296
00:18:29,002 --> 00:18:32,586
to do new things, to grow, to learn to do things that you're

297
00:18:32,618 --> 00:18:36,146
unfamiliar with, meet demanding goals and the axis of

298
00:18:36,168 --> 00:18:40,100
psychological safety. So if you fail, what happens to you?

299
00:18:40,710 --> 00:18:44,386
Are you getting scolded? Is it completely horrible or is

300
00:18:44,408 --> 00:18:47,678
it okay to fail? So in a low accountability,

301
00:18:47,774 --> 00:18:51,286
low psychological safety environment, no one's really pushing you to

302
00:18:51,308 --> 00:18:55,254
do anything. Also, if you were to do something, you will probably get

303
00:18:55,292 --> 00:18:58,854
scolded as soon as you do one little mistake. So why should you do anything?

304
00:18:58,972 --> 00:19:02,694
This is the apathy zone. This is a zone that is very, very dangerous

305
00:19:02,742 --> 00:19:05,914
to productivity because people who are in this zone will also take

306
00:19:05,952 --> 00:19:09,386
down the people around them over time if you let them. As opposed to

307
00:19:09,408 --> 00:19:13,034
that, if you have an organization where you have low psychological

308
00:19:13,082 --> 00:19:16,506
safety but high accountability for meeting demanding

309
00:19:16,538 --> 00:19:19,674
goals, this might be pushing you into an anxiety zone

310
00:19:19,722 --> 00:19:23,514
because you are constantly being pushed to meet more and more demanding

311
00:19:23,562 --> 00:19:26,986
goals. But if you fail, then you immediately,

312
00:19:27,098 --> 00:19:30,354
you won't hear the end of it. So this is very stressful and this is

313
00:19:30,392 --> 00:19:33,362
an area where people actually burn out a lot. On the other hand,

314
00:19:33,416 --> 00:19:36,686
if you have high psychological safety but low accountability

315
00:19:36,798 --> 00:19:39,910
for goals, then no one's really pushing you

316
00:19:39,980 --> 00:19:44,242
to do anything to move out of this comfort zone. It's comfortable

317
00:19:44,306 --> 00:19:47,638
because it's fine. You don't have to be worried about your job,

318
00:19:47,724 --> 00:19:51,014
which is a good thing, but you're not learning anything, you're not growing,

319
00:19:51,062 --> 00:19:54,362
you're just being comfortable in a setting of cloud

320
00:19:54,416 --> 00:19:58,886
native where things change a lot and where you're trying to achieve optimal

321
00:19:58,998 --> 00:20:02,442
effectiveness, the comfort zone is not the best zone to be in.

322
00:20:02,496 --> 00:20:05,722
The zone that we're trying to be in is the learning zone.

323
00:20:05,786 --> 00:20:09,310
And we get that when we have high psychological safety and

324
00:20:09,380 --> 00:20:13,118
high accountability, you push yourself. You ask to push yourself.

325
00:20:13,284 --> 00:20:16,906
If you fail, it's not a big deal. You just dust

326
00:20:16,938 --> 00:20:20,226
yourself off and just try again. And if you're interested in reading more about this

327
00:20:20,248 --> 00:20:23,678
concept, you can click on the link and go to the blog post. It's written

328
00:20:23,694 --> 00:20:27,598
by our in house psychologist, Andrea Dobson. And the reason why we have in

329
00:20:27,624 --> 00:20:31,314
house psychologists is because for one thing, the way that we approach

330
00:20:31,362 --> 00:20:34,866
consultants, it's really but empowering Andor mentoring and coaching

331
00:20:34,898 --> 00:20:38,790
our customers. So we put a lot of effort to kind of understand

332
00:20:38,940 --> 00:20:42,918
how people think and how people learn. And psychologists are great at explaining

333
00:20:42,934 --> 00:20:46,506
that to us, but also because we work in these

334
00:20:46,608 --> 00:20:49,974
fast moving environments that are very stressful,

335
00:20:50,022 --> 00:20:53,262
there's often a lot of money involved. We need to make sure that people

336
00:20:53,316 --> 00:20:56,686
are resilient, Andor can deal with this amount of stress. So that's also

337
00:20:56,708 --> 00:21:00,378
why we have psychologists in house. Lastly, the factor

338
00:21:00,394 --> 00:21:04,178
of collaboration obviously is also very, very important now because everything

339
00:21:04,264 --> 00:21:07,870
is distributed, your microservices are distributed,

340
00:21:07,950 --> 00:21:13,234
and with it comes often also a split in teams. And the

341
00:21:13,272 --> 00:21:16,738
infrastructure team is now kind of can AWS implementation team.

342
00:21:16,824 --> 00:21:20,134
So you really need to put a lot of effort into streamlining your

343
00:21:20,172 --> 00:21:23,462
collaboration now. And maybe you should think about even not doing

344
00:21:23,516 --> 00:21:26,758
collaboration anymore. And what I mean by that is that

345
00:21:26,844 --> 00:21:30,194
there's a book that's called Team Topologies by Matthew

346
00:21:30,242 --> 00:21:34,486
Skelton and Manuel Pace. In this book, the authors take a look at how engineering

347
00:21:34,518 --> 00:21:38,154
teams in cloud native organizations work together, and they have

348
00:21:38,192 --> 00:21:41,510
defined these three modes of interaction. There's collaboration.

349
00:21:41,590 --> 00:21:45,262
So teams work together for a defined period of time to usually

350
00:21:45,316 --> 00:21:48,826
discover new things like APIs or practices or technologies.

351
00:21:48,938 --> 00:21:53,098
It's really like a discovery. As a group you have facilitation.

352
00:21:53,194 --> 00:21:56,930
One team helps Andor mentors another team, and then finally you have x

353
00:21:57,000 --> 00:22:00,590
as a service. One team provides and another team consumes

354
00:22:00,670 --> 00:22:04,258
something, has a service. So collaboration is really kind of

355
00:22:04,264 --> 00:22:07,598
the slowest way to get anywhere because it can only move as

356
00:22:07,624 --> 00:22:11,074
fast, has its slowest member. So if you need any timely

357
00:22:11,122 --> 00:22:14,546
results from it, you should try to not do it via collaboration.

358
00:22:14,658 --> 00:22:17,942
In facilitation, one team will help another teams

359
00:22:17,996 --> 00:22:21,382
for a set amount of time and then ideally the value

360
00:22:21,436 --> 00:22:24,966
that's been created from this facilitation will be multiplied further

361
00:22:24,998 --> 00:22:28,106
down the road. X as a service actually takes a lot of

362
00:22:28,128 --> 00:22:31,462
time initially because ones team probably has to build that service,

363
00:22:31,616 --> 00:22:34,986
then moves much faster later because consuming

364
00:22:35,018 --> 00:22:38,926
a service can be automated, not as facilitation corporations that

365
00:22:38,948 --> 00:22:42,126
cannot be automated. And thus it is the fastest way of two

366
00:22:42,148 --> 00:22:46,066
teams to work together with one another. So as an example, if you have something

367
00:22:46,168 --> 00:22:50,146
like delivery deployment, you usually have a platform

368
00:22:50,248 --> 00:22:53,266
team, can operations team that manages, let's say your

369
00:22:53,288 --> 00:22:56,802
Kubernetes cluster, and then you have development teams that

370
00:22:56,856 --> 00:23:00,434
will build maybe helm charts, maybe Kubernetes manifests

371
00:23:00,482 --> 00:23:04,166
and then want to deploy those to the platform. You could

372
00:23:04,188 --> 00:23:07,798
do that through collaboration. You have to send someone an

373
00:23:07,804 --> 00:23:11,366
email, give them the thing and they have to then manually deploy,

374
00:23:11,478 --> 00:23:14,874
which already it sounds like, okay, there's not a lot of,

375
00:23:14,992 --> 00:23:18,858
actually it's quite time consuming. Facilitation would be

376
00:23:18,864 --> 00:23:22,026
a situation in which maybe the platform team explains to

377
00:23:22,048 --> 00:23:25,466
the development team, okay, if you want to deploy something, these are the

378
00:23:25,488 --> 00:23:28,014
steps you need to take you need to do this and this and that,

379
00:23:28,052 --> 00:23:31,246
and then you need to do this Andor that. So ideally you have to do

380
00:23:31,268 --> 00:23:34,622
these facilitation meetings once every couple of months maybe,

381
00:23:34,756 --> 00:23:38,402
and every time you change something on the platform, but then it will

382
00:23:38,456 --> 00:23:42,514
hopefully multiply down through the teams because one person will then tell

383
00:23:42,552 --> 00:23:46,470
three other people and so on. Finally, in X as a service, the platform

384
00:23:46,540 --> 00:23:50,646
team would provide a service, maybe even a self service, to the

385
00:23:50,668 --> 00:23:54,582
development team. So instead of having to be there

386
00:23:54,636 --> 00:23:58,098
and walk the development teams kind of manually through the

387
00:23:58,124 --> 00:24:01,674
process, they just provide, let's say, can API with very

388
00:24:01,712 --> 00:24:05,690
clear constructs and very clear expectations. And once the

389
00:24:05,760 --> 00:24:09,098
development team has everything configured and set up,

390
00:24:09,184 --> 00:24:12,286
they can just automate calling the service.

391
00:24:12,468 --> 00:24:16,602
And the speed of delivery will immediately increase

392
00:24:16,666 --> 00:24:19,774
in speed as soon as the dev

393
00:24:19,812 --> 00:24:23,342
team becomes more independent. So coming to the end

394
00:24:23,396 --> 00:24:27,234
now this is a quote that I kind of lifted from

395
00:24:27,272 --> 00:24:30,498
the book. Team topologies don't do a transformation because you want

396
00:24:30,504 --> 00:24:34,542
to use kubernetes. Use kubernetes because you're doing a transformation

397
00:24:34,686 --> 00:24:38,614
because you are transforming. You want to transform your organization to

398
00:24:38,652 --> 00:24:42,774
a different way of working and of understanding and addressing your customers.

399
00:24:42,972 --> 00:24:46,342
That's when you are looking to choose the right tool for yourself.

400
00:24:46,396 --> 00:24:49,718
Andor it might be Kubernetes, it might not be Kubernetes, it could be something completely

401
00:24:49,804 --> 00:24:53,498
different. Whatever works for your organisation, as long as you understand

402
00:24:53,584 --> 00:24:56,698
the problem that you're trying to solve, that tool will be the right tool.

403
00:24:56,784 --> 00:24:59,802
So if you're not too scared of moving into the cloud now,

404
00:24:59,856 --> 00:25:03,834
or you absolutely have to, you could take a look at our cloud native transformation

405
00:25:03,882 --> 00:25:07,754
kit. It consists of a book written by Pini Resnick

406
00:25:07,802 --> 00:25:12,010
and Jamie Dobson, which are our CRO and CEO respectively,

407
00:25:12,090 --> 00:25:15,726
Andor Michelle Gino, who's our editor,

408
00:25:15,838 --> 00:25:18,994
and this book, Cloud Native Transformation consists of

409
00:25:19,032 --> 00:25:22,882
a bunch of patterns to move your

410
00:25:22,936 --> 00:25:26,346
application, part of your application to a cloud native

411
00:25:26,478 --> 00:25:29,542
state. And these are what the patterns look like.

412
00:25:29,596 --> 00:25:33,314
So they really are suggestions and they're intended

413
00:25:33,362 --> 00:25:36,886
to inspire you to come up with the right solutions for

414
00:25:36,908 --> 00:25:40,118
your problems. And if you want to know more about what we do has a

415
00:25:40,124 --> 00:25:43,686
company, you can visit us on Twitter and

416
00:25:43,788 --> 00:25:46,978
on our website we have a newsletter, a monthly

417
00:25:46,994 --> 00:25:50,734
newsletter named WTF is Cloud Native? In which

418
00:25:50,772 --> 00:25:54,830
we talk about, explain, discuss cloud native

419
00:25:55,330 --> 00:25:58,926
patterns, technologies, ideas, all of

420
00:25:58,948 --> 00:26:02,462
that. So if you're interested, check us out on Twitter or LinkedIn or website.

421
00:26:02,596 --> 00:26:06,206
Thank you very much for your time again, you can follow me on Twitter as

422
00:26:06,228 --> 00:26:08,140
well or on GitHub. Thank you very much.

