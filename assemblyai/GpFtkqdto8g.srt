1
00:00:22,970 --> 00:00:26,754
Hello everyone. Thanks for attending my talk today. My name is Andrew Knight,

2
00:00:26,802 --> 00:00:30,018
but you can call me Pandy for short. I'm the automation panda.

3
00:00:30,114 --> 00:00:33,846
Check out my blog and follow me on Twitter. Just Google Automation Panda and

4
00:00:33,868 --> 00:00:37,346
I'm sure youll find me. Currently I'm a developer advocate

5
00:00:37,378 --> 00:00:41,142
at Appletools, where I help folks get the most value out of their QA work

6
00:00:41,196 --> 00:00:44,962
with automated visual testing. I'm also the director of Test Automation

7
00:00:45,026 --> 00:00:48,582
University, which offers several online courses to help you learn

8
00:00:48,636 --> 00:00:51,758
testing and automation. And it's completely free.

9
00:00:51,924 --> 00:00:55,294
Please check it out. It's awesome. Now,

10
00:00:55,332 --> 00:00:58,702
you might be wondering what an automation panda is doing at a machine learning

11
00:00:58,756 --> 00:01:02,094
conference. Well, I want to share one way that

12
00:01:02,132 --> 00:01:06,062
AI is making a huge difference in the software testing and automation

13
00:01:06,126 --> 00:01:09,170
space, and that's visual AI.

14
00:01:10,230 --> 00:01:13,442
Traditionally, automated tests focused on things like text

15
00:01:13,496 --> 00:01:16,120
and attributes to make sure apps were correct.

16
00:01:16,890 --> 00:01:19,720
Unfortunately, that youll miss lots of problems.

17
00:01:20,570 --> 00:01:24,422
Visual AI can quickly flag visual differences that both

18
00:01:24,476 --> 00:01:26,920
scripts and manual testers might miss.

19
00:01:27,850 --> 00:01:31,898
I'm guessing most of you in the audience have done some form of testing before,

20
00:01:32,064 --> 00:01:36,006
even if it's as simple as making a small code change and rerunning

21
00:01:36,038 --> 00:01:39,482
your program. That's awesome. There are

22
00:01:39,536 --> 00:01:42,666
all kinds of testing unit tests,

23
00:01:42,778 --> 00:01:46,746
integration tests, end to end tests, web UI

24
00:01:46,858 --> 00:01:50,426
rest app, mobile load testing,

25
00:01:50,538 --> 00:01:53,610
performance testing, property based testing,

26
00:01:53,770 --> 00:01:57,346
behavior driven, data driven, you name it,

27
00:01:57,448 --> 00:02:01,214
there's a test for it. But what is testing?

28
00:02:01,342 --> 00:02:04,734
In a nutshell? In simplest terms,

29
00:02:04,872 --> 00:02:08,342
testing is interaction plus verification. That's it.

30
00:02:08,476 --> 00:02:11,400
Youll do something and you make sure it works.

31
00:02:12,490 --> 00:02:15,590
Every kind of testing reduces to this formula.

32
00:02:16,010 --> 00:02:19,514
Manual testing accomplishes both interactions and verifications by

33
00:02:19,552 --> 00:02:22,762
direct human interaction. Somebody needs

34
00:02:22,816 --> 00:02:27,046
to bang on a keyboard to drive a test. Automation drives

35
00:02:27,078 --> 00:02:30,826
interactions and verifications with a script. We'd like to think

36
00:02:30,848 --> 00:02:34,570
that automation is so great because it doesn't need any human intervention,

37
00:02:34,730 --> 00:02:38,174
but we all know that's not true. Humans still

38
00:02:38,212 --> 00:02:42,014
need to write the tests, develop the scripts, and fix them when they

39
00:02:42,052 --> 00:02:45,390
break. Paradoxically, test automation

40
00:02:45,470 --> 00:02:49,282
isn't fully autonomous. Visual testing helps to change

41
00:02:49,336 --> 00:02:52,734
that. Although humans still need to figure out interactions,

42
00:02:52,862 --> 00:02:57,186
visual testing techniques make verifications. Autonomous tests

43
00:02:57,218 --> 00:03:00,694
take snapshots of their views and look for changes. Over time,

44
00:03:00,892 --> 00:03:05,074
they catch more kinds of problems while ironically simplifying

45
00:03:05,122 --> 00:03:08,706
test code. Unfortunately, many folks

46
00:03:08,738 --> 00:03:12,634
seen to have the impression that visual testing is an advanced technique that

47
00:03:12,672 --> 00:03:16,666
requires a high level of testing maturity to be valuable. That's not

48
00:03:16,688 --> 00:03:21,226
the case at all. In fact, I want to flip that scripts entirely.

49
00:03:21,418 --> 00:03:25,630
Visual testing is easier than traditional test automation.

50
00:03:26,130 --> 00:03:30,174
This isn't some bleeding edge technology useful only to fang companies.

51
00:03:30,372 --> 00:03:34,318
It isn't out of reach for teams just starting their test automation journey.

52
00:03:34,494 --> 00:03:37,854
Visual testing makes functional testing easier

53
00:03:37,982 --> 00:03:41,394
and stronger. AI simplifies test

54
00:03:41,432 --> 00:03:45,326
development. It's something teams should do first before attempting

55
00:03:45,358 --> 00:03:49,350
to automate longer, more complicated tests with traditional techniques.

56
00:03:49,770 --> 00:03:52,838
Big claims, right? Let's see what I mean.

57
00:03:53,004 --> 00:03:56,466
We are going to automate a web test together in Java with selenium

58
00:03:56,498 --> 00:03:59,922
Webdriver using traditional interactions and verifications,

59
00:04:00,066 --> 00:04:03,522
and then we will supercharge it with visual testing techniques

60
00:04:03,586 --> 00:04:07,114
using Apple tools. First we need a web app

61
00:04:07,152 --> 00:04:10,474
to test. We could test an app of any size,

62
00:04:10,592 --> 00:04:13,600
but I'm going to choose a small one for the sake of our demo.

63
00:04:13,970 --> 00:04:17,594
This is applitools demo site. It mimics a banking

64
00:04:17,642 --> 00:04:22,720
application. You can try it yourself at demo appletools.com.

65
00:04:23,810 --> 00:04:27,434
The login page has a main icon, username and password

66
00:04:27,482 --> 00:04:30,786
fields, and a sign in button. Since this is

67
00:04:30,808 --> 00:04:34,820
a demo site, you can enter any username and password to log in

68
00:04:36,790 --> 00:04:40,726
after clicking the sign in button. Those main page loads there's a lot

69
00:04:40,748 --> 00:04:43,846
of stuff on the main page. The top bar has the name of the

70
00:04:43,868 --> 00:04:47,000
app, a search field, and icons for your account.

71
00:04:47,450 --> 00:04:50,314
The main part of the page shows financial data.

72
00:04:50,512 --> 00:04:53,610
Those left sidebar shows different account types.

73
00:04:55,150 --> 00:04:58,810
We could write a basic login test for this app in four steps.

74
00:04:59,230 --> 00:05:02,506
Load the login page, verify that the login

75
00:05:02,538 --> 00:05:06,110
page loads correctly, log into the app

76
00:05:06,260 --> 00:05:09,790
and finally verify that the main page loads correctly.

77
00:05:10,450 --> 00:05:14,370
This could be a smoke test. There's nothing fancy here.

78
00:05:14,520 --> 00:05:17,694
The trickiest part for automation would be deciding which elements

79
00:05:17,742 --> 00:05:21,154
to check on the loaded pages. We could automate this

80
00:05:21,192 --> 00:05:24,686
test in Java using selenium webdriver. Technically,

81
00:05:24,798 --> 00:05:28,360
we could automate it using any popular language and tool.

82
00:05:28,810 --> 00:05:32,706
Personally, right now I really like playwright and Python,

83
00:05:32,898 --> 00:05:36,566
but based on different reports I've seen, Java is still one of the

84
00:05:36,588 --> 00:05:40,678
most popular languages for test automation, and selenium Webdriver remains

85
00:05:40,694 --> 00:05:43,020
the most popular browser automation tool.

86
00:05:44,030 --> 00:05:47,446
JavaScript, C sharp, Python and Ruby

87
00:05:47,558 --> 00:05:51,930
are other popular languages for test automation, and Cypress

88
00:05:52,090 --> 00:05:54,910
is a very popular alternative to selenium.

89
00:05:55,490 --> 00:05:59,466
In Java, we can write a junit test class named logintest

90
00:05:59,578 --> 00:06:03,070
and create a test case method named login.

91
00:06:03,590 --> 00:06:07,314
This test case method calls four helper methods, one for

92
00:06:07,352 --> 00:06:11,106
each step. The first method, load login page,

93
00:06:11,208 --> 00:06:13,970
loads the demo app's login page in the browser.

94
00:06:14,550 --> 00:06:18,482
The second method, verify login page, verifies the appearance

95
00:06:18,546 --> 00:06:22,370
of five critical elements on the page, the logo,

96
00:06:22,530 --> 00:06:25,240
username field, password field,

97
00:06:25,610 --> 00:06:28,750
sign in button, and the remember me checkbox.

98
00:06:28,930 --> 00:06:32,294
It waits for each of these elements to appear using a helper method

99
00:06:32,342 --> 00:06:36,618
named wait for appearance. The third method perform

100
00:06:36,704 --> 00:06:40,526
login, enters a username and password and then clicks the

101
00:06:40,548 --> 00:06:43,870
sign in button. So far, so good.

102
00:06:44,020 --> 00:06:48,030
Nothing too bad. These are all typical webdriver calls.

103
00:06:48,850 --> 00:06:52,590
The fourth method verify main page is a doozy.

104
00:06:53,270 --> 00:06:55,380
Remember all the things on that page?

105
00:06:55,830 --> 00:06:59,410
Well, they'll need several assertions to verify.

106
00:06:59,830 --> 00:07:02,850
Some assertions merely check the appearance of elements.

107
00:07:03,350 --> 00:07:07,000
Others need to perform text matching. For example,

108
00:07:08,650 --> 00:07:11,986
to check the banner at the top that says your nearest branch

109
00:07:12,018 --> 00:07:15,622
closes in x minutes, we need to find the element, get its

110
00:07:15,676 --> 00:07:19,260
text, and then perform a regular expression match.

111
00:07:20,510 --> 00:07:23,606
Checking the account types and status fields require getting lists

112
00:07:23,638 --> 00:07:26,998
of elements, mapping their text values, and transforming

113
00:07:27,014 --> 00:07:28,970
the resulting data for comparisons.

114
00:07:30,690 --> 00:07:33,982
Despite this heavy lifting, this page still doesn't check everything

115
00:07:34,036 --> 00:07:38,490
on the main page. Dates, amounts, and descriptions

116
00:07:38,570 --> 00:07:41,786
are all ignored. Has a riskbased tradeoff.

117
00:07:41,978 --> 00:07:45,940
We could add more assertions, but they youll lengthen this method even more.

118
00:07:46,470 --> 00:07:49,780
They could also be difficult to write and become brittle over time.

119
00:07:50,390 --> 00:07:52,660
Tests just can't cover everything.

120
00:07:53,590 --> 00:07:57,320
If we run this login test against our app, it should pass without a problem.

121
00:07:58,330 --> 00:08:01,000
But what if the page changes?

122
00:08:03,050 --> 00:08:07,510
Here's a different version of the same page, with some slight visual differences.

123
00:08:08,090 --> 00:08:11,914
Can you see what they are? Let me go back and forth a few times

124
00:08:11,952 --> 00:08:12,940
for you to see.

125
00:08:15,310 --> 00:08:19,130
Will our login test still work? Will it pass or fail?

126
00:08:19,550 --> 00:08:21,470
Should it pass or fail?

127
00:08:24,130 --> 00:08:27,738
Looking at these two pages side by side makes comparison easier.

128
00:08:27,914 --> 00:08:31,360
The logos are different and the sign in buttons are different.

129
00:08:31,890 --> 00:08:35,442
While I'd probably ask the developers about the sign in button change,

130
00:08:35,576 --> 00:08:39,490
I'd categorically consider that the logo change is a bug.

131
00:08:40,710 --> 00:08:44,210
Unfortunately, as long as the page structure doesn't change,

132
00:08:44,360 --> 00:08:48,520
our login test will still pass. It wouldn't detect these changes.

133
00:08:49,130 --> 00:08:53,174
We probably wouldn't find out about these changes if we relied exclusively on

134
00:08:53,212 --> 00:08:56,902
traditional test automation. The step to verify that

135
00:08:56,956 --> 00:09:00,650
the login page loaded correctly only checks for the appearance of

136
00:09:00,720 --> 00:09:04,666
five elements by locators. These assertions will pass as

137
00:09:04,688 --> 00:09:07,482
long as these locators find elements somewhere on the page,

138
00:09:07,616 --> 00:09:11,760
regardless of where or how they appear or what they look like.

139
00:09:12,450 --> 00:09:15,534
Technically, this login page would still pass the

140
00:09:15,572 --> 00:09:18,670
test, even though we can clearly see it's broken.

141
00:09:19,090 --> 00:09:23,182
Traditional functional testing things on those most basic functionality

142
00:09:23,246 --> 00:09:26,578
of web makes, if it clicks, it works.

143
00:09:26,744 --> 00:09:30,338
It completely misses visuals. Those are huge

144
00:09:30,424 --> 00:09:34,046
test gaps. Adding more assertions probably won't

145
00:09:34,078 --> 00:09:36,040
catch these kinds of problems either.

146
00:09:37,370 --> 00:09:40,518
So what if we could visually inspect this page?

147
00:09:40,684 --> 00:09:44,646
That would easily catch any changes on the page we take a

148
00:09:44,668 --> 00:09:48,018
baseline snapshot that we consider good. And every time we

149
00:09:48,044 --> 00:09:51,210
run our tests, we take a new checkpoint snapshot.

150
00:09:51,710 --> 00:09:55,290
Then we can compare the two side by side to detect

151
00:09:55,710 --> 00:09:59,386
any differences or any changes. This is what

152
00:09:59,408 --> 00:10:03,262
we call visual testing. If a picture is worth

153
00:10:03,316 --> 00:10:07,230
a thousand words, then a snapshots is worth a thousand assertions.

154
00:10:07,730 --> 00:10:11,520
Automated visual testing is what tools like Apple tools does.

155
00:10:12,630 --> 00:10:15,986
One visual snapshot captures everything on the page.

156
00:10:16,168 --> 00:10:19,586
As a tester, you don't need to explicitly state what to

157
00:10:19,608 --> 00:10:22,782
check. A snapshot implicitly covers layout,

158
00:10:22,926 --> 00:10:26,018
color, size, shape,

159
00:10:26,114 --> 00:10:29,922
and styling. That's a huge advantage over traditional

160
00:10:29,986 --> 00:10:33,574
functional test automation. To be honest,

161
00:10:33,692 --> 00:10:37,538
testers have been doing visual testing since computers first had screens.

162
00:10:37,714 --> 00:10:41,146
Anyone can manually bang on a keyboard and look at the screen to

163
00:10:41,168 --> 00:10:44,426
see what changes. That's arguably the first kind

164
00:10:44,448 --> 00:10:48,346
of testing that anyone does. It's super valuable to

165
00:10:48,368 --> 00:10:52,302
take a quick glance at a page to see what's wrong. Humans can

166
00:10:52,356 --> 00:10:56,110
intuitively judge if a page is good or bad in a few seconds.

167
00:10:58,050 --> 00:11:01,534
Unfortunately, human reviews don't scale well.

168
00:11:01,732 --> 00:11:05,086
Modern apps have several screens worth checking, and continuous

169
00:11:05,118 --> 00:11:08,500
integration systems deploy changes multiple times a day.

170
00:11:09,030 --> 00:11:12,190
Humans make mistakes, they get tired,

171
00:11:12,350 --> 00:11:15,780
they miss things. They also have a limited time.

172
00:11:16,650 --> 00:11:20,486
This reminds me of the legend of John Henry, a folk hero from

173
00:11:20,508 --> 00:11:23,800
the United States. As the legend goes,

174
00:11:26,170 --> 00:11:29,962
John Henry was a railroad worker on the great Bend Tunnel along

175
00:11:30,016 --> 00:11:32,570
the CNO railway in West Virginia.

176
00:11:33,390 --> 00:11:37,062
When the company bought a steam drill,

177
00:11:37,206 --> 00:11:40,586
John Henry competed against it head to head with a ten pound

178
00:11:40,618 --> 00:11:43,630
hammer in each hand to see which could drill faster.

179
00:11:44,210 --> 00:11:47,006
John Henry drilled deeper than the steam engine could,

180
00:11:47,108 --> 00:11:51,354
technically winning the contest, but he died from exhaustion

181
00:11:51,402 --> 00:11:54,898
afterwards. The legend of John Henry serves has a

182
00:11:54,904 --> 00:11:58,798
parable that even the strongest, sharpest human is inevitably

183
00:11:58,894 --> 00:12:02,946
no match. For a machine to

184
00:12:02,968 --> 00:12:07,350
be relevant in a modern software shop, visual testing must be automated.

185
00:12:07,690 --> 00:12:09,880
But that's easier said than done.

186
00:12:10,810 --> 00:12:14,386
Programming a tool to capture snapshots and perform pixel

187
00:12:14,418 --> 00:12:18,566
to pixel comparisons isn't too difficult. But determining

188
00:12:18,598 --> 00:12:20,780
if those changes matter is.

189
00:12:21,550 --> 00:12:24,586
A good visual testing tool should ignore changes that

190
00:12:24,608 --> 00:12:27,882
don't matter, like small padding differences, and focus

191
00:12:27,936 --> 00:12:29,980
on the changes that do matter.

192
00:12:30,770 --> 00:12:34,734
Otherwise, human testers will need to review every single result,

193
00:12:34,932 --> 00:12:38,670
nullifying any benefit of automating visual tests.

194
00:12:39,570 --> 00:12:43,446
Take a look at those two pictures. They show a cute underwater scene

195
00:12:43,498 --> 00:12:47,442
with an octopus in a garden. There are a total of

196
00:12:47,496 --> 00:12:50,050
ten differences between these two pictures.

197
00:12:50,390 --> 00:12:54,100
Can you find them? I'll give you a few seconds to look.

198
00:12:58,100 --> 00:13:01,552
Unfortunately, a pure pixel to pixel comparison

199
00:13:01,616 --> 00:13:05,344
dont find any of those changes. I ran those two pictures

200
00:13:05,392 --> 00:13:08,884
through Apple tools using an exact pixel to pixel comparison and

201
00:13:08,922 --> 00:13:13,044
this is what happened. Except for the white space on the sides,

202
00:13:13,172 --> 00:13:16,500
every pixel was flagged as different as humans.

203
00:13:16,580 --> 00:13:20,344
We can clearly see that these images are very similar, but because they were

204
00:13:20,382 --> 00:13:24,104
a few pixels off on those side, automation failed to pinpoint

205
00:13:24,152 --> 00:13:27,852
meaningful differences. This is where AI really

206
00:13:27,906 --> 00:13:31,432
helps. Apple tools uses visual AI to detect

207
00:13:31,496 --> 00:13:35,564
meaningful changes that humans would see and ignore inconsequential

208
00:13:35,612 --> 00:13:39,184
differences that just make noise. Here I cause

209
00:13:39,222 --> 00:13:42,384
apple tools strict comparison which pinpointed each

210
00:13:42,422 --> 00:13:45,856
of the ten differences. Take a look. Did you

211
00:13:45,878 --> 00:13:49,540
find all ten yourself? Do you see any that you missed?

212
00:13:49,960 --> 00:13:52,150
I'll pause a moment for youll to look.

213
00:13:53,800 --> 00:13:57,552
That's the second advantage of good automated visual

214
00:13:57,616 --> 00:14:01,156
testing. Visual AI, like what Apple tools

215
00:14:01,188 --> 00:14:04,520
does, focuses on meaningful changes to avoid noise.

216
00:14:05,260 --> 00:14:08,952
Visual test results shouldn't waste testers'time over small

217
00:14:09,006 --> 00:14:12,520
pixel shifts or things those human wouldn't even noticing.

218
00:14:12,680 --> 00:14:16,300
They should highlight what matters like missing elements, differences,

219
00:14:16,370 --> 00:14:19,912
colors, or skewed layouts. Visual AI

220
00:14:19,976 --> 00:14:23,836
is a differentiator for visual testing tools. Pixel to

221
00:14:23,858 --> 00:14:26,480
pixel comparisons are inherently fragile.

222
00:14:26,980 --> 00:14:31,200
Visual AI makes visual testing robust and practical.

223
00:14:32,500 --> 00:14:36,716
So let's update our login test to do visual testing with applitools,

224
00:14:36,908 --> 00:14:39,664
first we need to create an appletools account.

225
00:14:39,862 --> 00:14:43,796
Anyone can create one for free. At the link I'm showing here, you can

226
00:14:43,818 --> 00:14:47,350
use your GitHub account or an email, and you don't even need a credit card.

227
00:14:48,360 --> 00:14:51,844
The account will come with an API key that must be set as an environment

228
00:14:51,892 --> 00:14:55,544
variable for testing. Next, we need to add

229
00:14:55,582 --> 00:14:58,010
the applitools eyes SDK to our project.

230
00:14:59,660 --> 00:15:03,036
Since we are using selenium Webdriver with Java, we need

231
00:15:03,058 --> 00:15:07,480
to add the Appletools eyes selenium

232
00:15:07,560 --> 00:15:11,020
Java three maven dependency to our PoM file.

233
00:15:12,080 --> 00:15:15,496
Then we need to set up the applitools configuration and

234
00:15:15,538 --> 00:15:17,760
runner for all tests in a suite.

235
00:15:18,260 --> 00:15:21,996
The visual grid runner will upload snapshots to Apple tools ultrafast

236
00:15:22,028 --> 00:15:25,440
grid and the configuration object sets the API key.

237
00:15:25,510 --> 00:15:29,190
Those test batch name and the browser configurations we want to test.

238
00:15:29,720 --> 00:15:33,252
This snippet shows configuration for Chrome, but we could test

239
00:15:33,306 --> 00:15:36,932
any other browser like Safari, Firefox or

240
00:15:36,986 --> 00:15:39,940
edge for genuine cross browser testing.

241
00:15:40,760 --> 00:15:44,552
The setup for each individual test still needs a Webdriver object,

242
00:15:44,686 --> 00:15:48,120
but it also needs an eyes object for capturing snapshots.

243
00:15:48,780 --> 00:15:52,392
Here we construct the eyes object, hook it up to the runner,

244
00:15:52,456 --> 00:15:56,252
and set its configuration. Then we open

245
00:15:56,306 --> 00:15:59,500
our eyes to start taking snapshots.

246
00:16:00,000 --> 00:16:03,884
Opening requires the webdriver differences, the app name and

247
00:16:03,922 --> 00:16:08,380
the test name. Those interaction methods can remain unchanged

248
00:16:08,460 --> 00:16:12,428
but we need to update the verification methods. Traditional assertions

249
00:16:12,524 --> 00:16:16,320
can be completely replaced by one line snapshot calls.

250
00:16:16,920 --> 00:16:19,270
Take a look at load login page.

251
00:16:19,880 --> 00:16:24,048
Five lines reduced to one and the visual snapshot technically

252
00:16:24,144 --> 00:16:28,112
has far greater coverage. The impact

253
00:16:28,176 --> 00:16:32,404
on verify main page is far greater. One visual

254
00:16:32,452 --> 00:16:36,228
snapshot eliminates the need for several lines

255
00:16:36,244 --> 00:16:39,672
of assertions. Things is the third major

256
00:16:39,726 --> 00:16:43,500
advantage visual testing has over traditional functional testing.

257
00:16:44,080 --> 00:16:47,416
Visual snapshots greatly simplify assertions.

258
00:16:47,608 --> 00:16:50,764
Instead of spending hours deciding what to check,

259
00:16:50,882 --> 00:16:54,832
figuring out locators and writing transformation logic, you can make

260
00:16:54,886 --> 00:16:58,210
one concise snapshot call and be done.

261
00:16:58,740 --> 00:17:02,252
As an engineer myself, I cannot understate the cognitive

262
00:17:02,316 --> 00:17:05,090
load things removes from the automation coding process.

263
00:17:05,940 --> 00:17:09,364
I said it before and I'll say it again. If a picture is worth

264
00:17:09,402 --> 00:17:12,900
a thousand words, then a snapshot is worth a thousand assertions.

265
00:17:15,160 --> 00:17:18,436
So let's see visual testing in action. It's time

266
00:17:18,458 --> 00:17:22,504
to dive into code and run it. All right,

267
00:17:22,622 --> 00:17:25,896
so here is that Java project I mentioned.

268
00:17:25,998 --> 00:17:29,720
I have it opened in Intellij idea and the

269
00:17:29,790 --> 00:17:33,468
visual test junit class has all

270
00:17:33,554 --> 00:17:37,676
visual testing code that I just showed you. Just to

271
00:17:37,858 --> 00:17:41,372
show you again, we have our setup before

272
00:17:41,426 --> 00:17:45,084
the entire test suite that creates our runner and our configuration.

273
00:17:45,212 --> 00:17:48,480
We have it configured to run against one browser,

274
00:17:48,980 --> 00:17:52,624
chrome browser with 800 by 600

275
00:17:52,662 --> 00:17:56,364
viewport. We seen we're using Chrome

276
00:17:56,412 --> 00:17:59,280
driver. We're setting up our eyes with our configuration.

277
00:17:59,440 --> 00:18:03,600
Opening the eyes test case has four steps,

278
00:18:03,760 --> 00:18:07,648
loading the login page, verifying it, performing login,

279
00:18:07,744 --> 00:18:12,136
then verifying the main page. At the end we quit and

280
00:18:12,158 --> 00:18:15,480
then we have the code for our interactions and verifications.

281
00:18:16,460 --> 00:18:21,080
So let's run this test to establish baselines snapshots.

282
00:18:21,500 --> 00:18:25,470
I already have it configured so I'm just going to hit the run button.

283
00:18:26,560 --> 00:18:29,724
And now Intellij idea will run our test.

284
00:18:29,922 --> 00:18:32,460
It should take only about a minute.

285
00:18:33,760 --> 00:18:37,024
So right now it's running it locally. Now it's going to

286
00:18:37,062 --> 00:18:40,160
upload the snapshot to Apple tools ultrafast grid.

287
00:18:40,500 --> 00:18:44,944
And if I switch over to the dashboard right

288
00:18:44,982 --> 00:18:48,084
now it's empty. If I refresh we can see

289
00:18:48,122 --> 00:18:51,744
that that tests catch is now there has those name of the catch

290
00:18:51,792 --> 00:18:55,332
we gave it and after, let's see,

291
00:18:55,386 --> 00:18:59,552
after 17 seconds it captured

292
00:18:59,616 --> 00:19:03,112
both snapshots and it's marked them as new green

293
00:19:03,166 --> 00:19:07,044
for passing. So we can see those are our new baselines.

294
00:19:07,092 --> 00:19:10,664
So we have a baseline for the login page and

295
00:19:10,702 --> 00:19:12,650
we have a baseline for the main page.

296
00:19:14,540 --> 00:19:18,092
So now let's run that test again on the second run

297
00:19:18,146 --> 00:19:21,932
since it has baselines, what the visual testing comparison will do

298
00:19:21,986 --> 00:19:25,372
is it will capture a new snapshots and treat it as a checkpoints

299
00:19:25,436 --> 00:19:29,068
and compare against the baseline using visual AI

300
00:19:29,164 --> 00:19:30,880
to see if there's any differences.

301
00:19:33,060 --> 00:19:36,876
So let's run again. Again, it'll take

302
00:19:36,918 --> 00:19:43,852
just a moment here. Running locally now

303
00:19:43,906 --> 00:19:48,632
running in the dashboard.

304
00:19:48,776 --> 00:19:50,860
If we refresh the dashboard,

305
00:19:52,820 --> 00:20:03,034
we can see it's there, it's running and

306
00:20:03,072 --> 00:20:04,090
it passed.

307
00:20:07,290 --> 00:20:09,850
So if we look at the checkpoints,

308
00:20:10,830 --> 00:20:14,442
we can see baseline versus checkpoint image and they're the same.

309
00:20:14,496 --> 00:20:17,834
So nothing is highlighted differently. Same goes

310
00:20:17,872 --> 00:20:21,420
for that main page. Everything's the same, everything checks out.

311
00:20:22,690 --> 00:20:26,446
But now what happens if we introduce a

312
00:20:26,468 --> 00:20:28,880
visual difference like we saw before?

313
00:20:29,410 --> 00:20:33,258
So I'm going to run those test again, but this time I'm

314
00:20:33,274 --> 00:20:36,914
going to use that alternative login page and

315
00:20:36,952 --> 00:20:38,660
we'll see what happens here.

316
00:20:42,110 --> 00:20:44,700
So we'll give it a minute. I just launched it again.

317
00:20:46,270 --> 00:20:52,334
It's running locally and

318
00:20:52,372 --> 00:20:55,790
now it should be uploading to the grid. So if I refresh

319
00:20:56,210 --> 00:20:59,680
we can see there's the new batch and it's running.

320
00:21:05,980 --> 00:21:07,820
Give it just a few seconds.

321
00:21:12,320 --> 00:21:14,350
And this time we have a problem.

322
00:21:15,680 --> 00:21:19,372
So the results show here the

323
00:21:19,426 --> 00:21:22,976
main page didn't have any significant changes. So it's still green,

324
00:21:23,158 --> 00:21:27,116
but the login page certainly did. And so it's marked yellow

325
00:21:27,148 --> 00:21:31,136
as unresolved. What that status means unresolved is

326
00:21:31,158 --> 00:21:34,752
that appletools has detected a visual difference and it's up to you

327
00:21:34,806 --> 00:21:38,436
as those tester to determine if that was a good change or

328
00:21:38,458 --> 00:21:41,684
a bad change. So when we pull up the side by

329
00:21:41,722 --> 00:21:45,252
side we can see all the things that were highlighted different. We see the icon

330
00:21:45,316 --> 00:21:48,664
has different, we see the sign in versus login button was

331
00:21:48,702 --> 00:21:52,536
different and we see that the remember me check mark

332
00:21:52,638 --> 00:21:56,376
has shifted. So I'm going to say that this is

333
00:21:56,398 --> 00:21:59,230
a bad difference and I'm going to give it a thumbs down.

334
00:22:05,540 --> 00:22:09,612
And what that does now is it will mark this particular snapshot

335
00:22:09,676 --> 00:22:13,010
as failed. So we save our changes.

336
00:22:14,820 --> 00:22:18,724
And what's really cool now is that if we were to run this test again,

337
00:22:18,842 --> 00:22:22,132
which I'll do here, I'll just click those run

338
00:22:22,186 --> 00:22:25,664
and we'll wait for it. What should happen is that since we've already

339
00:22:25,722 --> 00:22:29,460
marked that kind of visual change as a failure,

340
00:22:29,620 --> 00:22:33,204
anytime that visual checkpoint appearances

341
00:22:33,252 --> 00:22:37,016
again app youll should automatically mark it as a failure rather than

342
00:22:37,038 --> 00:22:39,550
us need to come in here and repeatedly fail it.

343
00:22:41,520 --> 00:22:44,716
So we run again and there

344
00:22:44,738 --> 00:22:45,470
it goes.

345
00:22:48,480 --> 00:22:51,904
And automatically look at that. Because it was the same type

346
00:22:51,942 --> 00:22:55,052
of failure apple tools was smart enough to know. Boom,

347
00:22:55,196 --> 00:22:56,080
failed.

348
00:23:01,060 --> 00:23:05,220
So there's another really cool thing we can do with these visual snapshots.

349
00:23:06,920 --> 00:23:08,630
Let me jump back in the code,

350
00:23:09,640 --> 00:23:12,528
look at those browser configurations.

351
00:23:12,704 --> 00:23:15,940
Previously I only had one browser configured,

352
00:23:16,600 --> 00:23:20,020
but with Apple tools, if you test in the ultrafast grid,

353
00:23:20,100 --> 00:23:23,496
you can actually test against multiple browsers. How is

354
00:23:23,518 --> 00:23:27,220
this possible? It's the magic of a snapshot.

355
00:23:27,380 --> 00:23:31,180
So I've been careful to say snapshot and not screenshot.

356
00:23:31,520 --> 00:23:35,436
A snapshot captures everything on those page in the

357
00:23:35,458 --> 00:23:38,748
DOM, the HTML, the CSS and the

358
00:23:38,754 --> 00:23:42,076
JavaScript. A screenshot is nothing more than a

359
00:23:42,098 --> 00:23:45,568
collection of pixels, which it's static and doesn't change. But if you

360
00:23:45,574 --> 00:23:48,560
have a snapshots with all the stuff on the page,

361
00:23:48,710 --> 00:23:52,204
what youll could do is you could rerender that on any browser

362
00:23:52,252 --> 00:23:55,648
configuration that you like. So even though you captured

363
00:23:55,744 --> 00:23:59,424
the page, let's say on Chrome, you could rerender

364
00:23:59,472 --> 00:24:02,320
that snapshot on Safari,

365
00:24:02,400 --> 00:24:05,988
on Firefox, on ie, or maybe even on

366
00:24:06,074 --> 00:24:09,770
mobile browsers, which is really, really cool.

367
00:24:10,220 --> 00:24:14,836
So let's do that. We'll get rid of our one browser configuration

368
00:24:15,028 --> 00:24:17,640
and I'll bring these back to the forefront.

369
00:24:20,080 --> 00:24:23,864
So here now we have five different desktop browser configurations,

370
00:24:23,992 --> 00:24:26,856
Chrome, Firefox, iE, Edge, Safari,

371
00:24:26,968 --> 00:24:29,960
as well as five mobile emulated devices,

372
00:24:30,120 --> 00:24:34,108
iPhone X, Pixel, Galaxy Nexus and even can iPad.

373
00:24:34,284 --> 00:24:37,376
Each one has a different viewport size as well as a different

374
00:24:37,478 --> 00:24:40,992
orientation. What's really cool about this

375
00:24:41,046 --> 00:24:44,352
is you can test browsers and devices that

376
00:24:44,406 --> 00:24:47,984
aren't on your local machine. For example, I'm running on a Mac,

377
00:24:48,032 --> 00:24:51,476
so I'm not going to have ie eleven here, but I could run these

378
00:24:51,498 --> 00:24:55,056
tests visually against ie eleven in the Apple tools

379
00:24:55,088 --> 00:24:57,450
test cloud. Really awesome stuff.

380
00:24:58,060 --> 00:25:01,128
So let's run this again just to

381
00:25:01,134 --> 00:25:04,888
see what happens. Going to run it back on the

382
00:25:04,974 --> 00:25:07,450
original working website.

383
00:25:08,720 --> 00:25:12,584
So we'll kick it off and then let's flip over to the dashboard

384
00:25:12,632 --> 00:25:15,724
again and we'll wait for

385
00:25:15,762 --> 00:25:19,244
results here. When we do

386
00:25:19,282 --> 00:25:23,200
this, even though we specified ten browsers, it will still only run

387
00:25:23,270 --> 00:25:26,800
one browser on our local machine, which we decided was Chrome.

388
00:25:27,780 --> 00:25:31,392
And it'll take that snapshot. And here we go. You can see

389
00:25:31,446 --> 00:25:35,108
how it's testing all those checkpoints against the

390
00:25:35,114 --> 00:25:38,128
different browser configurations. Chrome, ie, Firefox, Edge,

391
00:25:38,144 --> 00:25:41,780
Safari, and it's doing it concurrently.

392
00:25:42,120 --> 00:25:45,684
I in my code have set a concurrency level of five, meaning five

393
00:25:45,722 --> 00:25:49,048
checkpoints can run in parallel. And already we're seeing.

394
00:25:49,214 --> 00:25:52,424
So the first one is marked as pass because that

395
00:25:52,462 --> 00:25:56,170
was the previous configuration that we had,

396
00:25:56,620 --> 00:26:00,728
but all the others should be marked as new because they would be new baseline

397
00:26:00,824 --> 00:26:01,660
images.

398
00:26:06,480 --> 00:26:09,532
And there we go. Everything passed. This is a really,

399
00:26:09,586 --> 00:26:13,156
really cool way to not only do visual testing, but also to achieve

400
00:26:13,208 --> 00:26:17,260
cross browser testing. You run the test once on your machine

401
00:26:17,340 --> 00:26:20,992
or in a CI server and then you leave the rest

402
00:26:21,046 --> 00:26:25,104
up to applitools test cloud to render it

403
00:26:25,142 --> 00:26:28,384
against all the different browser configurations. This is much,

404
00:26:28,422 --> 00:26:32,228
much faster than traditional cross browser testing where you would need to run those entire

405
00:26:32,314 --> 00:26:35,924
test from start to finish however many times you want

406
00:26:35,962 --> 00:26:38,976
for the differences. Browser configs if we look here,

407
00:26:39,018 --> 00:26:43,000
these ten tests finished in only 46 seconds.

408
00:26:43,420 --> 00:26:46,696
Typically a web UI test would take about half a minute to

409
00:26:46,718 --> 00:26:51,016
a minute to run ten tests. You're talking several minutes.

410
00:26:51,118 --> 00:26:55,212
Here were sub minute 46 seconds. Really, really cool

411
00:26:55,266 --> 00:26:59,224
stuff. Lightning fast cross browser testing is visual

412
00:26:59,272 --> 00:27:02,748
testing's fourth big advantage. To do cross browser testing

413
00:27:02,764 --> 00:27:06,524
with traditional functional tests, each test must run on each browser

414
00:27:06,572 --> 00:27:10,636
configuration all the way through with visual snapshots.

415
00:27:10,748 --> 00:27:14,756
Each test runs only one time and snapshots are rerendered on

416
00:27:14,778 --> 00:27:19,140
each target configuration, making tests faster and more reliable.

417
00:27:20,600 --> 00:27:23,776
Before I conclude this talk, those is one more thing I want y'all

418
00:27:23,808 --> 00:27:27,024
to consider when a team should adopt visual

419
00:27:27,072 --> 00:27:30,744
testing. I can't tell you how many times folks have told me,

420
00:27:30,862 --> 00:27:34,120
Andy, that visual testing thing looks so cool

421
00:27:34,270 --> 00:27:37,864
and so helpful, but I don't think my team will ever get

422
00:27:37,902 --> 00:27:41,740
there. We're just getting started and we're new to automation

423
00:27:42,240 --> 00:27:45,484
and automation is so hard and I don't think

424
00:27:45,522 --> 00:27:48,620
we'll ever be mature enough to use a tool like apple tools.

425
00:27:49,680 --> 00:27:54,400
I just smacked myself in those face because visual testing makes automation easier.

426
00:27:54,740 --> 00:27:57,970
I really think teams should do visual testing from the start.

427
00:27:58,420 --> 00:28:02,064
Consider this strategy start by automating a smoke test

428
00:28:02,102 --> 00:28:05,396
that navigates to different pages of an app and captures snapshots of

429
00:28:05,418 --> 00:28:08,464
catch. The interaction code would be straightforward,

430
00:28:08,592 --> 00:28:12,324
and the snapshots are just oneliners that would provide an

431
00:28:12,362 --> 00:28:16,116
immense amount of value for relatively little automation work.

432
00:28:16,298 --> 00:28:20,264
It's the 80 20 rule, 80% of the value for 20%

433
00:28:20,302 --> 00:28:24,264
of the work. Then later, when a team has more time or

434
00:28:24,302 --> 00:28:28,036
more maturity, they can expand the automation project with larger tests

435
00:28:28,068 --> 00:28:31,644
that use both traditional and visual assertions. Let those

436
00:28:31,682 --> 00:28:34,892
power of AI help you test

437
00:28:34,946 --> 00:28:37,964
automation is hard. No matter what tool or language you use.

438
00:28:38,162 --> 00:28:41,660
Teams struggle to automate tests in time and to keep them rumbling.

439
00:28:42,020 --> 00:28:45,344
Visual testing simplifies implementation and execution while

440
00:28:45,382 --> 00:28:49,116
catching more problems. It offers the advantage of making functional

441
00:28:49,148 --> 00:28:52,576
testing easier. It's not a technique only for those on

442
00:28:52,598 --> 00:28:55,924
the bleeding edge. It's here today and it's accessible to

443
00:28:55,962 --> 00:28:59,556
anyone doing test automation. You don't need to be an

444
00:28:59,578 --> 00:29:03,456
expert in AI or ML to use it. Visual testing

445
00:29:03,488 --> 00:29:07,104
is a winning strategy. It has several advantages over traditional

446
00:29:07,152 --> 00:29:10,776
functional testing. Please note, however, the visual testing does

447
00:29:10,798 --> 00:29:13,656
not replace functional testing. Instead,

448
00:29:13,758 --> 00:29:17,256
it supercharges it. If you want to give it a try, you can

449
00:29:17,278 --> 00:29:21,224
sign up for a free account with Apple tools. Clone the example project I

450
00:29:21,262 --> 00:29:25,540
showed today, or any of our others, and run tests on your local machine.

451
00:29:25,700 --> 00:29:28,964
Thank you all for attending my talk today on visual testing.

452
00:29:29,092 --> 00:29:32,876
Again, my name is Pandy and I'm the automation Panda developer

453
00:29:32,908 --> 00:29:36,348
advocate at Apple Tools and director of Test Automation University.

454
00:29:36,524 --> 00:29:39,936
Be sure to read my blog and follow me on Twitter. I always love

455
00:29:39,958 --> 00:29:43,968
to chat about testing and automation, so thanks again and enjoy the

456
00:29:43,974 --> 00:29:44,990
rest of 42.

