1
00:00:26,290 --> 00:00:29,906
Hello everyone. Pandy Knight here, automation panda and developer

2
00:00:29,938 --> 00:00:33,458
advocate at applitools. I'm also a huge Pythons fan,

3
00:00:33,554 --> 00:00:37,206
just like y'all. Have you ever seen those at tags on top of

4
00:00:37,228 --> 00:00:41,106
python functions? Maybe you've seen them on top of methods and classes,

5
00:00:41,138 --> 00:00:44,594
too. Those are decorators, one of Python's

6
00:00:44,642 --> 00:00:48,466
niftiest language features. Decorators are essentially wrappers.

7
00:00:48,578 --> 00:00:52,590
They wrap additional code around existing definitions. When used

8
00:00:52,660 --> 00:00:55,818
right. They can clean up your code better than oxiclean.

9
00:00:55,914 --> 00:00:59,262
Let's learn how to use them. Here's a regular old hello

10
00:00:59,316 --> 00:01:02,080
world function. When we run it,

11
00:01:02,390 --> 00:01:05,890
it prints hello world. Nothing fancy.

12
00:01:06,550 --> 00:01:09,998
Now let's take that function and bam.

13
00:01:10,094 --> 00:01:13,966
Add a decorator using this at sign. We just added

14
00:01:13,998 --> 00:01:17,160
a decorator named Tracer to hello world.

15
00:01:18,010 --> 00:01:21,606
So what is this decorator? Tracer is just

16
00:01:21,628 --> 00:01:24,966
another function, but it's a special function

17
00:01:25,068 --> 00:01:28,310
because it takes in another function as an argument.

18
00:01:28,750 --> 00:01:32,202
Since tracer decorates hello world, the hello world

19
00:01:32,256 --> 00:01:35,660
function is passed into tracer as an argument. Wow.

20
00:01:36,030 --> 00:01:39,906
So what's inside tracer? This decorator has an inner

21
00:01:39,958 --> 00:01:43,934
function named wrapper. Can you even do that with

22
00:01:43,972 --> 00:01:47,434
Python? Yes, you can. The wrapper

23
00:01:47,482 --> 00:01:51,146
function prints entering, calls the function originally passed

24
00:01:51,178 --> 00:01:54,526
into the decorator, and then prints exiting.

25
00:01:54,718 --> 00:01:58,002
When tracer decorates hello world, that means hello world

26
00:01:58,056 --> 00:02:01,250
will be wrapped by entering and exiting print statements.

27
00:02:01,830 --> 00:02:05,300
Finally, the decorator returns the new wrapper function.

28
00:02:05,750 --> 00:02:08,802
Anytime the decorated function is called, it will effectively

29
00:02:08,866 --> 00:02:12,838
be replaced by this new wrapper function. So when we

30
00:02:12,844 --> 00:02:15,778
call hello world, the trace statements are now printed.

31
00:02:15,954 --> 00:02:19,740
Wow, that's amazing. That's how decorators work.

32
00:02:20,110 --> 00:02:23,450
Decorators wrap functions around functions.

33
00:02:23,790 --> 00:02:27,146
Think about them like candy bars. The decorators is like the

34
00:02:27,168 --> 00:02:30,694
foil wrapper. And how how decorators function like the chocolate

35
00:02:30,742 --> 00:02:34,462
inside. But how is those even possible? That decorator code

36
00:02:34,516 --> 00:02:38,586
looks confusing. Decorators are possible because in pythons,

37
00:02:38,698 --> 00:02:42,454
functions are objects. In fancy language,

38
00:02:42,522 --> 00:02:45,410
we say functions arent first order values.

39
00:02:45,750 --> 00:02:49,442
Since functions are just objects, we can pass them into

40
00:02:49,496 --> 00:02:53,614
other functions as arguments define new functions inside existing

41
00:02:53,662 --> 00:02:57,320
functions, and return a function from a function.

42
00:02:58,650 --> 00:03:02,550
Those is all part of a paradigm called functional programming.

43
00:03:03,050 --> 00:03:07,510
Python supports functional programming because functions can be treated like objects.

44
00:03:07,870 --> 00:03:11,162
That's awesome. So using

45
00:03:11,216 --> 00:03:14,646
functions as objects, decorators can change how functions

46
00:03:14,678 --> 00:03:18,118
are called. Decorators create an how

47
00:03:18,214 --> 00:03:21,794
decorators function around an inner decorated

48
00:03:21,942 --> 00:03:25,326
function. Remember, the outer function is

49
00:03:25,348 --> 00:03:28,830
like the foil wrapper and the inner function is like the chocolate.

50
00:03:29,170 --> 00:03:32,426
Creating an outer function lets you add new code around the inner

51
00:03:32,458 --> 00:03:36,386
function. Some people call this advice. You can

52
00:03:36,408 --> 00:03:40,050
add advice before or after the inner function. You could even

53
00:03:40,120 --> 00:03:43,410
skip the inner function. The best part is,

54
00:03:43,480 --> 00:03:45,960
decorators can be applied to any function.

55
00:03:46,730 --> 00:03:50,680
They make sharing code easy so you don't repeat yourself.

56
00:03:51,290 --> 00:03:55,378
Decorators are reminiscent of a paradigm called aspect oriented programming,

57
00:03:55,474 --> 00:03:59,530
in which code can be cleverly inserted before and after points of execution.

58
00:04:00,030 --> 00:04:03,814
Neat. So remember how decorators functions

59
00:04:03,862 --> 00:04:06,250
around functions like candy bars?

60
00:04:07,310 --> 00:04:10,702
Hold on, now we have a problem in that pythons code.

61
00:04:10,836 --> 00:04:13,982
If the wrapper function effectively replaces hello world,

62
00:04:14,116 --> 00:04:16,960
then what identity does hello world report?

63
00:04:17,490 --> 00:04:21,390
Its name is wrapper and its help is also wrapper.

64
00:04:22,790 --> 00:04:26,610
That's not right. Never fear, there's an easy

65
00:04:26,680 --> 00:04:30,334
solution. The functions module provides a decorator named

66
00:04:30,382 --> 00:04:34,334
wraps. Put functions wraps on the wrapper

67
00:04:34,382 --> 00:04:37,800
function and pass in the inner function object,

68
00:04:38,250 --> 00:04:41,938
and decorated functions once again show the right identity.

69
00:04:42,114 --> 00:04:45,960
That's awesome. But wait, there's another problem.

70
00:04:47,130 --> 00:04:49,930
How do decorators work with inputs and outputs?

71
00:04:50,350 --> 00:04:53,900
What if we decorate a function with parameters and a return value?

72
00:04:54,590 --> 00:04:56,970
If we try to use the current tracer,

73
00:04:57,550 --> 00:05:00,860
we get an error. Arguments broke it.

74
00:05:01,550 --> 00:05:05,734
Thankfully, we can fix it. First, add star args

75
00:05:05,782 --> 00:05:08,954
and startup kwargs to the wrapper

76
00:05:09,002 --> 00:05:12,880
function's parameters and then pass them through to the inner function.

77
00:05:13,510 --> 00:05:17,390
This will make sure all arguments go through the decorator into the decorated

78
00:05:17,470 --> 00:05:21,282
function. Then capture the inner function's return

79
00:05:21,336 --> 00:05:23,940
value and return it from the wrapper function.

80
00:05:25,110 --> 00:05:29,126
This makes sure return values also pass through. If the

81
00:05:29,148 --> 00:05:32,418
inner function has no return value. Dont worry,

82
00:05:32,514 --> 00:05:35,880
those decorator will pass through a none value.

83
00:05:36,410 --> 00:05:39,626
When we call the function with the updated tracer, we see

84
00:05:39,648 --> 00:05:43,210
tracing is now successful again. When we check the return

85
00:05:43,280 --> 00:05:47,420
value, it's exactly what we expected. It works.

86
00:05:48,670 --> 00:05:52,222
Wow, that's awesome. But wait,

87
00:05:52,276 --> 00:05:56,350
there's more. You can write a decorator to call a function twice.

88
00:05:57,090 --> 00:06:01,306
Start with the decorator template and call the inner function twice.

89
00:06:01,498 --> 00:06:04,450
Return the final return value for continuity.

90
00:06:05,590 --> 00:06:07,620
Bam. It works.

91
00:06:08,870 --> 00:06:13,010
Oh wait, there's more. You can write a timer decorators

92
00:06:13,430 --> 00:06:17,378
start with the template, call the inner function, and surround

93
00:06:17,394 --> 00:06:19,910
it with timestamps using the time module.

94
00:06:20,970 --> 00:06:23,640
Bam. Now you can time any functions.

95
00:06:24,890 --> 00:06:28,154
But wait, there's more. You can also add

96
00:06:28,192 --> 00:06:32,410
more than one decorator to a function. This is called nesting

97
00:06:32,990 --> 00:06:36,406
order matters. Decorators are executed

98
00:06:36,438 --> 00:06:40,254
in order of closeness to the inner function. So in this

99
00:06:40,292 --> 00:06:44,314
case, call twice is applied first, and then timer

100
00:06:44,362 --> 00:06:48,270
is applied. If these decorators are reversed,

101
00:06:48,690 --> 00:06:51,818
then each inner function call is timed.

102
00:06:51,994 --> 00:06:55,700
Cool. But wait, there's more.

103
00:06:56,710 --> 00:07:00,226
You can scrub and validate function arguments. Check out these

104
00:07:00,248 --> 00:07:04,046
two simple math functions. Create a decorator to scrub

105
00:07:04,078 --> 00:07:07,746
and validate inputs as integers. Add the wrapper

106
00:07:07,778 --> 00:07:10,550
function and make sure it has positional args.

107
00:07:11,610 --> 00:07:15,174
Then cast all args as ints before passing them into

108
00:07:15,212 --> 00:07:19,242
the inner function. Now, when calling those math functions calls,

109
00:07:19,296 --> 00:07:23,014
numbers are integers. Using non numeric inputs

110
00:07:23,062 --> 00:07:24,890
also raises a value error.

111
00:07:26,190 --> 00:07:29,482
But wait, there's more. You can create

112
00:07:29,536 --> 00:07:32,766
decorators with parameters. Here's a decorator that will

113
00:07:32,788 --> 00:07:34,480
repeat a function five times.

114
00:07:35,570 --> 00:07:39,246
The repeat function is a little different. Instead of taking in the

115
00:07:39,268 --> 00:07:42,478
inner function object, it takes in the parameter, which is the

116
00:07:42,484 --> 00:07:44,580
number of times to repeat the inner function.

117
00:07:45,670 --> 00:07:49,106
Inside there's a repeat decorator function that has a parameter for

118
00:07:49,128 --> 00:07:52,526
the inner function. The repeat function returns the repeat

119
00:07:52,558 --> 00:07:56,002
decorator function inside. Repeat decorator

120
00:07:56,066 --> 00:07:59,810
is the wrapper function. It uses functions,

121
00:07:59,890 --> 00:08:02,550
wraps, and passes through all arguments.

122
00:08:02,890 --> 00:08:06,822
Repeat decorator returns wrapper finally,

123
00:08:06,956 --> 00:08:11,046
wrapper contains the logic for calling the inner function multiple times according

124
00:08:11,078 --> 00:08:13,740
to the repeat decorator's parameter value.

125
00:08:14,190 --> 00:08:17,100
Now, hello, could runs five times.

126
00:08:17,470 --> 00:08:20,202
Nifty. But wait,

127
00:08:20,256 --> 00:08:24,170
there's more. Decorators can be used to save

128
00:08:24,240 --> 00:08:27,534
states. Here's a decorator that will count the number

129
00:08:27,572 --> 00:08:29,600
of times a functions is called.

130
00:08:30,610 --> 00:08:34,370
Could calls has the standard decorator structure outside

131
00:08:34,440 --> 00:08:38,180
the wrapper. A could attribute is initialized to zero.

132
00:08:38,630 --> 00:08:42,610
This attribute is added to the wrapper function object inside

133
00:08:42,680 --> 00:08:46,294
the wrapper. The count is incremented before calling the inner function.

134
00:08:46,492 --> 00:08:49,670
The count value will persist across multiple calls.

135
00:08:50,810 --> 00:08:54,280
Initially, the hello world count value is zero.

136
00:08:56,090 --> 00:08:58,874
After two calls, the count value goes up.

137
00:08:59,072 --> 00:09:02,650
Awesome. Oh wait,

138
00:09:02,800 --> 00:09:07,050
there's more. Decorators can be used in classes.

139
00:09:07,710 --> 00:09:11,790
Here those timer decorator is applied to this hello method.

140
00:09:12,530 --> 00:09:16,234
As long as parameters and return values are set up correctly,

141
00:09:16,362 --> 00:09:19,950
decorators can be applied equally to functions and methods.

142
00:09:21,170 --> 00:09:24,930
Decorators can also be applied directly to classes.

143
00:09:25,750 --> 00:09:29,330
When a decorator is applied to a class, it wraps the constructor.

144
00:09:30,230 --> 00:09:33,620
Note that it does not wrap each method in the class.

145
00:09:34,470 --> 00:09:38,514
Since decorators can wrap classes and methods in addition to functions,

146
00:09:38,642 --> 00:09:42,226
it would technically be more correct to say that decorators

147
00:09:42,258 --> 00:09:45,190
wrap callables around callables.

148
00:09:46,330 --> 00:09:50,522
So all that's great. But can decorators be tested? Good code

149
00:09:50,576 --> 00:09:53,706
must arguably be testable code well,

150
00:09:53,808 --> 00:09:57,450
today's your lucky day, because yes, you can

151
00:09:57,520 --> 00:10:00,790
test decorators. Testing decorators can

152
00:10:00,800 --> 00:10:04,778
be a challenge. We should always try to test the code we write, but decorators

153
00:10:04,794 --> 00:10:07,230
can be tricky. Here's some advice.

154
00:10:08,210 --> 00:10:12,202
First, separate tests for decorator functions from how

155
00:10:12,266 --> 00:10:15,890
decorators function. How how how decorators

156
00:10:15,960 --> 00:10:19,794
function intended outcomes try to focus on the wrapper instead

157
00:10:19,832 --> 00:10:22,514
of the inner function. Remember,

158
00:10:22,632 --> 00:10:26,098
decorators can be applied to any callable, so cover the parts

159
00:10:26,114 --> 00:10:29,842
that make the decorators unique. Decorate Ted functions

160
00:10:29,906 --> 00:10:33,286
should have their own separate unit tests. Second,

161
00:10:33,388 --> 00:10:37,298
apply decorators to fake functions used only for testing.

162
00:10:37,474 --> 00:10:40,166
These functions can be simple or mocked.

163
00:10:40,358 --> 00:10:43,798
That way, unit tests won't have dependencies on existing functions

164
00:10:43,814 --> 00:10:47,386
that could change. Tests will also be simpler if they

165
00:10:47,408 --> 00:10:51,230
use how decorators function. Third,

166
00:10:51,380 --> 00:10:55,230
make sure decorators have test coverage for every possible way

167
00:10:55,300 --> 00:10:58,938
it could be used. Cover decorator parameters,

168
00:10:59,114 --> 00:11:02,510
decorated function arguments, and return values.

169
00:11:03,030 --> 00:11:05,780
Make sure the name and help are correct.

170
00:11:06,390 --> 00:11:08,900
Check any side effects like saved state.

171
00:11:10,070 --> 00:11:14,354
Try it on methods and classes as well as functions with

172
00:11:14,392 --> 00:11:18,310
decorators. Most failures happen due to overlooked edge cases.

173
00:11:18,890 --> 00:11:22,214
Let's look at a few short decorator tests. We'll use the

174
00:11:22,252 --> 00:11:25,926
count calls decorator from earlier there are

175
00:11:25,948 --> 00:11:29,514
how how decorators function use for testing. The first one is a no

176
00:11:29,552 --> 00:11:34,246
operation function that does nothing. It has no parameters or returns.

177
00:11:34,438 --> 00:11:38,234
The second one is a function that takes in one argument and returns it.

178
00:11:38,432 --> 00:11:42,490
Both are very simple, but they represent two equivalent classes.

179
00:11:42,570 --> 00:11:46,250
How how how how decorators function will verify

180
00:11:46,330 --> 00:11:50,078
outcomes using the decorator for count calls. That means

181
00:11:50,164 --> 00:11:54,160
tests will focus on the count attribute added to the decorated function.

182
00:11:54,470 --> 00:11:57,954
The first test case verifies that the initial count value for any

183
00:11:57,992 --> 00:12:01,278
function is zero. The second test calls

184
00:12:01,294 --> 00:12:04,820
a function three times and verifies that the count is three.

185
00:12:05,530 --> 00:12:08,886
The third test exercises those same function to make sure

186
00:12:08,908 --> 00:12:11,510
arguments and return values work correctly.

187
00:12:11,930 --> 00:12:15,718
It calls the same function, asserts the return value,

188
00:12:15,884 --> 00:12:19,394
and asserts the count value. This collection

189
00:12:19,442 --> 00:12:22,682
of tests is by no means complete. It simplest shows

190
00:12:22,736 --> 00:12:26,234
how to start writing tests for decorators. It also shows

191
00:12:26,272 --> 00:12:29,994
that you don't need to overthink unit tests for decorators. Simple is

192
00:12:30,032 --> 00:12:33,422
better than complex. Up to this point,

193
00:12:33,476 --> 00:12:37,306
we've covered how to write your own decorators. However, Python has several

194
00:12:37,338 --> 00:12:41,246
decorators available in the language and in various packages that you can use

195
00:12:41,428 --> 00:12:43,380
absolutely free.

196
00:12:44,150 --> 00:12:48,034
Decorators like class method, static method, and projects can apply

197
00:12:48,072 --> 00:12:51,954
to methods in a class. Frameworks like flask and pytest have

198
00:12:51,992 --> 00:12:55,220
even more decorators. Let's take a closer look.

199
00:12:55,850 --> 00:12:59,906
Let's start by comparing the class method and static method decorators.

200
00:13:00,098 --> 00:13:04,086
We'll revisit the greeter class we saw before the

201
00:13:04,108 --> 00:13:07,842
class method decorator will return any method into a class method

202
00:13:07,906 --> 00:13:10,010
instead of an instance method.

203
00:13:10,670 --> 00:13:14,682
That means this hello method here can be called directly from the class

204
00:13:14,816 --> 00:13:18,934
instead of from an object of the class. The decorators

205
00:13:18,982 --> 00:13:22,286
will pass a reference to the class into the method, so the

206
00:13:22,308 --> 00:13:24,960
method will have some context of the class.

207
00:13:25,810 --> 00:13:28,970
Here, the reference is named CLS,

208
00:13:29,130 --> 00:13:32,320
and the method uses it to get the class's name.

209
00:13:32,770 --> 00:13:35,780
The method can be called using greeter hello.

210
00:13:36,310 --> 00:13:39,682
The static method decorator works almost the same as the class

211
00:13:39,736 --> 00:13:43,362
method decorator, except that it does not pass a reference to the class

212
00:13:43,416 --> 00:13:47,730
into the method. Notice how the method parameters are empty.

213
00:13:47,890 --> 00:13:51,458
No class and no self methods

214
00:13:51,474 --> 00:13:54,710
are still called from the class, like here with greeter goodbye.

215
00:13:55,450 --> 00:13:59,690
You could say that static method is just a simpler version of class method.

216
00:14:00,430 --> 00:14:03,834
Next, let's take a look at the property decorator to show

217
00:14:03,872 --> 00:14:06,954
how to use it. We'll create a class called accumulator to

218
00:14:06,992 --> 00:14:10,666
keep count of a tally. Accumulator's init

219
00:14:10,698 --> 00:14:13,840
method initializes a count attribute to zero.

220
00:14:14,450 --> 00:14:18,702
An add method adds an amount to the could. So far,

221
00:14:18,836 --> 00:14:22,640
nothing unusual. Now let's add a property.

222
00:14:23,010 --> 00:14:27,074
The count method has the property decorator on it. This means that

223
00:14:27,112 --> 00:14:31,006
counts will be callable as an attribute instead of a method,

224
00:14:31,198 --> 00:14:35,258
meaning that it won't need parentheses. It is effectively

225
00:14:35,374 --> 00:14:38,966
a getter calls to count in the

226
00:14:38,988 --> 00:14:42,886
init and add methods will actually call this projects. Instead of a

227
00:14:42,908 --> 00:14:46,534
raw variable inside those count property,

228
00:14:46,652 --> 00:14:50,060
the method returns an attribute named underscore count.

229
00:14:50,910 --> 00:14:53,770
The underscore means that this variable should be private.

230
00:14:54,430 --> 00:14:58,662
However, this class hasn't set that variable yet. That variable

231
00:14:58,726 --> 00:15:02,746
is set in the setter method. Setters are optional

232
00:15:02,778 --> 00:15:06,366
for projects. Here, the setter validates that the

233
00:15:06,388 --> 00:15:09,806
value to set is not negative. If the

234
00:15:09,828 --> 00:15:12,720
value is good, then it steps underscore count.

235
00:15:13,190 --> 00:15:16,402
However, if the value is negative, then it raises a

236
00:15:16,456 --> 00:15:20,286
value error. Underscore could is handled internally,

237
00:15:20,398 --> 00:15:23,220
while could is handled publicly as the property.

238
00:15:23,590 --> 00:15:27,414
The getter and setter controls added by the property decorator let

239
00:15:27,452 --> 00:15:31,094
you control how the property is handled. In this

240
00:15:31,132 --> 00:15:34,482
class, the setter protects the property against bad negative

241
00:15:34,546 --> 00:15:37,894
values, so let's use this class.

242
00:15:38,092 --> 00:15:41,900
When an accumulator object is constructed, its initial count is zero.

243
00:15:42,990 --> 00:15:46,460
After adding an amount to the object, the count goes up.

244
00:15:47,150 --> 00:15:50,354
Its count can be directly set to non negative values.

245
00:15:50,502 --> 00:15:54,062
Attempting to set the count directly to a negative value raises that

246
00:15:54,116 --> 00:15:57,294
exception. As expected, protection like that

247
00:15:57,332 --> 00:16:00,654
is great. Python packages also

248
00:16:00,692 --> 00:16:03,522
frequently contain decorators. For example,

249
00:16:03,656 --> 00:16:07,118
Flask is a very popular web micro framework that enables

250
00:16:07,134 --> 00:16:10,500
you to write web APIs with very little Python code.

251
00:16:11,910 --> 00:16:15,286
Here's an example. Hello World Flask app. Taken directly from

252
00:16:15,308 --> 00:16:19,298
the flask Docs online, it imports the flask module,

253
00:16:19,474 --> 00:16:22,646
creates the app, and defines a single endpoint at the

254
00:16:22,668 --> 00:16:25,800
root path that returns the string. Hello World

255
00:16:26,570 --> 00:16:29,754
Flask's app root decorator can turn

256
00:16:29,792 --> 00:16:33,660
any function into a web API endpoint. That's awesome.

257
00:16:34,830 --> 00:16:38,054
Another popular package with decorators is Pytest,

258
00:16:38,182 --> 00:16:40,750
Python's most popular test framework.

259
00:16:41,170 --> 00:16:45,498
One of Pytest's best features is the ability to parameterize test functions

260
00:16:45,594 --> 00:16:49,562
to run from multiple input combinations. Test parameters

261
00:16:49,626 --> 00:16:53,250
empower data driven testing for wider test coverage.

262
00:16:54,070 --> 00:16:58,270
To show how it works, we'll use a simple test for basic arithmetic

263
00:16:58,430 --> 00:17:01,922
test addition. It asserts that a plus

264
00:17:01,976 --> 00:17:05,026
b equals c. The values for

265
00:17:05,048 --> 00:17:07,670
a, b, and c must come from a list of tuples.

266
00:17:08,250 --> 00:17:12,150
For example, one plus two equals three, and so forth.

267
00:17:12,650 --> 00:17:15,970
The Pytest mark parameterized decorator

268
00:17:16,130 --> 00:17:19,000
connects the list of test values to the test function.

269
00:17:19,550 --> 00:17:22,714
It runs the test once for each tuple in the list,

270
00:17:22,832 --> 00:17:27,610
and it injects the tuple values into those test case as function arguments.

271
00:17:28,110 --> 00:17:30,880
The test case will run four times.

272
00:17:31,490 --> 00:17:35,422
Test parameters are a great way to rerun test logic without

273
00:17:35,476 --> 00:17:38,862
repeating test code, so act

274
00:17:38,916 --> 00:17:42,538
now before it's too late. When should you use decorators in

275
00:17:42,564 --> 00:17:46,034
your Python code? Use decorators for

276
00:17:46,152 --> 00:17:49,630
aspects an aspect

277
00:17:49,710 --> 00:17:52,210
is a special crosscutting concern.

278
00:17:53,190 --> 00:17:56,814
There are things that happen in many parts of the code, and they frequently

279
00:17:56,862 --> 00:18:01,170
require repetitive calls. Think about something like logging.

280
00:18:01,330 --> 00:18:04,566
If you want to add logging statements to different parts of the code, then you

281
00:18:04,588 --> 00:18:07,590
need to write multiple logging calls in all those places.

282
00:18:07,930 --> 00:18:11,546
Logging itself is one concern, but it crosscuts the whole

283
00:18:11,568 --> 00:18:15,686
code base. One solution for logging could be to use decorators,

284
00:18:15,798 --> 00:18:19,210
much like we saw earlier with the tracer decorator.

285
00:18:19,890 --> 00:18:22,682
Good use cases for decorators include logging,

286
00:18:22,826 --> 00:18:26,682
profiling, input validation, retries,

287
00:18:26,826 --> 00:18:30,522
and registries. These are things that typically require

288
00:18:30,586 --> 00:18:33,540
lots of extra calls inserted in duplicative ways.

289
00:18:33,910 --> 00:18:37,762
Ask yourself this, could the code wrap something

290
00:18:37,816 --> 00:18:41,006
else? If yes, then you have a good candidate

291
00:18:41,038 --> 00:18:45,730
for a decorator. However, decorators aren't good for all circumstances.

292
00:18:46,730 --> 00:18:49,862
You should avoid decorators for main behaviors because

293
00:18:49,916 --> 00:18:54,040
those should probably be put directly in the body of the decorated function.

294
00:18:54,890 --> 00:18:58,490
Avoid logic that's complicated or has heavy conditionals too,

295
00:18:58,640 --> 00:19:01,530
because simple is better than complex.

296
00:19:02,510 --> 00:19:06,134
You should also try to avoid completely sidestepping the decorated

297
00:19:06,182 --> 00:19:08,620
function that would confuse people.

298
00:19:09,790 --> 00:19:13,962
Ask yourself, this is the code you want to write, the wrapper

299
00:19:14,106 --> 00:19:17,502
or the candy bar itself? Wrappers make

300
00:19:17,556 --> 00:19:20,480
good decorators, but candy bars do not.

301
00:19:21,250 --> 00:19:24,878
I hope you found this infomercial about decorators useful. If you

302
00:19:24,884 --> 00:19:28,554
want to learn more, check out this real Python tutorial named

303
00:19:28,602 --> 00:19:31,646
Primer on Python decorators. It covers everything I

304
00:19:31,668 --> 00:19:34,950
showed here, plus more. Thank you very much

305
00:19:34,980 --> 00:19:38,198
much for listening again. My name is Pandy Knight. I'm the

306
00:19:38,204 --> 00:19:41,366
automation panda and a developer advocate at applitools. If you

307
00:19:41,388 --> 00:19:44,450
like my talk, then please read my blog and follow me on Twitter.

