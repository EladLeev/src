1
00:00:34,690 --> 00:00:37,734
Hello and welcome to this video. It's a pleasure for me to see you here

2
00:00:37,772 --> 00:00:41,494
and what we want to talk about today. Today I want to talk with you

3
00:00:41,532 --> 00:00:45,318
about supply chain security. What are the key points,

4
00:00:45,484 --> 00:00:49,734
what are the tools you can use, how you can protect yourself, and what

5
00:00:49,772 --> 00:00:53,902
you can do to integrate this one into your CI or

6
00:00:53,956 --> 00:00:57,726
in your software development process. By the way, my name is

7
00:00:57,748 --> 00:01:01,146
Sven Ruppert. I'm from Germany and I'm developer advocate for JFrog.

8
00:01:01,258 --> 00:01:04,666
And as you can see, I'm here in the woods. I'm in the swedish tools.

9
00:01:04,698 --> 00:01:08,434
I'm here for a hike, let's say five to six days, and I will

10
00:01:08,472 --> 00:01:11,886
take you on two journeys, first of all to the journey here to the swedish

11
00:01:11,918 --> 00:01:15,058
woods. And the second one is to the supply chain security

12
00:01:15,144 --> 00:01:18,214
topic. But now it's time to start and let's go.

13
00:01:18,332 --> 00:01:22,326
Okay, say, let's start with the topic. One topic is supply chain security.

14
00:01:22,508 --> 00:01:25,874
Supply chain security is a very, very big topic.

15
00:01:25,922 --> 00:01:29,158
And it's not only including software development, and it means it's

16
00:01:29,174 --> 00:01:32,586
including everything from what materials you need, what are

17
00:01:32,608 --> 00:01:36,682
the processes, who's delivering what, third party components and so

18
00:01:36,736 --> 00:01:40,282
on and so on. So the whole supply chain is

19
00:01:40,416 --> 00:01:44,206
under attack right now. And we have different things that are

20
00:01:44,308 --> 00:01:47,966
evolving or coming through this supply chain security over the last

21
00:01:48,068 --> 00:01:51,678
one or two years. One thing is the geopolitics is more

22
00:01:51,684 --> 00:01:54,986
and more influencing these attacks against the supply

23
00:01:55,018 --> 00:01:58,346
chain. Because you can see that if your earlier

24
00:01:58,378 --> 00:02:01,858
days had just an attack because you are a big company,

25
00:02:01,944 --> 00:02:05,666
someone wants to have money from you. Now you are target because you are

26
00:02:05,688 --> 00:02:09,394
a political target. And this is changing the world dramatically.

27
00:02:09,442 --> 00:02:13,026
Because instead of having individuals, you have now groups

28
00:02:13,058 --> 00:02:16,486
or even governments that are attacking you. And if you are

29
00:02:16,588 --> 00:02:20,106
inside the supply chain for one of these big companies that are

30
00:02:20,208 --> 00:02:23,706
not very friendly seen by other governments, it could be that a

31
00:02:23,728 --> 00:02:27,866
government is now attacking you. The same with ransomware. So long

32
00:02:27,888 --> 00:02:31,466
a time ago, ransomware was used more or less to encrypt all

33
00:02:31,488 --> 00:02:34,894
this stuff, okay? And then you can pay money to get this stuff back.

34
00:02:34,932 --> 00:02:38,318
So they have done it just to earn money.

35
00:02:38,404 --> 00:02:41,774
But right now we can see that renderware attacks are more and more

36
00:02:41,812 --> 00:02:45,614
political oriented. It means they never want to see money, they just want

37
00:02:45,652 --> 00:02:49,186
to infect your system. They want to encrypt it, and that's it.

38
00:02:49,288 --> 00:02:52,002
So we have different things that are coming more and more.

39
00:02:52,056 --> 00:02:55,206
And if we are now thinking about that the

40
00:02:55,228 --> 00:02:58,840
big companies spending a lot amount of money,

41
00:02:59,450 --> 00:03:02,854
resources and intellectual property and all this stuff to

42
00:03:02,892 --> 00:03:06,326
harden their own systems means that the tickers are

43
00:03:06,348 --> 00:03:09,862
now going along the supply chain. So the pressure is not against

44
00:03:09,916 --> 00:03:13,754
the final targets anymore. They're going along the supply chain. And means even

45
00:03:13,792 --> 00:03:17,162
if you have a small, medium, business sized company with, let's say

46
00:03:17,216 --> 00:03:20,860
20 people, you're delivering to one of these core companys,

47
00:03:21,310 --> 00:03:24,990
then you are under attack, because it's the weakest point

48
00:03:25,060 --> 00:03:28,542
inside the supply chain. But now we will have a look at the

49
00:03:28,596 --> 00:03:32,442
part of the supply chain that is for us important, the software development

50
00:03:32,506 --> 00:03:36,658
part. Now we want to talk a little bit about the

51
00:03:36,824 --> 00:03:40,226
software version of supply chain security. That means that

52
00:03:40,248 --> 00:03:43,714
we are just looking at what is going on here during

53
00:03:43,752 --> 00:03:46,966
the time we are coding and working.

54
00:03:47,068 --> 00:03:51,158
So I'm sealing now a little bit from this project

55
00:03:51,244 --> 00:03:55,190
Salta and project Salsa is opensource

56
00:03:55,530 --> 00:03:58,822
project from the Lynx foundation. I will explain it a little bit later. What's it?

57
00:03:58,876 --> 00:04:02,194
But I have here this picture what I'm putting

58
00:04:02,252 --> 00:04:05,290
here somewhere in the screen, and it

59
00:04:05,360 --> 00:04:08,854
describes a typical software supply chain for software developers.

60
00:04:08,902 --> 00:04:12,650
So you have, for example, common attacks against it. If you have source code,

61
00:04:12,720 --> 00:04:16,586
make sure that you have always code review, so that nobody can sneak

62
00:04:16,618 --> 00:04:19,886
in with malicious codes. Then this code is going to

63
00:04:19,908 --> 00:04:23,214
this source code version system, git server, or something

64
00:04:23,252 --> 00:04:26,946
like this. How to arm this? Well, you have to make sure that an

65
00:04:26,968 --> 00:04:31,038
administrator will close all ports, maintain it, and administrative rights

66
00:04:31,054 --> 00:04:34,418
are just limited to the person that's needed. That's a good thing.

67
00:04:34,504 --> 00:04:37,970
Then the source code will be grabbed by the CI environment.

68
00:04:38,050 --> 00:04:41,800
What couldn't happen here? Instead of compromising the source code on

69
00:04:42,250 --> 00:04:45,634
this part of the server, the build infrastructure

70
00:04:45,682 --> 00:04:48,998
could be compromised. Or you can have something like fetching the

71
00:04:49,084 --> 00:04:52,506
original source code and overlaying with external source code. So there

72
00:04:52,528 --> 00:04:56,010
is a very common attack. Then the build infrastructure itself,

73
00:04:56,080 --> 00:04:59,734
what can you do? You have to harden it. Again, it's part of administrative

74
00:04:59,782 --> 00:05:03,462
things, and so on and so on. And then the binaries were

75
00:05:03,536 --> 00:05:06,846
pushed to some kind of repositories. So we are

76
00:05:06,868 --> 00:05:11,294
going along from Opensource threads, build threads, to dependency threads inside this

77
00:05:11,492 --> 00:05:15,242
repository where all the dependencies are, or the created binaries,

78
00:05:15,306 --> 00:05:19,182
they will be delivered to production. Again, this is a piece of software,

79
00:05:19,326 --> 00:05:22,850
and here we need support from administrative rights and so on.

80
00:05:22,920 --> 00:05:26,274
So one thing is that all these components between each

81
00:05:26,312 --> 00:05:29,778
other should be in some kind of zero trust environment

82
00:05:29,874 --> 00:05:33,542
to make sure that nobody can sneak in with this one

83
00:05:33,596 --> 00:05:37,698
on the other side. We have now two things left. If we are focusing,

84
00:05:37,794 --> 00:05:41,206
what can we do as a software developer, we have source

85
00:05:41,238 --> 00:05:44,746
code, we are creating that is moved along the pipeline will

86
00:05:44,768 --> 00:05:48,410
be created or will be transformed to binaries. And then we have

87
00:05:48,480 --> 00:05:51,754
the binaries we are creating and all dependencies.

88
00:05:51,882 --> 00:05:55,278
So this is more or less what we have in our hands.

89
00:05:55,444 --> 00:05:58,910
Source code, binaries and all the rest is something

90
00:05:58,980 --> 00:06:04,090
that is infrastructure and secured by infrastructure.

91
00:06:04,170 --> 00:06:07,730
Related topics I want to talk a little bit about the project where I

92
00:06:07,800 --> 00:06:11,506
got this graphic from, and it's a project SalSA SLSA and

93
00:06:11,528 --> 00:06:14,962
this is part of the Linux foundation. It's an open source project and

94
00:06:15,016 --> 00:06:18,386
it's a documentation project. So there is no implementation or whatever.

95
00:06:18,488 --> 00:06:21,874
It's really a documentation project. And this documentation

96
00:06:21,922 --> 00:06:25,286
project is organized by

97
00:06:25,388 --> 00:06:29,722
individual security experts some companies are working through.

98
00:06:29,856 --> 00:06:34,342
But the main thing is that they want to collect

99
00:06:34,406 --> 00:06:38,106
all the best practices around supply chain security to

100
00:06:38,128 --> 00:06:42,374
make it accessible for people that are not directly

101
00:06:42,422 --> 00:06:45,822
coming from the security area. So that you can start reading. So we have

102
00:06:45,876 --> 00:06:49,242
two main topics in this project. The first topic

103
00:06:49,306 --> 00:06:52,702
is the levels. The levels from zero to four will

104
00:06:52,756 --> 00:06:56,002
describe how you can improve step by step

105
00:06:56,056 --> 00:06:59,790
your supply chain with start using CI environment,

106
00:06:59,870 --> 00:07:03,666
using audits and so on and so on. So if you want

107
00:07:03,688 --> 00:07:07,374
to know more about these levels and project Saltatev,

108
00:07:07,422 --> 00:07:10,806
I have a dedicated YouTube video on my channel in German as well as in

109
00:07:10,828 --> 00:07:14,322
English, though there I will go through all these details.

110
00:07:14,386 --> 00:07:18,086
But for you it's important to know there are these different levels and then you

111
00:07:18,108 --> 00:07:21,850
can calibrate yourself where you are and what would be the next

112
00:07:21,920 --> 00:07:25,642
logical or good step to increase your security. The other

113
00:07:25,696 --> 00:07:29,526
part of this project is a documentation about the common attacks,

114
00:07:29,558 --> 00:07:32,942
source threads, build threads, dependency threads and so on. And then

115
00:07:32,996 --> 00:07:37,134
you will have description how this attack is going on,

116
00:07:37,252 --> 00:07:41,102
prominent examples of it, what happened, what it can do against it and

117
00:07:41,156 --> 00:07:44,654
so on. So you have this levels and you have the description

118
00:07:44,702 --> 00:07:48,354
about this attacks itself. And altogether is a very good

119
00:07:48,392 --> 00:07:51,970
documentation to harm your own environment and using

120
00:07:52,040 --> 00:07:55,506
this as some kind of guideline. This project itself

121
00:07:55,608 --> 00:08:00,422
is currently in alpha state. We are talking here about mid of 2022.

122
00:08:00,556 --> 00:08:04,150
But even in this alpha state the project is

123
00:08:04,300 --> 00:08:07,830
really really good. So I really recommend having a look there

124
00:08:07,900 --> 00:08:11,130
and try it out. We spoke about the project

125
00:08:11,200 --> 00:08:15,066
Salta, but there is an implementation. It's a Linux project as

126
00:08:15,088 --> 00:08:18,474
well. And this is the project Posia Persia is an alpha state

127
00:08:18,512 --> 00:08:22,030
as well. So JFrog started this

128
00:08:22,180 --> 00:08:26,014
decentralized package management and this is covering exactly the

129
00:08:26,052 --> 00:08:29,406
stage from we started building until we are

130
00:08:29,428 --> 00:08:33,358
delivering this binary. What's excluded is the security

131
00:08:33,444 --> 00:08:37,374
of the source code itself. It's not helping you to have code reviews

132
00:08:37,422 --> 00:08:40,914
or non compromised source code, but it will start helping you

133
00:08:40,952 --> 00:08:44,370
with building this stuff and distributing it.

134
00:08:44,440 --> 00:08:48,178
So we have different things here. This project Persia is more or

135
00:08:48,184 --> 00:08:52,114
less this decentralized package management system for maven Docker

136
00:08:52,162 --> 00:08:55,382
and so on and so on. So what we have is we have this build

137
00:08:55,436 --> 00:08:58,978
layer. So we are pushing to one of those peer to peer nodes

138
00:08:59,154 --> 00:09:02,922
URL where the opensource code is in a commit reference. Then it will

139
00:09:02,976 --> 00:09:06,362
grab this on different nodes source code and start building

140
00:09:06,416 --> 00:09:09,562
it locally. After this build is done they

141
00:09:09,616 --> 00:09:13,326
start sharing information about how

142
00:09:13,348 --> 00:09:16,906
big is the binary and the fingerprints

143
00:09:16,938 --> 00:09:21,360
and all this stuff. And if all they are the same, you can imagine that

144
00:09:22,130 --> 00:09:25,442
it's not easy to compromise in a peer to peer system exactly.

145
00:09:25,496 --> 00:09:29,186
The nodes that are randomly selected for this build. So the binary is the

146
00:09:29,208 --> 00:09:33,406
self after this, then that binary will be transported

147
00:09:33,438 --> 00:09:37,010
to the distribution layer and the distribution layer is then the peer to peer network

148
00:09:37,090 --> 00:09:41,526
where you're requesting exactly this. So we have different things like for

149
00:09:41,548 --> 00:09:45,366
example external reference binaries are not

150
00:09:45,388 --> 00:09:48,898
so secure as inside the posia network. Build binaries.

151
00:09:48,994 --> 00:09:52,378
We have gateways to Docker hub in maven central as

152
00:09:52,464 --> 00:09:56,106
authorized nodes and so on and so on. So it's a

153
00:09:56,128 --> 00:09:59,530
bigger project just right now.

154
00:09:59,600 --> 00:10:02,858
In the beginning, the first reference implementations are done.

155
00:10:02,944 --> 00:10:06,206
So have a look at Persia IO and if you

156
00:10:06,228 --> 00:10:09,966
want to know more about it on my YouTube channel you will find the

157
00:10:09,988 --> 00:10:13,566
video exactly about this project. Okay, now we want

158
00:10:13,588 --> 00:10:17,394
to talk a little bit about the four main pillars of security testing and

159
00:10:17,432 --> 00:10:21,074
protection. And this is something where we talk

160
00:10:21,112 --> 00:10:24,254
about zest and dust is and RaSP.

161
00:10:24,382 --> 00:10:27,926
So I want to start with the topic zast. Zest is

162
00:10:27,948 --> 00:10:32,514
something that is a static application security protection.

163
00:10:32,642 --> 00:10:36,134
So that means you start scanning all

164
00:10:36,172 --> 00:10:38,962
parts of your application binaries, configuration,

165
00:10:39,026 --> 00:10:42,454
source code and all this. But the application is not running. So you can start

166
00:10:42,492 --> 00:10:46,598
with zast immediately with the first line of code. You can analyze

167
00:10:46,614 --> 00:10:49,926
it. But what you're missing is a dynamic context because you're in the

168
00:10:49,968 --> 00:10:54,320
static semantics of this. But you can scan 100%

169
00:10:54,690 --> 00:10:58,270
of this part, sorry, all parts,

170
00:11:00,130 --> 00:11:03,466
you have the access, you need access to all components,

171
00:11:03,498 --> 00:11:06,834
otherwise you can't scan. But you can scan immediately with

172
00:11:06,872 --> 00:11:10,866
the first step. The next thing, if you are not in the static application security

173
00:11:10,968 --> 00:11:14,258
context is a dynamic one. And the dynamic application

174
00:11:14,344 --> 00:11:17,810
security testing means

175
00:11:17,960 --> 00:11:21,846
that we are now able to run the application. So we need

176
00:11:21,948 --> 00:11:25,126
to have something running. It could be a test system, it could be

177
00:11:25,148 --> 00:11:28,806
integration, staging, whatever. But if we are running this one now, we are

178
00:11:28,828 --> 00:11:32,794
looking from outside like an hacker this attacks mostly or this

179
00:11:32,832 --> 00:11:36,134
testing is mostly done with most common vulnerabilities like SQL

180
00:11:36,182 --> 00:11:39,366
injection that you try to hack from outside. Here you don't

181
00:11:39,398 --> 00:11:43,022
need knowledge about the internal technology, you just try

182
00:11:43,076 --> 00:11:47,134
to hack the system over API from outside.

183
00:11:47,332 --> 00:11:50,814
The good thing is that you don't need to know about the internal technology.

184
00:11:50,932 --> 00:11:54,366
The bad thing is that you are not able to test 100% of

185
00:11:54,388 --> 00:11:57,726
the systems. You can just indirectly test the most parts

186
00:11:57,758 --> 00:12:00,866
of the system. But mostly it shows that you are not

187
00:12:00,888 --> 00:12:04,766
able to scan everything because you are just able to scan everything that's reachable

188
00:12:04,798 --> 00:12:08,342
by this API. And then we have

189
00:12:08,396 --> 00:12:12,182
the need that something is running and you must be able

190
00:12:12,316 --> 00:12:16,134
to address this. So mostly you have this cloud based providers or you must be

191
00:12:16,172 --> 00:12:19,126
able to provide this attack information by yourself.

192
00:12:19,228 --> 00:12:22,754
So this is dynamic application security testing. How to combine

193
00:12:22,802 --> 00:12:26,314
base or how to get rid of the weak parts of the

194
00:12:26,352 --> 00:12:29,642
different testing mechanisms. This is called is,

195
00:12:29,696 --> 00:12:33,374
it's interactive application security testing. And this means that you try

196
00:12:33,412 --> 00:12:37,150
to do both. You can see it like in security

197
00:12:37,300 --> 00:12:41,018
debugging. So you are ramping

198
00:12:41,034 --> 00:12:44,618
up the application, you are taking from outside, you're analyzing

199
00:12:44,714 --> 00:12:47,906
inside the application, what's going on, and then you can start modifying the

200
00:12:47,928 --> 00:12:51,426
attack vector. You need the knowledge about the technology, the attack vectors, how to

201
00:12:51,448 --> 00:12:55,234
do this, the tool stack and so on. The big challenge here

202
00:12:55,272 --> 00:12:59,282
is that for dust and dust you can just buy tools.

203
00:12:59,346 --> 00:13:02,934
But for ISt you need to know a lot of stuff by yourself. So this

204
00:13:02,972 --> 00:13:06,534
is mostly not for the beginners. It's something where

205
00:13:06,572 --> 00:13:10,918
you need really trained and skilled people from the security environment

206
00:13:11,014 --> 00:13:14,714
so that they are doing something. This is useful. Otherwise you are testing something

207
00:13:14,832 --> 00:13:18,154
and you think it's secure and it's not. Okay,

208
00:13:18,272 --> 00:13:21,926
so IST is something that is the combination of zust

209
00:13:21,958 --> 00:13:25,646
and dust, but you need high skilled people to do this by

210
00:13:25,668 --> 00:13:28,926
yourself. Now we are coming to the field where we are talking about

211
00:13:29,028 --> 00:13:32,766
runtime protection. It's called Rasp runtime application security

212
00:13:32,868 --> 00:13:36,746
protection. And as you can see, it's not testing anymore, it's a protection.

213
00:13:36,778 --> 00:13:40,290
And this protection, it means that we are just able to do it

214
00:13:40,440 --> 00:13:43,586
on production environment. So you're not able

215
00:13:43,608 --> 00:13:47,506
to do it in fields like and staging or testing

216
00:13:47,538 --> 00:13:51,254
environment. You need production. So what's mostly going on here

217
00:13:51,292 --> 00:13:54,738
is that you have an agent. This agent is manipulating

218
00:13:54,914 --> 00:13:58,134
like a performance tools application itself and try to

219
00:13:58,172 --> 00:14:02,582
analyze what's going on into the system. Do we have suspicious

220
00:14:02,646 --> 00:14:06,634
malicious activities and so on. And with machine learning in real

221
00:14:06,672 --> 00:14:10,574
time, you try to identify if there is an ongoing attack and

222
00:14:10,612 --> 00:14:14,154
if so, you have two choices, shutting down the system automatically

223
00:14:14,202 --> 00:14:17,360
or alerting. So that's all but

224
00:14:17,810 --> 00:14:21,498
having now dust. Dust is and RaSp,

225
00:14:21,594 --> 00:14:25,214
where should you focus? RasP is just the last thing.

226
00:14:25,332 --> 00:14:28,626
It makes no sense to trust only RASP. So it's an

227
00:14:28,648 --> 00:14:32,674
additional thing is you need very high skilled and trained people.

228
00:14:32,792 --> 00:14:36,614
So mostly it's not right. If you want to start dust, you need

229
00:14:36,652 --> 00:14:39,766
something that's already running, isn't good at on.

230
00:14:39,868 --> 00:14:43,862
But the best thing, what I would recommend is start

231
00:14:43,916 --> 00:14:47,618
with toolings in static application security testing,

232
00:14:47,634 --> 00:14:52,006
because you can start immediately with the first line of code if

233
00:14:52,028 --> 00:14:55,194
you start with dust. So scanning all this stuff, you can

234
00:14:55,232 --> 00:14:58,902
scan different things, you can scan your source code, you can scan configurations,

235
00:14:58,966 --> 00:15:02,614
you can scan third party components. And what should you start scanning

236
00:15:02,662 --> 00:15:06,174
to say the juice. If you're looking at how many lines of code

237
00:15:06,212 --> 00:15:10,042
you're writing and how many lines of code you are adding via dependency

238
00:15:10,186 --> 00:15:13,342
in the most project environments, it's in a way

239
00:15:13,396 --> 00:15:17,546
that even if you have hundreds, thousands of lines of self

240
00:15:17,588 --> 00:15:20,782
written code, you will have millions of lines

241
00:15:20,846 --> 00:15:24,578
inside your dependencies. So inside the application you have the

242
00:15:24,584 --> 00:15:27,702
application and a huge amount of dependencies. Even there.

243
00:15:27,756 --> 00:15:30,886
The dependencies are bigger than the source code you

244
00:15:30,908 --> 00:15:34,722
are writing, the operating system you're just writing a few lines of configuration

245
00:15:34,786 --> 00:15:38,354
rest are dependencies. Docker statement even starts with an from statement,

246
00:15:38,402 --> 00:15:42,026
helm charts and so on and so on and so on. And don't forget the

247
00:15:42,048 --> 00:15:46,186
binaries of your CI environment, of your dev tools and

248
00:15:46,208 --> 00:15:50,006
so on. So the whole dev stacks is a bunch

249
00:15:50,038 --> 00:15:52,798
of binaries as well. So what should you focus on?

250
00:15:52,884 --> 00:15:56,366
Opensource of binaries binaries, because these are the

251
00:15:56,388 --> 00:16:00,446
low hanging fridates. So big question is if

252
00:16:00,468 --> 00:16:03,442
we should focus on binaries where the best place to store them.

253
00:16:03,496 --> 00:16:06,782
And it makes sense to have all binaries

254
00:16:06,926 --> 00:16:10,786
in one central place because then you can use

255
00:16:10,888 --> 00:16:14,222
exactly the same scanning mechanism for all layers.

256
00:16:14,286 --> 00:16:17,886
So with artifactory there we have all these different dependency managers,

257
00:16:17,918 --> 00:16:21,346
I may have no get, but Debian as well as Docker

258
00:16:21,378 --> 00:16:24,918
and so on. So if you are just collecting binaries for your own

259
00:16:25,084 --> 00:16:29,014
project, it's fine, but why not collecting the same or

260
00:16:29,052 --> 00:16:32,366
over the same gateway, the binaries for your network infrastructure,

261
00:16:32,418 --> 00:16:35,882
Linux service and so on and so on. Because then you have the central place

262
00:16:35,936 --> 00:16:39,786
where all binaries are. And then you can apply with security rule there with security

263
00:16:39,888 --> 00:16:43,286
scanners, and you need a scanner that is aware of metadata.

264
00:16:43,318 --> 00:16:46,942
I will cover this in a few minutes. But the main thing is having

265
00:16:46,996 --> 00:16:51,226
one central place and even if you're building stuff, don't grab it directly

266
00:16:51,258 --> 00:16:55,026
from Docker hub or maven central because then you have no control

267
00:16:55,128 --> 00:16:58,578
about what is allowed to be used,

268
00:16:58,664 --> 00:17:01,954
fetched and how many times, what version and

269
00:17:01,992 --> 00:17:05,762
so on and so on. Say a single place for binaries where all stuff

270
00:17:05,816 --> 00:17:09,302
is coming through. Now the big question, scanning binaries. A lot of

271
00:17:09,436 --> 00:17:13,110
companies are saying we are scanning binaries, but what is the biggest difference?

272
00:17:13,260 --> 00:17:16,914
The big difference here is that if you have the binary

273
00:17:16,962 --> 00:17:20,934
management and the knowledge of all dependency managers

274
00:17:21,062 --> 00:17:25,014
and then you're connecting with a scanner. In our case it's artifactory,

275
00:17:25,062 --> 00:17:28,362
where all the binaries are, where the metadata is

276
00:17:28,416 --> 00:17:32,026
in, and then x ray is connected to artifactory. Now we are scanning it.

277
00:17:32,048 --> 00:17:35,466
So if you're just scanning one binary and then you can identify what's a binary,

278
00:17:35,498 --> 00:17:38,458
but you are missing information. Like is there a dependency,

279
00:17:38,554 --> 00:17:42,430
transitive dependencies, do we have compiled test

280
00:17:42,500 --> 00:17:45,726
scope, runtime, scope, dynamic link, static linked and so

281
00:17:45,748 --> 00:17:49,026
on and so on. So a lot of metadata that is missing if you

282
00:17:49,048 --> 00:17:52,242
are just looking at boundaries. And this is a big difference to

283
00:17:52,296 --> 00:17:56,114
a lot of other solutions. And we can focus on

284
00:17:56,152 --> 00:17:59,438
the whole tech stack, maven, nuget,

285
00:17:59,534 --> 00:18:02,822
Linux, Debian, repositories, Docker and so on and so on.

286
00:18:02,876 --> 00:18:06,210
So this is a big advantage if you have not only the binary

287
00:18:06,290 --> 00:18:10,310
but as well the metadata available. And this is exactly

288
00:18:10,380 --> 00:18:14,282
what we have with artifactory and x ray. Next thing, talking about

289
00:18:14,416 --> 00:18:17,958
shift left or what's the best place to scan. So we have now the possibilities

290
00:18:18,054 --> 00:18:21,526
to have access to the metadata. We have the possibility to scan

291
00:18:21,558 --> 00:18:24,862
binaries. But what is a good place to scan? It could be,

292
00:18:24,916 --> 00:18:28,958
for example, the CI environment. The CI environment is a security

293
00:18:29,044 --> 00:18:33,614
gateway for everything. So shift left into the CI means

294
00:18:33,732 --> 00:18:37,474
that you are scanning with every build, with every run and so on

295
00:18:37,512 --> 00:18:40,994
and so on. That's necessary. There's a good place to

296
00:18:41,032 --> 00:18:43,742
scan for security reasons or vulnerabilities,

297
00:18:43,806 --> 00:18:47,446
malicious packages and all this stuff. And this is

298
00:18:47,468 --> 00:18:49,810
more or less a machine gateway.

299
00:18:49,970 --> 00:18:53,318
But is this exactly the place where you should

300
00:18:53,404 --> 00:18:56,582
start with scanning? Is this a place that is the

301
00:18:56,636 --> 00:19:00,374
earliest place that makes sense to scan for vulnerabilities

302
00:19:00,422 --> 00:19:03,734
and compliance issues? I'm not sure about it because the CI

303
00:19:03,782 --> 00:19:06,966
environment is somewhere along the supply chain,

304
00:19:07,078 --> 00:19:10,726
somewhere along this production environment. And we have a bunch

305
00:19:10,758 --> 00:19:14,286
of other places where it makes sense to scan as well. I want

306
00:19:14,308 --> 00:19:17,518
to go a little bit into the history and then you will understand

307
00:19:17,604 --> 00:19:20,894
why the CI environment should not be the only part

308
00:19:20,932 --> 00:19:25,042
where you start scanning for security and vulnerabilities. Security issues.

309
00:19:25,176 --> 00:19:29,246
It's called the SolarWinds hack. I'm not going into all details

310
00:19:29,278 --> 00:19:32,914
of the SolarWinds hack, but the main thing is that this

311
00:19:32,952 --> 00:19:36,900
company that's creating this Orion platform, having 300,000

312
00:19:37,290 --> 00:19:41,074
customers and every customer is managing the network infrastructure

313
00:19:41,122 --> 00:19:44,678
with this tool, and they have NCI environment to build their product,

314
00:19:44,764 --> 00:19:48,466
and they have this automatic update cycle, so that with every new release,

315
00:19:48,498 --> 00:19:52,060
it's automatically pushed to all the customers and so on. What happened?

316
00:19:52,430 --> 00:19:55,866
Naga Group broke into this system and they are not

317
00:19:55,968 --> 00:19:59,926
changing or modifying or stealing data or whatever. They went straight

318
00:19:59,958 --> 00:20:03,514
to the CI environment and modified the CI environment. And the CI

319
00:20:03,562 --> 00:20:06,970
environment then built with every cycle and compromised

320
00:20:07,050 --> 00:20:11,018
binary. This compromised binary was then delivered by this automatic

321
00:20:11,114 --> 00:20:14,290
update to all these customers. So after

322
00:20:14,360 --> 00:20:17,922
this was done, it took one or three days,

323
00:20:17,976 --> 00:20:21,378
just a few days, and they infected over 15,000

324
00:20:21,464 --> 00:20:25,150
customers. 15,000 customers means not 15,000 servers.

325
00:20:25,230 --> 00:20:29,566
No, they mean 15,000 networks.

326
00:20:29,678 --> 00:20:33,638
And 15,000 networks infected is a huge thing that even the

327
00:20:33,724 --> 00:20:37,446
US president, Mr. Biden, took this as something

328
00:20:37,548 --> 00:20:40,838
to say. Okay, we have to change something. I will come to this a

329
00:20:40,844 --> 00:20:44,186
little bit later, but what does it mean for us? For us, it means we

330
00:20:44,208 --> 00:20:47,830
have now two attacks. Where's the attacks? Or we have to protect ourselves

331
00:20:47,910 --> 00:20:51,526
that we are not consuming malicious or vulnerable

332
00:20:51,638 --> 00:20:55,342
stuff, and we have to make sure that we are not pushing this

333
00:20:55,396 --> 00:20:58,718
stuff out so that we are not distributing it.

334
00:20:58,804 --> 00:21:02,430
And these two different ways we have to protect means

335
00:21:02,500 --> 00:21:05,978
that we should be aware of all the security related topics,

336
00:21:06,074 --> 00:21:09,890
not only inside the CR environment. We have to go a few

337
00:21:09,960 --> 00:21:13,458
steps earlier and start with this. But now let's talk a

338
00:21:13,464 --> 00:21:16,958
little bit around this SolarWinds hack and how it's affected

339
00:21:17,054 --> 00:21:20,858
our way of developing. Okay, now what happened after the SolarWinds hack?

340
00:21:20,894 --> 00:21:24,082
So Mr. Biden had this executive order of cybersecurity,

341
00:21:24,146 --> 00:21:27,202
and it means that every software that is operated,

342
00:21:27,266 --> 00:21:31,670
run, owned, or whatever used by the US government must fulfill

343
00:21:31,750 --> 00:21:34,954
this requirement of NaSbOM. SBoM itself is a

344
00:21:34,992 --> 00:21:38,790
software builds of material. It means the full list of all ingredients

345
00:21:38,870 --> 00:21:42,022
that are used to build this binary. Practical.

346
00:21:42,086 --> 00:21:45,214
It means if you have a binary and you have all dependencies, and then you

347
00:21:45,252 --> 00:21:48,858
need a list of all dependencies with version name fingerprint.

348
00:21:48,954 --> 00:21:52,814
So that's half the fullest. We know this at JFrog since a long time.

349
00:21:52,852 --> 00:21:56,654
That's important not only after the SolarWinds hack, but we called it built

350
00:21:56,692 --> 00:22:00,258
info. Build info is more or less a superset of sbom, because you

351
00:22:00,264 --> 00:22:03,714
can generate this S bomb out of it, it's just part this S

352
00:22:03,752 --> 00:22:07,606
bomb. But the build info, you will find it inside the platform

353
00:22:07,788 --> 00:22:11,814
near the art factory repositories. It's more or less for

354
00:22:11,852 --> 00:22:15,142
every binary that you are creating, you're collecting information like

355
00:22:15,196 --> 00:22:17,990
environment, variables, dependencies,

356
00:22:18,890 --> 00:22:22,106
whatever date, time, agent name,

357
00:22:22,208 --> 00:22:26,090
all this stuff. Okay, so this information is pushed and stored together

358
00:22:26,160 --> 00:22:29,622
with a binary inside art factory. So you have the whole context

359
00:22:29,686 --> 00:22:33,614
of this creation for this binary. And that means later you

360
00:22:33,652 --> 00:22:37,230
have some postmortem analyze possibilities so that you can

361
00:22:37,300 --> 00:22:40,670
identify. Oh, all builds on agent three is something different.

362
00:22:40,740 --> 00:22:44,254
You can have divs and so on and so on. The good thing is that

363
00:22:44,292 --> 00:22:48,190
not only the immutable information is there, you have this actual vulnerability

364
00:22:48,270 --> 00:22:51,454
information as well. So if you built yesterday a binary

365
00:22:51,582 --> 00:22:54,414
and this binary is passing to production,

366
00:22:54,542 --> 00:22:58,898
and tomorrow you know there is a vulnerability because the vulnerability database

367
00:22:58,994 --> 00:23:01,958
just had an update, so we know it now,

368
00:23:02,044 --> 00:23:05,794
then you can see there, oh, here's a vulnerability, it's affecting

369
00:23:05,842 --> 00:23:09,542
us. This binary is used in this helm chart, in this production environment,

370
00:23:09,606 --> 00:23:13,850
whatever, without scanning production. You have this information and you're never

371
00:23:13,920 --> 00:23:17,642
building binaries twice. This is the build

372
00:23:17,696 --> 00:23:21,734
info, a superset of S bomb if the CI environment

373
00:23:21,782 --> 00:23:24,926
is not the earliest possible thing. So what should be the

374
00:23:24,948 --> 00:23:28,414
next one? What I can recommend is for example, use your

375
00:23:28,452 --> 00:23:31,966
ide. So inside your ide you have the possibility to

376
00:23:31,988 --> 00:23:35,918
scan all dependencies as well. And this is done by the IDE plugin.

377
00:23:36,014 --> 00:23:39,906
The IDE plugin itself is free from JFrog and

378
00:23:39,928 --> 00:23:43,186
you can integrate in intellij vs. Code, eclipse and so

379
00:23:43,208 --> 00:23:47,342
on. And then you're connecting with this IDE plugin to your artifactory. In xray instance,

380
00:23:47,486 --> 00:23:50,646
what happens is that if you're for example, adding the

381
00:23:50,668 --> 00:23:53,394
first dependency to your pom file,

382
00:23:53,522 --> 00:23:56,966
then this information will be transferred to x ray. Xray will give you the

383
00:23:56,988 --> 00:24:00,618
whole dependency tree together with the vulnerability information.

384
00:24:00,704 --> 00:24:04,342
So you will have straight after adding a dependency,

385
00:24:04,486 --> 00:24:07,590
all the knowledge about transitive dependencies,

386
00:24:07,670 --> 00:24:11,162
vulnerabilities, possible fixed versions and so on

387
00:24:11,216 --> 00:24:14,334
and so on. And this information will include for example,

388
00:24:14,452 --> 00:24:18,366
references to cves and all the other stuff

389
00:24:18,468 --> 00:24:22,766
that you need to decide if this one is critical for you. But this

390
00:24:22,788 --> 00:24:26,910
is way earlier than a complaining CI environment.

391
00:24:27,070 --> 00:24:30,494
Now we have this IDE plugin, but there are several

392
00:24:30,542 --> 00:24:34,334
ways to get to this information as well, and one is a command line interface.

393
00:24:34,382 --> 00:24:37,974
So even if you have no IDE started so far,

394
00:24:38,092 --> 00:24:42,098
you can use a command line interface to scan the project. So you're cloning

395
00:24:42,114 --> 00:24:46,594
a git repository chain into this repository and start JFrog

396
00:24:46,642 --> 00:24:50,170
audit. And then you will get a list

397
00:24:50,240 --> 00:24:53,466
of all vulnerability skins. And the

398
00:24:53,488 --> 00:24:56,886
skin is based on the project infrastructure. So if there's a poem XML,

399
00:24:56,918 --> 00:25:00,282
it will give you all the things or some other

400
00:25:00,336 --> 00:25:03,934
dependency manager, so it will detect the dependency manager. So the main thing

401
00:25:03,972 --> 00:25:07,226
is that you can now scan on command line projects,

402
00:25:07,258 --> 00:25:10,670
but on the other side you can scan binaries as well. So if you have

403
00:25:10,820 --> 00:25:14,446
local created Docker image, one thing what

404
00:25:14,468 --> 00:25:18,094
you can do is you can use the Docker plugins or docker desktop plugins

405
00:25:18,142 --> 00:25:21,154
so that you're scanning the self created docker image there.

406
00:25:21,272 --> 00:25:25,150
Or you can export this docker image so that you have this tar

407
00:25:25,310 --> 00:25:29,046
or this archive what you created and then scanning this one. You can do it

408
00:25:29,068 --> 00:25:31,954
with jar, with docker images,

409
00:25:32,002 --> 00:25:35,462
with whatever. So you can scan this and then you will get the full list

410
00:25:35,516 --> 00:25:39,462
of all vulnerabilities. And this report you can push into

411
00:25:39,516 --> 00:25:42,986
the section on demand scanning. On demand scanning means that

412
00:25:43,088 --> 00:25:46,394
this scan will be stored inside artifactory and you can

413
00:25:46,432 --> 00:25:49,994
share this information with your colleagues so that you can work

414
00:25:50,032 --> 00:25:53,454
on this to improve this docker image and so on. The good thing here is

415
00:25:53,492 --> 00:25:56,926
that you can create all this stuff without polluting the

416
00:25:56,948 --> 00:26:00,126
CI environment or using opensource there because you're grabbing the

417
00:26:00,148 --> 00:26:04,034
stuff, building it, scanning it locally, pushing the report

418
00:26:04,232 --> 00:26:07,886
to this central place where you can have this as an audit

419
00:26:07,918 --> 00:26:11,780
reference or whatever, and then you can work

420
00:26:12,310 --> 00:26:15,570
with the full flexibility. What you need before you're using

421
00:26:15,640 --> 00:26:19,074
resources inside the CI environment or stuff is bleeding

422
00:26:19,122 --> 00:26:23,826
inside the repositories. You want to hold clean, same CLI

423
00:26:23,938 --> 00:26:27,970
and on demand scanning is cool stuff because you can do it straight

424
00:26:28,130 --> 00:26:31,930
during your prototyping. If you're scanning for vulnerabilities, you will find

425
00:26:32,000 --> 00:26:35,386
one thing quite fast and often that is in

426
00:26:35,408 --> 00:26:38,538
CVSS score. So I'm not going into all details what

427
00:26:38,544 --> 00:26:42,462
a CVSS score is, because on my YouTube channel you will find different videos

428
00:26:42,516 --> 00:26:46,010
about CVSS metrics and how to use it within CVSS

429
00:26:46,090 --> 00:26:49,866
calculator to adjust this to your environmental metrics

430
00:26:49,898 --> 00:26:53,658
or with environmental metrics to your environment, but the CVSS

431
00:26:53,754 --> 00:26:57,518
values. This is something you should be aware of. And inside the JFrog

432
00:26:57,534 --> 00:27:01,038
platform you will find not only the CBSS values,

433
00:27:01,214 --> 00:27:04,594
CBS two, three one. You will find the

434
00:27:04,632 --> 00:27:08,374
basic metrics as well. So you have two things you should

435
00:27:08,492 --> 00:27:11,942
check out if there's a CVE, if there's a CVE for

436
00:27:11,996 --> 00:27:15,538
vulnerability, check out that you get additional information. So if you're

437
00:27:15,554 --> 00:27:20,114
clicking inside the platform on this vulnerability, you will get mitigation,

438
00:27:20,162 --> 00:27:23,870
remediation information. You will get reference, Zuger, mutation,

439
00:27:23,970 --> 00:27:27,690
all this stuff. And you can use this CVE to search inside

440
00:27:27,760 --> 00:27:31,578
Google, for example, for additional information. On the other side

441
00:27:31,744 --> 00:27:35,434
you will get the CVSS value and the basic metrics. And the basic

442
00:27:35,482 --> 00:27:39,374
metrics, in short words, is more or less the worst case description of this

443
00:27:39,412 --> 00:27:43,090
vulnerability. And there you can see if this is important

444
00:27:43,160 --> 00:27:47,250
for you. For example, if this is a high CVSS value

445
00:27:47,320 --> 00:27:51,940
because if the vulnerability could be

446
00:27:52,390 --> 00:27:55,986
misused or could be applied over a public network if

447
00:27:56,008 --> 00:27:59,782
connected but your system is air gapped, then it can address this.

448
00:27:59,836 --> 00:28:03,426
But this is something that you should start reading this basic

449
00:28:03,458 --> 00:28:07,986
metrics and then transfer it or transform it with environmental

450
00:28:08,018 --> 00:28:11,714
metrics. I have a dedicated talk about using the CVS

451
00:28:11,762 --> 00:28:15,926
calculator with this environmental metrics to scale the CBS values

452
00:28:15,958 --> 00:28:19,994
for your needs. It's a little bit too much for this talk, but have

453
00:28:20,032 --> 00:28:23,578
this in mind that you have all this information. So wherever you're scanning,

454
00:28:23,674 --> 00:28:27,246
have a look at the CVSS score. Have a look if there's a

455
00:28:27,268 --> 00:28:30,814
CVE number to get more information and decide if this

456
00:28:30,852 --> 00:28:34,562
vulnerability is critical for you. Yes or no?

457
00:28:34,696 --> 00:28:38,222
Okay. Finally, I found my place for tonight.

458
00:28:38,366 --> 00:28:41,538
Perfect. So it was a long hike, definitely a

459
00:28:41,544 --> 00:28:45,950
long hike here in the swedish woods. But I found this half island

460
00:28:46,110 --> 00:28:49,590
and there's a perfect place to swim a bit.

461
00:28:49,740 --> 00:28:53,222
And there I will have my camp, I will build up

462
00:28:53,276 --> 00:28:57,094
there, my camp for tonight and that's it. But we

463
00:28:57,132 --> 00:29:00,066
had a good talk about desegobs,

464
00:29:00,178 --> 00:29:04,518
about dust, dust, rasp and all this stuff about toolings

465
00:29:04,614 --> 00:29:08,010
and what you can do. And by the way, if you want to try out,

466
00:29:08,080 --> 00:29:11,498
you have different possibilities. First of all, if you want to contact me,

467
00:29:11,584 --> 00:29:15,190
use Twitter, LinkedIn. Don't use email, it's a disaster.

468
00:29:15,270 --> 00:29:18,158
If you want to have more like this, check out my YouTube channel. I have

469
00:29:18,164 --> 00:29:21,086
a german one, I have an english one. Make sure that you are selecting the

470
00:29:21,108 --> 00:29:24,930
right one for you and then you will find a bunch of this

471
00:29:25,000 --> 00:29:28,994
auto style it related cybersecurity stuff. That's perfect.

472
00:29:29,112 --> 00:29:32,702
Otherwise, well, webinars workshops,

473
00:29:32,766 --> 00:29:36,274
if you want to have hands on, they are for free. Go to JFork under

474
00:29:36,312 --> 00:29:39,574
webinars and then you can find a webinar, you can register for

475
00:29:39,612 --> 00:29:43,094
workshop and then Webase can have hands on on

476
00:29:43,132 --> 00:29:47,106
this cybersecurity stuff. Otherwise, whatever day and time you're

477
00:29:47,138 --> 00:29:50,646
watching this, have a nice day, have the rest of your

478
00:29:50,668 --> 00:29:54,646
day. Relax. Whatever is necessary, I will do the same. For me,

479
00:29:54,668 --> 00:29:57,382
the day is done. That's the last recording for today.

480
00:29:57,516 --> 00:30:01,802
I will place my stuff there. Well, enjoy the sunset.

481
00:30:01,866 --> 00:30:05,678
And that's it for today. So stay safe and

482
00:30:05,844 --> 00:30:15,160
see you're.

