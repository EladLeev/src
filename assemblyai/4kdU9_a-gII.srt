1
00:00:25,490 --> 00:00:28,962
Hi, my name is Sean. The project I work on is called Pion.

2
00:00:29,106 --> 00:00:32,838
Pion is a open source collective for building

3
00:00:33,004 --> 00:00:36,454
real time communication software in Go. It's completely driven by

4
00:00:36,492 --> 00:00:39,666
individuals. If you're ever interested in getting involved in open source,

5
00:00:39,698 --> 00:00:43,478
we'd love to have you work on the project. We have multiple different companies.

6
00:00:43,644 --> 00:00:46,870
We have students that want to learn Go

7
00:00:46,940 --> 00:00:50,554
tour real time communication more, and we have all these different types of communities

8
00:00:50,602 --> 00:00:54,426
as well. We have people that are working on security that are interested in dTls.

9
00:00:54,538 --> 00:00:57,998
We have people that are just interested in building conferencing software, and we

10
00:00:58,004 --> 00:01:01,194
have robotics, just to name a few. So we'd love to have you involved,

11
00:01:01,242 --> 00:01:04,426
and we'll talk about later where you can find us. So if you're not familiar

12
00:01:04,458 --> 00:01:08,146
with real time communication, go is making a big splash in this space.

13
00:01:08,248 --> 00:01:12,034
And here are some of the companies and the projects that they're building. Format is

14
00:01:12,072 --> 00:01:15,454
making it so you can remotely control robots over the Internet.

15
00:01:15,502 --> 00:01:19,522
So here's one of the Boston dynamics spot, and it has the

16
00:01:19,576 --> 00:01:23,714
format agent on it. And with that, I can now control it over the Internet.

17
00:01:23,762 --> 00:01:26,918
So in the bottom right corner, you can see that I'm using my mouse and

18
00:01:26,924 --> 00:01:30,586
keyboard to move things around. And with that over the

19
00:01:30,608 --> 00:01:34,518
Internet, I'm able to move the robot up and down, and I'm able to transmit

20
00:01:34,534 --> 00:01:38,394
the audio and video directly into my browser. Headroom is making it

21
00:01:38,592 --> 00:01:42,634
taking conferencing to the next level so you can analyze.

22
00:01:42,762 --> 00:01:45,706
When you hold up your hand, it'll automatically say that you're raised.

23
00:01:45,818 --> 00:01:50,654
It'll do speech to text, and it can measure how

24
00:01:50,692 --> 00:01:54,730
much eye contact has been made and other things. It's what can we do

25
00:01:54,900 --> 00:01:58,178
with all of these great libraries in Go and audio and

26
00:01:58,184 --> 00:02:02,050
video processing? Piepackr allows you to play

27
00:02:02,120 --> 00:02:05,922
games with other people directly in the browser. So on a remote host we have

28
00:02:05,976 --> 00:02:09,654
this NES emulator at Super Nintendo Game

29
00:02:09,692 --> 00:02:12,886
Boy, and it brings all these classic retro games together and makes them able to

30
00:02:12,908 --> 00:02:16,642
play. They're using Pyon to run on these remote those,

31
00:02:16,706 --> 00:02:20,278
and then you're able to connect directly. It kind of recreates that sitting on the

32
00:02:20,284 --> 00:02:24,022
couch next to a friend experience. Here's another is strive

33
00:02:24,166 --> 00:02:28,102
has a peer to peer CDN using real time communication.

34
00:02:28,166 --> 00:02:31,798
Peer to peer, they connect people together that are in the same network.

35
00:02:31,894 --> 00:02:35,178
So you only have to download a video file remotely once. So you have

36
00:02:35,184 --> 00:02:38,446
the CDN Edge server. I download my video file once and then I

37
00:02:38,468 --> 00:02:41,806
share it among my users. So you don't have to use an Internet connection to

38
00:02:41,828 --> 00:02:45,118
download the same file ten times for these people that are in

39
00:02:45,124 --> 00:02:48,402
the same network. So what is WebRTC? We talk about all these

40
00:02:48,536 --> 00:02:51,970
really cool big things you can build, but what exactly does it get you?

41
00:02:52,120 --> 00:02:55,262
WebRTC is originally envisioned as a protocol for browsers,

42
00:02:55,326 --> 00:02:59,254
so it gives you end to end secure connection between peers. So two

43
00:02:59,292 --> 00:03:02,498
browsers, they're able to establish a connection directly. You don't

44
00:03:02,514 --> 00:03:06,274
even have to go through a server and it's completely secure.

45
00:03:06,402 --> 00:03:09,554
So there's no optional, it's not like HTTP,

46
00:03:09,602 --> 00:03:13,126
HTTPs, if you're using WebrCC, it's a secure connection.

47
00:03:13,238 --> 00:03:16,694
And then you have two things that you can exchange. You can either exchange

48
00:03:16,742 --> 00:03:19,750
multimedia, so I can do two audio,

49
00:03:19,830 --> 00:03:23,338
three video tracks, there's no limit at all. And binary data.

50
00:03:23,424 --> 00:03:26,606
And binary data with WebRTC is very interesting because it

51
00:03:26,628 --> 00:03:30,126
can be lossy and unordered. So if you think if you're building a

52
00:03:30,148 --> 00:03:33,326
real time system like a video game, you don't care

53
00:03:33,348 --> 00:03:37,314
these, the player was 2 seconds ago. You just want to hear what's happening

54
00:03:37,352 --> 00:03:40,594
right now. So it allows you to build really interesting systems with that. The other

55
00:03:40,632 --> 00:03:44,162
really exciting thing about WebRTC is how widely available it is.

56
00:03:44,296 --> 00:03:47,614
So if I have two WebrTC agents and they're exchanging binaries

57
00:03:47,662 --> 00:03:50,838
data, I could have one in Python, I could have one in typescript, I could

58
00:03:50,844 --> 00:03:53,750
have one in Java and one in go. I think WebRTC is a great chance

59
00:03:53,820 --> 00:03:58,562
to have things cross language communication

60
00:03:58,626 --> 00:04:02,102
without having some kind of central server. So a lot of issues today is

61
00:04:02,156 --> 00:04:05,386
if you want to have two languages communicate, you have to run some kind of

62
00:04:05,408 --> 00:04:09,174
pub sub server, or you exchange things via HTTP with WebRTC,

63
00:04:09,222 --> 00:04:12,806
I can connect these two processes together directly and start exchanging binary

64
00:04:12,838 --> 00:04:16,554
data and maybe send JSOn over or whatever I want. And if you're

65
00:04:16,602 --> 00:04:19,886
curious about WebrTC really works, the pion community is working on a

66
00:04:19,908 --> 00:04:23,118
book called WebRTC for the Curious, and we talk not just about the

67
00:04:23,124 --> 00:04:26,622
public APIs, but a deep dive on the protocols and how things actually

68
00:04:26,676 --> 00:04:29,826
work. We also have some interviews with the RFC authors and the

69
00:04:29,848 --> 00:04:33,426
people that actually made WebRTC, so you can understand the intention of it and what

70
00:04:33,448 --> 00:04:36,894
the purpose and the design of things. And also like a WebRTC in practice,

71
00:04:36,942 --> 00:04:40,086
if you need help debugging or teach you the sharp edges, I think a lot

72
00:04:40,108 --> 00:04:43,558
of those things come in handy if you don't

73
00:04:43,564 --> 00:04:46,806
want to have to learn those things in production. So we provide this resource for

74
00:04:46,828 --> 00:04:50,018
you. So what does WebRTC solve?

75
00:04:50,194 --> 00:04:53,770
I promise all these really interesting things, but until you hit these problems,

76
00:04:53,840 --> 00:04:57,354
you probably don't appreciate how great WebRTC is.

77
00:04:57,392 --> 00:05:00,598
And another thing is you don't even realize some of these problems are solvable.

78
00:05:00,774 --> 00:05:04,270
So a lot of times users think, oh, I want to exchange this file with

79
00:05:04,340 --> 00:05:08,366
another person, but we're in two separate networks, so I have to upload it so

80
00:05:08,468 --> 00:05:11,774
we can both exchange it. But that's actually not true.

81
00:05:11,892 --> 00:05:16,030
I can connect two users with no public IP who are on completely different networks.

82
00:05:16,110 --> 00:05:19,602
And it uses this technique called Nat traversal. So every

83
00:05:19,656 --> 00:05:23,650
time that you send a packet out to a public

84
00:05:23,720 --> 00:05:27,914
server, your nat will establish a temporary hole.

85
00:05:28,062 --> 00:05:31,846
And that temporary hole allows these server to send messages back

86
00:05:31,868 --> 00:05:36,002
to you. But you could also share that temporary hole with other users

87
00:05:36,146 --> 00:05:39,606
and they can send messages back to you. So let's say you say,

88
00:05:39,708 --> 00:05:43,494
send a packet to google.com, your nat

89
00:05:43,542 --> 00:05:47,174
opens up a temporary hole so Google can respond to you. But that temporary

90
00:05:47,222 --> 00:05:51,622
hole can also be change and told to other users. And these can send messages

91
00:05:51,686 --> 00:05:55,494
into you. And what WebRTC uses is something called a stun server.

92
00:05:55,542 --> 00:05:58,174
And so the stun server, you send a packet out to and you say,

93
00:05:58,292 --> 00:06:01,086
hi, please send some data back to me and also tell me what is my

94
00:06:01,108 --> 00:06:04,362
public IP and what is this temporary hold that's established?

95
00:06:04,426 --> 00:06:08,030
If you've ever done port forwarding, maybe to play a video game before, it's essentially

96
00:06:08,110 --> 00:06:11,858
like an automatic port forward. WebRTC also

97
00:06:12,024 --> 00:06:15,586
solves the problem of staying connected on these move. So let's say you originally take

98
00:06:15,608 --> 00:06:18,820
a call when you're on Wi Fi, but you decide to walk outside.

99
00:06:19,190 --> 00:06:22,402
WebRTC provides this thing called ice restart, so it can actually measure

100
00:06:22,546 --> 00:06:26,290
the connectivity, the quality of the connection. It can switch connections on the fly

101
00:06:26,370 --> 00:06:29,866
and always pick the best route. If you're using TCP, there is

102
00:06:29,888 --> 00:06:33,638
multiplayer tcp, but the nice thing is with ice restart

103
00:06:33,814 --> 00:06:37,274
is it switches and the

104
00:06:37,312 --> 00:06:40,778
user land is aware of what's happening. So I can switch, let's say, if I

105
00:06:40,784 --> 00:06:43,722
switch from Wi Fi to cellular, I can say, okay, like I need to send

106
00:06:43,856 --> 00:06:47,326
lower quality video because I'm on a metered connection and stuff like that.

107
00:06:47,348 --> 00:06:50,506
There's a lot of powerful things you can do if you're aware that you're switching

108
00:06:50,538 --> 00:06:53,930
networks and you're aware of the quality of that network.

109
00:06:54,090 --> 00:06:57,726
Another really common problem is that users will sit down and they'll want to

110
00:06:57,748 --> 00:07:00,898
measure, they'll want to say, how much bandwidth do I have available? Because that's the

111
00:07:00,904 --> 00:07:04,340
quality of video I want to upload. But that's not how the real world works.

112
00:07:04,950 --> 00:07:08,226
When you measure, you could be measuring when the network is

113
00:07:08,248 --> 00:07:11,526
really overloaded, and it could say you have less available, or you could measure when

114
00:07:11,548 --> 00:07:15,574
the network is really underutilized. And as more people come on the network, you have

115
00:07:15,692 --> 00:07:19,558
less bandwidth available. So here's an example where I originally measured and I

116
00:07:19,564 --> 00:07:22,794
thought I had 50 megabits a second. But as more users come on at different

117
00:07:22,832 --> 00:07:26,378
hops, all of a sudden that reduces the actual bandwidth available

118
00:07:26,464 --> 00:07:30,182
between me. WebRTC has receiver feedback,

119
00:07:30,326 --> 00:07:33,626
and what that allows you to do is implement congestion control. So when

120
00:07:33,648 --> 00:07:37,566
I receive media from a sender, I send responses like,

121
00:07:37,588 --> 00:07:40,766
I got these many packets, I lost these many packets, and I have this much

122
00:07:40,788 --> 00:07:44,446
delay. With all this information, I can actually adjust the bitrate and make

123
00:07:44,468 --> 00:07:48,098
sure that I get the best experience possible. So if you've ever done a

124
00:07:48,104 --> 00:07:51,394
call over WebRTC, you'll watch. The quality will fluctuate as

125
00:07:51,432 --> 00:07:55,230
the congestion of the network change. Another popular

126
00:07:55,310 --> 00:07:58,498
thing that people use WebRTC to solve is the head of line blocking.

127
00:07:58,594 --> 00:08:02,950
So with TCP, the first message that you send has to be delivered before

128
00:08:03,100 --> 00:08:06,934
message plus one. The nice thing about WebRTC is that

129
00:08:06,972 --> 00:08:10,422
you choose what is retransmitted. So let's say that you can send a message

130
00:08:10,476 --> 00:08:13,898
like telemetry, metadata, something that isn't important. If it doesn't get

131
00:08:13,904 --> 00:08:17,114
delivered, you don't have to try to send it again. You can

132
00:08:17,152 --> 00:08:20,394
mark that message with a max. Retransmits of zero and new

133
00:08:20,432 --> 00:08:24,334
data now flows unblocked and delivery. But let's say that you do care

134
00:08:24,372 --> 00:08:27,918
about something. You can guarantee that it's been delivered by resending and

135
00:08:28,004 --> 00:08:31,898
send, a receiver will say, okay, I've got message with this transmission

136
00:08:31,994 --> 00:08:35,106
number. Another really popular thing about web receive is actually

137
00:08:35,128 --> 00:08:38,274
a bundle of existing protocols. So if you've ever worked

138
00:08:38,312 --> 00:08:42,766
in VoIP, you've probably heard of RTP and RTCP and SRTP.

139
00:08:42,958 --> 00:08:47,006
It's really easy to bundle all these existing things and you can hook WebRTC

140
00:08:47,038 --> 00:08:50,886
up to an existing VoIP system, or you can easily bring in

141
00:08:50,988 --> 00:08:54,566
a call from a plain old telephone system right into your WebRTC call.

142
00:08:54,668 --> 00:08:58,306
Being able to bring all these things is super powerful. So now that you're convinced

143
00:08:58,338 --> 00:09:01,766
that WebRTC is super exciting, you're going to build something. You go and check,

144
00:09:01,788 --> 00:09:05,146
but Pyon and this is how easy it is to build something. So with

145
00:09:05,168 --> 00:09:08,794
WebRTC, since it's peer to peer, we have to exchange some kind of

146
00:09:08,832 --> 00:09:12,438
metadata to say, okay, this is where I'm located. These are the codecs

147
00:09:12,454 --> 00:09:15,366
I support. And this is what I want to talk about. And this is known

148
00:09:15,398 --> 00:09:18,430
as signaling. So what you do is the person that wants to start the call

149
00:09:18,500 --> 00:09:21,818
creates can offer, and the person that wants to connect to the call creates

150
00:09:21,834 --> 00:09:25,034
can answer. WebRtC is always a one to one connection.

151
00:09:25,082 --> 00:09:28,594
So here we are on the offering side. I create a peer connection, I create

152
00:09:28,632 --> 00:09:32,366
an offer, and I send off my offer. At the end of this file,

153
00:09:32,398 --> 00:09:35,746
you see, we get the remote session, the remote description, and we

154
00:09:35,768 --> 00:09:39,646
call set remote description. So now we have just with things six

155
00:09:39,688 --> 00:09:43,318
lines of code, and you'd have the equivalent. On the other side,

156
00:09:43,404 --> 00:09:46,914
you've established a peer to peer connection. You can now once you're established,

157
00:09:46,962 --> 00:09:49,930
create a data channel. You can create as many data channels as you want.

158
00:09:50,000 --> 00:09:53,258
I think there's actually a limit of 65,000. And each of

159
00:09:53,264 --> 00:09:57,242
those data channel can have settings that control the

160
00:09:57,296 --> 00:10:00,778
lifetime, the priority of it, and other things

161
00:10:00,864 --> 00:10:04,410
so that you can tailor them to what their purpose is.

162
00:10:04,480 --> 00:10:08,078
So on the first line, I create the data channel, and then when the

163
00:10:08,084 --> 00:10:11,438
data channel is open, I send the message hello world. On the

164
00:10:11,444 --> 00:10:15,102
other side, I have an on data channel handler, and when a new data

165
00:10:15,156 --> 00:10:18,286
channel opens, I print the name of the data channel and I print the messages

166
00:10:18,318 --> 00:10:21,922
has they come across? Really exciting thing about WebRTC is since it's available

167
00:10:21,976 --> 00:10:25,538
everywhere, you can actually write your WebRTC code in go

168
00:10:25,624 --> 00:10:28,946
and then deploy it to webassembly. So that's what I've dont here is I've taken

169
00:10:28,968 --> 00:10:32,646
my existing example and I've built it for Webassembly and now

170
00:10:32,668 --> 00:10:36,214
I use it right in the browser. Sending video is easy as well. You create

171
00:10:36,252 --> 00:10:39,526
a track and then you start writing some media to that track. Here we

172
00:10:39,548 --> 00:10:42,666
are. IVF is a file format that

173
00:10:42,688 --> 00:10:45,926
just contains raw media data. So we're just reading frame

174
00:10:45,958 --> 00:10:49,226
by frame and then writing it to our WebRTC connection. And then on the other

175
00:10:49,248 --> 00:10:52,742
side we're receiving frame by frame. And WebRTC

176
00:10:52,806 --> 00:10:56,382
has all this goodness built in where it will measure the amount of bandwidth available

177
00:10:56,436 --> 00:10:59,754
and tell you like, this is what you should do and it will handle loss

178
00:10:59,802 --> 00:11:03,006
and other things like that. So here's some of the really exciting things that are

179
00:11:03,028 --> 00:11:06,834
being built with Pion and open source. NS remote allows you to

180
00:11:06,952 --> 00:11:10,686
send the video data right from a Nintendo switch into a virtual reality

181
00:11:10,718 --> 00:11:15,218
headset. So a user has put

182
00:11:15,304 --> 00:11:18,494
pion on a device that captures the frames

183
00:11:18,542 --> 00:11:21,526
from the Nintendo switch and then sends it over the network. So they can sit

184
00:11:21,548 --> 00:11:24,726
with a Nintendo switch in their hand, but they get a full immersive experience with

185
00:11:24,748 --> 00:11:27,926
the headset. It does these cool things like,

186
00:11:27,948 --> 00:11:31,018
because you're on the same network, you're not paying for the bandwidth to have to

187
00:11:31,024 --> 00:11:34,314
send this over the Internet. And this

188
00:11:34,352 --> 00:11:38,106
could also go to other devices. Because WebRTC is an open protocol. You could send

189
00:11:38,128 --> 00:11:41,758
a Nintendo switch into your browser, you could send it to your tv if it

190
00:11:41,764 --> 00:11:45,486
has a WebRTC agent. It's kind of a ubiquitous protocol at

191
00:11:45,508 --> 00:11:49,386
this point. WebRTC is also great for security cameras.

192
00:11:49,498 --> 00:11:52,666
So there's some existing protocols for security cameras.

193
00:11:52,698 --> 00:11:55,550
You have RTSP, or maybe just plain RTP.

194
00:11:55,710 --> 00:12:01,246
But one of the issues is that that doesn't handle Nat traversal and there's

195
00:12:01,278 --> 00:12:04,814
not a required security for that. So RTSp,

196
00:12:04,862 --> 00:12:08,890
you could opt in to have encryption, but with WebRTC, since encryption

197
00:12:08,910 --> 00:12:12,038
is mandatory, I think that it's bringing a lot of great security

198
00:12:12,124 --> 00:12:15,618
to the space. Neko allows you to run a browser

199
00:12:15,714 --> 00:12:18,886
on a remote host and then have multiple people connect to it. So you could

200
00:12:18,908 --> 00:12:22,666
watch a movie with a friend, you could browser a website with another person,

201
00:12:22,768 --> 00:12:25,994
or you could use this to run

202
00:12:26,032 --> 00:12:29,382
a heavy web process on a remote host. You could run Slack

203
00:12:29,446 --> 00:12:32,286
and watch YouTube videos and stuff like that, things that you don't want to do

204
00:12:32,308 --> 00:12:36,046
locally if you don't have the processing, you know,

205
00:12:36,068 --> 00:12:39,406
again, just like the early example earlier with format, here's an open

206
00:12:39,428 --> 00:12:43,114
source implementation of that where they put a py

207
00:12:43,162 --> 00:12:46,274
on directly on the drone, and now you're able to control it by dragging things

208
00:12:46,312 --> 00:12:49,970
in a web UI and then they're sending the video frames right over the Internet.

209
00:12:50,630 --> 00:12:54,126
WebRTC conferencing doesn't just have to be in the browser here you're

210
00:12:54,158 --> 00:12:58,178
running a go agent directly in your terminal and it's doing

211
00:12:58,264 --> 00:13:01,698
a encoding and decoding. And so now I'm seeing another user's

212
00:13:01,714 --> 00:13:05,714
video frames just in ASCII. And if you're familiar

213
00:13:05,762 --> 00:13:09,174
with a lot of the cloud gaming projects, we now have

214
00:13:09,212 --> 00:13:12,474
that with an open source version, cloud morph, you can get that right off

215
00:13:12,512 --> 00:13:16,358
GitHub, and you can play Diablo two, you can play StarCraft.

216
00:13:16,454 --> 00:13:19,946
And it's also great for running like heavy applications that are difficult to

217
00:13:19,968 --> 00:13:23,342
set up. You can spin up a remote host and run something,

218
00:13:23,396 --> 00:13:26,766
unwind that's really difficult to run and set up, and then tear that

219
00:13:26,788 --> 00:13:30,650
host down so you can play across different devices,

220
00:13:30,730 --> 00:13:34,446
you can play it on devices that don't have enough gpu and things like

221
00:13:34,468 --> 00:13:38,274
that. And I see a lot of promise with WebRTC and

222
00:13:38,392 --> 00:13:42,318
exchanging like terminals. So here we have WebRTC which allows

223
00:13:42,334 --> 00:13:45,538
me to connect my terminal to a browser and I don't need to run it

224
00:13:45,544 --> 00:13:48,778
through a central those and I actually dont even need to be on the Internet

225
00:13:48,814 --> 00:13:51,622
since it's peer to peer. I think there's a lot of promise here. If someone

226
00:13:51,676 --> 00:13:55,702
was to come up with a project that could allow

227
00:13:55,756 --> 00:13:59,542
you to connect two hosts or maybe two containers without

228
00:13:59,596 --> 00:14:03,130
having to worry about central processing, and you could have it be multi cloud.

229
00:14:03,200 --> 00:14:05,766
And there's a lot of interesting things here that I don't think has been fully

230
00:14:05,798 --> 00:14:09,274
explored yet. Snowflake is an open source project by

231
00:14:09,312 --> 00:14:12,986
Tor that uses WebrTC for censorship circumvention.

232
00:14:13,098 --> 00:14:17,262
So instead of having to download the full Tor browser, you can just access

233
00:14:17,396 --> 00:14:20,622
a website via WebRTC and the data channel.

234
00:14:20,756 --> 00:14:24,078
And this is great because if your ISP or your

235
00:14:24,084 --> 00:14:27,742
network provider or maybe a government wants to block web tour,

236
00:14:27,806 --> 00:14:32,142
it's a lot harder now with WebRTC because you have all of this conferencing traffic

237
00:14:32,206 --> 00:14:35,694
and other important things that go via this protocol, so it's much harder to filter

238
00:14:35,742 --> 00:14:39,466
and identify. Webwormhole allows you to change

239
00:14:39,518 --> 00:14:43,138
files via WebRTC and now you've seen a lot of examples

240
00:14:43,154 --> 00:14:46,086
like this just in the browser. But now that we have a go agent,

241
00:14:46,188 --> 00:14:49,766
it brings up a lot of interesting possibilities. I can

242
00:14:49,788 --> 00:14:52,806
send a file directly from my server to my desktop,

243
00:14:52,918 --> 00:14:56,806
I can change things via my phone, go bring

244
00:14:56,838 --> 00:15:00,640
it to a lot of new platforms where having a full browser wasn't possible.

245
00:15:02,770 --> 00:15:06,586
And Pine is being used for a lot of interesting conferencing

246
00:15:06,618 --> 00:15:09,946
things as well. So here is a virtual reality space where people's

247
00:15:09,978 --> 00:15:13,070
heads are imposed upon their avatars,

248
00:15:13,410 --> 00:15:16,862
and they did some really cool things where they actually had Shakespeare

249
00:15:16,926 --> 00:15:20,914
that was performed in this, and that's great for things

250
00:15:20,952 --> 00:15:24,754
that you couldn't do in the physical world, like quick costume changes or changing the

251
00:15:24,792 --> 00:15:28,098
stage you can quickly do in VR. So I think it opens up a lot

252
00:15:28,104 --> 00:15:31,446
of interesting possibilities. So if you go and build something with

253
00:15:31,468 --> 00:15:35,586
Pion, I'd love to hear about it. We have GitHub.com slash Pion

254
00:15:35,618 --> 00:15:39,650
awesomepion with a list of all of these things that I think are really promising

255
00:15:39,810 --> 00:15:43,290
and exciting, and we'd love to have yours as well. And Pion needs you.

256
00:15:43,360 --> 00:15:46,746
So if you're interested in getting involved, we'd love

257
00:15:46,768 --> 00:15:49,450
to have you on the next slide. We have the slack and email,

258
00:15:49,520 --> 00:15:52,854
but these are kind of the reasons that I love working in open source

259
00:15:52,902 --> 00:15:56,954
is you get to empower those that are helping the Internet. So Tor ipfs

260
00:15:57,082 --> 00:16:00,826
and there's a lot of great projects out there, and you gain deep WebRTC

261
00:16:00,858 --> 00:16:04,238
knowledge. It's really great to work on Pyon and learn this stuff and

262
00:16:04,244 --> 00:16:07,966
then not have to learn it when you're solving a production issue. And in

263
00:16:07,988 --> 00:16:11,294
that same vein, it's a fun challenge where you pick the goals. If you find

264
00:16:11,332 --> 00:16:14,526
a particular part of WebRTC interesting, here's your chance to deep dive on

265
00:16:14,548 --> 00:16:18,054
that in just just enjoy that. So that's where you can find the Pion project

266
00:16:18,092 --> 00:16:22,038
on GitHub and these we have a slack on the gopher slack and then a

267
00:16:22,044 --> 00:16:25,702
Twitter where I share interesting project updates. So I hope you found that interesting

268
00:16:25,756 --> 00:16:29,046
and please reach out anytime and I hope to hear

269
00:16:29,068 --> 00:16:29,940
from you. Thank you.

