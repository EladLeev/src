1
00:01:28,370 --> 00:01:31,606
Hello and welcome to my talk. Opentelemetry and Epsagon a

2
00:01:31,628 --> 00:01:34,966
love story in three acts when we

3
00:01:34,988 --> 00:01:38,886
started Epsagon four years ago, this was a team and we

4
00:01:38,908 --> 00:01:42,266
used proprietary sdks and fraternity protocol.

5
00:01:42,458 --> 00:01:46,334
Today we are a part of Cisco and we

6
00:01:46,372 --> 00:01:50,154
build a new product that supports Opentelemetry natively. We contribute

7
00:01:50,202 --> 00:01:53,630
code to Opentelemetry repositories on a day to day basis.

8
00:01:54,530 --> 00:01:58,398
If you want to use open source projects

9
00:01:58,494 --> 00:02:02,034
as a part of your solution, this talk is for you. I will

10
00:02:02,072 --> 00:02:05,666
explain how we got from where we started to where we are today on

11
00:02:05,688 --> 00:02:09,638
the mistakes that we made along the way and what you can learn from them.

12
00:02:09,804 --> 00:02:13,510
First, a little bit about myself. I'm Yosef Arbiv.

13
00:02:14,010 --> 00:02:17,282
I am married to Abi and I'm the father of three adorable

14
00:02:17,346 --> 00:02:20,666
kids. And I'm team leader of the

15
00:02:20,688 --> 00:02:24,790
SDK team that builds the libraries and the sdks

16
00:02:24,870 --> 00:02:28,426
that our customer use in

17
00:02:28,448 --> 00:02:31,834
the Cisco Etni group. So a little

18
00:02:31,872 --> 00:02:34,798
bit about Epsagon so you can understand how we fit in.

19
00:02:34,964 --> 00:02:38,414
Epsagon is a solution for customers who

20
00:02:38,452 --> 00:02:42,270
use and build their product, their backend,

21
00:02:42,770 --> 00:02:47,118
with lots of different services and frameworks

22
00:02:47,214 --> 00:02:50,594
in the cloud. As you can see, in such

23
00:02:50,632 --> 00:02:54,514
cases it can be very hard to keep track of what you have and who

24
00:02:54,552 --> 00:02:57,978
talks to who. So this is where Epsagon

25
00:02:58,014 --> 00:03:02,022
comes to help our customers install

26
00:03:02,156 --> 00:03:05,800
the sdks as a part of their code.

27
00:03:06,730 --> 00:03:10,922
They don't need to change anything in their code, they just need to import our

28
00:03:10,976 --> 00:03:14,234
sdks into their code and then

29
00:03:14,272 --> 00:03:17,706
they can log in in our website and they

30
00:03:17,728 --> 00:03:21,366
can see the traces and graphs of the

31
00:03:21,408 --> 00:03:24,874
product. Who talks to who and where do they have failures,

32
00:03:24,922 --> 00:03:28,334
where are the errors, and they can debug and travel to their

33
00:03:28,372 --> 00:03:31,742
systems. So in order to

34
00:03:31,796 --> 00:03:34,770
generate these graphs, we need to send traces from the code.

35
00:03:34,840 --> 00:03:37,540
So this is where my team came in place.

36
00:03:39,030 --> 00:03:42,146
We build those sdks, that instrument the code,

37
00:03:42,328 --> 00:03:45,300
create the traces and send them to the back end.

38
00:03:46,650 --> 00:03:48,920
So first where we started,

39
00:03:50,090 --> 00:03:53,826
when we started, the serverless market was new and trending,

40
00:03:53,938 --> 00:03:57,870
and we decided to aim for customers using serverless

41
00:03:57,970 --> 00:04:01,338
solutions. Back then there were

42
00:04:01,344 --> 00:04:04,650
no industry standard for distributed traces.

43
00:04:05,390 --> 00:04:09,366
Most of the customers were using logs or nondistributed

44
00:04:09,398 --> 00:04:12,646
traces. We looked at the

45
00:04:12,688 --> 00:04:16,058
possibilities we had and we considered using open tracing,

46
00:04:16,234 --> 00:04:18,654
but we had a couple of problems with it.

47
00:04:18,852 --> 00:04:21,966
First, open tracing was backed by one company which

48
00:04:21,988 --> 00:04:25,394
was a competitor of ours, so we were a little bit afraid of

49
00:04:25,432 --> 00:04:29,042
using it. Another problem wasnt that open

50
00:04:29,096 --> 00:04:32,100
tracing didn't have automatic traces back then.

51
00:04:32,630 --> 00:04:36,694
We wanted the experience for our customer to be as smooth as possible and

52
00:04:36,732 --> 00:04:40,566
to have minimum code changes. So we decided to create our

53
00:04:40,588 --> 00:04:43,922
own libraries that will do automatic instrumentations

54
00:04:44,066 --> 00:04:46,950
and will create traces automatically.

55
00:04:48,010 --> 00:04:51,558
At first we considered to create those packages

56
00:04:51,654 --> 00:04:54,522
closed and to send them to our customers to use.

57
00:04:54,656 --> 00:04:58,406
But soon enough we discovered that this was not really a possibility.

58
00:04:58,598 --> 00:05:02,550
Our customers didn't want to install closed source

59
00:05:02,710 --> 00:05:06,414
packages and to add them to their sources. They wanted the code

60
00:05:06,452 --> 00:05:10,094
to be open so they can see it, they can fix bugs and so on.

61
00:05:10,292 --> 00:05:14,754
So we decided to open source our libraries and to publish them.

62
00:05:14,872 --> 00:05:19,170
And we also hope to create a little community around them where

63
00:05:19,240 --> 00:05:23,086
customers can fix bugs and add new instrumentations

64
00:05:23,198 --> 00:05:26,486
and so on. So this was the first phase when

65
00:05:26,508 --> 00:05:27,910
we started Epsagon,

66
00:05:29,610 --> 00:05:33,366
what we learned from this phase. So first about the

67
00:05:33,388 --> 00:05:36,646
product defensibility, you need to think which part

68
00:05:36,668 --> 00:05:40,570
of your product you want to be closed and which part should be opened.

69
00:05:41,310 --> 00:05:44,746
Focusing the defensibility on the wrong part can

70
00:05:44,768 --> 00:05:48,618
be problematic. Another thing that we learned is that building an

71
00:05:48,624 --> 00:05:52,350
open source community can be really hard and requires a lot of energy

72
00:05:52,420 --> 00:05:55,870
and resources. It is much easier to join a community

73
00:05:56,020 --> 00:05:59,822
than to create one on your own. And this

74
00:05:59,876 --> 00:06:03,300
brings us to the second act, the standardization of the market.

75
00:06:04,310 --> 00:06:08,930
We managed to create a good solution for customers using serverless

76
00:06:09,270 --> 00:06:12,658
frameworks and we were very popular at this market,

77
00:06:12,824 --> 00:06:17,030
but this market was too small for us and we couldn't build a big business

78
00:06:17,100 --> 00:06:20,722
on it. So we decided to move to other fields,

79
00:06:20,786 --> 00:06:24,262
such as the Kubernetes clusters. But when we looked into

80
00:06:24,316 --> 00:06:27,654
it, it turns but that to build a

81
00:06:27,692 --> 00:06:30,570
Java Kubernetes agent on our own was too complex.

82
00:06:31,070 --> 00:06:34,138
So we looked into open tracing again and

83
00:06:34,224 --> 00:06:37,626
it was moment short then. So we decided to build our agent on top

84
00:06:37,648 --> 00:06:41,454
of it. So we decided to take some

85
00:06:41,492 --> 00:06:44,910
code from opentracing libraries and to add the

86
00:06:45,060 --> 00:06:48,686
code that was needed for our solution, and to

87
00:06:48,708 --> 00:06:52,394
add some changes, to add the tracing protocol

88
00:06:52,442 --> 00:06:54,500
that we needed, and so on.

89
00:06:55,510 --> 00:06:59,634
And this way we could build a successful Java agent for

90
00:06:59,672 --> 00:07:03,134
Kubernetes clusters that was based on open tracing

91
00:07:03,262 --> 00:07:07,350
but was compatible for the Epsagon backend.

92
00:07:08,090 --> 00:07:11,270
Shortly afterwards, Opentelemetry was announced.

93
00:07:12,730 --> 00:07:16,658
Opentelemetry was based on open tracing and open census,

94
00:07:16,834 --> 00:07:21,382
and it became very popular pretty

95
00:07:21,436 --> 00:07:24,934
soon. So we

96
00:07:24,972 --> 00:07:28,246
started to build new libraries that were

97
00:07:28,268 --> 00:07:31,598
based on open telemetry code on the same way we did with

98
00:07:31,604 --> 00:07:35,486
open tracing. We took the libraries and

99
00:07:35,508 --> 00:07:38,766
the code from Opentelemetry and we changed it

100
00:07:38,788 --> 00:07:43,342
a bit. We add the unique functionality

101
00:07:43,486 --> 00:07:47,006
that we needed for Epsagon that was not included

102
00:07:47,118 --> 00:07:50,354
in open

103
00:07:50,392 --> 00:07:53,986
telemetry libraries. And this

104
00:07:54,008 --> 00:07:57,702
way we created our own libraries as a forks actually

105
00:07:57,836 --> 00:07:59,510
of Opentelemetry.

106
00:08:00,810 --> 00:08:04,534
This way we were able to create new libraries very fast.

107
00:08:04,732 --> 00:08:08,726
So we created more and more libraries, but maintaining them became

108
00:08:08,758 --> 00:08:12,730
a headache. It was really hard to maintain the libraries

109
00:08:13,070 --> 00:08:16,886
when the community keeps moving forward and changing

110
00:08:16,918 --> 00:08:19,290
the code, adding new functionality.

111
00:08:20,850 --> 00:08:24,222
So it was very hard for us to keep track with

112
00:08:24,276 --> 00:08:27,706
the community. Which brings

113
00:08:27,738 --> 00:08:31,038
me to the lesson learned. So first,

114
00:08:31,204 --> 00:08:35,380
forks are really hard to maintain because you can't really

115
00:08:36,230 --> 00:08:40,660
keep updating your code with changes and

116
00:08:41,190 --> 00:08:44,222
additional code that community added.

117
00:08:44,366 --> 00:08:47,726
So I really suggest not to use forks when

118
00:08:47,768 --> 00:08:51,174
possible. There are much better ways to use open

119
00:08:51,212 --> 00:08:54,614
source than forks. And the second one is the tech

120
00:08:54,652 --> 00:08:57,994
debt. We created a lot of tech debt when we move forward like

121
00:08:58,032 --> 00:09:02,230
this, we managed to add new libraries

122
00:09:02,310 --> 00:09:05,754
and to add new functionality to our product. But as

123
00:09:05,792 --> 00:09:10,010
we did it, we create an increasing

124
00:09:10,370 --> 00:09:13,806
tech debt. In our case,

125
00:09:13,908 --> 00:09:17,598
eventually this was not a problem as you

126
00:09:17,604 --> 00:09:21,050
will see in a minute, but in other cases

127
00:09:21,130 --> 00:09:24,802
it can be really problematic. So this is something

128
00:09:24,856 --> 00:09:28,962
that should be considered again,

129
00:09:29,096 --> 00:09:32,754
for some cases it can be actually good to create

130
00:09:32,792 --> 00:09:36,374
a tech debt because you keep growing your

131
00:09:36,412 --> 00:09:40,646
product and you move forward and you add new functionality and

132
00:09:40,748 --> 00:09:44,658
new features. So it can be great. But growing

133
00:09:44,674 --> 00:09:48,060
the techdet without control over it can be a problem.

134
00:09:49,950 --> 00:09:53,690
And these problems brought us to the third phase,

135
00:09:54,430 --> 00:09:57,450
joining the open telemetry community and joining Cisco.

136
00:09:58,190 --> 00:10:01,510
As we had more and more forks, the overhead became too big

137
00:10:01,600 --> 00:10:04,638
and we understand that this was not really scalable and

138
00:10:04,724 --> 00:10:07,774
we can't move on like this. We also had more

139
00:10:07,812 --> 00:10:11,566
customers talking about Opentelemetry and customers that

140
00:10:11,588 --> 00:10:15,614
were using Opentelemetry in their code. They wanted to see opentelemetry

141
00:10:15,662 --> 00:10:19,890
traces together with epsilon traces in epsilon backend.

142
00:10:21,110 --> 00:10:24,962
So to answer this need, we decided to create a

143
00:10:25,096 --> 00:10:28,662
small experiment with a Java agent. We built a new

144
00:10:28,716 --> 00:10:32,486
agent that was not based on Opentelemetry as a

145
00:10:32,508 --> 00:10:36,774
fork, but as a distribution of opentelemetry, meaning that

146
00:10:36,812 --> 00:10:40,342
we used opentelemetry as a package and created

147
00:10:40,406 --> 00:10:44,214
more functionality on top of it. For Epsagon backend.

148
00:10:44,262 --> 00:10:47,546
We needed to collect more data that Opentelemetry were not

149
00:10:47,568 --> 00:10:50,966
collecting. So we added this as an extension

150
00:10:50,998 --> 00:10:55,738
to Opentelemetry, but we keep the Opentelemetry

151
00:10:55,834 --> 00:10:57,950
traces structure.

152
00:10:59,490 --> 00:11:03,442
This experiment was really successful. We were able to build very

153
00:11:03,496 --> 00:11:06,754
fast an agent that was built

154
00:11:06,792 --> 00:11:10,702
on top of opentelemetry, but without forking the code of open telemetry.

155
00:11:10,766 --> 00:11:14,258
So updating it and maintaining it was

156
00:11:14,344 --> 00:11:18,770
much easier. In addition, we were using open telemetry

157
00:11:18,930 --> 00:11:22,438
trace structure, which means that

158
00:11:22,524 --> 00:11:26,214
our back end now was able to support open

159
00:11:26,252 --> 00:11:30,558
telemetry based traces and not only the Epsagon

160
00:11:30,594 --> 00:11:34,250
traces. So we were more friendly for the communities.

161
00:11:36,190 --> 00:11:40,266
Shortly after this successful experiment, just when

162
00:11:40,288 --> 00:11:44,026
we were about to create more libraries in this structure,

163
00:11:44,138 --> 00:11:48,270
it was announced that Cisco are acquiring Epsagon.

164
00:11:48,930 --> 00:11:52,618
For us, it means that we will stop working on the epsagon product

165
00:11:52,724 --> 00:11:56,066
and we will start working on a new product on the full stack of

166
00:11:56,088 --> 00:11:59,810
scalability product. Together with Cisco groups,

167
00:12:01,350 --> 00:12:05,220
we decided that our new product was

168
00:12:05,750 --> 00:12:09,026
supporting. We decided that

169
00:12:09,048 --> 00:12:12,418
our new product should support Opentelemetry natively,

170
00:12:12,514 --> 00:12:15,830
meaning that we will be able to provide

171
00:12:15,900 --> 00:12:19,578
value for customers using only Opentelemetry without

172
00:12:19,664 --> 00:12:23,754
Epsagon libraries and to add more value for customers who

173
00:12:23,792 --> 00:12:27,574
are using Epsagon libraries. We also decided

174
00:12:27,702 --> 00:12:31,190
that our libraries will be based on Opentelemetry as

175
00:12:31,200 --> 00:12:34,510
a distribution and this way we can create

176
00:12:34,580 --> 00:12:38,590
libraries wasnt and also we were able to maintain them

177
00:12:38,660 --> 00:12:41,770
as we move on. As we moved into this phase,

178
00:12:41,850 --> 00:12:45,106
we also joined the community, meaning that we started to

179
00:12:45,128 --> 00:12:48,382
contribute code, to add new features and to fix bugs

180
00:12:48,446 --> 00:12:51,170
in Opentelemetry projects.

181
00:12:51,590 --> 00:12:54,580
Joining the Opentelemetry community was a great experience.

182
00:12:55,110 --> 00:12:59,266
First, we grouped with Appy Dynamics team and other teams at Cisco

183
00:12:59,378 --> 00:13:02,386
who were already contributing and working with Opentelemetry.

184
00:13:02,498 --> 00:13:05,938
They had a lot of experience with Opentelemetry code and we learned

185
00:13:05,954 --> 00:13:09,514
a lot from them. We met new

186
00:13:09,552 --> 00:13:13,114
maintainers of Opentelemetry and we

187
00:13:13,152 --> 00:13:16,394
worked together with them, learning from them, asking them

188
00:13:16,432 --> 00:13:20,106
questions, and understanding how the community works and

189
00:13:20,128 --> 00:13:23,946
what we need to do in order to fit in. I can also say

190
00:13:24,048 --> 00:13:27,486
that being a part of Opentelemetry community is great for the

191
00:13:27,508 --> 00:13:30,894
developers in my team. We love to be a part of

192
00:13:30,932 --> 00:13:34,320
something bigger and to be able to contribute back to the community.

193
00:13:34,950 --> 00:13:38,766
Being a part of a growing open source community brings

194
00:13:38,798 --> 00:13:42,386
lots of value to the developers in my team and this is very important as

195
00:13:42,408 --> 00:13:46,014
well. In the future, we hope to be a significant

196
00:13:46,062 --> 00:13:49,446
part of the Opentelemetry community. We aim to contribute as

197
00:13:49,468 --> 00:13:52,806
much as possible from our distributions back to the community.

198
00:13:52,988 --> 00:13:56,934
This way, we want Opentelemetry to be a major part of

199
00:13:56,972 --> 00:14:00,946
our full stack observability solution for our customers at Cisco.

200
00:14:01,138 --> 00:14:04,566
Thank you for joining me. If you have any questions, feel free

201
00:14:04,588 --> 00:14:08,390
to reach out at Twitter, LinkedIn or discord.

202
00:14:08,730 --> 00:14:10,238
Thank you and see you there.

