1
00:01:42,590 --> 00:01:46,594
You. Hi and welcome to my

2
00:01:46,632 --> 00:01:50,062
talk about how to architect for continuous

3
00:01:50,126 --> 00:01:53,634
delivery. First to myself. My name

4
00:01:53,672 --> 00:01:57,358
is Romanoroth Ross and I am the chief of DevOps

5
00:01:57,454 --> 00:02:00,882
and a partner at Silke. I work

6
00:02:00,936 --> 00:02:04,366
now for 21 years for Tilke. I joined

7
00:02:04,398 --> 00:02:06,930
Silke directly after university,

8
00:02:07,310 --> 00:02:10,714
became a junior net

9
00:02:10,832 --> 00:02:13,958
engineer, then an expert software engineer,

10
00:02:14,054 --> 00:02:17,782
then a lead software architect, and finally I became

11
00:02:17,846 --> 00:02:21,694
a consultant. And one thing that was very close to my

12
00:02:21,732 --> 00:02:25,440
heart is how can we continuously deliver value,

13
00:02:25,890 --> 00:02:29,614
how can we ensure that the quality

14
00:02:29,812 --> 00:02:33,762
is good of what we are going to deliver and how can we

15
00:02:33,816 --> 00:02:38,130
automate things? And when the whole DevOps movement started,

16
00:02:38,280 --> 00:02:42,814
I jumped right on top of that, became one of the organizers

17
00:02:42,862 --> 00:02:46,558
of the DevOps Meetup Zurich, which is a monthly meetup we are

18
00:02:46,584 --> 00:02:50,146
doing. And I'm also one of the organizers

19
00:02:50,178 --> 00:02:53,766
of the DevOps Days Zurich. The DevOps Days is a

20
00:02:53,788 --> 00:02:57,014
two day conference and all over the world, in all

21
00:02:57,052 --> 00:03:00,678
of the big cities there are DevOps Days conference.

22
00:03:00,774 --> 00:03:05,210
And I am the president of the DevOps Days Zurich.

23
00:03:05,710 --> 00:03:09,670
You can see that DevOps is something that is very close

24
00:03:09,760 --> 00:03:13,374
to my heart. That's also why I have my own YouTube channel

25
00:03:13,492 --> 00:03:17,722
with over 100 videos all around DevOps

26
00:03:17,786 --> 00:03:21,790
architecture and leadership. And I also post and

27
00:03:21,860 --> 00:03:25,726
tweet a lot on the social media channels.

28
00:03:25,918 --> 00:03:29,134
If you want to learn more about DevOps

29
00:03:29,182 --> 00:03:32,850
then please follow me on these channels.

30
00:03:33,350 --> 00:03:36,898
In my project I work for different clients

31
00:03:36,994 --> 00:03:40,258
in different industries and I'm doing DevOps

32
00:03:40,354 --> 00:03:44,034
transformations. And when I'm

33
00:03:44,162 --> 00:03:47,414
in such a consultant mode or in

34
00:03:47,452 --> 00:03:51,114
such a DevOps transformation at the client side,

35
00:03:51,232 --> 00:03:54,854
then I usually see exactly this picture.

36
00:03:54,902 --> 00:03:58,470
What we can see here, the business together with the clients,

37
00:03:58,550 --> 00:04:01,470
they have very, very bright ideas.

38
00:04:01,890 --> 00:04:06,490
They are putting these bright ideas into word documents

39
00:04:06,650 --> 00:04:10,394
and into gyro tickets and then they throw

40
00:04:10,442 --> 00:04:13,694
it over the wall of confusion to the development

41
00:04:13,742 --> 00:04:17,154
team. The development team looks at

42
00:04:17,272 --> 00:04:20,626
these requirements and they say, hey, if you want

43
00:04:20,648 --> 00:04:24,626
to have that, we can implement that. And they are going to implement it.

44
00:04:24,728 --> 00:04:28,094
And then they throw it over the wall of confusion to

45
00:04:28,152 --> 00:04:31,222
the testing team. And the testing team looks at that,

46
00:04:31,276 --> 00:04:34,614
looks at the requirements. It's not the same, but they

47
00:04:34,652 --> 00:04:38,354
test something, it's green. And they throw it over the wall of confusion

48
00:04:38,482 --> 00:04:41,706
to the operation team. The operation team looks at that

49
00:04:41,728 --> 00:04:46,086
and says, wow, this will never work in production. But somehow

50
00:04:46,118 --> 00:04:49,434
they manage to get it to work and they throw it again over

51
00:04:49,472 --> 00:04:52,838
the wall of confusion to their

52
00:04:53,024 --> 00:04:56,634
client and to the business. And the business is, or the client

53
00:04:56,682 --> 00:05:00,222
is like, what is that? This does not solve our problem.

54
00:05:00,356 --> 00:05:04,274
This is not what we wanted. And you can see in this

55
00:05:04,312 --> 00:05:07,986
picture, this blue line there. This is the

56
00:05:08,008 --> 00:05:11,570
value stream. And the value stream is broken by these

57
00:05:11,640 --> 00:05:14,734
walls of confusion. And they are coming from

58
00:05:14,792 --> 00:05:18,290
the silo organization. We have the business development,

59
00:05:18,370 --> 00:05:21,234
QA and operation silos.

60
00:05:21,362 --> 00:05:25,410
Usually you also have quite a lot of legacy systems technologies,

61
00:05:25,570 --> 00:05:30,262
and this all leads to inflexible and slow processes.

62
00:05:30,406 --> 00:05:34,282
There is no alignment in here. Every team is

63
00:05:34,336 --> 00:05:38,026
working on their own goals and usually in such an

64
00:05:38,048 --> 00:05:41,902
environment, security and also quality is something that

65
00:05:41,956 --> 00:05:45,402
is done when things are in production.

66
00:05:45,546 --> 00:05:49,370
Also, what we usually have is quite a lot of cultural resistance

67
00:05:49,450 --> 00:05:53,310
and regulatory and compliance also plays

68
00:05:53,390 --> 00:05:56,818
a huge role. Now, where do these

69
00:05:56,904 --> 00:06:00,190
challenges come from? These challenges

70
00:06:00,270 --> 00:06:04,018
are coming from the projects which we are doing.

71
00:06:04,104 --> 00:06:07,778
In the past, we have done projects in the waterfall mode.

72
00:06:07,874 --> 00:06:10,962
We have planned, designed, developed, deployed,

73
00:06:11,026 --> 00:06:14,774
reviewed, tested and launched in large

74
00:06:14,892 --> 00:06:18,694
batches. Our projects there, the scope,

75
00:06:18,742 --> 00:06:22,202
the budget and the time was fixed. Then around

76
00:06:22,256 --> 00:06:25,402
the year 2000, some bright people said,

77
00:06:25,456 --> 00:06:28,506
no, this is not how we can do

78
00:06:28,608 --> 00:06:32,218
software development. We need to go agile.

79
00:06:32,394 --> 00:06:36,126
And we went agile. Now, time and budget is

80
00:06:36,148 --> 00:06:39,886
still fixed in our project and the scope is

81
00:06:39,988 --> 00:06:44,622
variable and we are delivering in smaller increments,

82
00:06:44,766 --> 00:06:48,670
but we are still doing projects.

83
00:06:48,830 --> 00:06:52,386
But our clients, they want to have

84
00:06:52,488 --> 00:06:55,480
products, they don't want to have a project.

85
00:06:56,090 --> 00:06:59,702
Now to understand that, we need to little bit

86
00:06:59,836 --> 00:07:03,558
dive deeper into that. So a project always

87
00:07:03,644 --> 00:07:07,186
has a start and an end. It has a

88
00:07:07,228 --> 00:07:10,662
fixed set of features that are going to be delivered

89
00:07:10,726 --> 00:07:14,586
and also resources which are applied to

90
00:07:14,608 --> 00:07:17,930
a project. So I want to have these

91
00:07:18,080 --> 00:07:21,358
ten features in a half year for,

92
00:07:21,444 --> 00:07:25,098
let's say â‚¬200,000.

93
00:07:25,194 --> 00:07:28,766
This is a project. So a project is

94
00:07:28,868 --> 00:07:32,314
focused on output, maximizing the

95
00:07:32,372 --> 00:07:36,030
stuff that gets delivered, features, user stories,

96
00:07:36,110 --> 00:07:39,682
tasks and code. On the other side,

97
00:07:39,736 --> 00:07:43,234
we have the project. In the project, we focus

98
00:07:43,352 --> 00:07:46,786
on the outcome. We want to solve

99
00:07:46,898 --> 00:07:50,102
the problem of the customer. We want

100
00:07:50,156 --> 00:07:53,750
to change the behavior of the

101
00:07:53,820 --> 00:07:57,282
customer. So it is very outcome

102
00:07:57,346 --> 00:08:00,330
focused and we want to understand the problem of the customer.

103
00:08:00,400 --> 00:08:04,582
So we want to deliver that one feature that solves

104
00:08:04,646 --> 00:08:08,266
the problem of the customer. So we

105
00:08:08,288 --> 00:08:12,062
wants to do products. And DevOps is

106
00:08:12,116 --> 00:08:15,694
very good when it comes to deliver products,

107
00:08:15,812 --> 00:08:19,102
because DevOps is a mindset and a culture and a set

108
00:08:19,156 --> 00:08:23,774
of technical practices which allows us to organize ourselves

109
00:08:23,902 --> 00:08:27,122
across the value stream, bringing all the

110
00:08:27,176 --> 00:08:31,314
people together which work on a product so

111
00:08:31,352 --> 00:08:35,078
that we can continuous deliver this

112
00:08:35,164 --> 00:08:38,642
product. When we talk about DevOps,

113
00:08:38,706 --> 00:08:42,082
we also need to talk about the people and the term

114
00:08:42,146 --> 00:08:44,518
DevOps. I already mentioned,

115
00:08:44,684 --> 00:08:48,074
DevOps aligns us across the value stream and

116
00:08:48,112 --> 00:08:51,706
brings all the people together. That work on a

117
00:08:51,728 --> 00:08:56,150
product, on a value stream. The term DevOps implies

118
00:08:56,310 --> 00:08:58,838
that it's development and operation.

119
00:08:59,014 --> 00:09:02,430
And of course there are some smart people out there which say no.

120
00:09:02,580 --> 00:09:05,998
Nowadays security is also very important.

121
00:09:06,084 --> 00:09:09,518
So we need to fix that term. Let's call it

122
00:09:09,604 --> 00:09:13,058
DevOps development, security and

123
00:09:13,144 --> 00:09:17,218
operation. How? Also this conference is called.

124
00:09:17,384 --> 00:09:20,980
And then there is another group of people which.

125
00:09:21,590 --> 00:09:25,618
No, no, the business is very important. The business,

126
00:09:25,784 --> 00:09:29,126
they are giving us the money and that's why we need

127
00:09:29,148 --> 00:09:33,618
to call it Bisdev Ops, which is business development and operation.

128
00:09:33,794 --> 00:09:36,482
And you can see this discussion leads nowhere.

129
00:09:36,626 --> 00:09:39,846
We need a term like Devsec bids,

130
00:09:39,878 --> 00:09:43,514
arc comp, QA ops. And I'm pretty sure I have

131
00:09:43,552 --> 00:09:46,886
forgotten someone. We can also call it DevOps

132
00:09:46,918 --> 00:09:51,466
or dev starops, or we just call it DevOps because DevOps

133
00:09:51,578 --> 00:09:55,054
is about bringing all the people, process and technology

134
00:09:55,172 --> 00:09:58,926
together to continuous deliver value. This is

135
00:09:59,028 --> 00:10:02,834
what DevOps is. So why should

136
00:10:02,872 --> 00:10:07,586
you care about DevOps? Now in the year 2000,

137
00:10:07,768 --> 00:10:12,020
some startups with funny names like Google,

138
00:10:12,630 --> 00:10:16,214
Facebook, Amazon, Netflix, they started to

139
00:10:16,252 --> 00:10:20,370
use DevOps practices. Nowadays they are dominating

140
00:10:20,450 --> 00:10:24,162
the market at the moment. You can clearly

141
00:10:24,226 --> 00:10:28,090
see that Tesla, SpaceX, Weimo is

142
00:10:28,160 --> 00:10:31,914
also using these techniques to create

143
00:10:32,032 --> 00:10:35,878
cyberphysical systems. So systems which have hardware,

144
00:10:35,974 --> 00:10:39,158
software and electronics in there. And I'm

145
00:10:39,174 --> 00:10:43,214
pretty sure in five years we will see that these companies

146
00:10:43,332 --> 00:10:46,494
are dominating the market. Do you want to get

147
00:10:46,532 --> 00:10:51,262
an example here you get an example of

148
00:10:51,316 --> 00:10:54,994
Elon Musk, which is tweeting about the

149
00:10:55,032 --> 00:10:59,042
self driving release of his

150
00:10:59,096 --> 00:11:02,366
software. So he's

151
00:11:02,398 --> 00:11:06,066
tweeting on the 7 October 2029

152
00:11:06,168 --> 00:11:09,666
that FSD, better 10.2, will be rolled

153
00:11:09,698 --> 00:11:13,398
out to roughly 1000 owners with a perfect

154
00:11:13,484 --> 00:11:17,026
safety score. What does that mean for us?

155
00:11:17,148 --> 00:11:20,954
It means that he has the

156
00:11:20,992 --> 00:11:24,266
software modernized in the cars, so there

157
00:11:24,288 --> 00:11:28,266
is a module for self driving and he can update that

158
00:11:28,368 --> 00:11:31,758
over the air. It also means that

159
00:11:31,844 --> 00:11:35,166
he is constantly monitoring how people are

160
00:11:35,188 --> 00:11:39,070
driving and he can distinguish between people

161
00:11:39,140 --> 00:11:42,930
who drive very good and people who drive

162
00:11:43,000 --> 00:11:46,686
not so good. And he is able to target

163
00:11:46,798 --> 00:11:50,580
a certain group of people based on that data.

164
00:11:51,190 --> 00:11:54,210
This is a so called cannery release.

165
00:11:54,810 --> 00:11:58,534
Now, on the 15 October he then

166
00:11:58,572 --> 00:12:02,422
tweets, everything was okay with the 10.2

167
00:12:02,556 --> 00:12:06,790
release and we are releasing now 10.3

168
00:12:06,940 --> 00:12:09,820
to a larger group of people.

169
00:12:11,150 --> 00:12:15,254
Again, this means that he was able to monitor

170
00:12:15,382 --> 00:12:19,682
the system, or Tesla was able to monitor these cars.

171
00:12:19,846 --> 00:12:22,990
Then on the 24 October he says,

172
00:12:23,060 --> 00:12:26,926
ooh, there was some problems with the

173
00:12:26,948 --> 00:12:30,926
10.3 release. We are going to roll back

174
00:12:31,108 --> 00:12:34,466
to 10.2. Now here we

175
00:12:34,488 --> 00:12:38,466
need to quickly stop. So here we talk about

176
00:12:38,568 --> 00:12:42,370
cars on the road which are regulated and

177
00:12:42,440 --> 00:12:46,694
he is able to do rollback of

178
00:12:46,732 --> 00:12:50,774
the software. Many companies are not in that position to

179
00:12:50,812 --> 00:12:55,106
do that, but he does that with hardware and software.

180
00:12:55,298 --> 00:12:58,442
Not even 24 hours later he says,

181
00:12:58,496 --> 00:13:03,740
oh, everything is okay. We are going to roll out 10.3.1

182
00:13:04,430 --> 00:13:08,106
with the bug fix and we do a fix

183
00:13:08,208 --> 00:13:12,154
forward. So really amazing what Tesla

184
00:13:12,202 --> 00:13:16,014
is able to do there. So to be able

185
00:13:16,132 --> 00:13:20,030
to do such things you need

186
00:13:20,100 --> 00:13:23,854
DevOps. And DevOps has been analyzed

187
00:13:23,982 --> 00:13:27,406
scientifically with the book the Science

188
00:13:27,438 --> 00:13:31,362
of DevOps accelerate which I can highly recommend

189
00:13:31,496 --> 00:13:35,350
to you to read. In this book they have found

190
00:13:35,420 --> 00:13:39,030
out 24 key capabilities which

191
00:13:39,100 --> 00:13:42,950
drive improvements in software delivery performance.

192
00:13:44,330 --> 00:13:49,050
They have categorized these 24 key capabilities

193
00:13:50,510 --> 00:13:54,134
in five categories. There is the continuous delivery

194
00:13:54,182 --> 00:13:57,626
capability where it says you need to have everything

195
00:13:57,728 --> 00:14:00,794
under version control. You need to have deployment automation,

196
00:14:00,922 --> 00:14:04,302
continuous integration. So reintegrating the code,

197
00:14:04,436 --> 00:14:07,934
trunk based development. Hey, science has

198
00:14:07,972 --> 00:14:10,958
found out that trunk based development is the way to go.

199
00:14:11,044 --> 00:14:14,382
Just to say then test automation,

200
00:14:14,526 --> 00:14:18,546
test data management, shift left on security and the

201
00:14:18,568 --> 00:14:22,434
continuous delivery capability. So this

202
00:14:22,472 --> 00:14:25,734
is very important then based on that you need to have

203
00:14:25,772 --> 00:14:30,146
some architecture capability like loosely coupled architecture

204
00:14:30,258 --> 00:14:34,758
and empowered teams. I always say you should create

205
00:14:34,924 --> 00:14:38,806
a loosely coupled architecture around modules with clear inputs

206
00:14:38,838 --> 00:14:43,014
and clear outputs with teams of maximum

207
00:14:43,142 --> 00:14:46,230
five people. Then they are also empowered

208
00:14:46,310 --> 00:14:49,982
and they can deliver continuously. Then we have the product

209
00:14:50,036 --> 00:14:54,266
and process capabilities with customer feedback, value stream

210
00:14:54,378 --> 00:14:57,962
mapping. So organizing a rod across the value stream,

211
00:14:58,026 --> 00:15:02,030
working in small batches and team experimentation.

212
00:15:02,710 --> 00:15:06,142
Then the lean management and monitoring capability.

213
00:15:06,286 --> 00:15:09,790
And here very important. The scientists

214
00:15:09,870 --> 00:15:13,118
has found out that change approval boards

215
00:15:13,214 --> 00:15:16,978
are in the best case for nothing. In the worst case

216
00:15:17,064 --> 00:15:20,454
they will slow you down very very

217
00:15:20,572 --> 00:15:24,214
much so. There is not a benefit in

218
00:15:24,252 --> 00:15:26,630
having change approval boards.

219
00:15:27,550 --> 00:15:31,222
Monitoring is very important also for the protective

220
00:15:31,366 --> 00:15:35,018
notification, so that you find the box before

221
00:15:35,184 --> 00:15:39,350
the clients do that. Then working process limits

222
00:15:39,430 --> 00:15:43,006
and visualizing the works. This is the Kanban boards and

223
00:15:43,108 --> 00:15:46,974
also the scrum boards. Then the cultural capabilities are very

224
00:15:47,012 --> 00:15:51,214
interesting. There you have the western organizational culture where

225
00:15:51,252 --> 00:15:54,814
we distinguish between three different types

226
00:15:54,862 --> 00:15:58,990
of companies. There is the pathological

227
00:15:59,070 --> 00:16:02,830
company, there is the bureaucratic company and there is the gross

228
00:16:02,910 --> 00:16:05,974
company. Pathologically there,

229
00:16:06,092 --> 00:16:09,526
when an error or when a failure happens,

230
00:16:09,708 --> 00:16:13,718
the person who reports the failure or has done the failure will get

231
00:16:13,804 --> 00:16:17,914
shot. In the bureaucratic company,

232
00:16:18,112 --> 00:16:21,494
the person who has done the failure or has reported

233
00:16:21,542 --> 00:16:24,698
the failure will go through

234
00:16:24,784 --> 00:16:28,166
bureaucratic, long lasting processes.

235
00:16:28,278 --> 00:16:32,474
And in the growth companies, when someone reports failure

236
00:16:32,522 --> 00:16:35,950
or has done a failure, he will get

237
00:16:36,020 --> 00:16:38,990
celebrated because everybody has learned something.

238
00:16:39,060 --> 00:16:42,350
And of course all of the companies wants to be

239
00:16:42,500 --> 00:16:46,466
in these gross companies, but usually companies

240
00:16:46,568 --> 00:16:49,954
are bureaucratic. This leads us

241
00:16:49,992 --> 00:16:52,980
to supported learning. You want to continuous learn,

242
00:16:53,510 --> 00:16:57,586
collaborate across the teams, you wants to have job satisfaction.

243
00:16:57,698 --> 00:17:01,330
And for all of that you need to have transformational

244
00:17:01,410 --> 00:17:04,898
leadership. So these 24 key capabilities,

245
00:17:04,994 --> 00:17:08,950
they are very, very important when it comes to architect

246
00:17:09,030 --> 00:17:12,682
for continuous delivery. And you will see some of these

247
00:17:12,736 --> 00:17:16,554
key capabilities. I will pick and dive a little

248
00:17:16,592 --> 00:17:20,860
bit deeper in my presentation today.

249
00:17:22,190 --> 00:17:26,426
Already identifying these 24 key capabilities

250
00:17:26,538 --> 00:17:30,270
was quite amazing. But they also draw that

251
00:17:30,340 --> 00:17:34,450
picture which you can see here. And they also found

252
00:17:34,520 --> 00:17:38,626
out the relationship between these key

253
00:17:38,728 --> 00:17:42,354
capabilities. I usually say this is one of

254
00:17:42,392 --> 00:17:45,686
the most important pictures when you are going to do a

255
00:17:45,708 --> 00:17:49,986
DevOps transformation or when you architect for continuous delivery,

256
00:17:50,098 --> 00:17:54,070
because it shows you on the left side,

257
00:17:54,220 --> 00:17:57,994
sorry, on the right side, what you want to achieve or

258
00:17:58,032 --> 00:18:01,530
what you can achieve when you do the things

259
00:18:01,680 --> 00:18:05,466
on the left side. And this is a

260
00:18:05,488 --> 00:18:09,970
very important picture when you are going to architect for continuous delivery.

261
00:18:10,070 --> 00:18:13,326
So with that, what are the

262
00:18:13,348 --> 00:18:17,582
benefits of DevOps? Also again here science has

263
00:18:17,636 --> 00:18:21,354
looked at that, there is the state of DevOps reports,

264
00:18:21,402 --> 00:18:24,622
which is done on a yearly basis.

265
00:18:24,766 --> 00:18:28,482
And here we are going to compare the

266
00:18:28,536 --> 00:18:31,986
low performer versus the high performer. And you can

267
00:18:32,008 --> 00:18:35,602
see the numbers are massive on deployment

268
00:18:35,666 --> 00:18:39,554
frequency, lead time and so on. This all boils

269
00:18:39,602 --> 00:18:44,130
down to the benefits which all of the CIOs

270
00:18:44,210 --> 00:18:48,266
nowadays wants. They want to have a faster time to market,

271
00:18:48,368 --> 00:18:52,534
more value for money, higher quality, higher customer satisfaction

272
00:18:52,582 --> 00:18:56,074
and top qualified employees. And these are the

273
00:18:56,112 --> 00:19:00,010
benefits you get when you implement DevOps.

274
00:19:01,330 --> 00:19:04,858
So now when you are going to implement DevOps,

275
00:19:04,954 --> 00:19:09,182
this is nothing else than modern software development across

276
00:19:09,316 --> 00:19:13,014
the value stream. For that we have here this infinity

277
00:19:13,082 --> 00:19:16,962
symbol, this DevOps symbol where you can see that

278
00:19:17,016 --> 00:19:20,302
in the planning step you need to have agile requirements,

279
00:19:20,366 --> 00:19:24,570
engineering and backlog management. You need to have in the coding,

280
00:19:24,670 --> 00:19:28,838
agile software engineering practices which you should apply.

281
00:19:29,004 --> 00:19:32,230
Everything and really everything needs to be under

282
00:19:32,300 --> 00:19:35,986
version control so that you can fix forward or roll

283
00:19:36,018 --> 00:19:39,626
back things. And then you

284
00:19:39,648 --> 00:19:43,942
have in the build step the continuous integration that you're continuously integrating

285
00:19:44,086 --> 00:19:48,460
build and test automation and also the application security

286
00:19:48,830 --> 00:19:52,494
in the testing. It's very important to have test automation and

287
00:19:52,532 --> 00:19:56,606
test data management that you have the synthetic test data and not

288
00:19:56,708 --> 00:20:00,666
use the production data in the deploy. We need to have a staging

289
00:20:00,698 --> 00:20:05,166
environment, a production near environment and of course deployment automation

290
00:20:05,278 --> 00:20:08,866
which needs us to release. In DevOps, we are

291
00:20:08,888 --> 00:20:11,678
distinguishing between deployment and release.

292
00:20:11,774 --> 00:20:15,454
Deployment is bringing the code into production with the feature toggle

293
00:20:15,502 --> 00:20:19,446
off and releasing means we are going to switch on the

294
00:20:19,468 --> 00:20:23,094
feature toggle. This is exactly what Elon Musk did

295
00:20:23,212 --> 00:20:26,934
with Tesla. He switched on the feature toggle for a

296
00:20:26,972 --> 00:20:30,682
certain group, and this is called Canary releases. And you need to have

297
00:20:30,736 --> 00:20:34,342
feature toggles for that. And it enables you to do dark launch

298
00:20:34,406 --> 00:20:37,626
because he delivered of course that software to

299
00:20:37,728 --> 00:20:41,582
certain cars, but only a few of them were

300
00:20:41,636 --> 00:20:45,486
able to use that feature. This brings us to the

301
00:20:45,508 --> 00:20:49,598
operate where we want to have cross team collaboration, so that

302
00:20:49,684 --> 00:20:53,306
we really, across the team work together in

303
00:20:53,348 --> 00:20:57,182
resolving problems. And we need to have productive detection,

304
00:20:57,246 --> 00:21:01,202
which means we want to find the problems before our customers

305
00:21:01,336 --> 00:21:05,346
do. And for that we need to have a full stack

306
00:21:05,458 --> 00:21:09,122
telemetry with visual displays

307
00:21:09,186 --> 00:21:12,806
and federated monitoring so that we can make sense out

308
00:21:12,828 --> 00:21:16,902
of the data that we get. And this goes

309
00:21:16,956 --> 00:21:20,106
back into the agile planning and

310
00:21:20,208 --> 00:21:23,914
into the agile requirements engineering, because we should always

311
00:21:24,032 --> 00:21:27,866
base our decision on data numbers

312
00:21:27,968 --> 00:21:32,000
and facts that we get from our monitoring system.

313
00:21:32,770 --> 00:21:36,858
So the first thing I want to dive a little bit deeper

314
00:21:36,954 --> 00:21:40,430
is but in quality, because that is

315
00:21:40,500 --> 00:21:44,770
essential for architecting for continuous delivery.

316
00:21:46,470 --> 00:21:49,502
When you look at the Musk companies like SpaceX,

317
00:21:49,566 --> 00:21:53,860
Tesla, Neuralink, the boring company there,

318
00:21:54,570 --> 00:21:57,894
Elon Musk is investing into the

319
00:21:57,932 --> 00:22:01,634
new products and 50% of that invested

320
00:22:01,682 --> 00:22:05,670
money goes into automated testing, because only with

321
00:22:05,740 --> 00:22:08,870
automated testing you can deliver

322
00:22:08,950 --> 00:22:12,074
that fast innovation to the market.

323
00:22:12,192 --> 00:22:15,738
And this is quite a high number. I'm pretty sure

324
00:22:15,904 --> 00:22:19,982
that the numbers in your company are much lower

325
00:22:20,036 --> 00:22:22,320
than these 50%.

326
00:22:23,490 --> 00:22:26,814
So now we need to have a look at the

327
00:22:26,852 --> 00:22:30,574
testing. Usually we test in

328
00:22:30,612 --> 00:22:34,334
a v model, which you can see there where we have delayed

329
00:22:34,382 --> 00:22:37,666
feedback. Usually it happens that way that a

330
00:22:37,688 --> 00:22:40,926
requirements engineer is writing a feature,

331
00:22:41,118 --> 00:22:44,966
then another requirements engineer is writing a

332
00:22:44,988 --> 00:22:48,274
story, and finally a developer writes

333
00:22:48,322 --> 00:22:51,346
the code. If we are very lucky,

334
00:22:51,458 --> 00:22:55,462
then the developer also writes some tests for that

335
00:22:55,516 --> 00:22:59,194
code. Usually we are not that lucky in

336
00:22:59,232 --> 00:23:03,258
that model, and no test is written on code level.

337
00:23:03,424 --> 00:23:07,014
And then the story goes to a tester which tests

338
00:23:07,062 --> 00:23:10,826
the story, and then another tester will test the

339
00:23:10,848 --> 00:23:14,902
feature. Usually in between that writing

340
00:23:14,966 --> 00:23:18,522
a feature and write and testing the feature. It can easily

341
00:23:18,586 --> 00:23:22,010
be three months, six months or even a year.

342
00:23:22,180 --> 00:23:26,180
So it's delayed feedback. When we go into

343
00:23:26,870 --> 00:23:30,862
agile testing, which I highly recommend in a DevOps

344
00:23:30,926 --> 00:23:34,714
approach, then we are going to define the feature

345
00:23:34,782 --> 00:23:37,554
already with behavior driven development,

346
00:23:37,682 --> 00:23:41,170
where we define the acceptance criteria of a feature

347
00:23:41,250 --> 00:23:45,538
in a given when then form, given the following

348
00:23:45,714 --> 00:23:49,054
state, when the following action occurs,

349
00:23:49,122 --> 00:23:52,346
then I want to have that result. So when

350
00:23:52,368 --> 00:23:56,134
we have the acceptance criteria in that form, also for the stories,

351
00:23:56,262 --> 00:23:59,734
then it's very easy for us developers to create

352
00:23:59,872 --> 00:24:02,906
out of this specification,

353
00:24:03,098 --> 00:24:06,702
automated tests, always a good

354
00:24:06,756 --> 00:24:10,494
tool for that. And what we are doing

355
00:24:10,532 --> 00:24:14,286
there is called test driven development.

356
00:24:14,318 --> 00:24:18,260
So we write first the test, even when we don't have

357
00:24:20,790 --> 00:24:23,490
the acceptance criteria in a BDD form,

358
00:24:23,640 --> 00:24:27,398
we should always write first the test,

359
00:24:27,564 --> 00:24:29,430
then the implementation,

360
00:24:32,170 --> 00:24:36,166
and then do the refactoring. This is what TDD is

361
00:24:36,188 --> 00:24:40,106
all about. You can see that in there. So you

362
00:24:40,128 --> 00:24:43,914
should always write the test, then the code. And this means we

363
00:24:43,952 --> 00:24:47,340
are shifting left, the whole

364
00:24:48,030 --> 00:24:51,974
testing of story and also of

365
00:24:52,032 --> 00:24:55,534
a feature. And this is why we usually talk about the

366
00:24:55,572 --> 00:24:57,790
shift left in testing.

367
00:24:59,810 --> 00:25:03,540
For that we also need to have a look at the

368
00:25:03,990 --> 00:25:08,014
testing permit. Usually in traditional testing,

369
00:25:08,062 --> 00:25:11,570
the test pyramid looks like the one on the left side.

370
00:25:11,720 --> 00:25:15,734
You have slow and expensive end to end

371
00:25:15,772 --> 00:25:18,310
tests which are done manually.

372
00:25:19,130 --> 00:25:23,510
You have only some integration tests and

373
00:25:23,580 --> 00:25:27,170
very few unit tests which are fast and

374
00:25:27,260 --> 00:25:30,486
cheap when you apply HR testing.

375
00:25:30,598 --> 00:25:34,294
And you could see that when you have the specification of the acceptance

376
00:25:34,342 --> 00:25:37,466
criteria written in a BDD form. And when

377
00:25:37,488 --> 00:25:41,040
you apply test driven development. So always

378
00:25:41,570 --> 00:25:45,594
first write a test before the implementation. Then you get a massive

379
00:25:45,642 --> 00:25:49,182
amount of unit testing because everything is

380
00:25:49,236 --> 00:25:53,054
tested and some integration testing and only a few end

381
00:25:53,092 --> 00:25:57,106
to end tests. And this brings us to when you

382
00:25:57,128 --> 00:25:59,570
look at the traditional test permit,

383
00:26:01,350 --> 00:26:05,330
the focus is on finding every buck

384
00:26:05,490 --> 00:26:09,126
where on the agile testing permit there

385
00:26:09,228 --> 00:26:12,534
the focus is on preventing bucks. So it's a

386
00:26:12,572 --> 00:26:16,390
risk based approach which we are applying

387
00:26:16,730 --> 00:26:19,962
again when we go into our

388
00:26:20,016 --> 00:26:23,818
infinity symbol of DevOps. This means that in

389
00:26:23,824 --> 00:26:28,010
the planning we are doing behavior driven development. So we specify

390
00:26:28,910 --> 00:26:32,830
our acceptance criteria already in a form

391
00:26:32,900 --> 00:26:37,038
which are testable. Of course, definition of ready is

392
00:26:37,124 --> 00:26:40,654
very important in that case. And then when we go to

393
00:26:40,692 --> 00:26:44,450
code, then we apply test driven development. We always

394
00:26:44,600 --> 00:26:49,474
write first the test and then the

395
00:26:49,512 --> 00:26:53,540
code for that. This brings us to the build.

396
00:26:54,150 --> 00:26:57,958
There we are using unit testing of course,

397
00:26:58,044 --> 00:27:02,306
and also the application security. So we do container

398
00:27:02,338 --> 00:27:06,214
scanning, license scanning and all of that. And then in

399
00:27:06,252 --> 00:27:09,898
the testing we of course have the definition of done,

400
00:27:10,064 --> 00:27:13,046
which is important, and the whole test automation,

401
00:27:13,158 --> 00:27:17,142
including also the test data management with the synthetic

402
00:27:17,206 --> 00:27:21,014
test data. When we then deploy production testing

403
00:27:21,062 --> 00:27:25,342
is a very important step that we are having. Then even

404
00:27:25,396 --> 00:27:28,906
if we don't release, we should always apply a subset

405
00:27:28,938 --> 00:27:32,442
of the tests also in production when we are going to release,

406
00:27:32,506 --> 00:27:35,490
then cross team collaboration is again important.

407
00:27:35,640 --> 00:27:38,866
And of course in operate we want to detect the

408
00:27:38,888 --> 00:27:42,146
problems before our clients do, which leads us to

409
00:27:42,168 --> 00:27:47,206
the continuous monitoring of what we have done so that we

410
00:27:47,228 --> 00:27:51,400
have the data which is needed for the planning step.

411
00:27:53,770 --> 00:27:57,138
So building quality is

412
00:27:57,244 --> 00:28:01,238
one cornerstone which is important for continuous

413
00:28:01,334 --> 00:28:04,922
delivery, for architecting, for continuous delivery. What is also

414
00:28:04,976 --> 00:28:08,538
important is built in security. This is

415
00:28:08,704 --> 00:28:12,960
really an important thing. And here we are in the Conf

416
00:28:13,410 --> 00:28:17,306
24 sorry 42 about devsec

417
00:28:17,338 --> 00:28:21,322
ops. So when we look at continuous

418
00:28:21,386 --> 00:28:24,274
delivery pipeline then usually we talk.

419
00:28:24,312 --> 00:28:27,774
But the CI CD pipeline which is continuous integration

420
00:28:27,822 --> 00:28:31,486
and continuous deployment, I usually say it's

421
00:28:31,518 --> 00:28:34,930
far more. It's your continuous delivery pipeline because

422
00:28:35,000 --> 00:28:39,282
in the beginning you have the continuous exploration with ideation

423
00:28:39,346 --> 00:28:42,966
and backlog management and requirements engineering, and at the

424
00:28:42,988 --> 00:28:46,150
end you have the release on demand where you are going to switch on

425
00:28:46,220 --> 00:28:49,746
the feature tofu. So this is the continuous delivery

426
00:28:49,778 --> 00:28:53,930
pipeline. And you can see in such a continuous delivery pipeline you have quite

427
00:28:54,000 --> 00:28:57,674
a lot of tools which need to be integrated with each

428
00:28:57,712 --> 00:29:01,710
other. Of course there are avengers out there which promise you

429
00:29:01,780 --> 00:29:05,626
to cover the whole continuous

430
00:29:05,738 --> 00:29:10,634
delivery pipeline. They are coming with their DevOps

431
00:29:10,762 --> 00:29:14,690
platform. Yeah, well when you take a close

432
00:29:14,760 --> 00:29:18,770
look, and I have done that in a video series with

433
00:29:18,840 --> 00:29:22,146
25 videos, I have done

434
00:29:22,168 --> 00:29:26,050
that together with public Stego and I analyzed

435
00:29:26,130 --> 00:29:29,746
git how we can implement devsecops pipeline

436
00:29:29,778 --> 00:29:33,334
with GitHub and also with GitLab. And you can

437
00:29:33,372 --> 00:29:36,694
see how such a pipeline can look like.

438
00:29:36,732 --> 00:29:39,994
You have of course merge request. You use the

439
00:29:40,032 --> 00:29:43,386
software composition analysis, you wants to know what kind

440
00:29:43,408 --> 00:29:46,874
of libraries are there and what vulnerabilities you

441
00:29:46,912 --> 00:29:50,574
have in the libraries which you are using. License compliance is

442
00:29:50,612 --> 00:29:54,334
very important. What kind of licenses do you use in

443
00:29:54,372 --> 00:29:58,142
all of these libraries? And also

444
00:29:58,276 --> 00:30:02,266
the static application security testing. We are

445
00:30:02,308 --> 00:30:06,702
going to statically analyze our code. The container scanning

446
00:30:06,846 --> 00:30:10,882
is important and we need to scan our code for

447
00:30:10,936 --> 00:30:14,838
secrets. Then when we have deployed, then of

448
00:30:14,844 --> 00:30:18,934
course we apply dynamic application security testing where

449
00:30:18,972 --> 00:30:22,582
we try to break our application

450
00:30:22,716 --> 00:30:26,086
security wise. And of course when we are in

451
00:30:26,108 --> 00:30:29,830
production, we need to apply scheduled pipeline

452
00:30:29,910 --> 00:30:33,866
where we execute the pipeline again and again, because in

453
00:30:33,888 --> 00:30:37,014
the meantime with that version which is in production,

454
00:30:37,142 --> 00:30:40,434
there could be already some vulnerabilities.

455
00:30:40,582 --> 00:30:44,250
As said with Patrick Stego, I created

456
00:30:44,330 --> 00:30:48,030
25 videos all around how to create

457
00:30:48,180 --> 00:30:51,440
with GitLab and with GitHub such

458
00:30:52,150 --> 00:30:56,242
DevOps pipeline. And we are also comparing those

459
00:30:56,296 --> 00:30:58,580
two pipelines together.

460
00:30:59,270 --> 00:31:02,734
So this brings us again to our infinity

461
00:31:02,782 --> 00:31:06,138
symbol. When we are doing continuous security, then it's

462
00:31:06,174 --> 00:31:10,214
important in the planning that we do the threat modeling, so that we

463
00:31:10,252 --> 00:31:13,814
analyze what are the attack vectors, what are the

464
00:31:13,852 --> 00:31:18,214
threats which we have and how can we mitigate

465
00:31:18,262 --> 00:31:21,846
that. When we are going to code, we need to do merge

466
00:31:21,878 --> 00:31:23,850
requests or pull requests.

467
00:31:24,270 --> 00:31:27,626
Then when it comes to the build step,

468
00:31:27,728 --> 00:31:31,114
we apply application security in there everything is

469
00:31:31,152 --> 00:31:34,634
in there like security testing, soft license scanning,

470
00:31:34,682 --> 00:31:38,030
container scanning, secret detection, all of that.

471
00:31:38,180 --> 00:31:41,726
And then we apply dynamic application security

472
00:31:41,828 --> 00:31:45,460
testing. Of course in production we will do

473
00:31:45,830 --> 00:31:49,454
penetration testing and again we do cross team collaboration

474
00:31:49,502 --> 00:31:53,074
to find the problems. It is essential that we do

475
00:31:53,112 --> 00:31:57,686
proactive detection when we operate the

476
00:31:57,708 --> 00:32:00,946
product. We want to find security vulnerabilities

477
00:32:01,058 --> 00:32:04,294
before our customers do. And for that we need

478
00:32:04,332 --> 00:32:08,070
to continuous monitor our system security

479
00:32:08,140 --> 00:32:11,306
device. But not

480
00:32:11,328 --> 00:32:15,238
only security is important, also operability

481
00:32:15,414 --> 00:32:19,794
is a very important thing because in DevOps

482
00:32:19,862 --> 00:32:23,582
we want to do you build it, you run it,

483
00:32:23,716 --> 00:32:26,942
and this means, as I already mentioned,

484
00:32:27,076 --> 00:32:30,206
proactive detection. This means that

485
00:32:30,308 --> 00:32:34,350
our monitoring systems need to alert

486
00:32:34,430 --> 00:32:37,694
us about condition

487
00:32:37,822 --> 00:32:41,106
based on our tolerance thresholds, which we

488
00:32:41,128 --> 00:32:45,014
have. And for that we need to have a

489
00:32:45,052 --> 00:32:48,306
good monitoring system. Also disaster

490
00:32:48,338 --> 00:32:52,226
recovery is a very important trying. Usually disaster

491
00:32:52,258 --> 00:32:55,974
recovery procedures are not really in place

492
00:32:56,092 --> 00:32:59,894
and also not rehearsed on a regular basis.

493
00:33:00,022 --> 00:33:03,238
And of course based on that we need to have a notification

494
00:33:03,414 --> 00:33:07,050
strategy. I also mentioned cross team collaboration.

495
00:33:08,350 --> 00:33:12,858
What we don't want to have is that only operation

496
00:33:12,954 --> 00:33:17,070
takes care about the production and owns the incident process.

497
00:33:17,140 --> 00:33:21,134
We want that the team owns the

498
00:33:21,172 --> 00:33:25,054
production so that we can work across the value stream

499
00:33:25,182 --> 00:33:28,882
and that we together respond on

500
00:33:28,936 --> 00:33:32,430
production failures and also hold incidents

501
00:33:32,510 --> 00:33:34,130
post mortems.

502
00:33:35,210 --> 00:33:39,206
Now the monitoring, I already mentioned that

503
00:33:39,388 --> 00:33:43,240
this is a very important thing and I wants to quickly

504
00:33:43,690 --> 00:33:47,026
show you how this has evolved and why

505
00:33:47,148 --> 00:33:50,518
everyone is now talking about observability,

506
00:33:50,614 --> 00:33:54,614
because that's a cornerstone when you want to architect

507
00:33:54,742 --> 00:33:58,422
for operability. In the past we had two tier

508
00:33:58,486 --> 00:34:02,654
system, you had the UI and the database and there

509
00:34:02,772 --> 00:34:06,538
you used monitoring, you had the metrics.

510
00:34:06,634 --> 00:34:10,058
So like database

511
00:34:10,154 --> 00:34:13,858
size or file system size

512
00:34:14,024 --> 00:34:17,634
or even cpu metrics and you

513
00:34:17,672 --> 00:34:21,218
had your lock statements about the health of

514
00:34:21,384 --> 00:34:25,058
the application. These things we

515
00:34:25,144 --> 00:34:28,934
still have, but todays we have of course three

516
00:34:28,972 --> 00:34:33,074
tier application where you have a UI and a mobile

517
00:34:33,122 --> 00:34:36,694
application. Then you have can application server and behind that you have

518
00:34:36,732 --> 00:34:41,350
a database. Here you need to do application monitoring

519
00:34:41,430 --> 00:34:44,954
with traces because you need to know where wants the

520
00:34:44,992 --> 00:34:48,826
request coming from, UI mobile and of course you

521
00:34:48,848 --> 00:34:52,222
need to do infrastructure monitoring based

522
00:34:52,276 --> 00:34:56,238
on that because now you have not only a database, you also have an application

523
00:34:56,404 --> 00:35:00,874
server. And then nowadays we have distributed

524
00:35:00,922 --> 00:35:04,334
service oriented application where you have UI,

525
00:35:04,382 --> 00:35:08,226
mobile, third party APIs and so

526
00:35:08,248 --> 00:35:11,634
on. Usually you have an

527
00:35:11,672 --> 00:35:15,958
application gateway, then you have different services

528
00:35:16,124 --> 00:35:19,382
or even microservices and behind that

529
00:35:19,436 --> 00:35:22,674
you have databases. And this puts

530
00:35:22,722 --> 00:35:26,326
quite a lot of challenge on that because here you

531
00:35:26,348 --> 00:35:29,850
can have some weird behaviors in such

532
00:35:29,920 --> 00:35:33,370
a distributed system and here we are talking about

533
00:35:33,520 --> 00:35:37,546
observability also here we usually also use

534
00:35:37,648 --> 00:35:40,942
aiops to make sense out of the

535
00:35:40,996 --> 00:35:44,446
massive amount of data that we are getting out of

536
00:35:44,468 --> 00:35:45,040
that.

537
00:35:47,490 --> 00:35:50,350
So we need to architect for operability.

538
00:35:50,930 --> 00:35:54,382
This leads us to this infinity symbol where you can see

539
00:35:54,436 --> 00:35:57,754
when we are planning, we already need to architect

540
00:35:57,802 --> 00:36:01,554
for operability. We always when we are architecting a system or

541
00:36:01,592 --> 00:36:05,442
a subsystem or a microservice, we need to think by ourselves how

542
00:36:05,496 --> 00:36:09,318
is that going to be operated in

543
00:36:09,404 --> 00:36:13,478
production and based off that we define the architecture for that.

544
00:36:13,644 --> 00:36:18,566
Then when we are going to code we need to build in application telemetry.

545
00:36:18,678 --> 00:36:21,674
Also the developer needs to think about that.

546
00:36:21,792 --> 00:36:25,130
How do I get the data out of that into

547
00:36:25,200 --> 00:36:28,426
the logging systems? We need to

548
00:36:28,448 --> 00:36:32,318
apply infrastructure as code. In the end everything

549
00:36:32,484 --> 00:36:36,014
should be code. This brings us to the

550
00:36:36,052 --> 00:36:39,726
build step where we have the continuous integration again build and

551
00:36:39,748 --> 00:36:42,900
test automation and also application security.

552
00:36:43,430 --> 00:36:46,990
Test automation is applied and test data management.

553
00:36:47,150 --> 00:36:51,246
This brings us to deploy where we need to have a production

554
00:36:51,358 --> 00:36:54,658
near environment also to test

555
00:36:54,744 --> 00:36:58,226
the operation part including also test

556
00:36:58,328 --> 00:37:01,654
automation, deployment automation and

557
00:37:01,772 --> 00:37:05,094
of course we need to have canary releases with feature toggles and

558
00:37:05,132 --> 00:37:08,762
dark launches in operate. We need cross team

559
00:37:08,816 --> 00:37:12,666
collaboration, approach diff detection. And it is absolutely

560
00:37:12,768 --> 00:37:16,214
essential that in the monitor step we have that full stack telemetry

561
00:37:16,262 --> 00:37:20,250
with the visual displays and federated monitoring.

562
00:37:21,490 --> 00:37:25,502
So now we saw that we

563
00:37:25,556 --> 00:37:30,160
need to continuously test do continuous security

564
00:37:31,410 --> 00:37:34,914
architect for probability. This is quite a

565
00:37:34,952 --> 00:37:38,146
lot to do and therefore we

566
00:37:38,168 --> 00:37:41,860
are going now into the chapter about building a platform.

567
00:37:42,310 --> 00:37:45,906
Now as I said, modern software development is

568
00:37:45,928 --> 00:37:49,574
a continuous process across that value stream that you see there.

569
00:37:49,692 --> 00:37:52,966
And you remember that I said DevOps is

570
00:37:52,988 --> 00:37:56,422
a mindset and a set and a culture and a set

571
00:37:56,476 --> 00:37:59,610
of technical practices. And these are

572
00:37:59,680 --> 00:38:03,260
the technical practices which we need to apply

573
00:38:03,790 --> 00:38:07,754
in order to continuously deliver value and in order to

574
00:38:07,792 --> 00:38:11,680
architect for continuous delivery. And yes,

575
00:38:12,130 --> 00:38:15,534
this is quite a lot which we need to

576
00:38:15,572 --> 00:38:17,680
do. That's wow.

577
00:38:18,770 --> 00:38:22,174
Now it even gets harder because

578
00:38:22,292 --> 00:38:26,082
you remember we said you build it, you run it, which means

579
00:38:26,216 --> 00:38:29,790
you take care about the infrastructure cloud on prem,

580
00:38:29,950 --> 00:38:32,766
you need to take care about the runtime Docker,

581
00:38:32,798 --> 00:38:35,942
Kubernetes, VM, you need to take care

582
00:38:35,996 --> 00:38:39,634
about the CI, CD pipeline, GitLab, GitHub, Circle CI

583
00:38:39,682 --> 00:38:42,834
or whatever you want to use monitoring,

584
00:38:42,962 --> 00:38:46,646
tomatoes, dynatrace, Datadoc and whatever you

585
00:38:46,668 --> 00:38:50,314
want to use security with sneak, Sonarcube and

586
00:38:50,352 --> 00:38:54,262
so on. And you also need to have tools like Gyra,

587
00:38:54,326 --> 00:38:57,594
confluence, Miro and so on. And of

588
00:38:57,632 --> 00:39:01,006
course you need to apply cost management across

589
00:39:01,108 --> 00:39:03,440
that, especially when you are in the cloud.

590
00:39:03,810 --> 00:39:07,354
And maintenance of all of these tools

591
00:39:07,402 --> 00:39:11,038
is also very important. And you need to provide

592
00:39:11,124 --> 00:39:15,218
access and security to all of these tools for

593
00:39:15,304 --> 00:39:18,180
your developer or your team members.

594
00:39:18,550 --> 00:39:22,002
And yeah, just forgot you also

595
00:39:22,056 --> 00:39:25,526
wants to implement an application. And there it

596
00:39:25,548 --> 00:39:29,110
is, your application where you want to implement some

597
00:39:29,180 --> 00:39:32,582
features. And yeah, this is quite

598
00:39:32,636 --> 00:39:36,098
a lot for implementing just a feature.

599
00:39:36,274 --> 00:39:38,938
And the thing is,

600
00:39:39,104 --> 00:39:42,710
every team has such a stack.

601
00:39:42,870 --> 00:39:46,170
Usually in bigger companies when you scale that up,

602
00:39:46,240 --> 00:39:49,670
when you scale up DevOps, this is quite a lot

603
00:39:49,760 --> 00:39:53,774
which you see there. And you can see

604
00:39:53,892 --> 00:39:57,710
this leads to some inconsistencies and redundancies

605
00:39:58,210 --> 00:40:01,230
when it comes to these platforms.

606
00:40:02,070 --> 00:40:05,938
Every team reinvents the wheel. There is also a lack of

607
00:40:06,024 --> 00:40:09,234
operational experience, no synergies are

608
00:40:09,272 --> 00:40:12,946
used, and it's not easy to move people

609
00:40:13,128 --> 00:40:17,010
across these teams. And the complexity of these tools

610
00:40:17,090 --> 00:40:21,090
is very high. And this is why everybody speaks

611
00:40:21,170 --> 00:40:25,414
about the cognitive load which is very high

612
00:40:25,532 --> 00:40:28,922
on these people. So now we are

613
00:40:28,976 --> 00:40:32,726
here, are we doomed? Can we do DevOps

614
00:40:32,758 --> 00:40:36,250
or should we go back to the silo organization?

615
00:40:36,990 --> 00:40:40,638
No, let me quickly explain how we do that

616
00:40:40,724 --> 00:40:44,462
nowadays. So nowadays we are talking about

617
00:40:44,596 --> 00:40:48,174
platform engineering. Platform engineering is here to

618
00:40:48,212 --> 00:40:51,582
enable DevOps or devsecops in

619
00:40:51,636 --> 00:40:55,714
the product teams. What you have is you have a platform

620
00:40:55,832 --> 00:40:59,714
team which builds a product. This is called the

621
00:40:59,752 --> 00:41:03,170
platform. So there you see it, it's an example.

622
00:41:03,320 --> 00:41:07,174
This platform provides application runtime. So the

623
00:41:07,212 --> 00:41:10,962
environments where things are run, for example a Kubernetes

624
00:41:11,026 --> 00:41:16,902
cluster, and it

625
00:41:16,956 --> 00:41:20,538
also has devsecops built in. So there are

626
00:41:20,624 --> 00:41:24,502
already devsecops things implemented

627
00:41:24,566 --> 00:41:28,262
like license scanning, like container scanning

628
00:41:28,326 --> 00:41:32,270
in the platform. So a lot of standardization is given

629
00:41:32,340 --> 00:41:36,206
by the platform. You also have access and identity in

630
00:41:36,228 --> 00:41:40,222
there, centralized security with web

631
00:41:40,276 --> 00:41:44,146
application firewalls, gateways and so on. And of

632
00:41:44,168 --> 00:41:48,318
course the whole monitoring and observability stack is delivered

633
00:41:48,414 --> 00:41:51,986
by the platform. And of course with such a platform you can

634
00:41:52,008 --> 00:41:56,150
also implement funny things like AI and large

635
00:41:56,220 --> 00:41:59,510
language models. So this enables quite

636
00:41:59,580 --> 00:42:03,094
a lot. As I said, this is a product that

637
00:42:03,132 --> 00:42:06,962
is given sort of also a service that is given

638
00:42:07,116 --> 00:42:10,678
to the product teams. The product teams,

639
00:42:10,774 --> 00:42:14,710
they are building and running and maintaining

640
00:42:14,790 --> 00:42:18,218
their products on top of this platform.

641
00:42:18,384 --> 00:42:22,026
This does not mean that the platform team creates the CI

642
00:42:22,058 --> 00:42:24,990
CD pipeline or monitors the application. No,

643
00:42:25,060 --> 00:42:28,430
absolutely not. The teams are doing that.

644
00:42:28,580 --> 00:42:33,054
The platform team just gives them the platform

645
00:42:33,252 --> 00:42:37,438
where they can build up on that a standardized

646
00:42:37,534 --> 00:42:41,410
platform which generates value for these teams.

647
00:42:41,990 --> 00:42:45,054
And this means that the product team

648
00:42:45,112 --> 00:42:48,774
can do DevOps, the cognitive load is lower, so they

649
00:42:48,812 --> 00:42:51,640
can generate value for their customers.

650
00:42:52,010 --> 00:42:55,618
And the platform team generates value for the teams.

651
00:42:55,714 --> 00:42:59,510
Now some of you might say this is not a silo.

652
00:42:59,590 --> 00:43:03,898
No, it is not because the platform team

653
00:43:04,064 --> 00:43:07,850
creates a product. So a service for

654
00:43:07,920 --> 00:43:11,998
the auto teams, the teams, they need

655
00:43:12,084 --> 00:43:15,710
to operate their own product so they have

656
00:43:15,780 --> 00:43:20,350
the operation directly in there. The platform team

657
00:43:20,500 --> 00:43:24,626
just creates the platform so that

658
00:43:24,728 --> 00:43:28,478
the teams are enabled to deliver

659
00:43:28,574 --> 00:43:31,954
their products. This is a very important thing.

660
00:43:32,072 --> 00:43:35,494
If you don't follow this rule, then of course you

661
00:43:35,532 --> 00:43:39,366
will just introduce another silo and another wall

662
00:43:39,468 --> 00:43:43,030
of computation. When you look at

663
00:43:43,100 --> 00:43:46,882
the market and also at Gartner,

664
00:43:47,026 --> 00:43:50,634
BCG, McKinsey, all of them are

665
00:43:50,752 --> 00:43:54,746
saying that platform engineering or building such a platform

666
00:43:54,928 --> 00:43:58,874
is very important in the upcoming next

667
00:43:58,992 --> 00:44:02,622
five years, which we will have where they,

668
00:44:02,676 --> 00:44:06,320
for example will say that a lot of companies

669
00:44:06,770 --> 00:44:10,830
will build up these platforms. So clear

670
00:44:10,900 --> 00:44:14,030
recommendation into this direction.

671
00:44:14,190 --> 00:44:17,522
This brings us to the summary how to

672
00:44:17,576 --> 00:44:20,414
architect for continuous delivery.

673
00:44:20,542 --> 00:44:24,402
First of all, you need to go away from

674
00:44:24,536 --> 00:44:28,658
that project's mindset into a product's mindset.

675
00:44:28,754 --> 00:44:33,110
We wants to put the customer into the center and

676
00:44:33,180 --> 00:44:36,774
we want to solve the problem of the customer.

677
00:44:36,892 --> 00:44:41,100
We don't want to do projects for our customers.

678
00:44:41,470 --> 00:44:44,906
Then it is very important to apply DevOps or

679
00:44:44,928 --> 00:44:48,250
devsecops. This is about bringing all the people,

680
00:44:48,320 --> 00:44:52,718
process and technology together to continuously deliver value.

681
00:44:52,884 --> 00:44:56,954
And for that we need to apply continuous testing

682
00:44:57,002 --> 00:45:00,510
and building quality. We need to build the quality right

683
00:45:00,580 --> 00:45:04,210
in from the beginning. We need to shift left the whole

684
00:45:04,360 --> 00:45:07,634
testing so that already when we

685
00:45:07,672 --> 00:45:11,042
are writing our specification, we write it

686
00:45:11,096 --> 00:45:14,514
in a form that is testable. And this

687
00:45:14,552 --> 00:45:17,910
brings us to continuous security. Again here we are also

688
00:45:17,980 --> 00:45:21,878
shifting left the whole security. It is built in

689
00:45:21,964 --> 00:45:25,254
directly. When we architect, we do

690
00:45:25,292 --> 00:45:28,874
threat modeling and then when we are going

691
00:45:28,912 --> 00:45:32,154
to code there, we are going to test quite

692
00:45:32,192 --> 00:45:35,740
a lot of things on security problems.

693
00:45:36,190 --> 00:45:39,546
And the fourth trying is you can see this

694
00:45:39,568 --> 00:45:42,878
is quite a lot of things that teams need to do.

695
00:45:42,964 --> 00:45:46,366
This means we need to standardize all of that.

696
00:45:46,468 --> 00:45:49,994
And here we are going to apply platform engineering

697
00:45:50,042 --> 00:45:53,506
and creating a platform for our

698
00:45:53,608 --> 00:45:56,530
product teams. As you can see,

699
00:45:56,680 --> 00:45:59,966
we are entering the age of industrialization,

700
00:46:00,078 --> 00:46:03,714
of software development. Platform engineering is

701
00:46:03,752 --> 00:46:08,126
the key to build this platform which enables

702
00:46:08,238 --> 00:46:11,490
the teams to do devsecops. And this

703
00:46:11,560 --> 00:46:15,170
is the way how you can architect for

704
00:46:15,240 --> 00:46:17,960
continuous delivery. Thank you very much.

