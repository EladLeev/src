1
00:00:25,650 --> 00:00:29,446
Hi, I'm Chuck and I'm going to talk about how to

2
00:00:29,468 --> 00:00:32,882
be Pythonista and my journey of designing a query

3
00:00:32,946 --> 00:00:36,098
language in Pythonista. So these are my contact details.

4
00:00:36,194 --> 00:00:40,466
Feel free to follow me on social medias. So I'm Chuck,

5
00:00:40,578 --> 00:00:44,098
who am I? I actually love open source projects.

6
00:00:44,194 --> 00:00:48,134
I have been involved in different open source projects in my life before,

7
00:00:48,332 --> 00:00:52,410
mainly in Pythonista. Frenchly I work full time for TerminusDB,

8
00:00:52,490 --> 00:00:57,034
which is can open source graph database. I also love organizing

9
00:00:57,162 --> 00:01:00,430
community events from conferences to,

10
00:01:00,500 --> 00:01:04,074
well, meetups before the pandemic and also sprints

11
00:01:04,122 --> 00:01:07,842
that people just contribute to open source together right now

12
00:01:07,896 --> 00:01:11,234
because we are going nowhere. I also do streaming online

13
00:01:11,352 --> 00:01:14,786
on twitch. Yeah, so if you follow me on twitch, sometimes you will catch me

14
00:01:14,808 --> 00:01:18,534
online doing some python stuff. So one questions thats I

15
00:01:18,572 --> 00:01:21,602
always ask is like, what is pythonista?

16
00:01:21,666 --> 00:01:24,966
Because you have hear this many, many times,

17
00:01:25,148 --> 00:01:28,806
people talking about it. So what is pythonic, what does Pythonista

18
00:01:28,838 --> 00:01:32,934
mean? So I found this answer from stack overflow.

19
00:01:32,982 --> 00:01:36,426
Obviously someone's asking the same question. So it

20
00:01:36,448 --> 00:01:39,930
says Pythonista means that the code is

21
00:01:40,000 --> 00:01:44,078
not just that the syntax is right. Well, it means that the code is correct,

22
00:01:44,164 --> 00:01:47,582
it runs, but usually there's like more than one way

23
00:01:47,636 --> 00:01:50,926
of doing it right. So if it's done in

24
00:01:50,948 --> 00:01:54,466
a way that is accepted by the python community,

25
00:01:54,568 --> 00:01:57,970
that is easy to understand code and what

26
00:01:58,120 --> 00:02:01,918
the language is intended to be used, then is pythonic.

27
00:02:02,014 --> 00:02:05,298
So in my mind I think that, okay, so it's

28
00:02:05,314 --> 00:02:09,314
kind of like artistic thing, right? So it's

29
00:02:09,362 --> 00:02:13,110
first subjective. Whether something is beautiful or something

30
00:02:13,180 --> 00:02:17,250
is better is subjective.

31
00:02:17,410 --> 00:02:20,586
How do I know what is pythonic, what is

32
00:02:20,608 --> 00:02:23,834
not? So I think a lot of things that come down will be

33
00:02:23,872 --> 00:02:27,094
like looking at what other people approach

34
00:02:27,142 --> 00:02:30,474
it, or sometimes it's just that if

35
00:02:30,512 --> 00:02:34,174
there's less line of code or to check whether you follow the

36
00:02:34,212 --> 00:02:38,138
sand of Pythonista. So in case you don't know what those sand

37
00:02:38,154 --> 00:02:42,010
of Pythonista try doing, import this in a python terminusdb.

38
00:02:42,090 --> 00:02:45,682
Then you will see the set of python. Yeah, so it's something that,

39
00:02:45,816 --> 00:02:49,762
it's kind of like you learn by doing

40
00:02:49,816 --> 00:02:53,134
it, you learn by looking like maybe contribute to open source

41
00:02:53,182 --> 00:02:57,270
or you learn by just reading other people's code.

42
00:02:57,340 --> 00:03:01,174
One example is that pandas, pandas basically is like

43
00:03:01,212 --> 00:03:04,246
its own ecosystem. So a lot of times when

44
00:03:04,268 --> 00:03:07,602
I browse stack overflow, people ask questions about pandas,

45
00:03:07,666 --> 00:03:10,790
how to do this, how to do that. A lot of times when I first

46
00:03:10,860 --> 00:03:14,266
learned how to use pandas, I was like, why? I can just use a for

47
00:03:14,288 --> 00:03:18,598
loop loop over the data frame row by row and find the answers.

48
00:03:18,774 --> 00:03:22,350
Instead. I have to do like aggregation, joining and all this stuff.

49
00:03:22,420 --> 00:03:26,014
Why do I do it that way? Well, the answer is that, well,

50
00:03:26,052 --> 00:03:29,966
because pandas, it kind of build on numpy and

51
00:03:29,988 --> 00:03:34,174
then numpy is a library that if you use the built in function that

52
00:03:34,292 --> 00:03:37,726
it's optimized, it's a lot faster because it uses the C extension

53
00:03:37,758 --> 00:03:40,894
of it. So it's like a lot more faster than doing a for loop.

54
00:03:40,942 --> 00:03:43,954
So that's very practical advantage of doing it.

55
00:03:43,992 --> 00:03:47,298
It's not just those style, it's not just beautiful. And people love reading

56
00:03:47,314 --> 00:03:50,678
your code, it's also for performance. So if you use Python in

57
00:03:50,684 --> 00:03:54,230
a way that is what is intended to be used,

58
00:03:54,380 --> 00:03:58,326
then there's benefit to it. So for

59
00:03:58,348 --> 00:04:02,026
example, for loop, again, we all love for loop. Well, this is not

60
00:04:02,048 --> 00:04:05,066
Pythonista code. Obvious. I hope it's obvious to you.

61
00:04:05,168 --> 00:04:08,902
So it's a JavaScript code or Java Javascript,

62
00:04:08,966 --> 00:04:12,220
kind of like that. I forgot where I copied this from.

63
00:04:12,590 --> 00:04:15,998
So it's actually something that I learned when

64
00:04:16,004 --> 00:04:19,166
I was in school. Like to use the index and then increment the

65
00:04:19,188 --> 00:04:22,974
index. So you access all the items in an array one by one.

66
00:04:23,172 --> 00:04:26,914
But in Python things are much simpler. You just use I

67
00:04:26,952 --> 00:04:30,434
would be you just care about what's inside a

68
00:04:30,472 --> 00:04:33,586
list, for example. So you just find all the items inside the

69
00:04:33,608 --> 00:04:37,458
list and then you just do whatever, or even sometimes it's

70
00:04:37,474 --> 00:04:40,822
more compact. Right. Like list comprehension calls this stuff.

71
00:04:40,876 --> 00:04:44,534
So usually pythonista way is actually a

72
00:04:44,572 --> 00:04:48,058
simpler way. So things is just like less code is simpler. Usually it's

73
00:04:48,064 --> 00:04:51,594
a good indicator of things thats things

74
00:04:51,632 --> 00:04:54,730
are doing it. Pythonista a lot of times,

75
00:04:54,880 --> 00:04:59,046
especially when I was developing the Thomasdb

76
00:04:59,078 --> 00:05:02,890
Python client, a lot of the work is translating the code

77
00:05:02,960 --> 00:05:05,982
from JavaScript to Pythonista. Then I have to think about,

78
00:05:06,036 --> 00:05:09,214
okay, so how should I do it in Python? It should not

79
00:05:09,252 --> 00:05:13,182
be like a for loop, I shouldn't be writing it, incrementing the

80
00:05:13,316 --> 00:05:16,770
index instead, but I should care about the items in it

81
00:05:16,840 --> 00:05:20,466
instead because that's pythonista. Yes, I mentioned a little

82
00:05:20,488 --> 00:05:23,982
bit about working on the Python client of TerminusDB.

83
00:05:24,046 --> 00:05:27,186
So yeah, my journey of all this thinking

84
00:05:27,288 --> 00:05:30,486
about how to design a python client started when I

85
00:05:30,508 --> 00:05:34,166
become a developer avocado of terminusDB. But before I tell

86
00:05:34,188 --> 00:05:37,286
you my journey, I have to maybe give you

87
00:05:37,308 --> 00:05:40,550
some idea of what terminusDB is, right? It's a graph database.

88
00:05:40,630 --> 00:05:44,470
So some of you may already have experience with graph database.

89
00:05:44,550 --> 00:05:48,362
For example, neo four j is a very popular one that is much

90
00:05:48,496 --> 00:05:51,782
more of a history and it's more well known.

91
00:05:51,926 --> 00:05:55,646
We are also a graph database, but of

92
00:05:55,668 --> 00:05:59,694
course different. But to make things short, imagine that you're not

93
00:05:59,732 --> 00:06:02,862
storing things in a tableau format. So this is how I used to store

94
00:06:02,916 --> 00:06:07,502
data when I work as a data scientist. Lot of CSVs

95
00:06:07,566 --> 00:06:11,694
lets of SQL databases, things are stored in tables

96
00:06:11,822 --> 00:06:15,634
with can index a key. On the left

97
00:06:15,672 --> 00:06:19,270
hand side there you see person id is the key, there, the primary key,

98
00:06:19,340 --> 00:06:22,806
and you have some information about this person, obviously, name, date of

99
00:06:22,828 --> 00:06:26,680
birth and. Okay, so mother and father, there's two columns there,

100
00:06:27,770 --> 00:06:30,806
some of them are null and some of them got some number in it or

101
00:06:30,828 --> 00:06:33,930
what are they? I hope at this point you already figured it out.

102
00:06:34,000 --> 00:06:37,882
It takes a while to make sense out of it and then you

103
00:06:37,936 --> 00:06:41,418
can imagine that it's actually a family tree. So if

104
00:06:41,424 --> 00:06:44,858
you put the information not in a tablet format, but in

105
00:06:44,864 --> 00:06:48,126
a graph format, it kind of looks like that. And it's very obvious for you

106
00:06:48,148 --> 00:06:51,610
that it's a family tree because, well, we named edge mother and father.

107
00:06:51,690 --> 00:06:55,298
So you see that mother and father, of course your parents is a

108
00:06:55,304 --> 00:06:59,150
family tree. And also you can obviously see who are the grandparents,

109
00:06:59,230 --> 00:07:02,974
which person and which person are in the same generation.

110
00:07:03,102 --> 00:07:06,334
So all of these very obvious. If we put it in those graph format

111
00:07:06,382 --> 00:07:09,842
instead of this, you have to think about, okay, mother and father.

112
00:07:09,906 --> 00:07:13,814
Actually it's a key to join back to the person. Then who

113
00:07:13,852 --> 00:07:17,374
is the mother, who is the father, then you have to make some joins.

114
00:07:17,522 --> 00:07:20,330
We do a lot of joins when working with SQL.

115
00:07:22,910 --> 00:07:26,294
Sometimes the data itself actually is more natural

116
00:07:26,342 --> 00:07:30,006
to present it in a graph format. So that's why graph database

117
00:07:30,038 --> 00:07:33,642
is kind of useful. Again, this is how we find

118
00:07:33,696 --> 00:07:37,502
the maternal grandmother of Joan. With SQL, you have to

119
00:07:37,636 --> 00:07:41,066
select from a table and then do some joins, maybe join

120
00:07:41,098 --> 00:07:45,502
it back together. I'm not a big fan of doing thats like awkward aggregation

121
00:07:45,566 --> 00:07:49,140
and then joining tables together. Yeah, I just found it quite

122
00:07:49,590 --> 00:07:52,180
difficult to think it in my mind.

123
00:07:52,550 --> 00:07:55,934
Instead, with Terminusdb we have a query language

124
00:07:55,982 --> 00:08:00,054
called Waqwo. So in Wako it's very similar to Prolog, if you

125
00:08:00,092 --> 00:08:04,258
know what Prolog is. So it's kind of like you're making statements,

126
00:08:04,354 --> 00:08:08,182
logical statements, and then you just find which variables kind of

127
00:08:08,236 --> 00:08:11,642
suited those logical statements. So you can see here

128
00:08:11,776 --> 00:08:15,338
that we will have four triples, which is those relations,

129
00:08:15,424 --> 00:08:18,986
two nooks and an edge is a triple. And then we have a person.

130
00:08:19,168 --> 00:08:22,578
So actually you want to find like for example the grandmother of join.

131
00:08:22,614 --> 00:08:26,398
Then you will put join here and then you find like oh, this person

132
00:08:26,484 --> 00:08:30,234
should satisfy this relationship, which is like John's

133
00:08:30,282 --> 00:08:33,534
mother. And then the other relationship here

134
00:08:33,572 --> 00:08:36,862
will be like the mother of the mother will be the grandmother,

135
00:08:37,006 --> 00:08:40,722
maternal grandmother. So here you can find a variable that

136
00:08:40,776 --> 00:08:44,754
satisfy these relations and give the name of those people.

137
00:08:44,872 --> 00:08:48,454
So you have the name of the mother and the maternal grandmother in this

138
00:08:48,572 --> 00:08:51,814
query. So everything is just done in one place instead

139
00:08:51,852 --> 00:08:54,870
of making multiple select and join statements.

140
00:08:55,530 --> 00:08:59,046
So yeah, like here you can see that we need one and two or two

141
00:08:59,068 --> 00:09:02,314
statements to find mother and grandmother, right. And then here we can just find

142
00:09:02,352 --> 00:09:05,994
all of them in one go. It takes some time to get around

143
00:09:06,112 --> 00:09:10,234
how you think about query the language, but actually if

144
00:09:10,272 --> 00:09:12,750
it works then it's much more efficient.

145
00:09:13,170 --> 00:09:18,010
So this is Waco, right? This is the query language of TerminusDB.

146
00:09:18,170 --> 00:09:21,562
And then when I first joined there wasn't any pythonista clients.

147
00:09:21,706 --> 00:09:25,678
Waco was natively a JSonld. This is the JSON

148
00:09:25,774 --> 00:09:29,234
format is what those front end talk to, the back end what

149
00:09:29,272 --> 00:09:32,942
the clients talk to, the server itself. So Waco,

150
00:09:33,006 --> 00:09:36,590
the native format is a JSON LD format.

151
00:09:36,750 --> 00:09:40,498
And at the point that when I join we have Javascript client.

152
00:09:40,594 --> 00:09:44,614
So I think that, okay, so if we want to help

153
00:09:44,732 --> 00:09:48,838
Python misters and data scientists to use this awesome

154
00:09:48,924 --> 00:09:52,778
graph database, we need a Pythonista client. So we have occupy a

155
00:09:52,784 --> 00:09:55,740
query language for Pythonista users. Great.

156
00:09:56,270 --> 00:09:59,402
So I got support from my team and everybody thinks it's a good idea.

157
00:09:59,456 --> 00:10:03,594
So we start working on Wacopy. So what is wacopy?

158
00:10:03,642 --> 00:10:06,590
Well, it comes with the Python client obviously,

159
00:10:06,740 --> 00:10:10,666
which you can pip install. It's on PYPI release on PyPI

160
00:10:10,778 --> 00:10:14,702
like calls other Python libraries. It includes multiple

161
00:10:14,766 --> 00:10:18,082
modules, so it includes the Python client itself,

162
00:10:18,136 --> 00:10:21,682
which is kind of like a wrapper for the API that

163
00:10:21,736 --> 00:10:25,138
you could carry out different manipulations to

164
00:10:25,224 --> 00:10:28,954
the server database. There is also the wacopy,

165
00:10:29,102 --> 00:10:32,594
the query part, Waco query. So that's how you can build your schema,

166
00:10:32,642 --> 00:10:36,246
how you can query your data, how you can insert the data in

167
00:10:36,268 --> 00:10:40,346
the database. So that's the second bit. The third bit is that there

168
00:10:40,368 --> 00:10:43,786
is a visualization tool that could give

169
00:10:43,808 --> 00:10:47,322
you an interactive graph visualization of your result data.

170
00:10:47,456 --> 00:10:51,362
I'll talk about that later. There's also this data frame

171
00:10:51,446 --> 00:10:55,406
which is an optional module. If you install, then you could use

172
00:10:55,508 --> 00:10:59,438
some of the functions inside to convert your result from a

173
00:10:59,444 --> 00:11:02,538
JSON format into a pandas data frame,

174
00:11:02,714 --> 00:11:06,594
which is quite cool. So this is an example of how to use terminusdb here.

175
00:11:06,632 --> 00:11:10,654
In this example we are building a schema for this bike

176
00:11:10,782 --> 00:11:15,118
data so you can see that we have like three objects

177
00:11:15,214 --> 00:11:19,254
that we created in the schema graph. So it's a station, which is a

178
00:11:19,292 --> 00:11:22,966
document type. So there is also like label and

179
00:11:22,988 --> 00:11:26,822
description of it. You can also add property, for example like the journey data

180
00:11:26,876 --> 00:11:30,858
type, you can add property to it. So you can imagine all of these actually

181
00:11:30,944 --> 00:11:34,458
describe, for example, I have a station object, then I would have,

182
00:11:34,544 --> 00:11:38,266
well have a name. It will have

183
00:11:38,288 --> 00:11:41,786
a label, a description. If it's a journey object on top of

184
00:11:41,808 --> 00:11:45,166
those you will also have these properties, right? You also have the end

185
00:11:45,188 --> 00:11:48,026
time, start time, the journey bicycle, and all these properties.

186
00:11:48,138 --> 00:11:52,062
So this is a schema, you can also add them all

187
00:11:52,116 --> 00:11:55,566
together. So I have created three different type of

188
00:11:55,588 --> 00:11:58,766
object and the schema consists of these three types of objects.

189
00:11:58,798 --> 00:12:02,574
So I'm just add them together and then execute it with the Python client.

190
00:12:02,702 --> 00:12:06,434
It's still not the most optimal way of doing it. You still have to make

191
00:12:06,472 --> 00:12:10,070
a lot of method calls on the Waco query object, but I'll show you a

192
00:12:10,140 --> 00:12:14,054
better schema building design that we have just come up with that

193
00:12:14,092 --> 00:12:17,974
is still under development. I show you this first because this is what is being

194
00:12:18,012 --> 00:12:21,258
used currently. But originally, like I said before,

195
00:12:21,344 --> 00:12:24,902
Waco is actually a JSOn format natively.

196
00:12:24,966 --> 00:12:28,118
So yeah, you can use the Python client, but if you don't

197
00:12:28,134 --> 00:12:31,514
use Waco API, you have to write the query like this, right?

198
00:12:31,552 --> 00:12:35,134
So obviously people don't want to write a query like this, they would

199
00:12:35,172 --> 00:12:38,286
rather do this with all the Python code.

200
00:12:38,388 --> 00:12:42,638
Or even better, when I show you the newest Python schema building

201
00:12:42,804 --> 00:12:45,520
regime, I would say I don't know how to describe that,

202
00:12:45,990 --> 00:12:49,746
the scheme for building a schema. Yeah. So also we

203
00:12:49,768 --> 00:12:53,006
have some flexibility in our query objects

204
00:12:53,038 --> 00:12:56,610
that you could design your document type by chaining the

205
00:12:56,680 --> 00:13:00,102
extras like label and description. Or you can just put it in

206
00:13:00,156 --> 00:13:03,702
as can optional variable. So you could do that because

207
00:13:03,756 --> 00:13:07,334
these two are quite optional. So you could put it in like

208
00:13:07,372 --> 00:13:11,306
this or just chain it up so both will work. There's some flexibility in

209
00:13:11,328 --> 00:13:14,666
the design, but there's also challenge when I try to translate the

210
00:13:14,688 --> 00:13:18,058
JavaScript one into Python. For example, the method n

211
00:13:18,144 --> 00:13:21,450
in pythonista, some of you may know that n

212
00:13:21,520 --> 00:13:25,518
because it's a keyword, it can be used, has a method name so

213
00:13:25,604 --> 00:13:29,002
it can't be directly translated, has the same as the JavaScript.

214
00:13:29,066 --> 00:13:32,158
So you have to use Waco n, which is not

215
00:13:32,244 --> 00:13:35,946
a very good name. So that's why now we have overloaded

216
00:13:35,978 --> 00:13:39,202
with the operator. You can see the plus sign that I have showed you before

217
00:13:39,336 --> 00:13:43,298
also right now for the oR, we also have the pipe operator to

218
00:13:43,384 --> 00:13:47,106
be used as or for not also

219
00:13:47,128 --> 00:13:50,330
a keyword. You can't use it as and from, you can

220
00:13:50,350 --> 00:13:53,922
just use it as it, because again, it's a keyword.

221
00:13:53,986 --> 00:13:57,494
So now you have to add the waco underscore prefix to

222
00:13:57,532 --> 00:14:00,330
it. But we may change the design in the future.

223
00:14:00,480 --> 00:14:04,406
Never know. This is about the extra things that we float

224
00:14:04,438 --> 00:14:08,490
in for the Python client. So this one is the

225
00:14:08,640 --> 00:14:12,426
integration with Jupyter notebook. So we have a few things that makes data scientists

226
00:14:12,458 --> 00:14:15,806
who use Jupyter notebook have a better experience. For example,

227
00:14:15,908 --> 00:14:19,962
like I mentioned before, there's this data frame module

228
00:14:20,026 --> 00:14:23,482
that lets you convert the result into a pandas data frame.

229
00:14:23,546 --> 00:14:26,910
And also this one is those interactive graph visualization

230
00:14:26,990 --> 00:14:30,866
that I mentioned. So you can see that all

231
00:14:30,888 --> 00:14:34,386
of these are customizable. You can change the color of the note, you can

232
00:14:34,408 --> 00:14:37,954
change the size of the graph. So yeah,

233
00:14:38,072 --> 00:14:42,066
there are different ways of visualizing your result in Jupyter notebook,

234
00:14:42,178 --> 00:14:45,618
which is quite nice. So it's not just Jupyter notebook, you can actually output

235
00:14:45,634 --> 00:14:49,094
thats as can HTML file as well, because it's just users d

236
00:14:49,132 --> 00:14:52,970
three to generate it. I have another talk about how

237
00:14:53,040 --> 00:14:56,490
I make this part of the Python client happened,

238
00:14:56,640 --> 00:15:00,490
but I don't have time for this talk. We're mainly focusing on the query language.

239
00:15:01,230 --> 00:15:05,274
But I think you can find my previous talk in YouTube

240
00:15:05,322 --> 00:15:08,590
or something. It's recorded. This is something new.

241
00:15:08,660 --> 00:15:12,398
So this is the schema builder that I talk about. So remember

242
00:15:12,484 --> 00:15:15,762
before, if we have to build a schema, we have to

243
00:15:15,816 --> 00:15:19,714
use those doc type thing here. Like this example here,

244
00:15:19,832 --> 00:15:23,538
thats we have to use the doc type and then add the property to the

245
00:15:23,544 --> 00:15:27,378
doc type, right? And we just think that it's not intuitive enough

246
00:15:27,464 --> 00:15:31,366
for Python neisters. So actually we kind of use more

247
00:15:31,388 --> 00:15:35,046
like a data modeling approach that you could use class

248
00:15:35,148 --> 00:15:38,726
and then it could be. So everything would be a

249
00:15:38,748 --> 00:15:42,234
class of object or document or enum. Actually I'm still

250
00:15:42,272 --> 00:15:45,514
working on enum thing. So you can have calls the properties as its

251
00:15:45,552 --> 00:15:48,954
attribute and then you can use annotation to

252
00:15:48,992 --> 00:15:52,142
fix the type of the property. So whether it's like a data

253
00:15:52,196 --> 00:15:55,806
type property like float or string, or it

254
00:15:55,828 --> 00:15:59,390
could be can object property like for example country, then I

255
00:15:59,460 --> 00:16:02,778
can have the parameters like I'm using coordinate,

256
00:16:02,794 --> 00:16:05,806
which is an object type that I

257
00:16:05,828 --> 00:16:09,266
just created. So this is what we

258
00:16:09,288 --> 00:16:13,262
are moving forward to. Right now it's under development.

259
00:16:13,406 --> 00:16:16,606
Also, instead of setting the label the description,

260
00:16:16,718 --> 00:16:19,646
it will just use the name of those label description will be the doc string

261
00:16:19,678 --> 00:16:23,062
if there's any. So yeah, this is what we are working on

262
00:16:23,116 --> 00:16:26,582
right now. So I hope that is a good design. I hope you like

263
00:16:26,636 --> 00:16:29,706
it. So let me know whether you found this has a better way to build

264
00:16:29,728 --> 00:16:33,786
a schema. Look into the future. What we still want

265
00:16:33,808 --> 00:16:37,402
to do, but not quite there yet, we just want to

266
00:16:37,456 --> 00:16:40,566
make life much more easier for pandas user.

267
00:16:40,678 --> 00:16:44,514
Now we can output the results back in the data frame format,

268
00:16:44,582 --> 00:16:48,206
but the other way around is not there yet. Hopefully in the future if

269
00:16:48,228 --> 00:16:51,502
you have some csv, things will be more automated. If it's simple

270
00:16:51,556 --> 00:16:54,866
enough that we could look at your CSV or data frame and

271
00:16:54,888 --> 00:16:58,494
then kind of create a schema automatically and then input

272
00:16:58,542 --> 00:17:02,302
all your data from your CSVs or data frames automatically.

273
00:17:02,446 --> 00:17:05,934
That's something that we are aiming for after the schema builder

274
00:17:05,982 --> 00:17:09,010
is finished. Also the network graph analysis,

275
00:17:09,090 --> 00:17:12,738
I know that neo four j has it, we don't have it yet, but it's

276
00:17:12,754 --> 00:17:16,406
something that I really want to do. But we

277
00:17:16,428 --> 00:17:19,734
don't know when we're going to have this. If you want to work

278
00:17:19,772 --> 00:17:23,082
on this, please let me know. I'm happy to collaborate with you.

279
00:17:23,216 --> 00:17:26,618
Also, the schema checker is something that since we have

280
00:17:26,704 --> 00:17:29,994
the schema builder like this, so when we add the

281
00:17:30,032 --> 00:17:33,534
object in, so all the objects thats the data adding in

282
00:17:33,572 --> 00:17:37,054
will be an object of these classes, right? So we can

283
00:17:37,092 --> 00:17:40,958
actually efficiently check whether the data followed the

284
00:17:40,964 --> 00:17:44,670
schema correctly. Right? Now the challenge is that when people

285
00:17:44,740 --> 00:17:48,002
get an error when they insert the data, they don't know what's going on,

286
00:17:48,056 --> 00:17:51,634
they don't know what went wrong, that they can't insert the data.

287
00:17:51,752 --> 00:17:55,780
But with the schema checker it's kind of like a linter for the schema that

288
00:17:56,790 --> 00:17:59,734
you can see that. Oh, which part? That make it wrong?

289
00:17:59,772 --> 00:18:03,398
Maybe the type of your data doesn't match the type that is described in the

290
00:18:03,404 --> 00:18:07,190
schema. It should raise a flag to tell you exactly

291
00:18:07,260 --> 00:18:10,646
which point is wrong, that you should fix it rather than just pure

292
00:18:10,678 --> 00:18:14,138
guessing. So yeah, your suggestions are always welcome.

293
00:18:14,224 --> 00:18:17,594
So if you have any questions or suggestions, feel free

294
00:18:17,632 --> 00:18:21,398
to leave an issue in our repo. So it's

295
00:18:21,414 --> 00:18:25,074
TerminusDB. TerminusDb Pythonista.

296
00:18:25,142 --> 00:18:28,958
I will show you the link later. Yeah, so that's basically everything that

297
00:18:28,964 --> 00:18:32,234
I want to talk about in this talk. There's more to explore,

298
00:18:32,282 --> 00:18:35,558
of course, if you're interested in how we created the python

299
00:18:35,594 --> 00:18:38,782
client, how to create the rockupy, the query language,

300
00:18:38,926 --> 00:18:42,238
if you want to learn more about how to do like graph data modeling.

301
00:18:42,334 --> 00:18:46,174
We have the TerminusDB academy. We heres planning to organize

302
00:18:46,222 --> 00:18:50,070
more workshops for people to learn how to do the model build,

303
00:18:50,220 --> 00:18:53,526
use the new model builder tools and all this. Also follow us

304
00:18:53,548 --> 00:18:57,286
on Twitter. You will get all the news, check out our website or

305
00:18:57,388 --> 00:19:01,122
what is better. Join the discord server. We have office hour every week

306
00:19:01,196 --> 00:19:04,460
which you can talk with those tech team directly, ask questions,

307
00:19:04,990 --> 00:19:08,314
give suggestions, feedback, whatever you like. Just hang out with us.

308
00:19:08,352 --> 00:19:11,978
Yeah we want to hear from you. So our GitHub repo is

309
00:19:12,064 --> 00:19:19,074
here at GitHub and then terminusdbclinepython

310
00:19:19,142 --> 00:19:22,654
here so you can see it's heres. This is our repo so feel free

311
00:19:22,692 --> 00:19:26,414
to open an issue, just suggest anything.

312
00:19:26,532 --> 00:19:30,446
So yeah, that's it for my talk and thank you so much for

313
00:19:30,468 --> 00:19:33,946
listening and feel free to ask any questions. Join our discord

314
00:19:33,978 --> 00:19:35,590
server. I will see you there.

