1
00:00:00,410 --> 00:00:06,174
Jamaica real

2
00:00:06,212 --> 00:00:09,578
time feedback into the behavior of your distributed systems

3
00:00:09,674 --> 00:00:13,374
and observing changes exceptions errors in

4
00:00:13,412 --> 00:00:17,914
real time allows you to not only experiment with confidence, but respond

5
00:00:18,042 --> 00:00:20,480
instantly to get things working again.

6
00:00:24,610 --> 00:00:46,954
Youre hey,

7
00:00:46,992 --> 00:00:50,358
how's it going today? I want to talk to you about JSDoCs.

8
00:00:50,454 --> 00:00:53,774
It's sort of like typescript, but without all of

9
00:00:53,812 --> 00:00:57,198
the typescript tooling. So if you

10
00:00:57,204 --> 00:01:00,366
use typescript and you love it, maybe JS docs won't be

11
00:01:00,388 --> 00:01:03,678
for you. But if you have either heard of typescript and have not tried it

12
00:01:03,684 --> 00:01:06,954
yet, or you're curious, or you tried it and you didn't like it,

13
00:01:07,092 --> 00:01:09,986
we're going to look at JS Docs and maybe it's going to be something that

14
00:01:10,008 --> 00:01:13,154
youre interested in. Before we get into

15
00:01:13,192 --> 00:01:15,620
that, two things I want to share with you.

16
00:01:15,990 --> 00:01:19,426
One, I have a really awesome dog, super cute,

17
00:01:19,458 --> 00:01:23,494
his name is Nugget. He's going to be in the presentation today. And two,

18
00:01:23,692 --> 00:01:27,526
I actually really like JavaScript, so let's see how

19
00:01:27,548 --> 00:01:31,340
those two things combine. First of all,

20
00:01:31,710 --> 00:01:35,366
there's nugget. I told you he was cute. I hope I delivered.

21
00:01:35,478 --> 00:01:39,734
He actually has an instagram. So side note, I do these presentations

22
00:01:39,862 --> 00:01:43,518
halfway as a way to get him more followers, so make sure to

23
00:01:43,604 --> 00:01:46,894
check him out later. And yeah,

24
00:01:46,932 --> 00:01:50,270
like I said, I like JavaScript. I think there's a lot of cool things about

25
00:01:50,340 --> 00:01:53,422
it. For example, it runs everywhere. I think this is probably

26
00:01:53,476 --> 00:01:56,994
the number one feature that I like about JavaScript is that I

27
00:01:57,032 --> 00:02:00,546
can take the same JavaScript code and run it in the browser on

28
00:02:00,568 --> 00:02:04,002
the server, in an embedded device in freaking space.

29
00:02:04,056 --> 00:02:07,720
For NASA it's doing all of those things, which is really cool.

30
00:02:08,650 --> 00:02:12,514
Also, it only requires very minimal tooling.

31
00:02:12,562 --> 00:02:15,766
I mean, you really just need

32
00:02:15,788 --> 00:02:18,886
a browser to get started writing JavaScript. You can open up the

33
00:02:18,908 --> 00:02:22,634
console and start playing around, and if you're on a computer you

34
00:02:22,672 --> 00:02:25,340
probably have some sort of browser already available.

35
00:02:26,110 --> 00:02:29,226
It also has a really huge community, which has

36
00:02:29,248 --> 00:02:32,746
a lot of benefits in terms of providing more tooling or frameworks

37
00:02:32,778 --> 00:02:36,654
or libraries, or if you need help debugging something.

38
00:02:36,772 --> 00:02:40,298
Just having a rich community allows for all of these other resources

39
00:02:40,394 --> 00:02:42,990
around the actual programming language.

40
00:02:44,050 --> 00:02:47,666
But JavaScript has its quirks and its flaws and things that I

41
00:02:47,688 --> 00:02:51,026
don't think are quite so cool. For example,

42
00:02:51,208 --> 00:02:54,558
when I'm working in my editor, I really like having those little red squigglies

43
00:02:54,574 --> 00:02:58,134
that tell me when I'm doing something wrong. And JavaScript is a

44
00:02:58,172 --> 00:03:01,734
loosely typed language, which means it doesn't give us

45
00:03:01,772 --> 00:03:05,126
quite as many hints of when those red squigglies should be

46
00:03:05,148 --> 00:03:09,302
there, as it could be. This makes

47
00:03:09,356 --> 00:03:12,634
it a little bit more difficult if you want to refactor a code base,

48
00:03:12,752 --> 00:03:16,186
because you might introduce some bugs or errors that could

49
00:03:16,208 --> 00:03:20,122
otherwise be caught by a more strongly typed language, such as

50
00:03:20,176 --> 00:03:22,160
typescript, which we'll look at in a moment.

51
00:03:23,490 --> 00:03:26,810
Part of these errors youre can also have introduced

52
00:03:26,890 --> 00:03:30,126
with type mismatches, meaning if you have a function that

53
00:03:30,148 --> 00:03:33,710
expects an input like a string, and you pass it a number,

54
00:03:33,860 --> 00:03:37,186
JavaScript is not going to help you with that. And then you

55
00:03:37,208 --> 00:03:40,594
can introduce a bug to your code that could otherwise have

56
00:03:40,632 --> 00:03:44,446
been caught. In addition to introducing

57
00:03:44,478 --> 00:03:47,886
these bugs, there's also scenarios

58
00:03:47,918 --> 00:03:51,746
where you make chances to your code base, which could happen both internally

59
00:03:51,858 --> 00:03:55,634
or from external code bases. So if you're working with a libraries, maybe they publish

60
00:03:55,682 --> 00:03:58,966
new changes and you upgraded and you didn't catch some of those changes that

61
00:03:58,988 --> 00:04:02,634
they made, you're not going to see those errors that could have been

62
00:04:02,672 --> 00:04:06,474
caught. And again, this is where typescript comes

63
00:04:06,512 --> 00:04:10,266
in. These are the things that make typescript super cool.

64
00:04:10,448 --> 00:04:13,710
It's a strongly typed language, so because everything is typed,

65
00:04:14,770 --> 00:04:18,666
the language processor knows what to expect of certain types,

66
00:04:18,698 --> 00:04:22,506
which means it can help you catch things like typos or errors.

67
00:04:22,538 --> 00:04:25,762
Like if you have an object that you're trying to access

68
00:04:25,816 --> 00:04:29,186
a method and you accidentally misspell it, typescript is going to

69
00:04:29,208 --> 00:04:33,266
give you that little red squiggly and say hey, that's not a

70
00:04:33,288 --> 00:04:37,238
property on this object. In addition to

71
00:04:37,324 --> 00:04:40,786
helping you catch those errors, it can improve the developer

72
00:04:40,818 --> 00:04:44,214
experience by providing intellisense or autocomplete. So again,

73
00:04:44,252 --> 00:04:47,702
if you're accessing properties on an object, you can

74
00:04:47,756 --> 00:04:51,202
enter the object, the variable name, hit that period,

75
00:04:51,266 --> 00:04:54,842
and then vs code could throw up a little prompt that says,

76
00:04:54,896 --> 00:04:58,234
oh, do you want all of these properties that are available? It can really

77
00:04:58,272 --> 00:05:01,774
help you learn the API of a system, which makes it

78
00:05:01,812 --> 00:05:05,034
easier or better for onboarding and collaboration,

79
00:05:05,162 --> 00:05:09,086
because people don't have to be as entirely familiar with

80
00:05:09,108 --> 00:05:12,734
a code base before

81
00:05:12,772 --> 00:05:14,740
they can start contributing to it.

82
00:05:16,070 --> 00:05:19,358
Typescript also has some features that work really well for CI

83
00:05:19,374 --> 00:05:23,234
CD. You can set up your system such that if

84
00:05:23,272 --> 00:05:26,622
you introduce an error that could be caught by this strong

85
00:05:26,696 --> 00:05:30,854
typing language, meaning you have like a type mismatch, you can actually set

86
00:05:30,892 --> 00:05:34,534
up your delivery pipeline such that if those

87
00:05:34,572 --> 00:05:37,634
errors exist, you don't actually push them to production,

88
00:05:37,682 --> 00:05:40,874
and it kind of sends a warning or sends you an email that something's not

89
00:05:40,912 --> 00:05:44,220
right. And finally,

90
00:05:45,070 --> 00:05:48,454
having typescript or strong types available in the JavaScript

91
00:05:48,502 --> 00:05:51,866
project makes maintenance a lot easier, because not only is it safer that

92
00:05:51,888 --> 00:05:55,742
youre not going to introduce errors, it can help you catch or

93
00:05:55,796 --> 00:05:59,120
get familiar with a code base that maybe you haven't touched in like six months.

94
00:06:00,690 --> 00:06:04,194
And the other thing is, having these strong types can actually

95
00:06:04,232 --> 00:06:08,398
be really cool because there's some tooling around typescript or strongly typed

96
00:06:08,414 --> 00:06:11,934
languages that serve well for documentation, in that they can automatically

97
00:06:11,982 --> 00:06:13,940
generate documentation for you.

98
00:06:15,510 --> 00:06:18,706
All right, so I've been talking about all the cool things I like about typescript,

99
00:06:18,738 --> 00:06:22,502
but there's still some things that I don't like as well, particularly around

100
00:06:22,556 --> 00:06:26,214
the tooling. I really love that when I write

101
00:06:26,252 --> 00:06:29,546
javascript, I can take it and copy and paste it to all of those different

102
00:06:29,648 --> 00:06:33,002
environments that I talked about, and it's just going to work

103
00:06:33,056 --> 00:06:36,442
because that's the underlying language. That's not the case

104
00:06:36,496 --> 00:06:40,442
for typescript. You have to have a transpolation step

105
00:06:40,496 --> 00:06:43,754
that takes your typescript code and then converts it to javascript,

106
00:06:43,802 --> 00:06:45,920
which is the language that browsers understand.

107
00:06:47,010 --> 00:06:50,494
There's also the learning curve that if I

108
00:06:50,532 --> 00:06:53,450
am a lead developer and I want to bring on junior developers,

109
00:06:53,530 --> 00:06:57,038
there's probably more people that are familiar with javascript today than

110
00:06:57,044 --> 00:07:00,370
there are typescript, which means to introduce them to a typescript code base,

111
00:07:00,440 --> 00:07:03,726
there's going to be a little bit of friction to get them up to speed

112
00:07:03,758 --> 00:07:06,520
with learning the typescript ways.

113
00:07:08,010 --> 00:07:11,958
I also think that typescript is more complex than JavaScript because

114
00:07:12,044 --> 00:07:15,922
it introduces a lot of noise by having the type definitions

115
00:07:15,986 --> 00:07:21,754
embedded into the code base, and it adds a sort of complexity that never

116
00:07:21,792 --> 00:07:25,654
really got over. Also, typescript doesn't work everywhere.

117
00:07:25,702 --> 00:07:29,274
Like I said, you can't copy and paste typescript from your code

118
00:07:29,312 --> 00:07:32,986
base into the browser to debug things or to put them in other systems

119
00:07:33,018 --> 00:07:37,070
or runtimes. And this

120
00:07:37,140 --> 00:07:41,166
sort of pros and cons list of JavaScript on

121
00:07:41,188 --> 00:07:44,894
its own, or typescript as a superset of JavaScript had

122
00:07:44,932 --> 00:07:48,722
me kind of thinking like why not try and take the best of both and

123
00:07:48,776 --> 00:07:52,354
sort of combine it? And we can do that

124
00:07:52,552 --> 00:07:55,934
thanks to vs code. So we're going to look at JS

125
00:07:55,982 --> 00:08:00,086
Doc today, but the only tool that we're going to begin with is vs code.

126
00:08:00,188 --> 00:08:03,510
It's an editor that I think most JavaScript developers today are using.

127
00:08:03,580 --> 00:08:06,966
Hopefully, if you're already using it, then you've already gotten started on

128
00:08:06,988 --> 00:08:10,234
the path that I'm going to recommend. And vs code

129
00:08:10,272 --> 00:08:14,646
is really cool because it actually has the typescript language

130
00:08:14,758 --> 00:08:18,746
engine sort of powering its features like intellisense or

131
00:08:18,768 --> 00:08:22,190
autocomplete. When you see those auto suggestions in vs code,

132
00:08:22,260 --> 00:08:26,458
that's actually the typescript language saying or analyzing

133
00:08:26,474 --> 00:08:30,526
your code and giving you those prompts. So what

134
00:08:30,548 --> 00:08:34,142
that looks like is if you have a variable such as my object

135
00:08:34,196 --> 00:08:37,586
here that has a property of hello, when you

136
00:08:37,608 --> 00:08:40,994
try and access the properties on my object vs code

137
00:08:41,032 --> 00:08:44,514
is going to prompt you hey, do you want to use the hello property?

138
00:08:44,632 --> 00:08:48,226
Here it is. It's a type of string, and that's super handy

139
00:08:48,258 --> 00:08:51,926
to know, especially if you have an object with, I don't know, tens or

140
00:08:51,948 --> 00:08:54,360
dozens or hundreds of properties on it.

141
00:08:56,490 --> 00:09:00,982
But there's one issue the intellisense

142
00:09:01,046 --> 00:09:04,854
doesn't go so far to help catch when you have errors

143
00:09:04,902 --> 00:09:08,762
such as type errors. So if we have a function here

144
00:09:08,896 --> 00:09:11,710
called yell that expects a string and returns a string,

145
00:09:12,690 --> 00:09:16,430
you could accidentally introduce an error if you pass a number

146
00:09:16,580 --> 00:09:20,174
to that function. So if we pass

147
00:09:20,212 --> 00:09:23,714
the number two to yell. So the

148
00:09:23,752 --> 00:09:28,114
first step on my journey of getting

149
00:09:28,232 --> 00:09:32,286
this type checking sort of strongly typed

150
00:09:32,318 --> 00:09:35,614
in JavaScript path is to just enable typescript

151
00:09:35,662 --> 00:09:39,270
checking more strict checking on individual files.

152
00:09:39,930 --> 00:09:43,618
So you can do that at the file level by putting this comment

153
00:09:43,714 --> 00:09:47,414
at the top of the file that is the at symbol with

154
00:09:47,452 --> 00:09:50,682
PS check. And once you do that,

155
00:09:50,736 --> 00:09:54,266
you can see already more little

156
00:09:54,288 --> 00:09:57,162
red squigglies are going to appear in your code. For example,

157
00:09:57,216 --> 00:10:01,302
if we have that object with a property of hello and we try and reassign

158
00:10:01,366 --> 00:10:04,462
that property, typescript is going to say hold on,

159
00:10:04,516 --> 00:10:07,566
that property is supposed to be a string, and now you're trying to convert it

160
00:10:07,588 --> 00:10:11,198
to a number, and you can configure it such that hello

161
00:10:11,284 --> 00:10:14,786
can be one or the other, but by default it's going to assume that

162
00:10:14,808 --> 00:10:18,370
you have introduced a bug to your code. That's super handy.

163
00:10:19,670 --> 00:10:22,834
So how do we sort of get that

164
00:10:22,872 --> 00:10:25,938
feature where we can say, well actually that wasn't an error, we want to be

165
00:10:25,944 --> 00:10:29,462
able to use a string or a number in that case, and this is where

166
00:10:29,516 --> 00:10:33,334
JS doc comes in. JSDocs is a markup language used

167
00:10:33,372 --> 00:10:36,642
to annotate JavaScript, where we use the comments

168
00:10:36,706 --> 00:10:40,662
in JavaScript to add the type annotations

169
00:10:40,806 --> 00:10:44,374
to our code. So it's not any different than JavaScript,

170
00:10:44,422 --> 00:10:48,054
it actually works within JavaScript, and because it works within the comment

171
00:10:48,102 --> 00:10:51,978
system, you can copy and paste it to different code bases, and it's

172
00:10:51,994 --> 00:10:55,502
not going to actually do anything, but it can be used by

173
00:10:55,556 --> 00:10:59,262
typescript to understand the

174
00:10:59,316 --> 00:11:03,362
types of your project. The official typescript team

175
00:11:03,416 --> 00:11:06,562
actually enabling using

176
00:11:06,696 --> 00:11:09,854
JSDoCs so here's

177
00:11:09,902 --> 00:11:13,954
sort of the example of JSDocs. We have a variable called age,

178
00:11:14,072 --> 00:11:17,282
and we have a comment right above it where we say the type

179
00:11:17,336 --> 00:11:21,126
of this variable is either a string or a number, which means that we

180
00:11:21,148 --> 00:11:24,246
assign it to the number one. It's totally fine when we assign it to a

181
00:11:24,268 --> 00:11:27,686
string of two. That's fine when we try to reassign it

182
00:11:27,708 --> 00:11:30,950
to a boolean of false. Then we get the little red squiggly,

183
00:11:31,030 --> 00:11:34,060
because that's not the type that age is supposed to be.

184
00:11:35,310 --> 00:11:39,238
We can also see how we can add type definitions to our functions

185
00:11:39,414 --> 00:11:42,734
with this documentation block where we define the

186
00:11:42,772 --> 00:11:46,382
first parameter, which is a string and

187
00:11:46,436 --> 00:11:50,218
has the name str, and this function returns a string.

188
00:11:50,314 --> 00:11:54,270
So the function yell now can be passed a number.

189
00:11:54,340 --> 00:11:57,258
But if you pass that number to the function,

190
00:11:57,444 --> 00:12:00,674
you're going to get a little red squiggly that says hey, you're trying to use

191
00:12:00,712 --> 00:12:04,366
a number, but this function only accepts a string. It's very handy

192
00:12:04,398 --> 00:12:06,600
to catch those errors that we talked about before.

193
00:12:07,850 --> 00:12:12,034
So once you start enabling JSDocs

194
00:12:12,082 --> 00:12:15,446
or typescript checking on a file by file level,

195
00:12:15,548 --> 00:12:18,918
you may find that it gets kind of tedious to add the comment at the

196
00:12:18,924 --> 00:12:22,566
top of every single file. That is a nice way to incrementally start introducing

197
00:12:22,598 --> 00:12:26,454
it. But eventually, if you're on a JavaScript project, you probably want to start enabling

198
00:12:26,502 --> 00:12:29,900
it for the entire project, and you can do that a number of ways.

199
00:12:30,590 --> 00:12:33,854
Number one, in vs code if you just want to enable it for yourself,

200
00:12:33,972 --> 00:12:37,886
your instance of vs code, I'd recommend going into the settings and

201
00:12:37,988 --> 00:12:42,858
checking the box js ts Chevron

202
00:12:42,954 --> 00:12:46,766
implicit project config check js, turn that sucker

203
00:12:46,798 --> 00:12:49,934
on and it's going to start checking all of your JavaScript

204
00:12:50,062 --> 00:12:53,106
or using the typescript checker on all of your

205
00:12:53,128 --> 00:12:56,226
JavaScript files without having

206
00:12:56,248 --> 00:12:59,622
to use those comments. Option number two is great

207
00:12:59,676 --> 00:13:03,590
if you actually want to enable this for yourself or for your team,

208
00:13:03,660 --> 00:13:06,934
or your team that's using vs code, at least you can

209
00:13:06,972 --> 00:13:10,146
add a file to your project called tsconfig JSOn

210
00:13:10,338 --> 00:13:13,946
and put in the compiler options to check js and set

211
00:13:13,968 --> 00:13:17,626
that to true. And this is again handy if youre are working on a

212
00:13:17,648 --> 00:13:20,746
team, or if you want to do it for yourself as well. This is the

213
00:13:20,768 --> 00:13:22,330
option that I actually prefer.

214
00:13:24,350 --> 00:13:28,286
Now JSDocs has some native types built in

215
00:13:28,388 --> 00:13:31,486
string number boolean array promise basically any

216
00:13:31,508 --> 00:13:37,234
of the primitives that you're going to find in typescript. But then most

217
00:13:37,272 --> 00:13:40,802
JavaScript projects are not built using just these primitives, you usually

218
00:13:40,856 --> 00:13:44,258
have complex types such as objects, and you want

219
00:13:44,264 --> 00:13:47,814
to be able to define those. Now typescript has that support built in,

220
00:13:47,852 --> 00:13:52,102
and so does JS docs with

221
00:13:52,156 --> 00:13:55,302
the typedef little tool.

222
00:13:55,356 --> 00:13:58,746
So you can create a new type definition which is a type of

223
00:13:58,768 --> 00:14:02,314
object and his name is dog, and that

224
00:14:02,352 --> 00:14:05,930
object can expect to have properties of breed,

225
00:14:06,270 --> 00:14:09,846
which is a string age which is a number and name,

226
00:14:09,968 --> 00:14:13,886
which is an optional string. And we

227
00:14:13,908 --> 00:14:17,678
can use that in

228
00:14:17,684 --> 00:14:21,662
our code by creating a variable and assigning it the type of dog.

229
00:14:21,796 --> 00:14:25,278
And we can say in this case we have a variable called my dog,

230
00:14:25,444 --> 00:14:28,802
which is an object that is the breed of chihuini, age of four,

231
00:14:28,856 --> 00:14:32,322
and name is nugget. And this is also a good example

232
00:14:32,456 --> 00:14:36,514
here where you can define your types in one file

233
00:14:36,562 --> 00:14:39,346
and actually import them to another file.

234
00:14:39,458 --> 00:14:43,426
In fact, you can even combine typescript and js docs

235
00:14:43,458 --> 00:14:47,154
by using, let's say a types D ts

236
00:14:47,202 --> 00:14:50,934
file and define youre types in there and import them into a JavaScript

237
00:14:50,982 --> 00:14:52,810
file using this syntax.

238
00:14:54,830 --> 00:14:57,894
So as I mentioned, jsdocs,

239
00:14:57,942 --> 00:15:01,386
I'm not going to dig into too much of the

240
00:15:01,408 --> 00:15:04,926
syntax today. I think there's a lot of documentation out there, and I

241
00:15:04,948 --> 00:15:08,702
have an article that I wrote that I'll link to for actually

242
00:15:08,756 --> 00:15:11,950
learning the syntax, but I want to walk through the different

243
00:15:12,020 --> 00:15:15,486
processes or phases of including it into a project. So we talked about

244
00:15:15,508 --> 00:15:19,214
into files into an entire project, and then I feel like the next phase

245
00:15:19,262 --> 00:15:22,978
is as part of a CI CD pipeline. This is going to be a

246
00:15:22,984 --> 00:15:26,642
little bit different because up until now we haven't used any other

247
00:15:26,696 --> 00:15:29,942
tooling additional besides vs code.

248
00:15:29,996 --> 00:15:33,654
So we've done everything that's already built in. We haven't had to NPM install anything,

249
00:15:33,772 --> 00:15:37,526
we haven't had to run any sort of other process in our

250
00:15:37,548 --> 00:15:40,646
terminal or anything like that. That changes with CI CD,

251
00:15:40,758 --> 00:15:43,994
because in a CI CD pipeline it's not

252
00:15:44,032 --> 00:15:47,834
going to have the typescript language engine built in,

253
00:15:47,872 --> 00:15:51,918
so we have to provide that for it. To do that

254
00:15:52,084 --> 00:15:56,506
we can NPM install and save as a dependency or a dev dependency

255
00:15:56,618 --> 00:16:00,126
the typescript compiler. Once we

256
00:16:00,148 --> 00:16:03,490
do that, we can also go to a package JSON file. We can add

257
00:16:03,560 --> 00:16:06,978
a script that I like to call TS, and we can

258
00:16:06,984 --> 00:16:09,570
see that the dev dependencies include typescript.

259
00:16:11,430 --> 00:16:15,022
Now, because we are now using the typescript compiler,

260
00:16:15,086 --> 00:16:18,758
we probably want to start adding more configuration options

261
00:16:18,844 --> 00:16:22,662
to our TS config file. One is we want to tell it which

262
00:16:22,716 --> 00:16:26,550
files to actually check. So our index file, for example,

263
00:16:26,700 --> 00:16:30,614
and we want to pass two new configuration

264
00:16:30,662 --> 00:16:34,614
options to it. One is to allow JS,

265
00:16:34,742 --> 00:16:37,626
even though we had checked JS before, but now we want to allow it for

266
00:16:37,648 --> 00:16:40,874
the compiler, and we also want to turn

267
00:16:40,912 --> 00:16:44,666
on the noemit flag. Now by default the typescript compiler

268
00:16:44,698 --> 00:16:48,094
is going to take typescript source code and convert it

269
00:16:48,132 --> 00:16:51,278
to or output JavaScript. We are going to

270
00:16:51,284 --> 00:16:54,306
be starting with JavaScript, so we don't actually have to output anything,

271
00:16:54,408 --> 00:16:58,100
unless you did want to do some transforms. I don't like to do that.

272
00:17:00,870 --> 00:17:04,514
So once we have this typescript compiler in place,

273
00:17:04,552 --> 00:17:08,350
we can actually open up our terminal and run that TS command.

274
00:17:08,510 --> 00:17:11,782
And if we have errors in our code base we're going to be able to,

275
00:17:11,836 --> 00:17:15,522
or it's going to tell us where those errors are, what file,

276
00:17:15,586 --> 00:17:19,574
what line, what column, things like that. And this is again particularly

277
00:17:19,622 --> 00:17:22,810
helpful if you want to build a pipeline. You can put this as

278
00:17:22,880 --> 00:17:26,186
a step in the pipeline that

279
00:17:26,208 --> 00:17:29,562
is required before deploying your code. And if this

280
00:17:29,616 --> 00:17:33,054
step runs into one of these errors, it's not going to go to the next

281
00:17:33,092 --> 00:17:36,634
step, which could be to again deploy your code super handy

282
00:17:36,682 --> 00:17:40,190
to avoid type checking errors in production.

283
00:17:41,970 --> 00:17:45,746
So now that we've introduced that type checking into our

284
00:17:45,768 --> 00:17:49,074
CI CD pipeline, we can actually take it a step further and

285
00:17:49,112 --> 00:17:52,606
include it into generating types

286
00:17:52,638 --> 00:17:57,582
for our libraries. Now this is going to be something that is unique to library

287
00:17:57,646 --> 00:18:01,014
authors like myself, but again, this is kind

288
00:18:01,052 --> 00:18:04,486
of as we are going the next incremental step that I see.

289
00:18:04,588 --> 00:18:08,422
So I want to be able to generate type definitions to provide to

290
00:18:08,476 --> 00:18:10,790
my library's consumers.

291
00:18:11,950 --> 00:18:15,606
We can do that once again by going back to that ts config

292
00:18:15,638 --> 00:18:18,982
file. And now instead of turning on that no emit rule,

293
00:18:19,046 --> 00:18:22,862
we actually want the typescript compiler to emit those type

294
00:18:22,916 --> 00:18:26,954
definition files. However, we only want those type definition

295
00:18:27,002 --> 00:18:31,422
files. So we're going to set declaration to true for the type

296
00:18:31,476 --> 00:18:35,150
declarations. We're going to set emit declaration

297
00:18:35,230 --> 00:18:39,102
only to true so that it doesn't actually output any javascript.

298
00:18:39,166 --> 00:18:42,622
Because again, I'm already writing javascript, I don't need typescript

299
00:18:42,686 --> 00:18:46,866
to turn it into more javascript, and I'm going to

300
00:18:46,968 --> 00:18:50,950
define a folder where I want those type definitions to exist.

301
00:18:51,610 --> 00:18:54,806
And with that I can go back to my package Json file and I can

302
00:18:54,828 --> 00:18:58,594
tell package Json where my type definition files exist,

303
00:18:58,642 --> 00:19:02,346
in this case in the disk folder, so that when I publish my package and

304
00:19:02,368 --> 00:19:06,426
people are going to be consuming it, they can grab the type definitions for

305
00:19:06,448 --> 00:19:09,370
my library from the disk folder.

306
00:19:11,170 --> 00:19:14,734
So that is essentially the roadmap that I've followed through

307
00:19:14,772 --> 00:19:17,760
my journey and I've felt that it works just fine.

308
00:19:18,690 --> 00:19:21,774
I've started as just enabling type checking on

309
00:19:21,812 --> 00:19:25,394
individual files and then on the entire project, and then

310
00:19:25,512 --> 00:19:29,106
figured out how to incorporate it into a CitV pipeline and

311
00:19:29,128 --> 00:19:32,930
then generate type definitions for the libraries that I'm publishing,

312
00:19:34,070 --> 00:19:37,826
and it's been really awesome. I like

313
00:19:37,848 --> 00:19:41,654
this approach because you can do it incrementally and you don't have to

314
00:19:41,852 --> 00:19:45,346
rewrite your whole code base all at once. You can just kind of fix bugs

315
00:19:45,378 --> 00:19:49,418
as they arise. So a

316
00:19:49,424 --> 00:19:52,906
couple of closing points that I want to make is

317
00:19:53,088 --> 00:19:56,954
that in this case you

318
00:19:56,992 --> 00:20:00,330
don't have to pick well, with this approach you don't have to pick

319
00:20:00,400 --> 00:20:03,786
either typescript or JS docs.

320
00:20:03,818 --> 00:20:07,226
I really like this because it is an incremental adoption strategy. If youre

321
00:20:07,258 --> 00:20:10,986
starting from JavaScript, you can just start adding these type annotations

322
00:20:11,098 --> 00:20:14,542
with JSDocs to your JavaScript files,

323
00:20:14,686 --> 00:20:18,226
and eventually you can start introducing more

324
00:20:18,248 --> 00:20:21,746
and more typescript if you like that. In fact, you can

325
00:20:21,928 --> 00:20:25,766
do a little bit of both. You can start with JavaScript and

326
00:20:25,788 --> 00:20:29,106
then slowly incorporate more typescript. And then eventually,

327
00:20:29,218 --> 00:20:32,582
if you like the typescript syntax better, you can transition into

328
00:20:32,636 --> 00:20:35,766
typescript. I personally find that

329
00:20:35,788 --> 00:20:39,478
JS docs works better for adding more descriptions

330
00:20:39,574 --> 00:20:42,726
to things like objects or methods,

331
00:20:42,838 --> 00:20:46,314
because I don't know if typescript has a syntax for

332
00:20:46,432 --> 00:20:50,058
adding extended definitions to what an object property

333
00:20:50,144 --> 00:20:53,280
is, for example, or what a type property is.

334
00:20:54,210 --> 00:20:57,406
However, typescript is certainly kind

335
00:20:57,428 --> 00:21:01,166
of the underlying engine that's powering all of this, and therefore it's going to be

336
00:21:01,188 --> 00:21:04,366
better at some other things. For example, typecasting in

337
00:21:04,388 --> 00:21:08,158
typescript is just way better. And if you

338
00:21:08,164 --> 00:21:11,170
don't know what typecasting is, I don't think I need to get into it now.

339
00:21:11,240 --> 00:21:14,210
But if you go down this route, you are going to find that as well.

340
00:21:14,360 --> 00:21:17,666
There are some things that the typescript team

341
00:21:17,768 --> 00:21:21,494
is not going to support that is part of JSDOCs, or things

342
00:21:21,532 --> 00:21:25,046
that typescript has that they are not going to implement if

343
00:21:25,068 --> 00:21:28,646
you're using the JSDOCs syntax. That said, I haven't

344
00:21:28,678 --> 00:21:32,374
had any problem yet having large JavaScript

345
00:21:32,422 --> 00:21:35,546
projects that are using JSDOCs and using typescript to

346
00:21:35,568 --> 00:21:39,834
do the type checking on it. Either way,

347
00:21:39,952 --> 00:21:43,898
you're probably still going to push some errors to production

348
00:21:44,074 --> 00:21:47,502
typescript JSDocs. They're not going to help you catch every single

349
00:21:47,556 --> 00:21:51,770
but, and they both can get extremely complicated.

350
00:21:51,850 --> 00:21:55,326
It is a wonderful way to waste a whole bunch of

351
00:21:55,348 --> 00:21:59,726
time on things that are not going to add any value to the actual user,

352
00:21:59,838 --> 00:22:03,474
but is going to take hours and hours and hours of your day.

353
00:22:03,592 --> 00:22:06,946
So either way, it's fun,

354
00:22:07,048 --> 00:22:11,282
I guess, and it helps me catch a lot of errors that I would otherwise

355
00:22:11,426 --> 00:22:15,190
not have caught. So I hope that you found that this talk

356
00:22:15,260 --> 00:22:18,582
interesting, and I hope that you practice some of these things and it can help

357
00:22:18,636 --> 00:22:21,978
you catch some otherwise or some errors that

358
00:22:21,984 --> 00:22:25,478
would otherwise have gotten through. So that's all I've

359
00:22:25,494 --> 00:22:28,886
got for you today. If you want to learn more, I do have a blog

360
00:22:28,918 --> 00:22:33,610
post that I wrote about this that basically outlines in more detail this

361
00:22:33,680 --> 00:22:37,730
process. It's Austin gil.com typescript theeasyway

362
00:22:37,910 --> 00:22:41,902
and if you have any questions, I would love to connect with you.

363
00:22:41,956 --> 00:22:45,438
I'm looking to do these talks that I can talk to more people in the

364
00:22:45,444 --> 00:22:49,146
community. So if you like the talk, if you hated it, if you have corrections

365
00:22:49,178 --> 00:22:52,270
that you want me to make, reach out to me on Twitter. I'd love to

366
00:22:52,340 --> 00:22:55,926
chat with you about this or anything else related to

367
00:22:55,948 --> 00:22:59,446
web development. And don't forget my dog is

368
00:22:59,468 --> 00:23:03,014
really cute. If you like the pictures of Nugget and you want more, head to

369
00:23:03,052 --> 00:23:06,162
instagram.com at nuggetthemighty.

370
00:23:06,226 --> 00:23:09,318
So I hope you enjoy this talk and I will catch you out on the

371
00:23:09,324 --> 00:23:09,570
Internet.

