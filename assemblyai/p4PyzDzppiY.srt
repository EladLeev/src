1
00:00:25,410 --> 00:00:28,614
You everyone uses apps on their

2
00:00:28,652 --> 00:00:32,134
machine that somehow just feel off. Maybe the

3
00:00:32,172 --> 00:00:35,442
mouse works slightly different, or menus look weird,

4
00:00:35,586 --> 00:00:38,966
or maybe you can't even articulate it. Something's just

5
00:00:39,068 --> 00:00:42,246
wrong. There are a million tiny things that can

6
00:00:42,268 --> 00:00:46,326
make an app feel off, regardless of which framework it's built in.

7
00:00:46,508 --> 00:00:49,702
But if you know what to look for, you can make your app feel great

8
00:00:49,756 --> 00:00:54,010
on on all platforms, this talk is about Electron,

9
00:00:54,090 --> 00:00:58,026
but I don't want to spend too much time on what Electron is, so here's

10
00:00:58,058 --> 00:01:01,466
a quick run through Electron is a framework

11
00:01:01,578 --> 00:01:05,086
to create cross platform apps using web technologies.

12
00:01:05,278 --> 00:01:08,734
It came out of GitHub, where it was developed for their code editor,

13
00:01:08,782 --> 00:01:13,102
Atom. Electron combines a recent version of Chromium

14
00:01:13,246 --> 00:01:17,110
node and a set of operating system specific APIs.

15
00:01:18,010 --> 00:01:21,446
In essence, they combine the power and freedom of developing for

16
00:01:21,468 --> 00:01:25,254
the web with the right apps to interact with your operating system,

17
00:01:25,372 --> 00:01:29,030
with the file system, applications, et cetera.

18
00:01:29,770 --> 00:01:33,798
What electron does is not new per se. There have been many attempts

19
00:01:33,814 --> 00:01:37,914
at this going back to Adobe Air in 2008. What I think makes

20
00:01:37,952 --> 00:01:41,930
electron different, and why it has seen such widespread adoption,

21
00:01:42,090 --> 00:01:45,040
is that Electron gets most of the things right.

22
00:01:45,650 --> 00:01:49,242
Building and packaging apps is straightforward and even doable.

23
00:01:49,306 --> 00:01:52,974
Cross platform and the chosen abstractions make it easy

24
00:01:53,012 --> 00:01:56,842
to port over web applications. The skill set

25
00:01:56,916 --> 00:02:00,398
you already have if you develop for the web or with node,

26
00:02:00,494 --> 00:02:02,770
can be used to create electron apps.

27
00:02:03,910 --> 00:02:07,654
Here's an example of the code you need to show the Conf 42

28
00:02:07,692 --> 00:02:11,298
schedule as an app. Notice it's not that many lines

29
00:02:11,314 --> 00:02:14,150
of code and it's all just regular javascript.

30
00:02:15,290 --> 00:02:19,254
Basically, we start an app, then we create a browser

31
00:02:19,302 --> 00:02:23,094
window for that app. And lastly, when all the windows

32
00:02:23,142 --> 00:02:25,500
are closed again, we also quit the application.

33
00:02:28,030 --> 00:02:31,690
Now back to this idea of cross platform applications.

34
00:02:32,210 --> 00:02:35,630
We all know all these operating systems have pretty different

35
00:02:35,700 --> 00:02:39,518
interfaces. The good and the bad news is

36
00:02:39,684 --> 00:02:43,162
that the devil is in the details when it comes to building good uis

37
00:02:43,226 --> 00:02:46,674
for all platforms. This is good news because

38
00:02:46,712 --> 00:02:50,414
it means if you want to get it right, you don't need a giant

39
00:02:50,462 --> 00:02:53,794
redesign of your app to make it conform 100% to

40
00:02:53,832 --> 00:02:57,318
each platform. You don't need to reimplement everything

41
00:02:57,404 --> 00:03:00,850
using native widgets, and you can keep your app's

42
00:03:00,930 --> 00:03:04,578
unique style. We have web apps

43
00:03:04,594 --> 00:03:08,446
and mobile devices to thank for that. Because of web apps

44
00:03:08,498 --> 00:03:12,102
and mobile devices, users have grown more tolerant and welcoming

45
00:03:12,166 --> 00:03:14,010
to different types of interfaces.

46
00:03:15,870 --> 00:03:19,034
If something like Gmail would have launched as a Mac app,

47
00:03:19,152 --> 00:03:23,114
it would have been disregarded in an instant. But superhuman,

48
00:03:23,162 --> 00:03:26,334
launched 13 years later, comes just fine with a very

49
00:03:26,372 --> 00:03:29,882
custom interface. So more custom app UI

50
00:03:29,946 --> 00:03:33,598
are much more acceptable nowadays, but you do need to

51
00:03:33,604 --> 00:03:35,390
pay attention to the details.

52
00:03:36,850 --> 00:03:40,386
This is especially interesting for electron app apps because they

53
00:03:40,408 --> 00:03:43,698
tend to have a much more custom UI than apps built in

54
00:03:43,704 --> 00:03:47,506
other frameworks using native widgets. And strangely

55
00:03:47,538 --> 00:03:50,950
enough, the fully custom UI that an app like Slack has

56
00:03:51,020 --> 00:03:55,026
is actually a benefit. By creating a consistent interface

57
00:03:55,058 --> 00:03:58,514
for slack across different platforms, it actually becomes

58
00:03:58,562 --> 00:04:02,266
easier to use for your users. For each platform,

59
00:04:02,368 --> 00:04:05,754
however, it will need to take over some of the customs that

60
00:04:05,792 --> 00:04:09,386
that particular operating system uses, and the combination of

61
00:04:09,408 --> 00:04:13,402
this custom UI that works well with what you expect from your desktop

62
00:04:13,466 --> 00:04:15,600
is what makes or breaks an application.

63
00:04:17,010 --> 00:04:20,362
In this talk, I'll walk you through eight design and implementation

64
00:04:20,426 --> 00:04:23,774
details I think matter the most. Tell you how to think about

65
00:04:23,812 --> 00:04:28,194
them and how to solve them through code and design first

66
00:04:28,232 --> 00:04:31,826
off, a little about me my name is Kilian Valkov. For the

67
00:04:31,848 --> 00:04:35,794
past 20 years, I've developed websites, web applications and desktop

68
00:04:35,842 --> 00:04:39,560
software. I'm also part of the electron governance team.

69
00:04:40,570 --> 00:04:44,242
For the past ten or so years, I've used a number of different technologies

70
00:04:44,306 --> 00:04:48,490
to publish desktop applications. I've used QT

71
00:04:49,870 --> 00:04:53,834
and I've also used GTK. But before

72
00:04:53,872 --> 00:04:57,980
I moved to Electron, these were just theoretically cross platform.

73
00:04:58,430 --> 00:05:01,934
There was nothing much in the code itself to prevent them from being run on

74
00:05:01,972 --> 00:05:05,834
different platforms, but the process of building and packaging

75
00:05:05,882 --> 00:05:10,602
was just too opaque for me. Then after discovering Electron,

76
00:05:10,746 --> 00:05:14,506
suddenly it was easy for me to distribute apps on all platforms,

77
00:05:14,538 --> 00:05:18,130
and I've created dozens of them, open source and for clients alike.

78
00:05:18,870 --> 00:05:22,450
Electron made that possible for me, and it also helped me focus

79
00:05:22,520 --> 00:05:25,010
on the real cross platform details.

80
00:05:26,170 --> 00:05:29,542
So here's eight ways to make your electron app feel great.

81
00:05:29,596 --> 00:05:31,350
On all three platforms,

82
00:05:33,370 --> 00:05:36,566
we all know what it looks like to load a web page.

83
00:05:36,748 --> 00:05:40,314
You stare at a white page for a while, then things start to pop in,

84
00:05:40,352 --> 00:05:42,890
and after some time, everything's loaded.

85
00:05:43,870 --> 00:05:47,466
We also know how loading an app works. You stare at the

86
00:05:47,488 --> 00:05:51,534
icon bouncing in your dock for a while, and then the

87
00:05:51,572 --> 00:05:53,870
app pops into view, fully formed.

88
00:05:54,850 --> 00:05:58,526
Because electron essentially loads a web page, it'll try

89
00:05:58,548 --> 00:06:01,754
to do the former. We want to do the letter,

90
00:06:01,802 --> 00:06:04,080
and there's two things we need to do for that.

91
00:06:05,490 --> 00:06:09,010
So if we go back to the quickstart example, what's happening

92
00:06:09,080 --> 00:06:12,980
here is that it shows the window and then starts loading the page.

93
00:06:13,750 --> 00:06:16,440
What we want to do is flip that around.

94
00:06:17,850 --> 00:06:21,378
We want to wait, showing the app until the page we're

95
00:06:21,394 --> 00:06:25,026
showing has fully loaded. Electron gives us a handy

96
00:06:25,058 --> 00:06:28,850
event for this, called ready to show when we create a

97
00:06:28,860 --> 00:06:32,086
new window using browser window. We initially hide

98
00:06:32,118 --> 00:06:35,866
it with show colon false. Then we wait for

99
00:06:35,888 --> 00:06:39,930
the ready to show event and at that point we show the window.

100
00:06:40,510 --> 00:06:44,430
This guarantees your page has loaded before the windows is shown.

101
00:06:45,410 --> 00:06:49,066
The other thing we want to do here is focus the window once it's

102
00:06:49,098 --> 00:06:52,446
shown. This is what happens for native Windows two and

103
00:06:52,468 --> 00:06:55,140
it lets users interact with it straight away.

104
00:06:57,350 --> 00:07:00,626
The second thing we want to do here is set a background color on your

105
00:07:00,648 --> 00:07:04,690
browser window instead of the default white for window backgrounds

106
00:07:05,190 --> 00:07:08,466
while pages are loading. The background of your window now follows

107
00:07:08,498 --> 00:07:11,846
the background of the rest of your application, making it feel much

108
00:07:11,868 --> 00:07:14,440
more cohesive and less like a web page.

109
00:07:15,850 --> 00:07:18,806
If you have an app that takes a while to load and want to make

110
00:07:18,828 --> 00:07:22,122
it feel faster, you can also opt to show the page

111
00:07:22,176 --> 00:07:25,658
with a custom background color before the ready to show event

112
00:07:25,824 --> 00:07:29,894
so something is already visible on the screen and animating your UI

113
00:07:29,942 --> 00:07:33,886
or show a skeleton screen as soon as possible. The time

114
00:07:33,908 --> 00:07:37,262
to using your app might be the same or even slightly longer,

115
00:07:37,396 --> 00:07:40,606
but because stuff is happening on the screen it'll feel better for

116
00:07:40,628 --> 00:07:41,710
your users.

117
00:07:44,050 --> 00:07:47,262
We're skipping all the way to the end now, but the way your app closes

118
00:07:47,326 --> 00:07:50,754
is just as important as the way it opens. And it's here

119
00:07:50,792 --> 00:07:54,450
where something slightly different happens on Windows versus Mac

120
00:07:55,450 --> 00:07:58,738
conceptually, on Windows and Linux the window

121
00:07:58,834 --> 00:08:02,674
is the application. On Mac, however, the window

122
00:08:02,722 --> 00:08:05,974
is just an instance of the application. What this

123
00:08:06,012 --> 00:08:09,174
means is that on Windows if you close the app window,

124
00:08:09,302 --> 00:08:13,050
you close the app. On Mac the app actually

125
00:08:13,120 --> 00:08:16,314
stays open and active in your dock and clicking it

126
00:08:16,352 --> 00:08:18,250
will relaunch your window.

127
00:08:19,870 --> 00:08:23,886
So on Windows and Linux if someone comes the app window you

128
00:08:23,908 --> 00:08:26,000
can safely quit the app as well.

129
00:08:27,090 --> 00:08:30,654
On Mac, however, you need to keep your app running even if

130
00:08:30,692 --> 00:08:34,114
there is no main window. Darwin here is the

131
00:08:34,152 --> 00:08:36,900
internal name for macOS that we can use to match.

132
00:08:40,230 --> 00:08:44,500
Now what you'll need to do is make some changes to the

133
00:08:45,130 --> 00:08:49,474
little comes example we just gave and export

134
00:08:49,522 --> 00:08:52,662
everything to a create window function because we need to

135
00:08:52,716 --> 00:08:56,534
recreate the window when needed. With the

136
00:08:56,572 --> 00:09:00,394
create window function we can safely call that as

137
00:09:00,432 --> 00:09:04,234
soon as the app is ready and what we do here is

138
00:09:04,272 --> 00:09:08,422
add a listener so that when the main window is closed

139
00:09:08,566 --> 00:09:11,790
we also delete it again by setting it to null.

140
00:09:13,010 --> 00:09:17,546
Then when clicking the doc

141
00:09:17,578 --> 00:09:21,354
icon we get the activate event and with this activate

142
00:09:21,402 --> 00:09:24,994
event we can recreate a window again if there is not

143
00:09:25,032 --> 00:09:28,878
currently a window available. So either the window will be created

144
00:09:28,974 --> 00:09:31,410
or we'll just open the existing window.

145
00:09:35,130 --> 00:09:38,934
Now on the web we save user preferences, but all

146
00:09:38,972 --> 00:09:42,310
of them tend to be app specific user preferences.

147
00:09:43,210 --> 00:09:46,546
On the desktop, however, we also have meta user

148
00:09:46,578 --> 00:09:50,602
preferences, and they're not things you might think about because they

149
00:09:50,656 --> 00:09:54,774
don't exist on the web, but they're really important for not frustrating

150
00:09:54,822 --> 00:09:58,026
your user. Two important things in

151
00:09:58,048 --> 00:10:01,914
that regard are remembering window positions and remembering

152
00:10:01,962 --> 00:10:03,470
last opened folders.

153
00:10:05,570 --> 00:10:08,494
Once you start user testing your desktop app,

154
00:10:08,612 --> 00:10:12,206
you'll find out that nearly each user has their own preference for

155
00:10:12,228 --> 00:10:15,840
where your app is on the screen and which dimensions it has.

156
00:10:16,150 --> 00:10:19,986
If a user has to reset that every time they open your app, they are

157
00:10:20,008 --> 00:10:23,330
going to move on to an app that does conform to their user preferences.

158
00:10:24,150 --> 00:10:27,622
So keeping track of your window position is a really

159
00:10:27,676 --> 00:10:31,286
nice thing to do. There are a number of variables you want

160
00:10:31,308 --> 00:10:32,440
to keep track of,

161
00:10:34,490 --> 00:10:38,194
the window dimensions, the position which

162
00:10:38,252 --> 00:10:41,594
screen it's on, and whether or not the app is

163
00:10:41,632 --> 00:10:46,102
maximized. And the last one is actually pretty tricky.

164
00:10:46,246 --> 00:10:49,722
You see, maximized is a state your app can be in,

165
00:10:49,856 --> 00:10:53,754
but if you exit the maximized state, native apps

166
00:10:53,802 --> 00:10:56,906
restore to the previously userset geometry.

167
00:10:57,098 --> 00:11:00,762
So while you should save the fact that your app is maximized,

168
00:11:00,906 --> 00:11:04,260
you shouldn't actually save the geometry for that state.

169
00:11:06,470 --> 00:11:10,126
Building this yourself is not that hard. Electron has events

170
00:11:10,158 --> 00:11:13,234
for the resize and move events, and if

171
00:11:13,272 --> 00:11:17,006
you get the window geometry and save that on each of these events,

172
00:11:17,118 --> 00:11:20,582
as long as it's not in a maximized state and store that,

173
00:11:20,716 --> 00:11:23,720
you can retrieve it again on applaunch and use that.

174
00:11:24,490 --> 00:11:28,434
You can save these settings in a flat file or use something like electron

175
00:11:28,562 --> 00:11:30,870
settings which you can get on NPM.

176
00:11:32,730 --> 00:11:35,866
On applaunch you get the Windows state and test if

177
00:11:35,888 --> 00:11:39,226
it has bounds. It won't have those the first time

178
00:11:39,248 --> 00:11:43,230
someone opens the app. So you do need to provide adequate fallbacks.

179
00:11:43,810 --> 00:11:47,006
Then a gotcha. You can't start a window in

180
00:11:47,028 --> 00:11:50,462
its maximized state. You can only maximize a window after

181
00:11:50,516 --> 00:11:54,274
it's shown. So we check if we should maximize in the

182
00:11:54,312 --> 00:11:58,450
ready to go ready to show event after the window is shown.

183
00:12:00,230 --> 00:12:04,450
But if you want to keep things simple, there is the electron window state

184
00:12:04,520 --> 00:12:07,798
package on NPM that does this work for you.

185
00:12:07,964 --> 00:12:11,586
It will also take care of some uncommon edge cases like resetting

186
00:12:11,618 --> 00:12:15,446
the position if your app was on a screen that's no longer connected to your

187
00:12:15,468 --> 00:12:19,126
computer. The other thing

188
00:12:19,148 --> 00:12:22,458
to keep track of is if your app supports saving

189
00:12:22,544 --> 00:12:26,566
or loading files. You want to keep track of the last use folder

190
00:12:26,598 --> 00:12:29,946
so that every time a user performs an action, they don't have to

191
00:12:29,968 --> 00:12:32,640
drill down from their comes directory. Again,

192
00:12:33,570 --> 00:12:37,230
the nice thing to do here is similar to the window positioning

193
00:12:37,570 --> 00:12:40,320
let users continue where they left off.

194
00:12:41,010 --> 00:12:44,306
If I navigated to a folder to select something, there's a

195
00:12:44,328 --> 00:12:47,842
high chance I want to use that folder again next time I do the same

196
00:12:47,896 --> 00:12:51,010
action like saving or opening a file,

197
00:12:51,590 --> 00:12:55,426
so navigating to that folder saves users a lot

198
00:12:55,448 --> 00:12:58,646
of time. What you want to do as

199
00:12:58,668 --> 00:13:02,774
a developer is on each successful interaction with the file system.

200
00:13:02,972 --> 00:13:06,662
Store the path that the user ended up choosing and

201
00:13:06,716 --> 00:13:10,090
next time for the same interaction, start with that path.

202
00:13:10,750 --> 00:13:14,134
That path has the highest chance of being the correct path,

203
00:13:14,262 --> 00:13:18,490
or at the very least it's better than just opening someone's home directory.

204
00:13:18,910 --> 00:13:22,240
You'll notice most native applications also do this.

205
00:13:23,090 --> 00:13:26,750
Now I mentioned storing this path on successful interactions.

206
00:13:27,090 --> 00:13:31,258
You don't want to store the path if a user ended up canceling the interaction.

207
00:13:31,434 --> 00:13:35,010
Obviously what they wanted to find wasn't on that particular path.

208
00:13:37,510 --> 00:13:40,766
A couple of versions ago, Electron did not ship with the default

209
00:13:40,798 --> 00:13:44,306
application menu, and particularly on macOS. This gave

210
00:13:44,328 --> 00:13:48,066
some issues. If an application doesn't have an application menu

211
00:13:48,098 --> 00:13:51,974
with cut, copy and paste in it, then you can't actually perform those

212
00:13:52,012 --> 00:13:55,174
actions in your app. Guess who found

213
00:13:55,212 --> 00:13:57,480
that out after shipping a note taking app?

214
00:13:59,230 --> 00:14:02,774
Luckily, nowadays Electron will give you a default menu

215
00:14:02,822 --> 00:14:06,666
if you don't set one yourself solving that issue. But the

216
00:14:06,688 --> 00:14:10,374
default menu is pretty Mac centric, and to supply menus

217
00:14:10,422 --> 00:14:13,614
that also make sense on Windows and Linux, where there's a

218
00:14:13,652 --> 00:14:16,878
file menu item instead of the app name and the

219
00:14:16,884 --> 00:14:19,770
help menu generally doesn't have search functionality,

220
00:14:19,930 --> 00:14:23,140
you'll have to replicate the entire menu structure yourself.

221
00:14:24,790 --> 00:14:29,230
To solve this, I made an NPM package called Electron Create Menu.

222
00:14:29,390 --> 00:14:33,486
It replaces the menu API that electron gives you and creates

223
00:14:33,518 --> 00:14:36,530
a platform appropriate menu for you automatically.

224
00:14:37,030 --> 00:14:41,218
It also gives you a new property for each menu item or menu section

225
00:14:41,314 --> 00:14:45,000
that it uses to determine which platform to show things on.

226
00:14:45,610 --> 00:14:48,874
This way, you can have a single menu structure for all three

227
00:14:48,912 --> 00:14:52,810
platforms and still show the appropriate menu items and titles.

228
00:14:54,270 --> 00:14:57,514
This is what it looks like. The first object is

229
00:14:57,552 --> 00:15:01,306
shown on Mac only and the bottom item is hidden on Mac

230
00:15:01,338 --> 00:15:04,734
only, so it's shown on Windows and Linux. And this way you can

231
00:15:04,772 --> 00:15:08,190
very easily differentiate your menu between platforms.

232
00:15:11,090 --> 00:15:14,974
Text highlighting when you press command

233
00:15:15,022 --> 00:15:17,620
a on a website it looks like this,

234
00:15:18,950 --> 00:15:22,418
but if you do the same in say, pages, it's a

235
00:15:22,424 --> 00:15:25,678
little different. The text selection is only contained to

236
00:15:25,704 --> 00:15:29,058
the actual writable area that's currently focused, and none

237
00:15:29,074 --> 00:15:34,054
of the UI or buttons are suddenly highlighted to

238
00:15:34,092 --> 00:15:37,286
get the right effect in electron, where it doesn't mess up

239
00:15:37,308 --> 00:15:40,346
your entire app UI. We need a little CSS to

240
00:15:40,368 --> 00:15:44,234
help out with user select none on the

241
00:15:44,272 --> 00:15:47,386
body. None of your app's UI text will be

242
00:15:47,408 --> 00:15:50,926
selectable. You might think you need to unset this

243
00:15:50,948 --> 00:15:54,560
for input fields, but chromium already takes care of that for us.

244
00:15:57,250 --> 00:16:01,022
Not every application needs a context menu, the menu that shows

245
00:16:01,076 --> 00:16:04,162
when you right click somewhere. But it is something that people

246
00:16:04,216 --> 00:16:07,426
expect particularly in text areas with cut, copy and

247
00:16:07,448 --> 00:16:10,994
paste at least because context menus are

248
00:16:11,112 --> 00:16:15,170
context dependent. Electron doesn't give you one by default,

249
00:16:16,070 --> 00:16:19,654
but it does give you an event you can respond to that lets you create

250
00:16:19,692 --> 00:16:22,200
a context menu yourself and then show it.

251
00:16:25,050 --> 00:16:28,582
It will tell you what the context menu was triggered on so you can show

252
00:16:28,636 --> 00:16:32,058
relevant menu options. If something is editable you

253
00:16:32,064 --> 00:16:35,180
can add but copy and paste and other relevant options.

254
00:16:36,030 --> 00:16:39,354
But if you right click on a link you might also want to show a

255
00:16:39,392 --> 00:16:42,702
copy link location option. You get quite

256
00:16:42,756 --> 00:16:46,170
a bit of information on a right click alongside knowing

257
00:16:46,250 --> 00:16:50,174
if where you right clicked is editable or a link. You can also

258
00:16:50,212 --> 00:16:53,978
get the link text, deselected text or detect if you're

259
00:16:53,994 --> 00:16:57,346
right clicking an image or a video. If you want

260
00:16:57,368 --> 00:17:01,694
to keep things simple there is the electron context menu NPM package

261
00:17:01,742 --> 00:17:04,890
that provides some basics for text, Linux and images

262
00:17:04,990 --> 00:17:06,280
right out of the box.

263
00:17:08,810 --> 00:17:12,338
Different operating systems use different keys for shortcuts

264
00:17:12,434 --> 00:17:15,526
and even though things are converging, it's still something you

265
00:17:15,548 --> 00:17:19,050
need to think about. There is one major

266
00:17:19,120 --> 00:17:22,314
difference where Windows and Linux uses control.

267
00:17:22,512 --> 00:17:26,186
Mac actually uses command which we refer to

268
00:17:26,208 --> 00:17:29,450
as the super or Windows key. On Linux and Windows,

269
00:17:32,210 --> 00:17:36,270
shortcuts in electron are created as global shortcuts which means

270
00:17:36,340 --> 00:17:38,990
they work regardless of your app being focused.

271
00:17:39,730 --> 00:17:43,330
Keyboard shortcuts are written out as a string. So you can

272
00:17:43,400 --> 00:17:47,380
write Alt plus R or backspace and those will work.

273
00:17:48,710 --> 00:17:52,898
But what if you want to add a safe shortcut? Do you add two

274
00:17:53,064 --> 00:17:55,380
control s and a command s?

275
00:17:56,630 --> 00:18:00,918
Electron helps us out here because you can actually type command or control

276
00:18:01,084 --> 00:18:04,360
and electron will pick the right one depending on the platform.

277
00:18:04,890 --> 00:18:10,346
That's going to save you a lot of if statements to

278
00:18:10,368 --> 00:18:13,562
make an app integrate with the system using the same

279
00:18:13,616 --> 00:18:16,874
font as the operating system is a really powerful way

280
00:18:16,912 --> 00:18:20,986
to make it feel cohesive. Unfortunately the browser

281
00:18:21,018 --> 00:18:24,954
default font is not always the system default. Especially when that's

282
00:18:25,002 --> 00:18:28,430
user customizable. So you could

283
00:18:28,500 --> 00:18:32,046
add a huge font stack like this. This one is from

284
00:18:32,068 --> 00:18:35,426
GitHub. Unfortunately, even though it's very long it

285
00:18:35,448 --> 00:18:38,926
doesn't account for the usual Linux system fonts being Ubuntu

286
00:18:38,958 --> 00:18:42,510
Sans oxygen and deja vu Sans. Luckily,

287
00:18:42,590 --> 00:18:46,414
there's a simpler way to do this. System UI

288
00:18:46,462 --> 00:18:50,194
is a special keyword value in CSS that macOS to the font

289
00:18:50,242 --> 00:18:53,606
the operating system uses. It's well supported in

290
00:18:53,628 --> 00:18:57,754
Chromium, and since we know that's what we're running on, we can use this without

291
00:18:57,792 --> 00:19:01,846
a fallback. So this will automatically pick Ubuntu Sans

292
00:19:01,878 --> 00:19:05,206
on Ubuntu, Segway UI on Windows, and can

293
00:19:05,238 --> 00:19:09,146
francisco on Mac. You can

294
00:19:09,168 --> 00:19:12,294
also, of course, use your own fonts like slack comes with the font

295
00:19:12,342 --> 00:19:15,742
leto. In this case, it's best to ship the font along

296
00:19:15,796 --> 00:19:19,550
with your application, either as a wolf two or a TTF.

297
00:19:21,890 --> 00:19:25,566
So that's my eight tips and I'll review them in a second. But I can't

298
00:19:25,598 --> 00:19:30,578
give a talk about electron without mentioning memory now.

299
00:19:30,664 --> 00:19:34,238
Personally, I think this is not the huge problem everyone pretends

300
00:19:34,254 --> 00:19:37,506
it is. Sure, your average vim user is going to

301
00:19:37,528 --> 00:19:40,854
bark at using 100 megabytes base memory just to run the

302
00:19:40,892 --> 00:19:44,706
app, but really, it's not significantly higher than most other GUI

303
00:19:44,738 --> 00:19:48,422
heavy apps. The problem you can run into though,

304
00:19:48,476 --> 00:19:51,786
is memory leaks. If you come from the

305
00:19:51,808 --> 00:19:55,718
web, you really only need to care about the worst of memory leaks.

306
00:19:55,894 --> 00:19:59,340
The runtime of a single page tends to be relatively short.

307
00:19:59,870 --> 00:20:03,294
This changes a little if you're working on spas, but even

308
00:20:03,332 --> 00:20:06,640
those tend to throw in a full page refresh every now and then.

309
00:20:07,650 --> 00:20:11,242
Apps are much longer lived, and because of that, small memory leaks

310
00:20:11,306 --> 00:20:15,630
can also become issues. So let's check out some strategies

311
00:20:15,710 --> 00:20:19,042
in dealing with these. Before I start,

312
00:20:19,096 --> 00:20:22,914
I want to mention that Electron has excellent performance documentation at

313
00:20:22,952 --> 00:20:27,698
Electron app Docs tutorial performance

314
00:20:27,874 --> 00:20:31,474
that focuses on making sure your app starts fast and that actions

315
00:20:31,522 --> 00:20:34,934
feel snappy. Things like bundling your code only,

316
00:20:34,972 --> 00:20:38,110
shipping the polyfills you need, and loading code strategically,

317
00:20:38,290 --> 00:20:42,300
it's an excellent resource, and it's definitely worth checking out.

318
00:20:43,790 --> 00:20:47,382
Now, for memory leaks, we get the benefit of Chromium

319
00:20:47,446 --> 00:20:51,206
and its developer tools. In recent years, the developer

320
00:20:51,238 --> 00:20:55,086
tools have added really good performance tooling, and you

321
00:20:55,108 --> 00:20:58,446
can use that right in electron to suss out any memory issues in

322
00:20:58,468 --> 00:21:02,206
your application. You can start a recording in this screen

323
00:21:02,308 --> 00:21:06,230
making sure that memory is checked, and use your app or the functions

324
00:21:06,250 --> 00:21:09,794
in your app that you want to test. When you're done,

325
00:21:09,832 --> 00:21:13,070
you end up with this view. It's a little intimidating

326
00:21:13,150 --> 00:21:15,870
and too much to go in through for this presentation,

327
00:21:16,030 --> 00:21:19,526
but what you want to focus on is this graph. It shows the

328
00:21:19,548 --> 00:21:22,390
memory usage and the number of listeners.

329
00:21:23,210 --> 00:21:26,838
If both of these go up and up and up.

330
00:21:27,004 --> 00:21:30,330
There's probably a listener you're not clearing somewhere.

331
00:21:31,230 --> 00:21:34,326
Additionally, in the flame graph above the chart,

332
00:21:34,438 --> 00:21:38,154
you can see some function calls that take too long, recognizable by the

333
00:21:38,192 --> 00:21:41,642
red ranked angle. These would be calls to look into

334
00:21:41,696 --> 00:21:43,950
to see what is causing the slowdown.

335
00:21:45,650 --> 00:21:49,006
Now for the note part of Electron, you can also use the

336
00:21:49,028 --> 00:21:52,798
chrome devtools in the same way. If you start electron with the

337
00:21:52,964 --> 00:21:56,830
inspect flag, then open chromium and go to chrome

338
00:21:57,490 --> 00:22:00,820
inspect and pick your application from the list.

339
00:22:02,870 --> 00:22:06,294
So to conclude, building a crossplatform app

340
00:22:06,332 --> 00:22:10,642
that feels great everywhere doesn't require conforming to the platform UI

341
00:22:10,706 --> 00:22:14,642
100%. Thanks to web apps and mobile devices,

342
00:22:14,786 --> 00:22:18,386
people are more familiar with different interfaces, but the devil

343
00:22:18,418 --> 00:22:21,226
is in the details to make your app feel at home,

344
00:22:21,328 --> 00:22:25,206
take care of at least these things. Don't launch

345
00:22:25,238 --> 00:22:29,082
your app like a web page, but hide it until the page is loaded and

346
00:22:29,136 --> 00:22:30,860
give it the right background color.

347
00:22:32,210 --> 00:22:35,338
Follow the platform's way of handling apps and windows.

348
00:22:35,514 --> 00:22:37,710
Keep the app running on macOS.

349
00:22:39,490 --> 00:22:43,026
Remember user preferences like Window Geometry and the

350
00:22:43,048 --> 00:22:46,686
last opened folder give users

351
00:22:46,718 --> 00:22:50,020
the menu, titles and actions they expect from their platform.

352
00:22:52,550 --> 00:22:58,230
Prevent users from selecting UI text and

353
00:22:58,300 --> 00:23:01,880
make sure you have a context menu where users expect one.

354
00:23:03,690 --> 00:23:07,542
Use the right keyboard, shortcuts command for Mac and control

355
00:23:07,596 --> 00:23:09,030
for Windows and Linux.

356
00:23:10,730 --> 00:23:13,798
Use the system font as a way to make your app feel part of the

357
00:23:13,804 --> 00:23:17,720
platform and lastly, keep your memory leaks under control.

358
00:23:18,250 --> 00:23:21,406
These are all the ingredients to make app field at home on all

359
00:23:21,428 --> 00:23:25,354
platforms. Check out electronjs.org

360
00:23:25,402 --> 00:23:28,858
for more information on electron. My name is Kilian

361
00:23:28,874 --> 00:23:31,274
Valkhof and you can find me at these links.

