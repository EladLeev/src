1
00:01:45,850 --> 00:01:49,722
Hey, all. My name is Christopher Weber, and I am the director

2
00:01:49,786 --> 00:01:53,470
of product and IT operations at Open Raven.

3
00:01:54,690 --> 00:01:58,554
We're going to talk a little bit today about staring

4
00:01:58,602 --> 00:02:02,126
into the data abyss and how we can achieve a higher level of

5
00:02:02,148 --> 00:02:05,334
cloud security. Mostly so you can sleep better at night,

6
00:02:05,372 --> 00:02:09,350
because I think that's really the critical piece of understanding

7
00:02:10,250 --> 00:02:13,766
how we might better sleep at night just to not have

8
00:02:13,788 --> 00:02:18,266
to think about all these crazy things. Because the

9
00:02:18,288 --> 00:02:21,530
reality whats I think that a lot of us are dealing with at this point

10
00:02:21,600 --> 00:02:25,482
is there is just so much

11
00:02:25,536 --> 00:02:28,940
data, and I mean so much data.

12
00:02:29,710 --> 00:02:33,214
It's really easy to think about when we look in terms of things

13
00:02:33,252 --> 00:02:36,718
like s three. I think using that as kind

14
00:02:36,724 --> 00:02:40,686
of our starting point, it's really interesting to reason about just

15
00:02:40,868 --> 00:02:44,734
how much is actually out there. So, first off, think about the number of AWS

16
00:02:44,782 --> 00:02:48,174
accounts you have. Even in my small organization,

17
00:02:48,302 --> 00:02:51,646
we've got over 30 accounts, and each one of those ends

18
00:02:51,678 --> 00:02:56,226
up with a bucket per region, per config.

19
00:02:56,418 --> 00:03:00,230
So AWS's config service, you add to that things

20
00:03:00,300 --> 00:03:03,394
like cloud trail,

21
00:03:03,442 --> 00:03:07,222
cloud formation, all that sort of stuff, and we haven't even started talking

22
00:03:07,276 --> 00:03:10,874
about your actual data and the applications that

23
00:03:10,912 --> 00:03:14,294
write and how all of that plays together. So it's

24
00:03:14,342 --> 00:03:18,826
really incredible just how much data ends up in the

25
00:03:18,848 --> 00:03:23,054
cloud, if you will. And I think it's worthwhile taking

26
00:03:23,092 --> 00:03:24,400
a step back. Right.

27
00:03:26,690 --> 00:03:30,046
In the old days, for those of us that have been around a little

28
00:03:30,068 --> 00:03:30,640
while,

29
00:03:33,250 --> 00:03:36,160
the data kind of protected itself in some way, right?

30
00:03:36,630 --> 00:03:40,146
You had to get into the system before you could get access to

31
00:03:40,168 --> 00:03:44,514
the NetApp filer, to the big

32
00:03:44,552 --> 00:03:48,070
EMC boxes, because you had to actually have access

33
00:03:48,140 --> 00:03:52,566
to those systems, whether they were sitting via NFS or

34
00:03:52,748 --> 00:03:56,454
via some fiber channel loop, you had to have access. And not

35
00:03:56,492 --> 00:04:00,218
just that, but the data could only grow so big

36
00:04:00,384 --> 00:04:03,514
because one of the things we realize is that in

37
00:04:03,552 --> 00:04:07,658
those environments, it really was a lot more

38
00:04:07,744 --> 00:04:11,146
about, you could only afford to

39
00:04:11,168 --> 00:04:15,134
buy so many shelves, you could only afford to add so

40
00:04:15,172 --> 00:04:18,490
many controllers because it was so expensive.

41
00:04:18,570 --> 00:04:22,094
And not to mention the upper limits of those systems, right?

42
00:04:22,132 --> 00:04:25,166
You could only get so much space on a given filer.

43
00:04:25,278 --> 00:04:28,946
And I think this is where it becomes really interesting

44
00:04:29,128 --> 00:04:32,834
and important to think about how much the world

45
00:04:32,872 --> 00:04:36,262
has actually changed, because it wouldn't be so bad with

46
00:04:36,316 --> 00:04:39,480
all of this data and the unlimited ability to write,

47
00:04:40,250 --> 00:04:43,714
except all those darn breaches.

48
00:04:43,842 --> 00:04:47,654
And I think when I look at

49
00:04:47,692 --> 00:04:51,466
s three in particular, and we can

50
00:04:51,488 --> 00:04:55,610
talk a little bit about rds as well. We can talk about your

51
00:04:55,680 --> 00:04:59,162
elasticsearch servers and pick a different cloud.

52
00:04:59,216 --> 00:05:02,842
Right? If we're talking about Google and Google Cloud storage

53
00:05:02,906 --> 00:05:06,080
or bigquery or any of those sorts of things,

54
00:05:06,450 --> 00:05:09,934
you have similar sets of problems. But at these, end of the day,

55
00:05:10,132 --> 00:05:13,294
it really boils down to we have to think

56
00:05:13,332 --> 00:05:15,860
about how we protect these environments a bit better.

57
00:05:16,470 --> 00:05:20,014
And I don't want to belabor the point, but I think it's

58
00:05:20,062 --> 00:05:23,426
important to really think through all of the

59
00:05:23,448 --> 00:05:27,154
breaches in these environments. Right? So Corey Quinn

60
00:05:27,282 --> 00:05:31,160
from last week in AWS or the duck bill group,

61
00:05:32,090 --> 00:05:35,282
as part of their last week in AWS newsletter,

62
00:05:35,346 --> 00:05:39,398
they regularly call out this bucket negligence award.

63
00:05:39,494 --> 00:05:42,794
And it's really interesting to me to

64
00:05:42,832 --> 00:05:49,066
think through just how

65
00:05:49,088 --> 00:05:52,978
much data gets exposed in some of these larger breaches.

66
00:05:53,014 --> 00:05:56,106
And the crazy part here is the three that we're showing

67
00:05:56,138 --> 00:05:59,806
here. That first, second and third is 1st, second and third that

68
00:05:59,828 --> 00:06:02,970
I found in my inbox. There's nothing particularly

69
00:06:03,050 --> 00:06:06,754
interesting about any one of these three breaches, except that

70
00:06:06,952 --> 00:06:10,754
it's personal data, it's customer data. And even more

71
00:06:10,792 --> 00:06:14,500
so than that, when you look at things like the Breast cancer Organization or

72
00:06:14,890 --> 00:06:17,960
breastcancer.org say that ten times fast,

73
00:06:18,890 --> 00:06:23,080
it was personal images, it was things that really

74
00:06:23,610 --> 00:06:26,710
make a huge difference to care about because we need to protect

75
00:06:26,780 --> 00:06:30,166
folks. So I don't

76
00:06:30,188 --> 00:06:33,398
want to go into any and shame any particular organization,

77
00:06:33,494 --> 00:06:36,394
but we all have this as a potential, right?

78
00:06:36,432 --> 00:06:40,662
We all have this data from customers that we need and have a responsibility

79
00:06:40,726 --> 00:06:43,600
to protect. So let's do that, right?

80
00:06:44,610 --> 00:06:47,706
The reality is that we're going to take that seriously.

81
00:06:47,738 --> 00:06:49,806
So the first thing we're going to do is we're going to add ourselves some

82
00:06:49,828 --> 00:06:50,990
security tooling.

83
00:06:53,090 --> 00:06:56,386
I think the starting point here is a CSPM tool.

84
00:06:56,568 --> 00:06:59,902
And if this was a live studio

85
00:06:59,966 --> 00:07:02,818
audience, I'd ask you all to raise your hands as to who knows what a

86
00:07:02,824 --> 00:07:06,178
CSPM tool is. But since I can do that, I'm going

87
00:07:06,184 --> 00:07:08,854
to go ahead and define that so that we all make sure that we're using

88
00:07:08,892 --> 00:07:10,870
the same meaning for these same acronyms.

89
00:07:12,010 --> 00:07:14,962
CSPM is cloud security posture management.

90
00:07:15,026 --> 00:07:18,540
So in a nutshell, you apply

91
00:07:19,150 --> 00:07:23,020
policies and you get alerts when things

92
00:07:23,710 --> 00:07:27,254
have incorrect configuration or configuration

93
00:07:27,302 --> 00:07:30,894
that's not secure by some

94
00:07:30,932 --> 00:07:34,766
definition and the

95
00:07:34,788 --> 00:07:38,414
way that plays out. So we

96
00:07:38,452 --> 00:07:41,742
install these tool and you know what? We're going to

97
00:07:41,876 --> 00:07:45,474
lean on people. Whats should know things better than us. We're going to

98
00:07:45,512 --> 00:07:49,346
apply the AWS CIS benchmark policy. For those that

99
00:07:49,368 --> 00:07:53,762
aren't aware, CIS is the center

100
00:07:53,816 --> 00:07:57,302
for Information Security and they

101
00:07:57,356 --> 00:08:01,190
do a fantastic job putting together a set of benchmarks.

102
00:08:03,770 --> 00:08:07,480
We all feel good, right? We're going to know all about our environment and

103
00:08:09,790 --> 00:08:13,066
it plays out really well because we're going to come back into our

104
00:08:13,088 --> 00:08:15,660
CSPM tomorrow once all the policies have run,

105
00:08:17,230 --> 00:08:20,986
and then we find ourselves in these abyss. So let's

106
00:08:21,018 --> 00:08:24,910
talk about this a little bit, because anybody that's done this before

107
00:08:24,980 --> 00:08:28,494
knows where I'm headed. But let's talk

108
00:08:28,692 --> 00:08:32,634
so there are five controls

109
00:08:32,682 --> 00:08:36,530
as part of two. One which deals with security

110
00:08:36,600 --> 00:08:40,818
of S three buckets, as in the AWS Chris benchmark policy.

111
00:08:40,984 --> 00:08:44,814
And I'm only going to deal with the automated ones because these are the ones

112
00:08:44,952 --> 00:08:48,662
that any CSPM tool is going to

113
00:08:48,716 --> 00:08:52,422
actually evaluate against. So let's look at these. First off,

114
00:08:52,476 --> 00:08:55,654
ensure all s three buckets employ encryption at rest.

115
00:08:55,852 --> 00:08:59,162
This makes sense, right? Until you realize that

116
00:08:59,296 --> 00:09:03,126
there are lots of places where you wouldn't necessarily want to use encryption

117
00:09:03,158 --> 00:09:06,374
at rest. For example, things that are intentionally

118
00:09:06,422 --> 00:09:10,554
made public, or my favorite things

119
00:09:10,592 --> 00:09:12,490
that have heavy readloads.

120
00:09:14,130 --> 00:09:17,710
Let's just say I got to know the CFO really

121
00:09:17,780 --> 00:09:21,210
well after some mistakes made with Athena

122
00:09:21,290 --> 00:09:25,006
and KMs and the cost of reading

123
00:09:25,038 --> 00:09:28,606
from Athena. There's a great story there at some point, so catch

124
00:09:28,638 --> 00:09:32,370
up with me afterwards to dig into that. But I digress.

125
00:09:33,590 --> 00:09:37,206
Two one, two. Ensure the s three bucket policy is set to

126
00:09:37,228 --> 00:09:41,830
deny HTTP requests. This is really a way of prohibiting

127
00:09:43,370 --> 00:09:46,566
effectively what could be anonymous calls, right?

128
00:09:46,588 --> 00:09:50,226
So if you're coming in via HTTP, that means that you're likely

129
00:09:50,258 --> 00:09:54,026
not authenticated via s these, and that's what this is

130
00:09:54,048 --> 00:09:57,642
wanting to do. There are lots of reasons that you might want things turned on,

131
00:09:57,696 --> 00:10:01,486
right? We may want to serve up images, we might want to

132
00:10:01,508 --> 00:10:05,518
serve up things that come in directly over

133
00:10:05,684 --> 00:10:09,066
the various protocols.

134
00:10:09,098 --> 00:10:13,078
So like cloudformation, that sort of thing. So there's lots of legitimate

135
00:10:13,114 --> 00:10:16,686
reasons why that may be a thing. Ensure MFA

136
00:10:16,718 --> 00:10:20,498
delete is enabled on so

137
00:10:20,664 --> 00:10:24,402
pro tip if you use MFA delete, you are going to need to go

138
00:10:24,456 --> 00:10:28,066
use the root account to go delete

139
00:10:28,098 --> 00:10:31,878
anything that has MFA delete turned on. So this seems

140
00:10:31,964 --> 00:10:35,366
really good in practice, or rather

141
00:10:35,468 --> 00:10:39,110
really good in theory, but in practice is absolutely terrible.

142
00:10:40,250 --> 00:10:42,794
I don't have to explain to this group, I don't think,

143
00:10:42,912 --> 00:10:45,590
why you shouldn't be logging in as the root user,

144
00:10:45,750 --> 00:10:49,834
and anything from a security policy that really binds to

145
00:10:49,872 --> 00:10:53,674
needing to access the account as a root user likely

146
00:10:53,722 --> 00:10:57,600
has some concerns and then finally

147
00:10:59,170 --> 00:11:02,362
block public access. Well, first off,

148
00:11:02,436 --> 00:11:06,366
AWS, by default when it creates buckets for you, doesn't tick

149
00:11:06,398 --> 00:11:10,242
this box and it gets really interesting when that plays out.

150
00:11:10,376 --> 00:11:14,354
So think

151
00:11:14,392 --> 00:11:18,326
a little bit about that. Here's the

152
00:11:18,348 --> 00:11:22,280
reality. Based on what we just talked about,

153
00:11:23,210 --> 00:11:26,614
95% to 100% of your

154
00:11:26,652 --> 00:11:30,230
buckets, they're going to flag,

155
00:11:30,390 --> 00:11:34,090
they are absolutely going to show up

156
00:11:34,160 --> 00:11:37,226
as being problems, as being in violation of

157
00:11:37,248 --> 00:11:41,038
that security policy. And when you get to a point where 95%

158
00:11:41,124 --> 00:11:45,322
to 100% of a given asset fails

159
00:11:45,386 --> 00:11:49,258
by default, those checks

160
00:11:49,274 --> 00:11:52,730
are kind of useless. It really is hard to

161
00:11:52,820 --> 00:11:56,420
think of a world in which it makes sense that

162
00:11:59,350 --> 00:12:03,218
everything is in violation of that policy. And I think,

163
00:12:03,304 --> 00:12:06,962
for me, what's really critical here is I have no ability

164
00:12:07,026 --> 00:12:09,814
now to priority what's bad, because it's all bad,

165
00:12:09,852 --> 00:12:12,962
right? The sky is falling.

166
00:12:13,026 --> 00:12:16,262
Well, which part of the sky am I even caring about at this point?

167
00:12:16,396 --> 00:12:19,734
So I think the

168
00:12:19,772 --> 00:12:22,582
real piece becomes, now,

169
00:12:22,636 --> 00:12:27,478
what can we focus on to really

170
00:12:27,564 --> 00:12:30,414
drill into and think a little bit differently, me,

171
00:12:30,532 --> 00:12:34,094
about what data we need to know and what

172
00:12:34,132 --> 00:12:39,790
information we need to be aware of for our success

173
00:12:39,860 --> 00:12:43,326
in this arena. So we'll start with where

174
00:12:43,348 --> 00:12:46,754
did the data come from? There's a bit of a history piece

175
00:12:46,792 --> 00:12:50,098
around this first point, and I want to call it out because a

176
00:12:50,104 --> 00:12:53,314
lot of folks aren't aware of this. So back in these day,

177
00:12:53,512 --> 00:12:56,978
because as I was talking about EMC and

178
00:12:56,984 --> 00:13:00,226
NetApp, you should probably get a good feel that I'm a little on the older

179
00:13:00,258 --> 00:13:03,734
side and been around the block a couple of times. Back in the day,

180
00:13:03,852 --> 00:13:07,174
AWS had this thing where you could only have so

181
00:13:07,212 --> 00:13:11,020
many s, three buckets for a given account.

182
00:13:12,030 --> 00:13:16,442
And one of the workarounds was to store things

183
00:13:16,496 --> 00:13:20,346
that were loosely affiliated, but not necessarily the same data in

184
00:13:20,368 --> 00:13:24,042
a single bucket. So what you might do is you might have your images

185
00:13:24,186 --> 00:13:27,674
in one prefix, you might have, or static assets,

186
00:13:27,722 --> 00:13:32,026
if you will, and then maybe some customer data in another prefix,

187
00:13:32,138 --> 00:13:35,746
and then maybe some separate application data in

188
00:13:35,768 --> 00:13:39,234
another prefix because you only got so many

189
00:13:39,272 --> 00:13:43,406
buckets and it was in the 100 bucket range was the limit.

190
00:13:43,598 --> 00:13:47,294
That limit has been lifted

191
00:13:47,342 --> 00:13:50,726
because it was at one time a hard limit. Like, you couldn't actually get them

192
00:13:50,748 --> 00:13:54,066
to raise it unless you were like super special. That's not the case anymore,

193
00:13:54,098 --> 00:13:57,970
which is fantastic. But those buckets still exist,

194
00:13:58,050 --> 00:14:01,420
those applications still write to those places, and it's still a thing.

195
00:14:02,110 --> 00:14:05,850
What region is it in? So I think it's really important to reason

196
00:14:05,920 --> 00:14:09,578
about the regionality of the data, because a lot

197
00:14:09,584 --> 00:14:13,854
of times it doesn't necessarily matter whether

198
00:14:13,892 --> 00:14:18,074
it's protected. You can have stuff that's completely protected

199
00:14:18,122 --> 00:14:21,706
properly and you still be in violation of compliance concerns,

200
00:14:21,738 --> 00:14:25,706
because you've got data that shouldn't be there in that region.

201
00:14:25,898 --> 00:14:29,218
Not to mention, from my perspective, it's really interesting. We've got

202
00:14:29,224 --> 00:14:32,258
a map at open Raven where you can look at your infrastructure, and one of

203
00:14:32,264 --> 00:14:35,778
the first things that catches a lot of customers'eyes and is always,

204
00:14:35,864 --> 00:14:38,838
why I'm a super big fan of it, is you look at it and go,

205
00:14:38,924 --> 00:14:42,226
wait, why do I have stuff in AP Southeast

206
00:14:42,258 --> 00:14:46,386
one? I shouldn't have anything these. And then sometimes it's,

207
00:14:46,498 --> 00:14:49,862
oh, we turned on AWS config and it put a bucket there.

208
00:14:49,916 --> 00:14:53,450
Fantastic. Or you go hover over and look at the buckets and go,

209
00:14:53,520 --> 00:14:56,794
yeah, that shouldn't be there at all. We need to go take care of that.

210
00:14:56,832 --> 00:14:59,900
So I think that's a really valuable tool.

211
00:15:01,330 --> 00:15:04,974
What apps actually write into this bucket? And I'll talk about the

212
00:15:05,012 --> 00:15:08,414
write piece a little bit later, but it's understanding what

213
00:15:08,452 --> 00:15:11,966
apps send data to that bucket and

214
00:15:12,148 --> 00:15:15,534
keeping that in mind. The other thing

215
00:15:15,572 --> 00:15:19,042
is, is things all coming from automated processes or

216
00:15:19,096 --> 00:15:22,530
is it being manually uploaded to? So one of the things that becomes really

217
00:15:22,600 --> 00:15:25,846
an interesting question, and when you look at some of the breaches, a lot of

218
00:15:25,868 --> 00:15:30,086
times it's not uncommon that a

219
00:15:30,108 --> 00:15:33,990
backup got uploaded to the wrong spot or to a place that

220
00:15:34,140 --> 00:15:37,414
someone thought was safe but wasn't because

221
00:15:37,452 --> 00:15:41,146
they were manually uploading it and there weren't all the other controls in place from

222
00:15:41,168 --> 00:15:44,746
the application side. And I think it's really critical to kind of look

223
00:15:44,768 --> 00:15:50,154
at that and reason through. Okay, so is

224
00:15:50,192 --> 00:15:54,314
it a normal thing for this to be manually uploaded for someone could accidentally upload

225
00:15:54,362 --> 00:15:57,646
the wrong thing? I things from there.

226
00:15:57,748 --> 00:16:01,578
We really want to talk about what kind of data is in the bucket.

227
00:16:01,754 --> 00:16:05,746
This seems really straightforward, and you can take a bunch of

228
00:16:05,768 --> 00:16:09,646
different approaches to go figure out what's there. Right. If there's protected

229
00:16:09,678 --> 00:16:12,580
health information, if there's personally identifiable information,

230
00:16:13,110 --> 00:16:16,626
you should know. Hopefully you're going to want to know if it's

231
00:16:16,658 --> 00:16:20,454
these. And on one hand, we can absolutely

232
00:16:20,572 --> 00:16:24,278
go talk to each individual person. And if you are

233
00:16:24,444 --> 00:16:27,250
in a large organization,

234
00:16:27,330 --> 00:16:30,954
that probably won't work super well. So you can use tools like

235
00:16:30,992 --> 00:16:34,746
open raven or AWS Macy to

236
00:16:34,848 --> 00:16:38,250
go and classify the data that's inside the buckets.

237
00:16:39,870 --> 00:16:42,826
The same is true on the open raven side. You can do this with your

238
00:16:42,848 --> 00:16:46,782
RDS instances as well. And we're looking to expand beyond just

239
00:16:46,836 --> 00:16:50,058
s three. We've got a bunch of stuff coming down the pipe,

240
00:16:50,074 --> 00:16:54,218
and it's going to be exciting, but you

241
00:16:54,244 --> 00:16:56,580
need to know what kind of data is there?

242
00:16:58,710 --> 00:17:02,114
Things one always makes me laugh a little bit because the first place we always

243
00:17:02,152 --> 00:17:06,306
jump from is who owns it. And this

244
00:17:06,328 --> 00:17:10,306
would be amazing to know. Like, I would love to know who owns

245
00:17:10,338 --> 00:17:14,338
the data. The problem is, and I want to call it out here as it's

246
00:17:14,354 --> 00:17:17,750
a great thing to know, but reality is that you're probably

247
00:17:17,820 --> 00:17:21,286
not going to know. It's going to be hard to track down who owns

248
00:17:21,318 --> 00:17:25,258
it. And just because someone owns it doesn't necessarily mean they have control

249
00:17:25,424 --> 00:17:29,034
or have any semblance of understanding of what's actually going into

250
00:17:29,072 --> 00:17:33,134
the buckets. I think it becomes a lot more critical to

251
00:17:33,332 --> 00:17:38,030
understand who can write to the bucket. When you understand how

252
00:17:38,100 --> 00:17:41,246
data can get in the bucket, you can start from there.

253
00:17:41,348 --> 00:17:45,266
So even if one team owns the

254
00:17:45,288 --> 00:17:46,690
data in that bucket,

255
00:17:47,910 --> 00:17:51,586
can applications that are owned by

256
00:17:51,608 --> 00:17:55,746
other teams right into that bucket and it get accidentally used? Are there

257
00:17:55,848 --> 00:17:59,542
other opportunities for people to once again manually upload into

258
00:17:59,596 --> 00:18:03,202
it? So you can use tools like open Raven?

259
00:18:03,266 --> 00:18:07,286
We've got a feature coming out, it's API only now, but will

260
00:18:07,308 --> 00:18:11,190
be available in our UI soon, where you can actually go in

261
00:18:11,260 --> 00:18:15,034
and look and say, okay, what security principles have the ability to write

262
00:18:15,072 --> 00:18:18,650
into this bucket? You can use tools like hermetic as well, which does

263
00:18:18,720 --> 00:18:22,070
a bunch of things around IAM and

264
00:18:22,160 --> 00:18:26,634
better understand who can read and write to a bucket. But I think it's

265
00:18:26,682 --> 00:18:30,558
so common for us to focus on who can read from it.

266
00:18:30,644 --> 00:18:33,806
I think the starting point should be who can write to

267
00:18:33,828 --> 00:18:37,122
it because these you can actually start to identify where your

268
00:18:37,176 --> 00:18:38,500
actual risk is.

269
00:18:40,550 --> 00:18:43,906
So I've talked about a lot of what, right, we want to

270
00:18:43,928 --> 00:18:47,830
know all of those things and I think it's really critical

271
00:18:49,290 --> 00:18:53,414
to think in a different way,

272
00:18:53,612 --> 00:18:56,918
think about where we can start and how we

273
00:18:57,084 --> 00:18:59,862
really enable teams to start taking next steps.

274
00:18:59,926 --> 00:19:03,594
So the first thing is, don't protect data

275
00:19:03,632 --> 00:19:07,578
that doesn't need protecting, right. If it isn't there, you don't have to

276
00:19:07,584 --> 00:19:10,826
do anything with it. So I really kind of

277
00:19:10,848 --> 00:19:13,930
call out a couple of things. First off, use intelligent tiering.

278
00:19:14,530 --> 00:19:18,202
This is going to sound silly, but it gives you the ability

279
00:19:18,266 --> 00:19:21,354
to get an alert about the state of the world that isn't directly

280
00:19:21,402 --> 00:19:25,006
tied to all the security tooling. If you're using intelligent tiering

281
00:19:25,038 --> 00:19:28,718
and all of a sudden you start accessing a bunch

282
00:19:28,734 --> 00:19:33,234
of stuff and it's changing lies so that your

283
00:19:33,272 --> 00:19:37,174
costs go up, you're going to see that. And the reality is that we're all

284
00:19:37,212 --> 00:19:40,710
watching cost a heck of a lot more than a lot of these security

285
00:19:40,780 --> 00:19:44,840
tooling, because the security team is looking at

286
00:19:45,770 --> 00:19:49,190
the security tools, cost is being looked at by everyone.

287
00:19:49,340 --> 00:19:53,130
And so as a result, we can use things like intelligent tiering to

288
00:19:53,200 --> 00:19:56,282
save money because things shouldn't be being accessed all the time.

289
00:19:56,416 --> 00:19:59,978
And it gives us the ability to see those anomalies in

290
00:19:59,984 --> 00:20:03,354
the system. The next thing is applying lifecycle

291
00:20:03,402 --> 00:20:06,874
rules, and this ties really closely with using data retention

292
00:20:06,922 --> 00:20:10,522
rules. So lifecycle rules are the technical implementation,

293
00:20:10,586 --> 00:20:13,490
right? I go into the s three bucket and I say, hey,

294
00:20:13,560 --> 00:20:16,260
after some period of time, delete this thing.

295
00:20:17,830 --> 00:20:20,978
Data retention rules are the business side of that, right?

296
00:20:21,064 --> 00:20:24,130
It's the hey, we're dealing with healthcare data,

297
00:20:24,200 --> 00:20:27,426
so it must be kept for 24

298
00:20:27,448 --> 00:20:31,190
months, five years, whatever it happens to be. But on five years

299
00:20:31,260 --> 00:20:33,958
in one day, we can get rid of it and we should get rid of

300
00:20:33,964 --> 00:20:37,878
it. And so the real key becomes, can you use

301
00:20:37,964 --> 00:20:41,354
something like lifecycle rules on those s

302
00:20:41,392 --> 00:20:44,506
three buckets to remove that data so that you don't end

303
00:20:44,528 --> 00:20:47,178
up having to protect it going forward?

304
00:20:47,344 --> 00:20:50,682
There are some also great conversations about having

305
00:20:50,736 --> 00:20:53,886
data that you don't need and how

306
00:20:53,908 --> 00:20:56,826
it plays into legal things like discovery and whatnot.

307
00:20:56,938 --> 00:21:01,054
That's a little bit broader than this talk goes into, but I think more

308
00:21:01,092 --> 00:21:04,434
than anything, there's no reason to protect things whats

309
00:21:04,472 --> 00:21:07,874
don't need to exist. So get rid of it so

310
00:21:07,912 --> 00:21:10,610
that you're not protecting things unnecessarily.

311
00:21:12,390 --> 00:21:15,862
Manage your riskiest buckets first. I think it goes without saying whats

312
00:21:15,916 --> 00:21:19,778
public buckets are going to, by definition, be the riskiest.

313
00:21:19,954 --> 00:21:23,334
The problem is that we normally stop there

314
00:21:23,532 --> 00:21:27,702
in our conversations. It really becomes a good

315
00:21:27,756 --> 00:21:30,460
point to go, hey,

316
00:21:32,670 --> 00:21:35,914
go start there. But also look for a couple of things. Look for broad write

317
00:21:35,952 --> 00:21:39,494
permissions. So if you can find and track down places

318
00:21:39,542 --> 00:21:43,760
where you've got everybody and their brother is able to write into

319
00:21:44,930 --> 00:21:48,894
that s three bucket, you've probably got a problem, because it's much

320
00:21:48,932 --> 00:21:52,686
more easy for something to be exposed than

321
00:21:52,708 --> 00:21:55,966
it would be if only two or three applications are able

322
00:21:55,988 --> 00:21:59,986
to write, or no human users are able to write into that s

323
00:22:00,008 --> 00:22:03,538
three bucket. So that becomes a really important thing. And then one of

324
00:22:03,544 --> 00:22:07,826
the things that we found in our environment is backups

325
00:22:07,858 --> 00:22:12,002
aside, one of the real indicators that you've got actual legit

326
00:22:12,066 --> 00:22:16,018
data somewhere is lots and lots of small files, whether it's lots

327
00:22:16,034 --> 00:22:20,010
of images that are being uploaded from customers, whether it's

328
00:22:20,430 --> 00:22:24,646
Json, that sort of thing. The large number of files tends

329
00:22:24,678 --> 00:22:27,690
to be an indicator of there's some automate process,

330
00:22:27,760 --> 00:22:31,246
or there's some process that's putting data in these and that's a really

331
00:22:31,268 --> 00:22:34,606
good place to start because it's actual data coming from

332
00:22:34,628 --> 00:22:38,480
customers and not just a dump of

333
00:22:40,290 --> 00:22:45,034
some source code archive out of NPM

334
00:22:45,082 --> 00:22:47,794
or something like that. We see all sorts of fun things,

335
00:22:47,832 --> 00:22:51,394
but I think really the biggest thing is focus on those large numbers

336
00:22:51,432 --> 00:22:55,038
of small files as a good place to start and hone in on your

337
00:22:55,224 --> 00:22:56,790
managing for risk.

338
00:22:58,490 --> 00:23:02,310
Ultimately, I think for me the biggest thing

339
00:23:02,380 --> 00:23:05,490
is, and yes, I get, I work for open Raven.

340
00:23:05,570 --> 00:23:09,094
There's a reason why I do. I believe that understanding

341
00:23:09,142 --> 00:23:12,426
your data classification by being able to

342
00:23:12,528 --> 00:23:15,914
understand what is actually out in these world

343
00:23:16,112 --> 00:23:17,050
matters,

344
00:23:20,430 --> 00:23:24,334
it's so critical to be able to go out and say,

345
00:23:24,532 --> 00:23:28,062
this is what's in that buckets. And you can start

346
00:23:28,116 --> 00:23:31,290
really simply whether it's using open Raven,

347
00:23:31,370 --> 00:23:34,786
whether it's using Macy, go do

348
00:23:34,808 --> 00:23:39,540
some scans, understand what you've got out there and

349
00:23:40,150 --> 00:23:44,162
from there, run those scans regularly, making sure

350
00:23:44,216 --> 00:23:47,794
that you are actually checking for things. And one of the cool things

351
00:23:47,832 --> 00:23:50,786
we do at open Raven is we cache the results,

352
00:23:50,818 --> 00:23:54,438
right? If the file hasn't changed because the e tag hasn't changed, we're not going

353
00:23:54,444 --> 00:23:58,034
to rescan that object in s three because we know it hasn't

354
00:23:58,082 --> 00:24:01,658
changed, but we're going to do those sorts of things.

355
00:24:01,824 --> 00:24:04,650
And then more than anything,

356
00:24:04,800 --> 00:24:08,474
you need to have rules in place to alert on the things

357
00:24:08,512 --> 00:24:12,542
that are actually critical, right. You want

358
00:24:12,596 --> 00:24:16,462
to know if you find european data in

359
00:24:16,596 --> 00:24:19,790
a us region. You want to know

360
00:24:19,940 --> 00:24:23,966
if you find Pii in a bucket that's

361
00:24:23,998 --> 00:24:27,134
open and that's the real critical differentiator,

362
00:24:27,182 --> 00:24:30,802
right? It's not that you found Pii, it's not whats

363
00:24:30,856 --> 00:24:34,114
you have an open

364
00:24:34,152 --> 00:24:37,686
bucket, it's that you have Pii in

365
00:24:37,708 --> 00:24:41,494
an open bucket and it's those sorts of things that really

366
00:24:41,612 --> 00:24:44,520
provide the value. So,

367
00:24:45,450 --> 00:24:49,110
to summarize, I think the real key is these three things.

368
00:24:49,260 --> 00:24:52,474
You turn on intelligent hearing, it will

369
00:24:52,512 --> 00:24:56,390
get more eyes on the problem, because if costs

370
00:24:56,470 --> 00:25:00,074
bump heavily, you'll know that, hey, data, whats shouldn't be

371
00:25:00,112 --> 00:25:03,566
accessed is being accessed. Classify your data, go figure out

372
00:25:03,588 --> 00:25:07,034
what you've got. And these use those retention policies

373
00:25:07,082 --> 00:25:10,858
and those lifecycle policies to delete the stuff you don't need. Ultimately,

374
00:25:10,954 --> 00:25:14,334
that's really going to be what is the game

375
00:25:14,372 --> 00:25:16,720
changer for you going forward.

376
00:25:17,730 --> 00:25:20,720
So with all of these things said,

377
00:25:21,730 --> 00:25:24,998
I want to thank you for joining me for my talk. I can be

378
00:25:25,044 --> 00:25:28,834
found on the interwebs, you can find me on Twitter, hit me up via

379
00:25:28,882 --> 00:25:32,678
email, and I'm trying the new Mastodon thing. We'll see how that plays out.

380
00:25:32,844 --> 00:25:36,706
But I hope you've enjoyed this talk, and I'm looking forward to catching

381
00:25:36,738 --> 00:25:37,618
up with you in discord.

