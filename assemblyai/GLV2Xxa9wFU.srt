1
00:01:54,170 --> 00:01:58,314
Hi, thank you for being here. A journey of the thousand binaries.

2
00:01:58,442 --> 00:02:01,040
I'm super happy of being here with you.

3
00:02:01,410 --> 00:02:04,490
My name is Xiao Reese, I'm from Mexico,

4
00:02:04,570 --> 00:02:07,734
I live in Switzerland. I'm a Java champion. I work

5
00:02:07,772 --> 00:02:11,174
for JFrog. I collaborate in some organizations like the Open

6
00:02:11,212 --> 00:02:14,466
Source foundation, the CNCF, the CDF,

7
00:02:14,658 --> 00:02:18,342
and I'm an open resources enthusiast. I also

8
00:02:18,396 --> 00:02:21,910
have collaborated in some books, the latest one being

9
00:02:21,980 --> 00:02:25,260
DevOps tool for Java developers. You can get it there.

10
00:02:25,710 --> 00:02:29,722
And the reason why I like this particular session is because

11
00:02:29,776 --> 00:02:34,094
we all know the world runs on software and

12
00:02:34,132 --> 00:02:37,294
there is a key part or key piece when I

13
00:02:37,332 --> 00:02:41,438
refer to that one. And that key piece are

14
00:02:41,524 --> 00:02:45,858
dependencies. For example, according to the 2022

15
00:02:45,944 --> 00:02:49,650
open source Security and Risk analysis report by synopsis,

16
00:02:50,230 --> 00:02:53,794
we learned that 78% of code in

17
00:02:53,832 --> 00:02:57,720
code bases was open source. And not only that,

18
00:02:58,170 --> 00:03:01,302
85 contained open source, that was more than

19
00:03:01,356 --> 00:03:05,446
four years out of date. So this is

20
00:03:05,548 --> 00:03:09,258
important. We have our code, our artifacts that

21
00:03:09,264 --> 00:03:13,180
we're publishing out there are a combination or

22
00:03:14,030 --> 00:03:17,030
a combination of several other kind of software,

23
00:03:17,110 --> 00:03:20,382
other dependencies. So the first question

24
00:03:20,436 --> 00:03:24,410
we should be asking is what type of dependencies,

25
00:03:24,490 --> 00:03:28,110
what kind of dependencies are we using and for what

26
00:03:28,180 --> 00:03:32,030
reason? And dependencies, it's a broad

27
00:03:32,690 --> 00:03:36,242
name, it's a broad label, it can mean so many things.

28
00:03:36,296 --> 00:03:39,794
So for example, I'm going to read to you two

29
00:03:39,912 --> 00:03:43,202
statements and you will tell me if they are true or

30
00:03:43,256 --> 00:03:47,170
false. Dependencies are collection containing

31
00:03:47,250 --> 00:03:51,746
high quality tested code that provides functionality,

32
00:03:51,938 --> 00:03:55,858
and that functionality requires significant

33
00:03:55,954 --> 00:03:59,340
expertise to develop. This is true.

34
00:03:59,870 --> 00:04:04,042
Dependency managers like NPM have made possible

35
00:04:04,176 --> 00:04:08,182
that almost trivial functionality be packaged

36
00:04:08,246 --> 00:04:11,934
and published. That is also true.

37
00:04:12,132 --> 00:04:15,610
So we have noticed that there is in a spectrum,

38
00:04:15,690 --> 00:04:18,954
really complex libraries or applications

39
00:04:19,002 --> 00:04:22,438
or frameworks and trivial functionality

40
00:04:22,554 --> 00:04:26,126
out there. So what are the different types

41
00:04:26,158 --> 00:04:29,090
of dependencies? For example,

42
00:04:29,160 --> 00:04:32,610
we have frameworks, libraries, package modules and resources.

43
00:04:33,110 --> 00:04:36,466
Resources can be a collection of files,

44
00:04:36,578 --> 00:04:40,482
for example templates, media, audio, video or images,

45
00:04:40,546 --> 00:04:43,766
plain text files or blob that need to

46
00:04:43,788 --> 00:04:47,590
be included by the application to execute correctly.

47
00:04:48,430 --> 00:04:51,914
And for example, modules are

48
00:04:51,952 --> 00:04:55,354
set of methods or functions that provide a self

49
00:04:55,392 --> 00:04:59,638
contained functionality. A module issue has an interface

50
00:04:59,734 --> 00:05:03,534
that explicitly and abstractedly specifies both the

51
00:05:03,572 --> 00:05:07,306
functionality it provides as well at the functionality depends

52
00:05:07,338 --> 00:05:11,034
on. And usually when we find an interface,

53
00:05:11,082 --> 00:05:14,770
there has to be at least one implementation of

54
00:05:14,840 --> 00:05:18,386
that functionality. So sometimes for

55
00:05:18,408 --> 00:05:20,500
us it's kind of a black box.

56
00:05:21,270 --> 00:05:25,026
And finally, packages. Packages are

57
00:05:25,048 --> 00:05:28,534
a collection of modules that hold in general

58
00:05:28,732 --> 00:05:32,182
the same functionality type. For example,

59
00:05:32,236 --> 00:05:35,714
if you are thinking about JavaScript, it's usually a directory, it can contain

60
00:05:35,762 --> 00:05:39,158
some file that describes the metadata about the package.

61
00:05:39,334 --> 00:05:42,714
And by aggregating this, the authors make it

62
00:05:42,752 --> 00:05:47,450
easy to remove or to add in a specific set of functionality.

63
00:05:47,870 --> 00:05:51,854
And finally, a library. A library is a

64
00:05:51,892 --> 00:05:55,886
collection of related functionality divided or

65
00:05:55,988 --> 00:06:02,014
defined in several packages. And how

66
00:06:02,052 --> 00:06:05,474
a library usually behaves is use call

67
00:06:05,512 --> 00:06:08,610
in a specific function. This will execute whatever

68
00:06:08,680 --> 00:06:12,706
functionality it says it's providing and return the

69
00:06:12,888 --> 00:06:16,920
code or the no, not the code, return the control back

70
00:06:17,930 --> 00:06:22,070
to you, to your application. And on the other hand,

71
00:06:22,140 --> 00:06:26,214
a framework behaves or has

72
00:06:26,252 --> 00:06:29,622
more and more abstractive design and has

73
00:06:29,676 --> 00:06:33,434
even more behavioral built in. So it

74
00:06:33,472 --> 00:06:37,162
provides its own workflow. And what it

75
00:06:37,216 --> 00:06:40,814
usually happens, sometimes what you do

76
00:06:40,852 --> 00:06:45,082
is these frameworks have hookups or specific places

77
00:06:45,146 --> 00:06:48,414
where you can add your specific code. So they are

78
00:06:48,452 --> 00:06:51,950
executing a specific workflow and suddenly they call

79
00:06:52,020 --> 00:06:55,586
your logic, and then, well, they complete the

80
00:06:55,608 --> 00:06:59,330
functionality and continue whatever workflow

81
00:07:00,550 --> 00:07:04,370
it is supposed to be doing. So why am I talking about

82
00:07:04,440 --> 00:07:08,182
these two things? Like why am I making

83
00:07:08,316 --> 00:07:11,538
a difference, for example, between libraries and frameworks?

84
00:07:11,634 --> 00:07:15,238
While frameworks usually have a

85
00:07:15,244 --> 00:07:18,570
lot of lines of code, they are usually opinionated,

86
00:07:18,910 --> 00:07:22,998
there is a roadmap, and they have versioning,

87
00:07:23,094 --> 00:07:25,638
they have a license specified,

88
00:07:25,814 --> 00:07:29,674
and most likely, and usually this is like

89
00:07:29,712 --> 00:07:33,034
the standard industry, they have a healthy

90
00:07:33,082 --> 00:07:36,494
number of tests that are continually checking that the

91
00:07:36,532 --> 00:07:40,094
behavior is still as they are supposed to be done. And the

92
00:07:40,132 --> 00:07:43,854
differences, they don't only are important

93
00:07:43,972 --> 00:07:47,566
to me just to understand what type of dependencies we're adding

94
00:07:47,598 --> 00:07:51,522
to our projects, but for example, if you are in the JavaScript world,

95
00:07:51,576 --> 00:07:55,462
you probably have read or use angular and react and

96
00:07:55,516 --> 00:07:59,554
react is self defined JavaScript library

97
00:07:59,682 --> 00:08:03,602
for building user interfaces, while angular

98
00:08:03,746 --> 00:08:07,160
self describes has the modern web development platform.

99
00:08:07,550 --> 00:08:11,722
So you can see what is the vision of these two

100
00:08:11,776 --> 00:08:16,074
development teams when working on this specific project.

101
00:08:16,272 --> 00:08:19,942
So it actually matters because it sets some

102
00:08:20,016 --> 00:08:23,226
expectations. Remember when I was telling

103
00:08:23,258 --> 00:08:26,926
you about that statement that actually it

104
00:08:26,948 --> 00:08:30,766
is true that we are able to package very

105
00:08:30,868 --> 00:08:34,370
interesting functionality, even if it's very

106
00:08:34,520 --> 00:08:38,798
specific. Well, this is a collection.

107
00:08:38,894 --> 00:08:42,434
It's a GitHub repository that has the

108
00:08:42,472 --> 00:08:45,910
smallest NPM packages,

109
00:08:46,650 --> 00:08:49,494
and there they are,

110
00:08:49,612 --> 00:08:53,414
it's a collection. And you can see there

111
00:08:53,452 --> 00:08:57,480
are projects for each number is even and

112
00:08:58,590 --> 00:09:00,540
a lot of people use them.

113
00:09:02,030 --> 00:09:05,370
So why am I telling you

114
00:09:05,440 --> 00:09:09,290
that we should care about the different types of dependencies?

115
00:09:09,710 --> 00:09:13,582
Because any dependencies that you add into

116
00:09:13,636 --> 00:09:16,586
your project that it's providing some functionality,

117
00:09:16,698 --> 00:09:21,054
otherwise you wouldn't have added it in the first place. But every

118
00:09:21,172 --> 00:09:24,862
single one of them will have an associated

119
00:09:24,926 --> 00:09:29,134
cost. What do I mean by that because we need to update

120
00:09:29,182 --> 00:09:33,698
them at some point or we need to migrate them or

121
00:09:33,784 --> 00:09:37,830
we need to remove them. So it is important

122
00:09:37,980 --> 00:09:42,006
that we know what are we adding, what do

123
00:09:42,028 --> 00:09:46,162
we have there, because in a way our functionality

124
00:09:46,226 --> 00:09:50,250
or final artifacts or whatever we are developing or providing,

125
00:09:51,070 --> 00:09:54,762
it is dependent on all

126
00:09:54,816 --> 00:09:58,890
this. So think that if something

127
00:09:58,960 --> 00:10:03,006
goes wrong with one of your dependencies or your code,

128
00:10:03,188 --> 00:10:06,670
you have to make a decision at the end of the day,

129
00:10:06,820 --> 00:10:10,814
should I patch it, should I change it? Should we

130
00:10:10,852 --> 00:10:14,260
refactor the entire code and use a different one?

131
00:10:14,710 --> 00:10:18,014
Or these are decisions that will affect

132
00:10:18,062 --> 00:10:21,726
the quality, the performance and also the budget

133
00:10:21,838 --> 00:10:25,414
in your team, because every single one of these

134
00:10:25,452 --> 00:10:29,960
operations requires effort and

135
00:10:31,130 --> 00:10:34,360
sometimes things go wrong.

136
00:10:35,930 --> 00:10:39,370
So we have to be very cautious.

137
00:10:40,030 --> 00:10:43,610
For example, when we are adding a dependency,

138
00:10:45,310 --> 00:10:48,586
we are outsourcing the developing of

139
00:10:48,608 --> 00:10:52,202
that code, designing, writing, test, debugging,

140
00:10:52,266 --> 00:10:56,400
maintaining to someone else, and it's usually

141
00:10:57,330 --> 00:11:01,200
the unknown programmer. And I'm not

142
00:11:01,730 --> 00:11:05,730
talking down open source because

143
00:11:05,880 --> 00:11:09,650
problems in software can appear both

144
00:11:09,720 --> 00:11:13,778
in closed resources or open resources. But it is

145
00:11:13,864 --> 00:11:17,894
important that we understand, according to several reports out

146
00:11:17,932 --> 00:11:21,414
there, that more than 70% of the

147
00:11:21,452 --> 00:11:24,102
code that we are writing, well,

148
00:11:24,236 --> 00:11:27,510
the applications that we are releasing,

149
00:11:27,870 --> 00:11:31,562
where we are working and writing our code, there are not

150
00:11:31,616 --> 00:11:35,066
only our code, they have a huge

151
00:11:35,168 --> 00:11:38,278
amount of open resources software included

152
00:11:38,454 --> 00:11:41,498
in there. So I'm going to talk about open resources,

153
00:11:41,594 --> 00:11:44,830
because this is where I want us

154
00:11:44,900 --> 00:11:53,678
developers to have more ideas,

155
00:11:53,854 --> 00:11:57,826
more a better understanding of

156
00:11:57,848 --> 00:12:01,998
it, and in a way a mechanism

157
00:12:02,094 --> 00:12:05,506
to give back. So if

158
00:12:05,528 --> 00:12:10,258
you are thinking about your dependencies, and you should be thinking about dependencies,

159
00:12:10,434 --> 00:12:14,118
I will recommend you to read this particular paper,

160
00:12:14,284 --> 00:12:16,950
surviving software dependencies.

161
00:12:17,450 --> 00:12:21,622
And in this paper the author, Ross Cross

162
00:12:21,766 --> 00:12:25,066
is actually talking about the cost of adopting a

163
00:12:25,088 --> 00:12:28,874
bad dependencies. For example, if something goes wrong

164
00:12:28,912 --> 00:12:32,046
with a dependency, well, as I said,

165
00:12:32,148 --> 00:12:35,806
we will have a problem either because we need to

166
00:12:35,828 --> 00:12:39,246
fix it directly, patching the

167
00:12:39,268 --> 00:12:41,854
dependency, refactoring the code,

168
00:12:42,052 --> 00:12:45,586
and that's already talking about when we

169
00:12:45,608 --> 00:12:48,738
need to fix it. I'm not talking about what happened

170
00:12:48,904 --> 00:12:52,370
during the outage of our service or our

171
00:12:52,440 --> 00:12:56,486
product, or the life we affected, or the quality of life

172
00:12:56,588 --> 00:12:59,842
that we decrease when software doesn't behave

173
00:12:59,906 --> 00:13:03,730
as it should be. So the expected

174
00:13:03,810 --> 00:13:07,570
cost of a dependency, of adopting a

175
00:13:07,580 --> 00:13:10,774
bad dependencies, is the sum

176
00:13:10,822 --> 00:13:14,554
of over all possible bad outcomes of

177
00:13:14,592 --> 00:13:18,154
the cost of each bad outcome multiplied by

178
00:13:18,192 --> 00:13:21,710
its probability of happening. What is the risk?

179
00:13:22,130 --> 00:13:25,806
So before adding any dependencies, we should have

180
00:13:25,908 --> 00:13:29,200
some questions asked. For example,

181
00:13:29,650 --> 00:13:33,230
in terms of the design, is the documentation

182
00:13:33,310 --> 00:13:37,134
clear? Does the API have a clear design if the authors

183
00:13:37,182 --> 00:13:41,026
can explain the package API and its design well in

184
00:13:41,048 --> 00:13:44,674
the documentations, that increases the likelihood that

185
00:13:44,712 --> 00:13:48,258
they explain the implementation well to the computer, in the software,

186
00:13:48,354 --> 00:13:51,494
in the source code code quality.

187
00:13:51,692 --> 00:13:55,670
Is this code well written? Read some of it.

188
00:13:55,740 --> 00:13:59,322
Does it look like the authors have been careful, conscientious and

189
00:13:59,376 --> 00:14:03,322
consistent? Does it look like code you

190
00:14:03,376 --> 00:14:06,790
would want to debug on a Friday

191
00:14:06,870 --> 00:14:10,910
night before a release just because

192
00:14:10,980 --> 00:14:15,038
there is some issue with this particular dependency that

193
00:14:15,204 --> 00:14:19,950
happens to be critical for your applications?

194
00:14:22,390 --> 00:14:23,700
That's a good question.

195
00:14:24,550 --> 00:14:27,726
Testing does the card have tests?

196
00:14:27,838 --> 00:14:31,618
This library, this dependency does test.

197
00:14:31,784 --> 00:14:34,180
Can you run them? Do they pass?

198
00:14:35,290 --> 00:14:38,662
Do they establish that the code of basic functionality is

199
00:14:38,716 --> 00:14:39,320
correct?

200
00:14:42,730 --> 00:14:46,726
And also actually, how important

201
00:14:46,908 --> 00:14:50,934
are the tests? I cannot stress

202
00:14:50,982 --> 00:14:54,694
that high enough because they are only not documenting

203
00:14:54,742 --> 00:14:57,814
what is happening or should be documenting what is happening and preventing

204
00:14:57,862 --> 00:15:01,774
us for incurring in some errors if we

205
00:15:01,812 --> 00:15:06,362
decide to refactor. But also it's telling our consumers

206
00:15:06,506 --> 00:15:10,442
that we are serious in keeping

207
00:15:10,506 --> 00:15:14,606
a correct and documented functionality.

208
00:15:14,718 --> 00:15:17,710
The functionality of the library,

209
00:15:17,870 --> 00:15:21,060
the artifact it is correct.

210
00:15:22,550 --> 00:15:26,470
Bug fixing do they have an issue tracker?

211
00:15:28,010 --> 00:15:31,126
Are there many open buck reports open?

212
00:15:31,308 --> 00:15:35,906
How long have they been open? Are there many fixed bucks?

213
00:15:36,098 --> 00:15:38,730
Have any box been fixed recently?

214
00:15:40,190 --> 00:15:44,438
You want to know all of this if it's a critical dependency?

215
00:15:44,534 --> 00:15:48,310
Again, these questions are good for all dependencies,

216
00:15:48,390 --> 00:15:53,310
but are more important for your critical dependencies.

217
00:15:54,450 --> 00:15:57,946
How long has the code been actively maintained?

218
00:15:57,978 --> 00:16:01,914
This is towards maintenance. Look at the package commit

219
00:16:01,962 --> 00:16:04,660
history. How long has it been?

220
00:16:06,470 --> 00:16:09,794
If they have been maintained actively for an extended amount

221
00:16:09,832 --> 00:16:13,582
of time, they are more likely to continue to be maintained.

222
00:16:13,726 --> 00:16:16,710
And how many people are working in that package?

223
00:16:17,370 --> 00:16:20,998
I'm not going to tell you, like a single

224
00:16:21,084 --> 00:16:24,662
developer, it's a bad idea, because that's not true.

225
00:16:24,796 --> 00:16:28,094
I have met very committed

226
00:16:28,162 --> 00:16:31,482
open source developers that are so passionate that they

227
00:16:31,536 --> 00:16:35,450
drive. They are the forcing for the they are the life

228
00:16:35,520 --> 00:16:39,402
force of the projects, and they will continue to be

229
00:16:39,536 --> 00:16:43,114
that for years to come. And they are more productive, more responsive

230
00:16:43,162 --> 00:16:47,214
than a whole team. So that can happen. But at least

231
00:16:47,252 --> 00:16:51,390
it will give you an idea like what is the frequency

232
00:16:53,990 --> 00:16:57,170
of this project? And another word of caution.

233
00:16:57,750 --> 00:17:01,282
Maybe the functionality is so well

234
00:17:01,336 --> 00:17:06,500
defined, the scope is so well set

235
00:17:06,810 --> 00:17:10,546
that there is no need to add more functionality.

236
00:17:10,658 --> 00:17:14,130
Maybe it's only an upgrading of dependencies,

237
00:17:14,210 --> 00:17:18,198
maybe it's only verifying the correctness, or there is no security

238
00:17:18,284 --> 00:17:22,362
vulnerabilities on the go. But it's important that you

239
00:17:22,416 --> 00:17:25,562
see that the authors at least care on

240
00:17:25,616 --> 00:17:26,940
those two things.

241
00:17:28,510 --> 00:17:31,678
Usage how many people are using it?

242
00:17:31,764 --> 00:17:35,118
Companies single users. Sometimes the

243
00:17:35,204 --> 00:17:38,698
users are behind closed doors, so you don't

244
00:17:38,714 --> 00:17:42,614
know. But at least if you look into the different forums,

245
00:17:42,682 --> 00:17:46,526
into their lists, mailing list or stack overflow

246
00:17:46,558 --> 00:17:50,862
or different other sites like that that provide some interaction

247
00:17:50,926 --> 00:17:54,606
of different users will give you more possibilities

248
00:17:54,718 --> 00:17:58,674
for a larger community to ask questions and hopefully receive

249
00:17:58,722 --> 00:18:02,310
answers. And licensing,

250
00:18:04,570 --> 00:18:08,730
licensing and security first, security do they

251
00:18:08,800 --> 00:18:12,298
check? Like do they seem to

252
00:18:12,384 --> 00:18:16,074
robust against malicious input? Do you know

253
00:18:16,112 --> 00:18:19,846
that they are signing the packages or in any way complying

254
00:18:19,878 --> 00:18:23,422
with the different security responsibilities of open

255
00:18:23,476 --> 00:18:27,086
source maintainers? For example, at this point many should be

256
00:18:27,108 --> 00:18:31,182
using two factor authentication, should be running some

257
00:18:31,316 --> 00:18:34,686
tools for checking the dependencies version, et cetera,

258
00:18:34,718 --> 00:18:38,002
et cetera. So these questions should also

259
00:18:38,056 --> 00:18:41,874
be asked by the authors of the software that

260
00:18:41,912 --> 00:18:44,900
you are thinking about, depending in itself.

261
00:18:46,010 --> 00:18:49,858
Licensing, do they have a defined license?

262
00:18:49,954 --> 00:18:55,254
Is this acceptable for your project or for your product?

263
00:18:55,452 --> 00:18:59,718
It is shocking to see how many GitHub projects

264
00:18:59,814 --> 00:19:01,930
have no clear license.

265
00:19:02,590 --> 00:19:04,460
And as I said,

266
00:19:06,430 --> 00:19:10,430
any library except the very core ones

267
00:19:10,500 --> 00:19:14,602
that they don't depend on anything, may have dependencies

268
00:19:14,666 --> 00:19:18,254
on their own. So in a way we will have to be

269
00:19:18,292 --> 00:19:22,190
very careful, for example, of our transient dependencies

270
00:19:22,550 --> 00:19:26,546
or have in mind that the authors of the application

271
00:19:26,648 --> 00:19:30,002
that we're using, of the libraries that we are using have these

272
00:19:30,056 --> 00:19:32,740
concerns in mind at least.

273
00:19:33,910 --> 00:19:37,734
So now let's talk about tools and the

274
00:19:37,772 --> 00:19:41,320
one for security and

275
00:19:42,090 --> 00:19:45,640
infrastructure, like checking the best practices of your code.

276
00:19:46,730 --> 00:19:50,698
One of it is going to be obviously for me,

277
00:19:50,864 --> 00:19:55,046
x ray it fully automated binary analysis

278
00:19:55,238 --> 00:19:58,954
supports all major package times and sees into all

279
00:19:58,992 --> 00:20:02,714
layers of the dependencies. For example packages, container images

280
00:20:02,762 --> 00:20:07,566
and files. There is another

281
00:20:07,668 --> 00:20:11,200
project that you should or you could have a look.

282
00:20:13,030 --> 00:20:16,754
It's based on the Owasp. This is

283
00:20:16,792 --> 00:20:21,070
dependency track and this particular foundation

284
00:20:21,150 --> 00:20:24,810
is a nonprofit that works to improve the security of software.

285
00:20:24,990 --> 00:20:28,694
The other one that I can totally recommend you is I'm part of

286
00:20:28,732 --> 00:20:32,214
the OSSF foundation and we

287
00:20:32,252 --> 00:20:36,322
have just released the concise guide for evaluating

288
00:20:36,386 --> 00:20:39,894
open source software. So this is a one page, we're very proud

289
00:20:39,942 --> 00:20:43,306
of that. This is a one page document that you

290
00:20:43,328 --> 00:20:46,874
can read and it will

291
00:20:46,912 --> 00:20:50,302
have some of this consideration that we already talked about and some

292
00:20:50,356 --> 00:20:54,110
orders more generic to

293
00:20:54,260 --> 00:20:58,314
kind of have a checklist to know if your dependency

294
00:20:58,362 --> 00:21:02,426
is the one that you are intending to use. It is

295
00:21:02,548 --> 00:21:06,594
actually covering some

296
00:21:06,632 --> 00:21:10,146
of these concerns. And if you are an

297
00:21:10,168 --> 00:21:13,570
open source author, I urge you,

298
00:21:13,640 --> 00:21:16,994
I ask you to use for example scorecards.

299
00:21:17,042 --> 00:21:20,470
This is an automated tool that assess a number of important

300
00:21:20,540 --> 00:21:23,862
heuristic of checks associated with software security

301
00:21:23,996 --> 00:21:27,174
and assigns a score between zero and ten and

302
00:21:27,212 --> 00:21:30,746
you can use this scores to understand specific areas to

303
00:21:30,768 --> 00:21:33,974
improve in order to strengthen security posture

304
00:21:34,102 --> 00:21:37,290
of your project and when you are running

305
00:21:37,360 --> 00:21:41,914
it, it also get all this information and pull it back to the different foundation,

306
00:21:42,042 --> 00:21:45,630
the open source foundation, and provide us

307
00:21:45,700 --> 00:21:49,806
with information that it's thought to

308
00:21:49,828 --> 00:21:53,566
be. Give us a clear or more clear understanding

309
00:21:53,598 --> 00:21:57,522
what is happening out there and try to help open

310
00:21:57,576 --> 00:22:00,482
source projects to improve in a way.

311
00:22:00,536 --> 00:22:04,658
Again, more than 70% of the software out there

312
00:22:04,744 --> 00:22:08,726
has open source, so the importance of it

313
00:22:08,908 --> 00:22:12,230
is huge. Another one,

314
00:22:12,300 --> 00:22:16,402
this is the concise guide for developing more secure software.

315
00:22:16,466 --> 00:22:19,722
Again, one page checklist at least

316
00:22:19,776 --> 00:22:23,754
will get you the get go for good practices. If you

317
00:22:23,792 --> 00:22:28,474
are developing software at this point

318
00:22:28,672 --> 00:22:31,786
with the type of dependencies,

319
00:22:31,978 --> 00:22:35,600
how much do you depend on them and the quality

320
00:22:35,970 --> 00:22:39,758
of their dependencies, you should have at least a

321
00:22:39,844 --> 00:22:43,074
different idea of where you are, what is

322
00:22:43,112 --> 00:22:47,022
the map like, what coordinates

323
00:22:47,086 --> 00:22:50,894
are and what is the risk, and therefore for changing,

324
00:22:50,942 --> 00:22:53,780
updating or removing it.

325
00:22:54,710 --> 00:22:58,422
And let's again talk about other kind of

326
00:22:58,476 --> 00:23:01,734
tools. And one of the tools that is

327
00:23:01,772 --> 00:23:04,806
going to be very in my mind is going to

328
00:23:04,828 --> 00:23:08,354
be artifactory in combination with x

329
00:23:08,412 --> 00:23:12,026
ray. And why is that? Because for example,

330
00:23:12,208 --> 00:23:12,940
well,

331
00:23:14,430 --> 00:23:18,140
aridofactory, it sits at the heart of every

332
00:23:18,830 --> 00:23:21,958
DevOps workflow. Because not

333
00:23:21,984 --> 00:23:25,470
only we support several different types, so we match

334
00:23:25,540 --> 00:23:28,746
with whatever you are consuming or publishing,

335
00:23:28,938 --> 00:23:32,334
but the other part is with x ray as integration, we can

336
00:23:32,372 --> 00:23:35,954
verify the dependencies in some cases, for example with

337
00:23:35,992 --> 00:23:39,454
maven to the binary level or the docker images,

338
00:23:39,502 --> 00:23:43,182
we can analyze the different parts like the base image

339
00:23:43,246 --> 00:23:47,654
related to packages, the SIP files, et cetera, et cetera. And we will provide.

340
00:23:47,852 --> 00:23:52,422
I cannot stress the amount of super

341
00:23:52,476 --> 00:23:56,198
intelligent people that we have at JFrog in the security team

342
00:23:56,364 --> 00:23:59,786
working to predict attacks, to verify the

343
00:23:59,808 --> 00:24:04,598
attacks, to verify if a specific CVE

344
00:24:04,774 --> 00:24:08,666
actually applies to you. Because if

345
00:24:08,688 --> 00:24:12,218
we are looking at the cves or only going with the risk level,

346
00:24:12,304 --> 00:24:16,094
well that is. Well, I will never

347
00:24:16,132 --> 00:24:19,758
say don't do that. But it is important to also know

348
00:24:19,924 --> 00:24:23,378
that not all cves are exploitable or

349
00:24:23,464 --> 00:24:27,122
not every single person are at risk for using

350
00:24:27,176 --> 00:24:31,250
a specific tool or dependency. This is also super

351
00:24:31,320 --> 00:24:35,474
important. You may be using a

352
00:24:35,512 --> 00:24:38,854
library that doesn't have any

353
00:24:38,892 --> 00:24:42,630
CVE reported, it is secure,

354
00:24:43,210 --> 00:24:46,726
but if your configuration is

355
00:24:46,828 --> 00:24:50,522
not correct nor complete, you may be

356
00:24:50,576 --> 00:24:53,674
using it incorrectly. So security is

357
00:24:53,712 --> 00:24:57,642
not only about CVE, security is about the information that we

358
00:24:57,776 --> 00:25:00,906
generate. Like is this library, this new version

359
00:25:00,938 --> 00:25:04,510
of the library is actually running correctly

360
00:25:06,210 --> 00:25:10,110
in our context or performance. Is this

361
00:25:10,180 --> 00:25:14,180
library upgrading this library is still delivering our

362
00:25:14,630 --> 00:25:18,546
software requirements specifications or service specific

363
00:25:18,648 --> 00:25:22,100
surface level specifications is this

364
00:25:22,630 --> 00:25:25,974
and all this kind of evolution can reside in

365
00:25:26,012 --> 00:25:29,350
a single source of trust. So that

366
00:25:29,420 --> 00:25:31,560
for me is the amazing part.

367
00:25:32,250 --> 00:25:36,066
And the three tools, well, yeah, the three tools

368
00:25:36,098 --> 00:25:39,754
that please start using today, because you

369
00:25:39,792 --> 00:25:43,562
don't have to do a lot. You can go right

370
00:25:43,616 --> 00:25:46,922
now into JFrog and start for free.

371
00:25:46,976 --> 00:25:51,020
Get your free tier instance and start using

372
00:25:51,470 --> 00:25:55,218
Frogbot, for example. Frogbot is a gitbot

373
00:25:55,414 --> 00:25:59,210
that will advise. You will create reports

374
00:25:59,290 --> 00:26:03,310
whenever you add a new dependency or existing dependencies

375
00:26:03,990 --> 00:26:07,826
in your code base. It will trigger a

376
00:26:07,848 --> 00:26:11,298
security scan and it will tell you you're perfect.

377
00:26:11,464 --> 00:26:14,286
Go ahead or oh my goodness,

378
00:26:14,398 --> 00:26:18,102
there is a problem. And the best part of there is

379
00:26:18,156 --> 00:26:21,554
a problem is that you can define watches.

380
00:26:21,682 --> 00:26:25,154
What does that mean? You can have different filters

381
00:26:25,282 --> 00:26:29,702
in when you are asking about the security vulnerabilities

382
00:26:29,766 --> 00:26:33,370
or security issues, when a specific dependency,

383
00:26:33,950 --> 00:26:37,850
and it will only tell you what is important

384
00:26:38,000 --> 00:26:42,030
considering a specific policy that

385
00:26:42,100 --> 00:26:45,870
you define. I mean, it is important to

386
00:26:45,940 --> 00:26:49,886
react to notifications of there

387
00:26:49,908 --> 00:26:53,474
is something problematic here, that's for

388
00:26:53,512 --> 00:26:57,730
sure. But imagine if you receive 1000 of

389
00:26:57,800 --> 00:27:01,950
these notifications when everything is a priority,

390
00:27:02,110 --> 00:27:05,734
nothing is a priority. So we need to

391
00:27:05,772 --> 00:27:09,874
retake and get real priorities

392
00:27:10,002 --> 00:27:13,446
based on policies based on your specific

393
00:27:13,548 --> 00:27:17,046
needs. So that's why Frogbot for me it is

394
00:27:17,148 --> 00:27:21,254
so amazing. And if you're already using docker containers,

395
00:27:21,302 --> 00:27:25,350
I totally recommend you to have a look at the Docker

396
00:27:25,430 --> 00:27:29,322
desktop extension, which is going to do almost the same thing that I

397
00:27:29,376 --> 00:27:33,018
explained with Frogbot. You're going

398
00:27:33,024 --> 00:27:37,006
to select a docker image and I will generate a security

399
00:27:37,108 --> 00:27:40,382
report where it's also telling you about the different

400
00:27:40,436 --> 00:27:43,754
type of abilities it will show what's the package.

401
00:27:43,882 --> 00:27:47,874
If we have a specific report that meant even the

402
00:27:47,912 --> 00:27:50,958
different ones from different public databases,

403
00:27:51,054 --> 00:27:55,606
we will do this is ship left to

404
00:27:55,708 --> 00:27:59,922
the maximum. This is our ide's

405
00:28:00,066 --> 00:28:03,286
extension. In this case I'm showing idea because that's the one that

406
00:28:03,308 --> 00:28:06,966
I use. And as soon as you

407
00:28:06,988 --> 00:28:10,246
are typing your dependencies in your palm file,

408
00:28:10,278 --> 00:28:13,830
this is a maven project, a very basic maven

409
00:28:13,910 --> 00:28:17,722
project. As soon as I'm modifying that palm file and

410
00:28:17,776 --> 00:28:21,486
adding a specific library with a version with

411
00:28:21,508 --> 00:28:25,182
a vulnerability, in that moment I

412
00:28:25,236 --> 00:28:28,510
will get that notification. The same thing

413
00:28:28,660 --> 00:28:32,990
saying me what is the version of a package affected

414
00:28:33,810 --> 00:28:38,046
or there isn't a fixed version? And if there is more information

415
00:28:38,148 --> 00:28:41,774
about the specific vulnerability will also let me

416
00:28:41,812 --> 00:28:45,286
know. There are other open source tool

417
00:28:45,428 --> 00:28:49,286
by JFrog, for example NPM security. Install the

418
00:28:49,308 --> 00:28:53,074
packet checker and the NPM issues statistic.

419
00:28:53,202 --> 00:28:56,950
I hope you enjoyed and happy coding. Thank you for being

420
00:28:57,020 --> 00:29:01,030
here. I'm Michelle Reese. Please let me know if you have any comment.

421
00:29:01,370 --> 00:29:01,650
Bye.

