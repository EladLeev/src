1
00:00:00,570 --> 00:00:04,334
We have a really interesting topic here. Most of these day, we have been

2
00:00:04,372 --> 00:00:08,766
talking about chaos engineering in general. This talk is

3
00:00:08,948 --> 00:00:12,334
a little bit more about how to practice it, rather than

4
00:00:12,532 --> 00:00:15,886
preaching why is it needed and what it

5
00:00:15,908 --> 00:00:16,480
is.

6
00:00:20,690 --> 00:00:24,074
Before we start, about me, I go by Uma

7
00:00:24,122 --> 00:00:28,006
Mukara. You can call me Uma. I'm co founder and

8
00:00:28,188 --> 00:00:31,458
CEO of a company called Mayadata.

9
00:00:31,634 --> 00:00:35,746
We do cloud native data management primarily

10
00:00:35,778 --> 00:00:39,050
for Kubernetes. So you can see

11
00:00:39,120 --> 00:00:43,178
me talking a lot about Kubernetes today.

12
00:00:43,344 --> 00:00:47,094
And I'm a co creator of the following open source

13
00:00:47,142 --> 00:00:50,782
projects. The genesis of this entire

14
00:00:50,836 --> 00:00:54,270
cloud native chaos engineering is really

15
00:00:54,340 --> 00:00:58,254
about trying to do chaos engineering for

16
00:00:58,452 --> 00:01:00,910
an open resources project called Open EBS.

17
00:01:03,830 --> 00:01:07,666
And we ended up creating a

18
00:01:07,768 --> 00:01:11,742
cloud native chaos engineering infrastructure called litmus.

19
00:01:11,886 --> 00:01:15,782
While trying to do chaos engineering as a practice for

20
00:01:15,836 --> 00:01:18,600
open EBS. I'll talk a little bit more about that.

21
00:01:21,210 --> 00:01:25,346
So we've been talking chaos engineering.

22
00:01:25,378 --> 00:01:29,278
It's a need everybody knows, right? So Russ Miles

23
00:01:29,314 --> 00:01:33,466
started with why chaos engineering is a need.

24
00:01:33,648 --> 00:01:37,146
And we've been also hearing it's a culture you need to

25
00:01:37,168 --> 00:01:39,340
practice. It's not a thing. Right,

26
00:01:41,490 --> 00:01:45,486
but I got all that. How do I actually get started?

27
00:01:45,668 --> 00:01:49,438
Right? This is the question that we got into.

28
00:01:49,604 --> 00:01:54,606
I'm in this Kubernetes world, and I'm

29
00:01:54,638 --> 00:01:58,926
developing an application, or I'm operating a big infrastructure

30
00:01:59,038 --> 00:02:02,626
or a deployments. I need chaos engineering. How do I

31
00:02:02,648 --> 00:02:06,742
do? Right. As part of the operations work

32
00:02:06,796 --> 00:02:10,614
I do, I got into

33
00:02:10,652 --> 00:02:14,678
a situation where we need to practice chaos engineering for

34
00:02:14,764 --> 00:02:18,690
a very different reason. We were building a data management

35
00:02:18,850 --> 00:02:22,586
project called Open EBS, where the community

36
00:02:22,768 --> 00:02:26,486
has to use this software

37
00:02:26,598 --> 00:02:29,260
for relying on these data. Right.

38
00:02:30,270 --> 00:02:33,398
Storage is a very difficult subject. We all know that.

39
00:02:33,584 --> 00:02:36,206
So you don't want to lose your data at any point of time. So how

40
00:02:36,228 --> 00:02:39,390
do you convince your users that you have done

41
00:02:39,460 --> 00:02:43,690
enough testing or it has enough resilience?

42
00:02:43,850 --> 00:02:47,698
So the best way is for them to find out that,

43
00:02:47,784 --> 00:02:51,282
okay, I can actually break something and still see that it is good.

44
00:02:51,336 --> 00:02:55,118
Right? So we started working on that and

45
00:02:55,224 --> 00:02:58,614
then realized, okay, Kubernetes itself is

46
00:02:58,652 --> 00:03:01,954
new. Chaos engineering is as an awareness

47
00:03:02,002 --> 00:03:05,554
is growing, but we need to start creating some infrastructure

48
00:03:05,602 --> 00:03:09,034
for our own use. And then slowly we realized this

49
00:03:09,072 --> 00:03:12,506
can be useful for community as

50
00:03:12,528 --> 00:03:15,386
a whole. And then we created litmus. Right?

51
00:03:15,568 --> 00:03:19,226
So today I just want to touch upon the

52
00:03:19,248 --> 00:03:23,034
following topics. We all know what is chaos

53
00:03:23,082 --> 00:03:27,438
engineering, but what is cloud native chaos engineering, right? And then

54
00:03:27,604 --> 00:03:31,486
if we understand why cloud native chaos engineering is

55
00:03:31,508 --> 00:03:34,930
a different subject or a little bit of a deviation from

56
00:03:35,000 --> 00:03:38,482
what we've been talking, what are those principles? Like?

57
00:03:38,536 --> 00:03:42,674
We commonly observed some principles that we can say that here

58
00:03:42,712 --> 00:03:45,954
are the cloud native chaos engineering principles.

59
00:03:46,082 --> 00:03:50,040
And then we created a project called litmus, and then we can talk about

60
00:03:50,650 --> 00:03:53,350
is it really following all these principles?

61
00:03:54,250 --> 00:03:58,182
And then how many of you know operator

62
00:03:58,246 --> 00:04:01,690
hub in Kubernetes

63
00:04:02,830 --> 00:04:06,614
so very similar? Or helm charts, right. Helm charts

64
00:04:06,662 --> 00:04:10,518
is a popular concept because you have a chart to

65
00:04:10,544 --> 00:04:14,414
pull up and taken bring an application into life.

66
00:04:14,532 --> 00:04:18,202
So same concept applies to a chaos experiment

67
00:04:18,266 --> 00:04:22,366
as well. Right. Then we'll go to some examples and then we

68
00:04:22,388 --> 00:04:26,418
can talk about what are

69
00:04:26,424 --> 00:04:30,386
the next steps and then so forth. Right? So what is

70
00:04:30,488 --> 00:04:34,274
cloud native chaos engineering? Are there any

71
00:04:34,312 --> 00:04:36,120
cloud native developers here?

72
00:04:38,170 --> 00:04:41,190
Yeah, what is the cloud native developer?

73
00:04:43,370 --> 00:04:45,906
If you can Docker pull a developer,

74
00:04:46,018 --> 00:04:49,366
then you're a cloud native developer,

75
00:04:49,478 --> 00:04:54,214
right? So it's really about practicing

76
00:04:54,262 --> 00:04:57,290
chaos engineering for specific environments,

77
00:04:57,870 --> 00:05:01,326
which are called cloud native environments. We'll just see what

78
00:05:01,348 --> 00:05:05,422
these environments are. And you can also say that

79
00:05:05,556 --> 00:05:09,454
chaos engineering done in a cloud native way is called cloud

80
00:05:09,492 --> 00:05:13,630
native chaos engineering. Even further, to simplify

81
00:05:14,630 --> 00:05:19,314
chaos engineering done in a Kubernetes native way is

82
00:05:19,352 --> 00:05:23,166
called cloud native chaos engineering. So it's all about this general concept

83
00:05:23,198 --> 00:05:27,186
of how Kubernetes is changing our lives, has developers

84
00:05:27,218 --> 00:05:31,366
and sres, and you might have observed this

85
00:05:31,468 --> 00:05:34,998
many, many times that there is a particular way that

86
00:05:35,084 --> 00:05:38,322
the DevOps have know the way we practice

87
00:05:38,386 --> 00:05:39,990
DevOps have changed.

88
00:05:40,990 --> 00:05:44,106
Adrian talked about infrastructure as a code

89
00:05:44,208 --> 00:05:47,910
that has taken as a primary component

90
00:05:47,990 --> 00:05:51,230
of Kubernetes deployments. Right.

91
00:05:51,380 --> 00:05:54,750
So I'll just touch upon

92
00:05:55,890 --> 00:05:59,438
what a cloud native environment looks like. I've taken this

93
00:05:59,604 --> 00:06:02,946
concept or picture from one

94
00:06:02,968 --> 00:06:07,006
of the GitLab commit conferences where Dan Cohn from CNCF

95
00:06:07,038 --> 00:06:10,420
was presenting about why a CI pipeline is

96
00:06:11,270 --> 00:06:14,978
useful in cloud native environment. I just

97
00:06:15,144 --> 00:06:18,214
will repurpose that for a different need here.

98
00:06:18,332 --> 00:06:21,526
Right, so you are writing a lot

99
00:06:21,548 --> 00:06:24,722
of code if you're a cloud native developer,

100
00:06:24,786 --> 00:06:28,806
and then after you develop, you run it through CI pipelines and then you put

101
00:06:28,828 --> 00:06:32,394
it onto production, or like you release it and somebody's going to pull

102
00:06:32,432 --> 00:06:36,634
that and then use it, right? So where are they going to deploy it?

103
00:06:36,832 --> 00:06:40,558
So they're going to. Let's assume that it's a Linux environment, it's a

104
00:06:40,564 --> 00:06:44,650
lot of code and you will have kubernetes

105
00:06:44,730 --> 00:06:48,554
running on it, right? That's much more code than Linux

106
00:06:48,602 --> 00:06:53,274
itself, right? 35 million of source locs

107
00:06:53,322 --> 00:06:57,810
compared to the Linux. And then you will have a lot of microservices

108
00:06:58,150 --> 00:07:02,402
infrastructure applications that will help you run your code

109
00:07:02,536 --> 00:07:06,358
and then there are some lot of small libraries or databases that

110
00:07:06,444 --> 00:07:09,558
run on top. And finally your code, right?

111
00:07:09,724 --> 00:07:14,038
So that's how small your code is, it's about 1%.

112
00:07:14,204 --> 00:07:18,298
Right? And the common factor is you need to think how often

113
00:07:18,384 --> 00:07:20,380
your Linux upgrades happen,

114
00:07:21,950 --> 00:07:25,834
right? Maybe 18 months, twelve months.

115
00:07:26,032 --> 00:07:29,500
And can you guess how often Kubernetes upgrades happen

116
00:07:31,730 --> 00:07:35,614
before you know, you understood one version of kubernetes, another version comes

117
00:07:35,652 --> 00:07:39,774
in, right? So it's very dynamic and

118
00:07:39,812 --> 00:07:43,986
that's the purpose of actually adopting kubernetes because it runs anywhere and

119
00:07:44,008 --> 00:07:48,226
then everybody runs one thing inside

120
00:07:48,328 --> 00:07:50,914
a container in one thing only, right?

121
00:07:51,032 --> 00:07:55,226
So kubernetes upgrades happen very frequently.

122
00:07:55,278 --> 00:07:57,842
And your apps, not your apps,

123
00:07:57,906 --> 00:08:01,942
but the application or microservices surrounding your

124
00:08:01,996 --> 00:08:05,846
application, these also need to be updated very

125
00:08:05,948 --> 00:08:09,766
frequently and then you don't control all of it, right? And you are

126
00:08:09,788 --> 00:08:13,594
always thinking about my code. How do I make sure that the

127
00:08:13,632 --> 00:08:16,698
code that I bring in deployments is working fine,

128
00:08:16,784 --> 00:08:21,146
right? So the summary is that your environment, the cloud native environment,

129
00:08:21,258 --> 00:08:25,562
is very dynamic and then it requires a continuous

130
00:08:25,626 --> 00:08:29,006
verification, right? I mean it's the same concept of

131
00:08:29,108 --> 00:08:32,286
don't assume but verify. Right? But what do you

132
00:08:32,308 --> 00:08:35,726
verify? You verify your 50,000 lines

133
00:08:35,758 --> 00:08:38,978
of code or remaining 99%. How do

134
00:08:38,984 --> 00:08:43,154
you verify? So you cannot go and say that

135
00:08:43,352 --> 00:08:46,726
everything was working fine. I verified everything if I'm an

136
00:08:46,748 --> 00:08:50,434
SRE. But it's a bug in the Kubernetes

137
00:08:50,482 --> 00:08:53,574
service that is provided by the cloud provider, right.

138
00:08:53,612 --> 00:08:56,726
You cannot assume that cloud provider has

139
00:08:56,828 --> 00:08:59,974
really hardened up the Kubernetes

140
00:09:00,022 --> 00:09:03,434
stack or any other microservices. So it's really up to the

141
00:09:03,472 --> 00:09:07,590
SRE or running whoever is running the ops to verify

142
00:09:07,670 --> 00:09:10,830
that things are going to be fine. Right?

143
00:09:10,980 --> 00:09:14,702
So that's one thing. So how do you do this?

144
00:09:14,836 --> 00:09:17,994
Obviously it's chaos engineering. Chaos engineering,

145
00:09:18,122 --> 00:09:21,518
not just for your code, but for the entire

146
00:09:21,604 --> 00:09:25,438
stack, right? Because your application depends

147
00:09:25,454 --> 00:09:28,974
on the entire pyramid. So that's

148
00:09:29,022 --> 00:09:32,578
one concept. The other big difference is, okay, I need to

149
00:09:32,584 --> 00:09:36,482
do chaos engineering, but how, what's this cloud native

150
00:09:36,626 --> 00:09:40,918
environment? The big difference is everything

151
00:09:41,004 --> 00:09:44,146
is yaml. You need to practice this yaml

152
00:09:44,178 --> 00:09:47,922
engineering, right? You cannot write. I mean,

153
00:09:48,076 --> 00:09:52,010
I think Andrew has really demonstrated very well today about

154
00:09:52,160 --> 00:09:55,814
how to do chaos engineering for MySQl server

155
00:09:55,942 --> 00:09:59,146
on kubernetes, how we did like

156
00:09:59,168 --> 00:10:03,450
we really killed some pods or cube invaders. That's good for demos.

157
00:10:03,530 --> 00:10:07,194
But how do you really practice, if you are necessary in production,

158
00:10:07,322 --> 00:10:10,990
right? You have certain principles. If I am putting something

159
00:10:11,060 --> 00:10:14,074
into an infrastructure, it should be in a yaml,

160
00:10:14,202 --> 00:10:17,886
I need to put it into git. And then even if I'm

161
00:10:17,918 --> 00:10:21,682
doing some chaos experiment, it should be in a git because

162
00:10:21,736 --> 00:10:25,910
I am making an infrastructure change, I'm killing a pod.

163
00:10:26,490 --> 00:10:29,846
Who gave you permission? Right? So it has to be

164
00:10:29,868 --> 00:10:33,142
recorded and that's Gitops. Right?

165
00:10:33,276 --> 00:10:36,882
So that's what is the cloud native environment

166
00:10:36,946 --> 00:10:40,794
dictates? If you are a cloud native engineer or a developer, you have

167
00:10:40,832 --> 00:10:43,414
to be following this infrastructure principles.

168
00:10:43,542 --> 00:10:47,350
So what you need is not just chaos engineering,

169
00:10:47,430 --> 00:10:50,906
but it is cloud native chaos engineering. That's the concept I

170
00:10:50,928 --> 00:10:54,046
want to drive here in

171
00:10:54,068 --> 00:10:56,670
a simple way. This is my definition.

172
00:10:58,450 --> 00:11:02,254
If you try to put chaos engineering as

173
00:11:02,292 --> 00:11:06,194
an intent into a manifest AMl manifest, then you can

174
00:11:06,232 --> 00:11:09,534
say that you are practicing cloud native

175
00:11:09,582 --> 00:11:13,186
chaos engineering. So that's how we started, right? So we are going

176
00:11:13,208 --> 00:11:16,854
to give open EBS as an application to your

177
00:11:16,892 --> 00:11:20,610
users and they're going to take it, run it. How do they verify?

178
00:11:20,770 --> 00:11:25,074
However they've been verifying

179
00:11:25,202 --> 00:11:28,566
an application is same as deploying an application. How do

180
00:11:28,588 --> 00:11:31,942
you deploy an application? You pull up some resources

181
00:11:32,006 --> 00:11:35,018
into a ML file and then you do a Kubectl apply,

182
00:11:35,104 --> 00:11:38,154
your application comes. How do you kill it? It has

183
00:11:38,192 --> 00:11:41,534
to be the same way, right? So that's the primary difference that

184
00:11:41,572 --> 00:11:45,594
we found. And then we started building up this infrastructure

185
00:11:45,642 --> 00:11:48,446
pieces to do the same thing, right?

186
00:11:48,548 --> 00:11:52,160
So let's look at Kubernetes Resources that we have

187
00:11:52,790 --> 00:11:54,610
for developers.

188
00:11:56,230 --> 00:12:00,146
We have a lot of resources provided by Kubernetes as an

189
00:12:00,168 --> 00:12:04,594
infrastructure component, right? Pod deployment, pvcs services,

190
00:12:04,712 --> 00:12:08,150
stateful set. And you can write a lot of crds, right?

191
00:12:08,220 --> 00:12:11,830
So you use all those things and then define an application,

192
00:12:11,980 --> 00:12:16,338
you manage an application and then this concept of crds

193
00:12:16,354 --> 00:12:20,362
have brought in these operators. You can write your own operators to

194
00:12:20,416 --> 00:12:24,086
manage the lifecycle of the CRS

195
00:12:24,118 --> 00:12:27,574
itself, right. That's good for development. If I'm

196
00:12:27,622 --> 00:12:32,510
practicing chaos engineering or chaos testing for

197
00:12:32,660 --> 00:12:35,818
kubernetes, I need to have a similar resources.

198
00:12:35,994 --> 00:12:39,530
So I need to be able to have some chaos resources.

199
00:12:39,610 --> 00:12:43,060
So what are those chaos resources that I would need?

200
00:12:44,070 --> 00:12:48,354
So you would need some chaos CRS in general,

201
00:12:48,472 --> 00:12:52,386
right? So just like an application is

202
00:12:52,408 --> 00:12:55,826
defined by a pod and a service and some other things. And how

203
00:12:55,848 --> 00:12:59,702
do I define chaos engineering? You need to be able to visualize your

204
00:12:59,756 --> 00:13:03,430
entire practice through some CRS. And obviously

205
00:13:03,500 --> 00:13:06,902
you need a chaos operator to manage the CRS and to put things

206
00:13:06,956 --> 00:13:09,674
into perspective, upgrade each test,

207
00:13:09,792 --> 00:13:13,574
right? And it's all about observability.

208
00:13:13,702 --> 00:13:17,430
If you don't have observability, you can introduce chaos,

209
00:13:17,510 --> 00:13:20,730
and then you're not able to interpret what's going on.

210
00:13:20,880 --> 00:13:24,326
And then it's all about history has. Well, right. So metrics

211
00:13:24,358 --> 00:13:27,370
are very keen in chaos engineering.

212
00:13:27,450 --> 00:13:31,342
So these are the chaos resources that we figured out at a general.

213
00:13:31,476 --> 00:13:35,620
These three resources are needed. Right? So then

214
00:13:36,390 --> 00:13:40,158
looking at all those things in general, we can summarize. The principles

215
00:13:40,174 --> 00:13:42,910
of cloud native chaos engineering are the following,

216
00:13:42,990 --> 00:13:46,466
right? So first of all, whatever you try to

217
00:13:46,488 --> 00:13:50,562
do, it has to be open source, because now we are trying to generalize.

218
00:13:50,626 --> 00:13:53,974
Right. I can just write some closed source code and say that these.

219
00:13:54,012 --> 00:13:56,950
It is. You're not using to accept it. Right.

220
00:13:57,020 --> 00:14:01,642
Kubernetes was adopted and then the entire new

221
00:14:01,696 --> 00:14:05,354
stuff is becoming adoptable so fast because it's open

222
00:14:05,392 --> 00:14:08,746
source. So that's just a

223
00:14:08,768 --> 00:14:13,082
summary of it. And then you need to have acceptable

224
00:14:13,226 --> 00:14:16,574
APIs or CRS, just like pod service for

225
00:14:16,612 --> 00:14:20,506
chaos engineering. And then what's

226
00:14:20,538 --> 00:14:24,354
the actual logic? How do you kill something, right? So that,

227
00:14:24,392 --> 00:14:27,986
again, you should not determine. It should be pluggable. Right.

228
00:14:28,088 --> 00:14:31,842
Maybe my project does it in a particular way,

229
00:14:31,896 --> 00:14:35,782
but somebody else also has a particular way of killing. For example,

230
00:14:35,916 --> 00:14:39,398
here today, we talked about Pumbaa, right? How do

231
00:14:39,404 --> 00:14:42,646
you introduce network delays? It does in certain way.

232
00:14:42,748 --> 00:14:46,006
And then you should be able

233
00:14:46,028 --> 00:14:49,446
to use Pumbaa and plug it into this cloud native

234
00:14:49,478 --> 00:14:52,986
chaos engineering. And it should be usable and

235
00:14:53,008 --> 00:14:56,890
then it should be community driven. Right? So when will you

236
00:14:56,960 --> 00:15:00,326
do this chaos engineering as a practice? It's not just preaching

237
00:15:00,358 --> 00:15:03,566
about chaos engineering, that it is a culture. It's a good thing

238
00:15:03,588 --> 00:15:07,262
to do. What are the best practices? We all need to be able to build

239
00:15:07,316 --> 00:15:11,034
these chaos or experiments together, right? And that's

240
00:15:11,082 --> 00:15:14,658
when you call it as principles. Right? So I've written a

241
00:15:14,664 --> 00:15:18,686
blog about whatever I just said and then published it on CNCF,

242
00:15:18,798 --> 00:15:22,226
same concepts. And then it's available on

243
00:15:22,408 --> 00:15:25,606
CNCF itself. Now what I want

244
00:15:25,628 --> 00:15:29,286
to do is with these principles, this is

245
00:15:29,308 --> 00:15:33,554
how actually we grew, started practicing chaos

246
00:15:33,602 --> 00:15:36,994
engineering, and then we named it as litmus. And Litmus

247
00:15:37,042 --> 00:15:40,394
project is exactly a manifestation of our effort to

248
00:15:40,432 --> 00:15:44,220
practice chaos engineering with kubernetes. And we turned it into

249
00:15:44,590 --> 00:15:48,090
a project that it's not just useful for, only for our project,

250
00:15:48,160 --> 00:15:51,534
but anybody who is practicing or

251
00:15:51,572 --> 00:15:55,146
developing on kubernetes want to practice chaos engineering,

252
00:15:55,178 --> 00:15:59,322
they can use litmus. Right? So this is just a brief

253
00:15:59,466 --> 00:16:02,646
introduction. It's totally apache two license.

254
00:16:02,778 --> 00:16:05,620
Then there are some good contributions coming in.

255
00:16:06,310 --> 00:16:10,210
It recently went GA 10 a couple of weeks ago.

256
00:16:10,360 --> 00:16:14,526
It really means that it's got all the tools

257
00:16:14,638 --> 00:16:17,880
or infrastructure pieces that is needed for you to

258
00:16:18,330 --> 00:16:22,786
start taking a look at it. And then it's

259
00:16:22,818 --> 00:16:26,306
open source, obviously, it's got some Aps or CRS.

260
00:16:26,338 --> 00:16:31,142
I will explain that in a bit. And then whatever

261
00:16:31,196 --> 00:16:35,046
the chaos logic that you're using, you can just wrap it up into a docker

262
00:16:35,078 --> 00:16:38,140
container and put it into litmus, right. You don't need to change anything.

263
00:16:38,830 --> 00:16:42,382
And then it is obviously community driven. I'll explain

264
00:16:42,436 --> 00:16:46,474
that in a bit. So let's see, what are the CRS or CRDs

265
00:16:46,522 --> 00:16:50,234
that litmus has? Right? So these first thing is chaos

266
00:16:50,282 --> 00:16:53,826
experiment. You want to do something. Take the

267
00:16:53,848 --> 00:16:57,346
minimal thing that you want to introduce as a chaos and define that

268
00:16:57,368 --> 00:16:59,460
as a chaos experiment, right?

269
00:17:00,870 --> 00:17:04,974
You can do a killing of a particular application that might

270
00:17:05,032 --> 00:17:08,406
include three, four different chaos experiments. But a

271
00:17:08,428 --> 00:17:12,066
chaos experiment is something that is like minimalistic

272
00:17:12,098 --> 00:17:15,398
killing of something, right? And then

273
00:17:15,564 --> 00:17:18,754
you need to be able to drive this chaos experiment.

274
00:17:18,882 --> 00:17:22,346
For an application, we call that as chaos engine. This is

275
00:17:22,368 --> 00:17:25,866
where you tell. Here are the chaos experiment. This belongs to this application.

276
00:17:25,968 --> 00:17:29,542
Here is your service account. And then who can kill, et cetera.

277
00:17:29,606 --> 00:17:32,886
So you define that. So to do this, and then after you

278
00:17:32,928 --> 00:17:36,110
do, you need to be able to put your results into another

279
00:17:36,180 --> 00:17:40,042
Cr called chaos resulted, so that Prometheus

280
00:17:40,106 --> 00:17:43,342
or some other metrics can come and pull it up, and then somebody

281
00:17:43,396 --> 00:17:47,122
else is going to make sense or some tool is going to make sense of

282
00:17:47,176 --> 00:17:50,654
what exactly has happened, right? And then there will be multiple

283
00:17:50,702 --> 00:17:54,098
chaos experiments that you can keep adding into a chaos engine,

284
00:17:54,184 --> 00:17:57,654
right? So that's the CR that

285
00:17:57,692 --> 00:18:01,430
you have. And then for pluggable chaos,

286
00:18:01,770 --> 00:18:06,006
for example, it already has Pumbaa and powerful seal as

287
00:18:06,188 --> 00:18:10,614
built in libraries. You can actually pull in your own library.

288
00:18:10,742 --> 00:18:14,774
So how do you pull your library into this infrastructure?

289
00:18:14,902 --> 00:18:18,054
For example, here I'm explaining powerful seal.

290
00:18:18,102 --> 00:18:21,306
How we did it, the community did it, is all you need to do

291
00:18:21,328 --> 00:18:24,398
is whatever the killing that you do, you put that into a

292
00:18:24,404 --> 00:18:27,866
docker image, right? So if you just do a docker

293
00:18:27,898 --> 00:18:31,994
run of that image, and if it goes and kills something or introduces

294
00:18:32,042 --> 00:18:35,726
chaos, then it can be used with this infrastructure,

295
00:18:35,838 --> 00:18:39,330
right? So once you have the Docker image, you just create

296
00:18:39,400 --> 00:18:43,182
a new CR, new experiment.

297
00:18:43,246 --> 00:18:46,646
A new experiment really points to a

298
00:18:46,668 --> 00:18:50,754
new custom resources. And then inside that custom resource definition,

299
00:18:50,802 --> 00:18:53,906
you just say that here is your chaos library, right? So it's

300
00:18:53,938 --> 00:18:57,786
as simple as that, right? So the

301
00:18:57,808 --> 00:19:01,642
reason why I'm just trying to emphasize this is think

302
00:19:01,696 --> 00:19:05,482
litmus as a way to use your

303
00:19:05,536 --> 00:19:09,318
chaos experiments with a more acceptable

304
00:19:09,494 --> 00:19:12,746
Gitops way you can just orchestrate

305
00:19:12,778 --> 00:19:16,282
all your experiments using litmus. The way they are written,

306
00:19:16,346 --> 00:19:19,534
you just need to convert them into a Docker image, right?

307
00:19:19,652 --> 00:19:23,646
So litmus chaos render automatically picks up this docker image and

308
00:19:23,668 --> 00:19:27,438
then runs, puts it into a chaos result cr and then you're

309
00:19:27,454 --> 00:19:31,390
good to go. And then these community is developing more tools

310
00:19:31,470 --> 00:19:35,070
to observe chaos. All that will work very naturally.

311
00:19:35,230 --> 00:19:38,614
Right? So it's community driven. What it really means

312
00:19:38,652 --> 00:19:41,618
that we have something called operator hub, a chaos hub.

313
00:19:41,714 --> 00:19:45,670
It's got a lot of experiments already and taken you

314
00:19:45,740 --> 00:19:49,010
as a developer when you create a chaos experiment.

315
00:19:49,090 --> 00:19:53,114
If you want this chaos experiment to be used in production or

316
00:19:53,152 --> 00:19:57,174
in pre production by your users, you're going to push it into your chaos

317
00:19:57,222 --> 00:20:00,774
hub. And your sres, whoever is practicing your chaos

318
00:20:00,822 --> 00:20:04,170
engineering, are going to pull this experiment and then use it,

319
00:20:04,240 --> 00:20:08,218
right? So imagine if Andrew had published that experiment.

320
00:20:08,314 --> 00:20:11,566
You just need to create a yaml file and

321
00:20:11,588 --> 00:20:14,510
then put in some key value pairs and then it runs.

322
00:20:14,870 --> 00:20:18,686
So this is how the cloud native orchestrator architecture

323
00:20:18,718 --> 00:20:22,350
looks like. So you will have a lot of crs

324
00:20:22,430 --> 00:20:26,210
defined for your users, chaos users.

325
00:20:26,290 --> 00:20:30,182
And you have a lot of experiments that are being used by

326
00:20:30,236 --> 00:20:33,862
this CRS, but you can develop more, right?

327
00:20:33,916 --> 00:20:37,758
So has more and more people develop this chaos

328
00:20:37,874 --> 00:20:41,690
for various applications. You will slowly see that the entire

329
00:20:41,840 --> 00:20:45,914
Kubernetes chaos engineering can be practiced just

330
00:20:45,952 --> 00:20:49,626
by installing litmus, right? So how

331
00:20:49,648 --> 00:20:53,006
do you get started? Just imagine that you have on the hub a

332
00:20:53,028 --> 00:20:56,778
lot of chaos experiment for various different applications

333
00:20:56,874 --> 00:20:59,982
and you are running your app in a container and

334
00:21:00,116 --> 00:21:04,042
then all you need to do is pull litmus

335
00:21:04,186 --> 00:21:07,758
helm shot or just install it. It runs in a container.

336
00:21:07,854 --> 00:21:11,598
The moment you install you will get chaos libraries and operator onto

337
00:21:11,614 --> 00:21:14,978
your Kubernetes cluster. And then you need to pull.

338
00:21:15,144 --> 00:21:18,806
The assumption here is that you have so many charts and you

339
00:21:18,828 --> 00:21:23,026
may not need all of them. So you pull whatever you need onto

340
00:21:23,058 --> 00:21:26,962
your Kubernetes cluster and then you just inject chaos

341
00:21:27,026 --> 00:21:30,458
by creating a cr, right, chaos engine which points

342
00:21:30,544 --> 00:21:33,802
to various different experiments and then

343
00:21:33,936 --> 00:21:37,590
it opens up, the operator goes and runs

344
00:21:37,670 --> 00:21:41,518
chaos against a given application and it creates a chaos result,

345
00:21:41,604 --> 00:21:43,680
right? It's as simple has that.

346
00:21:45,090 --> 00:21:49,086
So let's see an example of how this changes

347
00:21:49,268 --> 00:21:52,222
a cloud native developer everyday's life,

348
00:21:52,356 --> 00:21:55,438
right? How does a developer

349
00:21:55,534 --> 00:21:59,666
create a resource? Right? You create a pod and then you

350
00:21:59,688 --> 00:22:02,994
create more resources for an application, for example a

351
00:22:03,032 --> 00:22:06,206
pv or a service, et cetera. And that's

352
00:22:06,318 --> 00:22:09,206
usually that's where it ends. You want to test something,

353
00:22:09,308 --> 00:22:12,514
right? So how do you do it, you inject chaos

354
00:22:12,642 --> 00:22:16,066
by simply creating one more crs just like you've

355
00:22:16,098 --> 00:22:19,046
been using kubernetes for, right?

356
00:22:19,148 --> 00:22:22,506
So you can actually create a chaos engine and

357
00:22:22,528 --> 00:22:25,770
tell what needs to be killed where and then it's all done,

358
00:22:25,840 --> 00:22:29,654
you get your results. So it's extending the concept

359
00:22:29,702 --> 00:22:33,086
of your experience with kubernetes to

360
00:22:33,108 --> 00:22:36,826
do the Chaos engineering also. So that's cloud native chaos engineering.

361
00:22:36,858 --> 00:22:40,094
Just to summarize. Right, so on the Chaos hub we

362
00:22:40,132 --> 00:22:43,206
generally have two types of experiments.

363
00:22:43,338 --> 00:22:47,074
One is generic, that is like generic chaos experiments for

364
00:22:47,112 --> 00:22:50,546
Kubernetes resources in general. And then there are application

365
00:22:50,648 --> 00:22:53,266
specific. So this is where it gets interesting.

366
00:22:53,448 --> 00:22:56,534
So you can, like we have seen again,

367
00:22:56,572 --> 00:22:59,878
sorry to take these same example again and again

368
00:22:59,964 --> 00:23:03,394
Andrew showed I do container

369
00:23:03,442 --> 00:23:07,458
kill of MySQl server pod.

370
00:23:07,554 --> 00:23:11,366
Right. So then you have to go and verify

371
00:23:11,558 --> 00:23:15,450
what exactly happened, right. We verified that the pods have come back.

372
00:23:15,600 --> 00:23:18,646
That's all we saw. Right. In Kubernetes invader.

373
00:23:18,758 --> 00:23:22,670
Hey, more pods are coming up. But how do we verify whether

374
00:23:22,740 --> 00:23:26,254
application that the MySQL server is

375
00:23:26,292 --> 00:23:29,822
really working well or not automatically. So that's these,

376
00:23:29,876 --> 00:23:33,722
you can write more logic into your application specific chaos experiment

377
00:23:33,786 --> 00:23:37,026
and then use them in production. So some

378
00:23:37,048 --> 00:23:40,274
of the experiments that are available are already available.

379
00:23:40,392 --> 00:23:43,954
You can just do a pod delete, container kill.

380
00:23:44,072 --> 00:23:47,286
I mean like a pod can have multiple containers, you can just kill only one

381
00:23:47,308 --> 00:23:50,614
of that. And then you can do a cpu hog into

382
00:23:50,652 --> 00:23:54,434
a pod. Network latency, network loss, network packet corruption

383
00:23:54,562 --> 00:23:57,958
just introduce some corruption into your packets that

384
00:23:57,964 --> 00:24:01,626
are going into your pod and see what happens. Right? So that could be

385
00:24:01,648 --> 00:24:05,334
the granularity level that you want. Then there are some infrastructure

386
00:24:05,462 --> 00:24:09,174
chaos. Of course these are specific to the cloud providers.

387
00:24:09,222 --> 00:24:13,034
For example, how do you take down a node on AWS

388
00:24:13,082 --> 00:24:16,926
is different than how do you take down a node on Google.

389
00:24:17,028 --> 00:24:20,846
Right? So there are disk losses, which is

390
00:24:20,868 --> 00:24:25,070
a very common thing, right? So I suddenly

391
00:24:25,430 --> 00:24:29,746
lose a disk, what happens? And then disk fill is

392
00:24:29,848 --> 00:24:33,682
one more common thing. So these are the initial set of things that are already

393
00:24:33,736 --> 00:24:37,640
there, you can start practicing and application specific things

394
00:24:38,890 --> 00:24:42,934
that are available here are an

395
00:24:42,972 --> 00:24:46,098
application really constitute a pod

396
00:24:46,194 --> 00:24:49,706
or multiple pods and then it's got some service and then there's got some

397
00:24:49,728 --> 00:24:53,974
data. Right? So what do you mean attacking

398
00:24:54,022 --> 00:24:57,814
an application? Right? So you need to define the logic

399
00:24:57,862 --> 00:25:01,660
of what is it that you're going to kill.

400
00:25:02,830 --> 00:25:06,446
Am I going to kill MySQl server or am

401
00:25:06,468 --> 00:25:09,786
I going to kill a part of it, et cetera, et cetera. That's definition.

402
00:25:09,898 --> 00:25:13,182
And then you verify before killing everything is good or not,

403
00:25:13,236 --> 00:25:16,894
right? So that's the hypothesis. And then you use the generic

404
00:25:16,942 --> 00:25:20,354
experiments to actually do the chaos and then

405
00:25:20,392 --> 00:25:23,746
verify your post checks, right? So all this can be put

406
00:25:23,768 --> 00:25:27,574
in into an experiment, and every time, you don't need to run

407
00:25:27,612 --> 00:25:31,398
it again and again. So just put that into Yaml file and your application

408
00:25:31,484 --> 00:25:35,510
chaos happens, right? So the result Cr gets

409
00:25:35,660 --> 00:25:39,522
done. So for example, I'll quickly take an example of open EBS,

410
00:25:39,586 --> 00:25:43,334
how it's done. Open EBS has got multiple components. Now I'm verifying

411
00:25:43,382 --> 00:25:46,426
open EBS as an application. Works well when I

412
00:25:46,448 --> 00:25:50,150
kill something, right? I cannot go and say, okay, open EBS

413
00:25:50,230 --> 00:25:54,334
is a cloud native app. That means it's a microservices and it's got

414
00:25:54,372 --> 00:25:57,886
multiple pods. I can kill a

415
00:25:57,908 --> 00:26:01,086
container that belongs to openabs and see what happens. That's one

416
00:26:01,108 --> 00:26:05,326
way of saying. The other way of saying is I can kill a controller

417
00:26:05,438 --> 00:26:08,066
target of openabs and see what happens,

418
00:26:08,168 --> 00:26:12,418
right? So you will end up having multiple different

419
00:26:12,584 --> 00:26:16,466
chaos experiments that are specific to that application, and then

420
00:26:16,488 --> 00:26:20,662
you can go start using them. For example, I can kill an SQC target of

421
00:26:20,716 --> 00:26:24,694
open EBS and then see what happens. You don't need to really know what

422
00:26:24,732 --> 00:26:28,374
should happen. It's all defined by the open EBS developer. As an open

423
00:26:28,412 --> 00:26:31,178
EBS user, you will be able to say,

424
00:26:31,264 --> 00:26:35,238
okay, my open EBS is functioning properly because I just killed

425
00:26:35,334 --> 00:26:38,330
a target and then it is behaving as expected.

426
00:26:38,750 --> 00:26:42,074
Or you can kill a replica and then see, so you don't

427
00:26:42,122 --> 00:26:45,934
need to learn the nittygritties or complexities of the application,

428
00:26:46,132 --> 00:26:49,978
how the application should behave when something happens in production.

429
00:26:50,074 --> 00:26:53,270
So all that is coded up by your developers and pushed up onto

430
00:26:53,290 --> 00:26:57,250
chaos hub, and then you can just use it. Right? So that's

431
00:26:58,150 --> 00:27:02,366
summary of how a cloud native chaos engineering

432
00:27:02,398 --> 00:27:05,806
framework can work, and litmus is just one of that, then you can

433
00:27:05,848 --> 00:27:10,360
contribute. It's on the Kubernetes slack itself. And then

434
00:27:10,810 --> 00:27:15,078
if you find some issues, you do that. But primarily take a look at,

435
00:27:15,244 --> 00:27:19,554
if you are practicing chaos engineering, take a look at chaos

436
00:27:19,602 --> 00:27:23,026
hub and then there are some things that are already there and it's

437
00:27:23,058 --> 00:27:26,998
just these beginning we opened up. And then

438
00:27:27,084 --> 00:27:30,478
hopefully more contributions will come from the community, from the

439
00:27:30,484 --> 00:27:31,180
CNCF itself.

