1
00:00:27,410 --> 00:00:30,854
Hello everyone, welcome to my talk on how to close the

2
00:00:30,892 --> 00:00:33,590
developer experience gap of kubernetes.

3
00:00:34,170 --> 00:00:37,446
My name is Edidiong Asikpo and I currently work as

4
00:00:37,468 --> 00:00:40,854
a senior developer advocate at Ambassador Labs. I'm also

5
00:00:40,892 --> 00:00:44,178
a CNCF ambassador and technical content creator.

6
00:00:44,274 --> 00:00:47,906
You'd oftentimes find me building, writing, and sharing

7
00:00:47,938 --> 00:00:51,422
knowledge with people in the developer community. You I

8
00:00:51,476 --> 00:00:55,498
go by DD codes on all my social media platforms except LinkedIn,

9
00:00:55,594 --> 00:00:58,830
which is my first and last name. Edidiong Asikpo.

10
00:00:59,250 --> 00:01:02,346
So if you think about it on a general sense, right,

11
00:01:02,468 --> 00:01:06,514
the adoption of kubernetes and containerization has solved many

12
00:01:06,552 --> 00:01:09,810
challenges that businesses face today when it comes to

13
00:01:09,880 --> 00:01:13,426
flexibility, scaling, and the reliability of

14
00:01:13,448 --> 00:01:17,386
the release of new versions. This has motivated several

15
00:01:17,438 --> 00:01:21,382
people to adopt cloud native technologies because they also wanted

16
00:01:21,436 --> 00:01:24,726
to enjoy these benefits. Right? And that's why you've seen that so

17
00:01:24,748 --> 00:01:27,986
many companies have transitioned from monoliths to microservices,

18
00:01:28,098 --> 00:01:31,594
and you're still more in the conversation of making that transition as

19
00:01:31,632 --> 00:01:35,226
well. So even though kubernetes enables you

20
00:01:35,248 --> 00:01:38,806
to achieve all these amazing things, what nobody really tells

21
00:01:38,838 --> 00:01:42,426
you is that it significantly impacts the developer experience we

22
00:01:42,448 --> 00:01:46,138
once knew about. So I'm sure you probably know the meaning

23
00:01:46,154 --> 00:01:50,046
of developer experience, but let me just quickly remind you

24
00:01:50,068 --> 00:01:53,394
about what that means and also lead up to the next point in this

25
00:01:53,432 --> 00:01:57,342
conversation. So developer experience is the workflow

26
00:01:57,406 --> 00:02:00,210
a developer uses to develop, test,

27
00:02:00,360 --> 00:02:04,098
deploy and release software. So it's pretty much what happens from the

28
00:02:04,104 --> 00:02:07,126
time they start writing code to when they push their code to

29
00:02:07,148 --> 00:02:10,694
production. This developer experience consists of two

30
00:02:10,732 --> 00:02:14,434
types, which is the inner development loop and the outer

31
00:02:14,482 --> 00:02:17,906
development loop. So the inner development

32
00:02:17,938 --> 00:02:21,254
loop is where the developer pretty much does like the build push

33
00:02:21,302 --> 00:02:24,810
test cycle where they're writing the code they are building

34
00:02:24,880 --> 00:02:27,830
to confirm that the code works as expected,

35
00:02:27,910 --> 00:02:31,774
and then of course testing it to finalize that confirmation or

36
00:02:31,812 --> 00:02:34,874
test process. And once they feel satisfied

37
00:02:34,922 --> 00:02:39,054
in this process, they push it to a version control, like GitHub for

38
00:02:39,092 --> 00:02:42,222
instance. So the moment things push is made,

39
00:02:42,356 --> 00:02:45,522
that's what automatically triggers the outer dev

40
00:02:45,576 --> 00:02:49,106
loop. So the outer dev loop is everything that happens leading up

41
00:02:49,128 --> 00:02:52,242
to when it's being pushed to production. This could be like code

42
00:02:52,296 --> 00:02:55,798
merge, Canary release deploying, and all

43
00:02:55,804 --> 00:02:59,190
of those other interesting stuff. So the

44
00:02:59,260 --> 00:03:02,866
adoption of cloud native technologies has altered this developer

45
00:03:02,898 --> 00:03:06,994
experience in two ways. One is that developers

46
00:03:07,042 --> 00:03:10,578
now have to perform extra steps in the inner development loop,

47
00:03:10,674 --> 00:03:14,374
and secondly, developers now not to be more involved

48
00:03:14,422 --> 00:03:17,818
in the outer dev loop, even though most of their time is spent on the

49
00:03:17,824 --> 00:03:21,366
inner dev loop, where they are actually writing the code and testing

50
00:03:21,398 --> 00:03:24,894
the impact of their code changes. They now have to be concerned about,

51
00:03:25,012 --> 00:03:28,414
hey, Canary release, deploying code merge, all of those

52
00:03:28,452 --> 00:03:32,110
other stuff. And even though this comes with certain

53
00:03:32,180 --> 00:03:35,250
benefits, it also has its disadvantages.

54
00:03:35,990 --> 00:03:39,486
For this talk, we're going to focus on the inner dev loop,

55
00:03:39,518 --> 00:03:43,730
because that's actually where the debugging and developer experience happens

56
00:03:43,800 --> 00:03:47,370
in, right? Once you can make this section of the inner dev loop

57
00:03:47,390 --> 00:03:50,454
as fast as possible, it indirectly affects every

58
00:03:50,492 --> 00:03:54,226
other part of the developer experience, because it would make you to ship

59
00:03:54,258 --> 00:03:58,006
products to your end users a lot faster. So here's what

60
00:03:58,028 --> 00:04:01,702
a traditional inner dev loop looks like, right? Let's assume

61
00:04:01,766 --> 00:04:05,514
that the developer in this case would have to spend 6 hours per day

62
00:04:05,632 --> 00:04:09,066
writing code, and the inner dev loop would probably be

63
00:04:09,088 --> 00:04:12,542
like five minutes, for instance. This means that they'll spend three

64
00:04:12,596 --> 00:04:15,994
minutes coding, one minutes building and reloading,

65
00:04:16,042 --> 00:04:19,630
right? The next 1 minute used to inspect that the code changes

66
00:04:19,700 --> 00:04:23,406
that they have made is working as expected, and like to

67
00:04:23,428 --> 00:04:27,458
say ten to 20 seconds committing that code change to version control

68
00:04:27,544 --> 00:04:31,266
system. And if you want to count this or kind

69
00:04:31,288 --> 00:04:35,406
of break it down, you realize that in this formula that we've

70
00:04:35,438 --> 00:04:39,650
created, that developer would be able to make at least 70 iterations

71
00:04:39,730 --> 00:04:43,346
of their code per day. And the only inner dev loop,

72
00:04:43,378 --> 00:04:46,886
or like the only developer tax, rather, that they

73
00:04:46,908 --> 00:04:50,250
will pay here, is the commit time, which is actually

74
00:04:50,320 --> 00:04:53,926
negligible because it just takes ten to 20 seconds

75
00:04:54,038 --> 00:04:57,626
or less, depending on how detailed you want that

76
00:04:57,648 --> 00:05:01,886
commit message to be. Right? But then here's what the

77
00:05:01,988 --> 00:05:05,486
inner dev loop of a containerized system looks like when you

78
00:05:05,508 --> 00:05:09,274
start adopting kubernetes and other cloud native technologies.

79
00:05:09,402 --> 00:05:12,906
Yes, coding still remains the same, but then after you've

80
00:05:12,938 --> 00:05:17,134
made that code changing, you now have to wait for your code

81
00:05:17,172 --> 00:05:20,718
to be containerized, pushed through a registry, and deployed

82
00:05:20,734 --> 00:05:24,434
to a Kubernetes cluster before you can see the impact of your close change.

83
00:05:24,552 --> 00:05:28,006
And then you realize that this automatically reduces the

84
00:05:28,028 --> 00:05:31,318
number of iterations from 70 to 40,

85
00:05:31,484 --> 00:05:34,774
right? And then the developer tax being

86
00:05:34,812 --> 00:05:38,294
paid here is in this build push test cycle,

87
00:05:38,422 --> 00:05:41,642
which as you can see, is longer than

88
00:05:41,696 --> 00:05:45,098
the traditional inner dev loop, where you just spend

89
00:05:45,184 --> 00:05:48,454
like ten to 20 seconds committing. And oftentimes

90
00:05:48,502 --> 00:05:52,186
people would just neglect this and be like, oh, fine, it's great, let me go

91
00:05:52,208 --> 00:05:55,406
grab a cup of coffee. Let me quickly watch like

92
00:05:55,428 --> 00:05:59,226
a Netflix episode while my code is containerizing.

93
00:05:59,338 --> 00:06:03,118
But then you realize that in the long run, that all of things, minutes that

94
00:06:03,124 --> 00:06:06,706
you're waiting for the code to containerize or be pushed to a registry or be

95
00:06:06,728 --> 00:06:09,954
deployed into a Kubernetes cluster could have actually been used

96
00:06:09,992 --> 00:06:13,666
to do the most important things that developers are expected to

97
00:06:13,688 --> 00:06:17,890
do, which is writing code, seeing the impact of their code changes and

98
00:06:17,960 --> 00:06:21,510
pushing it to production as soon as possible. So with a better

99
00:06:21,580 --> 00:06:25,206
inner dev loop, it means that you'll be able to move faster. And I will

100
00:06:25,228 --> 00:06:27,960
continue to explain that as we go further in this talk.

101
00:06:28,590 --> 00:06:32,058
So a slow inner dev loop impacts everyone.

102
00:06:32,224 --> 00:06:35,610
For instance, front end developers now have to wait for

103
00:06:35,680 --> 00:06:39,238
previews of backend changes on a shared dev environment

104
00:06:39,334 --> 00:06:42,794
or rely on mock mock databases, mock API

105
00:06:42,842 --> 00:06:46,350
scripts, those kind of stuff when coding the application locally.

106
00:06:47,090 --> 00:06:50,654
Backend developers, on the other hand, now have to wait for

107
00:06:50,772 --> 00:06:54,782
CI CD to build and deploy their apps to a target environment

108
00:06:54,846 --> 00:06:58,286
to verify that their code works correctly. And this doesn't

109
00:06:58,318 --> 00:07:02,018
just affect front end and back end developers, it affects everybody

110
00:07:02,104 --> 00:07:05,886
at large because it slows down the releases into production,

111
00:07:05,998 --> 00:07:09,830
which thereby impacts the business because you're not moving as fast as possible,

112
00:07:09,980 --> 00:07:13,746
and the end users because let's say they are stuck in a bug that cannot

113
00:07:13,778 --> 00:07:18,234
be fixed immediately because of the slow inner dev loop that the

114
00:07:18,432 --> 00:07:22,042
developers are currently experiencing in the company. So this bad

115
00:07:22,096 --> 00:07:25,594
developer experience doesn't just affect the developer experience,

116
00:07:25,712 --> 00:07:28,380
but the user experience and the company.

117
00:07:29,310 --> 00:07:32,782
So is there a way out? Is there a way to

118
00:07:32,916 --> 00:07:37,118
actually enjoy all of the benefits that Kubernetes has to offer without

119
00:07:37,204 --> 00:07:40,506
actually being slowed down or impacting

120
00:07:40,538 --> 00:07:43,600
your developer experience? The answer is yes,

121
00:07:44,050 --> 00:07:47,682
thankfully. And there are a couple of ways to do this,

122
00:07:47,736 --> 00:07:51,282
right? The first one here is where you get to run

123
00:07:51,336 --> 00:07:55,470
everything locally, right? And the good thing about this development environment

124
00:07:55,550 --> 00:07:59,778
is that you still get to enjoy all the benefits of local development.

125
00:07:59,874 --> 00:08:03,894
You can set breakpoints, enable hots, reloading and

126
00:08:03,932 --> 00:08:07,622
even see logs a lot faster. And because everything is running

127
00:08:07,676 --> 00:08:10,694
locally, it means that you'd have a faster inner dev loop,

128
00:08:10,742 --> 00:08:14,074
right? Because as soon as you make a code change, you can quickly test

129
00:08:14,112 --> 00:08:17,674
it against its dependencies. Another great thing about this

130
00:08:17,712 --> 00:08:20,906
is that it's also relatively cheap, right? Because you

131
00:08:20,928 --> 00:08:24,430
don't have to spend money on Kubernetes clusters. I mean,

132
00:08:24,500 --> 00:08:27,886
we all know how expensive that can be, but then it

133
00:08:27,908 --> 00:08:31,502
has a really high maintenance scale, right? You'd always

134
00:08:31,556 --> 00:08:34,798
have to confirm that the mock API scripts are up to date.

135
00:08:34,884 --> 00:08:38,178
Whenever I want to make a code change and think of things in like a

136
00:08:38,184 --> 00:08:41,554
situation where there are several developers in your company all

137
00:08:41,592 --> 00:08:44,834
making changes respectively when they are working,

138
00:08:44,952 --> 00:08:48,458
it can be really tough to ensure that this mock API

139
00:08:48,494 --> 00:08:52,374
script is up to date. And that's why you oftentimes see companies who use

140
00:08:52,412 --> 00:08:56,038
this method push things to production and realize that

141
00:08:56,044 --> 00:09:00,306
there is a mistake that they missed out on because their mock SPI

142
00:09:00,338 --> 00:09:03,850
script wasn't as up to date as it should have been. And then because

143
00:09:03,920 --> 00:09:07,462
everything is running locally, it also makes your workstation

144
00:09:07,526 --> 00:09:11,078
really hot. At some point you'd have to move away from

145
00:09:11,104 --> 00:09:15,390
this because there's only so much that your laptop can actually handle.

146
00:09:16,130 --> 00:09:20,186
So even though this method has several benefits like a fast feedback

147
00:09:20,218 --> 00:09:23,694
loop, it's cheap, gives you access to local development

148
00:09:23,742 --> 00:09:27,342
tools. The high maintenance and hot workstation isn't

149
00:09:27,406 --> 00:09:30,594
sustainable. So the other option here is

150
00:09:30,632 --> 00:09:34,606
to now try remote developments right, where everything runs

151
00:09:34,638 --> 00:09:37,470
remotely. And because everything runs remotely,

152
00:09:37,550 --> 00:09:40,742
you now have a normal workstation, right? There is no

153
00:09:40,796 --> 00:09:44,386
hot, your laptop is not closing up, it's not becoming

154
00:09:44,418 --> 00:09:47,522
too hot, you can use it as expected. And the maintenance

155
00:09:47,586 --> 00:09:50,934
is also really low because you can set CI CD

156
00:09:50,982 --> 00:09:54,682
systems to ensure that every single time someone makes a code

157
00:09:54,736 --> 00:09:58,746
change, it updates it all around. And whenever another developer wants

158
00:09:58,768 --> 00:10:02,526
to make or test the impact of their code changes, they are using the

159
00:10:02,548 --> 00:10:06,190
most updated API script or database or whatever

160
00:10:06,260 --> 00:10:08,960
dependencies that they are testing against.

161
00:10:09,570 --> 00:10:13,226
But then the cost is really high, right? Every developer

162
00:10:13,258 --> 00:10:16,398
would have to use their own remote development cluster,

163
00:10:16,494 --> 00:10:20,606
which can be quite expensive. And then the inner

164
00:10:20,638 --> 00:10:24,094
dev loop or the feedback loop in this case is extremely,

165
00:10:24,142 --> 00:10:27,870
very slow. Because every single time a developer makes a

166
00:10:27,880 --> 00:10:31,638
code change locally and wants to test the impact of that code change,

167
00:10:31,724 --> 00:10:35,426
they need to containerize it, push it to a registry like Docker

168
00:10:35,458 --> 00:10:39,186
hub for instance, and then deploy it into the remote

169
00:10:39,218 --> 00:10:43,002
Kubernetes cluster. So doing this all over again every single

170
00:10:43,056 --> 00:10:46,474
time you want to make a code change slows you down and makes you

171
00:10:46,512 --> 00:10:50,114
less productive. So instead of you to do like 70 iterations

172
00:10:50,182 --> 00:10:54,400
of your code per day, you don't end up doing 40 iterations per day.

173
00:10:54,850 --> 00:10:58,430
So even though this development environment has great

174
00:10:58,500 --> 00:11:00,750
benefits, like a normal work temperature,

175
00:11:02,370 --> 00:11:05,474
low maintenance, the cost is very high,

176
00:11:05,592 --> 00:11:09,474
it has a slow feedback loop, and you get to lose out on all

177
00:11:09,512 --> 00:11:12,994
the many benefits you enjoyed from local developments like

178
00:11:13,032 --> 00:11:16,662
debugging breakpoints, hot reloading and all those other

179
00:11:16,716 --> 00:11:20,022
interesting stuff. So you'd agree

180
00:11:20,076 --> 00:11:23,654
with me that these two different development methods have their own

181
00:11:23,692 --> 00:11:27,570
benefits. Local development environment has several pros

182
00:11:27,650 --> 00:11:30,870
and remote development environment also has its own pros.

183
00:11:30,950 --> 00:11:34,170
So how can we combine these two things

184
00:11:34,240 --> 00:11:38,058
together and create a development environment where

185
00:11:38,144 --> 00:11:41,566
you get to enjoy the benefits of local development and the

186
00:11:41,588 --> 00:11:45,262
benefits of remote development? This is where telepresence comes

187
00:11:45,316 --> 00:11:48,078
in and enables you to achieve this.

188
00:11:48,244 --> 00:11:52,154
So this creates a development environment we call remocal,

189
00:11:52,202 --> 00:11:55,634
which is remote to local emerges and gives you the best of

190
00:11:55,672 --> 00:11:59,314
both worlds. So now your cost would be low because even

191
00:11:59,352 --> 00:12:02,286
though things are running in the remote Kubernetes cluster,

192
00:12:02,478 --> 00:12:05,986
development teams can now use shared clusters. So it

193
00:12:06,008 --> 00:12:09,874
means you cut down the amount of money you had to spend paying for clusters

194
00:12:09,922 --> 00:12:14,246
for each developer. And the maintenance here is very low because you

195
00:12:14,268 --> 00:12:18,274
can still use your CI CD systems to automate and update

196
00:12:18,402 --> 00:12:22,726
your API, script, database and all other dependencies

197
00:12:22,838 --> 00:12:26,534
whenever a code change is being made. And then the temperature is normal,

198
00:12:26,582 --> 00:12:29,962
because the only thing you have to run locally is the

199
00:12:30,016 --> 00:12:33,594
service you're actually making changes to, while every other thing would

200
00:12:33,632 --> 00:12:37,166
run remotely. And then things gives you a fast feedback loop because

201
00:12:37,268 --> 00:12:40,894
you no longer have to do the bullpoost test cycle, right.

202
00:12:41,012 --> 00:12:44,426
All you need to do is run telepresence intercept

203
00:12:44,538 --> 00:12:47,906
and you instantly be able to intercept the traffic going to

204
00:12:47,928 --> 00:12:51,246
the service in the cluster, to the service on your local machine.

205
00:12:51,358 --> 00:12:55,130
That way you can test how this service would work with its dependencies

206
00:12:55,230 --> 00:12:58,694
in the remote Kubernetes cluster. So what exactly is

207
00:12:58,732 --> 00:13:02,514
telepresence, you might ask? Telepresence is a CNCF

208
00:13:02,562 --> 00:13:06,086
tool that enables teams to test and debug on

209
00:13:06,108 --> 00:13:09,670
Kubernetes a lot faster and in a seamless

210
00:13:09,750 --> 00:13:13,386
process. It does this by connecting your local machine to

211
00:13:13,408 --> 00:13:16,582
a cluster via a two way proxy mechanism,

212
00:13:16,726 --> 00:13:20,186
which enables you to access clusters resources as

213
00:13:20,208 --> 00:13:23,514
if they were running locally, and reroute cluster's traffic

214
00:13:23,562 --> 00:13:26,922
to your local service. There are two ways to intercept

215
00:13:26,986 --> 00:13:30,634
traffic with telepresence. First, one is called global intercept,

216
00:13:30,762 --> 00:13:34,942
while the other is called personal intercept. So what global Intercept does

217
00:13:34,996 --> 00:13:38,546
is that it intercepts the traffic that was intended for

218
00:13:38,568 --> 00:13:41,970
a service in the remote cluster to a service running on your local

219
00:13:42,040 --> 00:13:46,054
machine. All of the traffic, right? But personal intercepts, on the other

220
00:13:46,092 --> 00:13:49,218
hand, only intercept a subset of the traffic.

221
00:13:49,314 --> 00:13:53,622
And this is vital because there are certain times where different

222
00:13:53,676 --> 00:13:56,882
developers are working on the same Kubernetes cluster,

223
00:13:56,946 --> 00:14:00,418
right? And you don't want to make your debugging or testing

224
00:14:00,514 --> 00:14:04,026
to affect or impact the work that the other developer is doing.

225
00:14:04,128 --> 00:14:08,042
So in this case, you'd only send a subset of the traffic to just

226
00:14:08,096 --> 00:14:11,920
your laptop, while every other request coming to that

227
00:14:12,450 --> 00:14:15,550
service in the cluster would go there as intended.

228
00:14:15,970 --> 00:14:20,074
So here is a diagrammatical architecture of how telepresence

229
00:14:20,122 --> 00:14:24,042
works, right? So let's say you have a service called service,

230
00:14:24,116 --> 00:14:27,682
a prime, running locally in your computer and another service

231
00:14:27,736 --> 00:14:31,294
called service a running in the cluster. So whenever

232
00:14:31,342 --> 00:14:35,202
a request comes in through the ingress, it's going to hit the

233
00:14:35,256 --> 00:14:39,034
sidecar agent, which has been added by telepresent.

234
00:14:39,182 --> 00:14:42,022
And once it hits this sidecar agent,

235
00:14:42,156 --> 00:14:45,270
it's going to direct all the traffic coming

236
00:14:45,340 --> 00:14:48,386
here to the traffic manager, who would then reroute

237
00:14:48,418 --> 00:14:51,894
it to your laptop. And of course that's in the case of a global

238
00:14:51,942 --> 00:14:54,934
intercept. But if this was a personal intercept,

239
00:14:55,062 --> 00:14:59,226
once the request comes in through the ingress and hits the

240
00:14:59,408 --> 00:15:02,426
sidecar agent, it's going to check and say, hey,

241
00:15:02,528 --> 00:15:05,902
does this request has the HTTP header? That was

242
00:15:05,956 --> 00:15:09,838
set when I ran the telepresence intercept command, and if it does,

243
00:15:09,924 --> 00:15:14,046
it sends it to the traffic manager, which then sends it to your laptop.

244
00:15:14,158 --> 00:15:18,318
But if it doesn't, it goes to service a as expected.

245
00:15:18,414 --> 00:15:22,194
So this is in a scenario where your work doesn't impact other

246
00:15:22,232 --> 00:15:25,858
developers. Assuming another developer is still using service

247
00:15:25,944 --> 00:15:29,846
a to do some testing of some work, I'm not going to impact the

248
00:15:29,868 --> 00:15:33,606
traffic coming to that service in the cluster, just a subset of

249
00:15:33,628 --> 00:15:36,966
it that will come to my laptop so I can do my debugging and

250
00:15:36,988 --> 00:15:40,370
my testing and have a fast developer experience without

251
00:15:40,460 --> 00:15:43,660
impacting what my colleagues are doing as well.

252
00:15:44,110 --> 00:15:47,034
Let me show you a demo of how telepresence works.

253
00:15:47,232 --> 00:15:50,730
The first thing I'm going to do here is run the telepresence Connect

254
00:15:50,800 --> 00:15:54,602
command. This is going to put my local mission in the cluster

255
00:15:54,666 --> 00:15:57,886
and enable me to speak to cluster resources as if I was

256
00:15:57,908 --> 00:16:01,562
another resource in the cluster. Let's start this out by assessing

257
00:16:01,626 --> 00:16:05,182
one of the services running in the cluster. For instance, the very

258
00:16:05,236 --> 00:16:08,706
large Java service. In this case, I don't have

259
00:16:08,728 --> 00:16:12,402
to put in the ip address, I can just put in the DNS name because

260
00:16:12,456 --> 00:16:15,646
telepresence has merged my local ip routing table

261
00:16:15,758 --> 00:16:18,806
and DNS resolution with the cluster, making it

262
00:16:18,828 --> 00:16:22,520
possible for me to connect to it using the cluster's DNS name.

263
00:16:23,050 --> 00:16:26,822
I'm now speaking to the very large Java service like I'm inside

264
00:16:26,876 --> 00:16:30,054
the cluster without having to proxy in or do

265
00:16:30,092 --> 00:16:33,814
any other complex configuration, thanks to the two way proxy

266
00:16:33,862 --> 00:16:37,638
mechanism that telepresence has set up between my local machine

267
00:16:37,734 --> 00:16:40,538
and the cluster. Let's talk a bit about this demo.

268
00:16:40,704 --> 00:16:44,334
This demo is called Edgycop, right? And the demo has number of

269
00:16:44,372 --> 00:16:47,534
services. The data processing service is the one I

270
00:16:47,572 --> 00:16:51,214
own and I'm actively developing, right? Well, the very large

271
00:16:51,252 --> 00:16:55,530
Java service is too large for me to run locally. It's owned by another team

272
00:16:55,620 --> 00:16:58,418
and I also do not have access to its code.

273
00:16:58,584 --> 00:17:02,494
The very large data store, on the other hand, has all the critical scenarios,

274
00:17:02,542 --> 00:17:06,274
right? All the critical test scenarios, and it's also too large

275
00:17:06,312 --> 00:17:10,486
for me to run locally and dates back to the creation of the Edgicop application

276
00:17:10,668 --> 00:17:13,762
many years ago. So without numerous configuration

277
00:17:13,826 --> 00:17:18,162
or time wastage, telepresence connect enables me to assess and interact

278
00:17:18,226 --> 00:17:21,846
with the very large data store and the very large Java

279
00:17:21,878 --> 00:17:25,334
service without running them locally. I can instantly assess

280
00:17:25,382 --> 00:17:28,906
these services in the cluster. So aside from being

281
00:17:28,928 --> 00:17:32,442
able to assess cluster resources as if they're running locally

282
00:17:32,506 --> 00:17:36,526
using telepresence connect, we're also going to run the

283
00:17:36,548 --> 00:17:39,482
telepresence intercept command. Like I mentioned earlier,

284
00:17:39,546 --> 00:17:43,914
there are two types, which are the global intercept and the personal intercept.

285
00:17:44,042 --> 00:17:47,986
So if you look at the edgycop web app now, right, you see that the

286
00:17:48,008 --> 00:17:51,406
UI color here is set to green, and you also see that the data processing

287
00:17:51,438 --> 00:17:55,362
service is also set to green. And there's no other information here apart from

288
00:17:55,416 --> 00:17:58,962
data processing service, right? So I have this data

289
00:17:59,016 --> 00:18:02,582
processing service, like I have a local version running

290
00:18:02,636 --> 00:18:05,878
on my computer. I've not started running here, but I'm going to do that now.

291
00:18:05,964 --> 00:18:10,070
So I'm just going to go, I've already navigated

292
00:18:10,150 --> 00:18:14,620
to the cluster, so if I type Python three

293
00:18:15,310 --> 00:18:18,874
app py, it should start up the

294
00:18:18,912 --> 00:18:22,682
server of the application on localhost

295
00:18:22,746 --> 00:18:26,142
3000. All right, awesome. So if I try to call

296
00:18:26,196 --> 00:18:30,240
that localhost 3000

297
00:18:31,090 --> 00:18:34,638
color, you'd see that it returns blue and

298
00:18:34,644 --> 00:18:38,322
then the call also went through successfully. That's why you can see the 200

299
00:18:38,376 --> 00:18:41,906
here. So now what I'm going to do is I'm going

300
00:18:41,928 --> 00:18:45,826
to intercept the data processing service in the cluster and

301
00:18:45,848 --> 00:18:49,714
reroute all the traffic going to this service to the data processing

302
00:18:49,762 --> 00:18:53,254
service running on my local machine. To do this, I'll run

303
00:18:53,292 --> 00:18:58,630
the telepresence intercept command. So telepresence intercepts,

304
00:18:59,850 --> 00:19:03,622
intercepts the data processing service in this case, and then

305
00:19:03,676 --> 00:19:07,180
deport, which, as you can see here, is 3000.

306
00:19:07,790 --> 00:19:11,374
So if I do this, it's going to create that intercept for me.

307
00:19:11,412 --> 00:19:14,958
See that intercepts name, data processing service

308
00:19:15,124 --> 00:19:18,798
is intercepting all of the requests. So if I go to

309
00:19:18,884 --> 00:19:22,954
the application again and reload, you see that instantly,

310
00:19:23,082 --> 00:19:26,602
it's now assessing the service on my local machine.

311
00:19:26,666 --> 00:19:29,474
And if you come here, you'd also see that that call has also gone through

312
00:19:29,512 --> 00:19:33,278
successfully. Right. You can also notice that the color has changed

313
00:19:33,294 --> 00:19:36,534
from green to blue and that the content of this

314
00:19:36,572 --> 00:19:39,746
data processing box is no longer the same, showing you that it's

315
00:19:39,778 --> 00:19:43,654
now accessing that local data

316
00:19:43,692 --> 00:19:46,982
processing service here. Right? So now

317
00:19:47,036 --> 00:19:49,866
you can see that I was able to move all of the traffic intended for

318
00:19:49,888 --> 00:19:53,500
data processing service, the cluster to data processing service

319
00:19:54,270 --> 00:19:57,562
running on my local machine. So what I want to do now here

320
00:19:57,616 --> 00:20:00,846
is create a personal intercept. To do that I'm going to

321
00:20:00,868 --> 00:20:04,286
leave this existing global intercept and

322
00:20:04,308 --> 00:20:07,886
I'll do that by running telepresence leave and the name of

323
00:20:07,908 --> 00:20:11,760
the intercept, which in this case is data processing service

324
00:20:12,450 --> 00:20:15,714
that has left. So if I go back here and try to reload this page,

325
00:20:15,752 --> 00:20:19,694
you see that it's back to receiving

326
00:20:19,742 --> 00:20:23,106
traffic, or rather sending traffic to the service in the

327
00:20:23,128 --> 00:20:26,318
cluster. I'm going to run the telepresence fascinator

328
00:20:26,334 --> 00:20:30,630
set command. So telepresence intercept,

329
00:20:30,970 --> 00:20:34,774
I'm going to add the HTTP header and

330
00:20:34,812 --> 00:20:38,794
then I'm going to pass the pod, which is about

331
00:20:38,832 --> 00:20:43,158
3000. And at the name of the service I want to intercept,

332
00:20:43,254 --> 00:20:47,354
which is data processing service. So this should

333
00:20:47,392 --> 00:20:50,858
create that personal intercept for us. All right,

334
00:20:51,024 --> 00:20:54,174
so what do we do here is copy this key

335
00:20:54,212 --> 00:20:57,454
value pair. If we go back to our browser and try to reload this page,

336
00:20:57,492 --> 00:21:01,118
you see that it's still going to show the green colors because

337
00:21:01,204 --> 00:21:04,910
now unlike when we ran the global intercept,

338
00:21:05,410 --> 00:21:08,818
it's not rerouting all of the traffic. So we routing a subset of

339
00:21:08,824 --> 00:21:11,710
the traffic that has the HTTP header.

340
00:21:11,790 --> 00:21:14,818
So if I go to my mod extension and paste in that,

341
00:21:14,984 --> 00:21:18,594
I already had this already. So in your case you just click

342
00:21:18,632 --> 00:21:22,254
on this plus sign and add the key values

343
00:21:22,302 --> 00:21:25,686
here. Since I already have, I'm just going to click on check and

344
00:21:25,708 --> 00:21:29,270
then I'm going to reload this browser.

345
00:21:29,350 --> 00:21:32,886
And as you can see here, I've instantly been able to reroute

346
00:21:32,918 --> 00:21:35,690
the traffic to only a specific header.

347
00:21:36,670 --> 00:21:40,554
Not every single request come in, right. So we can combine these

348
00:21:40,592 --> 00:21:43,854
two things together and be able to instantly get

349
00:21:43,892 --> 00:21:47,886
the feedback loop when we make a code change. So for instance, let's say

350
00:21:47,908 --> 00:21:51,614
I want to change that

351
00:21:51,652 --> 00:21:54,718
color from blue to say orange for instance. Let me

352
00:21:54,724 --> 00:21:58,510
go to data processing service and change this from blue

353
00:21:58,670 --> 00:22:02,146
to orange. So I'll save this. And you see that as

354
00:22:02,168 --> 00:22:06,194
soon as I save that, of course the server gets restarted because a change

355
00:22:06,232 --> 00:22:09,894
has been made. And if I come back and reload this, you'd see that

356
00:22:09,932 --> 00:22:13,734
the color has also changed automatically. So instead

357
00:22:13,772 --> 00:22:17,462
of going through the build post test cycle like you normally would, or having

358
00:22:17,516 --> 00:22:20,694
to run all of your services locally, even having to set

359
00:22:20,732 --> 00:22:24,234
up ports forwarding, you can use telepresence to do all these

360
00:22:24,272 --> 00:22:28,090
amazing things instantly. So that's like the beauty of it.

361
00:22:28,160 --> 00:22:31,018
And then if you think about it, the faster you can move, faster I can

362
00:22:31,104 --> 00:22:34,590
do. All of this process is what makes your developer experience great.

363
00:22:34,660 --> 00:22:37,982
Instead of having to wait for minutes, sometimes even

364
00:22:38,036 --> 00:22:41,774
hours, depending on how your Internet connection is

365
00:22:41,812 --> 00:22:45,966
or how powerful your laptop is, for your service to be containerized

366
00:22:46,078 --> 00:22:49,518
can use telepresence to speed that feedback loop.

367
00:22:49,614 --> 00:22:53,394
Get a better developer experience, which would in turn help

368
00:22:53,512 --> 00:22:57,240
not just you, but entire company and end users at large.

369
00:22:57,770 --> 00:23:01,494
Awesome. Now that you've seen how telepresence works, here's a

370
00:23:01,532 --> 00:23:05,490
quick example of a company that utilized telepresence

371
00:23:05,570 --> 00:23:09,494
and I'm going to explain their before and their after. Without telepresence,

372
00:23:09,542 --> 00:23:13,498
they didn't have a great developer experience. But according to them,

373
00:23:13,584 --> 00:23:17,542
after they started using telepresence, their developer experience improved

374
00:23:17,606 --> 00:23:21,398
drastically. Before telepresence they had to bear the

375
00:23:21,424 --> 00:23:24,890
operational and resource burden of running all their microservices

376
00:23:24,970 --> 00:23:28,490
locally, but with telepresence that was completely removed.

377
00:23:28,570 --> 00:23:32,254
They only had to run the service they were updating locally and

378
00:23:32,292 --> 00:23:35,506
every other thing was running in the remote Kubernetes cluster and

379
00:23:35,528 --> 00:23:38,740
they could instantly see the feedback of their close changes.

380
00:23:39,110 --> 00:23:42,770
And then they moved from not being able to utilize

381
00:23:43,750 --> 00:23:47,494
both the benefits of local and remote development to

382
00:23:47,532 --> 00:23:50,854
being able to have the best of both worlds. So they could

383
00:23:50,892 --> 00:23:54,822
use local development tools for debugging hot,

384
00:23:54,876 --> 00:23:58,406
reloading, seeing logs faster. But then their laptops didn't have

385
00:23:58,428 --> 00:24:02,410
to go through stressed or become too hot and all of that because

386
00:24:02,480 --> 00:24:05,706
most of their dependent services were still running in the

387
00:24:05,728 --> 00:24:09,402
remote Kubernetes cluster. Also, they moved from having

388
00:24:09,456 --> 00:24:13,354
to code build the container, push it to a registry,

389
00:24:13,482 --> 00:24:16,574
deploy and wait before being able to test the impact of their code

390
00:24:16,612 --> 00:24:20,094
changes to just coding, intercepting and

391
00:24:20,132 --> 00:24:23,460
immediately testing and seeing the impact of their code changes.

392
00:24:24,070 --> 00:24:27,214
So wrapping up Kubernetes development teams

393
00:24:27,262 --> 00:24:30,594
actually need to have a developer experience that

394
00:24:30,632 --> 00:24:34,030
allows them to focus on things that matter, which is coding,

395
00:24:34,110 --> 00:24:37,426
testing, iterating instead of focusing on things that do

396
00:24:37,448 --> 00:24:41,298
not matter, like waiting for the build push test cycle to be completed

397
00:24:41,394 --> 00:24:44,502
or discovering that you have a bug in production because

398
00:24:44,556 --> 00:24:48,230
you've missed it due to having a testing environment

399
00:24:48,310 --> 00:24:52,650
that is unrealistic from the actual testing environment in production.

400
00:24:53,070 --> 00:24:57,014
So once this is done, it would significantly increase

401
00:24:57,062 --> 00:25:00,974
the productivity of the developers on the team and the number of

402
00:25:01,012 --> 00:25:04,954
updates being shipped to production. Telepresence gives you that all round

403
00:25:05,002 --> 00:25:08,270
developer experience as it bridges the gap between

404
00:25:08,420 --> 00:25:11,886
local development and clusters, giving you the

405
00:25:11,908 --> 00:25:15,378
best of both worlds to be able to utilize all of the interesting

406
00:25:15,464 --> 00:25:19,410
things you love about local development and remote development.

407
00:25:19,910 --> 00:25:23,218
So if you'd love to try telepresence, you can

408
00:25:23,224 --> 00:25:26,914
do so by visiting this link. We currently have a 30 day

409
00:25:26,952 --> 00:25:31,410
free trial, so you get to try it easy for your development,

410
00:25:31,490 --> 00:25:35,030
see how it improves your development workflow and your developer experience,

411
00:25:35,180 --> 00:25:38,920
and of course, invite members of your team to join in as well.

412
00:25:39,450 --> 00:25:43,734
Thank you so much for joining this talk and listening till the very end.

413
00:25:43,852 --> 00:25:46,806
If you have any questions, feel free to join our community.

414
00:25:46,908 --> 00:25:50,686
Slack at ah Slack or send me

415
00:25:50,708 --> 00:25:53,740
a DM on Twitter via Didi codes. Thank you.

