1
00:00:25,570 --> 00:00:28,966
Hi, my name is Mariah Peterson. I'm really excited to be talking to you

2
00:00:28,988 --> 00:00:32,886
today at Comp 42 and I thank you all for tuning in to

3
00:00:32,908 --> 00:00:36,262
my talk. We're going to be talking today about how to go

4
00:00:36,316 --> 00:00:39,750
from zero to hero when learning

5
00:00:39,820 --> 00:00:43,714
how to code using go. Just a little bit of background

6
00:00:43,842 --> 00:00:47,634
about me I currently work as a data engineer

7
00:00:47,762 --> 00:00:51,774
at a software company based out of Lehigh, Utah. It's called Weave. I am

8
00:00:51,812 --> 00:00:55,438
also a board member of the Forge foundation, nonprofit where we

9
00:00:55,524 --> 00:00:58,922
sponsor local events, conferences, meetup, et cetera,

10
00:00:58,986 --> 00:01:02,766
for people in the tech community. I am the mother

11
00:01:02,798 --> 00:01:06,754
of two beautiful dogs and you can find me on

12
00:01:06,792 --> 00:01:10,382
Twitter, GitHub, LinkedIn, but most easily

13
00:01:10,446 --> 00:01:14,066
on Twitch where I do streams multiple times a

14
00:01:14,088 --> 00:01:17,442
week on anything and everything that I have learned.

15
00:01:17,506 --> 00:01:20,966
New technologies I do learn and I love to just

16
00:01:20,988 --> 00:01:24,518
meet new people and chat and answer questions on there.

17
00:01:24,604 --> 00:01:27,030
So best place to reach out to me,

18
00:01:27,180 --> 00:01:30,970
definitely Twitch. Let's talk a little bit about go.

19
00:01:31,120 --> 00:01:35,446
So go is a great, wonderful, amazing programming

20
00:01:35,478 --> 00:01:38,886
language. People choose it because it's fast, because it's

21
00:01:38,918 --> 00:01:43,310
reliable, because it's compiled, it's super stable, super scalable,

22
00:01:43,730 --> 00:01:47,454
has multiple threads. It's amazing. Everybody under

23
00:01:47,492 --> 00:01:51,118
the sun uses it. It has a great community. It's the best language in the

24
00:01:51,124 --> 00:01:54,482
world. Everyone should use go. But for me, go was my very

25
00:01:54,536 --> 00:01:58,174
first programming language. Well, my very first professional

26
00:01:58,222 --> 00:02:01,186
programming language. I learned it at my first job,

27
00:02:01,288 --> 00:02:04,690
my very first tech job. And if anybody

28
00:02:04,760 --> 00:02:08,014
ever asks me, I say my first programming language was

29
00:02:08,072 --> 00:02:11,030
Go, which is very, very uncommon.

30
00:02:11,370 --> 00:02:15,462
Go and all of its learning materials are really

31
00:02:15,516 --> 00:02:18,940
kind of centered on people who've programmed before

32
00:02:19,310 --> 00:02:23,178
things is just a little bit, a snapshot of what you can find on

33
00:02:23,264 --> 00:02:27,594
the resource section of the

34
00:02:27,792 --> 00:02:31,274
Go website. And it's really based for

35
00:02:31,312 --> 00:02:34,874
people who have used a command line before, who understand functions

36
00:02:34,922 --> 00:02:38,430
and type and all of the basic structures

37
00:02:39,090 --> 00:02:42,670
aligned with programming. And so it's very easy to get into go

38
00:02:42,740 --> 00:02:46,882
and to read use go if you've programmed before, but because

39
00:02:47,016 --> 00:02:50,018
a lot of the tools are based out of the command line, because it's a

40
00:02:50,024 --> 00:02:53,234
compiled language and it doesn't really have a lot

41
00:02:53,272 --> 00:02:57,302
of learning tools that are built into the web, it's not super

42
00:02:57,356 --> 00:03:00,998
accessible to people who have never programmed before.

43
00:03:01,084 --> 00:03:04,774
Or in other words, there's a really high barrier of entry for

44
00:03:04,812 --> 00:03:08,794
getting into go, which in my opinion is the

45
00:03:08,832 --> 00:03:12,278
best programming language, super readable and just ideal

46
00:03:12,374 --> 00:03:16,362
first time programmers. So essentially what people

47
00:03:16,416 --> 00:03:20,138
end up doing when these want to learn go is they either have

48
00:03:20,304 --> 00:03:24,362
learned before and they'll go find some online quick tutorial,

49
00:03:24,426 --> 00:03:28,238
go through syntax and these, they can just dive intro the code and

50
00:03:28,244 --> 00:03:31,710
that's really easy, super open sourced, good for everybody

51
00:03:31,780 --> 00:03:35,170
else. But if you have never programmed before,

52
00:03:35,240 --> 00:03:38,750
you usually end up coding to udemy or udacity

53
00:03:38,830 --> 00:03:43,042
a boot camps and you're spending tons and tons of money to get

54
00:03:43,096 --> 00:03:46,134
the skill of programming before you can learn.

55
00:03:46,172 --> 00:03:49,926
Go. And for some people this presents an

56
00:03:49,948 --> 00:03:53,590
conditionals barrier to entry, where they have to put in

57
00:03:53,740 --> 00:03:57,766
money, research and effort to find quality courses to

58
00:03:57,788 --> 00:04:01,046
gain skills when they don't always have that. They might be coming from low

59
00:04:01,068 --> 00:04:04,874
income backgrounds, they might be working full time jobs, they might be

60
00:04:04,912 --> 00:04:08,426
single parents of children, and they just don't have time to go to school,

61
00:04:08,528 --> 00:04:12,206
or they might not have the extra resources to pay for a course. And so

62
00:04:12,228 --> 00:04:15,754
I'm a really huge proponent of something I like to call open source

63
00:04:15,802 --> 00:04:19,006
learning, or that idea that people who have the

64
00:04:19,028 --> 00:04:22,142
skill, people who have spent time

65
00:04:22,196 --> 00:04:25,226
learning, can share their knowledge in a way that's

66
00:04:25,258 --> 00:04:28,754
more similar to how we interact day to day. We always

67
00:04:28,792 --> 00:04:32,178
look for articles that are free, we look for examples that are

68
00:04:32,184 --> 00:04:35,554
for free, or tutorials that are free. And once you're in the industry, that's super

69
00:04:35,592 --> 00:04:39,334
easy to do and glean skills from, but if you're just coming in, that's really

70
00:04:39,372 --> 00:04:42,978
hard to do. And to be frank, it's quite frightening.

71
00:04:43,074 --> 00:04:46,594
So coming from that experience, these go ins, my first language,

72
00:04:46,722 --> 00:04:49,914
and really being a proponent for this open source learning,

73
00:04:50,032 --> 00:04:53,994
I put together a nice little tutorial that's currently available

74
00:04:54,112 --> 00:04:58,166
on my GitHub with the idea of capturing that audience

75
00:04:58,358 --> 00:05:02,174
who havent never programmed before and teaching them

76
00:05:02,212 --> 00:05:05,726
how to program using go. Like I said, there's a lot of

77
00:05:05,748 --> 00:05:08,654
challenges to this and it's not easy,

78
00:05:08,772 --> 00:05:12,266
but since it is open source, since it's

79
00:05:12,298 --> 00:05:15,934
free for everyone to access, we want to have multiple

80
00:05:15,982 --> 00:05:19,474
contributions and everybody who's ever wanted to share

81
00:05:19,512 --> 00:05:22,594
that knowledge can come in and participate, write some lines of codes, write some

82
00:05:22,632 --> 00:05:26,034
example, and really help people overcome the barrier of entry

83
00:05:26,082 --> 00:05:29,174
to not just go, but programming in general,

84
00:05:29,292 --> 00:05:33,318
and have free resources to learn and to grow and to

85
00:05:33,484 --> 00:05:37,398
gain access to good jobs and available

86
00:05:37,484 --> 00:05:41,430
income. So just really quickly, I plan

87
00:05:41,500 --> 00:05:44,966
on kind of running through a little bit of my strategy, the way I approached

88
00:05:44,998 --> 00:05:48,602
it, the way I approached it in relation to go, as well as into

89
00:05:48,656 --> 00:05:52,554
learning programming for the first time. And then we'll talk a little bit about some

90
00:05:52,592 --> 00:05:56,654
pitfalls, some hurdles, some stuff that's specific to go, and then how anybody

91
00:05:56,772 --> 00:06:00,590
listening can get involved in not only creating the course, but also

92
00:06:00,740 --> 00:06:03,998
taking it if they want to help out in that nature. So the

93
00:06:04,004 --> 00:06:07,482
first section is just can essential intro to programming.

94
00:06:07,626 --> 00:06:11,770
Normally, the first project you do in any programming is considered

95
00:06:11,850 --> 00:06:15,686
a hello world project, right? Where you just get the program up and

96
00:06:15,708 --> 00:06:18,870
running and it just prints out a little hello world. But with go,

97
00:06:19,020 --> 00:06:21,766
you have to install a binary, you have to make sure it's set up.

98
00:06:21,788 --> 00:06:24,834
You have to get your go environment set up, you have to have a gopath

99
00:06:24,882 --> 00:06:27,158
set up on your command line. You have to know how to run all the

100
00:06:27,164 --> 00:06:30,858
go tools. And so that barrier for entry for someone who's never programmed before

101
00:06:30,944 --> 00:06:34,314
gets higher and higher. So what we tried to do with

102
00:06:34,352 --> 00:06:38,026
that is using some online tools like go playground or go play

103
00:06:38,048 --> 00:06:41,338
space, in addition to being able to embed those in

104
00:06:41,344 --> 00:06:44,522
a site, we're kind of removing, abstracting out the tools

105
00:06:44,586 --> 00:06:47,966
and going through things that are much easier. Things like what

106
00:06:47,988 --> 00:06:51,562
is a function, what is a package, what are main functions,

107
00:06:51,706 --> 00:06:55,406
types, certain organization elements and things. You need

108
00:06:55,428 --> 00:06:58,866
to know just the basics, removing all of the necessities of go and just

109
00:06:58,888 --> 00:07:02,162
going into it. So we start with your essential hello world program,

110
00:07:02,216 --> 00:07:05,890
right, where we just go on to a site and just

111
00:07:05,960 --> 00:07:09,382
press run and see the code come up. And we'll just start

112
00:07:09,436 --> 00:07:13,494
dissecting what each piece of that code means, so that they can get used to

113
00:07:13,532 --> 00:07:16,822
reading code and understanding what's there. The next

114
00:07:16,876 --> 00:07:19,482
thing is types. Now,

115
00:07:19,536 --> 00:07:22,826
types are very essential to go it ins,

116
00:07:22,928 --> 00:07:26,566
how we navigate and manipulate data by creating new types,

117
00:07:26,598 --> 00:07:31,094
by using existing types, and by parsing

118
00:07:31,142 --> 00:07:34,138
the data through it, right? So we're going to introduce what's an int, what's a

119
00:07:34,144 --> 00:07:37,182
string. These are all things that people are familiar with, right? They know what numbers

120
00:07:37,236 --> 00:07:40,718
are, they know what words are, these know what letters are, they know chat.

121
00:07:40,804 --> 00:07:44,286
Chinese characters are characters, but we havent to introduce that in a way that they

122
00:07:44,308 --> 00:07:48,050
now know what the syntax is for programming, right? Know what a byte is?

123
00:07:48,120 --> 00:07:51,810
It's just a little fragment of information, right? And a string usually is

124
00:07:51,880 --> 00:07:55,634
the text that we see. Ints or numbers. We have floats and

125
00:07:55,672 --> 00:07:59,106
doubles, floats mostly,

126
00:07:59,138 --> 00:08:02,790
and go and ways to use these numbers and store these numbers

127
00:08:02,860 --> 00:08:05,942
to preserve certain types of information. Things that the words,

128
00:08:05,996 --> 00:08:09,398
they might not be familiar with, but these concepts everybody gets

129
00:08:09,484 --> 00:08:13,082
just from general life. The next thing we want to kind of dive into

130
00:08:13,136 --> 00:08:17,034
for somebody who's never programmed before now chat, we know how

131
00:08:17,072 --> 00:08:21,162
it's structured. Now that we know how to save data and

132
00:08:21,216 --> 00:08:24,862
use data, is kind of the methodologies that

133
00:08:24,916 --> 00:08:28,618
we use when telling a program what to do. We use functions

134
00:08:28,634 --> 00:08:32,542
for this, right? But now we're teaching people that they can tell,

135
00:08:32,596 --> 00:08:36,514
programs tell a computer essentially how to do certain things,

136
00:08:36,712 --> 00:08:40,482
and that's new. They've never told

137
00:08:40,536 --> 00:08:43,342
these computer what to do thing. They just typed buttons.

138
00:08:43,406 --> 00:08:47,694
So there's two aspects we need to work on here, not just defining

139
00:08:47,742 --> 00:08:51,874
functions, but how to use them, right? Like talk about the arguments and parameters

140
00:08:51,922 --> 00:08:55,782
we take and talk about what we return. Talk about putting logic inside the function

141
00:08:55,836 --> 00:08:59,642
and then calling that function inside a main function so that it can

142
00:08:59,696 --> 00:09:03,286
be used efficiently and that these can really gain

143
00:09:03,318 --> 00:09:07,638
confidence in things. Idea of programming and manipulating

144
00:09:07,814 --> 00:09:11,322
code and giving commands and expecting

145
00:09:11,386 --> 00:09:15,166
certain kinds of outcomes. The next things that I

146
00:09:15,188 --> 00:09:19,374
think is really important and super beneficial is to understand the

147
00:09:19,412 --> 00:09:23,134
idea of conditions. Really. This is

148
00:09:23,252 --> 00:09:26,522
control flow in these more like computer sciency

149
00:09:26,586 --> 00:09:29,970
term. But I didn't want to use control flow because

150
00:09:30,040 --> 00:09:33,214
that's a computer sciency term, right. We're trying to keep it in a way that's

151
00:09:33,262 --> 00:09:36,066
a little bit less of a barrier to entry. So this idea of programing a

152
00:09:36,088 --> 00:09:39,222
condition that has to either be met or not met.

153
00:09:39,356 --> 00:09:42,418
So we're doing things like if else statement switch,

154
00:09:42,594 --> 00:09:46,294
introducing the idea of boolean conditions that can be met or not

155
00:09:46,332 --> 00:09:49,594
met, right? That idea of true or false, yes or

156
00:09:49,632 --> 00:09:53,018
no, and that different kinds of functions or different

157
00:09:53,104 --> 00:09:56,934
kinds of logic can be run based on meeting these conditions.

158
00:09:56,982 --> 00:10:00,646
Right. Now, this is where we start to really make

159
00:10:00,688 --> 00:10:04,286
our programs dynamic or smart, or when

160
00:10:04,308 --> 00:10:07,642
we start to really gain confidence as a programmer

161
00:10:07,786 --> 00:10:11,022
and do things. So by going in ins order

162
00:10:11,076 --> 00:10:14,622
and then hitting the conditionals right after the functions, they really start

163
00:10:14,676 --> 00:10:18,370
getting a little bit of momentum, a little bit of comfort in the idea chat.

164
00:10:18,520 --> 00:10:22,386
They can then tell a program what to do

165
00:10:22,408 --> 00:10:25,842
and how to do it. And these, the last thing is, I think,

166
00:10:25,896 --> 00:10:29,378
kind of like the meat and potatoes of everything is this idea of running loops,

167
00:10:29,394 --> 00:10:32,486
or being able to repeat your code a certain amount of

168
00:10:32,508 --> 00:10:36,470
times or an unknown amount of times in order to get a certain result,

169
00:10:36,540 --> 00:10:40,454
you do honestly have to have a basics of

170
00:10:40,492 --> 00:10:43,686
what types are and functions, how we run functions and loops,

171
00:10:43,718 --> 00:10:47,306
how we put loops in functions, and as well as conditionals and how they're met.

172
00:10:47,408 --> 00:10:50,794
Before we can really leverage this idea of

173
00:10:50,912 --> 00:10:54,782
repeating code effectively, right? Like we may need to count

174
00:10:54,916 --> 00:10:57,966
over a slice, which is a type we have defined, or we may need

175
00:10:57,988 --> 00:11:00,970
to iterate through an array, or iterate through a map,

176
00:11:01,050 --> 00:11:05,082
or run your while style loop

177
00:11:05,146 --> 00:11:08,414
until a certain condition is met and until we've had all the background

178
00:11:08,462 --> 00:11:11,794
to get loops, we really can't start to write

179
00:11:11,912 --> 00:11:14,830
just basic programs that do simple tasks.

180
00:11:14,910 --> 00:11:18,614
But now after hitting all of these bullet points in just

181
00:11:18,652 --> 00:11:22,134
kind of this basic digest, what is programming and how we

182
00:11:22,172 --> 00:11:26,102
do it, regardless of code, we can really start

183
00:11:26,156 --> 00:11:30,002
getting into the things that make it, that are required

184
00:11:30,066 --> 00:11:33,146
to be an efficient go. Programmers. Yes, we've been doing all of this

185
00:11:33,168 --> 00:11:36,534
stuff in go, but we've been using online playgrounds and things that kind of abstract

186
00:11:36,582 --> 00:11:39,914
a lot of the go tooling. And now that they're familiar with

187
00:11:39,952 --> 00:11:43,398
programming and have a little bit of consider, it's time to dive into a little

188
00:11:43,424 --> 00:11:47,630
bit more of like the developer side of tooling and things that make go

189
00:11:47,780 --> 00:11:50,558
really have an advantage. When I started to code,

190
00:11:50,724 --> 00:11:53,994
the thing I was most scared of was honestly writing in the terminal.

191
00:11:54,042 --> 00:11:56,398
I thought I was going to click a wrong button. I thought I was going

192
00:11:56,404 --> 00:12:00,378
to nuke my computer and really not be able to go anywhere

193
00:12:00,474 --> 00:12:03,918
from there. And to be fair, once you have

194
00:12:03,924 --> 00:12:07,414
a basic of programming, like 90% of the code I write every day at

195
00:12:07,452 --> 00:12:10,018
work can be done just with a lot of basics.

196
00:12:10,194 --> 00:12:12,998
But I have to do a lot of things in the command line to be

197
00:12:13,004 --> 00:12:15,446
able to run the code, to be able to test the code and do all

198
00:12:15,468 --> 00:12:18,774
those other ins of things to really be an effective developer. So even though they

199
00:12:18,812 --> 00:12:22,726
know the basics, they're not even ready to start developing

200
00:12:22,758 --> 00:12:26,266
and go. And so that's why this section comes into play, right? Like using your

201
00:12:26,288 --> 00:12:30,138
terminal, using your command line, and becoming comfortable with

202
00:12:30,224 --> 00:12:33,482
the developer environment. Something that we often take for granted,

203
00:12:33,546 --> 00:12:37,214
but is really a massive barrier to entry. I know lots of people coming

204
00:12:37,252 --> 00:12:40,826
out of boot camps who have never touched a terminal

205
00:12:40,938 --> 00:12:44,386
and chat really is not going to let them get

206
00:12:44,408 --> 00:12:48,098
a job. They're really kind of at a disadvantage as far

207
00:12:48,184 --> 00:12:51,630
as being able to work efficiently and effectively.

208
00:12:51,790 --> 00:12:55,474
So in this idea of touching the

209
00:12:55,512 --> 00:12:59,510
command line or learning from the command line, there's so

210
00:12:59,580 --> 00:13:02,886
much to learn here, but just high level basics, enough to

211
00:13:02,908 --> 00:13:06,422
be able to just get started in your environment and go forward.

212
00:13:06,556 --> 00:13:09,954
Most important, of course, like running bash commands,

213
00:13:10,002 --> 00:13:13,186
simple things like PWD, CD,

214
00:13:13,378 --> 00:13:16,998
CP, MVRM, RM,

215
00:13:17,094 --> 00:13:20,854
RF. Right? You're removing, you're moving, you're copying, you have to be able to navigate

216
00:13:20,902 --> 00:13:24,686
and copy paste and do all those kinds of things. It's like really critical for

217
00:13:24,708 --> 00:13:28,574
that. But when you have a low barrier at entry, you end up with

218
00:13:28,612 --> 00:13:32,362
two things. You end up with people on Mac or Linux environments

219
00:13:32,426 --> 00:13:35,822
and then people on Windows environments. And those are two totally separate things.

220
00:13:35,876 --> 00:13:38,994
I havent never programmed in a Windows environment. But some

221
00:13:39,032 --> 00:13:42,466
people only have Windows computers, right? Like we're trying to lower the barrier of

222
00:13:42,488 --> 00:13:45,826
entry and that means using whatever tools they have at their disposal. And that might

223
00:13:45,848 --> 00:13:49,506
be $100 Chromebook. That might be. I bet we would need

224
00:13:49,528 --> 00:13:52,710
the section for Chromebooks. See, things is open source learning.

225
00:13:52,780 --> 00:13:55,974
So if you need to go add the stuff for Chromebooks, feel free to go

226
00:13:56,012 --> 00:13:59,590
add that to the bash session, right? But they might have an old Windows machine,

227
00:14:00,490 --> 00:14:03,834
they might be on a Mac laptop that they

228
00:14:03,872 --> 00:14:07,194
used. INS design school. We really want to be able to have

229
00:14:07,232 --> 00:14:10,986
resources for everything and go super basic, super high level, let them be able to

230
00:14:11,008 --> 00:14:13,934
navigate, right? Create directories, organize their code,

231
00:14:13,972 --> 00:14:17,486
and do things that are just considered smart practices. Next thing,

232
00:14:17,588 --> 00:14:21,278
git source control is important. And if they're going to

233
00:14:21,284 --> 00:14:24,954
get a job, they have to be able to put code on GitLab,

234
00:14:25,002 --> 00:14:28,546
BitBucket or GitHub to use as a resume to

235
00:14:28,568 --> 00:14:32,270
say, hey look, I've done projects. Hey look, I've contributed to open source projects.

236
00:14:32,350 --> 00:14:35,982
Hey, I know how to keep track of my code in an organized

237
00:14:36,046 --> 00:14:39,186
manner so that I don't ruin everybody else's commits,

238
00:14:39,218 --> 00:14:42,486
right? It's like essentially anymore, to work on a team you have to be able

239
00:14:42,508 --> 00:14:46,098
to manage source control, and that's just super basic, super fundamental.

240
00:14:46,194 --> 00:14:49,910
And consider how dependencies are managed in go.

241
00:14:49,980 --> 00:14:53,858
You really can't do a whole lot without Git and understanding

242
00:14:53,874 --> 00:14:57,586
the idea of versions and how to manage that after they've gotten

243
00:14:57,618 --> 00:15:00,846
kind of familiar with git bash and that stuff. Time to now

244
00:15:00,948 --> 00:15:04,686
install go. This is pretty easy and straightforward, but there are things you

245
00:15:04,708 --> 00:15:07,966
have to do, like setting up a path so that the binaries can be

246
00:15:07,988 --> 00:15:10,526
accessed, right? You don't have to have a go path. You do have to have

247
00:15:10,548 --> 00:15:13,546
a go path so that they know where all of the source folders live and

248
00:15:13,668 --> 00:15:17,026
creating those things and having them persist in a way that they

249
00:15:17,048 --> 00:15:20,754
can be easily accessed as part of your environment. And last but not

250
00:15:20,792 --> 00:15:24,926
least, choosing that ide that's

251
00:15:24,958 --> 00:15:28,466
best for them, right? Like I will always recommend vs code for somebody who's never

252
00:15:28,488 --> 00:15:31,638
done it before. I use Vim. Some people go way out of their way to

253
00:15:31,644 --> 00:15:34,982
use Golan to have a curated environment that was,

254
00:15:35,116 --> 00:15:39,062
and these developers need to know what's out there, what's best

255
00:15:39,116 --> 00:15:42,698
for them, and how they can work most efficiently. So they might be in a

256
00:15:42,704 --> 00:15:46,378
full ide like Golan, or they might be writing really

257
00:15:46,464 --> 00:15:49,994
simple scripts in Atom or emacs or whatever works best

258
00:15:50,032 --> 00:15:53,674
for them. And so now that we've got, with those basic fundamentals

259
00:15:53,722 --> 00:15:57,066
out of the way, you're learning go get rid of that barrier to entry.

260
00:15:57,178 --> 00:16:00,222
It's really time to start writing go code,

261
00:16:00,276 --> 00:16:03,566
right? You might not be a go developer, you might

262
00:16:03,588 --> 00:16:07,442
be new to go, I'm a go developer. And any developers really

263
00:16:07,496 --> 00:16:10,994
just want to write code, right? Just want to write something so

264
00:16:11,192 --> 00:16:14,686
really basic. In the standard library, you don't have to go external

265
00:16:14,718 --> 00:16:17,902
at all. You can just write your simple go server,

266
00:16:17,966 --> 00:16:21,414
right? Write up an API, throw messages on it,

267
00:16:21,452 --> 00:16:25,046
see the messages print out, come back, and you can do all of those

268
00:16:25,068 --> 00:16:29,242
things so quickly and you can save it ins git, and it can become like

269
00:16:29,296 --> 00:16:32,906
one of your first example projects, really easy and just kind

270
00:16:32,928 --> 00:16:35,610
of like reestablish the things you learn ins typing.

271
00:16:36,590 --> 00:16:40,202
Honestly, APIs are how we communicate through almost

272
00:16:40,256 --> 00:16:44,394
everything, right? We do so much API connection, it's a really fundamental skill

273
00:16:44,522 --> 00:16:48,158
and it just boosts up that confidence, right? And so now

274
00:16:48,324 --> 00:16:52,366
you've gone through three sections, right? You've learned how to code, you've learned the

275
00:16:52,388 --> 00:16:55,890
basics of a terminal, and you've really produced the first Go program.

276
00:16:55,960 --> 00:16:59,714
Now they can say that barrier to entry has been erased, they're now

277
00:16:59,752 --> 00:17:03,470
go developers and they can start building projects.

278
00:17:03,630 --> 00:17:07,138
And so the next section really of the tutorial or what

279
00:17:07,144 --> 00:17:10,966
I had in mind, right? We're going from zero to hero, not zero to I

280
00:17:10,988 --> 00:17:14,178
can write code. And so that means you have to start developing skills

281
00:17:14,194 --> 00:17:17,314
that make you employable, right? You have to start doing things that make you comfortable,

282
00:17:17,362 --> 00:17:21,462
not only in the go ecosystem, but in the ecosystem

283
00:17:21,526 --> 00:17:25,642
where you are maintaining projects, where you're deploying code, where you're working

284
00:17:25,696 --> 00:17:28,806
with other people, and where you're contributing to larger projects,

285
00:17:28,838 --> 00:17:32,658
right? So those are other kinds of things we have to start tackling,

286
00:17:32,774 --> 00:17:36,254
or at least introducing, right, in this idea of the tutorial. And nothing like

287
00:17:36,292 --> 00:17:39,694
super complicated, really easy. But my thought was,

288
00:17:39,812 --> 00:17:43,022
first thing first, we'll start with what has historically been

289
00:17:43,076 --> 00:17:46,594
a rough spot and go dependencies, right? Like how do

290
00:17:46,632 --> 00:17:49,774
we use libraries outside of the standard library,

291
00:17:49,822 --> 00:17:53,278
how do we bring them in? Kind of introduce this idea of what the Gopath

292
00:17:53,294 --> 00:17:57,590
ins, how they're managed, doing versions. Go modules are really easy

293
00:17:57,740 --> 00:18:01,494
to navigate, really easy to add, to start up to use. You have an

294
00:18:01,532 --> 00:18:05,078
entire libraries at package go dev of

295
00:18:05,244 --> 00:18:09,206
modules. You can use the docs forum and start pulling

296
00:18:09,238 --> 00:18:12,682
things in, right? Using libraries that aren't part of the standard

297
00:18:12,736 --> 00:18:16,854
library. That could be the testify library. They could use a muck

298
00:18:16,902 --> 00:18:20,522
server. Me, I really like machine learning

299
00:18:20,576 --> 00:18:23,726
libraries. None of that's part of the standard library. So I pull in lots of

300
00:18:23,748 --> 00:18:27,546
machine learning libraries and use those in. So just build a tiny

301
00:18:27,578 --> 00:18:31,166
little project that doesn't use something from the standard library that

302
00:18:31,188 --> 00:18:34,910
requires go modules and that can really get them used

303
00:18:34,980 --> 00:18:38,370
to things. Idea of looking

304
00:18:38,440 --> 00:18:41,746
for tools that somebody's already made, right? Like these next obviously is

305
00:18:41,768 --> 00:18:44,946
going to be contributing to open source, right? If there's not a library that does

306
00:18:44,968 --> 00:18:47,998
chat you need, then create that library and maybe somebody will use it later.

307
00:18:48,104 --> 00:18:52,006
The next important thing is this idea of checking your code. People who are in

308
00:18:52,028 --> 00:18:55,142
the go ecosystem tend to be very,

309
00:18:55,196 --> 00:18:58,662
very particular about this. People I interact with or have always been very particular

310
00:18:58,716 --> 00:19:02,630
about it. First one is linters go. The standard library

311
00:19:02,710 --> 00:19:06,166
has like govet built into it, has the format

312
00:19:06,198 --> 00:19:09,514
tool, but thumped built into it. It has the import tool built into it,

313
00:19:09,552 --> 00:19:13,342
and the community has really piled on that and they've established really

314
00:19:13,396 --> 00:19:17,166
strict linting guidelines, just as de facto standard in

315
00:19:17,188 --> 00:19:20,654
the community for maintaining certain kinds of code that can be read by

316
00:19:20,692 --> 00:19:24,030
any go developer that can last forever, that anyone

317
00:19:24,100 --> 00:19:27,986
can get up and use. And it's oftentimes and companies

318
00:19:28,088 --> 00:19:31,694
will implement linters, right. For certain coding and standard practices.

319
00:19:31,742 --> 00:19:34,866
So it's a good idea for them to get familiar with linting, get familiar with

320
00:19:34,968 --> 00:19:39,042
the idea of coding standards, and to be able to use that and leverage that

321
00:19:39,176 --> 00:19:42,438
to the best of their need, right? Whether it be in the CLI or in

322
00:19:42,524 --> 00:19:46,146
their text editor. A lot of people do it in CI

323
00:19:46,178 --> 00:19:49,894
CD. We're not quite there yet, but next, testing, right?

324
00:19:49,932 --> 00:19:53,626
This idea that you can write unit tests, that you can

325
00:19:53,648 --> 00:19:56,966
test your code, that you can validate that certain pieces

326
00:19:56,998 --> 00:20:00,538
of logic of your code, right? Things is where we like one of

327
00:20:00,544 --> 00:20:04,682
my favorite concepts when it comes to unit testing, ins writing testable

328
00:20:04,746 --> 00:20:07,966
functions, right? You have business logic that you want to be able to

329
00:20:07,988 --> 00:20:11,582
test, right? So that really helps you simplify your functions, make them

330
00:20:11,636 --> 00:20:15,002
compact and make them handle one piece of logic that can be easily

331
00:20:15,066 --> 00:20:18,258
tests and chat. You can have multiple test cases for, and then you

332
00:20:18,264 --> 00:20:21,298
can test using the Go test tool that's part of the standard library. Then you

333
00:20:21,304 --> 00:20:24,894
could start running the test coverage tool suite that also exists

334
00:20:24,942 --> 00:20:28,626
in the standard library and really do things that

335
00:20:28,648 --> 00:20:32,278
are just cool. You'll look at Go libraries and

336
00:20:32,284 --> 00:20:35,254
they'll tell you how much of it has test coverage. And this is all built

337
00:20:35,292 --> 00:20:38,886
into the standard library. These are just essential things that come part of Go

338
00:20:38,988 --> 00:20:42,518
that they need to be familiar with to really be effective. Go developers

339
00:20:42,614 --> 00:20:46,042
and then tacking intro that writing a project

340
00:20:46,176 --> 00:20:49,642
will allow them to implement tests to use test

341
00:20:49,696 --> 00:20:53,082
coverage, and writing a project that will let them branch kind of off of this

342
00:20:53,136 --> 00:20:56,574
idea of APIs and grow bigger. I actually did this

343
00:20:56,612 --> 00:20:59,966
project myself recently on my Twitch stream, and it was

344
00:20:59,988 --> 00:21:02,718
really good. It was a really good way for me to practice testing. It was

345
00:21:02,724 --> 00:21:05,906
a really good way for me to explore do I want to use

346
00:21:05,928 --> 00:21:08,100
an external library? Do I want to write it to myself?

347
00:21:10,470 --> 00:21:14,286
It's really simple web crawlers, super basic,

348
00:21:14,478 --> 00:21:17,566
almost as basic as an API, but it's a really good way to illustrate

349
00:21:17,598 --> 00:21:21,474
these concepts and use these tools and just get familiar

350
00:21:21,522 --> 00:21:24,854
with the things around you. And probably the last thing that I put in here,

351
00:21:24,892 --> 00:21:28,250
maybe not necessary, but just this idea of

352
00:21:28,320 --> 00:21:32,394
deploying a service, right, like deploying is not hard,

353
00:21:32,512 --> 00:21:36,042
but it's also not trivial. And with the Waco works,

354
00:21:36,096 --> 00:21:39,434
right, you're using binaries or executables or little

355
00:21:39,472 --> 00:21:43,214
compiled functions, and it's not hard to be able to just put

356
00:21:43,252 --> 00:21:47,674
that in a little Docker container. Get that docker container running on your machine,

357
00:21:47,802 --> 00:21:51,306
put your dependencies in Docker and start using Docker and Docker files.

358
00:21:51,338 --> 00:21:55,246
It's really basic. I didn't really go much farther than that because then

359
00:21:55,268 --> 00:21:57,666
you get into, well, do you want it on a server? Do you want it

360
00:21:57,688 --> 00:22:01,374
on a website? Are you doing different kinds of deployments

361
00:22:01,422 --> 00:22:05,140
you want on the cloud? And it was like at a certain point

362
00:22:06,070 --> 00:22:09,394
they just need to experiment and do it themselves. But Docker seems pretty

363
00:22:09,432 --> 00:22:13,206
fundamental and everywhere I've looked it's almost

364
00:22:13,308 --> 00:22:16,546
standard anymore. And I feel by this point, once you get familiar

365
00:22:16,578 --> 00:22:19,658
with Docker and how it works, you can put a service,

366
00:22:19,744 --> 00:22:23,638
run it through a docker container, you're pretty employable.

367
00:22:23,734 --> 00:22:27,350
I've seen people with fewer skills trying to get go jobs,

368
00:22:27,430 --> 00:22:30,474
so it's a good step out there and

369
00:22:30,512 --> 00:22:33,958
it's definitely a way to get forward. And like I said, there's probably a lot

370
00:22:33,984 --> 00:22:37,246
more we can get into with deploying a service. And that's why this

371
00:22:37,268 --> 00:22:40,554
is an open resources tutorial, right? Anybody can contribute.

372
00:22:40,602 --> 00:22:43,838
They can contribute things that are required, things that are optional, things that are good

373
00:22:43,844 --> 00:22:47,374
to learn, and little tutorials that can help a person really gain,

374
00:22:47,422 --> 00:22:50,578
develop and augment these skills. So if you've liked what

375
00:22:50,584 --> 00:22:53,438
you've seen so far, I encourage you to get involved.

376
00:22:53,614 --> 00:22:57,622
Feel free to reach

377
00:22:57,676 --> 00:23:00,550
out to me, look at the code on GitHub,

378
00:23:01,370 --> 00:23:05,174
really do anything. You can sponsor the

379
00:23:05,212 --> 00:23:08,534
project on GitHub, right? That way anybody who works

380
00:23:08,572 --> 00:23:11,846
on that project will get funded, get a little bit more motivation. They can

381
00:23:11,868 --> 00:23:15,114
work on it with more of their time, right? Go ahead and just take the

382
00:23:15,152 --> 00:23:18,346
course, run through it, no issues that have come up. Feel free to

383
00:23:18,368 --> 00:23:20,634
reach out to me on Twitch. I do a couple of times a week.

384
00:23:20,672 --> 00:23:23,726
I've been trying to get on there and work on this course, really get it

385
00:23:23,748 --> 00:23:27,566
out there. The next big thing will be implementing the

386
00:23:27,588 --> 00:23:31,054
go playground into a site

387
00:23:31,252 --> 00:23:35,486
so that the person can start doing those intro

388
00:23:35,588 --> 00:23:39,186
to code things right there with the text. They don't have

389
00:23:39,208 --> 00:23:42,174
to go to a different site, they don't have to export to the GoPro ground,

390
00:23:42,222 --> 00:23:46,258
they don't have to watch a video. They can just read and interact and

391
00:23:46,424 --> 00:23:50,326
go from there. And that's my talk. Thank you so much for listening to my

392
00:23:50,348 --> 00:23:53,926
ideas of using go as a first time

393
00:23:54,028 --> 00:23:57,846
programming language. I really hope that I might have inspired some of

394
00:23:57,868 --> 00:24:02,230
you to get involved and contribute to open source learning through

395
00:24:02,380 --> 00:24:06,118
courses through meetups. Feel free to

396
00:24:06,124 --> 00:24:09,366
contribute to this course on GitHub. I can use all the help I can

397
00:24:09,388 --> 00:24:13,434
get and to really enable people to start developing

398
00:24:13,482 --> 00:24:17,246
and getting more tools. And I hope to see you guys again soon

399
00:24:17,348 --> 00:24:21,002
at another conference on Twitter, on Twitch or wherever,

400
00:24:21,066 --> 00:24:22,906
and enjoy the rest of the conference.

