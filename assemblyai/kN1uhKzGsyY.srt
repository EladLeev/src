1
00:00:23,370 --> 00:00:27,410
Welcome to this stock on GrPC and Python

2
00:00:27,570 --> 00:00:31,058
where we will show you how to build fast, scalable APIs

3
00:00:31,154 --> 00:00:34,438
for your services. Let's go over some of the things that

4
00:00:34,444 --> 00:00:38,134
we're going to cover in this talk. We're going to talk about the history of

5
00:00:38,172 --> 00:00:42,200
APIs. We're going to talk about what GRPC is,

6
00:00:42,650 --> 00:00:46,230
why you should use it, and what its benefits are.

7
00:00:46,380 --> 00:00:49,994
We're going to talk about some of the disadvantages of GRPC.

8
00:00:50,162 --> 00:00:53,406
We're going to have a quick demo where we show you how to

9
00:00:53,428 --> 00:00:56,586
build a client and server in Python.

10
00:00:56,778 --> 00:01:00,570
We're going to talk about some advanced features like interceptors.

11
00:01:00,730 --> 00:01:04,062
And finally, we're going to show you how you can services front ends

12
00:01:04,126 --> 00:01:07,234
using GrPC web so

13
00:01:07,352 --> 00:01:11,394
let's get started. So what

14
00:01:11,432 --> 00:01:15,310
is an API? An API stands for

15
00:01:15,480 --> 00:01:19,618
application programming interface, which is a set of definitions

16
00:01:19,634 --> 00:01:23,270
and protocols for building and integrating application software.

17
00:01:23,930 --> 00:01:27,470
What does that mean? Well, an API

18
00:01:27,570 --> 00:01:31,798
is just a way for a program to let other programs

19
00:01:31,894 --> 00:01:35,738
communicate with it. So in this example here,

20
00:01:35,904 --> 00:01:39,626
we see program a has its API that

21
00:01:39,648 --> 00:01:43,102
it exposes to allow anything to communicate with it.

22
00:01:43,236 --> 00:01:47,262
And program b, if it wants to communicate with program a,

23
00:01:47,396 --> 00:01:50,298
will do so via the exposed APIs.

24
00:01:50,474 --> 00:01:54,098
So here program b invokes the API on program

25
00:01:54,184 --> 00:01:56,820
a and asks it to do something.

26
00:01:57,270 --> 00:02:01,730
And program a can either respond with an okay or an error.

27
00:02:02,070 --> 00:02:05,990
Now, APIs are the foundations of modern computing.

28
00:02:06,330 --> 00:02:10,294
Almost any major system you see today has

29
00:02:10,332 --> 00:02:13,718
a bunch of different components that talk to each other,

30
00:02:13,884 --> 00:02:18,380
and they all do this via APIs. The modern web

31
00:02:19,070 --> 00:02:22,886
is hugely based on a set of different disparate

32
00:02:22,918 --> 00:02:26,390
services, all talking to each other via APIs.

33
00:02:26,550 --> 00:02:30,166
And this is enabled by a variety of technologies.

34
00:02:30,358 --> 00:02:33,486
So let's take a look at some of the technologies that are used to

35
00:02:33,508 --> 00:02:37,850
build web APIs. Early on we had this technology called SOAP,

36
00:02:37,930 --> 00:02:41,246
or simple object access protocol. Now this is

37
00:02:41,268 --> 00:02:45,154
from the late ninety s and early two thousand s. This is a

38
00:02:45,192 --> 00:02:47,860
fairly complicated and clunky piece of technology.

39
00:02:48,470 --> 00:02:51,810
It used XML as its definition language,

40
00:02:52,390 --> 00:02:56,054
and it required the use of these things called wisdoms that needed

41
00:02:56,092 --> 00:02:58,710
to be shared across the server and client.

42
00:02:59,130 --> 00:03:02,706
It was not great. It was clumsy,

43
00:03:02,818 --> 00:03:06,678
error prone, and as a result of which,

44
00:03:06,844 --> 00:03:10,322
in the late 2000s, we had this new technology come up

45
00:03:10,476 --> 00:03:14,458
that was called Rest or representational state transfer.

46
00:03:14,624 --> 00:03:18,438
Now, rest is a way of modeling your API

47
00:03:18,534 --> 00:03:21,850
as a bunch of resources and enabling

48
00:03:22,010 --> 00:03:25,882
or exposing operations on those resources.

49
00:03:26,026 --> 00:03:29,626
If you've ever used an API, chances are it's

50
00:03:29,658 --> 00:03:33,758
been a rest API. Rest was a huge step up from soap.

51
00:03:33,854 --> 00:03:37,780
It was simpler, it was easy to use, it was easy to understand.

52
00:03:38,390 --> 00:03:42,414
It used JSOn as its communication language,

53
00:03:42,542 --> 00:03:45,746
which is far easier, far simpler,

54
00:03:45,778 --> 00:03:48,802
and far more lightweight than XML. Recently,

55
00:03:48,866 --> 00:03:52,566
however, we've had some new technologies come up.

56
00:03:52,668 --> 00:03:56,690
GraphQL is an API technology that was invented by Facebook.

57
00:03:56,850 --> 00:04:00,586
GraphQL allows you to model your API as a

58
00:04:00,608 --> 00:04:04,854
GRPC that your client can then traverse to ensure

59
00:04:04,902 --> 00:04:08,074
that it accesses the data it needs in a

60
00:04:08,112 --> 00:04:12,566
single, thus avoiding the multiple round trips necessary.

61
00:04:12,758 --> 00:04:16,602
With Rest and scope, you'll find GraphQL used heavily

62
00:04:16,666 --> 00:04:20,362
in mobile and in scenarios where network

63
00:04:20,426 --> 00:04:24,222
bandwidth is a huge concern. Finally, we have these two technologies

64
00:04:24,286 --> 00:04:27,986
here, Apache Thrift and GrPC, which are

65
00:04:28,168 --> 00:04:31,314
fairly similar. Thrift was

66
00:04:31,352 --> 00:04:34,738
built by Facebook, GrPC by Google, but they

67
00:04:34,744 --> 00:04:38,214
were both solving the same problem, which is having

68
00:04:38,252 --> 00:04:41,702
an API technology that was designed to be strongly typed and

69
00:04:41,756 --> 00:04:45,766
high performance. GrPC seems to have won out in

70
00:04:45,788 --> 00:04:49,434
terms of adoption. It is far more widely used than

71
00:04:49,472 --> 00:04:53,466
thrift, and that is why we will be focusing on GRPC for

72
00:04:53,488 --> 00:04:57,770
the rest of this talk. So what is GrPC?

73
00:04:58,270 --> 00:05:02,010
Well, GrPC is a cross platform, open source,

74
00:05:02,090 --> 00:05:05,486
high performance remote procedure call framework, which is

75
00:05:05,508 --> 00:05:09,150
a fancy way of saying GrPC is a way

76
00:05:09,300 --> 00:05:12,800
to invoke procedures on other services

77
00:05:13,570 --> 00:05:16,946
in a very fast and performant way. It uses a

78
00:05:16,968 --> 00:05:20,014
bunch of technologies under the hood in order to ensure

79
00:05:20,062 --> 00:05:24,114
that this is possible, and we will look into those later on

80
00:05:24,152 --> 00:05:28,086
in this talk. The way GRPC works is very simple

81
00:05:28,268 --> 00:05:31,298
and very similar to regular APIs.

82
00:05:31,474 --> 00:05:35,266
The client makes a request to the server

83
00:05:35,378 --> 00:05:39,542
and the server responds. Now let's take a look at some of the advantages

84
00:05:39,606 --> 00:05:43,242
of GrPC. GrPC was built from the ground up

85
00:05:43,296 --> 00:05:46,822
to be high performance. It uses HTTP

86
00:05:46,886 --> 00:05:50,242
two natively, which has several advantages

87
00:05:50,326 --> 00:05:54,366
over HTTP one, HTTP two has

88
00:05:54,468 --> 00:05:57,450
support for binary framing and compression.

89
00:05:57,610 --> 00:06:01,834
This ensures that the messages that are sent over the wire are a lot smaller.

90
00:06:01,962 --> 00:06:07,150
HTTP two also has support for multiple multiplexing

91
00:06:07,310 --> 00:06:10,734
of a bunch of calls over a single TCP

92
00:06:10,782 --> 00:06:14,530
connection. GrPC also has code generation

93
00:06:15,290 --> 00:06:19,346
GrPC when you share a protobuff

94
00:06:19,378 --> 00:06:23,046
file between a client and a server, the client can use

95
00:06:23,068 --> 00:06:26,438
the protobuff to generate a client stub. This means that the

96
00:06:26,444 --> 00:06:30,282
client doesn't really need to re implement the API, it already

97
00:06:30,336 --> 00:06:33,978
has the interface defined and available for it, and you

98
00:06:33,984 --> 00:06:38,090
can just plug it in and start using the API easily.

99
00:06:38,590 --> 00:06:41,870
GrPC is very strongly typed.

100
00:06:42,770 --> 00:06:46,526
Protobuff files allow you to specify not

101
00:06:46,548 --> 00:06:50,506
just the message, but also the type of the message. This leads

102
00:06:50,538 --> 00:06:54,820
to the elimination of a huge class of untyped errors that we've seen

103
00:06:55,910 --> 00:06:58,980
in previous API technologies such as rest.

104
00:07:00,150 --> 00:07:03,374
GrPC also has native support for streaming.

105
00:07:03,502 --> 00:07:07,522
It has unary as well as bi directional duplex

106
00:07:07,586 --> 00:07:11,634
streaming support, which means the client and the server can establish

107
00:07:11,682 --> 00:07:15,510
a connection and basically just pass messages back and forth.

108
00:07:16,890 --> 00:07:19,994
Finally, GrPC is support for deadline or

109
00:07:20,032 --> 00:07:23,242
timeouts, which means the client can let

110
00:07:23,296 --> 00:07:27,146
the server know how long the

111
00:07:27,168 --> 00:07:31,722
server needs to hold the connection open for before

112
00:07:31,776 --> 00:07:35,038
it can close the connection on its own. So let's say as a

113
00:07:35,044 --> 00:07:38,240
client I specified timeout of 1 second.

114
00:07:38,930 --> 00:07:42,506
If the server doesn't respond in a second, the server can close

115
00:07:42,548 --> 00:07:43,570
the connection.

116
00:07:46,550 --> 00:07:50,610
Now let's take a look at some of the disadvantages of GrPC.

117
00:07:51,510 --> 00:07:55,414
Well, GrPC is a newer technology, it still

118
00:07:55,452 --> 00:07:58,706
has some bugs, but the GrPC

119
00:07:58,738 --> 00:08:01,960
team is really good at patching them really quickly.

120
00:08:03,210 --> 00:08:07,030
GrPC doesn't really have native support for browsers.

121
00:08:07,450 --> 00:08:11,018
If I build a front end app, I cannot directly talk

122
00:08:11,104 --> 00:08:15,450
to a GRPC API like I can with a rest API.

123
00:08:15,950 --> 00:08:19,354
There are some new technologies, such as GrPC Web or

124
00:08:19,392 --> 00:08:23,146
GrPC gateway, that do make it possible for browsers

125
00:08:23,178 --> 00:08:25,520
to talk to GrPC APIs. However,

126
00:08:27,010 --> 00:08:30,890
GrPC also requires proto files to be shared

127
00:08:30,970 --> 00:08:34,366
between the client and server, as well as client stubs to

128
00:08:34,388 --> 00:08:37,618
be generated ahead of time. Now this means as a

129
00:08:37,624 --> 00:08:40,894
client, I just cannot go about invoking any GrPC

130
00:08:40,942 --> 00:08:44,130
API that's available out there. I need to have access

131
00:08:44,200 --> 00:08:47,538
to the proto file, I need to generate the client stub,

132
00:08:47,634 --> 00:08:50,630
and only then can I invoke that API.

133
00:08:51,690 --> 00:08:54,920
GrPC is also a little more complicated than rest.

134
00:08:55,770 --> 00:08:59,194
It's not horribly hard to use, but it's definitely

135
00:08:59,312 --> 00:09:03,034
not as easy as rest where I can just fire client up and

136
00:09:03,072 --> 00:09:05,420
call any API that's available to me.

137
00:09:06,430 --> 00:09:10,918
Finally, GrPC is not as widely adopted as rest,

138
00:09:11,104 --> 00:09:14,974
which means if you build a GrPC API, all of

139
00:09:15,012 --> 00:09:18,974
your users might not know how to invoke and call that

140
00:09:19,012 --> 00:09:22,282
API. Well, now that we've

141
00:09:22,346 --> 00:09:25,954
seen these, what are some of the use cases for

142
00:09:25,992 --> 00:09:28,930
GrPC? Well,

143
00:09:29,000 --> 00:09:32,846
GrPC is really good for service to service communication.

144
00:09:33,038 --> 00:09:36,934
It's really good if you have a services architecture where

145
00:09:36,972 --> 00:09:40,294
you have these bunch of different services that are constantly making calls to each

146
00:09:40,332 --> 00:09:44,514
other. GrPC lets you make those calls extremely

147
00:09:44,562 --> 00:09:48,394
efficiently, extremely quickly, and because you already are

148
00:09:48,432 --> 00:09:52,666
able to share the protobuff files, it makes it very rare that

149
00:09:52,688 --> 00:09:55,370
you'll get Malform API requests.

150
00:09:56,190 --> 00:10:00,122
GrPC is also very useful for point of mind real time

151
00:10:00,176 --> 00:10:03,978
communication and high performance, low latency applications.

152
00:10:04,074 --> 00:10:06,986
Anywhere that you need fast speed,

153
00:10:07,098 --> 00:10:11,326
GrPC is usually going to outperform an

154
00:10:11,348 --> 00:10:13,250
equivalent rest API.

155
00:10:15,590 --> 00:10:19,314
Okay, now that we have all of this information available to us,

156
00:10:19,432 --> 00:10:23,102
let's actually take a look at the demo to implement a GrPC

157
00:10:23,166 --> 00:10:25,010
server and client.

158
00:10:27,050 --> 00:10:29,320
Okay, so welcome to the demo.

159
00:10:31,210 --> 00:10:35,442
So on the right you'll see I have a sample

160
00:10:35,506 --> 00:10:38,746
project that I have created for the purposes of

161
00:10:38,768 --> 00:10:42,486
this demo. It uses poetry,

162
00:10:42,598 --> 00:10:46,218
but you could use any boat tool that you want. There's a

163
00:10:46,224 --> 00:10:49,706
few important things to focus on and I'll walk you

164
00:10:49,728 --> 00:10:53,774
through this project. So the first thing to notice is

165
00:10:53,892 --> 00:10:57,710
this folder called protos, within which

166
00:10:57,780 --> 00:11:01,354
I have defined this file called creating Proto,

167
00:11:01,482 --> 00:11:04,450
which is a protobuff file.

168
00:11:05,110 --> 00:11:09,154
And what protobuff is, is it's basically an

169
00:11:09,192 --> 00:11:12,514
interface definition language. And what that means

170
00:11:12,552 --> 00:11:16,486
is it allows me to define my API in

171
00:11:16,508 --> 00:11:20,246
a language agnostic manner. So here you'll see what

172
00:11:20,268 --> 00:11:23,750
I've done is I've defined a service called Greeter,

173
00:11:24,410 --> 00:11:27,190
that exposes a method called greet,

174
00:11:27,710 --> 00:11:31,414
that takes in a greeting request, which is a string

175
00:11:31,462 --> 00:11:35,222
called name, and that returns a greeting response

176
00:11:35,286 --> 00:11:39,146
which is a string called greeting. This is

177
00:11:39,168 --> 00:11:43,594
the entirety of the API for my service. I have one GRPC

178
00:11:43,642 --> 00:11:46,426
service that exposes one method.

179
00:11:46,618 --> 00:11:49,966
And what grpC is using to do under the hood is

180
00:11:49,988 --> 00:11:54,190
it's going to take this protobuff file and it's going to generate

181
00:11:54,350 --> 00:11:57,860
code for me in whatever language I choose.

182
00:11:58,230 --> 00:12:01,566
And I can plug that code into either my server

183
00:12:01,678 --> 00:12:05,366
or my client, and it allows them to

184
00:12:05,388 --> 00:12:09,334
not worry too much about the interface of the API because

185
00:12:09,372 --> 00:12:12,726
they already have that provided to them. Now the way

186
00:12:12,748 --> 00:12:16,422
that's done is through this tool called

187
00:12:16,476 --> 00:12:21,062
Prodoc. Prodoc is a tool that ships with GRPC.

188
00:12:21,206 --> 00:12:25,100
You can use it to compile this protobuff file into

189
00:12:25,950 --> 00:12:29,434
code for a particular language, and I've done that here.

190
00:12:29,552 --> 00:12:33,630
If you look in GRPC types, it's created

191
00:12:34,530 --> 00:12:38,720
these three different files for me. I only care about these two.

192
00:12:39,490 --> 00:12:43,882
This is the actual definition of the protobuff

193
00:12:44,026 --> 00:12:47,426
in Python. We don't really need to care too

194
00:12:47,448 --> 00:12:51,810
much about this file because it's not really meant for human consumption.

195
00:12:52,150 --> 00:12:55,934
And this is the other one, which is the GRPC file,

196
00:12:56,062 --> 00:12:59,894
again, not really meant for human consumption. These are more

197
00:13:00,012 --> 00:13:03,622
sort of like stubs that are meant to be used in the code

198
00:13:03,676 --> 00:13:07,442
we actually write. The way you do this is by

199
00:13:07,516 --> 00:13:11,146
installing a set of libraries, the first of which is

200
00:13:11,168 --> 00:13:15,606
called GrPC IO

201
00:13:15,798 --> 00:13:19,942
tools, and the other

202
00:13:20,016 --> 00:13:27,230
one is Mypi protobuff.

203
00:13:27,810 --> 00:13:30,878
You need to install these two libraries in your project.

204
00:13:30,964 --> 00:13:34,786
I'm not going to do that here just because they take a really long time

205
00:13:34,968 --> 00:13:38,402
to install and I already have them installed. Once that's done,

206
00:13:38,456 --> 00:13:41,140
you can run this protoc command here.

207
00:13:44,150 --> 00:13:47,318
I'm not going to get into the details of protoc, but protoc is basically a

208
00:13:47,324 --> 00:13:50,866
way to tell GrPC to take my protobuff file

209
00:13:51,058 --> 00:13:54,120
that you see here and generate these files for me.

210
00:13:55,530 --> 00:13:59,146
Okay, now that we have our code generated and available

211
00:13:59,248 --> 00:14:03,034
for us, we can go ahead and start looking at the implementation of

212
00:14:03,072 --> 00:14:06,922
our server. Now if

213
00:14:06,976 --> 00:14:10,074
you notice in our protobuff file we

214
00:14:10,112 --> 00:14:13,946
had one method called Greet. And so any server

215
00:14:13,978 --> 00:14:17,518
that we built has to implement this method here and that's exactly

216
00:14:17,604 --> 00:14:21,274
what we're doing. You'll notice I've created this folder

217
00:14:21,322 --> 00:14:24,450
called services just because I like to create a different

218
00:14:24,520 --> 00:14:28,626
file for the implementation of each method, but that

219
00:14:28,728 --> 00:14:32,366
is totally up to you. It's just a conversation, a convention

220
00:14:32,478 --> 00:14:35,826
that I focus on. But within my services

221
00:14:35,858 --> 00:14:39,746
source folder I have this file called Greeter

222
00:14:39,858 --> 00:14:43,126
Py. And what you'll see what I'm doing here

223
00:14:43,148 --> 00:14:46,886
is I'm importing GrPC, but from this actual

224
00:14:46,988 --> 00:14:49,340
compiled files that we have here,

225
00:14:50,670 --> 00:14:54,310
I am importing the request

226
00:14:54,390 --> 00:14:58,614
definition, the response definition and the servicer

227
00:14:58,662 --> 00:15:02,302
definition. And that comes from this

228
00:15:02,356 --> 00:15:05,774
file here as well

229
00:15:05,812 --> 00:15:07,440
as this file here.

230
00:15:09,170 --> 00:15:13,062
Once we have that, I'm going to actually go ahead and implement that greet method.

231
00:15:13,226 --> 00:15:16,386
And you see here I have the definition for

232
00:15:16,408 --> 00:15:19,714
the greet method. It takes in a greeting request and

233
00:15:19,752 --> 00:15:23,202
it returns a greeting response. And the actual

234
00:15:23,256 --> 00:15:27,222
implementation is fairly simple. For this demo I'm just

235
00:15:27,276 --> 00:15:30,882
taking the name off the GrPCG

236
00:15:30,946 --> 00:15:34,534
request and I'm just like appending it

237
00:15:34,652 --> 00:15:38,298
to the string called hello. So whatever I pass in

238
00:15:38,384 --> 00:15:42,346
as the name, I'm just going to get a hello name back as a

239
00:15:42,368 --> 00:15:46,870
response. And this is basically the implementation

240
00:15:47,030 --> 00:15:50,640
of everything that you see here.

241
00:15:51,970 --> 00:15:55,454
Now that we have this implemented over here,

242
00:15:55,652 --> 00:15:59,342
we kind of need some sort of GrPC server to accept and

243
00:15:59,396 --> 00:16:03,026
serve clients and that is done by

244
00:16:03,048 --> 00:16:06,610
this file called server Py, which again super

245
00:16:06,680 --> 00:16:09,970
simple, import GrPC.

246
00:16:10,310 --> 00:16:13,986
There's one important thing to note here, again from the

247
00:16:14,008 --> 00:16:17,878
compile code that we have, we need

248
00:16:17,884 --> 00:16:21,634
to import this file called add greeter services to server.

249
00:16:21,762 --> 00:16:24,440
And you'll notice that that comes from here.

250
00:16:24,970 --> 00:16:28,370
You notice this add greeter services to server.

251
00:16:28,450 --> 00:16:32,106
What this method does is it takes that services that

252
00:16:32,128 --> 00:16:35,942
we've just defined here and it's going to add it to the GrPC

253
00:16:36,006 --> 00:16:40,086
server. And for those of you that come from Django

254
00:16:40,118 --> 00:16:40,700
land,

255
00:16:43,570 --> 00:16:47,390
this is analogous to adding a URL path to your

256
00:16:47,460 --> 00:16:50,846
Django server. So now that

257
00:16:50,868 --> 00:16:54,334
we have that in, we also need to import the actual

258
00:16:54,452 --> 00:16:58,706
implementation of the greeter and

259
00:16:58,728 --> 00:17:01,570
then the server defines a single method called services.

260
00:17:02,390 --> 00:17:05,874
What this does is I'm going to start a

261
00:17:05,912 --> 00:17:09,974
GRPC server in a thread pool and

262
00:17:10,012 --> 00:17:13,522
then I call this method called add greeter services to server

263
00:17:13,586 --> 00:17:17,318
and I supply this method called greater in and what that's going to

264
00:17:17,324 --> 00:17:20,758
do is it's going to take the server that I just created here and it's

265
00:17:20,774 --> 00:17:24,886
going to add this method onto that server so that that server

266
00:17:24,918 --> 00:17:28,582
that I've just created can actually serve clients

267
00:17:28,646 --> 00:17:32,320
requesting the greet method. I'm going to specify the port,

268
00:17:32,850 --> 00:17:36,266
I'm going to start the server and it's

269
00:17:36,298 --> 00:17:38,640
just going to lock and run.

270
00:17:39,490 --> 00:17:42,750
And now because I use poetry I can basically

271
00:17:42,820 --> 00:17:46,014
just define a simple script, a simple command

272
00:17:46,062 --> 00:17:49,410
to run the server. And I am actually going to do

273
00:17:49,480 --> 00:17:52,290
that right now. I am actually going to run the server.

274
00:18:02,970 --> 00:18:04,920
And as you can see here,

275
00:18:07,390 --> 00:18:10,874
my server is running and it started. Now that

276
00:18:10,912 --> 00:18:13,260
we have the server up and running,

277
00:18:14,670 --> 00:18:18,262
let's take a look at defining our GRPC

278
00:18:18,326 --> 00:18:21,520
client. Again, it's fairly simple.

279
00:18:22,610 --> 00:18:25,310
I have this file called client Py.

280
00:18:27,810 --> 00:18:32,442
Again very simple. From the

281
00:18:32,516 --> 00:18:36,226
code definition, from the compile code I'm going to again import

282
00:18:36,408 --> 00:18:40,340
the greeting request from this file and

283
00:18:42,070 --> 00:18:45,380
the greeter stub from this file here.

284
00:18:45,750 --> 00:18:49,254
The greeter stub is basically just a way

285
00:18:49,292 --> 00:18:53,046
to let the client know what methods it can call. You can

286
00:18:53,068 --> 00:18:56,566
see it has this self greet which

287
00:18:56,588 --> 00:18:59,946
is a unary GrPC call. So this lets the client know that it

288
00:18:59,968 --> 00:19:03,850
can call the greet method which is a unary method.

289
00:19:05,710 --> 00:19:09,162
So if I go back into my client py here,

290
00:19:09,296 --> 00:19:13,299
I've imported the greeter sub and the greeting request and

291
00:19:13,799 --> 00:19:16,958
I have a simple run method here which is like what is your name?

292
00:19:17,124 --> 00:19:20,442
And then what I'm doing here is I'm creating

293
00:19:20,506 --> 00:19:24,562
an insecure channel on GrPC on

294
00:19:24,616 --> 00:19:28,034
localhost. 50 00:51 that's the port on

295
00:19:28,072 --> 00:19:32,050
which my server which you could see here is running

296
00:19:32,120 --> 00:19:36,040
on port 50 00:51 once that's done

297
00:19:36,410 --> 00:19:40,418
I am going to create an instance of this greeter stub that I've

298
00:19:40,434 --> 00:19:44,200
just imported. Pass the channel into that.

299
00:19:45,850 --> 00:19:49,018
Once that's done I'm actually going to create a request that I

300
00:19:49,024 --> 00:19:54,650
wish to send over. And my request is basically just

301
00:19:54,720 --> 00:19:58,860
an instance of this

302
00:20:00,290 --> 00:20:03,326
message that I've created here. It takes one input called name. So I'm going to

303
00:20:03,348 --> 00:20:07,214
pass that in which is like what

304
00:20:07,252 --> 00:20:11,658
is your name? And the response

305
00:20:11,834 --> 00:20:15,186
is going to, and then I'm just going to

306
00:20:15,208 --> 00:20:18,578
call the greek method on that stub and I'm just going

307
00:20:18,584 --> 00:20:22,994
to print the response on the screen. Very simple.

308
00:20:23,192 --> 00:20:25,140
Let's call it and see if it works.

309
00:20:26,150 --> 00:20:31,490
So, programming Python

310
00:20:31,850 --> 00:20:35,910
demo and I'm going to do poultry run

311
00:20:36,060 --> 00:20:40,262
and think it's called run

312
00:20:40,316 --> 00:20:44,410
GrPC client. Let's run this method

313
00:20:47,070 --> 00:20:49,980
here. What is your name? I'm going to type my name in.

314
00:20:50,530 --> 00:20:53,886
Boom. It made the call to the server. I got a

315
00:20:53,908 --> 00:20:56,522
response. There we have it, folks.

316
00:20:56,586 --> 00:21:00,960
GrPC is. It's very simple.

317
00:21:01,970 --> 00:21:05,586
This project is available on GitHub if you'd like to take

318
00:21:05,688 --> 00:21:09,460
a further look how this actually works.

319
00:21:10,230 --> 00:21:12,740
But that's it for the demo. Thank you.

320
00:21:15,050 --> 00:21:19,014
Okay, so now let's look at some advanced features that

321
00:21:19,052 --> 00:21:22,582
GrPC provides. We're going to start by looking

322
00:21:22,636 --> 00:21:26,822
at interceptors. So what

323
00:21:26,876 --> 00:21:30,262
are interceptors? So interceptors

324
00:21:30,326 --> 00:21:33,594
are a GrPC concept that allows apps to

325
00:21:33,632 --> 00:21:37,530
interact with incoming or outgoing GrPC calls.

326
00:21:38,110 --> 00:21:42,350
You could think of this as middleware, but for GrPC.

327
00:21:43,570 --> 00:21:47,486
So just like with middleware, interceptors allow you to

328
00:21:47,668 --> 00:21:51,694
intercept the incoming message. They allow you

329
00:21:51,732 --> 00:21:55,118
to verify certain aspects or certain metadata

330
00:21:55,134 --> 00:21:58,562
on the message, and they allow you to either allow the message

331
00:21:58,616 --> 00:22:01,666
through or deny the message. However,

332
00:22:01,768 --> 00:22:05,720
unlike middleware, which you'll find on a lot of restful services,

333
00:22:06,090 --> 00:22:09,954
GRP interceptors can be on both the client

334
00:22:10,082 --> 00:22:13,574
as well as the server. So for

335
00:22:13,612 --> 00:22:17,454
example, you could have a client interceptor that adds

336
00:22:17,522 --> 00:22:20,986
authorization credentials onto every message. And you could

337
00:22:21,008 --> 00:22:24,266
have a server interceptor that checks and validates whether those

338
00:22:24,288 --> 00:22:28,362
credentials are okay. Some common use

339
00:22:28,416 --> 00:22:31,770
cases for interceptors are for logging,

340
00:22:31,850 --> 00:22:33,914
monitoring, authentication,

341
00:22:34,042 --> 00:22:37,246
validation, as well as adding tracing to

342
00:22:37,268 --> 00:22:38,080
your services.

343
00:22:40,610 --> 00:22:44,798
So this is sort of how interceptors

344
00:22:44,894 --> 00:22:48,126
fit into the regular request response cycle.

345
00:22:48,318 --> 00:22:52,082
The client would make a request which would then be picked up

346
00:22:52,136 --> 00:22:56,066
by the client interceptor, which could potentially add some metadata

347
00:22:56,098 --> 00:22:59,542
or modify the request in some way, which then gets sent

348
00:22:59,596 --> 00:23:03,522
over the wire to a server interceptor,

349
00:23:03,586 --> 00:23:08,186
which again can check and validate certain concepts of the

350
00:23:08,208 --> 00:23:11,958
message before passing it to the server interceptor.

351
00:23:12,134 --> 00:23:15,654
So now let's take a look at some kinds of interceptors

352
00:23:15,702 --> 00:23:18,822
that GrPC offers. And GrPC

353
00:23:18,886 --> 00:23:21,630
offers four basic types of interceptor.

354
00:23:22,530 --> 00:23:26,190
You first have the client unary interceptor,

355
00:23:26,770 --> 00:23:29,786
which is an interceptor that lives on the client,

356
00:23:29,978 --> 00:23:33,746
that is used when you're making unary calls to the

357
00:23:33,768 --> 00:23:37,106
server. So this is where you could

358
00:23:37,128 --> 00:23:40,514
add some client side metadata onto the message. For example,

359
00:23:40,632 --> 00:23:45,026
let's say you're making a call from a

360
00:23:45,048 --> 00:23:47,866
device, a GRPC call from a device to a server.

361
00:23:47,918 --> 00:23:51,270
You could add some metadata, such as the device type,

362
00:23:51,340 --> 00:23:54,626
the os installed on the device, et cetera,

363
00:23:54,818 --> 00:23:58,250
along with the contents of the message and then send it over the wire.

364
00:23:59,230 --> 00:24:02,730
You then have a server unary interceptor,

365
00:24:03,150 --> 00:24:06,554
which is an interceptor that lives on the server, and again

366
00:24:06,592 --> 00:24:08,890
that is used for unary messages.

367
00:24:09,790 --> 00:24:13,870
An example of this is this could check whether the message

368
00:24:13,940 --> 00:24:17,486
has authenticated metadata. So whether the message has

369
00:24:17,588 --> 00:24:22,262
some sort of username or password or some sort of token that is valid,

370
00:24:22,426 --> 00:24:26,654
the server interceptor can check for the validity of that authentication

371
00:24:26,702 --> 00:24:30,146
data that you've provided and decide whether to allow the

372
00:24:30,168 --> 00:24:32,770
message to continue or terminate the cycle.

373
00:24:34,230 --> 00:24:37,670
Then we have the client stream interceptor,

374
00:24:38,250 --> 00:24:41,730
which is the version of the client unary interceptor,

375
00:24:41,810 --> 00:24:45,426
but that's used when you have streaming messages between the client

376
00:24:45,458 --> 00:24:49,418
and server. So an example of this would be if, for example,

377
00:24:49,504 --> 00:24:52,762
your client is sending packets of video over

378
00:24:52,816 --> 00:24:56,518
a client stream, the client interceptor

379
00:24:56,694 --> 00:25:00,050
could add the checksum for each packet that's

380
00:25:00,070 --> 00:25:03,994
sent over that stream. And then finally we have this server

381
00:25:04,042 --> 00:25:07,246
stream interceptor, sorry, which is

382
00:25:07,268 --> 00:25:11,530
the version of the server unary interceptor that's used for streaming messages.

383
00:25:11,690 --> 00:25:15,234
Again, this lives on the server. And an

384
00:25:15,272 --> 00:25:18,942
example of this is this could check the value of the checksum

385
00:25:19,006 --> 00:25:22,114
that has been sent by the client and

386
00:25:22,152 --> 00:25:25,534
check that against the actual message and see whether it's valid.

387
00:25:25,582 --> 00:25:29,010
Or if not, it could decide to ask the client to resend

388
00:25:29,090 --> 00:25:32,422
that packet of data. All right,

389
00:25:32,476 --> 00:25:36,214
that's it for interceptors. Now let's take a look about how

390
00:25:36,252 --> 00:25:39,450
we could services front ends using GrPC.

391
00:25:40,990 --> 00:25:44,454
So GrPC was designed to be a machine

392
00:25:44,502 --> 00:25:47,894
to machine protocol, which means browsers

393
00:25:47,942 --> 00:25:50,250
natively do not support GrPC.

394
00:25:51,490 --> 00:25:55,562
In order to get over this limitation, something called GrPC

395
00:25:55,626 --> 00:25:59,994
Web was developed. Now, GrPC web allows

396
00:26:00,042 --> 00:26:04,274
browser apps to call GrPC services using the

397
00:26:04,312 --> 00:26:07,410
GrPC web client and protobuff.

398
00:26:08,230 --> 00:26:12,126
So GrPC web is similar to normal

399
00:26:12,158 --> 00:26:15,990
GrPC. However, it is a slightly different protocol.

400
00:26:17,130 --> 00:26:20,886
It supports HTTP 1.1 as well, making it

401
00:26:20,908 --> 00:26:23,830
compatible with most modern browsers.

402
00:26:24,890 --> 00:26:28,866
Now the way this works is it requires the browser to generate

403
00:26:28,898 --> 00:26:31,926
a GrPC client from a proto file,

404
00:26:32,118 --> 00:26:35,690
similar to what you would do with a regular GrPC client.

405
00:26:36,030 --> 00:26:39,420
That client now lives on the web app,

406
00:26:40,130 --> 00:26:43,930
and the browser based web app will make GRPC calls

407
00:26:44,010 --> 00:26:47,710
through that client. Once this is done,

408
00:26:47,860 --> 00:26:52,266
you need some sort of translation layer that's

409
00:26:52,298 --> 00:26:56,554
present at the server, and this is usually provided

410
00:26:56,682 --> 00:27:00,478
by some sort of proxy such as NY or there are

411
00:27:00,564 --> 00:27:03,840
other things that you could use as well.

412
00:27:04,530 --> 00:27:07,686
The advantage of this is it allows browser APIs to

413
00:27:07,708 --> 00:27:11,254
benefit from the high performance and low network usage of

414
00:27:11,292 --> 00:27:13,990
binary messages that GrPC uses.

415
00:27:15,850 --> 00:27:18,740
All right, I hope you enjoyed this talk. Thank you.

