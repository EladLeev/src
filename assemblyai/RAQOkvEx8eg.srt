1
00:00:26,850 --> 00:00:29,938
Hi guys and welcome to my lecture

2
00:00:30,034 --> 00:00:33,318
why attackers in code packages are getting a pass.

3
00:00:33,484 --> 00:00:37,426
First, let me introduce myself. My name is Sahi.

4
00:00:37,538 --> 00:00:41,090
I am the head of software supply can at checkmarks.

5
00:00:41,250 --> 00:00:44,726
I have many years of experience in cyber. I used to

6
00:00:44,748 --> 00:00:48,434
work in McAfee Symantec, Palo Alto and most recently

7
00:00:48,562 --> 00:00:52,286
in Checkmarx. My specialty is building

8
00:00:52,388 --> 00:00:55,806
advanced malware resource system. So today I want

9
00:00:55,828 --> 00:00:59,342
to talk about Opensource. Everybody is using

10
00:00:59,396 --> 00:01:03,094
open source. It helped developing product faster

11
00:01:03,242 --> 00:01:06,994
and anybody can contributors code to an open source project,

12
00:01:07,192 --> 00:01:10,434
which is a big part why this ecosystem is so

13
00:01:10,472 --> 00:01:14,322
successful. Coming from a cyber background, I ask

14
00:01:14,376 --> 00:01:17,974
myself, do attackers contribute code as

15
00:01:18,012 --> 00:01:21,158
well? Well, the short answer is yes.

16
00:01:21,324 --> 00:01:24,722
Let us see. We have studied this attack surface

17
00:01:24,786 --> 00:01:28,566
for a really long time, all the recent attacks, and we would be happy to

18
00:01:28,588 --> 00:01:32,762
share with you what we have learned about open source, which of course

19
00:01:32,816 --> 00:01:36,506
are part of supply chain. And supply chain attacks are on

20
00:01:36,528 --> 00:01:40,586
the rise. Let's take a could of example so

21
00:01:40,608 --> 00:01:44,526
we will be clear what we are talking about. The first example I

22
00:01:44,548 --> 00:01:46,874
want to give is dependency confusion.

23
00:01:47,002 --> 00:01:50,494
Dependency confusion is an attack technique that was

24
00:01:50,532 --> 00:01:54,854
discovered last year. It was used to hack into a Microsoft

25
00:01:54,922 --> 00:01:58,542
Apple Netflix companies by a hectical hacker.

26
00:01:58,686 --> 00:02:02,354
It's a new type of can open source supply chain and in

27
00:02:02,392 --> 00:02:06,230
many cases this is not a bug, this is a feature. What usually

28
00:02:06,300 --> 00:02:09,414
happens with a dependency confusion is when

29
00:02:09,452 --> 00:02:13,206
a developer is actually using packages. It will use a

30
00:02:13,228 --> 00:02:16,374
combination of internal packages. In this example,

31
00:02:16,492 --> 00:02:20,570
my company utils and can external packages like

32
00:02:20,640 --> 00:02:24,854
react, the artifact server will etc.

33
00:02:24,902 --> 00:02:28,106
The relevant package. But as we can

34
00:02:28,128 --> 00:02:31,706
see, there is no by default a clear indication of private

35
00:02:31,738 --> 00:02:35,006
or public. So what can happen in

36
00:02:35,028 --> 00:02:39,114
this confusion, which is common, is an attacker

37
00:02:39,242 --> 00:02:43,838
can guess, just guess the name of an internal package

38
00:02:44,014 --> 00:02:47,954
and register that on NPM or Python or

39
00:02:47,992 --> 00:02:51,940
other languages. And because

40
00:02:52,470 --> 00:02:56,082
anybody can register a package if he was able

41
00:02:56,136 --> 00:02:59,874
in guessing the internal name and if this is the default configuration,

42
00:03:00,002 --> 00:03:03,446
what will happen, as you can see is he will

43
00:03:03,468 --> 00:03:06,834
be able to get his package inside the developer

44
00:03:06,882 --> 00:03:10,682
workstation. So if both

45
00:03:10,736 --> 00:03:14,470
names are the same, why would the artifact server

46
00:03:14,550 --> 00:03:18,026
choose to take the attacker one? As you can see, a lot

47
00:03:18,048 --> 00:03:21,874
of the time a developer will mention take the latest version

48
00:03:22,022 --> 00:03:25,310
and an attacker can just give himself a very high

49
00:03:25,380 --> 00:03:28,846
version number for this attack to succeed. This is

50
00:03:28,868 --> 00:03:32,538
not can hypothetical attack. We are seeing those kind of attacks

51
00:03:32,634 --> 00:03:36,114
weekly. Just a couple of weeks ago we

52
00:03:36,152 --> 00:03:39,474
were able to track down and remove packages that were

53
00:03:39,512 --> 00:03:43,140
uploaded by an attacker called never summer 68.

54
00:03:43,750 --> 00:03:47,782
When you look at the package, you can first see

55
00:03:47,836 --> 00:03:51,430
by the version number which is not a typical version number.

56
00:03:51,500 --> 00:03:55,414
This is usually some kind of indication. This can be a

57
00:03:55,452 --> 00:03:59,014
dependency confusion. And if you look at the names,

58
00:03:59,062 --> 00:04:02,986
you can actually figure out which organization he was trying

59
00:04:03,008 --> 00:04:06,938
to target. If a developer was using

60
00:04:07,024 --> 00:04:10,766
a part of this information, what was stored inside the

61
00:04:10,788 --> 00:04:14,410
package has code that will automatically steal the ssh

62
00:04:14,490 --> 00:04:18,094
keys of the developer and will send them to an

63
00:04:18,132 --> 00:04:21,850
attacker control website. So this stack is still ongoing

64
00:04:21,930 --> 00:04:25,634
and we really believe in giving back to the community. So we have

65
00:04:25,672 --> 00:04:30,078
released an open source tool called Dusty Lock that helps monitor

66
00:04:30,254 --> 00:04:33,554
this kind of configuration and alert you not to use those

67
00:04:33,592 --> 00:04:37,430
internal packages name. Check it out. Another attack

68
00:04:37,500 --> 00:04:40,694
that we saw a couple of months ago with a

69
00:04:40,732 --> 00:04:44,146
very high impact where two really popular

70
00:04:44,258 --> 00:04:47,774
NPM packages were compromised. Can attacker

71
00:04:47,842 --> 00:04:51,306
actually uploaded the malicious packages which affect tens of

72
00:04:51,328 --> 00:04:54,362
thousands of organizations worldwide? The first

73
00:04:54,416 --> 00:04:58,298
package was UA parser and as you can see

74
00:04:58,464 --> 00:05:01,310
pointed in red. Those are the malicious part.

75
00:05:01,460 --> 00:05:04,794
So he added the first part which actually download

76
00:05:04,842 --> 00:05:08,318
the password stealer and then the second part which actually download a

77
00:05:08,324 --> 00:05:11,210
crypto miner. It was discovered,

78
00:05:11,290 --> 00:05:14,546
they were removed and an official advisory was sent

79
00:05:14,568 --> 00:05:18,494
out by CISA. Two weeks later, the same attacker

80
00:05:18,542 --> 00:05:22,894
did the same thing. This time compromising packages called COA

81
00:05:22,942 --> 00:05:27,030
and RC. And as you can see they are quite popular.

82
00:05:27,450 --> 00:05:31,174
This instance he made a bug making has

83
00:05:31,212 --> 00:05:35,094
attack unsuccessful, while still crippling a lot of build

84
00:05:35,132 --> 00:05:39,290
servers all around the world. We monitor those things constantly

85
00:05:39,710 --> 00:05:43,434
and as we can see those attacks are

86
00:05:43,472 --> 00:05:47,510
not isolated. We were actually able to find a period

87
00:05:47,590 --> 00:05:50,982
attack regarding UA parser and we track

88
00:05:51,056 --> 00:05:54,478
this attacker as UNC 3379

89
00:05:54,564 --> 00:05:57,726
inside the industry. We don't think this will be his

90
00:05:57,748 --> 00:06:01,870
latest attack. And of course those are not just attacks around

91
00:06:02,020 --> 00:06:05,614
NPM, those can happen to in every open source language

92
00:06:05,662 --> 00:06:09,266
out there. So as we say, we were

93
00:06:09,288 --> 00:06:12,514
able to detect these attackers and alert against them

94
00:06:12,632 --> 00:06:16,374
and write about the bugs he created. But this

95
00:06:16,412 --> 00:06:19,846
wasn't enough. Why is that? If we

96
00:06:19,948 --> 00:06:23,542
study the activity of the attacker, what we call

97
00:06:23,596 --> 00:06:27,806
a TTP, we can see that he is constantly

98
00:06:27,938 --> 00:06:31,706
compromising NPM accounts and doing what we

99
00:06:31,728 --> 00:06:35,514
are calling NPM account takeover. If we

100
00:06:35,552 --> 00:06:39,130
look at that, usually an open source contributor will have one

101
00:06:39,200 --> 00:06:43,534
GitHub account where he stores has code and another account

102
00:06:43,652 --> 00:06:47,086
into NPM in this example. But it could be Python or

103
00:06:47,108 --> 00:06:51,066
any other language or maven that store this package.

104
00:06:51,258 --> 00:06:54,606
What the attacker is doing is compromising the NPM

105
00:06:54,638 --> 00:06:58,194
account. Why is that important? To learn about the

106
00:06:58,232 --> 00:07:02,238
habits about the tool significant procedure of an attacker.

107
00:07:02,414 --> 00:07:05,794
So usually what happens is when you store your

108
00:07:05,832 --> 00:07:09,010
code in GitHub, you can then push it into NPM.

109
00:07:09,090 --> 00:07:13,058
When you have the right tag, this is a normal activity

110
00:07:13,154 --> 00:07:16,946
and we have seen it many times. This is for example UA parser,

111
00:07:16,978 --> 00:07:20,938
and you can see a correlation between the tag and between the

112
00:07:21,104 --> 00:07:23,980
package. Until the attack,

113
00:07:24,350 --> 00:07:28,438
the attacker uploaded three new versions into NPM,

114
00:07:28,614 --> 00:07:32,750
but he wasn't able to compromise the GitHub account. So we never saw

115
00:07:32,820 --> 00:07:36,926
their code inside GitHub. This of course can be a

116
00:07:36,948 --> 00:07:40,286
reason to suspect and the

117
00:07:40,308 --> 00:07:44,434
reason they uploaded three different versions. So we make sure that

118
00:07:44,552 --> 00:07:47,858
whatever update policy you are using, you will actually use one

119
00:07:47,864 --> 00:07:51,810
of those versions. So the problem for us

120
00:07:51,880 --> 00:07:55,422
is, even if we were able as a community to detect

121
00:07:55,486 --> 00:07:58,934
and to alert, when you are talking about packages, there are

122
00:07:58,972 --> 00:08:02,134
millions of weekly downloads, the amount of time it

123
00:08:02,172 --> 00:08:05,782
takes us to monitor, alert and download them,

124
00:08:05,916 --> 00:08:09,626
there are still a lot of organization being affected. We wanted

125
00:08:09,728 --> 00:08:13,594
to find an innovative way to stay out of the curve for

126
00:08:13,632 --> 00:08:17,174
that we have released for the community what we call chain

127
00:08:17,222 --> 00:08:20,774
alert can alert is an early warning system

128
00:08:20,912 --> 00:08:24,160
offered free to everyone in the open source community.

129
00:08:24,610 --> 00:08:28,670
Basically what we are doing is we're monitoring new releases,

130
00:08:29,090 --> 00:08:33,322
and whenever we found a new release that has no corresponding

131
00:08:33,386 --> 00:08:36,994
code or activity in GitHub, we alert the

132
00:08:37,032 --> 00:08:40,526
maintainer. Hey, we just saw a new package being released,

133
00:08:40,558 --> 00:08:43,794
but we never saw the code in GitHub. Is that okay or not?

134
00:08:43,912 --> 00:08:48,002
We are not saying those are malicious, but we are alerting

135
00:08:48,066 --> 00:08:50,530
and monitoring for suspicious activity.

136
00:08:50,690 --> 00:08:54,146
So if we found those kind of examples

137
00:08:54,178 --> 00:08:57,906
and the attacker will track again, we have a way

138
00:08:57,948 --> 00:09:02,330
to quickly identify and maybe avoid those suspicious packages.

139
00:09:02,830 --> 00:09:05,994
This is right now what we are doing. We are opening like

140
00:09:06,032 --> 00:09:09,658
an issue to the original packages maintainer and also

141
00:09:09,824 --> 00:09:13,262
for everybody that described to the project and is using

142
00:09:13,316 --> 00:09:17,102
one of those package will get an issue automatically. So we

143
00:09:17,156 --> 00:09:20,254
created this to raise developer awareness and

144
00:09:20,292 --> 00:09:24,206
analyze account takeovers. And again, as I said, it's a free service for

145
00:09:24,228 --> 00:09:27,826
the open source project and the open source community.

146
00:09:28,008 --> 00:09:31,630
Feel free to join us or add some feature requests.

147
00:09:31,710 --> 00:09:35,186
We'll be happy to get your feedback guys. So this is

148
00:09:35,208 --> 00:09:39,014
of course can a lot on GitHub. So why

149
00:09:39,052 --> 00:09:42,486
are these attacks so hard to detect? Most of what

150
00:09:42,508 --> 00:09:45,794
we are doing today is more of a reactive approach,

151
00:09:45,922 --> 00:09:49,126
meaning we wait until somebody else

152
00:09:49,308 --> 00:09:52,714
to flag those attacks and then we react to them.

153
00:09:52,832 --> 00:09:55,846
So we are not doing a proactive approach, we are not hunting,

154
00:09:55,878 --> 00:09:59,430
we are not automatically analyzing everything that's being upload.

155
00:09:59,590 --> 00:10:03,520
The problem with being reactive, waiting for somebody else to report

156
00:10:03,890 --> 00:10:07,242
it could lead to a long meantime for detection.

157
00:10:07,306 --> 00:10:10,910
Meaning we can be under attacks for a really long time until somebody

158
00:10:10,980 --> 00:10:14,414
else will notice and then I'll be able to repair that.

159
00:10:14,612 --> 00:10:17,998
Another thing is most of the interest still relies

160
00:10:18,094 --> 00:10:21,426
on static signatures. This could be

161
00:10:21,448 --> 00:10:25,298
a bit problematic when you're trying to stop an attacker because

162
00:10:25,384 --> 00:10:28,814
Avalon in the cyber industry, static signatures are quite

163
00:10:28,872 --> 00:10:32,486
easily to bypass by an attacker. So let me give

164
00:10:32,508 --> 00:10:36,002
you an example of what I mean. Reactive as proactive.

165
00:10:36,146 --> 00:10:39,978
I'm going to talk about hunting. We've been doing hunting for many years

166
00:10:40,064 --> 00:10:43,850
in cyber. Now how can we hunt in open source?

167
00:10:44,190 --> 00:10:48,330
So our story begins with a really

168
00:10:48,400 --> 00:10:52,090
cool project I really like called Backstabbers knife collection,

169
00:10:52,250 --> 00:10:56,394
which is a couple of people just maintaining a list of malicious

170
00:10:56,442 --> 00:11:00,314
packages that were removed into a central repository where researchers

171
00:11:00,362 --> 00:11:03,666
can actually take a look at them. So we

172
00:11:03,688 --> 00:11:07,074
are always looking for malicious packages. And for this

173
00:11:07,112 --> 00:11:10,334
example we'll start with a malicious packages actually uploaded

174
00:11:10,382 --> 00:11:14,482
into backstabbers. So this packet was

175
00:11:14,536 --> 00:11:17,890
actually flagged maliciously a couple of years ago.

176
00:11:18,040 --> 00:11:21,302
And we can see the basic code code and what it

177
00:11:21,356 --> 00:11:25,350
was doing. But do we think this is a

178
00:11:25,500 --> 00:11:28,790
one time incident or there is an attacker behind

179
00:11:28,860 --> 00:11:32,166
it? And if so, what can we learn about this attacker?

180
00:11:32,358 --> 00:11:35,926
So every time we came across a malicious package, we don't

181
00:11:35,958 --> 00:11:38,714
just remove it or flag it.

182
00:11:38,832 --> 00:11:42,186
We are being proactive. We are hunting for it. What do I

183
00:11:42,208 --> 00:11:46,190
mean? So I'll show you a couple of our methodologies.

184
00:11:46,530 --> 00:11:49,834
So when we are go hunting, we are looking at the metadata.

185
00:11:49,882 --> 00:11:53,542
What do we know about this account, this description, those repository,

186
00:11:53,626 --> 00:11:57,540
this home page, this owner. What do we know about the

187
00:11:58,230 --> 00:12:01,726
IOCs indicator of compromise inside this package,

188
00:12:01,758 --> 00:12:05,082
the URL, the domain, the IP cryptocurrency.

189
00:12:05,246 --> 00:12:08,614
And then we automatically using our system create

190
00:12:08,652 --> 00:12:12,866
a unique import compose and then we start looking for suspicious

191
00:12:12,978 --> 00:12:16,918
packages in other languages also and

192
00:12:17,084 --> 00:12:20,394
looking at those package. Although we started in

193
00:12:20,432 --> 00:12:24,886
Python, based on the unique characteristic

194
00:12:24,918 --> 00:12:29,078
that I've shown you, we were actually able to find live packages

195
00:12:29,254 --> 00:12:32,366
couple of years later after the first package was

196
00:12:32,388 --> 00:12:36,142
removed. So those packages were

197
00:12:36,196 --> 00:12:40,046
actually still active and we reported them onto Python to

198
00:12:40,068 --> 00:12:43,534
NPM, to Ruby and we will have them removed. This is not

199
00:12:43,572 --> 00:12:47,214
something unique. We need to understand this is not a vulnerability,

200
00:12:47,342 --> 00:12:51,230
this is not a bug that we just remove. Those are attackers.

201
00:12:51,390 --> 00:12:54,814
And we need to change our mindset about how do we approach

202
00:12:54,862 --> 00:12:58,598
attackers and how do we track them, how do we hunt them down.

203
00:12:58,764 --> 00:13:03,170
We have done this mind shift in cyber with IR.

204
00:13:03,330 --> 00:13:06,962
We need to embrace this same mind shift in open source enable

205
00:13:07,026 --> 00:13:10,874
to keep our ecosystem clean. So for me

206
00:13:11,072 --> 00:13:14,506
this talk is actually a call for action as a

207
00:13:14,528 --> 00:13:18,218
researcher who want to keep the open source community clean.

208
00:13:18,384 --> 00:13:22,514
We need to have some kind of a central repository of malicious packages.

209
00:13:22,662 --> 00:13:25,770
I really like the backstabbers,

210
00:13:25,930 --> 00:13:29,342
but I think that we need a more commitment from

211
00:13:29,396 --> 00:13:32,874
the major players in the field for a central repository

212
00:13:32,922 --> 00:13:36,878
of malicious packages and their full metadata so

213
00:13:37,044 --> 00:13:40,122
researchers like me and other can hunt for OSS

214
00:13:40,186 --> 00:13:43,886
hackers and keep our ecosystem clean. Thank you

215
00:13:43,908 --> 00:13:47,622
guys. I hope hope you find it interesting and I hope

216
00:13:47,676 --> 00:13:51,686
we shed some light about recent open source attacks and attackers and

217
00:13:51,708 --> 00:13:55,846
the mindset we believe we need in order to

218
00:13:56,028 --> 00:13:59,366
not give them a pass, track them, find them,

219
00:13:59,468 --> 00:14:03,014
and keep the ecosystem clean. Thank you guys and

220
00:14:03,052 --> 00:14:03,620
have a great day.

