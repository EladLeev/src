1
00:00:26,370 --> 00:00:29,922
Okay, so, yeah, welcome everyone. Good morning, good afternoon,

2
00:00:29,986 --> 00:00:32,520
or good evening from wherever you are.

3
00:00:33,370 --> 00:00:37,334
And this talk is going to be about software composition analysis 101,

4
00:00:37,452 --> 00:00:39,910
knowing what's inside your apps.

5
00:00:40,330 --> 00:00:44,134
So just to give you a little bit of overview about

6
00:00:44,172 --> 00:00:48,194
me, as jobing said, I'm an information security specialist.

7
00:00:48,322 --> 00:00:52,538
I've been doing apps back and also devsecops lately

8
00:00:52,634 --> 00:00:56,446
for at least over ten years now

9
00:00:56,548 --> 00:00:59,520
in Upsec and Devsecops, like five years,

10
00:01:00,770 --> 00:01:03,906
I've deployed multiple SaaS dust software

11
00:01:03,928 --> 00:01:07,858
composition analysis solutions, right. Currently I work as a

12
00:01:07,944 --> 00:01:11,330
cloud security research and kind of

13
00:01:11,480 --> 00:01:15,810
integrating my application security skills with cloud technologies

14
00:01:15,890 --> 00:01:19,686
such as different cloud services, kubernetes, Docker and

15
00:01:19,708 --> 00:01:22,982
all that stuff. I also have a blog where

16
00:01:23,036 --> 00:01:26,982
I try to share my articles at least once

17
00:01:27,036 --> 00:01:30,774
a month and also there is all my contact information

18
00:01:30,972 --> 00:01:34,810
and my previous talks. So videos or slides,

19
00:01:35,630 --> 00:01:39,382
talks that I've given since 2011,

20
00:01:39,526 --> 00:01:42,974
it's all there. So the agenda for

21
00:01:43,012 --> 00:01:46,126
this talk, right, we don't have a lot of time. We have a little

22
00:01:46,148 --> 00:01:50,266
bit, 30 minutes, right. So we'll try to cover what's

23
00:01:50,298 --> 00:01:54,254
an SCA, what's a bomb, like a buff materials,

24
00:01:54,302 --> 00:01:56,210
right? And what's an ass bomb.

25
00:01:57,670 --> 00:02:01,406
Before we dive deep into what is software composition

26
00:02:01,438 --> 00:02:04,866
analysis and how it works, I'll show you some

27
00:02:04,888 --> 00:02:08,194
numbers, right. Why should you, as a developer,

28
00:02:08,242 --> 00:02:12,054
right, as this event is targeted for developers, why should you worry about

29
00:02:12,092 --> 00:02:15,622
that? Right. Why should be your problem and should be your

30
00:02:15,676 --> 00:02:19,366
concern as well. And then we're going to talk about supply chain attacks.

31
00:02:19,398 --> 00:02:23,498
And one of the main reasons that they happen is because of

32
00:02:23,584 --> 00:02:27,834
open sources, libraries and dependencies that

33
00:02:27,952 --> 00:02:31,642
can be compromised. And then we talk about best practices

34
00:02:31,706 --> 00:02:35,134
and some software composition analysis tools. If we have

35
00:02:35,172 --> 00:02:39,102
time. I'll do a quick demo here. So, yeah,

36
00:02:39,236 --> 00:02:43,326
what is SCA, right. So if

37
00:02:43,348 --> 00:02:46,980
you work in apps, you probably have heard about SCA by now,

38
00:02:47,670 --> 00:02:51,842
but it's kind of a new term. At least when I joined UpseC over ten

39
00:02:51,896 --> 00:02:55,374
years ago, people didn't talk about software composition analysis,

40
00:02:55,422 --> 00:02:58,982
right? So we talk about has and dust and that was it,

41
00:02:59,036 --> 00:03:02,086
right? And I think over,

42
00:03:02,268 --> 00:03:06,118
I don't know, five years ago a little bit more that we started

43
00:03:06,204 --> 00:03:09,366
talking more about it. But it's not a new thing, it's not a new term.

44
00:03:09,398 --> 00:03:12,858
It's been around for a while with different names around like

45
00:03:12,944 --> 00:03:16,726
library analysis, open source security, third party dependency.

46
00:03:16,838 --> 00:03:20,314
Right? So there's different names, but now kind of these term,

47
00:03:20,362 --> 00:03:24,266
I think was coined by Gartner is software composition analysis,

48
00:03:24,298 --> 00:03:27,406
right. To analyze what components are part of

49
00:03:27,428 --> 00:03:32,846
your software, your application and checking if

50
00:03:32,868 --> 00:03:36,546
they have any public known vulnerabilities, if they are outdated, if there

51
00:03:36,568 --> 00:03:39,982
is any risks for these business, even legal risks

52
00:03:40,046 --> 00:03:43,886
regarding license purposes, right? So SCA is aimed

53
00:03:43,918 --> 00:03:46,510
at providing the open source software with governance,

54
00:03:46,590 --> 00:03:50,374
security and, and what does that mean?

55
00:03:50,412 --> 00:03:53,862
Provenance, right. You need to understand whats sometimes you're using

56
00:03:53,916 --> 00:03:57,382
libraries and code on your applications from people

57
00:03:57,436 --> 00:04:00,794
that you don't even know that they can be on the other

58
00:04:00,832 --> 00:04:04,742
side of the globe and sometimes they might not be trustworthy,

59
00:04:04,806 --> 00:04:09,062
right. You might not be able to trust them and inject

60
00:04:09,206 --> 00:04:12,654
or import that code into your application,

61
00:04:12,772 --> 00:04:15,440
especially on enterprise applications, right.

62
00:04:15,810 --> 00:04:19,738
So one of the things that software composition analysis

63
00:04:19,914 --> 00:04:23,690
tries to address is understanding

64
00:04:23,770 --> 00:04:27,074
the software bill of materials, right. And we're going to talk

65
00:04:27,112 --> 00:04:32,194
about whats in the next few slides. So what

66
00:04:32,232 --> 00:04:37,014
does it mean? What do you need to

67
00:04:37,052 --> 00:04:40,982
perform a software composition analysis, right. So mainly these things

68
00:04:41,036 --> 00:04:44,726
that you need to do and that's kind of given across the

69
00:04:44,748 --> 00:04:48,726
board on major SCA tools. You need an

70
00:04:48,748 --> 00:04:52,474
application manifest, right. Giving trucks on how the software should work.

71
00:04:52,592 --> 00:04:56,426
You need a dependence metadata which shows what are the

72
00:04:56,448 --> 00:05:00,214
dependencies that you have in your software and the versions of those dependencies,

73
00:05:00,262 --> 00:05:04,254
right. And the last thing that you also need is

74
00:05:04,292 --> 00:05:07,674
the vulnerability data source, how you're going to compare.

75
00:05:07,802 --> 00:05:11,898
If the library that you have in your code is outdated or vulnerable,

76
00:05:11,994 --> 00:05:15,794
you need to compare with something, right? And so that is the vulnerability data

77
00:05:15,832 --> 00:05:18,882
source, which is a database of vulnerability information.

78
00:05:19,016 --> 00:05:22,530
It can be private or public, right? The most common public

79
00:05:22,600 --> 00:05:25,934
one is NVD or the national vulnerability Database.

80
00:05:26,062 --> 00:05:29,846
But we're going to see that usually that's not enough. So yeah,

81
00:05:29,868 --> 00:05:33,478
I talked about software bill of materials, right. But let's back up a

82
00:05:33,484 --> 00:05:36,914
little bit. What is the bill of materials? Right. If you've

83
00:05:36,962 --> 00:05:41,210
done any kind of research

84
00:05:41,280 --> 00:05:45,306
on engineering or product design, you know that

85
00:05:45,328 --> 00:05:50,566
a bill of materials is a list of materials that creates

86
00:05:50,598 --> 00:05:54,218
a product, right? So let's say

87
00:05:54,384 --> 00:05:57,366
if I have my chair,

88
00:05:57,478 --> 00:06:01,438
right, whats do I need to make that chair? Like, okay, I need

89
00:06:01,524 --> 00:06:05,986
my wood, I need my kind of these

90
00:06:06,008 --> 00:06:09,554
seat, right? So I need foam, I need some

91
00:06:09,592 --> 00:06:12,866
kind of thing to cover the foam and stuff

92
00:06:12,888 --> 00:06:17,074
like that, right? So you know what you need, you know the quantities and

93
00:06:17,112 --> 00:06:21,334
how much they cost usually. So that you know whats is the

94
00:06:21,372 --> 00:06:25,654
price of making that chair so that you can add to that

95
00:06:25,772 --> 00:06:28,534
for like, okay, what is the price that I'm going to sell it, right.

96
00:06:28,572 --> 00:06:31,898
So it's kind of like that. So this is an example of a

97
00:06:31,904 --> 00:06:35,706
bill of materials and with software, we have the same thing, so we

98
00:06:35,728 --> 00:06:39,290
call them has bombs or software bill of materials.

99
00:06:39,630 --> 00:06:43,370
And with s bombs they are not very different from

100
00:06:43,440 --> 00:06:47,470
bill of materials in real life. They're a list of components

101
00:06:48,290 --> 00:06:51,150
in a piece of software, right. It's usually okay.

102
00:06:51,220 --> 00:06:55,682
Mostly the dependence is the libraries that I

103
00:06:55,736 --> 00:07:00,062
import or I use in my code, right. So nowadays nobody

104
00:07:00,126 --> 00:07:03,902
code from scratch. You usually have frameworks and libraries

105
00:07:03,966 --> 00:07:07,354
that are made of open source and sometimes commercial

106
00:07:07,422 --> 00:07:11,378
components, right. So SBom is very similar to the components

107
00:07:11,394 --> 00:07:15,302
in a product, right. So when you buy a processed product

108
00:07:15,356 --> 00:07:18,986
on your supermarket, you're going to have the ingredients. So it's kind of

109
00:07:19,008 --> 00:07:21,740
the list of ingredients in a packaged food, right.

110
00:07:22,590 --> 00:07:26,134
So that's the main thing that software composition

111
00:07:26,182 --> 00:07:30,640
analysis tries to analyze and understand and make sure whats

112
00:07:31,010 --> 00:07:35,034
those components are up to date are not vulnerable

113
00:07:35,162 --> 00:07:39,166
and are according to the licensing that you need and you want

114
00:07:39,348 --> 00:07:43,354
on your software. So there are some major resources,

115
00:07:43,402 --> 00:07:46,778
these for SBom. There are some standards as well,

116
00:07:46,964 --> 00:07:50,098
with everything. There's different standards right now,

117
00:07:50,184 --> 00:07:53,506
but I think they are kind of the most common ones that

118
00:07:53,528 --> 00:07:57,126
I tried to show you here. One of the

119
00:07:57,148 --> 00:08:00,914
most famous ones is Cyclone DX, which is a lightweight software

120
00:08:00,962 --> 00:08:04,754
built material standard and it just became a flagship,

121
00:08:04,802 --> 00:08:07,702
a WaSp flagship product last month. Right.

122
00:08:07,756 --> 00:08:11,578
So that's very interesting and I think it's going to be very helpful for

123
00:08:11,664 --> 00:08:15,210
OWASP and the developers who use the OASP resources.

124
00:08:15,550 --> 00:08:19,274
There is another standard called SPDX which is an

125
00:08:19,312 --> 00:08:22,698
open standard for communicating software buff material information and

126
00:08:22,704 --> 00:08:26,730
it belongs to the Linux foundation. Right. So that's

127
00:08:26,810 --> 00:08:30,734
another common standard that's being used as well. And we

128
00:08:30,772 --> 00:08:34,462
have dependency track. So you probably have heard about OAS

129
00:08:34,526 --> 00:08:38,174
Dependency Check, which is a famous OAS project for checking

130
00:08:38,222 --> 00:08:42,114
vulnerabilities in your libraries. But dependency track, it might

131
00:08:42,152 --> 00:08:46,050
not be as famous as dependency check. Right. So dependency track

132
00:08:46,120 --> 00:08:49,506
allows organizations to identify and reduce the risk of these software

133
00:08:49,538 --> 00:08:52,982
in the supply chain. So it helps you track your

134
00:08:53,036 --> 00:08:57,110
s bomb and track any kind of dependencies on your software.

135
00:08:57,470 --> 00:09:00,442
Okay, so why you're telling me this, right?

136
00:09:00,496 --> 00:09:04,970
Why me as a developer, if I'm talking in a developer

137
00:09:05,550 --> 00:09:08,762
event, why you should worry about it, right.

138
00:09:08,896 --> 00:09:11,520
So here I brought some numbers for you.

139
00:09:12,050 --> 00:09:15,310
84% of the code bases had at least

140
00:09:15,380 --> 00:09:19,454
one vulnerability with an average of 158

141
00:09:19,492 --> 00:09:22,926
per code base according to the open source risk

142
00:09:22,958 --> 00:09:26,242
analysis report done by synopsis, I think last year.

143
00:09:26,296 --> 00:09:30,594
Yeah, last year. And another thing before

144
00:09:30,792 --> 00:09:35,506
they compared in 2016, can average of 84

145
00:09:35,608 --> 00:09:39,158
open source components per application was found

146
00:09:39,324 --> 00:09:43,174
on the software that they tested. Right, and nowadays, like last

147
00:09:43,212 --> 00:09:47,062
year, 2020, there is an average of 528

148
00:09:47,116 --> 00:09:51,242
open source components, right? So it's a huge increase and

149
00:09:51,296 --> 00:09:55,046
it's very hard for you to track and validate and analyze

150
00:09:55,078 --> 00:09:58,634
all those things manually. Right? So you need a solution, you need

151
00:09:58,672 --> 00:10:02,446
something to automate that for you and at least try to

152
00:10:02,468 --> 00:10:06,320
cover outdated and vulnerable libraries in your code.

153
00:10:06,770 --> 00:10:10,174
There is also a great study, and I think was presented by

154
00:10:10,372 --> 00:10:14,378
earlier in this event from snake

155
00:10:14,474 --> 00:10:18,066
talking about the state of open source security report, which is really good, and I

156
00:10:18,088 --> 00:10:21,646
recommend you taking a look and it shows the number of new packaged

157
00:10:21,678 --> 00:10:25,250
biochem per year. You can see right away

158
00:10:25,320 --> 00:10:28,930
here that of course Javascript or NPM packages

159
00:10:29,090 --> 00:10:32,582
are very high compared to the other ones,

160
00:10:32,636 --> 00:10:36,278
but there's been an increase on packages and libraries and

161
00:10:36,284 --> 00:10:39,834
it's hard to keep track of those, right. And you don't know the

162
00:10:39,872 --> 00:10:43,386
provenance. So that's the problem here, because anyone can submit a

163
00:10:43,408 --> 00:10:46,778
new package. So just like kind of like the

164
00:10:46,864 --> 00:10:50,730
App Store or the Google Play, you can submit

165
00:10:52,110 --> 00:10:55,614
a new application here, you can submit a package as well.

166
00:10:55,652 --> 00:10:59,246
And people will start using if they like it, right? And they will start

167
00:10:59,268 --> 00:11:02,318
importing their project, right? So if they don't know you,

168
00:11:02,484 --> 00:11:06,082
if you want to do something malicious with that

169
00:11:06,136 --> 00:11:11,054
package, once it starts propagating to many different applications,

170
00:11:11,182 --> 00:11:15,106
that's possible to happen. Right? So that's why you need to keep track of those.

171
00:11:15,288 --> 00:11:18,694
Okay, so I don't know if you heard about this and just

172
00:11:18,732 --> 00:11:22,694
one more data for you to understand and probably try to

173
00:11:22,892 --> 00:11:25,974
just kind of worry a little bit more

174
00:11:26,012 --> 00:11:29,782
about this problem, right. This was presented

175
00:11:29,846 --> 00:11:33,670
by Mark Curfe, which is one of the founders of OASP,

176
00:11:33,750 --> 00:11:37,242
and he's also the creators of a

177
00:11:37,296 --> 00:11:40,482
company called Sourceclear, which is now port of Veracode.

178
00:11:40,566 --> 00:11:44,286
And he presented this code cocktail, right? So there

179
00:11:44,308 --> 00:11:48,510
is many studies around that kind of the open source

180
00:11:49,090 --> 00:11:52,942
security space on how much is open

181
00:11:52,996 --> 00:11:56,274
source part of my code, right? And so there are some

182
00:11:56,312 --> 00:12:00,034
studies showing that between 70 and 90% of

183
00:12:00,072 --> 00:12:03,394
your code are made of open source, starting from

184
00:12:03,432 --> 00:12:07,166
libraries, frameworks and everything. So kind of like ten

185
00:12:07,208 --> 00:12:11,046
to 30% is your custom code, whats your developers make.

186
00:12:11,228 --> 00:12:15,058
So you can see right away that the attack surface

187
00:12:15,234 --> 00:12:19,158
of your application, it's much higher

188
00:12:19,324 --> 00:12:23,354
on the open source and on the third party code than on

189
00:12:23,392 --> 00:12:26,714
your custom code. So that's one more reason that

190
00:12:26,832 --> 00:12:30,226
although yeah, you should worry about SAS and Dast,

191
00:12:30,358 --> 00:12:34,494
but software composition analysis can

192
00:12:34,532 --> 00:12:38,622
be really important sometimes and can coverage maybe

193
00:12:38,676 --> 00:12:42,158
a larger attack surface depending on your software, on your application,

194
00:12:42,244 --> 00:12:45,466
your code base. So that's

195
00:12:45,498 --> 00:12:48,674
why I presented these numbers for you to be aware of that.

196
00:12:48,792 --> 00:12:52,894
And there is another issue, and I think was mentioned earlier in this conference

197
00:12:52,942 --> 00:12:56,122
as well, right? You have the direct dependencies,

198
00:12:56,286 --> 00:12:59,510
which is the libraries and the dependencies that you import,

199
00:12:59,580 --> 00:13:02,834
right, in your code, but there are some indirect

200
00:13:02,882 --> 00:13:06,358
or transient dependencies and that's even a

201
00:13:06,364 --> 00:13:09,978
bigger problem, right? So I have a library whats imports another

202
00:13:10,064 --> 00:13:13,946
library from a third party code. And that library that was imported is the

203
00:13:13,968 --> 00:13:16,780
one that's vulnerable or is outdated, right?

204
00:13:20,850 --> 00:13:24,238
I can't update whats library until

205
00:13:24,404 --> 00:13:28,414
my library that I imported directly gets updated and

206
00:13:28,452 --> 00:13:31,982
calls the new version of that library. So that creates a major

207
00:13:32,036 --> 00:13:35,986
problem here as well. And that's what I think is

208
00:13:36,008 --> 00:13:39,454
these biggest risk in kind of the software composition analysis

209
00:13:39,502 --> 00:13:43,794
space. And what

210
00:13:43,832 --> 00:13:47,918
more important than to worry about web application vulnerabilities

211
00:13:48,094 --> 00:13:51,622
than to looking at the wasp top ten, right? We're probably

212
00:13:51,676 --> 00:13:55,126
going to have a new versions of the top ten this year, but still the

213
00:13:55,148 --> 00:13:59,340
latest version of the top ten and the previous one, they all talked about

214
00:14:00,030 --> 00:14:02,938
using components with non vulnerabilities, right?

215
00:14:03,024 --> 00:14:06,726
So this is a major thing. Whats software compositional analysis

216
00:14:06,758 --> 00:14:10,166
tries to address is avoiding using those components with non

217
00:14:10,198 --> 00:14:13,434
vulnerabilities. If you all remember these Xfax

218
00:14:13,482 --> 00:14:17,566
hack in 2017, it was because a library was

219
00:14:17,588 --> 00:14:21,486
vulnerable. The Apache threats two library has vulnerable and

220
00:14:21,508 --> 00:14:24,386
it got hacked through that library, right?

221
00:14:24,488 --> 00:14:28,206
So it's very important issue and you need to be aware

222
00:14:28,238 --> 00:14:31,970
of here is just to show you

223
00:14:32,040 --> 00:14:35,790
that there is some similarities and of

224
00:14:35,800 --> 00:14:39,682
course some differences between the software supply chain and the traditional

225
00:14:39,746 --> 00:14:43,750
supply chain, right? And that's the reason

226
00:14:43,820 --> 00:14:47,790
why not just your libraries and your dependencies, but your whole pipeline,

227
00:14:47,890 --> 00:14:50,998
you need to be aware of and protect it properly.

228
00:14:51,094 --> 00:14:54,646
So you have your open sources repositories,

229
00:14:54,838 --> 00:14:58,634
your source code repositories, sorry, your build systems, right?

230
00:14:58,672 --> 00:15:03,066
Your application repository like for your binaries and where you deploy

231
00:15:03,258 --> 00:15:06,734
your applications as well. And all that can

232
00:15:06,772 --> 00:15:11,386
be entry points for attacks and for compromises,

233
00:15:11,498 --> 00:15:15,198
right? We all seen the recent SolarWinds attack,

234
00:15:15,284 --> 00:15:19,358
right? So it was attacking in these build system of the SolarWinds

235
00:15:19,374 --> 00:15:23,026
of the SolarWinds application. So that's also

236
00:15:23,208 --> 00:15:25,960
an issue that you need to be aware of as well.

237
00:15:27,050 --> 00:15:30,374
Here I have a catalog that

238
00:15:30,412 --> 00:15:33,798
we've done through the CNCF, as it was mentioned

239
00:15:33,884 --> 00:15:37,650
in the beginning, I'm part of the CNCF security tag team,

240
00:15:37,740 --> 00:15:41,340
which means technical advisory group. So we provide

241
00:15:41,710 --> 00:15:45,450
volunteer services as well, just like for OASP,

242
00:15:46,430 --> 00:15:50,086
but we focus on cloud native applications. So like

243
00:15:50,128 --> 00:15:53,326
Kubernetes, whats CD and helm and all

244
00:15:53,348 --> 00:15:56,314
that, OPA as well. So all those applications,

245
00:15:56,442 --> 00:16:00,346
we try to provide them with guidance and documentation

246
00:16:00,458 --> 00:16:04,350
and also doing some security audit for those applications.

247
00:16:04,510 --> 00:16:07,906
And in this kind of group we have

248
00:16:08,008 --> 00:16:11,182
done some catalog of supply chain compromises.

249
00:16:11,326 --> 00:16:14,974
So in this GitHub repo from the CNCF, we have a

250
00:16:15,032 --> 00:16:18,354
list of all the major supply chain compromises

251
00:16:18,482 --> 00:16:22,034
that affected either the source code or developer

252
00:16:22,082 --> 00:16:25,814
tools or publishing infrastructure in the past

253
00:16:26,012 --> 00:16:29,594
like ten years, right? So we have a lot of them there listed and

254
00:16:29,712 --> 00:16:33,466
I updated this list recently. So I think it's pretty much up to

255
00:16:33,488 --> 00:16:37,466
date with kind of just a

256
00:16:37,488 --> 00:16:41,854
few recent events. But it's very important for you to understand that

257
00:16:41,892 --> 00:16:45,680
this is a major thing. Your developer and your

258
00:16:46,050 --> 00:16:49,742
infrastructure, your pipeline can be a target of those

259
00:16:49,796 --> 00:16:53,934
attacks. There is also the software supply chain white paper

260
00:16:54,052 --> 00:16:56,978
which we wrote recently and published this year.

261
00:16:57,144 --> 00:17:00,734
It talks about not just securing the source code and your libraries,

262
00:17:00,782 --> 00:17:04,478
but also the build pipelines, your artifacts and your deployments.

263
00:17:04,574 --> 00:17:07,586
So it's very interesting for you to take a look and it's

264
00:17:07,618 --> 00:17:11,190
available for free on the CNCF GitHub repository.

265
00:17:11,610 --> 00:17:15,586
One last thing, whats I like to mention here is our supply

266
00:17:15,618 --> 00:17:18,482
chain attacks are migrating to the cloud, right?

267
00:17:18,556 --> 00:17:21,818
Since almost every company are migrating to

268
00:17:21,824 --> 00:17:25,322
the cloud and even now during the pandemic, everyone's starting using

269
00:17:25,376 --> 00:17:29,178
the cloud more often, either SaaS services or infrastructure as

270
00:17:29,184 --> 00:17:33,722
a service, right? We need to be aware of that. So recently

271
00:17:33,786 --> 00:17:37,626
our team at Trend Micro did a research on the supply

272
00:17:37,658 --> 00:17:40,560
chain attacks in the age of cloud computing, right?

273
00:17:41,010 --> 00:17:44,386
So here you have an example of on the

274
00:17:44,408 --> 00:17:48,498
top there, the developer using the IDE in

275
00:17:48,504 --> 00:17:52,020
their own device, in their own house or their own

276
00:17:52,710 --> 00:17:56,254
company office, right? Yeah. These install the required

277
00:17:56,302 --> 00:17:59,790
program, they set up the environment, they interact via these ide.

278
00:17:59,960 --> 00:18:03,682
But there's many organizations where the developers

279
00:18:03,826 --> 00:18:07,286
don't run their ide in their local devices, right?

280
00:18:07,308 --> 00:18:10,742
So it's kind of the evolution

281
00:18:10,806 --> 00:18:14,746
approach of the VDI, right, the virtual desktop. So you have

282
00:18:14,928 --> 00:18:16,700
AWS, cloud nine,

283
00:18:18,270 --> 00:18:21,386
I think now there is one for GitHub as well

284
00:18:21,568 --> 00:18:25,642
and Azure has one. So you have their online ides,

285
00:18:25,706 --> 00:18:28,926
right? So these are some risks on using those as well. And you

286
00:18:28,948 --> 00:18:32,678
need to be aware of that because you're communicating and you're hosting

287
00:18:32,714 --> 00:18:35,986
your code in a separate location and there can

288
00:18:36,008 --> 00:18:39,842
be other flaws where attackers can compromise that

289
00:18:39,896 --> 00:18:42,740
system and get access to your sources code.

290
00:18:43,670 --> 00:18:47,074
One last thing that you need to be aware of,

291
00:18:47,112 --> 00:18:50,982
and I think it's very important for supply chain attacks is the

292
00:18:51,036 --> 00:18:54,406
US executive order, right. I know it's just happening in

293
00:18:54,428 --> 00:18:58,650
the US, but it might affect other organizations that either have

294
00:18:58,720 --> 00:19:02,026
customers in these US or supply software to the US.

295
00:19:02,128 --> 00:19:05,514
Right? So it was published in May twelveth this

296
00:19:05,552 --> 00:19:09,754
year. And one of the sections it

297
00:19:09,792 --> 00:19:13,034
talks a lot about enhancing the software supply

298
00:19:13,082 --> 00:19:16,430
chain security. So it talks about maintaining

299
00:19:16,930 --> 00:19:20,426
accurate and update provenance of software code and components,

300
00:19:20,458 --> 00:19:23,986
right. So it's basically talking about software composition, analysis and

301
00:19:24,008 --> 00:19:27,506
software supply chain security to understand that. So if

302
00:19:27,528 --> 00:19:31,506
you're an organization that sells software or

303
00:19:31,608 --> 00:19:34,978
intends to sell software to us government, you need

304
00:19:34,984 --> 00:19:38,386
to be aware of that executive order. You need to focus on supply

305
00:19:38,418 --> 00:19:41,400
chain as well. Okay,

306
00:19:41,850 --> 00:19:46,326
so there are many different tools and I mentioned some of them here already.

307
00:19:46,508 --> 00:19:49,238
The has dependency check which is a free one.

308
00:19:49,324 --> 00:19:53,530
It focus on NVD. It's mostly for Java and

309
00:19:53,600 --> 00:19:56,982
net. If I'm not mistaken you have the retired js

310
00:19:57,046 --> 00:20:00,410
for Javascript code and dependencies.

311
00:20:01,230 --> 00:20:05,114
There is Nic which is free from open source and it's the sponsor

312
00:20:05,162 --> 00:20:08,494
of this event. Right. And there's also many

313
00:20:08,532 --> 00:20:12,240
different ones, commercial ones, one that we have

314
00:20:12,610 --> 00:20:15,410
fraternity and Michael we call open source security,

315
00:20:15,560 --> 00:20:19,140
which is basically a partnership with sneak to provide

316
00:20:19,830 --> 00:20:21,940
their features in our platform.

317
00:20:22,790 --> 00:20:25,300
Let's see how we're doing on time.

318
00:20:28,550 --> 00:20:32,294
Are we good on time? Let me see. Okay, I think

319
00:20:32,332 --> 00:20:36,470
we can do some demos, right? Let me try to share my screen quickly

320
00:20:36,540 --> 00:20:40,026
here. Okay, so basically what

321
00:20:40,048 --> 00:20:44,026
I'm going to do here is show you a

322
00:20:44,048 --> 00:20:48,378
quick demo of sneak inside the

323
00:20:48,544 --> 00:20:52,400
trend micro cloud one platform. It's basically the same

324
00:20:52,770 --> 00:20:56,446
UI that you're going to see if you

325
00:20:56,468 --> 00:20:59,920
want to use Nic as a platform for you to analyze your.

326
00:21:02,210 --> 00:21:05,474
Yeah, and it's free for open source, right? Nick is free for open

327
00:21:05,512 --> 00:21:09,506
source. You can add your projects directly from GitHub. So basically when

328
00:21:09,528 --> 00:21:12,738
you log in, what you need to worry about

329
00:21:12,824 --> 00:21:16,214
is configuring your integrations, right. How sneak is going

330
00:21:16,252 --> 00:21:19,778
to look at your code and check your code repositories

331
00:21:19,954 --> 00:21:23,254
to understand and to collect that

332
00:21:23,292 --> 00:21:25,350
data to analyze the libraries.

333
00:21:26,490 --> 00:21:29,894
So let me just close this, I'll do just a quick

334
00:21:29,932 --> 00:21:32,280
demo before we move on.

335
00:21:35,470 --> 00:21:39,580
So I'm going to add a project from GitHub and I have here all my

336
00:21:39,950 --> 00:21:43,406
public repositories from GitHub and I know

337
00:21:43,428 --> 00:21:46,750
I have a lot of repositories but it's mostly forks.

338
00:21:47,250 --> 00:21:50,666
But yeah, I have here the OASP juice shop, right? If you're

339
00:21:50,698 --> 00:21:54,274
familiar with OASP Juice shop, it's a platform for you

340
00:21:54,312 --> 00:21:58,302
to learn about web application security has different vulnerabilities

341
00:21:58,366 --> 00:22:02,546
and it's very user friendly for you to learn.

342
00:22:02,728 --> 00:22:06,674
And it's developed in I think code and angular.

343
00:22:06,802 --> 00:22:10,726
Right. So basically I select a project from my GitHub or

344
00:22:10,748 --> 00:22:16,134
from any other repository, I can change

345
00:22:16,172 --> 00:22:20,230
some settings here, pointing these, the dependency

346
00:22:20,890 --> 00:22:24,786
is the files for checking the libraries and these versions,

347
00:22:24,898 --> 00:22:28,754
that's not necessary. These basically, okay, add selected

348
00:22:28,802 --> 00:22:32,366
repositories. So it's going to

349
00:22:32,388 --> 00:22:35,726
add and it's going to start scanning, it's going to find,

350
00:22:35,828 --> 00:22:40,894
depending on the language and the project is going to try to find where

351
00:22:40,932 --> 00:22:44,210
is that located. Right. So where are the dependencies,

352
00:22:45,590 --> 00:22:49,170
are they vulnerable? So it's checking with the SNC database,

353
00:22:49,510 --> 00:22:53,202
which is even public, the database of intelligence of

354
00:22:53,256 --> 00:22:56,566
vulnerabilities from SNC, it's public and you can see that.

355
00:22:56,668 --> 00:23:00,774
So it quickly showed me the results here and we can see that here.

356
00:23:00,812 --> 00:23:05,014
It analyzed, since it's a JavaScript or a

357
00:23:05,052 --> 00:23:09,702
node project, it analyzed the packet JSON

358
00:23:09,846 --> 00:23:13,210
file. Right. And if we check here we can quickly

359
00:23:13,280 --> 00:23:16,394
see oh, there is a critical vulnerability here,

360
00:23:16,432 --> 00:23:20,042
prototype pollution, which has a cvss of

361
00:23:20,096 --> 00:23:23,598
9.8, right. So that's very critical and we need to

362
00:23:23,604 --> 00:23:27,582
be aware of that. And that's in the package called low dash. And so

363
00:23:27,636 --> 00:23:30,842
there is even proper sneak

364
00:23:30,906 --> 00:23:34,178
id here and I think you can go to the

365
00:23:34,184 --> 00:23:37,634
sneak database here to read more about it. Right. So yeah,

366
00:23:37,672 --> 00:23:40,130
you can take a look here, there is a CVE,

367
00:23:42,230 --> 00:23:46,338
there is a CWe, right. And there's the description of the vulnerability

368
00:23:46,434 --> 00:23:50,182
here. So that's very interesting for the developer to know right

369
00:23:50,236 --> 00:23:53,206
away what they need to do.

370
00:23:53,308 --> 00:23:58,774
Right. And also here it shows when

371
00:23:58,812 --> 00:24:02,426
the vulnerability was added to this project, to which version of the

372
00:24:02,448 --> 00:24:06,378
package and what you need to do. You can also ignore here if

373
00:24:06,384 --> 00:24:10,634
you want, right. And there's a risk code and all that stuff. So it's

374
00:24:10,682 --> 00:24:14,522
very important for you to analyze those libraries

375
00:24:14,666 --> 00:24:18,238
and see what can you do there if there is

376
00:24:18,244 --> 00:24:21,486
a new version. Updating is

377
00:24:21,508 --> 00:24:24,626
the most common thing to do. But you also need

378
00:24:24,648 --> 00:24:28,066
to be aware of not breaking your application, right. So you

379
00:24:28,088 --> 00:24:31,826
need to have proper testing, especially regression testing, to make

380
00:24:31,848 --> 00:24:35,090
sure that once you update whats library,

381
00:24:36,730 --> 00:24:38,360
you don't break the application.

382
00:24:40,650 --> 00:24:44,200
Yeah, basically here the dependencies, and as I said,

383
00:24:44,730 --> 00:24:48,594
the dependencies can be direct dependencies or indirect dependencies,

384
00:24:48,642 --> 00:24:51,706
right. So it shows these, that there are some indirect ones

385
00:24:51,728 --> 00:24:55,306
that are vulnerable as well and can be even harder for

386
00:24:55,328 --> 00:24:58,490
me to fix because I need to rely on that one,

387
00:24:58,640 --> 00:25:01,334
the top one for me to update that. Right.

388
00:25:01,392 --> 00:25:05,200
So yeah, you need to understand that as well.

389
00:25:06,130 --> 00:25:09,694
Yeah, basically that's the demo that I had to share. Just a quick

390
00:25:09,732 --> 00:25:13,754
overview on how you can use a software composition analysis

391
00:25:13,802 --> 00:25:17,870
tool and sneak is the one that I most recommend

392
00:25:18,020 --> 00:25:21,166
using. And yeah, I hope you

393
00:25:21,188 --> 00:25:24,950
enjoyed this talk and I'm available for questions later.

394
00:25:24,980 --> 00:25:25,060
Ah.

