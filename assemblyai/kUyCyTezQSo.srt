1
00:00:26,290 --> 00:00:29,954
Hello everyone, and thank you for attending my talk about minimal viable

2
00:00:30,002 --> 00:00:33,286
securing for Python applications. The goal of this talk is

3
00:00:33,308 --> 00:00:36,754
to share with you an iterative approach to security called minimal viable

4
00:00:36,802 --> 00:00:40,646
security and how to practically implement it, taking as

5
00:00:40,668 --> 00:00:44,374
an example a fast API based application that

6
00:00:44,412 --> 00:00:48,242
I want to secure by adding a few critical security controls.

7
00:00:48,386 --> 00:00:51,646
So let's get started. But first of all, let me thank the

8
00:00:51,748 --> 00:00:55,994
42 organizers for a carefully planned event full of excellent

9
00:00:56,042 --> 00:00:59,534
topics and speakers. In these challenging times, it's far

10
00:00:59,572 --> 00:01:04,186
from being granted. So well done. Let me now briefly introduce

11
00:01:04,218 --> 00:01:07,406
myself. I'm David Melamed, one of the

12
00:01:07,428 --> 00:01:11,282
cofounder CTO CTO at JIT, a dev first cybersecurity company.

13
00:01:11,416 --> 00:01:14,946
I have a phd in bioinformatics and I'm passionate about technology and

14
00:01:14,968 --> 00:01:18,966
security. For a few years previously I worked as a

15
00:01:18,988 --> 00:01:22,822
senior technical leader in the city office at Cisco and before that

16
00:01:22,876 --> 00:01:26,562
at Cloudlock, where I have built cloud applications at scale

17
00:01:26,626 --> 00:01:30,026
and led some strategic projects. I love to share my

18
00:01:30,048 --> 00:01:33,354
knowledge and experience, and in the past I was also involved in a few

19
00:01:33,392 --> 00:01:36,090
communities like Python and AWS in Israel.

20
00:01:37,790 --> 00:01:41,226
So when you should start to

21
00:01:41,248 --> 00:01:45,166
care about security, I'm sure that's usually not the first thing that

22
00:01:45,188 --> 00:01:47,920
comes to mind when you start building a new application.

23
00:01:48,370 --> 00:01:52,106
If I ask an engineer what is his main concern while writing

24
00:01:52,138 --> 00:01:55,614
his application, he probably would mention functional bugs and performance

25
00:01:55,662 --> 00:01:59,474
way before security. And that's also the way startups are picking up

26
00:01:59,512 --> 00:02:03,502
their priority. You need to deliver business value to survive

27
00:02:03,566 --> 00:02:07,294
accepting the risk of security, at least until your customers start

28
00:02:07,352 --> 00:02:10,738
asking about it, or when you face your first security incident.

29
00:02:10,914 --> 00:02:14,674
That's mainly because security is hard and yet it's an ongoing

30
00:02:14,722 --> 00:02:17,990
concern. It's not something you can deal with once

31
00:02:18,060 --> 00:02:21,574
and tick a checkbox. It's a journey and a continuous investment,

32
00:02:21,702 --> 00:02:25,322
but its cost is lower if you start managing it on your first day,

33
00:02:25,456 --> 00:02:28,902
not necessarily handling everything, but at least be aware

34
00:02:28,966 --> 00:02:32,720
of what needs to be done so that you don't spend your time catching up.

35
00:02:33,170 --> 00:02:35,902
But don't try to bowl the ocean on your first day.

36
00:02:36,036 --> 00:02:39,470
Start minimal and add security iteratively.

37
00:02:39,810 --> 00:02:43,540
Let's take an example. This is a typical cloud application

38
00:02:44,070 --> 00:02:48,210
starts with the manager granting the developer access to committee's code.

39
00:02:48,360 --> 00:02:53,054
The code is stored into some SCM like GitHub or GitLab.

40
00:02:53,182 --> 00:02:56,574
Upon commits, the CI pipeline is triggered and after

41
00:02:56,632 --> 00:03:00,150
merging the code, the application is deployed in the cloud

42
00:03:00,220 --> 00:03:03,330
provider. In our case, the application is containerized,

43
00:03:03,410 --> 00:03:06,838
so the CI pipeline builds the docker image and stores it

44
00:03:06,924 --> 00:03:10,774
into the container registry, which is pulled by the microservice at

45
00:03:10,812 --> 00:03:14,266
runtime. Microservices states are

46
00:03:14,288 --> 00:03:18,406
then persisted in database and are committing with third party

47
00:03:18,438 --> 00:03:21,858
services and between each other and are exposing

48
00:03:21,894 --> 00:03:25,386
through an API gateway some external endpoint for external

49
00:03:25,418 --> 00:03:29,022
users. Now this environment has

50
00:03:29,076 --> 00:03:32,670
multiple risks in each area, and I want to mention

51
00:03:32,740 --> 00:03:36,942
a few. One. So first of all, if you're looking at the

52
00:03:37,076 --> 00:03:40,498
grant access to the manager, well let's say that

53
00:03:40,584 --> 00:03:44,226
right now he granted access to the developer, but let's say the

54
00:03:44,248 --> 00:03:48,242
developer is leaving the company, he may forget

55
00:03:48,306 --> 00:03:51,686
to remove his access and therefore there may be some

56
00:03:51,788 --> 00:03:55,080
unauthorized access for the developer itself.

57
00:03:55,530 --> 00:03:59,226
Well, you have the risk of credential theft of

58
00:03:59,248 --> 00:04:02,646
course, but also the dependency type was quoting

59
00:04:02,758 --> 00:04:06,634
if he mistyped name of a package and now

60
00:04:06,672 --> 00:04:09,500
he got some malicious package inside his code.

61
00:04:09,950 --> 00:04:13,694
For the code itself you have code vulnerabilities that are

62
00:04:13,732 --> 00:04:16,762
really common and infrastructure misconfiguration

63
00:04:16,826 --> 00:04:20,286
that are part of infrastructure as code. In the

64
00:04:20,308 --> 00:04:23,550
CI CD pipeline you have supply chain attack and credential

65
00:04:23,630 --> 00:04:27,246
steps as well. And in the cloud provider

66
00:04:27,358 --> 00:04:30,382
and the runtime you have a lot of different risks,

67
00:04:30,526 --> 00:04:34,206
ranging from data leakage to corrupted

68
00:04:34,238 --> 00:04:38,274
data for multitenancy cases and data loss

69
00:04:38,322 --> 00:04:41,606
and leakage also, and finally for

70
00:04:41,628 --> 00:04:45,446
the users you have unauthorized access and mainly middle attacks. So a

71
00:04:45,468 --> 00:04:49,290
wide range of risks and those areas

72
00:04:50,110 --> 00:04:53,866
that are showing the different risk can actually be grouped in

73
00:04:53,968 --> 00:04:57,066
different layers. So you have the layers of the code,

74
00:04:57,168 --> 00:05:01,310
the pipeline, the runtime, the third party and

75
00:05:01,380 --> 00:05:04,702
the operations. Now look

76
00:05:04,756 --> 00:05:08,206
at the chart here and it will

77
00:05:08,228 --> 00:05:11,982
show you all sorts of security controls that you need to add along

78
00:05:12,036 --> 00:05:15,178
the STLC. But if you start with

79
00:05:15,204 --> 00:05:18,482
a minimal viable set of controls and iterate from that,

80
00:05:18,536 --> 00:05:22,222
it seems way more likely that you will be able to succeed in improving

81
00:05:22,286 --> 00:05:25,060
gradually the security of your product.

82
00:05:25,830 --> 00:05:28,946
So what does it mean? Well, like a

83
00:05:28,968 --> 00:05:32,374
minimal viable product or mvs security can start with

84
00:05:32,412 --> 00:05:36,150
something small. In order to deliver a product with enough critical security

85
00:05:36,220 --> 00:05:39,706
controls to be viable, you won't embarrass yourself in

86
00:05:39,728 --> 00:05:43,850
front of your users. This is an example of

87
00:05:43,920 --> 00:05:47,462
list that includes some critical controls. This envious

88
00:05:47,526 --> 00:05:50,906
approach is that something that we will follow for

89
00:05:50,928 --> 00:05:53,774
the rest of the talk, and I will demo a few of them that are

90
00:05:53,812 --> 00:05:57,518
highlighted here in this talk.

91
00:05:57,684 --> 00:06:01,386
What's their goal and how to add them in your CI CD

92
00:06:01,418 --> 00:06:05,422
pipeline. So I will talk about static code analysis,

93
00:06:05,566 --> 00:06:09,474
secrets detection, dependency check, API security

94
00:06:09,672 --> 00:06:11,810
and MFA for GitHub.

95
00:06:13,510 --> 00:06:17,506
So this is the application that I want to demonstrate

96
00:06:17,538 --> 00:06:21,110
today. It's a movie applications based on a fast

97
00:06:21,180 --> 00:06:24,760
API framework that mostly return

98
00:06:25,210 --> 00:06:28,554
a list of movies and the name of the actor that

99
00:06:28,592 --> 00:06:32,426
are playing in a specific movie. It's a containerized application

100
00:06:32,528 --> 00:06:35,770
that is providing a couple of HTTP endpoints.

101
00:06:36,910 --> 00:06:40,574
Now I want to

102
00:06:40,612 --> 00:06:44,254
talk about how to secure this application. For that I

103
00:06:44,292 --> 00:06:48,110
will show you and demonstrate how to add those different

104
00:06:48,180 --> 00:06:51,850
controls. So you have bandits

105
00:06:51,930 --> 00:06:55,634
that I will use for static code analysis, Gitlix for

106
00:06:55,672 --> 00:06:59,646
detecting secrets, kicks for the infrastructure safety

107
00:06:59,678 --> 00:07:03,522
for these dependency check zap that will be used

108
00:07:03,576 --> 00:07:07,334
for API security. And finally, I will write some custom

109
00:07:07,452 --> 00:07:10,930
control in order to check for MFA in GitHub.

110
00:07:11,090 --> 00:07:14,918
But I want to dive a little bit more deep into

111
00:07:15,004 --> 00:07:19,834
each one of these controls. So let's start first

112
00:07:19,872 --> 00:07:23,574
of all, static analysis. These is used to detect vulnerabilities

113
00:07:23,622 --> 00:07:26,922
in code using existing patterns. For this demo

114
00:07:26,976 --> 00:07:29,910
we'll use bandits which scans Python code.

115
00:07:30,080 --> 00:07:33,326
It's an open source project with more than 30 built in rules to

116
00:07:33,348 --> 00:07:37,386
detect vulnerabilities. Next, for secured detection

117
00:07:37,418 --> 00:07:41,086
we'll use Gitlix, which comes with almost 100

118
00:07:41,188 --> 00:07:44,746
Regex expressions for the common popular

119
00:07:44,938 --> 00:07:48,350
third party services like AWS, Slack,

120
00:07:48,430 --> 00:07:52,114
GitHub, and so on. If you have some

121
00:07:52,152 --> 00:07:54,980
infrastructure as code that is expressed as code,

122
00:07:55,770 --> 00:07:59,138
then it should be also possible to detect misconfiguration

123
00:07:59,234 --> 00:08:03,110
early by scanning the code instead of having to

124
00:08:03,260 --> 00:08:06,546
look for misconfigurations at runtime.

125
00:08:06,738 --> 00:08:09,298
One of the popular tools here are kicks.

126
00:08:09,394 --> 00:08:12,698
I'll not show that specifically in this demo,

127
00:08:12,784 --> 00:08:16,310
but it works in a very similar way than the bandits

128
00:08:16,470 --> 00:08:20,286
that I will demonstrate. And just for the

129
00:08:20,308 --> 00:08:24,666
record, kicks supports many infrastructure types from cloud formation,

130
00:08:24,858 --> 00:08:28,494
terraform, kubernetes, Docker and ansible, and it

131
00:08:28,532 --> 00:08:31,790
includes more than 2000 built in queries.

132
00:08:33,250 --> 00:08:37,054
Next we want to check for vulnerabilities in our packages, and for

133
00:08:37,092 --> 00:08:40,770
that we'll leverage the USS project called safety.

134
00:08:41,110 --> 00:08:44,842
It detects publicly disclosed vulnerabilities that are contained

135
00:08:44,926 --> 00:08:48,914
within the project dependencies. And you have actually two versions,

136
00:08:48,962 --> 00:08:52,758
one of these open source with a monthly update or commercial with

137
00:08:52,844 --> 00:08:55,670
something that is updated more frequently.

138
00:08:57,530 --> 00:09:01,942
Next, I will want to talk about runtime monitoring.

139
00:09:02,086 --> 00:09:05,222
So some vulnerabilities can only be detected at runtime,

140
00:09:05,366 --> 00:09:08,666
for example some of the cross site scripting and some

141
00:09:08,688 --> 00:09:11,914
of the SQL injections. So for this demo we'll

142
00:09:11,962 --> 00:09:15,182
use the OAS project called

143
00:09:15,316 --> 00:09:18,714
Zap for Z attack proxy that includes

144
00:09:18,762 --> 00:09:22,454
about seventail binge and rules, and uses

145
00:09:22,522 --> 00:09:26,286
these open API specification in order to pull the different endpoints

146
00:09:26,318 --> 00:09:28,610
that the application is exposing.

147
00:09:30,550 --> 00:09:34,226
And finally, let's talk about the SEM security. So let's say

148
00:09:34,248 --> 00:09:38,490
in this case GitHub security, because with rising supplying

149
00:09:38,510 --> 00:09:42,326
chain attacks it's critical to ensure that your GitHub service and the

150
00:09:42,348 --> 00:09:45,910
pipeline are also proper secured.

151
00:09:46,570 --> 00:09:49,882
And for that the minimum would be to start by making

152
00:09:49,936 --> 00:09:53,306
sure that all your users are enables MFA in all

153
00:09:53,328 --> 00:09:57,274
the services and specifically into GitHub. So for this

154
00:09:57,312 --> 00:10:00,682
demo I will write a custom control that will

155
00:10:00,736 --> 00:10:04,110
basically list these GitHub users that don't have MFA enables.

156
00:10:04,610 --> 00:10:08,090
And this control will fail if the list is not empty.

157
00:10:08,170 --> 00:10:11,374
And that will leverage a token that I will

158
00:10:11,412 --> 00:10:15,730
add to the GitHub secrets in order to get access to the GitHub API.

159
00:10:17,510 --> 00:10:21,378
So now we talk about that. Let's go into the demo and

160
00:10:21,464 --> 00:10:25,814
just for the record, everything that I will show you here is available

161
00:10:25,932 --> 00:10:29,430
in the publicly repository that

162
00:10:29,500 --> 00:10:31,880
the address is mentioned here.

163
00:10:33,130 --> 00:10:36,760
Okay, so the first thing that I want to show you is actually the application.

164
00:10:37,550 --> 00:10:39,580
So it's a simple application.

165
00:10:40,830 --> 00:10:44,506
This is the main API. And you

166
00:10:44,528 --> 00:10:48,710
can see that it uses database movies Db

167
00:10:48,790 --> 00:10:53,102
that includes some data from IMDb and

168
00:10:53,156 --> 00:10:56,606
basically you have here a docker file in

169
00:10:56,628 --> 00:11:00,394
order to build it. Okay, it uses uv

170
00:11:00,442 --> 00:11:03,554
corn in order to run it.

171
00:11:03,752 --> 00:11:07,646
It includes some secret for aws that will probably be detected

172
00:11:07,678 --> 00:11:09,060
by my control.

173
00:11:10,310 --> 00:11:12,900
And in terms of the API itself,

174
00:11:13,510 --> 00:11:17,830
the first endpoint is returning the number of movies in database.

175
00:11:18,250 --> 00:11:21,810
The second one is used to look for a specific movie

176
00:11:21,970 --> 00:11:25,846
and then to return the list of the stars in the

177
00:11:25,868 --> 00:11:29,110
movie. So let's see it in action.

178
00:11:31,850 --> 00:11:53,620
Let me start by running my application. So jit,

179
00:11:56,070 --> 00:11:59,442
okay, so my application is

180
00:11:59,496 --> 00:12:03,154
running on port at thousand and let's now

181
00:12:03,192 --> 00:12:05,090
go to the browser.

182
00:12:08,090 --> 00:12:10,930
So if I'm going here in docs,

183
00:12:11,010 --> 00:12:14,342
I should be able to see the different

184
00:12:14,396 --> 00:12:17,774
endpoints that my application is exposing.

185
00:12:17,922 --> 00:12:21,094
And now let's just make sure that it works properly.

186
00:12:21,222 --> 00:12:24,762
If I'm going to movies count, I'm securing the number

187
00:12:24,816 --> 00:12:28,490
of movies in the database. If I'm going to movie

188
00:12:32,530 --> 00:12:41,422
title equal Titanic like

189
00:12:41,476 --> 00:12:42,080
that,

190
00:12:44,870 --> 00:12:48,910
then I will get the list of all the movies

191
00:12:49,070 --> 00:12:52,660
with the different release dates. Let's say I want this one,

192
00:12:53,190 --> 00:12:56,550
so I'm going to this and

193
00:12:56,620 --> 00:13:00,534
I want the list of stores in it. This is

194
00:13:00,572 --> 00:13:04,006
the list of the stores that are playing in this movie. So the

195
00:13:04,028 --> 00:13:07,834
API is working correctly right now

196
00:13:07,872 --> 00:13:11,706
let's go back to the code. So these are

197
00:13:11,728 --> 00:13:15,434
the requirements to make it work.

198
00:13:15,632 --> 00:13:18,986
Pay attention. I added a special here requirement of

199
00:13:19,008 --> 00:13:23,066
a package called Alexa that has some vulnerability.

200
00:13:23,178 --> 00:13:26,654
And this is for the purpose of these demo. But you can

201
00:13:26,692 --> 00:13:31,230
imagine that you have any package here that may have some vulnerability.

202
00:13:32,550 --> 00:13:35,810
Now I want to show you also what I will use

203
00:13:35,880 --> 00:13:39,266
in order to implement all

204
00:13:39,288 --> 00:13:43,198
my controls. So this is these GitHub action workflow

205
00:13:43,294 --> 00:13:46,498
called security Yaml that is triggered on push.

206
00:13:46,594 --> 00:13:50,834
And now I want to show you the different jobs

207
00:13:50,882 --> 00:13:54,166
that are included here. So first of all you

208
00:13:54,188 --> 00:13:59,082
have these SAS jobs and this is using action that

209
00:13:59,136 --> 00:14:03,462
is encapsulating the bandit package

210
00:14:03,606 --> 00:14:07,306
of Python. And here I'm adding a few parameters so

211
00:14:07,328 --> 00:14:11,002
that the output will be in JSON and in a

212
00:14:11,056 --> 00:14:14,602
file called output JSON. And then I'm using this action

213
00:14:14,666 --> 00:14:18,014
called upload artifact in order to upload the

214
00:14:18,052 --> 00:14:22,814
results into the GitHub artifacts. And basically if

215
00:14:22,852 --> 00:14:26,180
there is any vulnerability here that bandit will find

216
00:14:26,550 --> 00:14:30,338
in the current folder, then JIT will return an exit code of one.

217
00:14:30,424 --> 00:14:32,850
And so this job will fail.

218
00:14:33,430 --> 00:14:38,006
The second job is for secret. And here I'm also using

219
00:14:38,188 --> 00:14:42,242
another built in action that was written

220
00:14:42,306 --> 00:14:46,102
by the guy who

221
00:14:46,156 --> 00:14:50,442
actually wrote the project. And so here

222
00:14:50,496 --> 00:14:54,266
it's these same thing. If it fails, it returns an exit code

223
00:14:54,288 --> 00:14:57,450
of one and then the job will also fail.

224
00:14:58,990 --> 00:15:03,006
The third thing that I'm doing here is using

225
00:15:03,188 --> 00:15:06,794
zap. So it's the API scanner.

226
00:15:06,922 --> 00:15:10,222
And for this, what I did previously is

227
00:15:10,276 --> 00:15:13,746
that I packaged my application

228
00:15:13,848 --> 00:15:17,294
into a container using the docker file that was included

229
00:15:17,342 --> 00:15:21,666
here. And basically I uploaded that to

230
00:15:21,688 --> 00:15:25,366
the GitHub container registry. And here what

231
00:15:25,388 --> 00:15:28,502
I'm doing is that I'm using the option of

232
00:15:28,636 --> 00:15:31,954
service container that GitHub action is providing.

233
00:15:32,002 --> 00:15:35,286
So I'm loading my container here as a

234
00:15:35,308 --> 00:15:39,110
service. I'm making sure that it's working

235
00:15:39,180 --> 00:15:43,910
so it's loaded properly by adding a health check command.

236
00:15:44,590 --> 00:15:48,150
And I'm using the count endpoint

237
00:15:48,230 --> 00:15:50,570
to make sure that I have some results.

238
00:15:51,090 --> 00:15:54,366
And here I'm mapping the port

239
00:15:54,468 --> 00:15:57,694
80 to port 80 89.

240
00:15:57,892 --> 00:16:01,582
And then in the steps of the job I'm using the

241
00:16:01,636 --> 00:16:04,794
built in action provided by zap.

242
00:16:04,922 --> 00:16:08,418
And here I'm providing these fact that I'm using open API and

243
00:16:08,424 --> 00:16:12,318
these is my target. As you can see I'm using localhost

244
00:16:12,414 --> 00:16:16,114
with the port that I specified here with open API JSon

245
00:16:16,162 --> 00:16:19,910
that is provided by fast

246
00:16:19,980 --> 00:16:23,362
API in order to sca

247
00:16:23,506 --> 00:16:26,706
my API and these also I'm specifying

248
00:16:26,738 --> 00:16:30,666
that I won't fail action true, meaning that if there are some issues then

249
00:16:30,768 --> 00:16:34,810
it will return an exit code of one and my job will fail.

250
00:16:36,110 --> 00:16:39,526
Next sca I'm using here safety. So I'm

251
00:16:39,558 --> 00:16:43,566
installing safety directly and I want

252
00:16:43,588 --> 00:16:47,806
to scan these requirements TXT and return

253
00:16:47,908 --> 00:16:52,186
a JSON format into a files called Alphabet

254
00:16:52,218 --> 00:16:55,890
JSoN. And then I'm uploading that as an artifact.

255
00:16:56,550 --> 00:16:59,746
And finally this is my custom control. As you'll see

256
00:16:59,768 --> 00:17:03,746
it's very simple. I previously created a

257
00:17:03,768 --> 00:17:07,474
token called my or

258
00:17:07,512 --> 00:17:10,914
token here that I stored in the GitHub secrets. And my token

259
00:17:10,962 --> 00:17:14,694
has a scope of admin read so that I can call the API for the

260
00:17:14,732 --> 00:17:18,626
list of users in my organization.

261
00:17:18,818 --> 00:17:22,906
And this is a simple code in JavaScript, not in Python though we could do

262
00:17:22,928 --> 00:17:27,350
the same thing in Python, but here we're leveraging the GitHub script

263
00:17:27,510 --> 00:17:31,278
action that is built for JavaScript. So basically

264
00:17:31,364 --> 00:17:34,762
here I'm just calling an API of a list member

265
00:17:34,826 --> 00:17:38,250
for a specific organization with a files

266
00:17:38,410 --> 00:17:42,554
of two Fa disabled. So this will only return

267
00:17:42,692 --> 00:17:46,206
results in an array if there are users that don't

268
00:17:46,238 --> 00:17:49,586
have MFA enabled. And so if this is

269
00:17:49,608 --> 00:17:53,682
the case then for each one I want to show

270
00:17:53,736 --> 00:17:57,426
a message with the user don't have MFA enabled.

271
00:17:57,538 --> 00:18:00,502
And then in that case I want to exit with one,

272
00:18:00,556 --> 00:18:04,440
otherwise with zero. So that was

273
00:18:05,290 --> 00:18:09,100
the main file. Let's see it in action inside

274
00:18:09,470 --> 00:18:13,130
GitHub itself. So let's go back to the browser.

275
00:18:15,950 --> 00:18:19,980
And this is these repository that I talked about

276
00:18:20,610 --> 00:18:24,240
here. You can see the requirements, you can see the main

277
00:18:25,250 --> 00:18:28,718
code of the application. These is

278
00:18:28,724 --> 00:18:31,360
the main code of these application. Everything I showed you before,

279
00:18:31,970 --> 00:18:36,194
these are the workflows here that

280
00:18:36,232 --> 00:18:39,618
I just prescribed. And now let's see what happened.

281
00:18:39,704 --> 00:18:43,842
Jit already ran once, so let's see what happened

282
00:18:43,896 --> 00:18:47,734
here. So basically all

283
00:18:47,772 --> 00:18:51,334
the jobs failed. And this is what I expected because this is

284
00:18:51,372 --> 00:18:54,582
a goat project. So it's flowed by design.

285
00:18:54,716 --> 00:18:58,902
And let's see each of the results. So let's

286
00:18:59,046 --> 00:19:02,246
start with these first one. The first one is sas, so it's

287
00:19:02,278 --> 00:19:05,766
running bandit for this one. It's returning

288
00:19:05,798 --> 00:19:09,546
directly the results in a file and as an

289
00:19:09,568 --> 00:19:13,550
artifact. So let's go back and let's see the results.

290
00:19:14,690 --> 00:19:18,714
So this is the artifact, I can download it, let's download

291
00:19:18,762 --> 00:19:19,360
it.

292
00:19:22,950 --> 00:19:26,226
And now I want to see

293
00:19:26,248 --> 00:19:27,170
the results.

294
00:19:32,390 --> 00:19:36,200
So let's see the results in the terminal for example.

295
00:19:39,610 --> 00:19:43,414
So here I have my output and I

296
00:19:43,452 --> 00:19:46,726
want to do like that output. And what

297
00:19:46,748 --> 00:19:49,914
I can see here is that I

298
00:19:49,952 --> 00:19:54,170
have three issues that Bendy detected with the medium confidence.

299
00:19:55,710 --> 00:19:59,622
If I'm looking at the details, I will see that it discovered

300
00:19:59,686 --> 00:20:03,466
a few SQL injection, right? Possible SQL

301
00:20:03,498 --> 00:20:05,440
injection vector. Okay.

302
00:20:07,570 --> 00:20:11,680
And the reason for that, if I'm going back to the code,

303
00:20:12,050 --> 00:20:16,322
is that in the code I

304
00:20:16,376 --> 00:20:19,970
actually left this part as

305
00:20:20,040 --> 00:20:23,166
part of formatting. So potentially

306
00:20:23,278 --> 00:20:27,000
someone can introduce some malicious input here,

307
00:20:27,450 --> 00:20:31,782
especially because these comes from the

308
00:20:31,836 --> 00:20:36,114
user input. So basically there's SQL injection

309
00:20:36,162 --> 00:20:39,660
here possible. So this is what Bandit found.

310
00:20:40,430 --> 00:20:43,818
Let's go back to these browser and now

311
00:20:43,984 --> 00:20:47,270
let's go to the secret one. So the secrets,

312
00:20:47,350 --> 00:20:51,326
let's see the results here. And we can see that,

313
00:20:51,508 --> 00:20:55,994
yes, basically there is two secrets

314
00:20:56,122 --> 00:20:59,150
that have been found that are redacted,

315
00:20:59,490 --> 00:21:02,798
but I can find exactly, this is the AWS key.

316
00:21:02,884 --> 00:21:06,770
Okay. And so I can go and not only remove

317
00:21:08,070 --> 00:21:12,174
the key because that won't be enough because now it's on GitHub,

318
00:21:12,222 --> 00:21:16,754
so you never know what can happen. But I need probably to recycle

319
00:21:16,802 --> 00:21:19,800
the key, right, so disable the key and create a new one.

320
00:21:21,130 --> 00:21:25,106
The third job is the API security scanner.

321
00:21:25,138 --> 00:21:28,602
So it's a zap scan. So I could read here

322
00:21:28,656 --> 00:21:33,062
the results. But basically Zap

323
00:21:33,126 --> 00:21:37,002
is also uploading some artifact and also

324
00:21:37,056 --> 00:21:40,640
it's creating an issue here. So I can check the issue here.

325
00:21:41,810 --> 00:21:45,680
This is probably these last one. Let's go to the last one.

326
00:21:46,850 --> 00:21:51,134
And as you can see, it found also some SQL injection as

327
00:21:51,172 --> 00:21:54,334
well as a couple of other issues that I need to

328
00:21:54,372 --> 00:21:58,180
fix in my code. Okay. And as you can see,

329
00:21:58,550 --> 00:22:02,260
what happened here is that Jit tried different URLs and that's basically

330
00:22:02,630 --> 00:22:06,450
based on the open API specification

331
00:22:06,610 --> 00:22:09,954
that the application is returning.

332
00:22:10,082 --> 00:22:14,854
So if I'm coming back here, that's one of the features that

333
00:22:14,892 --> 00:22:19,286
Fastapi is returning here I can see the open API specification

334
00:22:19,398 --> 00:22:23,226
which returns the list of all the endpoints that

335
00:22:23,408 --> 00:22:27,270
this API is returning. And that helps zap

336
00:22:27,350 --> 00:22:31,086
find the exact targets that it

337
00:22:31,108 --> 00:22:34,766
needs to scan. Okay. And that's how

338
00:22:34,788 --> 00:22:37,850
it knows that there's a movie title equals

339
00:22:37,930 --> 00:22:41,150
and this attempt to do some SQL injection.

340
00:22:42,390 --> 00:22:45,810
Let's go back to these actions here and

341
00:22:45,960 --> 00:22:49,714
see the next thing. So now we're going

342
00:22:49,752 --> 00:22:53,874
to dependency check. Dependency check also

343
00:22:53,992 --> 00:22:58,082
is returning some artifact.

344
00:22:58,146 --> 00:23:01,320
So let's get here to see the artifact itself.

345
00:23:05,290 --> 00:23:11,580
Okay, so that's safety. I will also download it and

346
00:23:11,950 --> 00:23:15,180
let's show the results. Okay,

347
00:23:21,390 --> 00:23:25,146
yeah, now let's

348
00:23:25,178 --> 00:23:29,546
see what I have here. And this is the Alexa

349
00:23:29,738 --> 00:23:33,054
package that I added in my requirements. So that's a package

350
00:23:33,102 --> 00:23:36,098
that helps writing Alexa skills, for example.

351
00:23:36,264 --> 00:23:39,874
But here the problem is that it

352
00:23:39,912 --> 00:23:43,234
had some PI openssl vulnerability. So if I

353
00:23:43,272 --> 00:23:47,080
want to get Jit fixed, I need to bump the version to

354
00:23:47,770 --> 00:23:51,318
the latest one probably, or one of the latest one, which is at least

355
00:23:51,484 --> 00:23:55,400
00:40 and

356
00:23:56,970 --> 00:24:00,662
now I can also check the last of the controls.

357
00:24:00,726 --> 00:24:02,730
So this is the MFA checker.

358
00:24:04,190 --> 00:24:07,594
And as you can see here, it failed. And it tells me that this

359
00:24:07,632 --> 00:24:11,198
specific user doesn't have MFA enabled. So also here

360
00:24:11,284 --> 00:24:14,382
a very simple fix is actually to go and tell this

361
00:24:14,436 --> 00:24:18,240
user to enable MFA so that the checks will pass.

362
00:24:18,930 --> 00:24:22,830
Okay, so these are four different actions

363
00:24:23,330 --> 00:24:26,942
that I added in my four different actions that I added

364
00:24:27,006 --> 00:24:30,386
in my pipeline. Basically. By the way,

365
00:24:30,408 --> 00:24:34,034
the MFA checker shouldn't be triggered on push because it doesn't change every

366
00:24:34,072 --> 00:24:38,054
time you're pushing some code. It should be run on schedule, but that

367
00:24:38,092 --> 00:24:42,070
was just faster to show you all the different

368
00:24:42,140 --> 00:24:45,480
controls like that in one place.

369
00:24:46,810 --> 00:24:50,506
Okay, so coming back to

370
00:24:50,528 --> 00:24:51,980
the slides a little bit,

371
00:24:56,110 --> 00:25:01,066
what I show you is that there

372
00:25:01,088 --> 00:25:05,246
are a lot of securing controls that you can add to your pipelines and

373
00:25:05,348 --> 00:25:08,826
there are a lot of different areas. These you should add some controls,

374
00:25:08,938 --> 00:25:12,946
but basically in order to be able to secure your project from

375
00:25:12,968 --> 00:25:16,162
d zero, what you can do is sast

376
00:25:16,216 --> 00:25:19,860
with something minimal. And this something minimal is

377
00:25:21,270 --> 00:25:25,090
an example of something minimal is what I showed in this toque,

378
00:25:25,770 --> 00:25:30,946
taking as an example a couple of different controls

379
00:25:31,058 --> 00:25:34,422
and how it's easy to actually implement them and add

380
00:25:34,476 --> 00:25:38,662
them into your GitHub action CI pipeline.

381
00:25:38,806 --> 00:25:42,380
Of course it works with other type of

382
00:25:42,910 --> 00:25:46,954
CI pipeline. Jit can work with GitLab or with bucket with any

383
00:25:46,992 --> 00:25:50,390
other CI pipeline the same way. These are

384
00:25:50,480 --> 00:25:53,850
actually, most of them are built in actions,

385
00:25:54,010 --> 00:25:57,326
but the code is available so at

386
00:25:57,348 --> 00:26:01,502
the end it's just containers. So you can definitely run them any

387
00:26:01,556 --> 00:26:02,640
place you want.

388
00:26:05,510 --> 00:26:08,990
Here at JIT we also follow the same mvs

389
00:26:09,070 --> 00:26:12,498
approach. We built a continuous security

390
00:26:12,584 --> 00:26:16,246
platform for developers in order to help them secured the applications they are

391
00:26:16,268 --> 00:26:19,606
building, automating these, integration of these control in

392
00:26:19,628 --> 00:26:23,058
your environment and removing the code and unifying

393
00:26:23,154 --> 00:26:27,062
their interface. And if you want to know more about us

394
00:26:27,116 --> 00:26:30,966
then go to our website, JIT IO. If you

395
00:26:30,988 --> 00:26:33,606
want to test our platform, send us a quick email.

396
00:26:33,708 --> 00:26:37,430
Jitmein at JiT IO and

397
00:26:37,500 --> 00:26:41,326
if like all of us, you want to help developers with these security

398
00:26:41,428 --> 00:26:45,022
these, you're more than welcome to join our team because we need

399
00:26:45,076 --> 00:26:48,974
you. That's it. Thank you very much for your

400
00:26:49,012 --> 00:26:52,846
time. I hope it will help you increase the

401
00:26:52,868 --> 00:26:56,640
security of your application from the zero. Don't wait any longer

402
00:26:57,010 --> 00:27:00,094
because you can start already today. Thank you very

403
00:27:00,132 --> 00:27:01,182
much and see you soon.

