1
00:00:38,770 --> 00:00:42,294
My name is Dylan, and I am co founder and CEO of a company

2
00:00:42,332 --> 00:00:46,274
called Sleuth, and this talk is about delegating engineering toil

3
00:00:46,322 --> 00:00:49,286
to the. You know,

4
00:00:49,308 --> 00:00:52,766
it's been a long day. You've all had a conference session. I want

5
00:00:52,788 --> 00:00:55,840
you to visualize a beautiful and perfect world.

6
00:00:56,530 --> 00:01:00,142
A world where developers get to spend their time on

7
00:01:00,196 --> 00:01:03,102
producing engineering value, right?

8
00:01:03,236 --> 00:01:06,546
Not wasting their time, not working on busy work, not doing these

9
00:01:06,568 --> 00:01:10,322
things, having the focus time that they need to actually ship the things

10
00:01:10,376 --> 00:01:14,610
that are going to make a difference for your customers and your organization.

11
00:01:15,370 --> 00:01:19,670
Now, can this world exist? Perhaps. But there's this thing,

12
00:01:19,740 --> 00:01:22,630
there's this thing called toil. Now, generally speaking,

13
00:01:22,700 --> 00:01:26,226
in the english language, toil means to work extremely

14
00:01:26,258 --> 00:01:29,554
hard or incessantly to do exhausting

15
00:01:29,602 --> 00:01:33,586
physical labor. But more specifically, in our engineering

16
00:01:33,618 --> 00:01:37,434
world, in software engineering world, we mean something slightly different.

17
00:01:37,552 --> 00:01:40,338
What do we mean by developer experience toil?

18
00:01:40,454 --> 00:01:43,854
Well, this is the repetitive tasks that your dev

19
00:01:43,892 --> 00:01:47,166
team needs to do to get things done right.

20
00:01:47,268 --> 00:01:50,762
They're repetitive tasks that aren't necessarily unimportant,

21
00:01:50,906 --> 00:01:54,286
but they are tasks that, again, you have to do over and

22
00:01:54,308 --> 00:01:57,682
over again. You have to do it correctly. And generally speaking,

23
00:01:57,816 --> 00:02:01,714
at some point it's wasting your time. It's not giving your customers that

24
00:02:01,752 --> 00:02:05,314
end value. It's something that you likely can do

25
00:02:05,352 --> 00:02:08,754
without. And how do you know if you've got developer experience toil?

26
00:02:08,802 --> 00:02:12,614
There's a couple of categories. There's a couple of ways that you can ask these

27
00:02:12,652 --> 00:02:16,054
questions to understand if you do, or, you know, if our

28
00:02:16,092 --> 00:02:19,414
team always does XYZ. In other words, like,

29
00:02:19,452 --> 00:02:22,710
I'm a developer, I need to remember to transition this issue

30
00:02:22,780 --> 00:02:25,546
into this bucket, and I need to remember when it goes out that I need

31
00:02:25,568 --> 00:02:29,094
to ping the PM and let him know. This other thing, it's manual task.

32
00:02:29,142 --> 00:02:32,558
I have to do it every time, but it's me. I have to

33
00:02:32,564 --> 00:02:36,746
do it. I have to change context, change flow, manual steps

34
00:02:36,858 --> 00:02:40,874
in your workflow, things like, I'm going to do a deploy,

35
00:02:41,002 --> 00:02:44,618
and at some point before I merge things into production,

36
00:02:44,714 --> 00:02:47,714
I should go figure out all the people that were involved in the change.

37
00:02:47,832 --> 00:02:51,522
I should find them, mention them in slack, ask them, is this okay

38
00:02:51,576 --> 00:02:55,278
to do? That's a manual step. That's context switching. It's toil.

39
00:02:55,374 --> 00:02:58,754
I have to do it over and over and over again. And another giant

40
00:02:58,802 --> 00:03:02,742
category is like syncing state between different systems. So again,

41
00:03:02,876 --> 00:03:06,326
your Jira backlog, the place that is never in touch with

42
00:03:06,348 --> 00:03:09,890
reality, right, because people forget to transition

43
00:03:09,970 --> 00:03:13,946
state or you got to go into slack and mention people,

44
00:03:14,048 --> 00:03:17,546
or you got to update the wiki with your release notes or whatever it is

45
00:03:17,568 --> 00:03:20,230
you're pushing state from one place to the other.

46
00:03:20,400 --> 00:03:23,854
Are your customers getting benefit from that? Likely not. Are your

47
00:03:23,892 --> 00:03:28,318
developers getting frustrated? Likely so. All right.

48
00:03:28,484 --> 00:03:32,154
My argument is that automations remove toil.

49
00:03:32,282 --> 00:03:36,014
So when we talk about how we even just move our software

50
00:03:36,062 --> 00:03:39,182
industry forward, it is through automations.

51
00:03:39,326 --> 00:03:43,646
Automation is this lovely, wonderful thing. When we do something 20 times and we realize,

52
00:03:43,758 --> 00:03:47,730
hey, this is a repetitive task, we can delegate that off to robots

53
00:03:47,810 --> 00:03:50,966
and that can be super exciting. Don't just take

54
00:03:50,988 --> 00:03:54,866
my word for it. I mean, we've got a timeline here of examples

55
00:03:54,898 --> 00:03:59,494
of automations just transforming our industry. So circa 2001

56
00:03:59,612 --> 00:04:02,982
automate unit and synthetic tests. I worked at Atlassian

57
00:04:03,046 --> 00:04:06,646
back in the day, and right around them we were writing leads and heaps

58
00:04:06,678 --> 00:04:10,310
of best, but they were running on my laptop. They didn't necessarily

59
00:04:10,390 --> 00:04:13,870
gate my changes. We decided to move to

60
00:04:14,020 --> 00:04:16,878
automated execution of that, and that changed the game.

61
00:04:16,964 --> 00:04:20,526
Suddenly we could run them in a consistent manner. We could

62
00:04:20,708 --> 00:04:24,434
break them up and execute them. It really changed how we could work.

63
00:04:24,552 --> 00:04:27,074
Fast forward a little further. In 2005,

64
00:04:27,272 --> 00:04:31,454
ephemeral infrastructure, defined as code puppet chef eventually

65
00:04:31,502 --> 00:04:34,306
evolved into things like terraform again,

66
00:04:34,488 --> 00:04:37,942
maybe even got rid of an entire role. I knew

67
00:04:37,996 --> 00:04:41,458
ops people whose job was to understand the drift between this server

68
00:04:41,474 --> 00:04:45,046
and that server, and new engineers who'd lost days of

69
00:04:45,068 --> 00:04:48,246
time debugging issues that were specific to a

70
00:04:48,268 --> 00:04:51,754
server. So you move to infrastructure as code automate that,

71
00:04:51,872 --> 00:04:55,514
and suddenly we've changed the game again. And then fast forward

72
00:04:55,552 --> 00:04:58,534
a little further. The DevOps pipelines with no manual steps.

73
00:04:58,662 --> 00:05:02,046
I mean, huge game changer, right? DevOps revolution right there in

74
00:05:02,068 --> 00:05:05,934
a can, being able to deploy and make it a non event.

75
00:05:06,132 --> 00:05:08,560
This is how we move our industry forward.

76
00:05:10,130 --> 00:05:13,538
All right, so maybe I've convinced you that automations have

77
00:05:13,544 --> 00:05:15,380
a lot of potential for change.

78
00:05:16,150 --> 00:05:19,474
Let's talk about what the traits of good

79
00:05:19,512 --> 00:05:23,362
automations in relation to developer experience workflow look

80
00:05:23,416 --> 00:05:26,514
like. Because it's not just any old automation. I mean,

81
00:05:26,552 --> 00:05:30,486
obviously, if it's helping you, great, go for it. But I will argue that there

82
00:05:30,508 --> 00:05:35,030
are some very key characteristics that allow you to level

83
00:05:35,100 --> 00:05:38,838
things up. And I actually made one more point. If I

84
00:05:38,844 --> 00:05:42,118
go back to this slide here, I put these things in a sort of staircase

85
00:05:42,214 --> 00:05:45,658
because I think it's important to understand that the automations that

86
00:05:45,664 --> 00:05:49,178
we have developed continue to build upon each other.

87
00:05:49,264 --> 00:05:52,926
I would argue that today we can do far more exciting and powerful things for

88
00:05:52,948 --> 00:05:56,880
developers. Experience workflow. Because of all of these things, that have come before

89
00:05:57,330 --> 00:06:00,426
and it's truly now that we can start to unlock

90
00:06:00,458 --> 00:06:03,822
this higher level of automation. All right,

91
00:06:03,876 --> 00:06:05,970
so talking about traits,

92
00:06:06,630 --> 00:06:10,546
number one trait of a good developer experience, automation is

93
00:06:10,568 --> 00:06:14,066
that it's going to help drive your culture. Now I feel like when

94
00:06:14,088 --> 00:06:17,586
I've talked to people about this one, initially the reaction is you're

95
00:06:17,618 --> 00:06:21,240
talking about tooling. How is tooling culture? Well,

96
00:06:21,930 --> 00:06:25,062
tooling helps define culture, right?

97
00:06:25,116 --> 00:06:28,886
It helps build these things like guardrails. It says if we

98
00:06:28,908 --> 00:06:32,026
are going to always do a thing, it helps define how we work because we

99
00:06:32,048 --> 00:06:35,226
agree as people that we're going to work in a certain way and then the

100
00:06:35,248 --> 00:06:38,762
automation can enforce those norms. For very simple

101
00:06:38,816 --> 00:06:42,234
example, if I'm going to say there needs to be an issue,

102
00:06:42,272 --> 00:06:45,902
key in the title of every pull request so that people have the context about

103
00:06:45,956 --> 00:06:49,950
why we're making a change, they have the context to understand

104
00:06:50,100 --> 00:06:53,386
for the review cycle and that sort of thing. That's an agreement amongst

105
00:06:53,418 --> 00:06:57,146
a developer team and you can enforce that with an automation. And then rather

106
00:06:57,188 --> 00:07:00,654
than having somebody be the bad guy, you have basically automations

107
00:07:00,702 --> 00:07:04,274
being the bad guy. And it's not really a bad guy because you said we

108
00:07:04,312 --> 00:07:08,198
want to do this and it's there to remind you of these things. So a

109
00:07:08,204 --> 00:07:11,766
good automations enforces these norms and

110
00:07:11,868 --> 00:07:15,814
it also allows you to try new things. So if you want to try something

111
00:07:15,852 --> 00:07:18,962
different again, you can say let's agree as a group,

112
00:07:19,116 --> 00:07:22,314
let's put in place some automation and then the automation is

113
00:07:22,352 --> 00:07:25,994
there to support you and build the

114
00:07:26,032 --> 00:07:29,434
layers that you're going to build upon as a team. Okay,

115
00:07:29,552 --> 00:07:33,166
next automation. Excellent trait is that automations should

116
00:07:33,188 --> 00:07:37,262
be low lift. Now I love these little XKCD things

117
00:07:37,316 --> 00:07:41,210
because I think they got it super. Exactly right in all instances.

118
00:07:41,370 --> 00:07:44,590
As an engineer, I am guilty of having done this a million times,

119
00:07:44,740 --> 00:07:48,114
which is to say I'm working on a problem. It's a problem to solve things

120
00:07:48,152 --> 00:07:51,746
for customer value. I realize, hey, I could

121
00:07:51,768 --> 00:07:54,546
add an automation here and make my life way better. And what I think is

122
00:07:54,568 --> 00:07:56,898
going to happen is I'm going to spend a little time on the automation and

123
00:07:56,904 --> 00:07:59,846
then I'm really going to get into the flow and get to do things.

124
00:08:00,028 --> 00:08:03,414
What happens almost nine times out of ten is that

125
00:08:03,452 --> 00:08:06,934
I start working on the automation. It's far more complicated than I thought. It takes

126
00:08:06,972 --> 00:08:10,714
more time. I've run into a bug, it's some ongoing development and

127
00:08:10,752 --> 00:08:14,598
now I have no time to actually do the real work behind the scenes.

128
00:08:14,694 --> 00:08:18,374
So you can imagine if that's the world that every automation

129
00:08:18,422 --> 00:08:21,786
lives in. It's hard to make progress because you never quite know

130
00:08:21,808 --> 00:08:25,642
the depth of that automation. Whereas if you have low lift automations,

131
00:08:25,706 --> 00:08:29,566
you can treat them as an experiment and basically

132
00:08:29,748 --> 00:08:32,782
iterate on them a lot quicker. The other thing I would say too,

133
00:08:32,836 --> 00:08:36,622
is that the comic on the left is

134
00:08:36,676 --> 00:08:39,778
also true that sometimes there's things that you do, but it doesn't take a lot

135
00:08:39,784 --> 00:08:43,346
of time, it's just a context switch. And if you were to ask yourself if

136
00:08:43,368 --> 00:08:46,418
this is going to take me a week to automate this, when am I going

137
00:08:46,424 --> 00:08:49,570
to get paid back for that? And the answer might be never. But you add

138
00:08:49,640 --> 00:08:52,966
twelve of those up and they're going to add up over time. So if

139
00:08:52,988 --> 00:08:56,246
you can make your automation super low lift, you can get a lot

140
00:08:56,268 --> 00:08:59,462
of benefit and you can start to attack some of those death by 1000

141
00:08:59,516 --> 00:09:03,222
paper cuts. Which leads me to the next topic.

142
00:09:03,286 --> 00:09:06,554
The idea of a low lift automations means that you can really

143
00:09:06,592 --> 00:09:10,262
do a paradigm shift. And this is honestly the crux of,

144
00:09:10,416 --> 00:09:13,854
I believe the way that modern leads are working is everybody is trying

145
00:09:13,892 --> 00:09:17,242
to achieve this idea of continuous improvement,

146
00:09:17,386 --> 00:09:21,214
continuous learning, and it's not rocket science to

147
00:09:21,252 --> 00:09:24,174
realize that. It's just straight up science, right?

148
00:09:24,212 --> 00:09:27,614
You need to be able to perform an experiment. You have a hypothesis,

149
00:09:27,742 --> 00:09:31,474
you run an experiment, you measure. If the hypothesis was

150
00:09:31,512 --> 00:09:34,718
wrong, you try again. But if your experiment is going to take forever,

151
00:09:34,814 --> 00:09:37,606
you're only going to get one or two shots at goal. But if you can

152
00:09:37,628 --> 00:09:41,302
do these things in a tight loop and you can really measure these things,

153
00:09:41,436 --> 00:09:44,870
you can continuously iterate towards a better and better process.

154
00:09:45,020 --> 00:09:49,154
So a good automation is an experiment.

155
00:09:49,282 --> 00:09:52,538
It's your team saying, what if we did x? And you're going to

156
00:09:52,544 --> 00:09:55,500
measure and you're going to check it out and you're going to try,

157
00:09:56,190 --> 00:09:59,610
which actually I thought there was a different slide coming.

158
00:09:59,680 --> 00:10:03,726
But another trait that I think you will find in

159
00:10:03,748 --> 00:10:07,166
this day and age that is huge is that you have

160
00:10:07,188 --> 00:10:10,622
to be able to use the tools that your teams are using already

161
00:10:10,676 --> 00:10:14,634
today in these automations. So if you think back to that slide

162
00:10:14,682 --> 00:10:17,906
where we had the stairstep of how automations have sort of

163
00:10:17,928 --> 00:10:21,730
built upon each other over time, we're at this place now

164
00:10:21,880 --> 00:10:25,646
where we're all using these cloud based tools, right? We're using some sort of git

165
00:10:25,678 --> 00:10:28,866
repository with like code review. We're using

166
00:10:28,888 --> 00:10:32,278
an issue tracker somewhere, we're using a CI CD system.

167
00:10:32,444 --> 00:10:36,246
My guess would be that 90% of you are using some subset of

168
00:10:36,268 --> 00:10:39,894
these tools that are up on the screen right here. Now, what that means is

169
00:10:40,012 --> 00:10:43,594
if we want to make an impactful change to the way that your

170
00:10:43,632 --> 00:10:47,126
development teams are working, you need to be able to automate

171
00:10:47,158 --> 00:10:50,618
across all of this because things start in Jira and then they move into a

172
00:10:50,624 --> 00:10:54,026
pull request, and then they move into a production environment via CI

173
00:10:54,058 --> 00:10:57,360
CD, and then they move into pagerduty when you've messed up.

174
00:10:57,730 --> 00:11:01,646
And you need to be able to talk to all of these systems to really

175
00:11:01,748 --> 00:11:05,634
take best practice workflows and implement them

176
00:11:05,752 --> 00:11:10,766
in your services. So let's

177
00:11:10,878 --> 00:11:14,226
talk about this in terms of a story. We talked about the traits of

178
00:11:14,248 --> 00:11:17,746
a good automation. Now, I have a number of different stories,

179
00:11:17,778 --> 00:11:21,426
but I like this one the best. So for our startup

180
00:11:21,458 --> 00:11:23,960
sleuth, question,

181
00:11:24,490 --> 00:11:25,640
is that right?

182
00:11:26,890 --> 00:11:30,346
Okay, well, maybe I

183
00:11:30,368 --> 00:11:33,740
meant to say four then. Yeah, sorry about that.

184
00:11:38,510 --> 00:11:42,182
Telling a story about something that I think fulfills these categories.

185
00:11:42,326 --> 00:11:46,046
Now, we cheated a little bit in the sense that sleuth is built to do

186
00:11:46,068 --> 00:11:49,486
a lot of these things and to basically bring the low lift side of

187
00:11:49,508 --> 00:11:53,454
this. But there's a number of different best

188
00:11:53,492 --> 00:11:56,942
practices that are out there in the world. One of these is to say,

189
00:11:57,076 --> 00:11:59,698
I'm going to make a change and I'm going to deploy that change to a

190
00:11:59,704 --> 00:12:03,186
pre production environment. And I want to have a culture on

191
00:12:03,208 --> 00:12:06,498
my team of people identifying that their change

192
00:12:06,584 --> 00:12:09,738
has hit a pre production environment. Take a hot minute,

193
00:12:09,854 --> 00:12:13,234
do a smoke test, check that it works in that pre production environment

194
00:12:13,282 --> 00:12:16,486
the way that we want it to before. We're going to go ahead and

195
00:12:16,508 --> 00:12:21,186
merge that into a production environment. Right. That's a reasonably common workflow,

196
00:12:21,298 --> 00:12:24,298
but you can imagine that that's a little difficult. Right. We have to merge a

197
00:12:24,304 --> 00:12:28,438
thing. We have to know that CI CD has deployed that to a specific environment.

198
00:12:28,534 --> 00:12:32,426
I need to know who it is that I need to mention, and then I

199
00:12:32,448 --> 00:12:35,966
need to hopefully collect that information in an environment where the people are

200
00:12:35,988 --> 00:12:39,258
working. So like something like slack. And then I need to trigger

201
00:12:39,354 --> 00:12:42,962
a CI CD pipeline in some other system to promote things

202
00:12:43,016 --> 00:12:46,206
to production. A complicated automation,

203
00:12:46,318 --> 00:12:50,034
but you can see how that's going to drive reliability. It's going to drive

204
00:12:50,152 --> 00:12:53,314
accountability, it's going to promote my

205
00:12:53,352 --> 00:12:56,260
team doing smoke tests and those sorts of things.

206
00:12:56,950 --> 00:13:00,566
So a great example of taking all

207
00:13:00,588 --> 00:13:04,198
of those traits of an automation and building it into something that

208
00:13:04,204 --> 00:13:07,606
if we can adopt really quickly, we can understand how that impacts our

209
00:13:07,628 --> 00:13:11,354
flow. And it is something that really defines the culture of our

210
00:13:11,392 --> 00:13:14,714
team. It's holding up so many pillars of

211
00:13:14,752 --> 00:13:18,346
what we want to do. And in our case, actually, we used that as an

212
00:13:18,368 --> 00:13:21,914
experiment, and we decided we needed some nuance to that. We started

213
00:13:21,952 --> 00:13:25,946
with just straight up approvals, and then we said, if it's

214
00:13:25,978 --> 00:13:29,866
no big deal and it's a small change after 10 minutes, if everything's

215
00:13:29,898 --> 00:13:33,562
okay based off of the monitoring that's coming in from other systems,

216
00:13:33,626 --> 00:13:36,702
let's auto promote it. And then we went, oh,

217
00:13:36,836 --> 00:13:39,922
how about if we have a label on a pull request that's like quick fix?

218
00:13:40,056 --> 00:13:43,442
It doesn't even stop at all. It just goes straight out. But because

219
00:13:43,496 --> 00:13:47,030
we could experiment with that automation and move really quickly,

220
00:13:47,180 --> 00:13:50,486
we could see how it would fit the flow that we were arguably trying to

221
00:13:50,508 --> 00:13:51,510
attack ourselves.

222
00:13:53,690 --> 00:13:57,462
Okay, so that's a little bit about the why,

223
00:13:57,596 --> 00:14:01,654
like the theoretical, like how we should build automations to be really impactful.

224
00:14:01,782 --> 00:14:05,658
Let's talk a little bit about what teams are doing today. So the

225
00:14:05,664 --> 00:14:09,514
good news is you all have been doing these things for the last

226
00:14:09,552 --> 00:14:13,422
ten or 15 years, so we have a ton of best practices out there,

227
00:14:13,556 --> 00:14:16,938
and teams have adopted these things, and they tend

228
00:14:16,954 --> 00:14:20,442
to fall into a bunch of different buckets, four major buckets,

229
00:14:20,506 --> 00:14:23,690
basically, guardrails, notifications,

230
00:14:23,850 --> 00:14:27,166
actions and workflows. So let's walk through

231
00:14:27,188 --> 00:14:29,458
these, and I'll tell you a little bit about what they mean, and I'll give

232
00:14:29,464 --> 00:14:32,914
you an example of each. Okay. First off,

233
00:14:32,952 --> 00:14:36,226
guardrails, we were kind of talking about this a little bit before. Think of

234
00:14:36,248 --> 00:14:40,326
a guardrail as defining the boundary that your team agrees not

235
00:14:40,348 --> 00:14:43,734
to cross. So when you say we always or

236
00:14:43,772 --> 00:14:47,458
we never, for example, we never merge a pull request when we're

237
00:14:47,474 --> 00:14:51,038
in an incident, right. It's a reasonable thing. Lots of teams

238
00:14:51,074 --> 00:14:54,698
do that. Or we never open a pull request without an issue key.

239
00:14:54,784 --> 00:14:58,102
Right. It's saying, these are the guardrails. As an organization,

240
00:14:58,166 --> 00:15:01,510
as a team, we want to live up to a certain level of excellence,

241
00:15:01,590 --> 00:15:05,038
and we won't cross these guardrails. These are types of

242
00:15:05,044 --> 00:15:08,458
automations that tend to be somewhat binary,

243
00:15:08,554 --> 00:15:11,934
right. They're going to either keep you from doing a thing or keep you doing

244
00:15:11,972 --> 00:15:16,034
a thing. And a great example of this

245
00:15:16,232 --> 00:15:20,274
is batch size. Right? So for those who are

246
00:15:20,312 --> 00:15:24,290
familiar with the state of DevOps and Dora metrics,

247
00:15:24,710 --> 00:15:27,954
frequency is something that DevOps teams are trying to

248
00:15:27,992 --> 00:15:31,910
maximize. And the way that you maximize that

249
00:15:31,980 --> 00:15:35,526
is by driving your batch size down. You want to make the smallest amount of

250
00:15:35,548 --> 00:15:39,366
change that's going to have an impact, but have a very small blast area,

251
00:15:39,468 --> 00:15:42,502
small best radius, in case something goes wrong.

252
00:15:42,636 --> 00:15:45,946
And as a team, you can agree, hey, we want to try and keep our

253
00:15:45,968 --> 00:15:49,766
batch size down so you could add an automation that says a pull request can't

254
00:15:49,798 --> 00:15:53,594
have more than x change files where x makes sense for

255
00:15:53,632 --> 00:15:57,582
your team. And you can see how that's going to say, as a group,

256
00:15:57,716 --> 00:16:00,398
if I've opened one that's too big, I need to split it. I need to

257
00:16:00,404 --> 00:16:03,518
go back. I need to just decide how am I going to

258
00:16:03,524 --> 00:16:07,018
stay within these boundaries. And of course, with any of these sorts of things,

259
00:16:07,204 --> 00:16:10,478
maybe you've reformatted all of your code or run some sort of new linter,

260
00:16:10,494 --> 00:16:13,922
and you decide, this is the time where we're going to ignore this check.

261
00:16:14,056 --> 00:16:17,778
But again, that's the exception, not the rule. And that allows

262
00:16:17,794 --> 00:16:21,126
you to understand, how often are we exceeding this thing?

263
00:16:21,228 --> 00:16:23,720
Is this a rule that makes sense for our team?

264
00:16:24,570 --> 00:16:27,270
All right, next up is notifications.

265
00:16:27,770 --> 00:16:31,066
My guess is, like, 100% of you have a cell phone, so you

266
00:16:31,088 --> 00:16:34,182
probably know what notifications are. It brings visibility

267
00:16:34,246 --> 00:16:38,490
and attention to critical information. But critically,

268
00:16:38,990 --> 00:16:41,660
a good notification, just like on your phone,

269
00:16:41,970 --> 00:16:45,246
is context sensitive. It hits you at the

270
00:16:45,268 --> 00:16:48,286
right time, it hits you with the right information,

271
00:16:48,468 --> 00:16:52,510
and it's hitting the right people. Right. Because I'm sure you all have notification

272
00:16:53,330 --> 00:16:57,234
fatigue. I'm one of those people who can't have 400

273
00:16:57,352 --> 00:17:00,930
little red dots on my desktop. I know some of you can. I don't understand

274
00:17:01,000 --> 00:17:03,742
how you do it, but I can't.

275
00:17:03,886 --> 00:17:07,686
But you can use notifications not just

276
00:17:07,788 --> 00:17:11,366
to keep people aware of what's going on, but you can

277
00:17:11,388 --> 00:17:14,806
nudge behavior in the right direction. So one

278
00:17:14,828 --> 00:17:18,406
of the examples that I like is that a PR must not

279
00:17:18,428 --> 00:17:21,398
be open for more than a certain number of days. A draft PR.

280
00:17:21,564 --> 00:17:25,542
Right. So if you want to have this culture of keeping your work flowing

281
00:17:25,606 --> 00:17:29,414
and making sure that you're not spending a ton of time on this dead branch

282
00:17:29,462 --> 00:17:33,398
or whatever, you can open a draft pull request. And maybe you say, we don't

283
00:17:33,414 --> 00:17:37,054
want that to be open for more than ten days. Well, the notifications comes along

284
00:17:37,092 --> 00:17:40,222
and says, it's been eight days for this thing being open.

285
00:17:40,356 --> 00:17:43,646
Perhaps you should either move this into real work so that you can start to

286
00:17:43,668 --> 00:17:46,882
get this reviewed and get this into your flow, or move on to something else

287
00:17:46,936 --> 00:17:50,542
and close this draft pr. You're nudging the behavior

288
00:17:50,686 --> 00:17:53,380
in the direction that you want people to move.

289
00:17:53,750 --> 00:17:56,594
Another great example of this is goals, where you say,

290
00:17:56,712 --> 00:18:00,294
I want everybody to be reviewing a pr that's been opened within, say,

291
00:18:00,332 --> 00:18:04,162
like 10 hours or something like that. You identify and notify

292
00:18:04,226 --> 00:18:07,846
people at the seven hour mark. Well, cool. I've got 3 hours to

293
00:18:07,868 --> 00:18:11,642
hit this thing that we all agreed on. Notify them again an hour before

294
00:18:11,776 --> 00:18:15,114
you can nudge their behavior with a notification into

295
00:18:15,152 --> 00:18:19,002
the direction that you guys want people to be

296
00:18:19,136 --> 00:18:23,110
behaving. All right, actions. I don't

297
00:18:23,120 --> 00:18:26,586
know. I've heard people call this a different thing. I call it actions,

298
00:18:26,698 --> 00:18:30,778
but basically it's can if this then that. So I detect

299
00:18:30,874 --> 00:18:35,470
a condition in some sort of system. I am confident

300
00:18:35,550 --> 00:18:39,394
enough in the signal of that condition that I want to change the state

301
00:18:39,432 --> 00:18:42,898
in another system as a result. Right. So maybe

302
00:18:42,984 --> 00:18:46,866
I notice an incident in pagerduty and I

303
00:18:46,888 --> 00:18:50,934
want to lock all of the pull requests in GitHub. Right. It's a

304
00:18:50,972 --> 00:18:54,614
if this, then that. So again, attacking that

305
00:18:54,652 --> 00:18:58,038
thing from way back at the start of this talk where we're saying one of

306
00:18:58,044 --> 00:19:01,978
the types of toil is keeping these systems in sync so

307
00:19:02,064 --> 00:19:05,494
you can have something that you trust instigate

308
00:19:05,542 --> 00:19:10,586
changing that state rather than having somebody have to toil after that one.

309
00:19:10,608 --> 00:19:13,642
That is really, really popular with a lot of teams. We see people use this

310
00:19:13,696 --> 00:19:17,454
all the time is the issue tracker stuff. So like

311
00:19:17,492 --> 00:19:20,286
I said, I don't think any of you would think I'm crazy to say that

312
00:19:20,308 --> 00:19:22,750
Jira is where things go to be out of sync.

313
00:19:23,350 --> 00:19:26,174
So you do a deploy,

314
00:19:26,302 --> 00:19:30,302
you get that deploy into your production environment, you automatically

315
00:19:30,366 --> 00:19:34,290
transition an issue into deployed to production. And why is this cool?

316
00:19:34,440 --> 00:19:38,194
Well, you got support engineers who are looking to get back to your customer

317
00:19:38,312 --> 00:19:41,206
and let them know that an issue was fixed. Great. They can see that the

318
00:19:41,228 --> 00:19:44,774
pull request was merged, but maybe at your organization that could be

319
00:19:44,812 --> 00:19:48,774
anywhere between 2 hours to seven days before it

320
00:19:48,812 --> 00:19:52,634
actually gets into the customer's hands. So you're using this to keep work

321
00:19:52,672 --> 00:19:56,234
in sync so that you can have visibility, so that you can better service your

322
00:19:56,272 --> 00:19:56,860
people.

323
00:19:59,070 --> 00:20:02,846
Finally, we have workflows. And workflows are just what you

324
00:20:02,868 --> 00:20:06,446
think. It's how you get work from concept all the way

325
00:20:06,468 --> 00:20:10,526
through to launch. It can be something really small

326
00:20:10,628 --> 00:20:13,854
that guides the way that you're doing work, or it can be something really big,

327
00:20:13,892 --> 00:20:17,266
like I was mentioning with the slack based approvals. Right. It's a

328
00:20:17,288 --> 00:20:20,978
fairly complicated flow, but it's saying this is how we work.

329
00:20:21,064 --> 00:20:24,194
This is the flow with which we are going to take work from one place

330
00:20:24,232 --> 00:20:29,154
to the other. Now, automations that tend to be workflow automations are

331
00:20:29,192 --> 00:20:32,582
often a combination of the other ones. Like it's saying I'm going to have some

332
00:20:32,636 --> 00:20:36,214
sort of notification, I'm going to have some sort of, if this, then that

333
00:20:36,332 --> 00:20:39,514
I'm going to have some guardrails that check the thing and I'm going to bring

334
00:20:39,552 --> 00:20:43,206
it all together into a larger process that we can adopt

335
00:20:43,238 --> 00:20:45,340
that's going to help the flow of our team.

336
00:20:47,390 --> 00:20:51,130
One of the favorite ones that I have is

337
00:20:51,280 --> 00:20:54,890
that idea of auto locking a project when your environment

338
00:20:54,970 --> 00:20:58,094
is in an incident. Now I've done this

339
00:20:58,132 --> 00:21:01,406
with leads that I've run for probably ten years or

340
00:21:01,428 --> 00:21:05,070
something like that, but I've done it in ways that were inconsistent

341
00:21:05,230 --> 00:21:08,606
and not super effective.

342
00:21:08,718 --> 00:21:12,654
Right. Like you have the SRE team say, hey, I'm going to throw a slack

343
00:21:12,702 --> 00:21:16,306
notifications in there and be like, everybody don't deploy. We're in the middle of

344
00:21:16,328 --> 00:21:19,878
a know and well, what's the first thing that a developer does is I

345
00:21:19,884 --> 00:21:23,766
didn't read Slack and hit merge. Right now you've got more change on

346
00:21:23,788 --> 00:21:28,120
top or better yet, oh, this one I've done a thousand times which is

347
00:21:28,570 --> 00:21:32,306
you think, oh, everything's on fire. It's like all the cpus

348
00:21:32,338 --> 00:21:35,306
are at like 90%. It's a total mess. We need to get a handle on

349
00:21:35,328 --> 00:21:38,886
this and somebody does a deploy and nukes your old infrastructure and spins

350
00:21:38,918 --> 00:21:43,066
up new infrastructure. Now it's not 90%, it's like 160% and it's

351
00:21:43,098 --> 00:21:45,840
really on fire now it's like hard down, right?

352
00:21:46,210 --> 00:21:50,286
So the cost of not doing this right every time

353
00:21:50,388 --> 00:21:55,040
and getting it into a place where developers live is high.

354
00:21:55,490 --> 00:21:58,718
So being able to take this and say I'm going

355
00:21:58,724 --> 00:22:02,654
to use my pager duty as the source of truth for nastiness. I am going

356
00:22:02,692 --> 00:22:06,614
to put a merge block and get hub so that developers where they

357
00:22:06,652 --> 00:22:08,886
live, they're going to go in there and they're going to try and click that

358
00:22:08,908 --> 00:22:11,686
button and it's going to say no, right? And yeah, I'm going to add some

359
00:22:11,708 --> 00:22:15,202
notifications in there as well. And then when the thing gets resolved

360
00:22:15,266 --> 00:22:18,582
I'm going to make it all better. Right. And that's just how we work.

361
00:22:18,636 --> 00:22:22,346
So it's a good example of how you take a

362
00:22:22,368 --> 00:22:26,406
somewhat simple situation, bring together a lot of different tools

363
00:22:26,518 --> 00:22:29,626
and make that work in a way that's going to help your team and help

364
00:22:29,648 --> 00:22:34,458
your customers. Okay. So hopefully

365
00:22:34,554 --> 00:22:38,190
with all of this you can sense a theme and it's a pretty simple

366
00:22:38,260 --> 00:22:42,030
theme. You need to measure experiments,

367
00:22:42,550 --> 00:22:46,770
measure and repeat and you just need to do that over

368
00:22:46,840 --> 00:22:49,970
and over and over again. And automations,

369
00:22:50,630 --> 00:22:54,366
they're just like performance issues. Maybe you've

370
00:22:54,398 --> 00:22:57,922
worked with a junior dev who you ask to do some sort of performance issue.

371
00:22:57,976 --> 00:23:01,506
And they look at the code and they say, I think that it's

372
00:23:01,538 --> 00:23:05,206
inefficient in this area, right? And your red flags are flying off

373
00:23:05,228 --> 00:23:08,406
the shelf because you realize that's not how you understand a

374
00:23:08,428 --> 00:23:11,926
performance problem. You measure it and then you look and you go,

375
00:23:11,948 --> 00:23:15,386
oh, it looks like that's the area that's slow. And you try something and

376
00:23:15,408 --> 00:23:18,586
you push that change out and you measure it again and you go, turns out

377
00:23:18,608 --> 00:23:21,434
I didn't get it. And you do it again, right? And then you say,

378
00:23:21,472 --> 00:23:23,946
turns out I did get it. And it was not the thing that the junior

379
00:23:23,978 --> 00:23:28,014
Developer thought was potentially slow. It's the same with

380
00:23:28,052 --> 00:23:31,306
automations. It's the same with the software development flow.

381
00:23:31,418 --> 00:23:34,746
We just so happen to be in a place now we're

382
00:23:34,778 --> 00:23:38,386
on that staircase of automations where we can start to

383
00:23:38,408 --> 00:23:41,298
do these things. These were really hard to do in the past,

384
00:23:41,464 --> 00:23:44,750
it's a lot easier to do now. And we have a lot of best practices

385
00:23:44,910 --> 00:23:47,250
and things in place that we can utilize.

386
00:23:48,150 --> 00:23:51,526
So it wouldn't be a sponsored talk if I didn't shill my

387
00:23:51,548 --> 00:23:55,014
own product at some point. So if you like the way that I'm talking about

388
00:23:55,052 --> 00:23:59,042
these things, go check out our sleuth automations marketplace.

389
00:23:59,186 --> 00:24:02,806
Obviously I'm passionate about these things. And so

390
00:24:02,828 --> 00:24:06,538
we've built a product that works in very much that same way. It's covering all

391
00:24:06,544 --> 00:24:09,338
of those traits. We make it one click so that you can treat it as

392
00:24:09,344 --> 00:24:12,982
can experiment. We'll give you the efficacy of the thing based on

393
00:24:13,136 --> 00:24:17,374
what you used to be doing and now what you're doing here. And probably most

394
00:24:17,412 --> 00:24:20,862
importantly, it's a catalog. It's a catalog of what is the art

395
00:24:20,916 --> 00:24:24,814
of possible. And I will remind everybody that not every

396
00:24:24,852 --> 00:24:28,466
automation is made for every team. It might not be the right automations for

397
00:24:28,488 --> 00:24:32,370
your team. You can try it and see how it fits, see how it feels.

398
00:24:33,270 --> 00:24:36,582
I would guarantee that there will be something in there.

399
00:24:36,636 --> 00:24:41,574
There will be like three to five that work for you and probably 25

400
00:24:41,612 --> 00:24:44,918
that don't. But yeah, take a look,

401
00:24:45,004 --> 00:24:48,854
check it out. And as

402
00:24:48,892 --> 00:24:52,886
we move into this golden age of automation, maybe that original vision

403
00:24:52,918 --> 00:24:56,426
that we had of developers actually getting to work and code and

404
00:24:56,448 --> 00:24:59,654
not having to have distractions and do obnoxious

405
00:24:59,702 --> 00:25:03,326
toil, we can get there. We can get a lot closer than

406
00:25:03,348 --> 00:25:07,102
we ever could get by embracing automations, the right

407
00:25:07,156 --> 00:25:10,814
type of automations and treating them as a continuous learning and

408
00:25:10,852 --> 00:25:12,990
experimentation framework.

409
00:25:13,890 --> 00:25:16,750
That's pretty much all I got. If you want to go check out more,

410
00:25:16,820 --> 00:25:20,030
you can go download our book. You can check out the marketplace. Like I say,

411
00:25:20,100 --> 00:25:23,502
you don't have to be a sleuth user to

412
00:25:23,556 --> 00:25:26,838
see that. It's just visible for everybody. So you can go browse and see if

413
00:25:26,844 --> 00:25:29,638
there's anything that works for you. And if you like it, give us a try

414
00:25:29,724 --> 00:25:32,886
or chat to us and tell us why you don't. Either way, that works for

415
00:25:32,908 --> 00:25:36,200
us. All right, well, thank you all so much. I really appreciate it.

