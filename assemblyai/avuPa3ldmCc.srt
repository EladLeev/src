1
00:00:20,490 --> 00:00:24,014
Everyone, thank you for coming to this Conf 42 talk on how to build

2
00:00:24,052 --> 00:00:28,066
on Ethereum quickly, easily with Scaffoldeth E. My name is Kevin Jones

3
00:00:28,098 --> 00:00:31,366
and I'm really excited to teach you guys today how you can build your own

4
00:00:31,388 --> 00:00:34,642
decentralized web application. So without further ado,

5
00:00:34,706 --> 00:00:38,486
let's get started. So if you're new to this concept of

6
00:00:38,508 --> 00:00:42,022
web three and building on Ethereum and decentralized applications,

7
00:00:42,166 --> 00:00:45,702
there's a lot to learn. Again, my name is Kevin Jones. My background

8
00:00:45,766 --> 00:00:49,686
is full time. I work for a company called Nginx. I'm also a developers advocate

9
00:00:49,718 --> 00:00:52,926
for a popular toolkit called Scaffold ETH, and I am the

10
00:00:52,948 --> 00:00:56,126
founder of a nonprofit called the Blockchain Education Fund, based out of

11
00:00:56,148 --> 00:00:59,774
here in California. And I'm also a lead mentor for

12
00:00:59,812 --> 00:01:03,006
a solidity track@growic.com. I'm also

13
00:01:03,028 --> 00:01:06,202
a photographer and filmmaker. If you guys scan this code, you'll get all my contact

14
00:01:06,276 --> 00:01:09,698
information. You can follow me on Twitter. I'm on Telegram. Would love

15
00:01:09,704 --> 00:01:12,306
to chat with you guys if you have any questions or if you're interested in

16
00:01:12,328 --> 00:01:16,142
any collaboration. So I want to preface

17
00:01:16,206 --> 00:01:19,878
that building on Ethereum can be a little complicated at first and can

18
00:01:19,884 --> 00:01:23,494
be a little overwhelming, but I'm going to try to demystify that today by actually

19
00:01:23,532 --> 00:01:27,240
walking through some of the basics and then do an actual demo for you.

20
00:01:28,250 --> 00:01:31,766
It's first good idea to get an idea of how everything started and where we

21
00:01:31,788 --> 00:01:35,674
came from. As far as the web goes. You can think of the traditional web

22
00:01:35,712 --> 00:01:39,306
in the early 90s when things first got started, everything was very static. It was

23
00:01:39,328 --> 00:01:42,806
the static web applications,

24
00:01:42,918 --> 00:01:47,066
static content, really, it was just a means for serving information to users.

25
00:01:47,098 --> 00:01:50,606
Right. There wasn't a lot of dynamic content that's changed over the

26
00:01:50,628 --> 00:01:54,000
years. Right. Where we're at now, which is kind of this kind of web two

27
00:01:54,930 --> 00:01:58,626
is really a more complex infrastructure where we have APIs that

28
00:01:58,648 --> 00:02:01,854
are talking to each other, we have databases, we have network storage,

29
00:02:01,982 --> 00:02:05,246
we have applications that are sitting in cloud providers

30
00:02:05,358 --> 00:02:08,806
and on premise. And then we have Jones of different protocols that have been

31
00:02:08,828 --> 00:02:12,486
built on top of the Internet. Right? And this is cool because

32
00:02:12,508 --> 00:02:16,434
it gave birth to a lot of interesting applications, social media applications,

33
00:02:16,482 --> 00:02:20,326
Facebook, Instagram, TikTok, you name it. There's all

34
00:02:20,348 --> 00:02:23,094
sorts of cool stuff that you can do in a more dynamic way and interact

35
00:02:23,142 --> 00:02:26,810
on the web. But web three is this new concept of building

36
00:02:26,880 --> 00:02:30,666
applications that are decentralized. So in other words, they are blockchain based

37
00:02:30,768 --> 00:02:34,126
using a ledger. The security of the network is secured by

38
00:02:34,148 --> 00:02:37,338
a consensus algorithm. In the case today we're

39
00:02:37,354 --> 00:02:40,494
going to be talking about Ethereum. Everything is transaction based

40
00:02:40,532 --> 00:02:44,434
and message based. And so you send transactions and broadcast these transactions to

41
00:02:44,472 --> 00:02:47,934
a decentralized network, and all these nodes

42
00:02:47,982 --> 00:02:50,770
kind of come in sync and receive these transactions.

43
00:02:51,430 --> 00:02:55,654
And this is all done using public cryptography and

44
00:02:55,772 --> 00:03:00,034
cryptographic hash algorithms. And because it is decentralized,

45
00:03:00,082 --> 00:03:03,894
it's open. So any user can connect to a decentralized application and then

46
00:03:03,932 --> 00:03:06,418
interact with a node on that blockchain.

47
00:03:06,594 --> 00:03:09,994
Providers can also provide access to the blockchain, things like

48
00:03:10,032 --> 00:03:13,402
infura or alchemy or morales that provide

49
00:03:13,456 --> 00:03:17,180
an SDK or an API endpoint into the application.

50
00:03:17,630 --> 00:03:20,986
And then in the terms of the actual smart contract, which is the

51
00:03:21,008 --> 00:03:24,154
program that lives on the blockchain, it's immutable in the sense

52
00:03:24,192 --> 00:03:27,854
that it's sensor super resistant and it can be deployed and

53
00:03:27,892 --> 00:03:31,102
live forever if properly designed. And again,

54
00:03:31,156 --> 00:03:34,174
everything on the blockchain is transparent because everyone can

55
00:03:34,212 --> 00:03:37,774
see a copy of that ledger. And so you do have to be careful

56
00:03:37,822 --> 00:03:41,186
with sensitive information on the blockchain. If you're going to store anything on the

57
00:03:41,208 --> 00:03:44,466
blockchain that's large, it can be kind of expensive, and you

58
00:03:44,488 --> 00:03:48,066
should probably encrypt that data before you're putting it on the blockchain if

59
00:03:48,088 --> 00:03:51,606
there is anything sensitive in there. And so what

60
00:03:51,628 --> 00:03:55,062
does it mean if you're a developer? Well, you write your smart contract, your front

61
00:03:55,116 --> 00:03:59,314
end in something like a react framework react

62
00:03:59,362 --> 00:04:02,438
js or sorry, JavaScript framework react JS nextjs.

63
00:04:02,534 --> 00:04:05,786
And you usually deploy that application in a decentralized way.

64
00:04:05,888 --> 00:04:09,574
You might still deploy it to a web server or something like Nginx

65
00:04:09,702 --> 00:04:13,362
or something like a static file service like surge.

66
00:04:13,446 --> 00:04:17,102
But your smart contract, which is the backbone to your application, where all the business

67
00:04:17,156 --> 00:04:20,766
logic sits, is deployed across the clusters of

68
00:04:20,788 --> 00:04:24,538
the nodes. So you deploy it to one node as a transaction and then it

69
00:04:24,564 --> 00:04:28,382
gets replicated through consensus to all of the other nodes on the network.

70
00:04:28,526 --> 00:04:31,922
This is how you get the censorship resistant aspect inside

71
00:04:31,976 --> 00:04:35,234
of that smart contract. Everything is handled inside

72
00:04:35,272 --> 00:04:38,566
of there as far as like application logic. And this removes the need for any

73
00:04:38,588 --> 00:04:42,274
kind of intermediary, because people that are interacting

74
00:04:42,322 --> 00:04:45,586
with the blockchain application or with the contract

75
00:04:45,698 --> 00:04:49,606
can use public key cryptography. And that smart contract can

76
00:04:49,628 --> 00:04:53,066
essentially act as the intermediary between two different users on the

77
00:04:53,088 --> 00:04:56,554
network. It also has the ability to store value because

78
00:04:56,592 --> 00:05:00,406
there is an inherent nature to the network being powered by

79
00:05:00,448 --> 00:05:04,126
Ethereum or ether. And most

80
00:05:04,148 --> 00:05:08,026
of these smart contracts are written in specialized languages. And then they're compiled

81
00:05:08,058 --> 00:05:11,834
down into bytecode mainly. We're going to be talking about solidity

82
00:05:11,882 --> 00:05:15,234
today, and if you want to interact with your application, you do

83
00:05:15,272 --> 00:05:18,706
so by use of an API SDK or an

84
00:05:18,728 --> 00:05:21,982
API library. Web three js, ethers js,

85
00:05:22,126 --> 00:05:25,346
and a lot of times providers also provide APIs to interact with

86
00:05:25,368 --> 00:05:29,122
the blockchain as well, or some kind of SDK for react

87
00:05:29,186 --> 00:05:32,518
or something like that. And they also usually offer nodes as a

88
00:05:32,524 --> 00:05:36,374
service. So as you interact with your application, these blocks get

89
00:05:36,412 --> 00:05:39,818
formed, and that's the term blockchain is the blocks are all connected to each other

90
00:05:39,904 --> 00:05:43,194
and store the history of the transactions on that

91
00:05:43,232 --> 00:05:46,938
public ledger solidity high level this is what it

92
00:05:46,944 --> 00:05:50,794
looks like. It's very simple, but it's a high level

93
00:05:50,832 --> 00:05:54,730
language, compiles down into bytecode, but it's got curly brace style.

94
00:05:55,070 --> 00:05:58,526
Its optimization is key. In other

95
00:05:58,548 --> 00:06:02,286
words that you really need to think about how you're writing your smart contract to

96
00:06:02,308 --> 00:06:05,946
be as efficient as possible. Because when you deploy on the Ethereum

97
00:06:05,978 --> 00:06:09,746
blockchain, you have to pay upfront for the storage. So anything

98
00:06:09,848 --> 00:06:13,426
time you want to store a value, or anytime you want to store bytes of

99
00:06:13,448 --> 00:06:16,674
code onto the blockchain, you have to pay upfront for that. So it's very important

100
00:06:16,712 --> 00:06:18,690
that you optimize your smart contract.

101
00:06:19,290 --> 00:06:23,170
Again, this code is compiled down into what's called bytecode,

102
00:06:23,250 --> 00:06:26,514
and in order to read that bytecode you need what's called an ABI.

103
00:06:26,642 --> 00:06:29,410
We're not going to get too much into that, but I'll explain it briefly.

104
00:06:29,490 --> 00:06:33,322
An ABI is kind of like a map or a way to read

105
00:06:33,376 --> 00:06:37,110
that bytecode because when you compile it down into bytecode, it's obviously non readable

106
00:06:37,190 --> 00:06:41,034
by human eyes and same with your front end application. It needs

107
00:06:41,072 --> 00:06:44,110
a way to understand how to interact with the bytecode properly.

108
00:06:45,330 --> 00:06:48,606
So if you want to follow along, you'll need a copy of git on

109
00:06:48,628 --> 00:06:52,490
your computer. You'll need a copy of Node Js. Probably the newest version

110
00:06:52,570 --> 00:06:55,898
is best, but you can use 16 or above and you'll

111
00:06:55,914 --> 00:06:59,970
need a copy of yarn package Manager. Yarn package Manager is the most recent

112
00:07:00,310 --> 00:07:03,474
package manager. Make sure you're not using an old out of date version one from

113
00:07:03,512 --> 00:07:07,566
the Linux as you install the dependencies using the yarn

114
00:07:07,678 --> 00:07:11,522
commands, it will install all of the dependencies you need, including hard hat,

115
00:07:11,586 --> 00:07:15,186
which is a virtualized ethereum virtual machine that runs locally

116
00:07:15,218 --> 00:07:18,518
on your laptop so that you can have a local EVM blockchain that you

117
00:07:18,524 --> 00:07:22,726
can interact with and test. That's fast and local and has

118
00:07:22,748 --> 00:07:26,118
some play ether for you to experiment with react, which is a

119
00:07:26,124 --> 00:07:30,030
front end framework. And then solidity is the

120
00:07:30,140 --> 00:07:33,466
contract language that we're going to be talking about. And it has the compiler

121
00:07:33,498 --> 00:07:36,286
in there already, so it's going to be able to compile it for you and

122
00:07:36,308 --> 00:07:39,674
it's going to be able to automatically create an ABI and inject that ABI

123
00:07:39,722 --> 00:07:42,014
into your front end for you. So you don't have to worry about all that

124
00:07:42,052 --> 00:07:45,438
stuff. So if you're a developer, if you want to

125
00:07:45,444 --> 00:07:48,946
get started, you clone the repository. So you do a git clone on the

126
00:07:48,968 --> 00:07:52,386
Scaffoldeth repository, you do a yarn install that's going to install all of

127
00:07:52,408 --> 00:07:55,506
your dependencies. You do a yarn chain that's going to spin up

128
00:07:55,528 --> 00:07:59,450
your blockchain, you do a yarn start that's going to spin up react,

129
00:07:59,630 --> 00:08:03,142
you do a yarn deploy and that's going to take your smart contract that's inside

130
00:08:03,196 --> 00:08:07,154
of your project. It's going to ship it to the local hard hat Ethereum virtual

131
00:08:07,202 --> 00:08:10,906
machine, and then as you again deploy and make changes to

132
00:08:10,928 --> 00:08:14,566
your smart contract, blocks will be formed and you can kind of start verifying

133
00:08:14,598 --> 00:08:18,058
how your application is running. Okay, so if you at

134
00:08:18,064 --> 00:08:21,306
any point or get lost, speedrunethereum.com is

135
00:08:21,328 --> 00:08:24,410
kind of like your go to. So if you get anything out of this talk,

136
00:08:24,480 --> 00:08:28,606
go to speedrunethere.com. It's going to guide you through some challenges where

137
00:08:28,628 --> 00:08:32,282
you can actually test your abilities and get help into the documentation

138
00:08:32,346 --> 00:08:35,826
as well, in case you have any problems. It'll also put you through to

139
00:08:35,928 --> 00:08:39,138
a telegram group which you can get help as you

140
00:08:39,144 --> 00:08:42,306
go along and do these challenges as well. And if you

141
00:08:42,328 --> 00:08:45,858
need all of the links for Scaffoldeth, this is everything.

142
00:08:45,944 --> 00:08:49,714
This is the repo, this is the telegram chat, this is the docs

143
00:08:49,762 --> 00:08:53,990
page as well as some funding pages because

144
00:08:54,060 --> 00:08:57,250
everything is a public good for Scaffoldeth in the build build,

145
00:08:57,330 --> 00:09:00,818
which is the group of developers that support Scaffoldeth. And so this is a good

146
00:09:00,844 --> 00:09:03,900
contact card to have. You can scan this and it'll save it for you.

147
00:09:04,510 --> 00:09:07,706
So let's get started. I'm more of a person that's interested in

148
00:09:07,808 --> 00:09:11,226
showing instead of slides, so I want to actually kind of walk

149
00:09:11,248 --> 00:09:14,566
you guys through again. If we do a search for Scaffoldeth,

150
00:09:14,678 --> 00:09:17,994
the first link that's going to come up is going to be the GitHub

151
00:09:18,042 --> 00:09:21,726
repository. Okay. This is going to have everything you need to get started.

152
00:09:21,828 --> 00:09:25,022
You can see here that it's pretty actively developed. There's lots of people working

153
00:09:25,076 --> 00:09:27,778
on it and it's going to give you all these steps that I'm going to

154
00:09:27,784 --> 00:09:31,086
go through. Clone the repository, do a yarn

155
00:09:31,118 --> 00:09:34,254
install, do a yarn chain, open up a new window,

156
00:09:34,382 --> 00:09:37,774
do a yarn start, open up another new window

157
00:09:37,822 --> 00:09:41,126
and do a yarn deploy. So as you go through, you're going

158
00:09:41,148 --> 00:09:44,486
to do these commands and I'm going to show these as well. And if you

159
00:09:44,508 --> 00:09:48,406
get lost along the way, there's lots of other information in here

160
00:09:48,428 --> 00:09:52,022
in the readme that you can follow along. So again, if you get lost,

161
00:09:52,086 --> 00:09:55,366
Speedrun Ethereum is a good resource because it has an introduction,

162
00:09:55,478 --> 00:09:59,146
it has a link to Scaffoldeth, it has a

163
00:09:59,168 --> 00:10:02,666
getting started playlist that will teach you about how to build. And then you can

164
00:10:02,688 --> 00:10:06,506
start doing these cool quests where you can test your ability to build on Ethereum.

165
00:10:06,618 --> 00:10:10,254
Okay, so let's take a look at what we got here. So I've already gone

166
00:10:10,292 --> 00:10:13,646
ahead and checked out the repository here. So we can just

167
00:10:13,668 --> 00:10:17,218
assume that I've gotten the moonish version. I also went ahead and did a

168
00:10:17,224 --> 00:10:20,674
yarn install or yarn, yarn install, yarn install and

169
00:10:20,712 --> 00:10:24,498
yarn will do the same thing. So I've already kind of got up my

170
00:10:24,584 --> 00:10:28,830
repository up and running. Now I'm using Tmux, which is a terminal multiplexer

171
00:10:28,910 --> 00:10:32,258
which allows me to have three terminals open in one big terminal window.

172
00:10:32,354 --> 00:10:35,654
You could just have separate windows open, that's fine. You're always going to need three

173
00:10:35,692 --> 00:10:39,410
windows open. So the first window we're going to do a yarn chain.

174
00:10:39,570 --> 00:10:43,082
Yarn chain is going to spin up a copy of hard hat. That's simple.

175
00:10:43,136 --> 00:10:47,066
Do a yarn chain. Then we know hard hat's up and running. It says that

176
00:10:47,088 --> 00:10:50,074
it started. Now we can do a yarn start.

177
00:10:50,192 --> 00:10:53,210
Now yarn start is going to spin up a copy of react.

178
00:10:53,790 --> 00:10:57,566
React is going to take a little while to run. So we'll go ahead and

179
00:10:57,588 --> 00:11:00,382
let that sit. But we can see here that it's trying to start up.

180
00:11:00,436 --> 00:11:03,694
So we'll give it a second. And then on the very bottom, the last one

181
00:11:03,732 --> 00:11:07,238
that you'll always have open is the yarn deploy. So we have yarn

182
00:11:07,274 --> 00:11:10,946
chain to spin up the hard hat chain. Yarn start to spin up,

183
00:11:10,968 --> 00:11:14,626
react, and then yarn deploy is where you're going to deploy your smart contract and

184
00:11:14,648 --> 00:11:18,350
be able to test. So there's already a smart contract that comes with Scaffoldeth.

185
00:11:18,430 --> 00:11:21,894
That's why it was deployed successfully. And we can see now that

186
00:11:21,932 --> 00:11:25,506
we got some read output from the console, from hard hack console.

187
00:11:25,538 --> 00:11:29,014
So we can see that there was some successful transactions. We can

188
00:11:29,052 --> 00:11:32,186
also see where the contract address is located and how

189
00:11:32,208 --> 00:11:35,894
much gas was used. Okay, so react

190
00:11:35,942 --> 00:11:39,194
is still starting up. So while that's doing that, let me just go ahead and

191
00:11:39,232 --> 00:11:42,346
bring up the entire code structure for you so that we can take a quicker

192
00:11:42,378 --> 00:11:46,062
look at what is included in the code.

193
00:11:46,196 --> 00:11:50,446
And I use atom, you can use any editor you'd really like to,

194
00:11:50,628 --> 00:11:53,934
but I'm going to go ahead and show you here what's inside here.

195
00:11:53,972 --> 00:11:58,270
So the directory structure for Scaffoldeth, there's a packages folder,

196
00:11:58,430 --> 00:12:01,586
and inside this packages folder there's really two places you're going to be

197
00:12:01,608 --> 00:12:05,682
the most hard hat and react. Hard hat obviously is

198
00:12:05,736 --> 00:12:09,058
where you're going to do everything with your smart contract. So we can see there's

199
00:12:09,074 --> 00:12:12,310
a contract folder and then there's your contract. And so

200
00:12:12,380 --> 00:12:14,982
this is kind of like a hello world.

201
00:12:15,116 --> 00:12:19,202
It's called the purpose or the set purpose smart contract.

202
00:12:19,346 --> 00:12:22,986
And it's called your contract actually here. And it

203
00:12:23,008 --> 00:12:26,358
allows us to take a variable which is defined here as a string,

204
00:12:26,454 --> 00:12:29,740
and it allows us to update that variable to a new function

205
00:12:30,190 --> 00:12:33,674
using a new function. So we can set a new purpose that gets passed

206
00:12:33,722 --> 00:12:37,742
in that transaction. And we can also log

207
00:12:37,796 --> 00:12:41,566
out console output to the hard hat console and emit an event.

208
00:12:41,668 --> 00:12:44,866
But then here's where we update the state. So we actually update that new

209
00:12:44,888 --> 00:12:48,802
variable. So let's see, looks like react started

210
00:12:48,856 --> 00:12:53,010
up successfully. So let's just take a quick look at Scaffoldeth.

211
00:12:53,910 --> 00:12:57,506
You'll see here in the corner we have this little night and dark mode where

212
00:12:57,528 --> 00:13:00,646
we could switch between. Whatever your preference is. We'll go ahead and just

213
00:13:00,668 --> 00:13:04,054
stick to light mode and you'll see when you first get into Scaffoldeth again,

214
00:13:04,092 --> 00:13:07,606
everything is in react. And there's all these cool tabs here that allows us to

215
00:13:07,628 --> 00:13:10,710
go through and kind of browse what's going on. This first

216
00:13:10,780 --> 00:13:14,202
tab here is really where you're going to build out an app. If you are

217
00:13:14,256 --> 00:13:17,674
a react front end developer and you want to build your app, you'll start

218
00:13:17,712 --> 00:13:22,486
building it into this home JSX file which is inside packages react

219
00:13:22,678 --> 00:13:26,382
source of use home JSX, but where the magic sauce is,

220
00:13:26,436 --> 00:13:30,414
is actually here in this debug contracts folder. Now we can see that we have

221
00:13:30,532 --> 00:13:34,046
the purpose, which I showed you inside the smart contract, and we also have

222
00:13:34,068 --> 00:13:37,620
the function that's already been displayed here that shows us

223
00:13:37,990 --> 00:13:40,962
the ability to change that function. So if I wanted to,

224
00:13:41,016 --> 00:13:44,658
I could say conf 42, exclamation mark, exclamation mark and

225
00:13:44,664 --> 00:13:48,098
hit send. And it says, oh, there's a transaction error. I don't

226
00:13:48,114 --> 00:13:51,682
have enough funds to fund the transaction. Now normally

227
00:13:51,826 --> 00:13:55,126
you might connect your application to metamask or

228
00:13:55,148 --> 00:13:58,614
wallet connect or something like that. But you'll see here that one

229
00:13:58,652 --> 00:14:02,314
concept of building on Ethereum is you have a wallet and the wallet holds your

230
00:14:02,352 --> 00:14:06,346
public and your private key. So you sign transactions with

231
00:14:06,368 --> 00:14:10,266
your private key so that they can be verified using your public key. So we

232
00:14:10,288 --> 00:14:13,434
already see that we have a wallet that's built into the application, which is really

233
00:14:13,472 --> 00:14:16,618
cool. And there's also a button right here where I can just grab some funds,

234
00:14:16,714 --> 00:14:20,046
so I can grab some funds from hard hat and they get thrown into my

235
00:14:20,068 --> 00:14:23,502
wallet. So now I've got $11.60, $0.09 or

236
00:14:23,556 --> 00:14:26,846
zero one ether if I click it, but it shows me how much

237
00:14:26,868 --> 00:14:30,242
ether I have. Now I can hit send and I can update that state

238
00:14:30,296 --> 00:14:33,266
because now I was able to pay a little bit of gas to change the

239
00:14:33,288 --> 00:14:37,218
state. Remember I said anytime you change state on an ethereum application,

240
00:14:37,384 --> 00:14:40,882
you need to pay that gas. So I could grab some more funds,

241
00:14:40,946 --> 00:14:43,766
I can click the address right here and copy it, and I can come down

242
00:14:43,788 --> 00:14:47,574
to this wallet and I could paste in my address and I could get like,

243
00:14:47,612 --> 00:14:51,194
I don't know, let's get ten eth from the hard

244
00:14:51,232 --> 00:14:54,758
hat and it's going to send it from the hard hat node

245
00:14:54,854 --> 00:14:58,474
directly to my wallet. Here we go. So now

246
00:14:58,512 --> 00:15:01,558
I've got ten point 99 eth

247
00:15:01,654 --> 00:15:04,906
and I've got $11,699 of Ethereum

248
00:15:04,938 --> 00:15:08,638
that I can start playing around with. So let's just show you what it looks

249
00:15:08,724 --> 00:15:11,886
to make a change. So we have an example, we have

250
00:15:11,908 --> 00:15:15,118
this payable function here. Let's get rid of payable just for a second,

251
00:15:15,204 --> 00:15:18,606
save it, and let's go back to our terminal and let's do

252
00:15:18,628 --> 00:15:21,838
a deploy again. But this time let's reset it. So we'll do

253
00:15:21,844 --> 00:15:25,158
a yarn deploy reset. Now what that's going to do is it's going

254
00:15:25,164 --> 00:15:28,486
to force a new contract to be deployed. And we

255
00:15:28,508 --> 00:15:31,766
can see that it was successful, we can see some calls and we can see

256
00:15:31,788 --> 00:15:34,566
that it was successful and how long it took and how much gas it took

257
00:15:34,588 --> 00:15:38,006
to deploy our smart contract. So now if we come back here, we get a

258
00:15:38,028 --> 00:15:41,330
new Copy, everything is reset again. But now you'll notice that

259
00:15:41,340 --> 00:15:44,506
the UI changed. Now there's not another field here. So if we were to

260
00:15:44,528 --> 00:15:48,090
change that back, let's go ahead and do that, put that back to payable

261
00:15:48,990 --> 00:15:52,838
and hit save, sorry, save, and then redeploy.

262
00:15:53,014 --> 00:15:56,094
And look at the UI. And after we do that deploy, we'll get a new

263
00:15:56,132 --> 00:15:59,150
copy of the contract here. You'll see. This is the contract address. Now we get

264
00:15:59,220 --> 00:16:02,846
that field back. So what's happening is the UI is adapting based on

265
00:16:02,868 --> 00:16:06,574
our smart contract so that we can test it. So let's start testing.

266
00:16:06,622 --> 00:16:10,194
Let's start building something interesting. Okay, so the first thing you

267
00:16:10,232 --> 00:16:13,906
learn in building a decentralized application is you might want to do

268
00:16:13,928 --> 00:16:17,258
access control of the contract. So let's define

269
00:16:17,294 --> 00:16:20,834
a new variable that's publicly available called boss.

270
00:16:20,882 --> 00:16:24,566
Let's call it boss. And let's grab this address here and

271
00:16:24,588 --> 00:16:27,986
let's paste it in here so that we have this new address variable.

272
00:16:28,018 --> 00:16:31,338
This is our public key of our wallet that we have. And let's set a

273
00:16:31,344 --> 00:16:35,354
require statement. So let's go require that the message

274
00:16:35,552 --> 00:16:38,614
sender is equal, equal to the boss.

275
00:16:38,742 --> 00:16:42,906
Otherwise you not the boss like

276
00:16:42,928 --> 00:16:47,054
that. Right. And it saved that. And now let's redeploy our change.

277
00:16:47,252 --> 00:16:50,446
Let's make sure it goes through successfully, which it looks like it did.

278
00:16:50,548 --> 00:16:53,530
And now let's go back to our app. So now we have this new variable.

279
00:16:53,610 --> 00:16:57,090
We have the boss variable. And if I come over here and I go say,

280
00:16:57,160 --> 00:17:00,706
let's go, new incognito window, and let's go to the app on

281
00:17:00,728 --> 00:17:04,178
an incognito window. Now what happens? What do we get here?

282
00:17:04,344 --> 00:17:08,862
We get a copy of the application on localhost 3000.

283
00:17:09,016 --> 00:17:12,322
But what do we got? We have a new user, we have a new wallet,

284
00:17:12,386 --> 00:17:15,926
a new burner wallet, and every time that you open up

285
00:17:15,948 --> 00:17:19,334
a new incognito window, you're going to get a new burner wallet. So now

286
00:17:19,372 --> 00:17:22,602
we have this identity and this identity. So now we can test

287
00:17:22,656 --> 00:17:26,042
that. So let's come over here and say, comp 42 is

288
00:17:26,096 --> 00:17:29,626
cool, and go like this and hit send. Well, I'm not

289
00:17:29,648 --> 00:17:33,326
the boss, so I can't change that because I'm not the owner of the

290
00:17:33,348 --> 00:17:36,542
smart contract. But if I come over here and say,

291
00:17:36,676 --> 00:17:40,090
comp 42, I am the boss,

292
00:17:40,250 --> 00:17:43,534
like that and hit send, it's going to let me, because I have

293
00:17:43,572 --> 00:17:47,258
access control of this smart contract I've created. Kind of like a

294
00:17:47,284 --> 00:17:51,186
janky access control, essentially. So that's actually not the

295
00:17:51,208 --> 00:17:54,018
right way to do access control because we're doing a lot of hard coding and

296
00:17:54,024 --> 00:17:57,446
we're doing a decent amount of work to do that. The best way

297
00:17:57,468 --> 00:18:01,266
to do it with Scaffoldeth is to instead let's

298
00:18:01,298 --> 00:18:04,902
not create our hard coded address. Let's do what's called

299
00:18:04,956 --> 00:18:08,442
importing and inheritance so we can import another

300
00:18:08,496 --> 00:18:12,326
contract. So you can see here we have an open zeppelin smart

301
00:18:12,358 --> 00:18:16,090
contract called ownable, which is kind of like the de facto company

302
00:18:16,160 --> 00:18:20,006
that creates industry standard smart

303
00:18:20,038 --> 00:18:23,534
contracts and so we can inherit what they've already done and use their work.

304
00:18:23,652 --> 00:18:27,610
So instead we can say is ownable. So we can say our contract,

305
00:18:27,770 --> 00:18:31,018
we've imported it, it's available, and now it's called ownable.

306
00:18:31,114 --> 00:18:34,958
So it's an inherited smart contract within there. And so if

307
00:18:34,964 --> 00:18:38,270
we save that now and then redeploy,

308
00:18:38,430 --> 00:18:41,762
let's see what happens to the UI. Let's make sure it was successful first,

309
00:18:41,896 --> 00:18:45,506
which it was, and let's take a look and see what changes. Well,

310
00:18:45,608 --> 00:18:48,946
first of all, now we get an owner variable which not boss anymore,

311
00:18:48,978 --> 00:18:52,514
it's called owner. But we also get some inherited functions

312
00:18:52,562 --> 00:18:55,782
that came because we imported and inherited that other

313
00:18:55,836 --> 00:19:00,534
smart contract. We can start utilizing those inherited solidity

314
00:19:00,662 --> 00:19:04,614
files. And so we have a transfer ownership Jones and we have a renounced ownership

315
00:19:04,662 --> 00:19:08,266
one. But there's one issue here. I have this address here

316
00:19:08,288 --> 00:19:11,658
as my burner wallet, as we would say,

317
00:19:11,744 --> 00:19:15,102
but it does not match our owner here. So where is that coming from?

318
00:19:15,156 --> 00:19:18,986
This address is kind of just this random address. Well, hard hat

319
00:19:19,178 --> 00:19:22,254
has a list of 20 accounts and it uses the very,

320
00:19:22,292 --> 00:19:25,794
very first address to deploy your smart contract. So right now this

321
00:19:25,832 --> 00:19:29,410
contract is technically being owned by a hard hat

322
00:19:30,150 --> 00:19:34,034
key. And so what we need to do next is go into the

323
00:19:34,072 --> 00:19:38,258
deploy folder right below and we'll see here that we have a

324
00:19:38,344 --> 00:19:41,606
deployment script. Let me just get rid of this so we can

325
00:19:41,628 --> 00:19:45,094
see it a little bit better. And we can see what we do is we

326
00:19:45,132 --> 00:19:48,674
get a copy of the named accounts using JavaScript

327
00:19:48,802 --> 00:19:52,494
and we grab the very first one and that is going to be the deployer.

328
00:19:52,562 --> 00:19:55,686
And then here we set the rules on how we're going to deploy our smart

329
00:19:55,718 --> 00:19:58,810
contract. So it's called deployer. And then we can

330
00:19:58,880 --> 00:20:02,106
get a copy of our smart contract right here. So this is where we actually

331
00:20:02,128 --> 00:20:05,882
do the deploy. This is where we get a copy of our contract.

332
00:20:05,946 --> 00:20:08,474
So what we can do is now that we have a copy of our contract,

333
00:20:08,602 --> 00:20:12,030
we can call that function that we talked about before.

334
00:20:12,180 --> 00:20:16,238
So we can call this transfer ownership function, which is what we see down here,

335
00:20:16,404 --> 00:20:19,714
and we can add an address. So what we can do is grab our address,

336
00:20:19,832 --> 00:20:22,974
right? And we can pass that address in the contract

337
00:20:23,022 --> 00:20:27,154
call. So you can use JavaScript to make contract calls as

338
00:20:27,192 --> 00:20:30,598
well, using like, as you can see here, you can also, if you need to

339
00:20:30,604 --> 00:20:33,654
pass any arguments to your constructor, you can do that here as well.

340
00:20:33,692 --> 00:20:37,094
So let's say you wanted to name your token, I don't know,

341
00:20:37,132 --> 00:20:40,214
dogecoin and you wanted it to have a supply of seven.

342
00:20:40,252 --> 00:20:44,026
Seven, Kevin or something like that. You would pass those into the

343
00:20:44,048 --> 00:20:47,066
arguments. I just wanted to mention that because that's good to know, but I'm not

344
00:20:47,088 --> 00:20:50,246
going to do that right now. So let's save this and now let's redeploy

345
00:20:50,278 --> 00:20:54,426
one more time and see what we get. It was successful

346
00:20:54,618 --> 00:20:58,122
and now we see boom. Now we've got access back to the smart contract.

347
00:20:58,186 --> 00:21:01,934
Okay, so we've deployed this smart contract and we've started

348
00:21:01,972 --> 00:21:05,150
kind of, you see what we're doing, we're testing and we're deploying and making

349
00:21:05,220 --> 00:21:08,786
changes and we're kind of using these three windows as

350
00:21:08,808 --> 00:21:12,066
kind of like our ide environment. Right? We have a UI that

351
00:21:12,088 --> 00:21:15,886
can test, we have our editor and we're using just these deploy commands.

352
00:21:15,918 --> 00:21:18,646
And I could just keep resetting if I needed to get a new copy of

353
00:21:18,668 --> 00:21:21,122
the contract. And there we go, we got a new contract.

354
00:21:21,186 --> 00:21:25,190
So this isn't a very interesting contract though because basically

355
00:21:25,260 --> 00:21:29,206
we're not really doing anything super crazy here. All we're doing is just

356
00:21:29,308 --> 00:21:33,258
have a function that allows us to change a state and we

357
00:21:33,264 --> 00:21:36,554
were going to make it only owner, which let's instead not

358
00:21:36,592 --> 00:21:40,438
do that. Let's instead make people pay a certain value

359
00:21:40,624 --> 00:21:44,350
to update the smart contract. So let's go require

360
00:21:44,770 --> 00:21:48,910
that the message value that's passed across in

361
00:21:49,060 --> 00:21:52,494
the request or in the transaction is equal to a

362
00:21:52,532 --> 00:21:56,462
price that we set. Okay? And if not we'll say send

363
00:21:56,596 --> 00:22:00,798
mo money boma mom, like this. And we'll

364
00:22:00,814 --> 00:22:04,126
set that price up here. So we'll go un, which is unsigned

365
00:22:04,158 --> 00:22:07,446
integer, we'll make it public, we'll call it price and we will

366
00:22:07,468 --> 00:22:10,134
make it zero point Jones.

367
00:22:10,252 --> 00:22:13,810
Ether. Ether is the native currency.

368
00:22:13,970 --> 00:22:17,494
When we're dealing in the blockchain, we're actually dealing. As far

369
00:22:17,532 --> 00:22:21,526
as interacting with adapt, we're dealing in way. So you

370
00:22:21,548 --> 00:22:24,954
can see here there's a math that's being done that shows us how much way

371
00:22:24,992 --> 00:22:28,506
that is. We're going to use ether because it's easier to read here, but on

372
00:22:28,528 --> 00:22:31,990
your front end you'll need to make some calculations and I'll get to that

373
00:22:32,000 --> 00:22:35,486
in a second. But let's set that. And now let's say save and

374
00:22:35,508 --> 00:22:39,950
then let's redeploy again. So now that the smart contract is payable,

375
00:22:40,290 --> 00:22:42,670
well, the function is payable.

376
00:22:44,050 --> 00:22:47,214
We already had this transaction value. So if we were to change it

377
00:22:47,252 --> 00:22:51,106
here to comp 42 for the purpose and hit send, it's going to say,

378
00:22:51,128 --> 00:22:54,258
no, you need to send some money. Okay, so let's send some money. So what

379
00:22:54,264 --> 00:22:57,682
do we got here? We have a new variable that keeps track of our price.

380
00:22:57,816 --> 00:23:01,046
Let's grab it and let's paste it here. Now you'd think you

381
00:23:01,068 --> 00:23:03,974
could just hit send and it would work. Well, remember I told you before,

382
00:23:04,012 --> 00:23:07,794
we need to transact in way which is the lowest denomination

383
00:23:07,842 --> 00:23:11,466
value of ether. So there's this cool green button here that does the math for

384
00:23:11,488 --> 00:23:14,986
us. So one eth is times ten to

385
00:23:15,008 --> 00:23:18,998
the 18th power in way. So we can click that right here and it's

386
00:23:19,014 --> 00:23:21,626
going to do that math for us and it's going to tell us how much

387
00:23:21,648 --> 00:23:25,006
way we need to send. So boom, we can send that. And then it worked.

388
00:23:25,108 --> 00:23:28,350
So now we were able to update the smart contract. And what's interesting

389
00:23:28,420 --> 00:23:33,226
now is now we have some value in the smart contract. So it's $11.67.

390
00:23:33,258 --> 00:23:36,414
So now let's figure out a way to get that money out because

391
00:23:36,452 --> 00:23:40,190
right now it's a black hole. We have no way to get the smart contract's

392
00:23:40,270 --> 00:23:43,394
value out. So how do we do that? Well, let's go back to

393
00:23:43,432 --> 00:23:47,106
our smart contract and let's make a new function and let's

394
00:23:47,138 --> 00:23:48,870
call it withdrawal.

395
00:23:50,090 --> 00:23:55,320
And let's make it public and

396
00:23:56,490 --> 00:23:59,114
let's set a boolean called success.

397
00:23:59,312 --> 00:24:02,794
Otherwise we won't. And then if that's successful and

398
00:24:02,832 --> 00:24:06,006
someone's able to call this, we will do a message sender.

399
00:24:06,038 --> 00:24:09,318
So we'll reference the person calling the transaction

400
00:24:09,494 --> 00:24:13,914
and we will do a call. So a call is kind of like a

401
00:24:13,952 --> 00:24:17,258
transfer function in Ethereum. It allows you to take funds from a smart

402
00:24:17,274 --> 00:24:20,538
contract to an address. Anytime you're sending value from a smart

403
00:24:20,554 --> 00:24:23,918
contract to the address, you should do a call. And so we're going to

404
00:24:23,924 --> 00:24:26,446
do value and then what we're going to do is we're just going to grab

405
00:24:26,478 --> 00:24:30,610
the balance of this smart contract so this

406
00:24:30,680 --> 00:24:34,286
address, which is this smart contract's balance, and then we're

407
00:24:34,318 --> 00:24:37,506
going to close that off. And what do we want

408
00:24:37,528 --> 00:24:41,174
to make sure we do here? Well, we talked about access control. Let's make sure

409
00:24:41,212 --> 00:24:44,722
that this is only the owner. Now, you'll notice I'm typing only owner

410
00:24:44,786 --> 00:24:48,070
up here on this function, and that's because we have access

411
00:24:48,140 --> 00:24:51,818
to the modifier that comes with ownable, ownable has this

412
00:24:51,824 --> 00:24:54,854
thing called a modifier only owner modifier,

413
00:24:54,902 --> 00:24:58,906
which modifiers allow you to change restrictions on what can be happening

414
00:24:59,008 --> 00:25:03,058
inside of a particular function. So you can create a modifier and then reference

415
00:25:03,094 --> 00:25:06,974
the modifier so that you can save on your

416
00:25:07,012 --> 00:25:10,558
coding. So we're just going to reference this only owner modifier and then we're going

417
00:25:10,564 --> 00:25:14,320
to save. And then we're going to go ahead and deploy one more time.

418
00:25:15,330 --> 00:25:19,058
And so now let's make sure it worked, which it was.

419
00:25:19,224 --> 00:25:22,306
Now we can take a look and see. So now let's put some value in

420
00:25:22,328 --> 00:25:25,570
here. Let's change it to comp 42 is

421
00:25:25,640 --> 00:25:28,520
awesome. Like this hit send.

422
00:25:29,050 --> 00:25:32,566
And now we've got some value in the smart contract. So now let

423
00:25:32,588 --> 00:25:36,742
me come over here to this little purple dude, sorry, this little

424
00:25:36,876 --> 00:25:40,566
kind of blacky green guy, and let's try to get this funds out. Let's go

425
00:25:40,588 --> 00:25:44,074
down here to the bottom and we'll see. We have this withdrawal function. Let's hit

426
00:25:44,112 --> 00:25:47,242
it. It's going to tell me, no, I'm not the owner. I don't have access

427
00:25:47,296 --> 00:25:50,566
to call that function. Okay, so now we've got those funds

428
00:25:50,598 --> 00:25:54,218
in there that are locked up, which is good. And because I'm the owner here

429
00:25:54,304 --> 00:25:57,726
now, I should be able to come over here. So we have 1167 let me

430
00:25:57,748 --> 00:26:01,086
hit withdrawal. It's successful. And I was able to pull that

431
00:26:01,108 --> 00:26:03,770
into my wallet. So I was able to take it out of the smart contract.

432
00:26:03,850 --> 00:26:07,122
And so now we have this vending machine that's kind of in the cloud

433
00:26:07,176 --> 00:26:10,946
that we can start doing interesting things with. Now the next step is that

434
00:26:10,968 --> 00:26:14,866
we would probably do something like figure out

435
00:26:14,888 --> 00:26:18,310
a way how we can deploy this smart contract. So everything we've been doing is

436
00:26:18,380 --> 00:26:21,986
kind of locally. The first thing you'll understand when you're

437
00:26:22,018 --> 00:26:23,910
deploying to a blockchain,

438
00:26:25,610 --> 00:26:28,806
you need to have an account that's trusted and

439
00:26:28,828 --> 00:26:32,146
you have control of the keys because the accounts that come with hard hat

440
00:26:32,178 --> 00:26:35,638
are just, everyone has access to them. So you want to use your own deployer

441
00:26:35,654 --> 00:26:39,078
account. So all you have to do is do a yarn run generate.

442
00:26:39,174 --> 00:26:41,982
And what it's going to do is it's going to spin up a deployer account

443
00:26:42,116 --> 00:26:45,786
based off of a random mnemonic. Now, a mnemonic is just a random

444
00:26:45,818 --> 00:26:50,014
number of letters, or I should say words that

445
00:26:50,052 --> 00:26:53,838
compromise or not compromise, but comprise of your password. So if

446
00:26:53,844 --> 00:26:57,246
you put them together and hash them, you get your password, your private

447
00:26:57,278 --> 00:27:00,370
key, essentially. So here we have a new deployer,

448
00:27:00,710 --> 00:27:04,254
and it's available to use. And so we could do a yarn

449
00:27:04,302 --> 00:27:06,260
account like this,

450
00:27:08,790 --> 00:27:12,198
and now we have access to the QR code for that account. Sorry, let me

451
00:27:12,204 --> 00:27:15,414
hit it again. And so this is really cool because if you

452
00:27:15,452 --> 00:27:19,666
have a wallet on your phone, so like, I have a wallet

453
00:27:19,698 --> 00:27:23,322
on here, and I could send some ether from my

454
00:27:23,376 --> 00:27:26,582
wallet on my phone. So I have a punk wallet,

455
00:27:26,646 --> 00:27:29,290
which is also a cool wallet that's available.

456
00:27:29,440 --> 00:27:32,982
You guys can kind of see it right here. It's the punk wallet.

457
00:27:33,126 --> 00:27:36,366
And I have some money in there. I have some guerli eth. Now, Guerli is

458
00:27:36,388 --> 00:27:39,566
the testnet for, you know, of course you

459
00:27:39,588 --> 00:27:42,426
don't want to deploy to mainnet right away. You'd want to deploy to a testnet

460
00:27:42,458 --> 00:27:46,590
where other people can interact with your smart contract. Again, we've been doing everything locally,

461
00:27:46,670 --> 00:27:49,842
so it's got this cool scanning option. So I can just go ahead and hit

462
00:27:49,896 --> 00:27:53,170
scan. And then I scanned it, and I got access

463
00:27:53,240 --> 00:27:57,074
to this address on here. It did the translation for me, which is really

464
00:27:57,112 --> 00:28:00,162
cool. And then I can come over here and I can send myself some eth.

465
00:28:00,226 --> 00:28:04,262
So let me do ether, and let me

466
00:28:04,316 --> 00:28:07,000
send, I don't know, let me just send like $10,

467
00:28:13,670 --> 00:28:17,406
see if it works. So I just sent some eth.

468
00:28:17,518 --> 00:28:21,518
Might take a sec for it to go through. While it's

469
00:28:21,534 --> 00:28:23,140
doing that, we'll go ahead and do that.

470
00:28:24,870 --> 00:28:28,386
Okay, so while we're waiting for that transaction to go through, let's go ahead and

471
00:28:28,408 --> 00:28:31,558
take a look real quickly at the react code, because the

472
00:28:31,564 --> 00:28:34,562
next thing you're going to want to do is after you deploy your smart contract

473
00:28:34,626 --> 00:28:37,926
to a testnet, you'll probably need to update your front end so that you can

474
00:28:37,948 --> 00:28:41,562
interact with that testnet. So here we can go to react app,

475
00:28:41,616 --> 00:28:44,490
we can go to source, and we can go to app JSX.

476
00:28:45,310 --> 00:28:49,690
And then what we can do is come here to the very top,

477
00:28:49,760 --> 00:28:53,502
and we can see that we have this network localhost. Okay, so we could change

478
00:28:53,556 --> 00:28:56,538
this to Guerreli by just doing network gawarely.

479
00:28:56,634 --> 00:29:00,160
So then what we're able to do is. Sorry, let me send this again.

480
00:29:01,410 --> 00:29:02,898
We'll do. Sorry.

481
00:29:02,984 --> 00:29:08,660
0.0.1 e.

482
00:29:09,510 --> 00:29:12,994
That works. Okay, sorry, I had to resend the transaction. So if we save

483
00:29:13,032 --> 00:29:15,826
that now, we can update our front end. So if we come over here and

484
00:29:15,848 --> 00:29:19,410
refresh our application, then it's going to attempt to reach that contract

485
00:29:19,930 --> 00:29:23,238
on Guerrero. So you can see here it updated to Guerrero. But there's a

486
00:29:23,244 --> 00:29:26,674
problem here. It's not loading the smart contract. That's because I haven't deployed the smart

487
00:29:26,722 --> 00:29:29,734
contract to the testnet. So the next thing we want to do,

488
00:29:29,852 --> 00:29:33,170
let's check our balance again so we can just do yarn account and it's going

489
00:29:33,180 --> 00:29:36,618
to tell us if we have some Guerreli eth, which we should hopefully have it

490
00:29:36,624 --> 00:29:40,086
by now. There we go. Now we have some guerrelith because I just finally succeeded

491
00:29:40,118 --> 00:29:43,594
from my phone. So now what we can do is do we've been doing yarn

492
00:29:43,642 --> 00:29:48,202
deploy reset, we're going to do network

493
00:29:48,346 --> 00:29:51,198
and then type goerily like this.

494
00:29:51,364 --> 00:29:54,606
Now we're going to take our smart contract, we're going to use the funds that

495
00:29:54,628 --> 00:29:59,022
I sent from my burner wallet into this mnemonic deployer

496
00:29:59,086 --> 00:30:01,954
and we're going to publish that out. So you can see it's taking a little

497
00:30:01,992 --> 00:30:05,170
longer because the Goreli testnet is a little bit slower.

498
00:30:05,750 --> 00:30:08,440
So we'll go ahead and let that sit for just a second.

499
00:30:09,850 --> 00:30:13,110
Let me just go back real quick. While we're waiting for that, we can also

500
00:30:13,180 --> 00:30:16,966
look at the home or the views folder and we can

501
00:30:16,988 --> 00:30:20,566
see some of those other folders. So the home JSX I

502
00:30:20,588 --> 00:30:24,134
mentioned is where you're going to build out your application hints

503
00:30:24,182 --> 00:30:27,462
gives you some hints on where to go to reach different parts of the contract.

504
00:30:27,606 --> 00:30:31,226
But example UI is really useful. Example UI is exactly what

505
00:30:31,248 --> 00:30:34,554
we're looking at here. Okay, so it looks like it was successful. So my

506
00:30:34,592 --> 00:30:37,934
deploy was successful. You can see here how much gas it took and it

507
00:30:37,972 --> 00:30:40,826
worked. So I was able to deploy this. So now it's on Guerreroli and it's

508
00:30:40,858 --> 00:30:44,254
live. So if we were to click this, it would take us to

509
00:30:44,292 --> 00:30:47,886
Ethereum, scan and show us the contract. And we can see here that the deployment

510
00:30:47,918 --> 00:30:51,854
was successful. But if you look at the contract here, it's unverified.

511
00:30:51,982 --> 00:30:55,262
So next thing you want to do is anytime you deploy a smart contract,

512
00:30:55,326 --> 00:30:58,614
you probably want to verify your smart contract. So how do we do that?

513
00:30:58,652 --> 00:31:02,630
Well, let's grab the address for the smart contract, go back to our console

514
00:31:03,050 --> 00:31:06,566
and let's do a yarn verify paste the

515
00:31:06,588 --> 00:31:10,070
address network guerreli.

516
00:31:10,730 --> 00:31:14,378
So it's going to take our contract, compile it down,

517
00:31:14,464 --> 00:31:18,054
it's going to send over the smart contract to Etherscan, it's going to verify

518
00:31:18,102 --> 00:31:20,698
it, then send back the results to make sure it works, which it did.

519
00:31:20,784 --> 00:31:24,278
And so now if we come back here and refresh our contract tab, we can

520
00:31:24,304 --> 00:31:27,774
see that it's verified, it's got a little green checkmark and all the source code

521
00:31:27,812 --> 00:31:31,450
for my smart contract is now available here inside of Etherscan.

522
00:31:31,530 --> 00:31:35,358
So that's kind of a common thing when you build a decentralized application. You want

523
00:31:35,364 --> 00:31:38,658
to instill trust in it so people can see the code. So you always want

524
00:31:38,664 --> 00:31:41,966
to verify your smart contract, unless you're doing something like really secretive,

525
00:31:41,998 --> 00:31:44,946
that you don't want people to know how the contract is written, you're probably going

526
00:31:44,968 --> 00:31:48,354
to want to verify it. There's ways

527
00:31:48,392 --> 00:31:52,118
to verify it anyways, so it's better just to do the verification so

528
00:31:52,124 --> 00:31:54,902
that you know it's verified. But we can see now our app is working.

529
00:31:55,036 --> 00:31:58,470
There's one last thing that we need to do is

530
00:31:58,540 --> 00:32:02,598
we want to take our application and ship it out somewhere

531
00:32:02,694 --> 00:32:06,106
so we could do a yarn build, which is going to take

532
00:32:06,128 --> 00:32:09,638
a copy of our react app as it is right now, and it's

533
00:32:09,654 --> 00:32:13,526
going to kind of like make it so it's easily deployable

534
00:32:13,718 --> 00:32:17,166
and being able to transport it easily. So that might

535
00:32:17,188 --> 00:32:19,454
take a second to run. So let me get back to what I was saying

536
00:32:19,492 --> 00:32:22,826
before about these tabs. There's an example UI tab,

537
00:32:22,858 --> 00:32:25,326
which is really useful. So if you're going to build out your app and you

538
00:32:25,348 --> 00:32:28,834
want to know how to read in the purpose variable, or you want to

539
00:32:28,872 --> 00:32:32,514
set the purpose, or you want to read an address in or do

540
00:32:32,552 --> 00:32:36,414
what's called Ens resolution, or get a balance, there's all these cool examples

541
00:32:36,462 --> 00:32:39,558
here, buttons, and then there's an events tab, so we can

542
00:32:39,564 --> 00:32:42,818
see events, and then we can see a lot of examples

543
00:32:42,834 --> 00:32:46,920
of how you do like a toggle using ant design. So that

544
00:32:47,850 --> 00:32:51,398
example UI is a really good resource as you start to build out your application

545
00:32:51,484 --> 00:32:54,586
and you're looking for examples on what that would look like. So let's see if

546
00:32:54,608 --> 00:32:58,378
our build finished. So not done yet, but that's okay.

547
00:32:58,464 --> 00:33:01,866
Let me go back here real quick. Let's make a

548
00:33:01,888 --> 00:33:05,738
change with our smart contract while we're waiting. So here we have our smart contract.

549
00:33:05,914 --> 00:33:09,150
It requires zero point Jones eth. So let's go ahead and send some value

550
00:33:09,220 --> 00:33:12,634
in there. Let's do it over here from the incognito

551
00:33:12,762 --> 00:33:15,506
one. Oh, we can't do that one because we have an eth there. But this

552
00:33:15,528 --> 00:33:19,634
one, we have some eth in here. So let's do conf 42,

553
00:33:19,752 --> 00:33:21,940
exclamation mark, send some value,

554
00:33:22,470 --> 00:33:26,066
translate it, and hit send. And now you'll notice that I

555
00:33:26,088 --> 00:33:30,066
don't have enough funds to pay, so I need to connect my metamask.

556
00:33:30,098 --> 00:33:33,766
So at this point you might start using metamask metamask is just

557
00:33:33,788 --> 00:33:37,282
a browser based wallet. So let's go ahead and switch our network.

558
00:33:37,346 --> 00:33:41,046
So we connected with Metamask. I'm going to switch the network to

559
00:33:41,068 --> 00:33:44,246
the proper network. And if you want to learn how to get started with metamask,

560
00:33:44,278 --> 00:33:47,974
they have a really good getting started guide on how to install it. But metamask,

561
00:33:48,102 --> 00:33:52,094
it's a browser based wallet, right? It gives us this little browser wallet. So now

562
00:33:52,212 --> 00:33:56,094
I have a bunch of eth here. I've got 89 eth. So I can send

563
00:33:56,132 --> 00:33:59,630
a transaction. Now I can sign this transaction.

564
00:34:02,670 --> 00:34:05,770
Here we go. Confirm.

565
00:34:06,510 --> 00:34:10,334
So now I can update the smart contract. We can see that our transaction has

566
00:34:10,372 --> 00:34:13,642
started, and as soon as it's done, it'll get a little green checkmark.

567
00:34:13,706 --> 00:34:17,646
There we go. So I've made a test transaction. We can just hit refresh real

568
00:34:17,668 --> 00:34:21,394
quick, make sure it's working, which we should have the new 42.

569
00:34:21,432 --> 00:34:24,622
There we go. And we have some value in the smart contract,

570
00:34:24,686 --> 00:34:27,234
so I should be able to also get the value out. So let's try that.

571
00:34:27,272 --> 00:34:30,526
Let's withdraw. Unpredictable gas

572
00:34:30,558 --> 00:34:34,386
limit. Oh, no, that's not good. Okay, so maybe my funds

573
00:34:34,418 --> 00:34:37,400
are trapped in there. I'm not sure why I did this,

574
00:34:37,850 --> 00:34:40,646
because I'm not the owner anymore. So what I could do is I could do

575
00:34:40,668 --> 00:34:43,114
this. I could say, log out,

576
00:34:43,312 --> 00:34:46,634
right? And then I can grab my address for

577
00:34:46,672 --> 00:34:50,202
crypto mastery, which is my cryptomastery etH, which is my

578
00:34:50,256 --> 00:34:53,882
account here, and I can transfer the ownership to

579
00:34:53,936 --> 00:34:57,566
me so I can hit send. It's going to let me do that. There it

580
00:34:57,588 --> 00:35:00,670
goes. So let's transfer the ownership.

581
00:35:01,090 --> 00:35:04,718
So I have the burner wallet. I logged out of my metamask. I'm in the

582
00:35:04,724 --> 00:35:08,014
burner wallet. I'm transferring the ownership to my metamask account,

583
00:35:08,132 --> 00:35:10,180
which it should work any second now.

584
00:35:12,310 --> 00:35:15,166
There we go. It succeeded. So now I'm the owner. So now I can reconnect

585
00:35:15,198 --> 00:35:18,706
my metamask. See what we're doing? We're transferring the ownership of the contract, and now

586
00:35:18,728 --> 00:35:22,710
I can withdraw this fund. So there's 1168 in there. Let's do a withdraw,

587
00:35:24,010 --> 00:35:27,634
and we just got to sign the transaction. We got to pay a little gas,

588
00:35:27,682 --> 00:35:30,678
right? Let's do that. It's starting to transfer,

589
00:35:30,764 --> 00:35:33,430
so any day now, we're going to see this succeeds.

590
00:35:36,920 --> 00:35:39,780
We're still working on our local host Ui, though.

591
00:35:39,850 --> 00:35:43,108
Okay, so let's refresh. Let's see if it's all gone. Cool. We drained the

592
00:35:43,114 --> 00:35:46,488
contract, so we're using our local host Ui. The last thing you're going

593
00:35:46,494 --> 00:35:50,184
to want to do is either do Yarnipfs, which will ship our

594
00:35:50,222 --> 00:35:54,004
application to ipfs, or you can do yarn

595
00:35:54,052 --> 00:35:57,236
surge. Yarn surge is like a static file hosting

596
00:35:57,268 --> 00:36:00,596
service. So now that we've done a build of our build, we can just surge

597
00:36:00,628 --> 00:36:03,036
it and then we can name it whatever we want. We'll just keep it.

598
00:36:03,058 --> 00:36:06,348
This actually absolutegrain surge sh we're going

599
00:36:06,354 --> 00:36:09,804
to ship that. It's going to take all of our source code for our

600
00:36:09,842 --> 00:36:13,704
UI and upload it, or I should say our static assets.

601
00:36:13,752 --> 00:36:16,416
It's going to upload it for us. And so now we can just go to

602
00:36:16,438 --> 00:36:19,916
this website and if you guys are at home today and you have some testnet

603
00:36:19,948 --> 00:36:24,130
ether, you guys can interact with the application. Let's go there.

604
00:36:25,140 --> 00:36:29,056
There we go. So now we've got the debug contracts.

605
00:36:29,088 --> 00:36:32,244
We can see here that it's conf fourty two and we've deployed it. So in

606
00:36:32,282 --> 00:36:36,256
all that time that it took right now, we wrote a smart contract, we tested

607
00:36:36,288 --> 00:36:39,336
it a little bit, we set up access control, we transferred ownership of the

608
00:36:39,358 --> 00:36:42,404
contract, we updated state, we even withdrew

609
00:36:42,452 --> 00:36:45,800
some funds from the smart contract and we generated a build

610
00:36:45,870 --> 00:36:49,416
and we pushed that build out. And so we did the whole bam, the whole

611
00:36:49,438 --> 00:36:53,628
shabam. We deployed the application. And so the next steps from here would be

612
00:36:53,714 --> 00:36:57,064
if you get to this point where you get comfortable enough, if you're not comfortable

613
00:36:57,112 --> 00:37:00,796
with solidity, there's a great website called solidity by example which will

614
00:37:00,818 --> 00:37:03,968
also show you how to do things like how

615
00:37:03,974 --> 00:37:07,040
to do constants, how to do if else

616
00:37:07,110 --> 00:37:10,544
statements, right? All these cool examples are in

617
00:37:10,582 --> 00:37:13,868
here. So solidity by example is a great one. And there's also a bunch

618
00:37:13,884 --> 00:37:17,156
of YouTube videos as well. So if you want to understand the

619
00:37:17,178 --> 00:37:20,580
smart contract programmer, YouTube is really good as well for learning.

620
00:37:20,730 --> 00:37:25,092
Once you get to comfortable with building, then you'll want to go to speedrunnerium.com.

621
00:37:25,146 --> 00:37:27,908
And this is your kind of next step, right as you get kind of a

622
00:37:27,914 --> 00:37:30,968
little bit better and you'll start doing these quests. Like the first one is you

623
00:37:30,974 --> 00:37:34,648
build an NFT, second one is you do a decentralized staking app,

624
00:37:34,734 --> 00:37:37,736
then you do a token vendor, then you do a dice game and then you

625
00:37:37,758 --> 00:37:40,828
get invited to the build guild, which is what I'm in. And this is like

626
00:37:40,834 --> 00:37:44,716
a group of developers that are kind of excited to teach and

627
00:37:44,738 --> 00:37:48,108
build up the ethereum ecosystem. It's a public goods and you

628
00:37:48,114 --> 00:37:51,612
can actually get paid to

629
00:37:51,746 --> 00:37:55,244
be part of the build guild and do things for the build guild, like create

630
00:37:55,282 --> 00:37:58,428
special builds or create videos or whatever it

631
00:37:58,434 --> 00:38:01,756
is that you're passionate about and you're excited about on web three, you can do

632
00:38:01,778 --> 00:38:05,476
so speedruneterium.com, that's the best route after you

633
00:38:05,498 --> 00:38:08,628
get going. So I thank you guys so much for your time, and I

634
00:38:08,634 --> 00:38:11,412
hope this was a valuable talk for you guys.

635
00:38:11,546 --> 00:38:14,770
And yeah, enjoy the rest of the conference, and I'll catch you guys next time.

