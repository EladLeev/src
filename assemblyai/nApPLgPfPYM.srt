1
00:00:00,250 --> 00:00:04,190
You might be wondering, who is this guy? So, my name is Luka Kladaric.

2
00:00:04,610 --> 00:00:07,354
I am the chaos manager at Sekura Collective.

3
00:00:07,482 --> 00:00:11,550
We deal with chaos. We don't do greenfield development, we don't do features.

4
00:00:11,970 --> 00:00:15,246
We don't put buttons on websites. We won't build your mobile app.

5
00:00:15,348 --> 00:00:18,718
If you are drowning in tech, debt, performance or security issues, we'll put you on

6
00:00:18,724 --> 00:00:21,806
the right track and then hand off either to an in house team or to

7
00:00:21,828 --> 00:00:24,670
a different agency for long term maintenance.

8
00:00:25,530 --> 00:00:29,542
I've been a recovering web developer for over ten years. These days

9
00:00:29,596 --> 00:00:32,950
I mostly work as an architecture, infrastructure and security

10
00:00:33,020 --> 00:00:36,066
consultant. I'm also a former startup

11
00:00:36,098 --> 00:00:39,386
founder and a remote work evangelist. I've been

12
00:00:39,488 --> 00:00:42,698
working remotely for over ten years, so catch me here

13
00:00:42,784 --> 00:00:45,574
if you want to talk about remote engineering teams, remote hiring,

14
00:00:45,622 --> 00:00:49,002
et cetera. So what

15
00:00:49,056 --> 00:00:53,470
is a hostile environments? In this context, I consider any

16
00:00:53,540 --> 00:00:56,798
software development place where engineering is

17
00:00:56,804 --> 00:01:00,640
seen and treated as the implementing workforce of ideas that come from outside

18
00:01:01,090 --> 00:01:04,206
with little to no autonomy. Usually product or a

19
00:01:04,228 --> 00:01:07,746
similar team owns 100% of engineering time, and you have to

20
00:01:07,768 --> 00:01:11,986
claw back time to work on core stuff and

21
00:01:12,008 --> 00:01:15,554
to quickly loves tech debt, which I'm sure everyone knows what it is, but just

22
00:01:15,592 --> 00:01:18,886
to get the definition out, the definition I like

23
00:01:18,908 --> 00:01:22,806
is it's the implied cost of an easy solution over a slower and

24
00:01:22,828 --> 00:01:26,742
better approach accumulated over time. So how about

25
00:01:26,876 --> 00:01:30,214
quick example? Techdet is an API that

26
00:01:30,252 --> 00:01:33,722
returns a list of results with no pagination. You start with 20

27
00:01:33,776 --> 00:01:37,306
results and go like, yeah, I'll never grow beyond 100 elements. And then three

28
00:01:37,328 --> 00:01:40,358
years later you have thousands of elements in the response.

29
00:01:40,454 --> 00:01:44,442
The response is ten megabytes each, and so on. It's fragile

30
00:01:44,506 --> 00:01:47,934
code that everything runs through, things you're afraid to touch,

31
00:01:48,052 --> 00:01:51,242
afraid of breaking things, introducing unexpected behaviors.

32
00:01:51,386 --> 00:01:54,478
It's parts of the code base that nobody wants to touch. If you get a

33
00:01:54,484 --> 00:01:58,226
ticket saying something's wrong with user messaging and everyone backs away from their

34
00:01:58,248 --> 00:02:01,646
desk and starts staring at the floor, that's a measurable

35
00:02:01,678 --> 00:02:05,278
cue that it needs focused effort. It's entire systems

36
00:02:05,294 --> 00:02:08,918
that have become too complex to change or deprecate, and you're stuck with

37
00:02:08,924 --> 00:02:12,386
them forever because there's no reasonable amount of effort to fix or replace

38
00:02:12,418 --> 00:02:15,734
them. It's also broken tools and processes, but even

39
00:02:15,772 --> 00:02:19,738
worse, it's lack of confidence in the build and deploy process.

40
00:02:19,904 --> 00:02:24,650
Breakages should not roll out. Good deploys should always successfully deploy

41
00:02:25,550 --> 00:02:28,794
good builds. It's what you wish you could

42
00:02:28,832 --> 00:02:32,814
change, but can't afford to for various reasons. So where

43
00:02:32,852 --> 00:02:36,698
does tech debt even come from? It's insufficient upfront

44
00:02:36,714 --> 00:02:40,670
definition, tight coupling of components, lack of attention to

45
00:02:40,740 --> 00:02:43,826
the foundations and evolution over time.

46
00:02:44,008 --> 00:02:47,774
It's requirements that are still being worked on during development.

47
00:02:47,822 --> 00:02:51,374
Sometimes they don't even exist. Sometimes you get the requirements when you're halfway

48
00:02:51,422 --> 00:02:53,060
done or 90% done.

49
00:02:54,310 --> 00:02:57,662
So do any of these sound familiar?

50
00:02:57,806 --> 00:03:00,630
We'll get back to that later. Now you won't.

51
00:03:01,050 --> 00:03:04,674
Why does x have to be clean when y isn't? You see a pull request

52
00:03:04,722 --> 00:03:08,214
and you see a hard coded credential or an API key or something,

53
00:03:08,252 --> 00:03:11,846
and you say no credentials in the code base, please. And you get pushback

54
00:03:11,878 --> 00:03:15,274
saying, but look at this like cron job from four years ago with the hard

55
00:03:15,312 --> 00:03:17,850
coded SQL connection with the password.

56
00:03:18,510 --> 00:03:22,522
Hearing this every couple of weeks is

57
00:03:22,576 --> 00:03:26,674
draining to answer these questions constantly. That's techdet.

58
00:03:26,822 --> 00:03:30,430
People pushing back on good solutions is tech debt.

59
00:03:31,010 --> 00:03:34,526
We're a tiny startup. We can't afford to have perfect code a. Nobody's talking

60
00:03:34,548 --> 00:03:38,194
about perfect code b. No such thing exists. We're still

61
00:03:38,232 --> 00:03:41,746
trying to prove the product market fit. Once you do,

62
00:03:41,848 --> 00:03:45,474
you will need a product that somewhat works and the ability to run

63
00:03:45,512 --> 00:03:49,080
at 100%. You don't want your gold moment like

64
00:03:50,170 --> 00:03:53,686
when the business side works to be the complete

65
00:03:53,788 --> 00:03:57,480
technical breakdown of your stuff.

66
00:03:57,930 --> 00:04:01,290
When we make some money, things will be different. No, they won't.

67
00:04:03,950 --> 00:04:07,594
I see whoever's on the left side here used to

68
00:04:07,632 --> 00:04:11,326
live through this or is currently living through this. I love

69
00:04:11,348 --> 00:04:14,766
it. It's not just a fact of bad code,

70
00:04:14,868 --> 00:04:18,526
bad processes, bad tools, or whatever. It's people

71
00:04:18,628 --> 00:04:22,798
learning the bad behavior and then teaching the new hires the same

72
00:04:22,964 --> 00:04:26,334
as your team grows. Like if you have five people who

73
00:04:26,372 --> 00:04:29,858
have a bad process, just a bad approach to things,

74
00:04:29,944 --> 00:04:33,330
and you bring in ten fresh people, there's a chance this works out.

75
00:04:33,400 --> 00:04:36,950
But if your company grows to 50 people and you're still stuck in this state,

76
00:04:37,100 --> 00:04:40,454
you're going to be bringing people one by one or five by

77
00:04:40,492 --> 00:04:44,806
five. The bad people will outweigh the

78
00:04:44,828 --> 00:04:48,374
number of good folks by an order of magnitude, and the good folks

79
00:04:48,422 --> 00:04:51,866
will just be trained in the bad ways. They will have no chance of as

80
00:04:51,888 --> 00:04:54,940
the new person swaying you towards the light.

81
00:04:56,350 --> 00:05:00,186
So what's the actual harm? Unaddressed tech

82
00:05:00,208 --> 00:05:03,606
debt breeds more tech debt. Once some

83
00:05:03,648 --> 00:05:07,694
amount of it is allowed to survive and thrive, people are more likely to

84
00:05:07,732 --> 00:05:11,066
contribute lower quality solutions and be more offended when asked to improve

85
00:05:11,098 --> 00:05:14,030
them. So over time, productivity drops,

86
00:05:14,110 --> 00:05:17,966
deadlines slip, and reasons are manifold. You have some objective reasons,

87
00:05:17,998 --> 00:05:21,006
like it's difficult to achieve results with confidence.

88
00:05:21,118 --> 00:05:24,850
There's a high cognitive load of carefully treading through

89
00:05:24,920 --> 00:05:27,060
the existing jungle to make changes.

90
00:05:27,670 --> 00:05:30,914
Quality takes a nosedive and you start to see a clear separation

91
00:05:30,962 --> 00:05:33,986
between new and clean stuff, which was just shipped,

92
00:05:34,098 --> 00:05:37,746
and older code, which is six or more months old, which is instantly

93
00:05:37,778 --> 00:05:41,014
terrible. You will have the

94
00:05:41,052 --> 00:05:44,506
web team ship a brand new application like the

95
00:05:44,528 --> 00:05:48,394
beacon of light, and then six months later say, that's no longer how we do

96
00:05:48,432 --> 00:05:52,058
things and that should not be looked at as a

97
00:05:52,064 --> 00:05:55,598
guide. And it's like, what happened in the six months? How did it become

98
00:05:55,684 --> 00:05:59,166
the wrong way of doing things? And you

99
00:05:59,188 --> 00:06:02,830
end up with no clear root cause for issues or outages.

100
00:06:04,470 --> 00:06:07,378
There's nothing that you can point to and say, this is what we should have

101
00:06:07,384 --> 00:06:11,380
done six months ago to avoid this situation. It's just

102
00:06:12,310 --> 00:06:16,350
miserable. You have tanking morale among tech staff

103
00:06:16,430 --> 00:06:20,198
because they are demotivated from working on things that are horrible and

104
00:06:20,284 --> 00:06:23,586
people start avoiding unnecessary improvements. Abandon the Boy Scout

105
00:06:23,618 --> 00:06:26,978
rule. Leave things better than you found them. It's a death

106
00:06:26,994 --> 00:06:30,522
by a thousand cuts situation. One big pile of sadness for

107
00:06:30,576 --> 00:06:33,900
people who are supposed to be championing new and exciting work.

108
00:06:34,350 --> 00:06:37,894
And to this you might say developers are just spoiled,

109
00:06:37,942 --> 00:06:41,402
right? False. It's a natural human

110
00:06:41,456 --> 00:06:45,110
reaction that when you see a nice street with no garbage, no gum stuck to

111
00:06:45,120 --> 00:06:48,414
the pavement, you're not going to spit your gum there. That's just how humans act.

112
00:06:48,452 --> 00:06:52,382
You bring anyone from anywhere to anywhere nice, and that's how they're going to act.

113
00:06:52,516 --> 00:06:56,094
You have a bad neighborhood. You chuck your gum on the floor or cigarette butt

114
00:06:56,142 --> 00:06:59,502
because it's already littered, it's already terrible.

115
00:06:59,646 --> 00:07:03,246
You shouldn't allow your code base or your systems to become the bad neighborhood,

116
00:07:03,358 --> 00:07:06,740
because if you're surrounded by bad neighbors, why should you be any different?

117
00:07:07,370 --> 00:07:10,578
And it becomes just a vicious, self perpetuating cycle.

118
00:07:10,754 --> 00:07:13,926
So, just a quick case study. I like to

119
00:07:13,948 --> 00:07:17,302
give you an example of unchecked tech debt over a few years

120
00:07:17,436 --> 00:07:20,714
in just a regular startup looking for the right product to sell

121
00:07:20,752 --> 00:07:24,742
to the right people. And nobody here is particularly clueless,

122
00:07:24,886 --> 00:07:28,346
nobody is particularly evil. Just the way things are done.

123
00:07:28,448 --> 00:07:32,026
And depending on your mixture of founders and initial employees, some processes are

124
00:07:32,048 --> 00:07:35,658
set better, some are worse. But eventually you end up with something like this.

125
00:07:35,824 --> 00:07:38,286
I get a call one day and they say, we'd love for you to come

126
00:07:38,308 --> 00:07:41,262
on. As a senior engineer, we've seen your talks, we like your stuff.

127
00:07:41,396 --> 00:07:44,586
If you could rotate through the teams and find the place where you can contribute

128
00:07:44,618 --> 00:07:47,922
the most, we have a bunch of really great,

129
00:07:47,976 --> 00:07:51,726
enthusiastic engineers, but could use some senior experience to guide

130
00:07:51,758 --> 00:07:55,380
that and just raise the skill level as a whole in the company.

131
00:07:55,990 --> 00:07:59,286
So I go, all right, I join. And within days my alarms start

132
00:07:59,308 --> 00:08:02,594
going off. Very nice people all around, clearly talented

133
00:08:02,642 --> 00:08:06,322
engineers hiring from like, hiring from the best, from the top schools.

134
00:08:06,466 --> 00:08:09,554
But the tech stack and tooling around it was really weird.

135
00:08:09,682 --> 00:08:13,206
I can't wrap my head around it. There's a massive

136
00:08:13,238 --> 00:08:16,906
monolithic git repository. So you go like, where's the code? It's in

137
00:08:16,928 --> 00:08:20,460
the repo. Okay, but like, which repo? The repo, all right,

138
00:08:22,290 --> 00:08:26,506
it's a ten gigabyte repository hosted

139
00:08:26,538 --> 00:08:30,334
in the office. It's very fast for office folks. It's like local

140
00:08:30,372 --> 00:08:34,266
network, but there are remote people in the company. Some dude

141
00:08:34,298 --> 00:08:37,666
on an island on a shitty DSL halfway around the world is going to have

142
00:08:37,688 --> 00:08:40,526
a very bad day if they buy a new laptop, if they need to reclone

143
00:08:40,558 --> 00:08:43,918
or something. There's no concept of stable.

144
00:08:44,014 --> 00:08:47,506
Touching anything triggers a rollout of everything because there's no

145
00:08:47,528 --> 00:08:50,982
way for the build server to know what's affected by any change.

146
00:08:51,116 --> 00:08:53,990
So the safest thing to do is just roll out the universe.

147
00:08:54,490 --> 00:08:58,498
One commit takes an hour and a half to deploy.

148
00:08:58,594 --> 00:09:01,690
Four commits is your deploy pipeline for the workday.

149
00:09:02,510 --> 00:09:05,846
Rollbacks take just as long because there's no rollbacks. Of course, you just commit

150
00:09:05,878 --> 00:09:08,886
a fix and they use the same queue.

151
00:09:08,998 --> 00:09:12,298
So if 09:00 a.m. Or 10:00 a.m. Let's be honest,

152
00:09:12,384 --> 00:09:15,982
you have four commits. That's your pipeline for the day.

153
00:09:16,036 --> 00:09:19,518
And at noon something breaks and you commit a fix immediately. It's not

154
00:09:19,524 --> 00:09:22,206
going to go out until the end of the day unless you go into the

155
00:09:22,228 --> 00:09:26,242
build server and manually kill the, I don't know many

156
00:09:26,296 --> 00:09:29,698
dozen jobs that are in the queue, one for each little system,

157
00:09:29,784 --> 00:09:33,618
so that your fix gets deployed and then

158
00:09:33,784 --> 00:09:37,130
you don't know what else you're supposed to deploy because you just killed the deployed

159
00:09:37,150 --> 00:09:41,080
jobs for the entire universe. You don't know which changes should go up.

160
00:09:42,490 --> 00:09:45,782
There's a handcrafted build server. It's a Jenkins box, of course,

161
00:09:45,836 --> 00:09:49,638
hosted in the office. There's no record of how it's provisioned

162
00:09:49,654 --> 00:09:52,620
or configured if something were to happen to it.

163
00:09:52,990 --> 00:09:55,606
The way you build software is just lost.

164
00:09:55,718 --> 00:09:59,434
You've forgotten how you're building software, and each job

165
00:09:59,472 --> 00:10:02,702
on it is subtly different, even for the same tech. You have

166
00:10:02,756 --> 00:10:07,454
an Android source code that you build three

167
00:10:07,492 --> 00:10:11,546
instances out of like white label stuff, but each of them builds

168
00:10:11,578 --> 00:10:15,066
in a different way, so you'll have a commit that breaks one of the builds,

169
00:10:15,098 --> 00:10:18,820
even though it didn't touch anything with that specific thing, stuff like that.

170
00:10:19,430 --> 00:10:23,438
There's no local dev environments, so everyone works directly on production systems.

171
00:10:23,534 --> 00:10:29,174
This is a great way to ensure people don't experiment because

172
00:10:29,292 --> 00:10:33,506
they'll get into trouble for working on legitimate stuff. It's going to beat experimentation

173
00:10:33,538 --> 00:10:36,918
and improvement out of them like that. People have to use the

174
00:10:36,924 --> 00:10:40,410
VPN for everything, even nontechnical stuff. So I'm talking about like support

175
00:10:40,480 --> 00:10:43,814
and product and VPN failure

176
00:10:43,862 --> 00:10:46,220
is like a long coffee break for the entire company.

177
00:10:47,070 --> 00:10:50,330
And just written code is hitting the master database.

178
00:10:51,550 --> 00:10:54,766
There's no database schema versioning changes are done directly on

179
00:10:54,788 --> 00:10:58,366
the master database with honor system accounting, so half

180
00:10:58,388 --> 00:11:01,806
the changes just don't get recorded because people forget. And there's no way

181
00:11:01,828 --> 00:11:05,154
to tell what the database looked like a month ago,

182
00:11:05,272 --> 00:11:08,386
no way to have a test hostile environments that is constantly the same as

183
00:11:08,408 --> 00:11:11,666
production. Half the servers that

184
00:11:11,688 --> 00:11:16,126
you have are not deployable from scratch. This almost guarantees

185
00:11:16,158 --> 00:11:20,790
that servers that should be the same. So like three instances of python

186
00:11:21,690 --> 00:11:24,646
are different and you don't know what the difference is because you have no way

187
00:11:24,668 --> 00:11:27,834
to enforce them being the same or even

188
00:11:27,872 --> 00:11:31,274
worse, their deployability is unknown or

189
00:11:31,312 --> 00:11:34,540
hasn't been tested, so assume it doesn't work.

190
00:11:35,310 --> 00:11:38,534
Code review tool is some self hosted abandonedware. It's bug

191
00:11:38,582 --> 00:11:41,886
ridden, unsupported, very limited. It's literally like the

192
00:11:41,908 --> 00:11:45,950
thing that people use to develop software is constantly enforcing some limits.

193
00:11:47,410 --> 00:11:50,926
Outages become a daily occurrence. The list of

194
00:11:50,948 --> 00:11:54,622
causes is too long to mention. You have the main production API server

195
00:11:54,766 --> 00:11:58,366
falling down because a PM, a product manager

196
00:11:58,478 --> 00:12:01,300
committed an iOS translation string change.

197
00:12:02,230 --> 00:12:06,114
Of course they did it on a Friday 07:00 p.m. Like after hours

198
00:12:06,232 --> 00:12:08,758
on the other side of the planet. So it's 02:00 a.m. For me where I

199
00:12:08,764 --> 00:12:12,134
am. And individual outages are just not worthy of a post

200
00:12:12,172 --> 00:12:16,774
mortem because there's no reasonable expectation of uptime and

201
00:12:16,812 --> 00:12:20,150
everyone is focused on shipping features. And you get that.

202
00:12:20,220 --> 00:12:23,610
Let's just get this one done and then we can talk about refactoring every single

203
00:12:23,680 --> 00:12:27,270
time. You can't refactor eight years of bad decisions.

204
00:12:27,430 --> 00:12:30,794
You start approaching the point of rewrites, which are almost always a bad idea

205
00:12:30,832 --> 00:12:34,394
to begin with. And every time you say just this once, it's another step

206
00:12:34,432 --> 00:12:37,566
in the wrong direction. So how do you even begin to fix this? This is

207
00:12:37,588 --> 00:12:41,422
just a terrible situation. This is what I walked into. This isn't like six different

208
00:12:41,476 --> 00:12:44,626
places. This is one place and I've left out the

209
00:12:44,648 --> 00:12:48,660
more esoteric stuff. So how do you even start to fix this?

210
00:12:49,030 --> 00:12:53,010
I like to call this state not tech debt, but tech bankruptcy.

211
00:12:53,910 --> 00:12:57,106
It's a point where people don't even know how to move forward, where you

212
00:12:57,128 --> 00:12:59,686
get a request to do something and people go like, I don't even know how

213
00:12:59,708 --> 00:13:03,606
to do that. So every task is big

214
00:13:03,708 --> 00:13:06,806
because it takes hours to get into the context of how careful you

215
00:13:06,828 --> 00:13:10,090
need to be. Now,

216
00:13:10,160 --> 00:13:14,310
at the time, the infrastructure team was staffed with rebels,

217
00:13:14,470 --> 00:13:17,834
and they were happy to work in the shadows with the blessing of

218
00:13:18,032 --> 00:13:21,674
a small part of leadership. So to stop further deterioration

219
00:13:21,722 --> 00:13:25,262
and incrementally improve things, I kind of wiggled my room

220
00:13:25,316 --> 00:13:29,310
into wiggle my way into the infrastructure team as a developer,

221
00:13:29,730 --> 00:13:33,406
and we started working on things. It took over a

222
00:13:33,428 --> 00:13:36,146
year and a half to get to the point where I didn't think it was

223
00:13:36,168 --> 00:13:39,602
just completely terrible. We wrote it all down.

224
00:13:39,736 --> 00:13:43,794
Every terrible thing became a ticket. We had a hidden project

225
00:13:43,912 --> 00:13:47,554
in our task tracking system called Monsters under the bed.

226
00:13:47,752 --> 00:13:51,314
And whenever you have a few minutes, if you have two meetings

227
00:13:51,362 --> 00:13:54,806
with a half hour in between, you open the monsters and you think about

228
00:13:54,828 --> 00:13:58,626
one of them, you find a novel way to kill it. The team

229
00:13:58,668 --> 00:14:01,898
worked tirelessly to unblock software developers and empower them to

230
00:14:01,904 --> 00:14:05,382
ship quality software. And most of the work was done in the shadows,

231
00:14:05,526 --> 00:14:07,770
with double accounting for time spent.

232
00:14:09,310 --> 00:14:13,274
How? Build server rebuilt

233
00:14:13,322 --> 00:14:16,766
from scratch with ansible in the cloud, so it can

234
00:14:16,788 --> 00:14:19,998
easily be scaled up or migrated or whatever.

235
00:14:20,164 --> 00:14:23,338
We now have a recipe for the build server, which knows how our software is

236
00:14:23,364 --> 00:14:27,006
built and deployed. Build and deploy jobs are defined

237
00:14:27,038 --> 00:14:30,770
in code. No editing via web UI whatsoever.

238
00:14:31,110 --> 00:14:34,786
And because they're defined in code, you have inheritance. So Android is

239
00:14:34,808 --> 00:14:38,134
just like, here's how we build Android. And then if there are differences between

240
00:14:38,172 --> 00:14:41,430
them, you extend that job and you just define the differences.

241
00:14:42,570 --> 00:14:45,846
The monolithic repo was slain. We split it up

242
00:14:45,868 --> 00:14:49,046
into 40 smaller ones, and even, like, even the first iteration was

243
00:14:49,068 --> 00:14:51,370
slain again into even smaller repos.

244
00:14:51,950 --> 00:14:56,006
While preparing this, we found three other proposals for killing that repo.

245
00:14:56,118 --> 00:14:59,686
And all of them had an all or nothing approach. And it was either pause

246
00:14:59,718 --> 00:15:03,562
development for a week to revamp the repo, or cut your losses,

247
00:15:03,626 --> 00:15:07,006
lose all history, start fresh, things like that. We built an

248
00:15:07,028 --> 00:15:10,794
incremental approach, split out a tiny chunk, pause development

249
00:15:10,842 --> 00:15:14,194
for an hour just for one team, and move them to a new

250
00:15:14,232 --> 00:15:16,500
repo with their history, with everything.

251
00:15:18,390 --> 00:15:22,180
Infrastructure went first, showed the path towards the light to the others.

252
00:15:23,030 --> 00:15:26,514
We set up a system where changes trigger a build deploy only

253
00:15:26,552 --> 00:15:29,862
on the affected project. And commit to live

254
00:15:29,996 --> 00:15:33,734
is measured in seconds, not hours. Some teams opted out.

255
00:15:33,772 --> 00:15:36,598
Some teams said no, we like the old approach. They were allowed to stay in

256
00:15:36,604 --> 00:15:39,690
the monorepo. A few months later they joined the party.

257
00:15:40,110 --> 00:15:43,420
They saw what the other teams were doing and they were like, we want that.

258
00:15:44,830 --> 00:15:47,942
All servers were rebuilt and redeployed with ansible.

259
00:15:48,006 --> 00:15:51,846
This used to be some 80 machines, 20 different roles.

260
00:15:52,038 --> 00:15:56,122
This was all done under the guise of upgrading the fleet to Ubuntu 16.

261
00:15:56,266 --> 00:15:59,614
Nobody understand what that was. Nobody asked how long it would take.

262
00:15:59,812 --> 00:16:03,038
But whenever someone asked about a server whose name had changed, we would just

263
00:16:03,044 --> 00:16:05,040
say, oh, it's the new Ubuntu 16 box.

264
00:16:05,970 --> 00:16:09,854
What actually happened is in the background we wrote fresh

265
00:16:09,902 --> 00:16:13,342
Ansible to deploy a server that did kind of that thing, and then we iterated

266
00:16:13,406 --> 00:16:16,326
on it until it actually could do that thing. And then we killed the old

267
00:16:16,428 --> 00:16:20,680
hand weaved nonsense and replaced it with the ansible stuff.

268
00:16:21,770 --> 00:16:25,750
Migrated to modern code review software, migrated away from

269
00:16:25,820 --> 00:16:29,034
self hosted git hosting and self hosted code

270
00:16:29,072 --> 00:16:32,742
review to GitHub VPN.

271
00:16:32,806 --> 00:16:35,834
No longer needed for day to day work, not just

272
00:16:35,872 --> 00:16:39,242
dev work. The only thing on the VPN now, the only thing

273
00:16:39,296 --> 00:16:42,890
that you connect to the VPN for is the master database,

274
00:16:43,230 --> 00:16:46,714
and nobody has write access anyway, even when you're on the VPN.

275
00:16:46,762 --> 00:16:50,846
So it's not really useful for Dev work, it's useful for phishing out weird things

276
00:16:50,948 --> 00:16:54,210
in the data local dev environments. No more

277
00:16:54,280 --> 00:16:58,034
reviewing stuff that doesn't even build because people are afraid to touch

278
00:16:58,072 --> 00:17:02,034
it. And no more running untested code against production and

279
00:17:02,072 --> 00:17:05,598
version database schema changes through code reviewed SQL

280
00:17:05,614 --> 00:17:09,206
scripts. So there's a code review process for SQL scripts that actually affect the

281
00:17:09,228 --> 00:17:12,694
master database. And with that you can have a test database because you know

282
00:17:12,732 --> 00:17:16,150
which changes are applied and you can keep them in sync,

283
00:17:17,050 --> 00:17:20,794
etc. The moral of the story is,

284
00:17:20,912 --> 00:17:24,406
don't wait for permission to do your job right. It's always easier

285
00:17:24,438 --> 00:17:28,566
to beg for forgiveness anyway. So if you see something broken,

286
00:17:28,758 --> 00:17:32,198
fix it. If you don't have time to fix it, write it

287
00:17:32,224 --> 00:17:36,074
down, but do come back to it when you can steal a minute.

288
00:17:36,202 --> 00:17:38,750
And even if it takes months to make progress,

289
00:17:39,970 --> 00:17:43,306
it's worth doing. So the team here was well aware

290
00:17:43,418 --> 00:17:47,026
of how broken things were, but they thought that that

291
00:17:47,048 --> 00:17:50,222
was the best they could do. And it wasn't. It wasn't.

292
00:17:50,366 --> 00:17:53,634
But if we had pushed for it to be a single massive project, we said

293
00:17:53,672 --> 00:17:57,010
okay, project, let's do things right from now on.

294
00:17:57,160 --> 00:18:00,758
It's going to take a year to have any measurable impact, it's going

295
00:18:00,764 --> 00:18:03,990
to take this many engineers full time for however

296
00:18:04,060 --> 00:18:07,394
long, it never would have happened. It would have gotten shot down at the highest

297
00:18:07,442 --> 00:18:10,810
level instantly because we can't afford that.

298
00:18:10,960 --> 00:18:14,474
Instead, we turned a small team into

299
00:18:14,512 --> 00:18:18,442
a red team and just went and did it. Job well done.

300
00:18:18,496 --> 00:18:20,300
Take the rest of the week off. Right?

301
00:18:26,850 --> 00:18:29,934
Except that's not how things

302
00:18:29,972 --> 00:18:33,306
should be. It's horrible. It's horrible. Let's admit that it's horrible.

303
00:18:33,418 --> 00:18:38,274
You have a team of people directly subverting the established processes because

304
00:18:38,312 --> 00:18:42,114
they are failing them. And you have managers going, that's fine,

305
00:18:42,232 --> 00:18:45,830
you go do that. Don't tell anyone, and I'll protect

306
00:18:45,900 --> 00:18:49,190
you. But pretend I didn't know. It's terrible.

307
00:18:53,050 --> 00:18:54,760
So how do we do better?

308
00:18:56,090 --> 00:18:59,862
Tech network is very difficult to sell. It's unmeasurable

309
00:18:59,926 --> 00:19:03,290
amount of pain that increases in unmeasurable ways.

310
00:19:03,440 --> 00:19:07,574
And if you put in some amount of effort, you get unmeasurable

311
00:19:07,622 --> 00:19:11,334
gains. It's terrible, right? How do you convince

312
00:19:11,382 --> 00:19:15,002
someone to go for that when they have clearly

313
00:19:15,146 --> 00:19:19,198
measurable impact of feature work? And the name itself,

314
00:19:19,284 --> 00:19:22,526
tech debt, it implies that we have control over. It implies that we

315
00:19:22,548 --> 00:19:26,366
can choose to pay it down when it suits us. But it's not like

316
00:19:26,388 --> 00:19:29,458
paying off your credit card. With the credit card, you get

317
00:19:29,464 --> 00:19:33,458
a number every month, and you go, okay, this month I'm going

318
00:19:33,464 --> 00:19:35,906
to party a lot because it's my birthday or whatever, so I'm going to pay

319
00:19:35,928 --> 00:19:39,526
off 10% of this card, and the next month I'm going to stay

320
00:19:39,548 --> 00:19:43,218
in my house. All month, we'll pay down 20%, and then pretty soon we'll

321
00:19:43,234 --> 00:19:46,534
be out of debt. With tech debt, there's no number.

322
00:19:46,652 --> 00:19:50,498
It's just a pain index with no upper bound, and it can

323
00:19:50,524 --> 00:19:54,262
double by the next time you check your balance. It's incredibly

324
00:19:54,326 --> 00:19:58,154
difficult to schedule work to address tech type because nobody explicitly asked

325
00:19:58,192 --> 00:20:01,520
for it. Nobody asked for you to improve the code base.

326
00:20:01,890 --> 00:20:05,806
They want something visible, something measurable to be

327
00:20:05,828 --> 00:20:09,726
achieved. And it directly takes time away from a measurable goal, which is

328
00:20:09,748 --> 00:20:13,774
shipping features. There's a quote that I love from

329
00:20:13,812 --> 00:20:17,506
a cleaning equipment manufacturer, and it's if you don't schedule time

330
00:20:17,528 --> 00:20:21,106
for maintenance, your equipment will schedule it for you, and things will break in the

331
00:20:21,128 --> 00:20:25,182
most inopportune time possible. So I think it's time for

332
00:20:25,256 --> 00:20:28,614
a new approach. I recently came across an article that

333
00:20:28,652 --> 00:20:30,440
changed the way I think about this,

334
00:20:34,590 --> 00:20:38,102
and it's called sprints, marathons, and root canals

335
00:20:38,166 --> 00:20:41,878
by Goikwajuj. It suggests that software development is neither a sprint

336
00:20:41,894 --> 00:20:45,214
nor a marathon, which is a standard comparison we often hear as they

337
00:20:45,252 --> 00:20:49,018
both have clearly defined end states. You finish a sprint, you finish a marathon.

338
00:20:49,114 --> 00:20:53,026
Software development is never done. You just stop working on it because of a

339
00:20:53,048 --> 00:20:56,386
higher priority project or company shuts down or whatever.

340
00:20:56,488 --> 00:20:59,886
But it's never done. It's never achieved

341
00:20:59,918 --> 00:21:03,154
an end state. You shouldn't need to put

342
00:21:03,272 --> 00:21:06,886
basic hygiene like showering or brushing your teeth on

343
00:21:06,908 --> 00:21:10,434
your calendar. It should just happen. And you can skip

344
00:21:10,482 --> 00:21:14,054
one, but you can't skip a dozen. Having to schedule means

345
00:21:14,092 --> 00:21:17,958
something went horribly wrong, like having to go in for a root canal

346
00:21:18,054 --> 00:21:20,780
instead of just brushing your teeth every morning.

347
00:21:22,110 --> 00:21:25,802
So, new name I've fallen in love with this sustainability work.

348
00:21:25,936 --> 00:21:29,526
It's not paying down tech debt. It means making software development

349
00:21:29,558 --> 00:21:32,906
sustainable. It means you can keep delivering a healthy amount of software

350
00:21:33,018 --> 00:21:36,606
regularly instead of pushing for tech debt sprints or tech

351
00:21:36,628 --> 00:21:40,830
debt days, which every time you do it feels like you're taking

352
00:21:40,900 --> 00:21:44,782
something from the other side. It needs to become

353
00:21:44,836 --> 00:21:48,466
a first tier work item, and it's okay to

354
00:21:48,488 --> 00:21:52,034
skip here and there. You can delay it for a little bit, but the more

355
00:21:52,072 --> 00:21:54,420
you do, the more painful the lesson will be.

356
00:21:57,050 --> 00:22:00,550
Agree on a regular budget for sustainability work, either for

357
00:22:00,620 --> 00:22:04,738
every team or for every engineer some percent of time, and tweak

358
00:22:04,754 --> 00:22:08,326
it over time. It's a balance, and there's no just magic number.

359
00:22:08,508 --> 00:22:12,422
It depends on where you are in your lifespan, of the company and the software

360
00:22:12,486 --> 00:22:16,154
and so on. But work on sustainability stuff all the time

361
00:22:16,272 --> 00:22:20,250
and there's no need to discuss with people outside

362
00:22:20,320 --> 00:22:23,982
the engineering team. Engineers will know which things they keep stumbling over.

363
00:22:24,036 --> 00:22:27,946
They will know what their pain points are. So just allocate

364
00:22:27,978 --> 00:22:31,326
a budget for sustainability work and let them figure out what they're going to do

365
00:22:31,348 --> 00:22:34,974
with that. Time loves time. You can discuss what the effects of that

366
00:22:35,012 --> 00:22:38,386
were and whether they need more, or if they can give back some time.

367
00:22:38,488 --> 00:22:41,954
And it's fine. If a deadline is coming in and you say,

368
00:22:41,992 --> 00:22:45,186
let's pause sustainability for a week or two, for a sprint or two,

369
00:22:45,288 --> 00:22:49,234
it's fine. But it needs to first be there and then you give it

370
00:22:49,352 --> 00:22:53,426
back to product. If there's crunch time and

371
00:22:53,448 --> 00:22:56,998
it helps with morale, there's nothing worse than being told you're not allowed

372
00:22:57,014 --> 00:23:00,170
to address the thing that's making your life miserable.

373
00:23:00,590 --> 00:23:04,090
So term techtech sends the wrong message.

374
00:23:04,240 --> 00:23:07,814
Call it sustainability work. Make sure it's scheduled as part of the regular

375
00:23:07,862 --> 00:23:11,258
dev process, not something that needs to push out feature work to end up on

376
00:23:11,264 --> 00:23:13,720
the schedule. That's it for me.

