1
00:00:25,010 --> 00:00:28,626
Thanks for tuning in and welcome to this talk. I am Abhishek Gupta, a developer

2
00:00:28,658 --> 00:00:32,642
advocate at AWS where I work on a bunch of things, but containers,

3
00:00:32,706 --> 00:00:36,418
databases and golang happen to be some of my key focus areas.

4
00:00:36,514 --> 00:00:40,070
And I am joining you today from my home here in New Delhi, India.

5
00:00:40,490 --> 00:00:44,322
So why am I really talking about deleting or removing Yaml?

6
00:00:44,466 --> 00:00:47,650
To be very, very honest with you, I have nothing against YaML.

7
00:00:47,810 --> 00:00:51,626
I have tolerated things like XML in the the past. So I guess YAML

8
00:00:51,658 --> 00:00:55,454
is fine. But I'm a developer, I like to write code and

9
00:00:55,492 --> 00:00:58,990
the last time I checked, YAML isn't really a programming language.

10
00:00:59,410 --> 00:01:02,606
But if you think in terms of kubernetes, YaML is

11
00:01:02,628 --> 00:01:06,146
the king. It's like this lingua franca, so to speak. So if you look at

12
00:01:06,168 --> 00:01:10,034
existing tooling like helm or customize, or even

13
00:01:10,072 --> 00:01:13,518
if you're writing manifests by hand, it's all Yaml.

14
00:01:13,614 --> 00:01:16,850
So although the talk says removing YAml,

15
00:01:17,010 --> 00:01:20,886
it's more about circumventing it or pushing it behind the

16
00:01:20,908 --> 00:01:24,600
scenes so that it's not in your face all the time, so to speak.

17
00:01:25,690 --> 00:01:29,526
So yeah, in the next 20 to 25 minutes or

18
00:01:29,548 --> 00:01:33,250
so I will talk about this tool called CDK for Kubernetes.

19
00:01:33,330 --> 00:01:36,906
CDK. It's in short, and it's an open source project which

20
00:01:36,928 --> 00:01:40,294
is part of the CNCF or the cloud Native Computing foundation.

21
00:01:40,422 --> 00:01:44,462
And in very, very simple terms, cdks is a framework using

22
00:01:44,516 --> 00:01:48,746
which you can define and model your kubernetes, Opensource and applications.

23
00:01:48,858 --> 00:01:52,506
So I'll give you a verb and tour of how you can use cdks

24
00:01:52,618 --> 00:01:54,530
with the Go programming language.

25
00:01:55,830 --> 00:01:59,346
So I want to start off by talking about how would you

26
00:01:59,368 --> 00:02:03,074
typically use something like CDK. So conceptually it's actually

27
00:02:03,112 --> 00:02:07,362
quite simple. So as you can see here is a very, very high level overview

28
00:02:07,506 --> 00:02:11,110
of the workflow. So if you kind of start off

29
00:02:11,180 --> 00:02:14,646
by bootstrapping a project, you write some code to

30
00:02:14,668 --> 00:02:17,878
define your Kubernetes application and then you ask

31
00:02:17,964 --> 00:02:20,790
CDK eight to convert that code into YAMl.

32
00:02:20,870 --> 00:02:24,394
Right? And once you have that YAml manifest, it's really

33
00:02:24,432 --> 00:02:26,780
up to you as to how you want to use it.

34
00:02:28,190 --> 00:02:31,886
Every CDK application consists of what you call a tree of

35
00:02:31,908 --> 00:02:36,250
components, and these are also called constructs. So you combine

36
00:02:36,330 --> 00:02:39,758
basic constructs like a deployment, or a service

37
00:02:39,844 --> 00:02:43,002
or ingress, or a persistent volume and so on and so forth,

38
00:02:43,146 --> 00:02:46,766
and combine that into a chart and a chart

39
00:02:46,798 --> 00:02:50,402
is yet another construct in syndicates. And finally,

40
00:02:50,536 --> 00:02:53,970
one or more of such charts can be but inside

41
00:02:54,040 --> 00:02:57,598
an app or an application. So an app is the

42
00:02:57,624 --> 00:03:00,850
root of the tree in the entire hierarchy,

43
00:03:00,930 --> 00:03:04,774
right? So what I'm going to do is switch over to my ide. Now enough

44
00:03:04,812 --> 00:03:08,690
of slides and we'll spend some time looking at some code,

45
00:03:08,860 --> 00:03:12,058
just playing around with things and trying to make sense of everything, trying to

46
00:03:12,064 --> 00:03:16,426
make sense of what cdks is and how it works. So let

47
00:03:16,448 --> 00:03:20,154
me do that. All right,

48
00:03:20,192 --> 00:03:23,946
awesome. So in addition to actually being a framework,

49
00:03:24,058 --> 00:03:27,066
CDkates also provides a very, very handy CLI.

50
00:03:27,178 --> 00:03:30,798
So what I'm going to do is use this CLI to bootstrap a very

51
00:03:30,884 --> 00:03:34,626
simple application here just to get things going right. So I

52
00:03:34,648 --> 00:03:36,980
hope you can see this.

53
00:03:38,550 --> 00:03:42,610
So I'm going to create a new directory and

54
00:03:42,760 --> 00:03:46,360
change into that. Simple as that. And then I'll kick things off.

55
00:03:47,930 --> 00:03:51,682
All right, so what I'm going to do now is use the CLI to bootstrap

56
00:03:51,746 --> 00:03:55,110
an application. So say CDkates, which is the CLI

57
00:03:55,530 --> 00:03:58,982
init, initialize an app. And I'm using go

58
00:03:59,036 --> 00:04:01,980
here as a programming language. So I'm specifying go app here.

59
00:04:02,590 --> 00:04:06,042
So I started off with an empty directory and

60
00:04:06,176 --> 00:04:09,514
just invoked the CDK CLI and asked me, hey, give me something

61
00:04:09,552 --> 00:04:13,038
to work with, right? And what it's going to do is come back to

62
00:04:13,044 --> 00:04:16,766
me and you'll see that soon. So it's going to spit. But this

63
00:04:16,948 --> 00:04:20,942
very, very simple, yet very useful starting point

64
00:04:20,996 --> 00:04:24,606
from where I can build on stuff, right? So here

65
00:04:24,628 --> 00:04:28,354
it is. This process is done. So if I were to open this main go

66
00:04:28,392 --> 00:04:31,746
file over here real quick. And if you look

67
00:04:31,768 --> 00:04:35,254
at this function called new, my chart, what this does is

68
00:04:35,292 --> 00:04:38,694
create something called a CDKs chart object.

69
00:04:38,812 --> 00:04:42,294
Okay. And if I were to scroll down a little bit and show

70
00:04:42,332 --> 00:04:46,150
you the main function. So this

71
00:04:46,220 --> 00:04:49,754
actually encapsulates or this chart is

72
00:04:49,792 --> 00:04:53,962
within this app, right? So in this

73
00:04:54,016 --> 00:04:58,038
app there's just one chart. And right now this chart is actually empty.

74
00:04:58,134 --> 00:05:01,930
But I'm going to add some code here and we'll define a very, very simple

75
00:05:02,080 --> 00:05:05,758
sort of hello world Kubernetes, our favorite Nginx deployment here.

76
00:05:05,844 --> 00:05:08,586
So in the interest of time, what I'm going to do is do some copy

77
00:05:08,618 --> 00:05:12,586
paste and then walk you through that code real quick.

78
00:05:12,708 --> 00:05:17,266
So let me do that and

79
00:05:17,288 --> 00:05:21,106
I'll just update some of the packages here because they

80
00:05:21,128 --> 00:05:24,546
are not quite right, but yeah. All right,

81
00:05:24,568 --> 00:05:27,554
awesome. So just focus on this part of the code right here.

82
00:05:27,592 --> 00:05:30,918
So even if you've deployed a very sort of

83
00:05:31,004 --> 00:05:34,646
simple Kubernetes application in the past, you have some experience with

84
00:05:34,668 --> 00:05:38,842
that you should be familiar with what you actually see right now. So things like

85
00:05:38,976 --> 00:05:42,410
labels or selectors or deployment,

86
00:05:43,070 --> 00:05:46,906
or a container here, an image and so on and so forth, just like you

87
00:05:46,928 --> 00:05:49,530
would define a yaml manifest, right?

88
00:05:49,600 --> 00:05:53,054
But the big difference here is that now this is in the form

89
00:05:53,092 --> 00:05:56,734
of code. This just happens to be go code. But CDKs also

90
00:05:56,772 --> 00:05:59,998
supports Python, typescript and Java as well.

91
00:06:00,084 --> 00:06:03,550
So while this looks pretty simple,

92
00:06:03,620 --> 00:06:07,042
and you might feel like, hey, this is enough, I'm good,

93
00:06:07,176 --> 00:06:10,466
but trust me, things are going to actually get pretty verbose when

94
00:06:10,488 --> 00:06:14,798
you start building serious stuff using these simple primitives.

95
00:06:14,894 --> 00:06:18,562
So what I'm going to do now is actually containers with this Nginx

96
00:06:18,626 --> 00:06:22,358
based example, but show you how to improve this a

97
00:06:22,364 --> 00:06:25,702
little bit. Right? So in order to do that, I'll switch over

98
00:06:25,756 --> 00:06:28,940
to a different project here, which I have for you.

99
00:06:31,070 --> 00:06:34,762
Now, if I were to open this main go file right

100
00:06:34,816 --> 00:06:38,122
here. Now this is going to look

101
00:06:38,256 --> 00:06:41,466
very, very similar to what I just showed you, but at

102
00:06:41,488 --> 00:06:44,646
the same time it's different. So what I'm

103
00:06:44,678 --> 00:06:48,062
actually doing is using the CDKs plus API, which is much

104
00:06:48,116 --> 00:06:51,486
more natural and intuitive. So if I scroll up a little bit, if you

105
00:06:51,508 --> 00:06:55,298
see, this is the package which I'm using, which is called CDKs plus.

106
00:06:55,464 --> 00:06:58,610
So what I do here is define a deploying,

107
00:06:58,950 --> 00:07:02,334
add a container to it. And if you notice,

108
00:07:02,462 --> 00:07:06,006
I really don't need a lot of boilerplate code here,

109
00:07:06,108 --> 00:07:09,686
things like defining selectors or labels. And then

110
00:07:09,708 --> 00:07:13,110
finally what I do is expose this via a service.

111
00:07:13,260 --> 00:07:15,320
So all this is go code.

112
00:07:16,250 --> 00:07:19,674
And to convert this into a manifest, I can actually go

113
00:07:19,712 --> 00:07:23,322
ahead and use the CLI. And to do that,

114
00:07:23,376 --> 00:07:27,194
I'm going to hop back into this terminal right

115
00:07:27,232 --> 00:07:31,046
here and use a command called cdks

116
00:07:31,238 --> 00:07:34,734
synth. Okay? So what this will do is this will

117
00:07:34,772 --> 00:07:38,170
generate a manifest in a different folder called deskt.

118
00:07:38,250 --> 00:07:41,582
So if you see this is right here. Now, if I were to open

119
00:07:41,636 --> 00:07:45,134
that manifest for you, just to show

120
00:07:45,172 --> 00:07:48,738
this, as you can see, I just have a

121
00:07:48,744 --> 00:07:52,178
deployment, very simple deployment with pod spec

122
00:07:52,344 --> 00:07:56,306
and all the usual stuff, right? The selectors and the labels and

123
00:07:56,328 --> 00:07:59,454
the containers image everything, all the normal

124
00:07:59,502 --> 00:08:02,934
stuff, which you would typically do if you would define it

125
00:08:02,972 --> 00:08:06,262
manually, for example. And if I were to scroll down, you would see the service

126
00:08:06,316 --> 00:08:09,466
as well, which happens to be of the type load balancer here. So just like

127
00:08:09,488 --> 00:08:13,386
we defined in our go code, that's exactly how the

128
00:08:13,408 --> 00:08:16,826
yaml sort of got manifested, so to speak.

129
00:08:16,928 --> 00:08:20,554
Right now. Now that you have this Yaml file, it's really up to you.

130
00:08:20,592 --> 00:08:23,902
Of course, in terms of how you want to use it. So you can obviously

131
00:08:23,956 --> 00:08:27,994
use Kubectl and do all this manually, but actually integrating

132
00:08:28,042 --> 00:08:31,438
this into your existing Gitops workflow is something.

133
00:08:31,604 --> 00:08:35,218
It's an obvious choice and that's a very interesting topic. But to

134
00:08:35,224 --> 00:08:38,180
be honest with you, I don't have time to cover it in detail.

135
00:08:38,550 --> 00:08:42,078
So let's go ahead and keep proceeding.

136
00:08:42,254 --> 00:08:45,714
So any Kubernetes demo is incomplete without Nginx, right?

137
00:08:45,752 --> 00:08:49,558
So let's actually go ahead and deploy this thing. So I'm

138
00:08:49,564 --> 00:08:53,426
going to go back. So I'm actually using a local Kubernetes cluster

139
00:08:53,458 --> 00:08:57,346
here. Just happens to be a single node kind cluster for the purposes

140
00:08:57,378 --> 00:09:01,106
of this demo. So what I'm going to do is just apply this Yaml

141
00:09:01,138 --> 00:09:04,746
file. So just apply the context of this disk folder. And as you can

142
00:09:04,768 --> 00:09:08,426
see, the deployment and service have been created. So if I were to go

143
00:09:08,448 --> 00:09:12,126
ahead and check as to what's going on. So if you see that

144
00:09:12,148 --> 00:09:15,466
the pod is currently in the container creating phase.

145
00:09:15,578 --> 00:09:19,520
So in the meanwhile we can go ahead and check our service.

146
00:09:20,130 --> 00:09:23,834
And you can see the service here as well, the load balancer

147
00:09:23,882 --> 00:09:27,762
type, it has been created. And if I were to go back and

148
00:09:27,896 --> 00:09:31,282
check the pod again. Yeah, so it's in the running status now.

149
00:09:31,336 --> 00:09:36,166
So if I wanted to try and access this NginX deployment for

150
00:09:36,188 --> 00:09:39,346
the purposes of this demo, I'm going to just use port forwarding

151
00:09:39,378 --> 00:09:43,030
here on port 1990 and go

152
00:09:43,100 --> 00:09:47,238
to my browser here real quick and

153
00:09:47,324 --> 00:09:50,698
cool. We are able to have this simple demo

154
00:09:50,784 --> 00:09:54,026
up and running and access our Nginx server. Great.

155
00:09:54,128 --> 00:09:57,562
Now while this Nginx example was very

156
00:09:57,616 --> 00:10:00,794
simple, of course. Right. But now I'm going to move on to something a little

157
00:10:00,832 --> 00:10:04,714
bit more involved. So I'm going to show you a WordPress stack

158
00:10:04,762 --> 00:10:08,398
that has a MySQL database along with the WordPress application itself.

159
00:10:08,484 --> 00:10:11,854
So in order to do that, what I will do

160
00:10:11,892 --> 00:10:15,662
is I'll switch over to yet another folder or

161
00:10:15,716 --> 00:10:19,922
project which I have. So if I were to open the code here and

162
00:10:19,976 --> 00:10:23,246
scroll up a little bit. Now if you notice here we actually have two charts.

163
00:10:23,358 --> 00:10:27,682
One is this new MySQL chart and the other one is the new WordPress

164
00:10:27,746 --> 00:10:31,398
chart. Okay. And as you can see, there is a lot going on here.

165
00:10:31,484 --> 00:10:35,714
We are defining all sorts of Kubernetes resources like secrets

166
00:10:35,762 --> 00:10:39,302
and deployments and of course containers. And also notice

167
00:10:39,366 --> 00:10:42,220
persistent volumes and persistent volume claims. Right.

168
00:10:43,310 --> 00:10:46,074
And the same applies to the WordPress chart as well.

169
00:10:46,112 --> 00:10:49,020
So pretty awesome. This is good, right?

170
00:10:49,710 --> 00:10:53,886
But let me repeat this again. You do not want to

171
00:10:53,988 --> 00:10:57,454
write these things over and over, say by

172
00:10:57,492 --> 00:11:00,894
multiple teams within your organization. What you can

173
00:11:00,932 --> 00:11:04,718
actually do is write this as a custom construct,

174
00:11:04,814 --> 00:11:08,338
a custom cdks construct, and then it will

175
00:11:08,344 --> 00:11:11,214
be usable as an artifact.

176
00:11:11,342 --> 00:11:15,326
It's a very simple reusable artifact which other teams can utilize.

177
00:11:15,358 --> 00:11:18,306
So let me show this to you as well. And for that, as usual,

178
00:11:18,338 --> 00:11:23,142
I'm going to hop into another project quickly and

179
00:11:23,196 --> 00:11:25,800
show you how a custom construct works.

180
00:11:26,650 --> 00:11:29,962
So if you pay attention to this

181
00:11:30,016 --> 00:11:33,962
function, call right here. Now imagine, imagine if someone wanted

182
00:11:34,016 --> 00:11:37,418
to stand up a simple WordPress cluster. What they

183
00:11:37,424 --> 00:11:40,602
can do is simply go in and use

184
00:11:40,656 --> 00:11:43,854
the custom construct, just like any of the out of the box

185
00:11:43,892 --> 00:11:47,118
ones which you use like deployment or a service and so on and

186
00:11:47,124 --> 00:11:51,038
so forth. So this new WordPress stack function actually

187
00:11:51,124 --> 00:11:54,474
encapsulates the process of creating the components

188
00:11:54,522 --> 00:11:58,610
for a WordPress stack. Now if I were to dig into this a little bit

189
00:11:58,760 --> 00:12:01,934
and go into what this function does, and notice, the first thing you should notice

190
00:12:01,982 --> 00:12:05,198
is it actually returns a construct,

191
00:12:05,294 --> 00:12:08,470
right? It doesn't return a chart, okay? And whatever

192
00:12:08,540 --> 00:12:11,894
you see within this function now, it's very

193
00:12:11,932 --> 00:12:15,000
similar to what I just showed you, right? I showed you two different

194
00:12:16,810 --> 00:12:20,054
charts. One was for MySQL, one was for WordPress.

195
00:12:20,182 --> 00:12:23,370
This function sort of encapsulates everything, all that process

196
00:12:23,440 --> 00:12:26,970
and provides this AWs, a single

197
00:12:27,040 --> 00:12:31,542
go to sort of artifact which other developers, other engineers

198
00:12:31,606 --> 00:12:34,814
within your organization can use. Right? All right,

199
00:12:34,852 --> 00:12:38,794
cool, this looks good. So let's go ahead and deploy a WordPress

200
00:12:38,842 --> 00:12:42,766
cluster. So as usual, what I'm going to do is use this simple command

201
00:12:42,798 --> 00:12:45,934
cdks synth. It's going to kickstart

202
00:12:45,982 --> 00:12:49,330
the process of creating the YAMl manifests.

203
00:12:50,390 --> 00:12:54,578
And what I can actually do is go ahead and create

204
00:12:54,664 --> 00:12:58,646
this. So what I'm going to do is actually watch the pods in

205
00:12:58,668 --> 00:13:01,320
the background while I,

206
00:13:01,930 --> 00:13:05,506
excuse me. So I think I was a slight

207
00:13:05,618 --> 00:13:06,760
typo here.

208
00:13:08,730 --> 00:13:12,826
All right, so I'm going to watch the pods and at the same time apply

209
00:13:12,928 --> 00:13:16,378
the context of this chart. So let's see what's going on here.

210
00:13:16,464 --> 00:13:19,978
So yeah, our pods are getting created. They are in the

211
00:13:19,984 --> 00:13:22,560
pending state right now. But while this is getting done,

212
00:13:22,930 --> 00:13:26,894
let me show you the manifest which was actually generated. That should be pretty

213
00:13:26,932 --> 00:13:31,454
interesting. Yeah, so you

214
00:13:31,492 --> 00:13:34,914
see here just the usual stuff. Everything which we had

215
00:13:35,032 --> 00:13:38,414
specified in the form of that function. So we have a secret

216
00:13:38,462 --> 00:13:42,078
here. We have a deployment for MySQL

217
00:13:42,094 --> 00:13:46,014
database for WordPress. We have persistent volume

218
00:13:46,062 --> 00:13:49,298
claims we have a service, all the usual things which you

219
00:13:49,304 --> 00:13:52,374
would expect, right? But imagine you had to write all this by hand.

220
00:13:52,412 --> 00:13:56,082
It's better to define this in code and then ask a tool like cdks

221
00:13:56,146 --> 00:14:00,300
to convert that into YAml. Right? So the same applies to

222
00:14:00,830 --> 00:14:04,666
the WordPress deployment as well. So I have a deployment object and

223
00:14:04,688 --> 00:14:08,214
a service which is of type load balancer because I need to access my WordPress

224
00:14:08,262 --> 00:14:11,486
application publicly and so on and so forth. Right.

225
00:14:11,508 --> 00:14:14,990
So let's actually go back and see

226
00:14:15,060 --> 00:14:18,670
what's happening. All right. So awesome.

227
00:14:18,820 --> 00:14:22,414
So I think things are ready. What we can

228
00:14:22,452 --> 00:14:26,160
do is actually check our persistent volumes and

229
00:14:26,610 --> 00:14:30,178
volume claims as well. Pv is up and ready. And what about the

230
00:14:30,184 --> 00:14:33,826
PVC? It is bound so I think things look good. So we are right to

231
00:14:33,848 --> 00:14:37,438
try this thing out. So as usual I'm going to do some port forwarding

232
00:14:37,454 --> 00:14:41,154
here just to test things out and I'm going to access the WordPress

233
00:14:41,282 --> 00:14:44,694
on port 80 80. So let me go back to my browser here

234
00:14:44,812 --> 00:14:47,160
and just change my port real quick.

235
00:14:50,590 --> 00:14:54,154
Let's see how this goes. All right, so what you see now is actually the

236
00:14:54,192 --> 00:14:57,660
landing page for a WordPress website,

237
00:14:58,270 --> 00:15:01,370
something which I can create from scratch just for demo purposes.

238
00:15:01,950 --> 00:15:05,326
I can show this to you as to how

239
00:15:05,348 --> 00:15:09,086
you can sort of play around with this WordPress application. So I have set up

240
00:15:09,108 --> 00:15:12,286
my website now I can just log in using the credentials I had

241
00:15:12,308 --> 00:15:15,778
just set. Yeah, so right now you're seeing a

242
00:15:15,784 --> 00:15:18,946
WordPress application on Kubernetes using CDK. So this is the

243
00:15:18,968 --> 00:15:22,802
admin console. Yeah, I can go ahead add a new

244
00:15:22,856 --> 00:15:26,918
post life from

245
00:15:27,004 --> 00:15:31,574
conf fourty two. So far so good

246
00:15:31,692 --> 00:15:34,680
I guess, and publish this post.

247
00:15:35,130 --> 00:15:38,914
And I can actually now go back to the website itself, exit the admin console

248
00:15:38,962 --> 00:15:42,714
and yeah, this is my WordPress website.

249
00:15:42,912 --> 00:15:46,666
Cool, nice. So far so awesome. Now you can go ahead and sort

250
00:15:46,688 --> 00:15:50,486
of keep playing with this WordPress website, maybe try things like deleting the mySQl

251
00:15:50,518 --> 00:15:54,154
deployment and just fooling around with things to see how it

252
00:15:54,192 --> 00:15:57,406
behaves and so on and so forth. So I'll leave that as an exercise to

253
00:15:57,428 --> 00:16:00,798
you. And what I'm going to do now is take a

254
00:16:00,804 --> 00:16:04,434
look at a slightly more advanced use based and this is

255
00:16:04,472 --> 00:16:07,682
about how to actually use crds with

256
00:16:07,736 --> 00:16:11,566
cdks. So crds actually if you're not familiar, it stands

257
00:16:11,598 --> 00:16:15,506
for custom resource definitions. So custom resources are

258
00:16:15,528 --> 00:16:18,450
actually a part of the Kubernetes extension API.

259
00:16:18,530 --> 00:16:21,942
So just like we have pods and deployments and other

260
00:16:21,996 --> 00:16:25,478
native objects in Kubernetes, you can define custom ones as well.

261
00:16:25,564 --> 00:16:29,254
And it's the custom resource definition API that actually makes

262
00:16:29,292 --> 00:16:33,274
this possible. So although CRDs and their implementations are

263
00:16:33,312 --> 00:16:37,098
relatively advanced, and obviously I'm not going to cover that in

264
00:16:37,104 --> 00:16:40,878
this session, but at the end of the day you have to understand that

265
00:16:41,044 --> 00:16:44,734
they are also defined as YAMl manifests. But with

266
00:16:44,772 --> 00:16:48,506
CDK eight, what you can do is import existing crds

267
00:16:48,538 --> 00:16:52,318
or custom resource definitions and simply use them as

268
00:16:52,404 --> 00:16:56,242
API in your code. Okay, so let me show you an example

269
00:16:56,376 --> 00:17:00,930
of a project called Strimzi. So it's actually a Kubernetes operator

270
00:17:01,350 --> 00:17:04,914
that helps you run and manage Apache Kafka on

271
00:17:04,952 --> 00:17:08,694
Kubernetes. So I already have the crds involved. So let me

272
00:17:08,812 --> 00:17:13,542
quickly go back to that project as well and

273
00:17:13,596 --> 00:17:17,430
show you how that thing is. So like I said, I have

274
00:17:17,500 --> 00:17:21,526
the Strimzi crds already installed. So as

275
00:17:21,548 --> 00:17:24,886
you can see here, there are a bunch of crds, but the ones which I'll

276
00:17:24,918 --> 00:17:28,646
be using are for creating a Kafka cluster and a Kafka topic.

277
00:17:28,678 --> 00:17:31,978
So I'll just be using two crds here. So Kafka

278
00:17:31,994 --> 00:17:35,498
topics and this core Kafka cluster CRD.

279
00:17:35,594 --> 00:17:38,846
Okay. All right, so what I'll do is first

280
00:17:38,948 --> 00:17:42,314
import these crds using the syndicates

281
00:17:42,362 --> 00:17:45,934
CLI, okay. And I'm going to reference the crds directly from GitHub,

282
00:17:45,982 --> 00:17:49,326
as you will see very soon. Oops,

283
00:17:49,518 --> 00:17:53,378
typo. And as you can see, I'm doing a CDK, it's import,

284
00:17:53,464 --> 00:17:56,546
and this is the location for the CRD, the Yaml file itself.

285
00:17:56,648 --> 00:18:00,086
I'm referencing the one directly from GitHub, and this

286
00:18:00,108 --> 00:18:03,666
is going to go ahead and import this. This is for the Kafka cluster

287
00:18:03,698 --> 00:18:07,062
CRD, and I will also import the CRD for

288
00:18:07,196 --> 00:18:10,678
working with Kafka topics. So as always,

289
00:18:10,764 --> 00:18:14,234
I have referred to this CRD right here

290
00:18:14,272 --> 00:18:17,866
directly from GitHub, but doesn't really matter as long as you have access to this

291
00:18:17,888 --> 00:18:21,450
Yaml file. All right, so if I go ahead and check the

292
00:18:21,520 --> 00:18:25,194
imports folder here, you'll find something interesting. So we have a couple of directories

293
00:18:25,242 --> 00:18:28,506
called Kafka streams IO and Kafka topic, underscore blah blah blah.

294
00:18:28,538 --> 00:18:32,398
So these are slightly verbose naming, but the important

295
00:18:32,484 --> 00:18:36,306
thing is that now what you can do is use

296
00:18:36,488 --> 00:18:40,722
these crds as API, like I said earlier. So if I were to open this

297
00:18:40,776 --> 00:18:44,546
code right here and show

298
00:18:44,568 --> 00:18:47,974
you this function called new Kafka Chart, which happens to return

299
00:18:48,012 --> 00:18:51,670
a CDK's chart, what is it really doing? So it's simply using

300
00:18:51,740 --> 00:18:55,842
that API, the one which we just generated to define

301
00:18:55,906 --> 00:18:58,630
or specify a new Kafka cluster.

302
00:18:59,530 --> 00:19:02,278
And it has a zookeeper as well. So as you can see, I have provided

303
00:19:02,294 --> 00:19:05,846
the version, the number of replicas or the number of Kafka

304
00:19:05,878 --> 00:19:09,350
brokers, the configuration for the server and so on and so forth.

305
00:19:09,430 --> 00:19:12,734
Okay, and how would I actually use this if I were to open

306
00:19:12,772 --> 00:19:16,954
the main go file? You will see that all I'm doing is encapsulating

307
00:19:17,002 --> 00:19:19,758
this chart into an application,

308
00:19:19,844 --> 00:19:23,198
a syndicates app, and yes, that's pretty much all I need to

309
00:19:23,204 --> 00:19:27,266
do. Right? So to create a new Kafka cluster, I'm going

310
00:19:27,288 --> 00:19:30,974
to follow the same old, the usual workflow.

311
00:19:31,102 --> 00:19:34,178
So I'll first do a syndicates synth. It is going

312
00:19:34,184 --> 00:19:36,950
to spit but Yaml manifest.

313
00:19:37,690 --> 00:19:42,342
So if you see here, if I were to open this file here again,

314
00:19:42,476 --> 00:19:46,386
this is the custom resource definition for Kafka

315
00:19:46,418 --> 00:19:49,718
cluster using strimzi, right? So everything which we had specified in

316
00:19:49,724 --> 00:19:53,706
the code is here. The version, the number of replicas and the configuration and

317
00:19:53,728 --> 00:19:57,354
so on and so forth. So simple as that. Now I can go ahead and

318
00:19:57,472 --> 00:20:00,858
apply this manifest to the cluster so that it can

319
00:20:01,024 --> 00:20:05,146
go ahead and create the resources required for this Apache Kafka

320
00:20:05,178 --> 00:20:08,494
installation on kubernetes. Okay, so to be

321
00:20:08,532 --> 00:20:12,554
very honest with you, this is actually going to take a bit of

322
00:20:12,692 --> 00:20:16,580
time. So if I were to check this right here.

323
00:20:17,910 --> 00:20:21,426
So as you can see, I have all the resources in

324
00:20:21,448 --> 00:20:24,494
the Kafka namespace and the cluster

325
00:20:24,542 --> 00:20:27,922
operator. This is something which I had, like I said, I had already

326
00:20:27,976 --> 00:20:31,446
deployed the crds as well as the strimz operator. So as you can see,

327
00:20:31,468 --> 00:20:35,014
this is already up and running. Of course, otherwise nothing would work.

328
00:20:35,132 --> 00:20:38,998
And right now what's work in progress is the zookeeper

329
00:20:39,094 --> 00:20:41,994
pod and the related resources. Okay,

330
00:20:42,192 --> 00:20:46,540
I already have zookeeper service created here,

331
00:20:47,230 --> 00:20:50,974
so let's see how this goes. If I were to check this again

332
00:20:51,092 --> 00:20:54,686
as to how things are going. Actually, you know what, let me

333
00:20:54,708 --> 00:20:57,310
do this. Get pods.

334
00:21:00,610 --> 00:21:04,434
Okay. So I can see that all these pods are up and running.

335
00:21:04,552 --> 00:21:08,034
So what I'm going to do is just wait for some

336
00:21:08,072 --> 00:21:12,260
of these resources. Excuse me, I didn't mean to type that.

337
00:21:12,710 --> 00:21:16,758
My apologies. So let's see if everything

338
00:21:16,844 --> 00:21:20,306
we need is here. So let's

339
00:21:20,338 --> 00:21:23,762
see. Yeah, so some of the resources

340
00:21:23,826 --> 00:21:27,170
are still actually getting created.

341
00:21:27,250 --> 00:21:30,730
Now sort of once everything

342
00:21:30,800 --> 00:21:34,714
is created, you should actually see a sort of success message

343
00:21:34,912 --> 00:21:37,450
from this command.

344
00:21:38,590 --> 00:21:41,550
We'll give it a few seconds.

345
00:21:42,690 --> 00:21:45,440
Awesome. Okay, so as you can see,

346
00:21:46,210 --> 00:21:50,062
our Kafka resources, the Kafka cluster on kubernetes is

347
00:21:50,116 --> 00:21:53,550
up and running. Now we can actually go ahead and test it

348
00:21:53,700 --> 00:21:57,086
using the good old Kafka Cli the producer and consumer

349
00:21:57,118 --> 00:22:00,900
Cli. So let me go ahead and do that. So I'm going to first

350
00:22:02,070 --> 00:22:05,378
get the value for the bootstrap server. I'm just going to simply run a bunch

351
00:22:05,394 --> 00:22:09,240
of commands and show you how this cluster actually works.

352
00:22:10,490 --> 00:22:15,462
And what I'm going to do is initiate the

353
00:22:15,516 --> 00:22:20,966
producer here and

354
00:22:20,988 --> 00:22:24,534
I'm going to start the consumer in a different terminal first the

355
00:22:24,572 --> 00:22:31,120
bootstrap server, and it,

356
00:22:32,930 --> 00:22:36,970
and I can actually go back here and produce

357
00:22:37,050 --> 00:22:40,590
messages. Hello, oops.

358
00:22:41,090 --> 00:22:46,834
Hello conf 42.

359
00:22:47,032 --> 00:22:51,694
If I can type cube

360
00:22:51,742 --> 00:22:55,074
native, let's see what's going on on the consumer side.

361
00:22:55,112 --> 00:22:59,390
All right, awesome. So we are actually able to receive these messages.

362
00:22:59,550 --> 00:23:03,174
Hello Con 42, cube native. Awesome. So this is great,

363
00:23:03,292 --> 00:23:06,502
right? So what you just saw, it's a very, very simple example,

364
00:23:06,556 --> 00:23:09,894
I do agree. But then if you think about in the larger,

365
00:23:09,942 --> 00:23:14,378
in the bigger scheme of things, you were able to actually write code,

366
00:23:14,464 --> 00:23:19,114
actual go code, to define a Kafka cluster and

367
00:23:19,152 --> 00:23:23,034
then use that to convert that into a CRD specification

368
00:23:23,082 --> 00:23:26,542
or yaml to define your custom resource definition and then apply

369
00:23:26,596 --> 00:23:29,790
that to your Kubernetes cluster. So with that said,

370
00:23:29,940 --> 00:23:33,162
what I'm going to do is switch back to my presentation.

371
00:23:33,226 --> 00:23:36,322
That's pretty much a wrap up in terms of the demos at least.

372
00:23:36,376 --> 00:23:39,522
So let me switch back

373
00:23:39,576 --> 00:23:43,074
real quick. So that's pretty much

374
00:23:43,192 --> 00:23:46,034
all I have. I mean this is all I could cover in the space of

375
00:23:46,072 --> 00:23:49,542
about 20 odd minutes. But just to give you a quick

376
00:23:49,596 --> 00:23:53,442
recap. So we covered the basic syndicates API

377
00:23:53,586 --> 00:23:56,994
and how to bootstrap a project and write a Kubernetes deploying.

378
00:23:57,122 --> 00:24:00,762
And then you saw how cdks plus provides a much better

379
00:24:00,816 --> 00:24:04,422
developer experience in terms of a very natural and intuitive

380
00:24:04,486 --> 00:24:08,662
API. We then explored how to abstract away WordPress

381
00:24:08,806 --> 00:24:12,358
as a custom component and then use that on demand to

382
00:24:12,384 --> 00:24:16,254
spin up a complete WordPress deployment on kubernetes. And last but

383
00:24:16,292 --> 00:24:19,566
not the least, we looked at some advanced stuff where we

384
00:24:19,588 --> 00:24:23,374
imported a custom resource definition as an API and then

385
00:24:23,412 --> 00:24:26,850
used that to kick off a Kafka cluster on kubernetes.

386
00:24:27,270 --> 00:24:30,594
So really what I'm hoping for you is

387
00:24:30,632 --> 00:24:34,450
to think about this concept of infrastructure is

388
00:24:34,520 --> 00:24:38,414
code as opposed to infrastructure as code. So what you saw here

389
00:24:38,472 --> 00:24:42,310
is actually a code first approach using the programming languages

390
00:24:43,130 --> 00:24:46,150
we are familiar with, which we leverage day in, day out, right?

391
00:24:46,220 --> 00:24:49,302
So if you want to learn more, there are lots of resources you can refer

392
00:24:49,356 --> 00:24:52,614
to. And I've actually been writing up a series of blog posts.

393
00:24:52,662 --> 00:24:55,820
So yeah, check that out. I think I've finished about

394
00:24:56,350 --> 00:24:59,706
four blogs and a couple of them are still left so

395
00:24:59,728 --> 00:25:02,782
it's a pretty lengthy series but I'm hoping it will be useful for you.

396
00:25:02,916 --> 00:25:06,318
Of course you can read up on the Kubernetes excuse me

397
00:25:06,324 --> 00:25:09,680
the CDK's documentation AWS well and there are a bunch of

398
00:25:10,370 --> 00:25:13,886
examples on the CDK's GitHub repo and of course then there

399
00:25:13,908 --> 00:25:17,040
is the API reference as well.

400
00:25:18,370 --> 00:25:22,026
One last thing before I let you go, I would really really appreciate

401
00:25:22,058 --> 00:25:25,494
it if you can provide your feedback. We really want to hear from you

402
00:25:25,612 --> 00:25:28,726
how your experience was and we always look for ways to

403
00:25:28,748 --> 00:25:32,806
improve so all you need to do is scan this QR code or go

404
00:25:32,828 --> 00:25:36,806
directly to this URL if you so prefer. It shouldn't take more

405
00:25:36,828 --> 00:25:40,386
than a minute to be honest with you so this is very short and sweet

406
00:25:40,418 --> 00:25:44,566
feedback so I would really appreciate it if you can help us with

407
00:25:44,588 --> 00:25:48,006
your inputs. So thanks again for joining and enjoy the

408
00:25:48,028 --> 00:25:48,898
rest of the conference.

