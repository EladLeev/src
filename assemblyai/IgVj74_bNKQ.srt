1
00:00:30,770 --> 00:00:34,146
Hello everyone. My name is Ramon Medrano. I'm a cyber

2
00:00:34,178 --> 00:00:38,162
reliability engineer at Google. I work in the identity

3
00:00:38,226 --> 00:00:42,198
team in the third site that we have, and I have been doing this for

4
00:00:42,204 --> 00:00:45,538
the last decade, believe it or not. I'm very thrilled

5
00:00:45,554 --> 00:00:48,914
to be speaking to you today about how we measure

6
00:00:48,962 --> 00:00:52,094
reliability in production. We are going to be doing

7
00:00:52,132 --> 00:00:56,106
a small workshop of creating a small SLO in a distributed

8
00:00:56,138 --> 00:01:00,026
system and giving some hints

9
00:01:00,058 --> 00:01:03,118
of how we are going to be creating or what questions we are going to

10
00:01:03,124 --> 00:01:07,134
need to answer when we are in the business of creating

11
00:01:07,182 --> 00:01:10,500
an SLI and SLO, et cetera. So let's cover that all.

12
00:01:10,950 --> 00:01:14,770
So the first introduction I want to make is the most important

13
00:01:14,840 --> 00:01:19,282
feature of any system or service is the reliability

14
00:01:19,426 --> 00:01:23,126
it has towards its customers and clients. In my

15
00:01:23,148 --> 00:01:26,326
opinion, this includes security as well, because any system where we

16
00:01:26,348 --> 00:01:30,390
have, for example, in the cloud or any online shopping

17
00:01:30,550 --> 00:01:34,342
website, et cetera, will have to convince

18
00:01:34,406 --> 00:01:37,626
the users to trust them with their data, for example payment, or if you have

19
00:01:37,648 --> 00:01:41,510
a storage system with their own files and data, et cetera.

20
00:01:41,590 --> 00:01:44,750
SLO. The systems needs to be reliable in the sense of needs to be

21
00:01:44,820 --> 00:01:48,526
available for the users anytime that they need it and needs

22
00:01:48,548 --> 00:01:51,866
to be secure. So we are not leaking any data to external

23
00:01:51,898 --> 00:01:55,898
actors. The second production is what SRE is.

24
00:01:56,004 --> 00:01:59,314
I think everyone signing up to this conference more or less know what it is,

25
00:01:59,352 --> 00:02:02,834
but just 30 seconds introduction is what you get when

26
00:02:02,872 --> 00:02:07,042
you get to treat an operations problem like running a

27
00:02:07,096 --> 00:02:10,294
system or like operating a distributed system

28
00:02:10,332 --> 00:02:13,558
as a software problem, meaning that you are going to get automation, you are going

29
00:02:13,564 --> 00:02:17,142
to get to write software to manage these operations instead of just

30
00:02:17,196 --> 00:02:21,370
running them in, churning through tickets or interrupts,

31
00:02:22,270 --> 00:02:25,930
going to the matter, one of the most difficult questions,

32
00:02:26,000 --> 00:02:29,594
or the most nuanced questions that we

33
00:02:29,632 --> 00:02:33,246
have. When we are applying the SRE practice to

34
00:02:33,268 --> 00:02:36,670
a system, either that is being created or a system that already

35
00:02:36,740 --> 00:02:40,042
exists is what is the level of reliability

36
00:02:40,106 --> 00:02:43,614
we need? Answers like 100% are

37
00:02:43,652 --> 00:02:46,974
not correct. Answers like we

38
00:02:47,012 --> 00:02:50,194
shall say are neither correct for two reasons, 100% is

39
00:02:50,232 --> 00:02:54,174
not achievable. Like anything in a distributed system is subject

40
00:02:54,222 --> 00:02:57,794
to break or any problem that we have is

41
00:02:57,832 --> 00:03:01,634
going to be showing up to the users at some point we shall

42
00:03:01,682 --> 00:03:05,206
see. It's neither good because we can't have expectations on

43
00:03:05,228 --> 00:03:08,294
the systems. So we are going to try to see a process to

44
00:03:08,332 --> 00:03:11,802
answer this question. So before

45
00:03:11,856 --> 00:03:15,546
we go to the process, here are some terminology that we are going to

46
00:03:15,568 --> 00:03:19,286
use through the talk. First of all, we have CuJs. Cui stands

47
00:03:19,318 --> 00:03:23,314
for critical user journey. What it means is the definition

48
00:03:23,382 --> 00:03:26,798
of the functionality that your users care about.

49
00:03:26,884 --> 00:03:30,154
For example, if you have a shop, you care about people being able to browse

50
00:03:30,202 --> 00:03:35,262
your catalog, you care about people being able to put

51
00:03:35,316 --> 00:03:38,674
things in a cart or something like that, right? And you care about people

52
00:03:38,712 --> 00:03:41,922
being able to pay. And as well, you might care about people,

53
00:03:41,976 --> 00:03:45,826
for example, tracking their orders while they are shipping to

54
00:03:45,848 --> 00:03:49,766
them, right? So this is a functionality, core functionality from

55
00:03:49,788 --> 00:03:53,078
your service or your platform. That is something that is important

56
00:03:53,164 --> 00:03:55,874
to the user. Then we have slice.

57
00:03:55,922 --> 00:04:00,138
Slice. They are metrics. They are service level indicators that

58
00:04:00,304 --> 00:04:03,098
describe what the user experience is.

59
00:04:03,184 --> 00:04:06,870
With regards, some functionality could be a functionality as complex

60
00:04:06,950 --> 00:04:10,250
as checkout or as concrete as

61
00:04:10,400 --> 00:04:13,822
storing in my redis cache one element, right?

62
00:04:13,876 --> 00:04:17,626
Because you might want to have slice as well for these subcomponents

63
00:04:17,658 --> 00:04:21,482
on your system. Slos, they are the objectives

64
00:04:21,546 --> 00:04:25,150
we have for the service level. So they are the objectives we have

65
00:04:25,300 --> 00:04:28,786
for the user experience in different parts of the application.

66
00:04:28,888 --> 00:04:32,754
Like for example, we might want to have an objective that like three

67
00:04:32,792 --> 00:04:36,386
nines, like 99.9% of our applications

68
00:04:36,578 --> 00:04:40,834
is serving correctly for the functionality of storing

69
00:04:40,882 --> 00:04:45,542
a small value in rallies. Or like 99.99%

70
00:04:45,596 --> 00:04:49,320
of the cards successfully are checked out

71
00:04:49,630 --> 00:04:52,778
after the user decides to do so. And then

72
00:04:52,784 --> 00:04:57,302
we have slis. Slas is an agreement, it's a contract. So an SLA

73
00:04:57,446 --> 00:05:00,838
basically is a contract between you, for example, as a service provider and your

74
00:05:00,864 --> 00:05:04,702
customers, indicating like if your service level

75
00:05:04,756 --> 00:05:08,014
indicator goes under 13, SLO for some time,

76
00:05:08,132 --> 00:05:11,598
you will give them refund or you will give them some credits

77
00:05:11,684 --> 00:05:15,666
for your platform or whatever it is, how you build for

78
00:05:15,768 --> 00:05:20,238
your clients. So with terminology introduced,

79
00:05:20,334 --> 00:05:24,270
we can go to slos. And why SRE cares

80
00:05:24,350 --> 00:05:27,070
so much about slos all the time. Basically,

81
00:05:27,160 --> 00:05:30,790
slos are the lingua franca that we use across the whole

82
00:05:30,860 --> 00:05:34,246
business cycle of a product or our service, right? So from

83
00:05:34,268 --> 00:05:37,926
the concept, then we have a business description of like,

84
00:05:37,948 --> 00:05:40,678
okay, so we want to do machine learning, right?

85
00:05:40,764 --> 00:05:43,946
So how we want to do that, which service we

86
00:05:43,968 --> 00:05:47,494
want to introduce it? Is this like a new service? Is this like upgrades

87
00:05:47,542 --> 00:05:51,114
to a service that exists, for example, et cetera. Then when we have

88
00:05:51,152 --> 00:05:55,120
definition for the business of what this means, this project, this service, this platform,

89
00:05:55,650 --> 00:05:59,114
whatever we are building, we shall go to development.

90
00:05:59,162 --> 00:06:01,962
So we are going to go write code, design components,

91
00:06:02,026 --> 00:06:05,790
laying down in production, start to have some traffic, et cetera.

92
00:06:06,130 --> 00:06:09,538
Then we launch the service and then we have operations. So we are going to

93
00:06:09,544 --> 00:06:12,878
have to do weekly rollouts or like daily rollouts

94
00:06:12,894 --> 00:06:15,554
or whatever is your cannons. We are going to have to monitor, for example,

95
00:06:15,592 --> 00:06:18,386
the new versions that they are correct. We are going to have to make sure

96
00:06:18,408 --> 00:06:22,022
that we have data entirety, running backups, et cetera. And finally,

97
00:06:22,156 --> 00:06:25,302
all that stuff goes to the market. And in the market, if we have service

98
00:06:25,356 --> 00:06:28,774
that produces revenue, for example, we're going to have to manage that.

99
00:06:28,812 --> 00:06:32,458
If we have an internal infrastructure, we are going to have to discuss

100
00:06:32,624 --> 00:06:36,474
with our clients, like if this performing correct, if we need to do more

101
00:06:36,512 --> 00:06:39,594
functionality and so on. All this gets

102
00:06:39,632 --> 00:06:43,498
aligned through SLos. So Slos get discussed with the product

103
00:06:43,664 --> 00:06:47,358
team, gets discussed with the developing team and gets discussed with the SRE or the

104
00:06:47,364 --> 00:06:50,926
DevOps team. So we have an agreement of like this

105
00:06:50,948 --> 00:06:54,434
is the level of reliability that we want that makes sense for the business

106
00:06:54,552 --> 00:06:58,286
and it's reasonable to implement within some time frame

107
00:06:58,318 --> 00:07:02,402
or cost. The thing is, if everything goes

108
00:07:02,536 --> 00:07:06,018
through slos, it's like how we are going to go to create an slO.

109
00:07:06,114 --> 00:07:09,878
So this is what we're going to be looking at in

110
00:07:09,884 --> 00:07:13,414
the next minutes. So first

111
00:07:13,452 --> 00:07:16,806
of all, one plug in there if you want to

112
00:07:16,828 --> 00:07:20,406
play with slos. So you want to have

113
00:07:20,428 --> 00:07:23,514
like a small test bed service that we have that we are going to discuss

114
00:07:23,552 --> 00:07:26,858
in the next slide. That is our hipster shop. And you want to

115
00:07:26,864 --> 00:07:30,426
play about getting slis, defining slos, seeing how

116
00:07:30,448 --> 00:07:34,314
they evolve, create some load, et cetera. You can use this cloud operation sandbox.

117
00:07:34,362 --> 00:07:37,582
It's based on GCP. And you are going to get to for example,

118
00:07:37,636 --> 00:07:41,546
deploy one small distributed system and start to get some synthetic

119
00:07:41,578 --> 00:07:45,370
load and start to see how, for example, if you inject

120
00:07:45,450 --> 00:07:49,598
faults, how it affects the slice. Like what is the reliability

121
00:07:49,774 --> 00:07:53,074
of different things. The system

122
00:07:53,112 --> 00:07:55,954
that we are going to use as a matter of the example for this is

123
00:07:55,992 --> 00:07:59,746
a distributed system that we call hipster shop. It's available in GitHub

124
00:07:59,778 --> 00:08:02,854
and you can deploy it in many places. Just for example,

125
00:08:02,892 --> 00:08:06,326
if I have cloud shell in GCP, you can just run all these

126
00:08:06,348 --> 00:08:10,358
services and have a small chop that will have different services

127
00:08:10,444 --> 00:08:13,638
written in different languages, interacting and sending rpcs

128
00:08:13,654 --> 00:08:16,794
to each other. There is going to be even a database. So you can play

129
00:08:16,832 --> 00:08:21,366
with different classes of slis, you can play with different classes of distributed

130
00:08:21,398 --> 00:08:25,614
systems and languages as well. So first

131
00:08:25,652 --> 00:08:28,810
of all, how do we start creating an SLO?

132
00:08:28,890 --> 00:08:31,866
The first thing that we need to think about is the CUJs, the critical user

133
00:08:31,898 --> 00:08:35,694
journeys. The critical user journeys is the interactions,

134
00:08:35,742 --> 00:08:39,250
is the functionality that our customers and users do care about

135
00:08:39,320 --> 00:08:42,862
deeply, right? Is the interactions or is the APIs

136
00:08:42,926 --> 00:08:46,706
or is the functionality that gives or defines the success

137
00:08:46,808 --> 00:08:49,942
of our product. So we need to list them and order

138
00:08:49,996 --> 00:08:53,686
them by business impact. For example, in our shop there are three things that

139
00:08:53,708 --> 00:08:57,446
we want our shop to provide to the user. That is, we want the

140
00:08:57,468 --> 00:09:00,714
users to be able to browse our catalog, check out whenever they

141
00:09:00,752 --> 00:09:04,010
select something in their cart, and add

142
00:09:04,080 --> 00:09:08,230
some production to their cart. If we order them by business impact,

143
00:09:08,390 --> 00:09:11,194
the thing that is more important for us is for people that is already having

144
00:09:11,232 --> 00:09:15,070
a card to check them out so we can actually proceed to do the sale.

145
00:09:16,050 --> 00:09:19,614
Add to card is the second one because we want people to

146
00:09:19,652 --> 00:09:22,894
be able to create cards that we can check up later and finally we can

147
00:09:22,932 --> 00:09:26,050
browse products. This is a simple list, that's an example,

148
00:09:26,120 --> 00:09:30,018
but in different business the list will be different. Or you might have

149
00:09:30,104 --> 00:09:33,922
different CuJs in the same priority, depending on how your product

150
00:09:33,976 --> 00:09:37,490
comes to be. So a critical user journey.

151
00:09:37,570 --> 00:09:40,902
I think one word that needs

152
00:09:40,956 --> 00:09:44,486
emphasis is user. So you need to think of the

153
00:09:44,508 --> 00:09:47,974
coas that you are defining from the point of view or of your customers.

154
00:09:48,092 --> 00:09:51,994
It's not something that is as internal as for

155
00:09:52,032 --> 00:09:55,734
example, you happen to run a redis

156
00:09:55,782 --> 00:09:59,590
cache and you want to have a cua that involves explicitly the redis cache

157
00:09:59,670 --> 00:10:03,450
because that could be somehow leaking your abstraction to your customers,

158
00:10:03,600 --> 00:10:06,634
right? So if you are an infrastructure provider,

159
00:10:06,762 --> 00:10:10,302
that is, for example within a company, you are the one that is like me,

160
00:10:10,356 --> 00:10:13,520
that is running the authentication service for Google,

161
00:10:14,130 --> 00:10:17,694
you might have cujs that involve infrastructure in the sense

162
00:10:17,732 --> 00:10:21,698
that your users, there are going to be other products like for example, Gmail needs

163
00:10:21,784 --> 00:10:25,986
sign up to work for issuing credentials to access the

164
00:10:26,008 --> 00:10:29,766
mailboxes of people. That's fine. In this case,

165
00:10:29,788 --> 00:10:32,866
your user is going to be the product that is calling you as an infrastructure

166
00:10:32,898 --> 00:10:36,562
service. So your user in this case would be Gmail. So Gmail

167
00:10:36,706 --> 00:10:40,154
could be says as Gmail. I want to see for

168
00:10:40,192 --> 00:10:44,218
example, user credentials being generated properly for my product to continue to

169
00:10:44,224 --> 00:10:48,010
the mailboxes. That could be a variant for

170
00:10:48,080 --> 00:10:51,200
an infrastructure Cuj in this case.

171
00:10:52,210 --> 00:10:55,386
Then once we have the cuJs, we need to create indicators

172
00:10:55,418 --> 00:10:59,226
of the healthiness or the successfulness

173
00:10:59,338 --> 00:11:02,698
of these cujs. So when we say like we

174
00:11:02,724 --> 00:11:06,386
are going to be looking at the checkout service for our

175
00:11:06,408 --> 00:11:10,146
customers, how is the indication of or

176
00:11:10,168 --> 00:11:14,222
what are the metrics that we can use to describe how successful

177
00:11:14,286 --> 00:11:17,378
this service or this coa that we are providing to

178
00:11:17,384 --> 00:11:20,882
a user is being? Right. So we need to have metrics

179
00:11:20,946 --> 00:11:24,882
as simple as possible, but sufficiently rich so they capture

180
00:11:24,946 --> 00:11:28,710
exactly what the user are expecting us to provide

181
00:11:28,780 --> 00:11:32,006
them. So there isn't like a balance there that we need to strike.

182
00:11:32,038 --> 00:11:34,886
Well. So slis,

183
00:11:35,078 --> 00:11:38,666
we have first of all different types of SLI depending on the

184
00:11:38,688 --> 00:11:42,378
services or the platforms or the programs that we

185
00:11:42,384 --> 00:11:45,530
are running, right? If it's a transactional service,

186
00:11:45,600 --> 00:11:49,422
like a classic one that is doing rpcs to other

187
00:11:49,476 --> 00:11:52,782
services, for example, we have an endpoint that people can do, even people

188
00:11:52,836 --> 00:11:56,626
like persons can do like transactions in the sense there we

189
00:11:56,648 --> 00:11:59,874
have the classic availability, latency and quality. So we might

190
00:11:59,912 --> 00:12:03,314
say we want so many requests to succeed in less than x

191
00:12:03,352 --> 00:12:06,786
milliseconds. That's the classic SLI, right?

192
00:12:06,968 --> 00:12:10,706
Then we have data processing, which is like for example, you have a pipeline

193
00:12:10,738 --> 00:12:13,894
that is iterating through databases or you have

194
00:12:13,932 --> 00:12:17,590
processing that is asynchronous, right? There you might have indicators about

195
00:12:17,660 --> 00:12:20,806
freshness of the data that you are production. You are going to have

196
00:12:20,908 --> 00:12:24,646
indicators about the coverage. Like for example, you might want to be summarizing

197
00:12:24,678 --> 00:12:28,042
data. So you might want to have an indicator of like for each run

198
00:12:28,096 --> 00:12:31,210
of your batch job we cover like 90%, 80%,

199
00:12:31,280 --> 00:12:33,850
99% of our customers,

200
00:12:34,000 --> 00:12:38,142
right? And throughput is what, how many rows per second, for example,

201
00:12:38,196 --> 00:12:41,434
you are processing. If you are running storage,

202
00:12:41,562 --> 00:12:45,294
you might have throughput as well. Like how much queries, how much

203
00:12:45,332 --> 00:12:49,250
rows, how much data you are processing and what is the latency

204
00:12:50,310 --> 00:12:53,810
that you are having to process queries. For example, if you run an infrastructure service

205
00:12:53,880 --> 00:12:56,934
that is a data lake, you might want to say okay, so we are able

206
00:12:56,972 --> 00:13:00,774
to process these many queries per second and each query takes

207
00:13:00,812 --> 00:13:03,990
like so many milliseconds to optimize and execute.

208
00:13:05,210 --> 00:13:08,738
Then we need to like once we have the type of the SLO,

209
00:13:08,914 --> 00:13:12,314
the SLI, sorry, that we are going to be using, we want to specify like

210
00:13:12,352 --> 00:13:16,886
the specification is like going to details for this particular service instance,

211
00:13:16,998 --> 00:13:20,234
right? SLO for availability, for example, we can

212
00:13:20,272 --> 00:13:24,078
say like this is the proportion value of the quads in

213
00:13:24,084 --> 00:13:27,754
the sense of like we are serving 200 that are served

214
00:13:27,802 --> 00:13:31,214
in x latency, right? We might

215
00:13:31,252 --> 00:13:34,526
want to include latency and availability in the same SLI or

216
00:13:34,548 --> 00:13:37,726
not, depending on how we want to play this description

217
00:13:37,758 --> 00:13:41,090
of our service, right? And then we need to implement it.

218
00:13:41,160 --> 00:13:44,322
The implementing is like okay, given the services that we have

219
00:13:44,376 --> 00:13:47,826
and the components that it has, how we are going to get

220
00:13:47,928 --> 00:13:51,762
the metric to be calculated in non abstract

221
00:13:51,826 --> 00:13:54,742
way. So we are going to need to say okay, are we going to use

222
00:13:54,876 --> 00:13:58,194
events that our application is logging into the APM,

223
00:13:58,242 --> 00:14:01,974
for example, are we going to use logs that they come with a slight

224
00:14:02,022 --> 00:14:05,338
more latency for example, but they are more precise. Are we going

225
00:14:05,344 --> 00:14:08,826
to just instrument our applications or the export metrics directly so

226
00:14:08,848 --> 00:14:12,418
we can have a system like Prometheus, for example, to scrape them and calculate

227
00:14:12,534 --> 00:14:16,058
the stuff? Are we going to instrument our clients

228
00:14:16,154 --> 00:14:19,678
or are we going to just treat our front end services as a

229
00:14:19,684 --> 00:14:23,738
proxy for that? So we have, for example, less complexity,

230
00:14:23,834 --> 00:14:27,394
but there is like we don't incorporate the latency that the networking the last

231
00:14:27,432 --> 00:14:31,074
mile will introduce to the user experience.

232
00:14:31,192 --> 00:14:35,070
So those are decisions that we need to take to calculate and to implementing

233
00:14:35,150 --> 00:14:39,010
specifically the SLI that we want to show to the users.

234
00:14:40,810 --> 00:14:44,470
We want to measure from the users and show to the teams.

235
00:14:45,930 --> 00:14:49,426
So in our case, like for the checkout CoA

236
00:14:49,458 --> 00:14:53,306
that we were processing, we're going to be focusing into these

237
00:14:53,328 --> 00:14:56,794
two components of our application, right? So we have many components, but this

238
00:14:56,832 --> 00:15:00,214
CoA covers specifically our front end and the checkout

239
00:15:00,262 --> 00:15:04,030
backend service. That is the one that is going to be doing the business

240
00:15:04,100 --> 00:15:08,462
logic for the checkout that will, in their

241
00:15:08,516 --> 00:15:11,962
terms, developing other things. Like for example, when you do a checkout,

242
00:15:12,026 --> 00:15:15,550
you might want to call the payment service typically,

243
00:15:15,630 --> 00:15:18,898
right? And an email service to confirm the user that the order

244
00:15:18,984 --> 00:15:22,498
was successful, right? So the SLI that we're going

245
00:15:22,504 --> 00:15:26,366
to be implementing here, this is an availability SLI.

246
00:15:26,398 --> 00:15:29,960
So it's a transactional service. So we are going to be doing that

247
00:15:30,730 --> 00:15:34,866
howto we are going to implement it is going to be the classic proportion

248
00:15:34,898 --> 00:15:38,242
of valid checkout requests that they are served successfully.

249
00:15:38,386 --> 00:15:42,582
A successful request is going to be something that will have

250
00:15:42,716 --> 00:15:46,726
200, right. And we are going to actually implementing

251
00:15:46,758 --> 00:15:50,614
it by implementing the front end. So we are going to incorporate

252
00:15:50,662 --> 00:15:53,438
this metric. Checkout service response counts, right.

253
00:15:53,604 --> 00:15:57,114
And we are going to exclude the 500. We can see the like server errors

254
00:15:57,162 --> 00:15:59,470
and those are not successful requests.

255
00:16:01,410 --> 00:16:04,766
This example is using istio service mesh. But wherever you want to

256
00:16:04,788 --> 00:16:08,210
propagate that metric is where you are going to make the calculation.

257
00:16:08,550 --> 00:16:11,854
So then it comes the SLO, once we have the SLI,

258
00:16:11,902 --> 00:16:15,582
and this is the hard part, right, because calculating

259
00:16:15,646 --> 00:16:19,526
an SLI, implementing an SLI is just a descriptive metric of a

260
00:16:19,548 --> 00:16:22,914
system. And your developers, your SRE team will have expertise

261
00:16:22,962 --> 00:16:26,566
in that, so can get into an agreement of like this

262
00:16:26,588 --> 00:16:30,550
is the indication. But how much we

263
00:16:30,620 --> 00:16:33,146
want to target of this metric to go,

264
00:16:33,248 --> 00:16:37,002
right. In this example, for example, we have the classic three nine.

265
00:16:37,056 --> 00:16:40,742
So 99.9% of the checkout requests should be successful

266
00:16:40,806 --> 00:16:44,426
for this SLI, right. SLO 99.9

267
00:16:44,608 --> 00:16:48,318
is going to be the target for the SLI that we defined before. And if

268
00:16:48,324 --> 00:16:51,566
we are over, we are good. And if we are under, we might even have

269
00:16:51,588 --> 00:16:55,194
some SLA contractual obligations to fulfill,

270
00:16:55,322 --> 00:16:59,090
right? I say this the hard part, because this involves

271
00:16:59,430 --> 00:17:03,378
cost, right? So in the n, slo, think that

272
00:17:03,544 --> 00:17:07,682
if you are one nine, at one nine, you are cutting your error budget by

273
00:17:07,736 --> 00:17:12,022
ten. So in these three nines, SLo, we are going to have 0.1%

274
00:17:12,076 --> 00:17:15,766
of our requests as budget for failure. So if

275
00:17:15,788 --> 00:17:19,334
we fail all these requests, we are still good. So we can use this

276
00:17:19,372 --> 00:17:22,794
margin to say, like, for example, we want to do our rollouts faster, or we

277
00:17:22,832 --> 00:17:25,962
want to take some risks on the schema changes

278
00:17:26,016 --> 00:17:29,738
or whatever, is what the team is prioritizing. If we

279
00:17:29,824 --> 00:17:32,970
add one nine more, that sounds great,

280
00:17:33,040 --> 00:17:35,678
because we are going to go to four nines, but our budget is going to

281
00:17:35,684 --> 00:17:39,594
be one 10th of that. Therefore, the complexity of the operations will multiply

282
00:17:39,642 --> 00:17:43,166
by ten ish, right? And therefore the cost of

283
00:17:43,188 --> 00:17:46,610
maintaining and operating the system will be ten times more expensive.

284
00:17:47,430 --> 00:17:51,474
So we have to be very careful of having slos, that they are achievable and

285
00:17:51,512 --> 00:17:55,438
that they are something that is representative for the users

286
00:17:55,534 --> 00:17:58,120
of expectations towards the system.

287
00:17:59,290 --> 00:18:02,710
Typically, one thing that has worked well for me in the past has been

288
00:18:02,780 --> 00:18:06,614
to incorporate in the same room production developers and

289
00:18:06,652 --> 00:18:10,226
SRE and say like, okay, what SLO should we do for the business

290
00:18:10,348 --> 00:18:13,818
and product will come up with like, well, we need the highest possible,

291
00:18:13,904 --> 00:18:17,654
right? Because that's great. And then you specify

292
00:18:17,702 --> 00:18:20,906
the cost. For example, sure, we can do like five, six nines, but this

293
00:18:20,928 --> 00:18:24,554
is going to cost you this much headcount, this much development time, this much complexity

294
00:18:24,602 --> 00:18:28,062
in the deployment of the code, whatever that is. Right. And then things

295
00:18:28,116 --> 00:18:32,294
will come to balance of saying, okay, we can now achieve

296
00:18:32,442 --> 00:18:36,386
this cost, for example, for developing and operating the system towards this

297
00:18:36,408 --> 00:18:39,810
SLO, which is something within the user's expectations.

298
00:18:41,110 --> 00:18:45,410
So, summarizing on the process to create

299
00:18:45,560 --> 00:18:48,926
appropriate slos, we have, first of all, we need to list the user

300
00:18:48,958 --> 00:18:52,806
journeys and order them by business impact. This is very important that our

301
00:18:52,828 --> 00:18:56,134
product teams, they are involved because they are the ones that they know very well

302
00:18:56,172 --> 00:18:59,474
what is the business impact and what is the expectations of the users.

303
00:18:59,602 --> 00:19:03,450
At this point, you can as well get some indications of the criticality of different

304
00:19:03,520 --> 00:19:06,698
things. So the user journeys that they are on the

305
00:19:06,704 --> 00:19:09,914
top of the list, obviously, probably are going to be like

306
00:19:09,952 --> 00:19:13,562
receiving higher slos, because they seem to have more impact to the business.

307
00:19:13,696 --> 00:19:17,038
And critical user journeys that they are down the list,

308
00:19:17,124 --> 00:19:20,766
probably they are just less relevant, they are accessories, et cetera. So you might want

309
00:19:20,788 --> 00:19:24,320
to have more headroom for the slos in those.

310
00:19:25,190 --> 00:19:29,314
Second, you need to determine what are the indicators that describe the

311
00:19:29,352 --> 00:19:32,094
successfulness of these Cujs.

312
00:19:32,142 --> 00:19:35,506
Depending on the CuJ that you are considering, or depending on the component that

313
00:19:35,528 --> 00:19:37,970
is involved into the CuJ,

314
00:19:38,310 --> 00:19:42,134
the type of the SLI is going to be different and the implementation might even

315
00:19:42,172 --> 00:19:46,374
be different as well. And then you need to go back with product and

316
00:19:46,412 --> 00:19:49,842
development and say like, okay, what targets do we want for these Slis?

317
00:19:49,906 --> 00:19:53,402
Like what are the objectives that we want to meet here? Complexity and cost.

318
00:19:53,456 --> 00:19:56,794
They are going to be as well an important component to discuss.

319
00:19:56,912 --> 00:19:59,990
And as well you're going to need to hand define a measurement period.

320
00:20:00,070 --> 00:20:03,326
Right. Slo, you might want to have like sliding windows or only considering the

321
00:20:03,348 --> 00:20:07,022
natural month, depending on what is the

322
00:20:07,076 --> 00:20:10,958
characteristics of your services. Finally, you can

323
00:20:10,964 --> 00:20:14,686
just implement everything. Write the code to export the metrics to calculate, to have a

324
00:20:14,708 --> 00:20:18,178
batch pipeline that is going to process the logs, whatever is what you do.

325
00:20:18,344 --> 00:20:21,874
And finally, you're going to have to deploy some alerts. The nice thing about the

326
00:20:21,912 --> 00:20:25,966
alerts is that they become pretty simple to implement because you have an SLO

327
00:20:25,998 --> 00:20:29,638
and an SLI. So the alert is going to be whenever we are having an

328
00:20:29,644 --> 00:20:32,482
SLI under the SLO for 30 period,

329
00:20:32,626 --> 00:20:35,880
like, I don't know, 1 hour, five minutes, 15 minutes.

330
00:20:36,250 --> 00:20:40,250
The higher the slO, usually the smaller the window.

331
00:20:41,630 --> 00:20:43,290
You just trigger an alert.

332
00:20:45,230 --> 00:20:48,506
If you want to know more about SRE, if you want to know more about

333
00:20:48,528 --> 00:20:51,706
the practice, if you want to know more about how to implement these things in

334
00:20:51,728 --> 00:20:55,338
your company, you have these books. Now, we have like a family of four books.

335
00:20:55,514 --> 00:20:59,242
The first book is the one that defines the general principle of SRE.

336
00:20:59,386 --> 00:21:02,862
The second one, the workbook, is really focused on

337
00:21:02,916 --> 00:21:06,050
how to implement the first book in existing organizations.

338
00:21:07,030 --> 00:21:10,562
And the other ones, they are very specific. So if you

339
00:21:10,616 --> 00:21:13,938
want to talk about security and reliability together,

340
00:21:14,024 --> 00:21:17,366
there's the third book for you. And the last one is like a

341
00:21:17,388 --> 00:21:20,866
version of the workbook, but is specifically tailored

342
00:21:20,898 --> 00:21:24,450
for large organizations, like for example, large enterprises

343
00:21:24,530 --> 00:21:28,006
and so on. So how you can steer the culture within the

344
00:21:28,028 --> 00:21:30,600
company to have SRE in there.

345
00:21:32,170 --> 00:21:35,446
Thank you for watching. Thank you for listening. I would be happy to answer any

346
00:21:35,468 --> 00:21:38,754
questions that you have either in the chat or in the Twitter

347
00:21:38,802 --> 00:21:43,294
or any other social network that you use and see

348
00:21:43,332 --> 00:21:43,580
you around.

