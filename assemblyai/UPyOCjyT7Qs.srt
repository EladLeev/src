1
00:01:28,370 --> 00:01:32,658
How do you secure your cloud native product on can ongoing basis?

2
00:01:32,834 --> 00:01:36,354
Probably using branch protection and some CI CD pipeline,

3
00:01:36,402 --> 00:01:39,898
right? You probably have multiple security tools,

4
00:01:40,034 --> 00:01:43,546
each one speaking its own language. You need to configure

5
00:01:43,578 --> 00:01:46,762
them individually and obviously JIT will be hard to scale,

6
00:01:46,906 --> 00:01:50,750
especially if you want to configure those tool in a different manner

7
00:01:51,490 --> 00:01:55,474
depending on the context, some repos being more critical than

8
00:01:55,512 --> 00:01:59,410
others. But what if there was a way to write simple

9
00:01:59,480 --> 00:02:03,646
policies using a single language for all your security tools?

10
00:02:03,838 --> 00:02:06,802
That would certainly make your job faster and less painful,

11
00:02:06,866 --> 00:02:10,786
right? Well guess what? That's not science fiction.

12
00:02:10,898 --> 00:02:14,262
Thanks to a great open source project called Open

13
00:02:14,316 --> 00:02:17,894
Policy Agent, which is exactly the topic of

14
00:02:17,932 --> 00:02:21,606
my talk today. I am David Melamed, co founder and CTo

15
00:02:21,638 --> 00:02:24,998
at JIT, the continuous security platform for developers.

16
00:02:25,174 --> 00:02:28,874
JIT provides a unique set of built in security plans as

17
00:02:28,912 --> 00:02:32,590
code, helping you navigate through your security journey by

18
00:02:32,660 --> 00:02:35,674
automating the integration of tools and processes.

19
00:02:35,802 --> 00:02:39,374
But back to OPA for those who have never heard of JIT or

20
00:02:39,412 --> 00:02:43,058
never used it, open policy agent is a cloud

21
00:02:43,144 --> 00:02:46,366
native open source policy engine whose

22
00:02:46,398 --> 00:02:49,742
goal is to unify policy enforcement across the stack.

23
00:02:49,886 --> 00:02:53,122
It can be used for a high variety of services

24
00:02:53,256 --> 00:02:56,482
like API gateway, message brokers, kubernetes,

25
00:02:56,546 --> 00:03:00,130
API server and CI CD pipelines. It provides

26
00:03:00,210 --> 00:03:03,910
a high level declarative language called

27
00:03:03,980 --> 00:03:07,734
Rego that lets you specify policy as code and

28
00:03:07,772 --> 00:03:11,820
APIs to offload policy decision making from your application.

29
00:03:12,430 --> 00:03:16,886
And the main use case for OPA are authorization,

30
00:03:17,078 --> 00:03:21,790
SSH, access, admission control and data filtering.

31
00:03:22,530 --> 00:03:26,650
Now this is a sample architecture using OPA.

32
00:03:26,810 --> 00:03:30,270
Here you can see there is a request to a service and

33
00:03:30,340 --> 00:03:34,014
in order to decide whether the user who made the call is authorized

34
00:03:34,062 --> 00:03:36,894
to call it and should get a proper response,

35
00:03:36,942 --> 00:03:40,354
the service dedicates the decision to OPA which

36
00:03:40,392 --> 00:03:44,114
leverages some database in order

37
00:03:44,152 --> 00:03:47,970
to get the mapping between the lists of the user and the roles

38
00:03:48,130 --> 00:03:51,522
and the policies which are written

39
00:03:51,586 --> 00:03:55,590
in rego that define

40
00:03:56,090 --> 00:03:59,722
the role of the users that can see

41
00:03:59,776 --> 00:04:03,740
the data. Let's see a concrete example of that.

42
00:04:04,350 --> 00:04:08,374
Here you can see a service called salaries that will return the salaries

43
00:04:08,422 --> 00:04:12,526
of the employees in the request. You can see in

44
00:04:12,548 --> 00:04:16,062
the header that the user that is

45
00:04:16,116 --> 00:04:18,560
making the call is user one.

46
00:04:18,930 --> 00:04:22,526
Now the service is delegating the

47
00:04:22,548 --> 00:04:26,674
decision of whether or not user one can see the results these

48
00:04:26,792 --> 00:04:29,726
salaries by calling OPA,

49
00:04:29,838 --> 00:04:32,366
passing the header, the X user,

50
00:04:32,478 --> 00:04:36,354
user one, and OPA will leverage both the

51
00:04:36,392 --> 00:04:40,326
data in the database that is mapping between the

52
00:04:40,348 --> 00:04:44,226
users and the roles. So here user one is employee and user

53
00:04:44,258 --> 00:04:47,722
two is admin and the policy which says that only

54
00:04:47,776 --> 00:04:51,770
admin can see the salaries. So based

55
00:04:51,840 --> 00:04:55,210
on the policy, the data and

56
00:04:55,280 --> 00:04:58,858
the input, it will actually evaluate the policy

57
00:04:58,944 --> 00:05:02,174
and says that well this user, user one should

58
00:05:02,212 --> 00:05:05,690
be denied and that's the decision that is returned

59
00:05:05,770 --> 00:05:09,930
to the service, the salaries which should deny

60
00:05:10,010 --> 00:05:13,278
the request. Now a

61
00:05:13,284 --> 00:05:17,170
little bit more generate about this regal language.

62
00:05:17,910 --> 00:05:22,606
Basically it's a declarative language, that is that the syntax is mirroring

63
00:05:22,718 --> 00:05:26,280
declarative real world policies. For example,

64
00:05:26,650 --> 00:05:30,722
is X allowed to call operation y on resource

65
00:05:30,786 --> 00:05:34,514
z? And you can see how it's applied

66
00:05:34,562 --> 00:05:38,186
here. The policy at the left

67
00:05:38,288 --> 00:05:41,654
says that if the method

68
00:05:41,702 --> 00:05:44,986
of the input is get the

69
00:05:45,008 --> 00:05:48,282
path include reviews and the user is John,

70
00:05:48,416 --> 00:05:51,980
then the decision should be allow.

71
00:05:52,290 --> 00:05:55,710
And as you can see in the right, in the input,

72
00:05:56,370 --> 00:06:00,234
the method is get the path includes reviews

73
00:06:00,282 --> 00:06:03,902
and the user is John. And so the results of this policy is

74
00:06:03,956 --> 00:06:08,114
actually true. Now if we apply this to the

75
00:06:08,152 --> 00:06:13,794
security world and let's see a

76
00:06:13,832 --> 00:06:17,218
tool that is here a SAS tool. So static

77
00:06:17,314 --> 00:06:21,030
analysis, then you can see the following.

78
00:06:21,770 --> 00:06:26,610
At the left you can see there is the JSON output

79
00:06:26,690 --> 00:06:30,060
of the tool called bandit, which is a sast tool

80
00:06:30,590 --> 00:06:34,966
written in Python. And this output includes

81
00:06:35,078 --> 00:06:39,114
some general statistics. As you can see at the top it

82
00:06:39,152 --> 00:06:43,470
includes the number of vulnerabilities per severity.

83
00:06:45,010 --> 00:06:48,158
Now in the right you can see that the policy

84
00:06:48,244 --> 00:06:51,854
says that if the totals of the high

85
00:06:51,892 --> 00:06:55,474
severity is higher than zero,

86
00:06:55,672 --> 00:06:59,294
then the result should be denied,

87
00:06:59,342 --> 00:07:03,106
decision should be denied. And as you can see here in

88
00:07:03,128 --> 00:07:06,614
the left in the output you can see severity high is four.

89
00:07:06,732 --> 00:07:10,070
And that's why the result is deny test

90
00:07:10,140 --> 00:07:12,230
fail with four severities.

91
00:07:15,770 --> 00:07:19,580
Now for the rest of the talk I will take a very simple

92
00:07:20,270 --> 00:07:23,942
Python microservice. This microservice

93
00:07:24,006 --> 00:07:28,300
written in Python is basically returning the time and

94
00:07:28,990 --> 00:07:32,074
is getting an optional time zone

95
00:07:32,122 --> 00:07:35,582
in order to return the time in

96
00:07:35,636 --> 00:07:39,626
another time zone than a default one and default one. Here is Berlin.

97
00:07:39,818 --> 00:07:43,518
Okay, as you can see the result is very simple

98
00:07:43,684 --> 00:07:47,650
and it's return the time with the time zone.

99
00:07:49,270 --> 00:07:53,042
Now what I want to do with this application is to

100
00:07:53,096 --> 00:07:56,838
apply some security tools in

101
00:07:56,924 --> 00:08:01,160
the CI CD pipeline. So basically

102
00:08:01,850 --> 00:08:05,542
these are the four tools that I will apply here

103
00:08:05,596 --> 00:08:09,610
and I will get back to the signification of all those

104
00:08:09,680 --> 00:08:13,370
tools. But I want to explain

105
00:08:13,440 --> 00:08:17,146
a little bit what we'll do in this demo. So basically the

106
00:08:17,168 --> 00:08:21,134
user is committing comes code to GitHub and

107
00:08:21,172 --> 00:08:24,238
then GitHub is generating some PR event.

108
00:08:24,324 --> 00:08:27,406
Because this is a PR in the PR itself,

109
00:08:27,508 --> 00:08:30,426
it will trigger the CI CD pipeline.

110
00:08:30,538 --> 00:08:34,206
Now for this demo we'll use in the CI

111
00:08:34,238 --> 00:08:38,066
system GitHub actions by GitHub. And what you can

112
00:08:38,088 --> 00:08:41,250
see here is that we'll have four different jobs.

113
00:08:41,670 --> 00:08:44,850
Each job will run different security tools.

114
00:08:45,290 --> 00:08:48,338
These tools at the end will have some output.

115
00:08:48,514 --> 00:08:52,566
And after running all those tools, we have another job

116
00:08:52,748 --> 00:08:56,182
that will run open policy agent that

117
00:08:56,236 --> 00:08:59,802
will leverage both policies that

118
00:08:59,856 --> 00:09:03,386
are written in rego and that are stored in a different

119
00:09:03,488 --> 00:09:07,018
repository, in a central repository. And the result

120
00:09:07,104 --> 00:09:10,234
of all these tools, and based on this

121
00:09:10,272 --> 00:09:14,106
input, so the results of all these different secret tools

122
00:09:14,138 --> 00:09:18,046
and the policies, it will decide whether or not the

123
00:09:18,068 --> 00:09:20,400
PR should fail or should pass.

124
00:09:22,630 --> 00:09:25,986
Now let's take a few minutes to

125
00:09:26,168 --> 00:09:29,666
get into details of each of the

126
00:09:29,688 --> 00:09:33,730
tools here. So the first tool is Bandit.

127
00:09:34,630 --> 00:09:37,320
Why do you need a tool like that?

128
00:09:38,010 --> 00:09:41,206
Basically, you want to make sure that you don't have any vulnerabilities in your

129
00:09:41,228 --> 00:09:45,350
code. So for that you will use a tool

130
00:09:45,500 --> 00:09:49,290
that is doing some static analysis code.

131
00:09:49,440 --> 00:09:53,066
And here you have bandit for

132
00:09:53,088 --> 00:09:58,390
that. SAS are here to detect

133
00:09:58,470 --> 00:10:02,526
vulnerabilities based on existing patterns in

134
00:10:02,548 --> 00:10:05,834
the code. And Bandit is an open source

135
00:10:05,882 --> 00:10:09,374
tool that is written in python and that

136
00:10:09,412 --> 00:10:12,954
includes 35 built in rules for detecting

137
00:10:13,002 --> 00:10:16,960
vulnerabilities. The next tool we'll use

138
00:10:17,570 --> 00:10:21,578
is called Gitlix and editext secrets I

139
00:10:21,604 --> 00:10:25,418
think I need to explain you to you why we need to detect

140
00:10:25,534 --> 00:10:29,350
hard coded secrets, and you shouldn't have hard coded secrets in your code.

141
00:10:29,500 --> 00:10:33,542
And so Gitlix is a great tool

142
00:10:33,676 --> 00:10:37,318
that knows how to search for a lot of different

143
00:10:37,404 --> 00:10:41,530
regexes of well known secret patterns

144
00:10:41,870 --> 00:10:45,622
like GitHub personal access token

145
00:10:45,686 --> 00:10:49,274
or slack tokens, AWS keys and so on.

146
00:10:49,472 --> 00:10:53,294
And it also knows how to search

147
00:10:53,412 --> 00:10:58,720
through Git history, which is very convenient because

148
00:10:59,410 --> 00:11:02,698
you may actually commit something and then

149
00:11:02,884 --> 00:11:07,250
commit another thing, and then you actually forgot completely about your

150
00:11:07,320 --> 00:11:10,642
secret in the history. So this is the second

151
00:11:10,696 --> 00:11:14,974
tool that we'll use. The third tool is has

152
00:11:15,022 --> 00:11:18,086
dependency check, and we'll use that in

153
00:11:18,108 --> 00:11:21,794
order to track third party libraries with disclosed

154
00:11:21,922 --> 00:11:25,960
vulnerabilities. It's very important to make sure that

155
00:11:26,330 --> 00:11:29,942
all your libraries, all your dependencies are sane

156
00:11:30,006 --> 00:11:33,994
from vulnerabilities. And dependency check

157
00:11:34,032 --> 00:11:37,718
is a great tool that is maintained by OwaSP

158
00:11:37,814 --> 00:11:40,702
and includes its own database for that.

159
00:11:40,836 --> 00:11:43,200
So this is the third tool that we'll use.

160
00:11:44,370 --> 00:11:49,214
And finally we'll use zap, which is

161
00:11:49,332 --> 00:11:53,186
simulating attacks on your front end to make sure that your

162
00:11:53,208 --> 00:11:56,814
code is safe. This web application scanner

163
00:11:56,862 --> 00:12:00,830
is open source. It's also maintained by OASP,

164
00:12:00,910 --> 00:12:04,622
includes most 20 built in rules, and knows

165
00:12:04,686 --> 00:12:08,770
both to handle web application and

166
00:12:08,840 --> 00:12:12,882
API using open API or swagger

167
00:12:13,026 --> 00:12:15,670
model definition for endpoint discovery.

168
00:12:16,570 --> 00:12:20,540
So these are the full tools that we'll use in this demo.

169
00:12:22,430 --> 00:12:25,642
Now let's talk for

170
00:12:25,696 --> 00:12:29,242
a minute about the two sets of

171
00:12:29,376 --> 00:12:33,294
policies that we'll write in rego and that

172
00:12:33,412 --> 00:12:36,654
OPA will leveraged in order to decide whether

173
00:12:36,692 --> 00:12:41,214
or not to make the PR pass.

174
00:12:41,412 --> 00:12:45,394
So the first one is for the SAS tool

175
00:12:45,592 --> 00:12:49,214
and as you can see here we have a package, package SAS.

176
00:12:49,262 --> 00:12:52,818
The package is actually collection of

177
00:12:52,904 --> 00:12:56,194
different rules. Here we have two rules. The first

178
00:12:56,232 --> 00:13:00,354
rule is basically saying that we don't want any medium

179
00:13:00,402 --> 00:13:04,262
severity and the second one is saying that we don't want any

180
00:13:04,316 --> 00:13:08,054
high severity. And if you're looking at the right you will see a

181
00:13:08,092 --> 00:13:11,594
sample of the output of bandit. This is

182
00:13:11,632 --> 00:13:15,626
what we already saw previously and he

183
00:13:15,728 --> 00:13:18,906
highlighted basically what this policy

184
00:13:19,088 --> 00:13:22,494
will be able to detect in the JSON that it will

185
00:13:22,532 --> 00:13:25,680
receive after running the SAS tool

186
00:13:26,050 --> 00:13:27,870
in the CI pipeline.

187
00:13:29,170 --> 00:13:33,502
The second policy that we'll write is about the secrets.

188
00:13:33,646 --> 00:13:37,038
And basically here we also have two different rules.

189
00:13:37,134 --> 00:13:41,714
The first rule will make sure that we

190
00:13:41,832 --> 00:13:45,554
don't have any secrets in

191
00:13:45,752 --> 00:13:48,978
this serverless Yaml file,

192
00:13:49,074 --> 00:13:53,410
and the other will make sure that if we have an AWS

193
00:13:53,490 --> 00:13:56,614
access token we'll actually fail the

194
00:13:56,652 --> 00:14:00,600
PR. This is really an example just to show you

195
00:14:01,130 --> 00:14:05,302
some rules. Obviously we'll probably prefer

196
00:14:05,366 --> 00:14:09,050
to make sure that if you have any kind of hard coded secret

197
00:14:09,550 --> 00:14:13,294
you will want the PR to fail. But here, let's say

198
00:14:13,332 --> 00:14:17,146
for example, you have a tool that is creating a lot of false positive

199
00:14:17,258 --> 00:14:21,358
and maybe you want to make sure that comes

200
00:14:21,444 --> 00:14:24,714
specific type of API

201
00:14:24,762 --> 00:14:29,114
keys you want to fail.

202
00:14:29,242 --> 00:14:32,974
And so this is an example of how you can write something

203
00:14:33,012 --> 00:14:37,074
like that. We're checking basically here that if the rule is AWS

204
00:14:37,122 --> 00:14:40,600
access token, then make sure to fail the PR.

205
00:14:42,170 --> 00:14:48,010
Okay, so now that we saw the different type

206
00:14:48,080 --> 00:14:51,802
of policies that we want to write, let's put it

207
00:14:51,856 --> 00:14:55,146
in action. So this

208
00:14:55,168 --> 00:14:59,210
is my ide and this is the code of my small

209
00:14:59,280 --> 00:15:03,600
serverless python application. There's a simple function here,

210
00:15:03,970 --> 00:15:08,320
get function that will return the current

211
00:15:08,770 --> 00:15:12,426
time based on the time zone, whether it's provided

212
00:15:12,458 --> 00:15:16,254
has a query string parameter or using the default

213
00:15:16,302 --> 00:15:19,554
one, which is Berlin. Here I also

214
00:15:19,592 --> 00:15:23,154
have a docker compose file because I want to test my

215
00:15:23,192 --> 00:15:26,866
application locally. So for that I'm using local stack

216
00:15:26,978 --> 00:15:30,598
and this is how we'll deploy my application in a

217
00:15:30,604 --> 00:15:34,662
few seconds. What I also want to show you is

218
00:15:34,716 --> 00:15:39,482
this secret Yaml, which is basically the

219
00:15:39,536 --> 00:15:43,466
GitHub action workflow that I

220
00:15:43,488 --> 00:15:48,426
will run both locally and after that I will run it on

221
00:15:48,448 --> 00:15:51,500
GitHub. So as you can see here,

222
00:15:51,950 --> 00:15:55,486
and as I explained before, I have a couple of jobs. So I have

223
00:15:55,508 --> 00:15:58,766
a job for the SAST tool, I have

224
00:15:58,788 --> 00:16:02,160
a job for the secret detection, for dependency check,

225
00:16:02,710 --> 00:16:07,006
for the dynamic runtime detection

226
00:16:07,118 --> 00:16:11,300
and also this policy valve that will run policy agent.

227
00:16:12,710 --> 00:16:16,566
So first of all what happens in the SAS job?

228
00:16:16,748 --> 00:16:20,514
Basically it's running on Ubuntu

229
00:16:20,562 --> 00:16:24,450
latest, checking out the code, setting up Python,

230
00:16:24,610 --> 00:16:29,206
installing bandits and just

231
00:16:29,308 --> 00:16:33,094
running bandits, saving the output in the JSON

232
00:16:33,142 --> 00:16:37,050
file and after that uploading that as an artifact.

233
00:16:38,670 --> 00:16:43,200
The second job, the secret detection is using

234
00:16:44,530 --> 00:16:48,462
this Gitix action and is

235
00:16:48,516 --> 00:16:53,330
saving the report in a simple file.

236
00:16:53,910 --> 00:16:57,506
And I here need to use

237
00:16:57,688 --> 00:17:01,890
low and secure commands in order to be able to save

238
00:17:01,960 --> 00:17:05,374
this file inside this

239
00:17:05,512 --> 00:17:09,094
action at the end I'm writing this report

240
00:17:09,212 --> 00:17:12,806
here and I'm also uploading as an artifact so that I

241
00:17:12,828 --> 00:17:16,502
will be able to retrieve it afterwards when

242
00:17:16,556 --> 00:17:20,106
I will evaluate the policy. The third job

243
00:17:20,208 --> 00:17:24,074
is dependency check and actually

244
00:17:24,192 --> 00:17:28,246
it's similar. I'm checking

245
00:17:28,278 --> 00:17:31,886
out my code setting up go here

246
00:17:32,068 --> 00:17:35,502
and I'm installing poof, which will

247
00:17:35,556 --> 00:17:39,530
allow me to parse the result of the dependency

248
00:17:39,610 --> 00:17:43,930
check. Here I'm installing

249
00:17:44,010 --> 00:17:47,646
dependency check, making sure that I'm using also some cache

250
00:17:47,678 --> 00:17:51,246
for a database so that it won't retrieve

251
00:17:51,278 --> 00:17:54,770
the database every time. And at the end

252
00:17:54,840 --> 00:17:58,498
I'm running the parentheses check tool and I'm

253
00:17:58,594 --> 00:18:02,790
saving the results in some JSON file.

254
00:18:04,170 --> 00:18:07,526
The DAS tool is a little bit more

255
00:18:07,548 --> 00:18:11,254
complicated because what I need to do is to deploy my

256
00:18:11,292 --> 00:18:14,854
application to a local stack that is running inside my

257
00:18:14,892 --> 00:18:18,454
CI and after that I can run

258
00:18:18,492 --> 00:18:22,350
zap against this public

259
00:18:22,420 --> 00:18:26,218
URL that I will get. So this is what I'm

260
00:18:26,234 --> 00:18:30,654
doing here. I'm getting the results here of

261
00:18:30,692 --> 00:18:34,014
the deployment locally to local stack and then I'm

262
00:18:34,062 --> 00:18:36,830
running zap against this URL.

263
00:18:36,990 --> 00:18:40,498
So now that I have all this for job running,

264
00:18:40,584 --> 00:18:44,740
at the end I'm running the policy

265
00:18:45,110 --> 00:18:49,222
valve and what Jit does basically is

266
00:18:49,276 --> 00:18:53,542
that it's retrieving all these two

267
00:18:53,676 --> 00:18:57,622
sets of policies that

268
00:18:57,676 --> 00:19:01,506
I defined earlier from this repository it's

269
00:19:01,538 --> 00:19:05,130
using comes test which is a tool that is running

270
00:19:05,200 --> 00:19:09,846
behind the scene open policy agent and

271
00:19:09,968 --> 00:19:13,614
then I can retrieve the different artifacts that

272
00:19:13,732 --> 00:19:17,834
I downloaded. I uploaded, sorry. So here it's

273
00:19:17,882 --> 00:19:21,466
retrieving the bandit report and here it's

274
00:19:21,498 --> 00:19:23,940
making sure that the policy,

275
00:19:25,030 --> 00:19:29,074
so conftest, which is running OPA behind

276
00:19:29,112 --> 00:19:33,794
the scene will make sure that the

277
00:19:33,832 --> 00:19:37,438
bandit report will actually comply to

278
00:19:37,464 --> 00:19:41,270
the policy of the SAS. And after that I'm doing the same thing

279
00:19:41,340 --> 00:19:45,010
for the other policies. So here are the secrets

280
00:19:45,090 --> 00:19:50,746
and I'm also making sure that contest runs with

281
00:19:50,768 --> 00:19:54,490
the report against the secret packages.

282
00:19:54,910 --> 00:19:58,970
So this is basically the code and I will see that in actions.

283
00:19:59,390 --> 00:20:05,280
So I will go to the terminal and

284
00:20:05,810 --> 00:20:10,666
here I will just call again here this ping

285
00:20:10,698 --> 00:20:14,962
to make sure that my service is working. And then what I will do is

286
00:20:15,096 --> 00:20:19,426
I will run act,

287
00:20:19,528 --> 00:20:23,486
which is the local version of GitHub

288
00:20:23,518 --> 00:20:26,982
actions, just to show you that I can make it work

289
00:20:27,036 --> 00:20:29,830
locally first before going to GitHub.

290
00:20:30,810 --> 00:20:34,086
So let's make it run. As you

291
00:20:34,108 --> 00:20:37,640
can see there are some secrets that Gitix found

292
00:20:39,790 --> 00:20:43,370
and it's now uploading the artifact,

293
00:20:45,710 --> 00:20:49,514
installing everything here. And in a few seconds we

294
00:20:49,552 --> 00:20:52,750
should have the results. We are also

295
00:20:52,820 --> 00:20:56,270
already running the policy evaluation.

296
00:20:59,670 --> 00:21:03,154
So here we are retrieving conf test as

297
00:21:03,192 --> 00:21:04,210
an image.

298
00:21:07,290 --> 00:21:11,270
Here we're retrieving the policy from this repository.

299
00:21:11,690 --> 00:21:15,942
And here you can see that two tests were

300
00:21:15,996 --> 00:21:19,834
actually run, one passed and

301
00:21:19,952 --> 00:21:24,118
one failure. And that's because I had some vulnerability

302
00:21:24,294 --> 00:21:27,766
that Bendy discovered. And so that's

303
00:21:27,798 --> 00:21:32,090
why it actually failed right here it's actually written SAS test

304
00:21:32,160 --> 00:21:35,070
fail. Why? Medium severity.

305
00:21:35,410 --> 00:21:39,534
Right. Okay, now let's see how it works in

306
00:21:39,572 --> 00:21:42,974
GitHub itself. So for that let's go to the browser.

307
00:21:43,102 --> 00:21:46,142
This is the repository that you can also clone

308
00:21:46,286 --> 00:21:50,260
and that include all the code that I just showed you.

309
00:21:51,350 --> 00:21:54,740
I have another repo for the test

310
00:21:56,230 --> 00:21:59,622
for the policies, sorry. So here you can see

311
00:21:59,756 --> 00:22:02,040
the policies that I showed you before,

312
00:22:04,570 --> 00:22:09,050
right? And here if I'm

313
00:22:09,630 --> 00:22:12,842
adding some, changing something

314
00:22:12,896 --> 00:22:13,980
here for example,

315
00:22:18,690 --> 00:22:31,086
and I'm creating a pr and

316
00:22:31,108 --> 00:22:34,018
then we can see the results here. Actually I already did that before.

317
00:22:34,104 --> 00:22:38,034
So we can see here that all the

318
00:22:38,072 --> 00:22:42,238
difference job ran and at the end the policy evaluation

319
00:22:42,334 --> 00:22:46,258
failed. And if I'm getting here the results, the details,

320
00:22:46,354 --> 00:22:50,678
I can see also the same thing here, that bandit actually

321
00:22:50,764 --> 00:22:54,406
failed and I can see the details if

322
00:22:54,428 --> 00:22:58,586
I want. Here I can see the details that I have one

323
00:22:58,688 --> 00:23:01,100
medium severity. Right?

324
00:23:03,230 --> 00:23:06,634
So what you just saw

325
00:23:06,672 --> 00:23:10,522
in this demo is a way to manage centrally

326
00:23:10,666 --> 00:23:14,894
policies in order to have a single way to write

327
00:23:15,092 --> 00:23:19,434
your policies and a single decision point. And Ajit,

328
00:23:19,482 --> 00:23:22,946
we implemented this as part of our platform in

329
00:23:22,968 --> 00:23:26,686
order to provide a simple way to manage the open source

330
00:23:26,798 --> 00:23:30,306
security tools that we orchestrate in

331
00:23:30,328 --> 00:23:33,700
the context of the security plans that we offer.

332
00:23:34,010 --> 00:23:37,830
And of course you can imagine that you can write

333
00:23:37,900 --> 00:23:41,606
more complex rules per package and even

334
00:23:41,788 --> 00:23:45,122
you can add things like external HTTP called

335
00:23:45,186 --> 00:23:49,274
if you want to other services in order to make things

336
00:23:49,472 --> 00:23:52,726
more complex, or if you need additional

337
00:23:52,838 --> 00:23:56,490
data from other services, or from database or

338
00:23:56,560 --> 00:24:00,142
whatever, you can make things

339
00:24:00,196 --> 00:24:03,886
really more complicated. And at

340
00:24:03,908 --> 00:24:07,502
the end, OPA will decide whether or not your

341
00:24:07,556 --> 00:24:10,350
pr should pass or fail.

342
00:24:11,750 --> 00:24:15,662
If you got intrigued by what you just saw, just like don't

343
00:24:15,726 --> 00:24:19,234
hesitate to visit our website and

344
00:24:19,272 --> 00:24:22,674
try out the early beta version of our platform

345
00:24:22,872 --> 00:24:26,578
in order to start securing your project. And if

346
00:24:26,584 --> 00:24:30,018
you write me a message, then you will even get

347
00:24:30,104 --> 00:24:33,694
vip onboarding experience. So I'm

348
00:24:33,742 --> 00:24:37,580
welcoming you to try it out if you like both

349
00:24:37,950 --> 00:24:42,250
the idea of having some kind of central way to manage

350
00:24:42,320 --> 00:24:45,500
your policies and to manage all your security.

351
00:24:46,670 --> 00:24:50,298
So thank you very much for your attention and if you have any questions,

352
00:24:50,384 --> 00:24:53,480
don't hesitate to drop me a message. Thank you.

