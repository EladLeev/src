1
00:00:00,250 --> 00:00:01,630
Are you an SRE,

2
00:00:03,570 --> 00:00:04,830
a developer,

3
00:00:06,610 --> 00:00:10,474
a quality engineer who wants to tackle the challenge of improving

4
00:00:10,522 --> 00:00:14,026
reliability in your DevOps? You can enable your DevOps

5
00:00:14,058 --> 00:00:16,510
for reliability with chaos native.

6
00:00:16,930 --> 00:00:20,800
Create your free account at Chaos native Litmus Cloud

7
00:01:16,730 --> 00:01:20,834
hello everyone. Welcome to my session. Top new CNCF

8
00:01:20,882 --> 00:01:24,326
projects to look out for it's going to be

9
00:01:24,348 --> 00:01:28,650
a great time, I hope, and very much thank you everyone for attending.

10
00:01:28,990 --> 00:01:32,746
But let's get straight to it. So top new

11
00:01:32,768 --> 00:01:35,946
CNCF projects to look out for. You can

12
00:01:35,968 --> 00:01:39,846
see the session on the slide there and that's

13
00:01:39,878 --> 00:01:43,406
what we will be going through today. So before all

14
00:01:43,428 --> 00:01:47,262
of my sessions, I like to do a bit of talking

15
00:01:47,316 --> 00:01:50,414
about, very briefly about what to expect,

16
00:01:50,532 --> 00:01:53,482
what is the value that you get by attending this session,

17
00:01:53,546 --> 00:01:56,746
this talk, and the kind of like the learning tools

18
00:01:56,778 --> 00:02:00,242
for this session as well. So the learning goals here, as well as what

19
00:02:00,296 --> 00:02:04,146
I hope that you will be finding out after the session, is I hope

20
00:02:04,168 --> 00:02:08,450
that you get inspired. I hope that you encounter new technologies,

21
00:02:08,530 --> 00:02:11,926
new projects that you haven't encountered before, and now you can

22
00:02:11,948 --> 00:02:15,474
actually start using them either in your hobby projects,

23
00:02:15,522 --> 00:02:19,226
either in your work or just you get to know really cool

24
00:02:19,328 --> 00:02:22,634
CNCF projects and you get to be

25
00:02:22,672 --> 00:02:26,506
inspired by them, hopefully to continue forward

26
00:02:26,608 --> 00:02:30,346
further. So that's the main goal of this session

27
00:02:30,378 --> 00:02:35,002
as well. And I update this session periodically anytime

28
00:02:35,066 --> 00:02:38,442
new projects pop up that are interesting and whatnot.

29
00:02:38,506 --> 00:02:41,886
So keep tuning back if you

30
00:02:41,908 --> 00:02:45,906
are interested. So who am I and why

31
00:02:45,928 --> 00:02:49,262
am I speaking here to you today? So, I'm Annie.

32
00:02:49,326 --> 00:02:52,574
Hi, nice to meet you. And I'm a CNCF

33
00:02:52,622 --> 00:02:55,602
ambassador and a product marketing manager at Cast AI.

34
00:02:55,746 --> 00:03:00,630
Cast AI does Kubernetes cost optimization.

35
00:03:01,290 --> 00:03:05,286
So Kubernetes cost optimization by automation. That's where

36
00:03:05,308 --> 00:03:08,582
the tongue twister happened. So we

37
00:03:08,636 --> 00:03:11,978
promised to cut your cloud bill in half and that's what I do for

38
00:03:11,984 --> 00:03:15,782
my day job. But I also do a lot of speaking at conferences

39
00:03:15,846 --> 00:03:20,166
as well as I am a Kubernetes and CNCF Meetup co organizer.

40
00:03:20,278 --> 00:03:24,394
I'm also an Azure MVP as well as an early stage startup

41
00:03:24,442 --> 00:03:27,966
coach as well as a co host of Cloud gossip podcast that

42
00:03:27,988 --> 00:03:31,920
you can find@cloudgossip.net.

43
00:03:33,110 --> 00:03:36,766
So let's get started now that I hope we got all the tongue twisters

44
00:03:36,798 --> 00:03:40,066
out of the way. And let's kick off with our

45
00:03:40,168 --> 00:03:42,850
main content for today's session.

46
00:03:43,830 --> 00:03:46,594
So cloud Native Computing Foundation,

47
00:03:46,722 --> 00:03:50,226
CNCF. That's the topic today essentially, and the projects

48
00:03:50,258 --> 00:03:54,294
that come from there. So now let's just briefly look into what

49
00:03:54,332 --> 00:03:57,710
is CNCF aka Cloud Native Computing foundation.

50
00:03:57,890 --> 00:04:01,642
So the goal and the mission and what they're doing is building

51
00:04:01,696 --> 00:04:05,594
sustainable ecosystems for cloud native software. So it

52
00:04:05,632 --> 00:04:09,222
really hosts critical components of the global technology infrastructure.

53
00:04:09,366 --> 00:04:11,838
So CNCF is home to, for example,

54
00:04:11,924 --> 00:04:15,022
Kubernetes, Prometheus, all of these great

55
00:04:15,156 --> 00:04:18,526
projects. And CNCF brings together the

56
00:04:18,548 --> 00:04:22,014
world's top developers and users and vendors, and runs the largest open

57
00:04:22,052 --> 00:04:25,662
source developer conferences. For example, Kubecon plus

58
00:04:25,796 --> 00:04:28,100
Cloud Nativecon, it's the long name.

59
00:04:28,630 --> 00:04:32,062
And CNCF is part of the nonprofit Linux

60
00:04:32,126 --> 00:04:34,580
foundation as well.

61
00:04:36,010 --> 00:04:39,494
So I think the impact of cloud native is relatively well

62
00:04:39,532 --> 00:04:41,510
known. But just as a quick recap,

63
00:04:42,410 --> 00:04:46,230
so CNCF does this survey yearly

64
00:04:46,970 --> 00:04:50,646
where they really explore the current landscape

65
00:04:50,678 --> 00:04:54,502
of cloud native world, what technologies are people using, what challenges

66
00:04:54,566 --> 00:04:58,234
are they facing, and so forth. And this data is

67
00:04:58,272 --> 00:05:00,570
from the CNCF 2020 survey.

68
00:05:01,570 --> 00:05:04,622
So let's just explore the packs a bit.

69
00:05:04,756 --> 00:05:08,766
So the use of containers in production has increased to 92%,

70
00:05:08,868 --> 00:05:13,410
up from 84% last year and up 300%

71
00:05:13,480 --> 00:05:17,970
from the first survey in 2016. So containers

72
00:05:18,710 --> 00:05:23,182
are really booming and their Kubernetes

73
00:05:23,246 --> 00:05:26,454
using production has increased to 83% and up

74
00:05:26,492 --> 00:05:30,242
from 78% last year. So even though Kubernetes

75
00:05:30,306 --> 00:05:34,242
is already a household name, the growth just continues

76
00:05:34,386 --> 00:05:37,926
as we go further. So the impact is really huge to the

77
00:05:37,948 --> 00:05:39,660
world of software at the moment.

78
00:05:42,270 --> 00:05:45,674
Then if we want to now block into what does the landscape actually look like?

79
00:05:45,712 --> 00:05:49,500
This is the impact, and what does the landscape look like,

80
00:05:50,270 --> 00:05:53,646
what are the different parts of it? So this is what it

81
00:05:53,668 --> 00:05:57,614
looks like, and I know it is quite a lot. It's a

82
00:05:57,652 --> 00:06:01,150
lot of different areas. One could talk about just the area

83
00:06:01,220 --> 00:06:04,598
of this for like hours, days and so forth.

84
00:06:04,714 --> 00:06:07,906
So it definitely is quite a lot to take in. When you first look at

85
00:06:07,928 --> 00:06:11,614
this image, I understand and I totally

86
00:06:11,662 --> 00:06:15,746
sympathize with you as well. But if we take

87
00:06:15,928 --> 00:06:21,126
in this session, we will take a bit of a closer look into a

88
00:06:21,148 --> 00:06:25,080
simplified view of this look and explore a few things

89
00:06:25,450 --> 00:06:28,918
in the project landscape, as well as just explore a

90
00:06:28,924 --> 00:06:32,086
few of the projects more. So the main goal of this

91
00:06:32,108 --> 00:06:35,546
session is also to simplify this view. So if you ever saw this view

92
00:06:35,568 --> 00:06:39,130
and you were like, that's quite a lot, now we will take a simplified view

93
00:06:39,280 --> 00:06:43,226
and focus on a few aspects of this. So let's

94
00:06:43,258 --> 00:06:47,726
get to that then. So there is three stages to

95
00:06:47,828 --> 00:06:51,642
CNCF projects. So there's the sandbox phase, there's the incubating

96
00:06:51,706 --> 00:06:54,370
phase, and then there's the graduated phase.

97
00:06:55,030 --> 00:06:58,802
So projects start from the sandbox phase, where they are

98
00:06:58,936 --> 00:07:02,034
starting off, kicking off, they're relatively small,

99
00:07:02,152 --> 00:07:05,874
and then they move to the incubating phase, where as

100
00:07:05,912 --> 00:07:09,622
they mature, as they get more maintainers, end users, all of these things.

101
00:07:09,756 --> 00:07:12,854
And then when they get to the graduated phase, they are full

102
00:07:12,892 --> 00:07:17,074
fledged mature projects, fully recommended

103
00:07:17,122 --> 00:07:21,082
for production. And the numbers there

104
00:07:21,216 --> 00:07:24,780
indicate roughly, they change quite a lot,

105
00:07:25,150 --> 00:07:28,694
constantly. So roughly on how many projects

106
00:07:28,742 --> 00:07:32,826
are there per category. So there's

107
00:07:32,858 --> 00:07:36,602
around 40 to 50 sandbox projects, about 20 to 30 incubating

108
00:07:36,666 --> 00:07:41,226
projects, and about 14 ish, a bit more graduated

109
00:07:41,338 --> 00:07:44,638
projects. And just to give you an idea how the

110
00:07:44,644 --> 00:07:48,414
landscape has really grown, when I started talking about CNCF topics

111
00:07:48,462 --> 00:07:52,254
a few years ago, there was only essentially one or two graduated

112
00:07:52,302 --> 00:07:56,520
projects, which was essentially just kubernetes and maybe Prometheus, and that's it.

113
00:07:56,890 --> 00:08:00,102
So the projects keep on maturing, they keep on moving

114
00:08:00,156 --> 00:08:03,446
within the limits. So there's constant growth as

115
00:08:03,468 --> 00:08:06,726
far as these things go. So if we

116
00:08:06,748 --> 00:08:10,326
take another view of how does these different projects and the phases, what they

117
00:08:10,348 --> 00:08:14,038
actually mean is the sandbox phase, then it's

118
00:08:14,054 --> 00:08:17,386
the adoption curve, is that innovators and techies are using it. And when

119
00:08:17,408 --> 00:08:21,166
you get to the incubating phase, then the early adopters and the visionaries are

120
00:08:21,188 --> 00:08:25,450
using the project. And then when you get to the graduated

121
00:08:25,530 --> 00:08:30,762
phase, that means that you're really used by early majority

122
00:08:30,826 --> 00:08:34,100
or late majority already. So you're like a full fledged thing.

123
00:08:35,190 --> 00:08:39,220
I think this is a really helpful view to really

124
00:08:40,070 --> 00:08:44,210
understand how does it look like to mature within the CNCF foundation.

125
00:08:45,670 --> 00:08:49,506
So then a bit of expectation management, as well as letting you know which projects

126
00:08:49,538 --> 00:08:52,806
I will be covering in this session. So this

127
00:08:52,908 --> 00:08:56,306
session is not really built on obviously any scientific method.

128
00:08:56,338 --> 00:09:00,650
I don't have a PhD on how to select CNCF projects,

129
00:09:01,470 --> 00:09:04,602
nor is it fortune telling. I do not know what will succeed for sure.

130
00:09:04,656 --> 00:09:07,020
I do not know what will fail for sure either.

131
00:09:08,350 --> 00:09:11,546
But what this is based on is what I'm

132
00:09:11,578 --> 00:09:14,910
excited about, what people around me are excited about,

133
00:09:15,060 --> 00:09:18,350
and which projects have the best communities. Well,

134
00:09:18,420 --> 00:09:22,350
the best is always subjective, but biggest communities, most active communities,

135
00:09:22,690 --> 00:09:25,874
a lot of people talking about them and so forth. Because obviously for

136
00:09:25,912 --> 00:09:29,522
open source projects, these things are

137
00:09:29,576 --> 00:09:32,802
great indications of how successful the projects will be,

138
00:09:32,856 --> 00:09:36,214
because the more people you have using it, building it,

139
00:09:36,332 --> 00:09:40,594
building with it and so forth, is a great indication of passion

140
00:09:40,642 --> 00:09:44,006
towards the project as well. And then as

141
00:09:44,028 --> 00:09:46,120
an expectation management as well.

142
00:09:47,370 --> 00:09:50,874
Usually CNCF intro to projects talks are around 30 to

143
00:09:50,912 --> 00:09:55,142
45 minutes. So this is a shorter talk covering

144
00:09:55,206 --> 00:09:58,998
many projects. So already by the pure math,

145
00:09:59,094 --> 00:10:02,314
I will not be doing a deep dive or even a smallish

146
00:10:02,362 --> 00:10:06,814
dive into any of the projects. It will be more of an overview of

147
00:10:06,852 --> 00:10:10,666
multiple projects. So you can see what the snapshot of CNCF

148
00:10:10,698 --> 00:10:14,446
projects look like, what is probably something maybe that you could

149
00:10:14,468 --> 00:10:18,238
use in your projects. So that's the goal here, not to do a deep dive,

150
00:10:18,334 --> 00:10:22,420
but I will give resources on how to continue with your deep dive further along.

151
00:10:23,510 --> 00:10:26,094
So the projects in this session are helm,

152
00:10:26,142 --> 00:10:29,698
Linkerd, Keda, Flux, kudo and Meshery, and a super quick sneak

153
00:10:29,714 --> 00:10:33,586
peek project at some point as well. But that's helm, Linkerdikeda,

154
00:10:33,618 --> 00:10:36,774
Flux, kudo and meshery that we will be going through today.

155
00:10:36,972 --> 00:10:41,398
As I said, I do update the session regularly,

156
00:10:41,494 --> 00:10:45,210
so it is constantly in flux this session.

157
00:10:46,190 --> 00:10:49,242
But let's get started with the first project which

158
00:10:49,296 --> 00:10:52,602
is oh,

159
00:10:52,656 --> 00:10:55,678
and I should mention that all the projects, some of them are graduated, some of

160
00:10:55,684 --> 00:11:00,734
them are incubating, some of them are sandboxed. So even if you are new

161
00:11:00,772 --> 00:11:04,474
to the CNCF world, you will get to know about very mature projects.

162
00:11:04,522 --> 00:11:07,938
But if you're super deep in the CNCF world,

163
00:11:08,024 --> 00:11:11,298
you will find out a few new sandbox projects as well. So there's a

164
00:11:11,304 --> 00:11:14,340
bit of everything, bit of something for everyone.

165
00:11:15,350 --> 00:11:19,218
So then Helm, which is the package manager for Kubernetes.

166
00:11:19,314 --> 00:11:22,882
So Helm is really the best way to find, share and use software

167
00:11:22,946 --> 00:11:26,242
built for kubernetes. Helm is a graduated

168
00:11:26,306 --> 00:11:29,558
project, so it is very mature. It's one of the earlier ones,

169
00:11:29,724 --> 00:11:33,526
very old in a good way as well. So it's fully

170
00:11:33,558 --> 00:11:36,982
recommended for production as well. So what is Helm?

171
00:11:37,046 --> 00:11:40,342
As mentioned just now, it's package management for Kubernetes. So it's essentially

172
00:11:40,406 --> 00:11:43,718
homebrew snack or chocolate just for kubernetes.

173
00:11:43,894 --> 00:11:47,194
So I think one of the helm maintainers really said it well. So package

174
00:11:47,242 --> 00:11:51,006
management is tooling that enables someone who has a knowledge of an application

175
00:11:51,108 --> 00:11:54,654
and a platform to package up an application. So that

176
00:11:54,692 --> 00:11:58,226
someone else who has neither extensive knowledge of the application

177
00:11:58,328 --> 00:12:01,826
or the way that it needs to run on the platform so that they can

178
00:12:01,848 --> 00:12:05,106
use it as well. So that is really the power of

179
00:12:05,128 --> 00:12:08,550
package management and therefore the power of Helm.

180
00:12:09,610 --> 00:12:13,106
So what are then the benefits of Helm? If that's what package management

181
00:12:13,138 --> 00:12:17,510
is, what are the benefits? Helm helps you manage complexity.

182
00:12:17,850 --> 00:12:20,866
So charts describe even the most complex apps,

183
00:12:20,978 --> 00:12:24,118
provide reputable application installation,

184
00:12:24,214 --> 00:12:27,558
and serve as a single point of authority.

185
00:12:27,734 --> 00:12:30,954
It also has easy updates, so you can take the

186
00:12:30,992 --> 00:12:34,430
pain out of updates with an in place upgrades and custom tools.

187
00:12:35,570 --> 00:12:39,086
Helm also has simple sharing. So charts are easy to version, share and

188
00:12:39,108 --> 00:12:42,414
host on public or private service. And you can

189
00:12:42,452 --> 00:12:46,610
use Helm to roll block to

190
00:12:46,680 --> 00:12:50,274
an older version of a release with ease as well. So it offers really good

191
00:12:50,312 --> 00:12:54,066
rollbacks. So what are the principles then of

192
00:12:54,088 --> 00:12:57,186
Helm or the different features or features,

193
00:12:57,218 --> 00:13:00,358
but principles of Helm. So helm takes security

194
00:13:00,444 --> 00:13:03,606
very seriously. Helm can be already recommended for

195
00:13:03,628 --> 00:13:07,506
public deployment. Helm has multiple maintainers

196
00:13:07,538 --> 00:13:10,978
and multiple companies backing it. So that comes

197
00:13:11,004 --> 00:13:14,614
with, you know, Helm is very mature, it has power, user email list release candidates,

198
00:13:14,662 --> 00:13:18,346
all of these. It supports Mac, Linux and Windows and

199
00:13:18,368 --> 00:13:21,038
it passed 1 million downloads a month already in 2019.

200
00:13:21,044 --> 00:13:23,600
A proper household name.

201
00:13:24,450 --> 00:13:28,430
So how is Helm then used? So it's used by

202
00:13:28,500 --> 00:13:32,454
using charts. And the prerequisites are to have a Kubernetes cluster

203
00:13:32,602 --> 00:13:35,854
deciding what security configurations to apply to your installation,

204
00:13:35,982 --> 00:13:39,550
if any, and installing and configuring

205
00:13:39,630 --> 00:13:43,426
helm. And then the bonus project that I

206
00:13:43,448 --> 00:13:46,998
mentioned which is artifact hub, which is a CNCF sandbox project.

207
00:13:47,164 --> 00:13:50,966
So it helps you find helm charts. So the

208
00:13:50,988 --> 00:13:55,798
cloud native landscape was in a situation where a

209
00:13:55,804 --> 00:13:59,146
lot of the different projects were starting to have their own artificial hubs. So for

210
00:13:59,168 --> 00:14:02,298
example, Helm had Helm hub, but that really makes

211
00:14:02,384 --> 00:14:05,994
the user experience very fragmented and

212
00:14:06,032 --> 00:14:09,706
very difficult to manage or kid of everyone is reinventing the

213
00:14:09,728 --> 00:14:13,306
wheel as well. So then artifact hub was greatest with the goal

214
00:14:13,338 --> 00:14:17,118
to provide a single experience for consumers so that any project

215
00:14:17,284 --> 00:14:20,814
in the CNCF can leverage it.

216
00:14:20,852 --> 00:14:23,838
So that's very nice. Sneak peek.

217
00:14:23,934 --> 00:14:27,220
Super quick mention of a CNCF sandbox project as well.

218
00:14:28,310 --> 00:14:31,762
So helm demo is next up

219
00:14:31,816 --> 00:14:35,478
in our agenda. So the demo that I will be

220
00:14:35,484 --> 00:14:38,726
doing today is easily deploy a complex application, in this

221
00:14:38,748 --> 00:14:42,630
case WordPress, to Kubernetes being a helm chart.

222
00:14:43,770 --> 00:14:47,746
So then let's switch over to

223
00:14:47,868 --> 00:14:52,134
the side here, let's choose this terminal

224
00:14:52,262 --> 00:14:56,358
and then let's grab here my notes. Because I need notes.

225
00:14:56,454 --> 00:14:59,530
I make way too many typos if I don't use notes.

226
00:15:00,450 --> 00:15:03,790
But that's wonderful and lovely anyhow.

227
00:15:04,290 --> 00:15:08,320
So then if we do and we start with easy account show to

228
00:15:09,250 --> 00:15:12,686
get you understanding what's happening. So then we see that yes, I am

229
00:15:12,708 --> 00:15:16,530
locked into Azure and everything is working fine

230
00:15:16,600 --> 00:15:20,450
and well. So then if we do Kubectl

231
00:15:21,830 --> 00:15:25,778
get services there, we can actually see a

232
00:15:25,784 --> 00:15:29,734
bit more info about our cluster. So this shows

233
00:15:29,772 --> 00:15:33,110
us that yes, we have an empty Kubernetes cluster running there.

234
00:15:33,260 --> 00:15:37,126
So it's empty. So that's the for this demo. You can see that I

235
00:15:37,148 --> 00:15:39,610
am indeed doing everything from scratch.

236
00:15:40,430 --> 00:15:45,674
So then we can do Kubectl get

237
00:15:45,712 --> 00:15:49,446
services all namespaces to explore a bit further.

238
00:15:49,638 --> 00:15:53,694
And in here we actually now see that the cluster in fact is

239
00:15:53,732 --> 00:15:57,054
not completely empty, but for the purposes of this demo it is.

240
00:15:57,092 --> 00:16:00,766
So there's a lot of linkerd stuff running around there, which is

241
00:16:00,868 --> 00:16:03,954
useful for our demo that is coming up,

242
00:16:03,992 --> 00:16:07,842
which is the Linkerd demo. But for now we're focusing on

243
00:16:07,896 --> 00:16:11,406
helm and that's why it is empty

244
00:16:11,438 --> 00:16:13,940
for this purpose. So if we do helm list,

245
00:16:14,890 --> 00:16:18,450
we can see that no helm releases

246
00:16:18,530 --> 00:16:22,082
in use either. So it is truly in fact empty.

247
00:16:22,226 --> 00:16:26,514
So then if we do helm

248
00:16:26,562 --> 00:16:28,070
repo add Vietnam,

249
00:16:30,010 --> 00:16:33,946
we're adding the Vietnam there. So for me it says already exists with

250
00:16:33,968 --> 00:16:37,594
the same configuration, skipping it, but that's simply because I've done this

251
00:16:37,632 --> 00:16:41,440
before. So that's what's supposed to happen for you it would do more things.

252
00:16:41,810 --> 00:16:45,374
So then we go here and we get helm search

253
00:16:45,572 --> 00:16:49,374
repo WordPress as

254
00:16:49,492 --> 00:16:53,220
so and there we get to

255
00:16:57,560 --> 00:17:01,300
some more info. Eventually when it starts

256
00:17:02,600 --> 00:17:06,628
moving forward, everything is always low with the demo effect.

257
00:17:06,714 --> 00:17:10,490
Anytime that you try to do anything

258
00:17:11,500 --> 00:17:15,432
like time sensitive crucial. So there we go.

259
00:17:15,486 --> 00:17:19,368
I took a bit of time hoping that the demo effect will continue to

260
00:17:19,454 --> 00:17:23,176
work, but maybe a bit faster, but let's hope so. So here

261
00:17:23,198 --> 00:17:27,064
we see that we have two helm versions that we could be two WordPress versions

262
00:17:27,112 --> 00:17:30,524
that we could be using, but we will be using the Bitnami one because that

263
00:17:30,562 --> 00:17:33,904
is newer. So then we can

264
00:17:33,942 --> 00:17:37,808
do helm install

265
00:17:37,894 --> 00:17:40,496
Bitnami WordPress generate name.

266
00:17:40,678 --> 00:17:44,016
So this is when the magic starts to

267
00:17:44,038 --> 00:17:48,284
happen. And this portion

268
00:17:48,332 --> 00:17:51,504
will take a bit longer than the previous version.

269
00:17:51,552 --> 00:17:54,932
So since the previous version took a bit longer, it might take a while,

270
00:17:54,986 --> 00:17:58,730
but that's fine, we are ready, we have things to do while we wait.

271
00:17:59,420 --> 00:18:01,930
But here we see now a lot of things happened.

272
00:18:02,780 --> 00:18:07,080
So we actually are starting to spring up our WordPress.

273
00:18:08,300 --> 00:18:12,460
So now we can actually use the same command that we used

274
00:18:12,610 --> 00:18:16,280
previously, which is the kubectl

275
00:18:16,360 --> 00:18:19,724
get services to see if our cluster would not be

276
00:18:19,762 --> 00:18:22,944
empty this time. And as you can see, here we go, it is not

277
00:18:22,982 --> 00:18:27,376
empty. There's a lot of things happening there. So we can then take

278
00:18:27,558 --> 00:18:33,680
the external ip because we want to access our

279
00:18:33,750 --> 00:18:38,900
things as well. So we will go here, we will open a browser

280
00:18:41,400 --> 00:18:42,630
there we go.

281
00:18:44,280 --> 00:18:47,540
And then we will get the browser over here,

282
00:18:47,610 --> 00:18:51,012
we will open it up there. It will probably take a while

283
00:18:51,066 --> 00:18:54,600
for it to still just sprung up because it takes a bit of time,

284
00:18:54,750 --> 00:18:58,216
but we have stuff to do still while we wait. But we are kind

285
00:18:58,238 --> 00:19:01,976
of put it there to load while we do those things.

286
00:19:02,158 --> 00:19:06,296
So now we can see that the Kubernetes cluster is no longer empty

287
00:19:06,488 --> 00:19:10,236
and we already have the external ip for our WordPress to use.

288
00:19:10,338 --> 00:19:14,104
And now we will get a nice WordPress where we can start our block block

289
00:19:14,152 --> 00:19:17,520
or whatever, whatever we want to do with the WordPress. But to

290
00:19:17,590 --> 00:19:21,772
get inside the WordPress to the admin page, we obviously need a username and password

291
00:19:21,836 --> 00:19:26,004
as well. So this is a very neat, easy way to

292
00:19:26,042 --> 00:19:31,284
handle this as well. So we see the username there already and

293
00:19:31,322 --> 00:19:34,932
then if we want the password we just take this

294
00:19:34,986 --> 00:19:38,164
whole thing and then we put it there,

295
00:19:38,362 --> 00:19:41,736
put it in and then we see, there we go, that's where the

296
00:19:41,758 --> 00:19:45,428
password is. Let's already copy paste it to safety

297
00:19:45,604 --> 00:19:48,904
so that when we get this up and running here

298
00:19:48,942 --> 00:19:53,352
that's still loading, then we can get to using

299
00:19:53,406 --> 00:19:57,404
that one. So let's see when it opens we will be

300
00:19:57,442 --> 00:20:00,860
ready. Might take a while. Oh, now it's already working. Every time I say that

301
00:20:00,930 --> 00:20:03,760
it's going to work soon, that it magically works,

302
00:20:03,830 --> 00:20:07,344
it's wonderful. So then we

303
00:20:07,382 --> 00:20:10,610
go to the admin side of things.

304
00:20:11,540 --> 00:20:14,828
We put user, we put

305
00:20:14,934 --> 00:20:18,470
the password that we just got, we log in

306
00:20:19,080 --> 00:20:22,692
and then we see that. There we go, we have our

307
00:20:22,746 --> 00:20:26,660
WordPress ready to

308
00:20:26,810 --> 00:20:30,280
use, ready to be used. All nice and good looking

309
00:20:30,350 --> 00:20:33,672
there. So that's really great

310
00:20:33,726 --> 00:20:37,930
and nice. So I think all in all here,

311
00:20:38,620 --> 00:20:41,576
we've done quite a lot of things in a small amount of time. So we've

312
00:20:41,608 --> 00:20:45,704
installed WordPress and Mariadp to our Kubernetes cluster, configured WordPress

313
00:20:45,752 --> 00:20:50,088
and stored the admin credentials securely as kubernetes secrets.

314
00:20:50,264 --> 00:20:53,952
Super easy, super quick. And that's truly why I love

315
00:20:54,006 --> 00:20:56,770
helm. Great.

316
00:20:57,140 --> 00:21:00,976
Done with the first demo. Moving on to the

317
00:21:01,158 --> 00:21:04,816
next set of things. I sometimes go

318
00:21:04,838 --> 00:21:08,044
through a bit of case studies about using helm,

319
00:21:08,092 --> 00:21:11,236
but I think we don't have time to doubt that today. But you can

320
00:21:11,258 --> 00:21:15,364
read more about CNCF's case studies in the

321
00:21:15,562 --> 00:21:19,096
CNCF website. There's a lot of good data and a lot of good information

322
00:21:19,198 --> 00:21:23,512
there about how these projects are used by

323
00:21:23,566 --> 00:21:27,450
companies in production and so forth. But now

324
00:21:28,540 --> 00:21:31,608
we will be moving to the next project, which is Linkerd,

325
00:21:31,784 --> 00:21:36,604
which is a service mess. Linkerd is a very

326
00:21:36,642 --> 00:21:39,996
recently graduated project. It used to be incubating for a

327
00:21:40,018 --> 00:21:43,504
while, obviously, but now, just a month or so

328
00:21:43,542 --> 00:21:47,520
ago, Linkerd graduated to the graduated phase.

329
00:21:48,100 --> 00:21:51,360
So Linkerd is, as mentioned before, a service mess.

330
00:21:51,430 --> 00:21:54,768
It's ultralight, ultra fast and a security first service mess

331
00:21:54,854 --> 00:21:58,324
for kubernetes. It's similar to istio as far as things

332
00:21:58,362 --> 00:22:02,100
go, but it's a bit more streamlined and maybe a bit faster and lighter.

333
00:22:03,240 --> 00:22:06,576
And the goal of Linkerd is to reduce

334
00:22:06,608 --> 00:22:10,552
mental overhead of having a service mesh to begin with. So what

335
00:22:10,606 --> 00:22:15,044
does Linkerd then do? It provides observability,

336
00:22:15,172 --> 00:22:18,516
so it's those service level important metrics, success rates,

337
00:22:18,548 --> 00:22:22,152
latencies, all of these. It provides reliability,

338
00:22:22,216 --> 00:22:25,276
so retries, timeouts and so forth, and it

339
00:22:25,298 --> 00:22:29,244
provides security as well. So what are

340
00:22:29,282 --> 00:22:32,424
the benefits of using liquid then? It has a really thriving

341
00:22:32,472 --> 00:22:36,068
open source community. It's 100% Apache licensed

342
00:22:36,104 --> 00:22:38,370
with a really cast AI active community.

343
00:22:40,660 --> 00:22:44,544
It has a simple and minimalist design, so no complex APIs or

344
00:22:44,582 --> 00:22:47,924
configuration needed for most applications. Linkerd will

345
00:22:47,962 --> 00:22:51,792
just kind of work out of the box, and it has a deep runtime

346
00:22:51,856 --> 00:22:55,456
diagnostics, so you can get a comprehensive suite of diagnostic

347
00:22:55,488 --> 00:22:58,872
tools including automatic service dependency maps and live

348
00:22:58,926 --> 00:23:02,312
traffic samples. And as mentioned before, it's very

349
00:23:02,366 --> 00:23:04,250
fast and very light,

350
00:23:05,660 --> 00:23:09,128
and it installs in

351
00:23:09,214 --> 00:23:12,848
seconds with zero configuration as well. So it installs

352
00:23:12,884 --> 00:23:16,316
into a single namespace and services can be added to

353
00:23:16,338 --> 00:23:20,412
the mesh one at a time. And it has actionable service metrics as well.

354
00:23:20,466 --> 00:23:24,464
So just mentioned before, success rates, request volume and latency for

355
00:23:24,502 --> 00:23:26,050
every service as well.

356
00:23:28,020 --> 00:23:30,928
So what are then the Linkerd principles? How is it built?

357
00:23:31,014 --> 00:23:34,384
So it's built to just work, as I mentioned,

358
00:23:34,422 --> 00:23:38,164
just works out of the box. Ultralight, it's the lightest service mess

359
00:23:38,202 --> 00:23:41,780
around. It's actually the oldest mess, the first service mess around as well. It's super

360
00:23:41,850 --> 00:23:45,636
simple to reduce operational complexity and it's security

361
00:23:45,738 --> 00:23:49,368
first. And security is not a default, security is

362
00:23:49,374 --> 00:23:52,916
not an extra, it's a default. So Linkerd

363
00:23:52,948 --> 00:23:56,552
has its own proxy as well. Envoy is

364
00:23:56,606 --> 00:24:00,232
a CNCF proxy project, but this

365
00:24:00,366 --> 00:24:03,816
Linkerd uses its own proxy called Linkerd two proxy

366
00:24:03,848 --> 00:24:07,950
that's specifically built for Linkerd so that the founder is more secure and custom.

367
00:24:09,920 --> 00:24:13,324
Then we have the second demo of the day, which will be the final

368
00:24:13,362 --> 00:24:16,876
demo of the day as well, but continuing with after that with the slide decks

369
00:24:16,908 --> 00:24:20,544
and everything. So with the Linkerd demo, it's a bit

370
00:24:20,662 --> 00:24:23,968
different than the helm demo app that I showed before. It's a

371
00:24:23,974 --> 00:24:27,596
proper enterprise grade app. So it's

372
00:24:27,628 --> 00:24:31,190
Linkerd demo app and I've added Linkerd to it and then we can see

373
00:24:32,200 --> 00:24:34,550
what we can get from the app from there.

374
00:24:35,960 --> 00:24:39,544
And quickly before the demo, we can actually go through what is needed

375
00:24:39,582 --> 00:24:43,460
to use Linkerd just injecting this and that's it. So it's

376
00:24:43,540 --> 00:24:46,712
super simple. So then

377
00:24:46,766 --> 00:24:50,440
the Linkerd demo which is easy real time service metrics.

378
00:24:51,280 --> 00:24:54,364
Then let's switch over to

379
00:24:54,562 --> 00:24:58,430
these demo nodes and let's go to here.

380
00:24:59,680 --> 00:25:03,740
So we have another terminal that are color coordinated.

381
00:25:04,080 --> 00:25:09,896
So then we take this command which is cubectl

382
00:25:09,928 --> 00:25:13,696
emoji with the port forward so that we can actually get our demo app

383
00:25:13,798 --> 00:25:18,644
working. So we'll grab here,

384
00:25:18,762 --> 00:25:22,612
move on to here where our amazing WordPress is

385
00:25:22,746 --> 00:25:25,350
still running very well.

386
00:25:26,040 --> 00:25:29,896
It's handling a connection and then we see that, yes there we

387
00:25:29,918 --> 00:25:34,440
have, which is this app. Let's make it a bit bigger

388
00:25:35,580 --> 00:25:38,280
so that we can see a bit better maybe.

389
00:25:38,430 --> 00:25:42,012
So it's emoji vote. It's a very simple as far as the

390
00:25:42,146 --> 00:25:45,196
functionality goes. So you have all of

391
00:25:45,218 --> 00:25:48,604
these emojis. We have to decide on which emoji to vote for.

392
00:25:48,642 --> 00:25:51,816
We vote for the embarrassed or smiley

393
00:25:51,848 --> 00:25:55,152
or so forth and we can pick another one.

394
00:25:55,286 --> 00:25:58,924
We can vote for the masked one which is our favorite.

395
00:25:59,052 --> 00:26:03,004
We can vote for the monkey

396
00:26:03,052 --> 00:26:06,960
one, so forth. It has also built

397
00:26:07,030 --> 00:26:10,116
in poro one

398
00:26:10,298 --> 00:26:14,768
so that you can see this. But then actually if we click view the leaderboard

399
00:26:14,944 --> 00:26:17,824
we can see that there's quite a lot more votes cast.

400
00:26:17,952 --> 00:26:21,520
AI our simple votes there quite a

401
00:26:21,530 --> 00:26:25,016
lot of voting happening. So that's the bots voting on the background. So for this

402
00:26:25,038 --> 00:26:28,472
app we're going to see what are they doing and what's happening

403
00:26:28,606 --> 00:26:32,044
on that side. So then let's go to this for

404
00:26:32,082 --> 00:26:34,750
example and then let's there.

405
00:26:35,920 --> 00:26:39,884
So to see what the bots are doing and

406
00:26:40,082 --> 00:26:43,596
what's happening in the background we can see, we can put

407
00:26:43,778 --> 00:26:47,056
Linkerdmog at the top deploy and

408
00:26:47,078 --> 00:26:49,570
now we see a lot of action happening,

409
00:26:50,500 --> 00:26:54,016
a lot of get data that we are getting and

410
00:26:54,038 --> 00:26:58,372
then we can actually go to

411
00:26:58,426 --> 00:27:01,876
another terminal to get things up

412
00:27:01,898 --> 00:27:05,536
and running here with tap deploy

413
00:27:05,648 --> 00:27:09,416
on the other side and there we can see what's happening inside a

414
00:27:09,438 --> 00:27:12,968
single bot. So it's a bit

415
00:27:12,974 --> 00:27:16,184
of more detailed view. So then we see

416
00:27:16,222 --> 00:27:20,252
all of these things and then we go to here

417
00:27:20,306 --> 00:27:23,630
and we put Linkerd dashboard in.

418
00:27:24,960 --> 00:27:31,064
We will get even more info

419
00:27:31,112 --> 00:27:35,260
here. So then we have that opening up in our default browser.

420
00:27:35,600 --> 00:27:40,944
Let's just click make

421
00:27:41,062 --> 00:27:45,212
this a bit bigger so that we are not disturbed

422
00:27:45,276 --> 00:27:47,830
by all the background things happening.

423
00:27:48,600 --> 00:27:52,304
So in here we see then a graphical way to explore

424
00:27:52,352 --> 00:27:55,684
this data. So then we want to see for example the same data that

425
00:27:55,722 --> 00:27:59,748
I viewed showed before we go to here we click on

426
00:27:59,834 --> 00:28:04,344
the emoji voto and we click on start and

427
00:28:04,382 --> 00:28:07,288
there we see the same data, but maybe to me at least in a bit

428
00:28:07,294 --> 00:28:10,010
of a nice format to read through.

429
00:28:11,580 --> 00:28:14,920
And then if we go to namespaces and we click

430
00:28:14,990 --> 00:28:18,156
on Mojivoto for example, we can

431
00:28:18,178 --> 00:28:21,340
see the structure that we had before.

432
00:28:21,490 --> 00:28:24,944
You see deployments, pods, replica sets, all of these

433
00:28:24,982 --> 00:28:29,490
things. And then if we go to block here

434
00:28:30,260 --> 00:28:34,560
we see even more visual

435
00:28:35,060 --> 00:28:40,048
things brought to you by Prometheus. Actually it's

436
00:28:40,064 --> 00:28:42,820
going to take a while for it to load, but we will get there,

437
00:28:42,890 --> 00:28:45,584
no worries. Loading,

438
00:28:45,632 --> 00:28:49,316
loading. So now we're starting to see that we see global success rate,

439
00:28:49,418 --> 00:28:52,388
global greatest volume deployments success,

440
00:28:52,474 --> 00:28:56,088
greatest workage volume, and all of

441
00:28:56,094 --> 00:29:00,200
these nice things in a really visual nice format.

442
00:29:01,020 --> 00:29:04,348
So that's how easy a nice linkerd is and works.

443
00:29:04,514 --> 00:29:07,950
So then we can get back to the slideset once again.

444
00:29:09,520 --> 00:29:12,908
There we go. That was

445
00:29:12,914 --> 00:29:15,932
the Linkerd demo. So then we're going to move on to Keda,

446
00:29:16,076 --> 00:29:19,804
which is Kubernetes event driven auto scaling. So Keda is incubating

447
00:29:19,852 --> 00:29:23,856
projects very recently incubating projects. Actually one or

448
00:29:23,878 --> 00:29:28,160
two months ago it went from sandbox to incubating.

449
00:29:29,380 --> 00:29:32,644
So what is Keda then? So Keda really focuses on

450
00:29:32,682 --> 00:29:35,844
serverless. So focus on your code, event driven code and

451
00:29:35,882 --> 00:29:39,812
scaling on demand, compute, pay per use and these things. So how keta

452
00:29:39,876 --> 00:29:43,928
maintainers view serverless is the automation glue between services,

453
00:29:44,014 --> 00:29:47,080
rapid APIs, eventstream and queue processing.

454
00:29:47,820 --> 00:29:50,964
So really default. Kubernetes scaling is not really well suited

455
00:29:51,012 --> 00:29:54,076
for event driven applications and Kubernetes is more

456
00:29:54,098 --> 00:29:56,780
for resource based scaling. So cpu and memory.

457
00:29:57,600 --> 00:30:01,736
So then keta provides event driven scale controlling

458
00:30:01,768 --> 00:30:04,992
that can run inside any cluster so that it can monitor the rate

459
00:30:05,046 --> 00:30:08,604
of the events to preemptively act before a cpu

460
00:30:08,652 --> 00:30:12,252
is even affected. So that's where the benefit

461
00:30:12,316 --> 00:30:15,628
and the power lies with Cata. So you can install it

462
00:30:15,654 --> 00:30:19,344
into a new or existing cluster and it has extensible

463
00:30:19,392 --> 00:30:23,270
and pluggable scalars to grab metrics from multiple sources as well.

464
00:30:24,200 --> 00:30:27,604
So what are the cater principles then? It's not

465
00:30:27,722 --> 00:30:31,096
rebuild anything that Kubernetes offers out of the box. It is

466
00:30:31,118 --> 00:30:35,210
single purpose, simple, non intrusive and it works with any

467
00:30:35,660 --> 00:30:38,952
container and any workload. And then there are two public

468
00:30:39,006 --> 00:30:42,748
case studies for Keda, which is Alibaba cloud and

469
00:30:42,754 --> 00:30:46,124
cast AI. So cast AI, the company that I work for is a cloud end

470
00:30:46,162 --> 00:30:48,750
user of Keda as well.

471
00:30:50,480 --> 00:30:54,272
Then moving on to another project. There's so many to cover

472
00:30:54,326 --> 00:30:57,616
through which is flux which is the

473
00:30:57,638 --> 00:31:01,724
Githubs family of projects is the tagline here. So flux is an incubating

474
00:31:01,772 --> 00:31:04,972
project as well as

475
00:31:05,046 --> 00:31:08,916
is Keda as well. So let's go. So what

476
00:31:08,938 --> 00:31:11,904
is flux really briefly?

477
00:31:11,952 --> 00:31:15,796
So the flux is incubating projects, but it's actually relatively mature for an

478
00:31:15,818 --> 00:31:19,668
incubating project. It's already recommended by the CNCF technology

479
00:31:19,754 --> 00:31:23,700
radar as the technology of choice to be used for Githubs.

480
00:31:24,460 --> 00:31:27,928
So the flux has a lot of end projects, the project has

481
00:31:27,934 --> 00:31:31,196
a lot of end users. So what is Gitops in this context? So you have

482
00:31:31,218 --> 00:31:34,904
all of these CLI tools, so Kubectl

483
00:31:34,952 --> 00:31:38,780
apply, Kubectl Cl set image, helm upgrade, Kubectl upgrade, so forth,

484
00:31:39,520 --> 00:31:43,184
so that it replaces all of those with the most

485
00:31:43,302 --> 00:31:47,244
widely known CLI tool, git. So with the git

486
00:31:47,292 --> 00:31:49,970
push tool.

487
00:31:50,740 --> 00:31:54,016
So really it really goes into instead of changing the

488
00:31:54,038 --> 00:31:57,276
state of your cluster with multiple things, you can use one command,

489
00:31:57,388 --> 00:32:00,848
so you can modify something, push it to a

490
00:32:00,854 --> 00:32:03,940
git representative, and therefore it ends up in the cluster as well.

491
00:32:04,010 --> 00:32:07,220
So this can be anything from namespace and so forth.

492
00:32:08,280 --> 00:32:11,928
Git also gives you a nice history of what has happened to your cluster in

493
00:32:11,934 --> 00:32:16,328
the past as well. So Gitops provides a really nice

494
00:32:16,414 --> 00:32:19,976
one model for making infrastructure apps and Kubernetes add on changes.

495
00:32:20,078 --> 00:32:24,220
So you have consistent end to end workflow across your entire organization.

496
00:32:24,800 --> 00:32:27,868
So really what this means in a nutshell is that you have

497
00:32:27,874 --> 00:32:30,876
an easy snapshot of your cluster that you can restore to.

498
00:32:30,978 --> 00:32:34,608
So if anything happens, so if you lose your cluster, you just

499
00:32:34,774 --> 00:32:38,464
block your new cluster to flux and you

500
00:32:38,502 --> 00:32:41,724
restore everything. So everything, meaning that it doesn't

501
00:32:41,772 --> 00:32:44,508
obviously include no stateful sets or databases.

502
00:32:44,684 --> 00:32:48,172
So everything that was in the Kubernetes memory essentially. So to simplify

503
00:32:48,236 --> 00:32:52,308
things, it's a desired state that stay saved in git and

504
00:32:52,394 --> 00:32:55,748
it's not the actual thing, but the desired state. So it's kind of like a

505
00:32:55,754 --> 00:32:57,990
save point that you can restore back to.

506
00:32:58,920 --> 00:33:02,520
So why is flux so great for ops then?

507
00:33:02,670 --> 00:33:06,116
Flux project aims to really provide a complete continuous delivery

508
00:33:06,148 --> 00:33:10,020
platform on top of kubernetes, supporting all the common practices and tooling in

509
00:33:10,030 --> 00:33:14,190
the field. For example, customize helm and metrics with Prometheus and so on.

510
00:33:15,040 --> 00:33:18,952
So that's flux in a nutshell.

511
00:33:19,096 --> 00:33:22,270
So what are the flux practices and benefits then?

512
00:33:22,660 --> 00:33:26,256
So flux has defined Gitop practices as describe your

513
00:33:26,278 --> 00:33:30,450
system declaratively, keep configuration under source control,

514
00:33:31,140 --> 00:33:34,508
use software agents to reconcile and ensure correctness and alerts

515
00:33:34,524 --> 00:33:38,384
for drift as well. And really the benefits are collaboration

516
00:33:38,432 --> 00:33:41,828
on infra access control, auditable history,

517
00:33:41,914 --> 00:33:45,156
drift correction and clear boundaries between dev team and

518
00:33:45,178 --> 00:33:49,432
kubernetes as well. So then

519
00:33:49,566 --> 00:33:53,492
moving on to CuDA, which is the Kubernetes Universal declarative

520
00:33:53,636 --> 00:33:57,530
operator. So this is a CUDa is a sandbox project,

521
00:33:58,380 --> 00:34:02,124
so it's not as mature as previous projects but still very

522
00:34:02,162 --> 00:34:06,060
cool and nice. So CuDA really goes into the issue

523
00:34:06,130 --> 00:34:09,884
of stateless versus stateful apps. So if

524
00:34:09,922 --> 00:34:13,476
all apps were stateless, everything would be super simple. But not all apps

525
00:34:13,528 --> 00:34:17,120
are so stateful apps need logic specific

526
00:34:17,190 --> 00:34:20,764
knowledge to run a certain application. So Kafka might differ from Cassandra

527
00:34:20,812 --> 00:34:23,936
and so forth. And Kubernetes has been very

528
00:34:23,958 --> 00:34:27,108
focused on stateless and stateful apps do not really like it.

529
00:34:27,194 --> 00:34:30,868
So Kubernetes has created stateful sets to mitigate this problem,

530
00:34:30,954 --> 00:34:34,916
but it does not really solve the fundamental issue with the

531
00:34:34,938 --> 00:34:38,372
solution. Which is and the solution here is operators.

532
00:34:38,436 --> 00:34:42,116
So what are operators then? Operator manages

533
00:34:42,148 --> 00:34:45,850
and monitors the lifecycle. It takes a lot of custom knowledge to build one.

534
00:34:47,340 --> 00:34:51,272
So each operator is unique and purpose built for each

535
00:34:51,326 --> 00:34:55,096
application. So often operator framework or cube builder

536
00:34:55,128 --> 00:34:58,812
is used to build an operator, but building operators really

537
00:34:58,866 --> 00:35:02,220
requires deep expertise and may require thousands of lines of code.

538
00:35:02,290 --> 00:35:05,310
So substantial engineering research is needed.

539
00:35:06,000 --> 00:35:09,304
So this is where kudo comes in. So rather than using a custom operator,

540
00:35:09,352 --> 00:35:13,890
Kudo provides a universal operator with the concept of plans built in.

541
00:35:15,140 --> 00:35:19,196
So what are the benefits of Cuda then? So Kuda can create operators without needing

542
00:35:19,228 --> 00:35:23,300
deep knowledge of kubernetes or coding. Just by defining the lifecycle stages

543
00:35:23,640 --> 00:35:27,188
you can just use Kubernetes API so it's a lot easier to learn. And it

544
00:35:27,194 --> 00:35:31,044
has kubernetes laid native management aka using Kubectl

545
00:35:31,092 --> 00:35:35,224
and other familiar tools as well. So it's simple to use as well

546
00:35:35,422 --> 00:35:39,288
a real cool sandbox project. Then kicking off

547
00:35:39,454 --> 00:35:43,420
with the last project

548
00:35:43,490 --> 00:35:47,068
for today which is meshery, the service

549
00:35:47,154 --> 00:35:50,830
mesh management plane. It's sandbox project super new.

550
00:35:51,280 --> 00:35:54,816
It got accepted to CNCF as a project, let's say

551
00:35:54,838 --> 00:35:58,530
a month ago, a few weeks ago. It's a super new project,

552
00:36:00,020 --> 00:36:04,560
but it's actually very popular already. It's the most popular

553
00:36:05,140 --> 00:36:08,660
project for mentorships in

554
00:36:08,730 --> 00:36:12,836
the Linux foundation already and

555
00:36:12,858 --> 00:36:16,660
it has already 15 maintainers and 300 plus contributors. So very

556
00:36:16,810 --> 00:36:20,840
fast growing. So service mesh

557
00:36:21,260 --> 00:36:24,920
management plane is the name of the game here. So mesh is that service

558
00:36:24,990 --> 00:36:28,776
mesh management plane. So if

559
00:36:28,798 --> 00:36:32,168
you end up in a situation where you have to use multiple or you

560
00:36:32,174 --> 00:36:35,324
need to use multiple service meshes, reasons might be

561
00:36:35,362 --> 00:36:37,790
legacy personal preference of team members.

562
00:36:38,720 --> 00:36:41,356
So you end up in a situation where you have more than one type of

563
00:36:41,378 --> 00:36:44,060
service mesh running inside one cluster.

564
00:36:44,640 --> 00:36:48,256
So for example if Lingerd and SDR are in the same cluster, things might

565
00:36:48,278 --> 00:36:51,536
get a bit difficult. So this

566
00:36:51,558 --> 00:36:54,640
is where meshery comes in. So it provides service

567
00:36:54,710 --> 00:36:58,112
mes performance by being the management plane. So usually

568
00:36:58,166 --> 00:37:01,684
service mes compromises of control plane and data plane. And this

569
00:37:01,722 --> 00:37:05,076
adds kind of like the third plane which is a management plane that manages all

570
00:37:05,098 --> 00:37:08,656
the different service meshes. So it provides

571
00:37:08,688 --> 00:37:12,676
federation integrates with backend systems, may help perform chaos engineering deeper

572
00:37:12,708 --> 00:37:15,768
insight into the performance. Really a long list of things that

573
00:37:15,774 --> 00:37:19,144
it can do. So it is quite

574
00:37:19,182 --> 00:37:22,584
wonderful. So meshery supports

575
00:37:22,632 --> 00:37:26,696
over ten different service meshes. It provides

576
00:37:26,728 --> 00:37:30,616
multimesh management so lifecycle workload, performance configuration

577
00:37:30,648 --> 00:37:33,884
patterns and practices, chaos and filters as well.

578
00:37:34,002 --> 00:37:37,184
So mesher is about halfway to complete architecture. So it's not

579
00:37:37,222 --> 00:37:41,212
at full version one yet, but getting there and I mentioned very popular

580
00:37:41,276 --> 00:37:44,400
for being such an early stage project and CNCF

581
00:37:45,700 --> 00:37:48,624
so starting to wrap things up.

582
00:37:48,662 --> 00:37:51,524
I still have some of the relearn more resources coming up and all of these

583
00:37:51,562 --> 00:37:54,912
things but wrapping up. So we went through CNCF overview,

584
00:37:54,976 --> 00:37:58,336
we went through multiple projects, so we went through helm, Linkerd, Cuda,

585
00:37:58,368 --> 00:38:02,520
Flux, Keda, Meshri plus the bonus project of Artifact hub

586
00:38:03,580 --> 00:38:06,760
and then a few resources

587
00:38:07,420 --> 00:38:10,884
you have. I recommended checking out the CNCF

588
00:38:10,932 --> 00:38:14,628
survey. You can check out all the project sites from helm, liquor,

589
00:38:14,644 --> 00:38:18,364
Dikudo, Keda measuring all of them. You can check out the case

590
00:38:18,402 --> 00:38:21,996
studies area of CNCF to learn more how these projects are

591
00:38:22,018 --> 00:38:23,810
being implemented in real life.

592
00:38:25,460 --> 00:38:28,768
The CNCF end user technology radar is really cool.

593
00:38:28,854 --> 00:38:32,636
Recommend checking that out and the Kubernetes

594
00:38:32,828 --> 00:38:37,364
or the CNCF technical oversight committee does their

595
00:38:37,402 --> 00:38:41,312
predictions for the future of cloud native tech at every Kubecon

596
00:38:41,376 --> 00:38:45,616
essentially. So that's super nice. Very enjoyable session. Highly recommend checking

597
00:38:45,648 --> 00:38:49,280
it out. Tech world with Nana has a lot of good content

598
00:38:49,370 --> 00:38:53,880
for if you are starting your cloud native journey on

599
00:38:53,950 --> 00:38:57,256
how to for example use these tools step by step.

600
00:38:57,438 --> 00:39:00,996
CNCF YouTube has a lot of great content. For example, all the maintainers

601
00:39:01,028 --> 00:39:04,356
usually have a session there on more of a deep

602
00:39:04,388 --> 00:39:08,348
dive compared to my session on all the projects. So you can learn more there.

603
00:39:08,434 --> 00:39:11,836
So I'll be adding this slide deck to my GitHub as well.

604
00:39:11,858 --> 00:39:16,060
So you can find that at Annie Talvasto.

605
00:39:17,680 --> 00:39:21,344
And then if you're interested in finding more about cast AI, which is the company

606
00:39:21,382 --> 00:39:24,960
that I work for, where we do Kubernetes cost optimization

607
00:39:26,580 --> 00:39:30,240
where we're really good at that you can go to Castai

608
00:39:30,600 --> 00:39:33,956
Annie and if you want to leave your email there and we will email you

609
00:39:33,978 --> 00:39:37,700
some things, we will also give you a $25

610
00:39:37,850 --> 00:39:41,496
gift card to the CNCF store so you can use that to get your

611
00:39:41,598 --> 00:39:44,664
Kubernetes plushies, Kubernetes t shirts, all of these

612
00:39:44,702 --> 00:39:47,864
fun. So that's if

613
00:39:47,902 --> 00:39:51,508
you want that, you can do that. And then

614
00:39:51,694 --> 00:39:55,672
a few recommendations still. So I did my one podcast episode

615
00:39:55,736 --> 00:39:59,132
on adventures in open source with Tom Kirkhobb. So Tom

616
00:39:59,186 --> 00:40:03,068
is the maintainer of Keda. So he really went in a

617
00:40:03,074 --> 00:40:06,656
very candid manner, talked about how does it feel to and how does

618
00:40:06,678 --> 00:40:10,864
it work to maintain an open source project for CNCF, how does it work,

619
00:40:11,062 --> 00:40:14,816
how does he split his time as

620
00:40:14,838 --> 00:40:18,436
a personal life to work, to maintaining projects and all of

621
00:40:18,458 --> 00:40:22,596
these things. Really wonderful insight into the

622
00:40:22,618 --> 00:40:26,404
mind of a maintainer. And then if you're interested in

623
00:40:26,442 --> 00:40:29,460
starting to contribute to CNCF projects, you can check out,

624
00:40:29,530 --> 00:40:33,032
there's a lot of good resources on that. And for example, a keynote getting

625
00:40:33,086 --> 00:40:36,360
started in the Kubernetes community from a few years back in

626
00:40:36,430 --> 00:40:40,212
Kubecon is really great on how to get started. If you want to contribute,

627
00:40:40,276 --> 00:40:44,536
if you want to start doing meetups and all of these things, I recommend checking

628
00:40:44,568 --> 00:40:48,332
these things out as well. So the one thing I hope that everyone

629
00:40:48,386 --> 00:40:51,916
has mentioned in the beginning is that everyone takes away from this is inspiration and

630
00:40:51,938 --> 00:40:55,388
inspiration and so forth. So I hope everyone has had a

631
00:40:55,394 --> 00:40:59,472
lovely time and learned something new. And if you have any questions later,

632
00:40:59,526 --> 00:41:02,608
I'm super happy to always answer them in Twitter. For example,

633
00:41:02,694 --> 00:41:06,256
so you can find me there at Annie Talvasto. So you can reach out to

634
00:41:06,278 --> 00:41:10,032
me, ask those burning questions. And I'm super happy

635
00:41:10,086 --> 00:41:12,690
to help on there as well.

636
00:41:13,140 --> 00:41:16,896
So I hope everyone has can absolutely

637
00:41:16,998 --> 00:41:20,920
wonderful conference, can absolutely wonderful time and a great week

638
00:41:21,070 --> 00:41:24,616
and talk to you in Twitter or some places as well.

639
00:41:24,718 --> 00:41:25,270
Thank you everyone.

