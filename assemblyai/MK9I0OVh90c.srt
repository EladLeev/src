1
00:00:23,080 --> 00:00:26,792
Hi, and thank you for attending my talk on road to zero limb failures.

2
00:00:26,936 --> 00:00:30,784
I'm Chris Ng and I'm a senior your staff software engineer at LinkedIn.

3
00:00:30,912 --> 00:00:34,724
So let's jump right into it. So for

4
00:00:34,762 --> 00:00:38,516
today's talk, we'll go over why lint rules, code quality at

5
00:00:38,538 --> 00:00:41,988
scale, and the challenges around that, how to fix it, or at

6
00:00:41,994 --> 00:00:46,068
least the path that we took through zero lint failures,

7
00:00:46,244 --> 00:00:51,160
and finally any key results and next steps afterwards.

8
00:00:51,980 --> 00:00:55,316
So why lint rules? Right? Like, why do we care about lint

9
00:00:55,348 --> 00:00:58,792
rules? So back in 2017,

10
00:00:58,856 --> 00:01:01,992
we always had a saying that if it's not in a docs,

11
00:01:02,056 --> 00:01:07,016
it's not a real thing. You can't be commenting on people's pull requests

12
00:01:07,208 --> 00:01:10,496
about certain best practices or kind of

13
00:01:10,518 --> 00:01:13,964
like rule of thumb, if it's not in the docs,

14
00:01:14,012 --> 00:01:17,564
if it's not in the docs, then you can't flag

15
00:01:17,612 --> 00:01:20,550
it as something that the other person must fix.

16
00:01:21,560 --> 00:01:25,252
This kind of became a thing because so many different people

17
00:01:25,306 --> 00:01:29,012
had different opinions on code quality and what

18
00:01:29,066 --> 00:01:33,140
best practices are, and we really needed just some standardization.

19
00:01:34,280 --> 00:01:37,860
So Lin rules are perfect tools for automating

20
00:01:37,940 --> 00:01:41,572
code analysis and caching

21
00:01:41,636 --> 00:01:45,724
and even preventing error. Consistent in your code.

22
00:01:45,922 --> 00:01:49,992
Common tools are. What you're familiar with is probably like Eslint.

23
00:01:50,056 --> 00:01:53,244
There's also like stylin for your CSS or

24
00:01:53,282 --> 00:01:57,116
sess files, and there's a bunch of other tools in the

25
00:01:57,138 --> 00:02:00,780
ecosystem for more niche use cases.

26
00:02:02,320 --> 00:02:06,448
So lint rules are like really amazing tools for us because

27
00:02:06,614 --> 00:02:10,004
they're really automated, right? It can start

28
00:02:10,042 --> 00:02:13,780
even at your iDe. So when you're typing something

29
00:02:13,850 --> 00:02:17,860
like up here, when you're typing your my component

30
00:02:18,760 --> 00:02:23,172
file, you can see that Eslin is already catching

31
00:02:23,316 --> 00:02:27,050
unused variable, that you can remove your memory code

32
00:02:27,740 --> 00:02:30,840
before you check this code into

33
00:02:30,910 --> 00:02:35,496
your repository. We can run some precommit

34
00:02:35,528 --> 00:02:39,950
scripts using tools like Husky or

35
00:02:40,720 --> 00:02:44,396
to run Eslint on your files, either all

36
00:02:44,418 --> 00:02:48,124
of your files or just change files to flag

37
00:02:48,172 --> 00:02:51,920
this error again. And then you have another layer on

38
00:02:51,990 --> 00:02:55,856
your source control kind of like

39
00:02:56,038 --> 00:02:59,460
choice. And here it's a screenshot of GitHub,

40
00:02:59,880 --> 00:03:04,272
where we run a GitHub action, testing your lint rules

41
00:03:04,336 --> 00:03:07,988
on the files that are being challenges, as you

42
00:03:07,994 --> 00:03:12,004
can see here, three cases of catching not

43
00:03:12,042 --> 00:03:16,068
everyone will have their id configured, not everyone will

44
00:03:16,234 --> 00:03:20,216
have their local procurement scripts running. So you

45
00:03:20,238 --> 00:03:23,768
have different layers, but the idea is to catch it as early as possible,

46
00:03:23,854 --> 00:03:26,920
right? And then we also use prettier.

47
00:03:27,080 --> 00:03:30,536
So there's no more arguments about formatting, no more arguments

48
00:03:30,568 --> 00:03:34,316
about tabs and spaces or anything like that prettier kind of

49
00:03:34,338 --> 00:03:38,288
like really removed all the bike shedding for us

50
00:03:38,454 --> 00:03:41,600
and really saved a lot of time for our engineers.

51
00:03:43,940 --> 00:03:47,712
So like Lind rules, they're more than just for sale issues,

52
00:03:47,766 --> 00:03:51,316
right? Like prettier is what we use for style issues. Lindrules is what we

53
00:03:51,338 --> 00:03:54,260
use for making sure our code is consistent.

54
00:03:54,920 --> 00:03:58,116
It even prevents bugs in a lot of cases. I'll show you an

55
00:03:58,138 --> 00:04:01,764
example just in a little bit. And more

56
00:04:01,802 --> 00:04:04,472
importantly, if you're doing any migrations for your code,

57
00:04:04,606 --> 00:04:08,504
anyone who has code running in production for years

58
00:04:08,622 --> 00:04:11,860
and years and years, you're always going to need migrations.

59
00:04:11,940 --> 00:04:15,164
And lint rules are amazing tools for not only

60
00:04:15,202 --> 00:04:19,084
identifying which areas you need to migrate, but also

61
00:04:19,202 --> 00:04:22,892
making sure that for the most part, everyone's code

62
00:04:22,946 --> 00:04:26,524
is consistent. So it's easier to migrate and do either find,

63
00:04:26,562 --> 00:04:29,920
replace, or like a code mod to migrate yourself

64
00:04:29,990 --> 00:04:33,328
from a v one to a v two, or even from one framework to a

65
00:04:33,334 --> 00:04:37,392
different framework. But yeah, here's a

66
00:04:37,446 --> 00:04:40,728
very quick example of Lin rules on Yashin,

67
00:04:40,844 --> 00:04:45,204
where it's caching something that you might not at

68
00:04:45,242 --> 00:04:49,268
first be super obvious, right? So you have this paging object,

69
00:04:49,434 --> 00:04:53,110
and let's say you're updating this paging object

70
00:04:53,640 --> 00:04:56,824
that you get from API, but you kind of want to be a little bit

71
00:04:56,862 --> 00:05:00,408
safe. And if your data doesn't come back with a

72
00:05:00,414 --> 00:05:03,610
paging object, then you do this optional training,

73
00:05:04,240 --> 00:05:09,916
right? But if it comes back, then you

74
00:05:09,938 --> 00:05:13,404
do some arithmetic. Adding the start

75
00:05:13,442 --> 00:05:17,068
and account that will be the new start for this paging

76
00:05:17,084 --> 00:05:20,064
object seems kind of good,

77
00:05:20,102 --> 00:05:23,164
right? Eslint will actually catch

78
00:05:23,212 --> 00:05:26,960
this with the lint rule, no unsafe optional chaining

79
00:05:27,700 --> 00:05:31,908
here, where it would say that this result

80
00:05:31,994 --> 00:05:35,350
could potentially become non number.

81
00:05:36,520 --> 00:05:38,870
Why is that? You would say, right.

82
00:05:40,200 --> 00:05:43,040
Unfortunately, in this case,

83
00:05:43,130 --> 00:05:45,770
if your argument is an empty object,

84
00:05:46,540 --> 00:05:50,788
you would come back with an undefined plus ten, which equals to none.

85
00:05:50,884 --> 00:05:54,376
And then that kind of just blows up your code. And like edge cases

86
00:05:54,408 --> 00:05:59,292
like this, it's like very easy

87
00:05:59,346 --> 00:06:02,990
mistake to happen if you don't have typescript in your code.

88
00:06:03,760 --> 00:06:07,868
These edge cases will always happen in large application where it's

89
00:06:07,884 --> 00:06:12,000
just not easy or even possible to ask everyone

90
00:06:12,070 --> 00:06:15,788
to check for a condition or rely on code reviews

91
00:06:15,884 --> 00:06:19,972
where there might be new hires or even more

92
00:06:20,026 --> 00:06:23,060
junior engineers code reviewing each other.

93
00:06:23,210 --> 00:06:25,924
And you just can't have that much control. Right?

94
00:06:25,962 --> 00:06:29,876
Like the ship must keep sailing, and there's no

95
00:06:29,898 --> 00:06:33,272
way you can single handedly review

96
00:06:33,326 --> 00:06:37,544
everyone's code, or you also would

97
00:06:37,582 --> 00:06:41,592
go on vacation and not be around. So yeah,

98
00:06:41,646 --> 00:06:45,836
here's like a very simple example of lint rules caching and saving

99
00:06:46,018 --> 00:06:49,436
production issue. So really what

100
00:06:49,458 --> 00:06:53,036
we're trying to do is like expanding the welllit path so you

101
00:06:53,058 --> 00:06:55,884
don't need that constant attention to every single person.

102
00:06:56,002 --> 00:07:00,336
Just make it easy to do the right thing, make sure that

103
00:07:00,438 --> 00:07:03,776
the right thing is easy to do and is kind

104
00:07:03,798 --> 00:07:07,616
of like followed. So what's the problem? Right, let's add all the

105
00:07:07,638 --> 00:07:10,976
run rules, just keep adding all the rules

106
00:07:11,008 --> 00:07:14,816
and everyone will have perfect code and achieve total nirvana

107
00:07:14,928 --> 00:07:16,950
and we can all go home, right?

108
00:07:18,120 --> 00:07:21,976
Unfortunately code quality at scale we face a lot

109
00:07:21,998 --> 00:07:25,000
of different problems with this approach.

110
00:07:25,900 --> 00:07:29,720
But first, what does upscale mean for our application?

111
00:07:29,870 --> 00:07:34,044
That meant an application that's been in production for eight

112
00:07:34,082 --> 00:07:37,740
years old. We had over 24k files

113
00:07:38,320 --> 00:07:41,420
that includes application and test files.

114
00:07:41,760 --> 00:07:45,528
I believe there's like over 100k in their repository,

115
00:07:45,624 --> 00:07:48,732
a lot of internationalization files for sure,

116
00:07:48,786 --> 00:07:52,784
but it's just kind of all over the place. We also

117
00:07:52,822 --> 00:07:55,916
had maybe over 100k commits throughout the lifetime

118
00:07:55,948 --> 00:07:56,850
of the application.

119
00:07:58,520 --> 00:08:02,292
And year over year

120
00:08:02,346 --> 00:08:05,796
it's kind of growing in line of code by 21%.

121
00:08:05,978 --> 00:08:09,924
There's over like 67 prs per

122
00:08:09,962 --> 00:08:13,144
day written by humans, not automated by

123
00:08:13,182 --> 00:08:16,490
any kind of dependency upgrades or something like that.

124
00:08:17,500 --> 00:08:20,904
And most kind of like interesting for me

125
00:08:21,022 --> 00:08:24,972
is that we had over 800 unique contributors to

126
00:08:25,026 --> 00:08:28,924
the repository with

127
00:08:28,962 --> 00:08:32,940
at least five commits. So that's like a non trivial amount, that's not like someone

128
00:08:33,090 --> 00:08:36,684
changing some sort of string

129
00:08:36,732 --> 00:08:40,608
or anything like that. Five commits is kind of like,

130
00:08:40,774 --> 00:08:44,290
you know, kind of like what you're doing at the very least.

131
00:08:44,820 --> 00:08:47,010
And no Javascript, right.

132
00:08:47,860 --> 00:08:51,732
800, that's quite a big number. I don't think that's kind of like the number

133
00:08:51,786 --> 00:08:55,332
that every day is working on the product, but throughout the life

134
00:08:55,386 --> 00:08:59,056
that's quite a big, and you can enforce

135
00:08:59,168 --> 00:09:02,056
that many people even with a small team, right.

136
00:09:02,238 --> 00:09:05,560
So really problem with code quality

137
00:09:05,630 --> 00:09:09,112
at scale is that we needed

138
00:09:09,166 --> 00:09:13,076
length rules to enforce all of these rules, but we're

139
00:09:13,108 --> 00:09:16,696
just kind of increasing the amount of failures throughout in

140
00:09:16,718 --> 00:09:19,240
the application that's never getting fixed.

141
00:09:20,560 --> 00:09:24,268
I think at our peak we had over 7000 errors in

142
00:09:24,274 --> 00:09:28,012
the application, just like hanging out there in various

143
00:09:28,076 --> 00:09:32,188
failures and no one's really fixing

144
00:09:32,204 --> 00:09:34,160
it, right. It's just ever increasing.

145
00:09:35,300 --> 00:09:38,700
So ideally we do the campsite analogy

146
00:09:38,780 --> 00:09:42,244
where you leave the campsite better than you found it. So if you write

147
00:09:42,282 --> 00:09:46,420
a pr, you see a file, you see a lint failure, you fix it

148
00:09:46,570 --> 00:09:50,564
as part of your pr and then throughout time we will get

149
00:09:50,602 --> 00:09:54,180
to a place where the

150
00:09:54,250 --> 00:09:56,250
number of lint failures goes down.

151
00:09:57,980 --> 00:10:01,784
What if your campsite already looks kind of like this, though. When you come to

152
00:10:01,822 --> 00:10:05,292
it, are you still going to clean up all

153
00:10:05,346 --> 00:10:08,510
of the lint failures, or just maybe a couple ones?

154
00:10:09,920 --> 00:10:13,464
So this is kind of like our first foray into limiting

155
00:10:13,512 --> 00:10:16,976
these lint failures. We set in a couple

156
00:10:16,998 --> 00:10:20,112
of rules. Some of them worked really great,

157
00:10:20,166 --> 00:10:23,696
even some of them did not work and had

158
00:10:23,718 --> 00:10:27,360
to kind of be rolled back. First of all

159
00:10:27,430 --> 00:10:31,136
is blocking commits. If there's a link failure in the file.

160
00:10:31,248 --> 00:10:35,364
This was really important for us because this

161
00:10:35,402 --> 00:10:36,900
really stopped the bleeding.

162
00:10:38,840 --> 00:10:44,344
Granted, it was kind of like a not

163
00:10:44,382 --> 00:10:48,136
popular decision, but blocking commits, you can override it

164
00:10:48,158 --> 00:10:50,730
for sure, but it emails everyone.

165
00:10:51,180 --> 00:10:54,890
But blocking commits is the best way to do this.

166
00:10:55,900 --> 00:10:58,664
The second kind of thing we try to do is setting limits.

167
00:10:58,712 --> 00:11:02,108
So maybe you can have five instances of

168
00:11:02,274 --> 00:11:05,916
no unused vars. This is kind of like it kind of

169
00:11:05,938 --> 00:11:10,032
worked, but there was so much added work

170
00:11:10,086 --> 00:11:14,256
in the accounting and making sure the numbers are right where

171
00:11:14,358 --> 00:11:17,520
really you want to just make sure the number goes down.

172
00:11:17,590 --> 00:11:21,270
Right. We don't really care that there's five right now,

173
00:11:22,520 --> 00:11:25,636
and if it becomes six, it's fine, there's some sort

174
00:11:25,658 --> 00:11:29,620
of special case, but really we just want to keep

175
00:11:29,770 --> 00:11:33,130
making the number go down, the number of failures, that is.

176
00:11:34,860 --> 00:11:38,296
And then finally, the third kind of way that

177
00:11:38,318 --> 00:11:41,992
we tried to solve this was a platform review system.

178
00:11:42,046 --> 00:11:46,616
Or if you can think of this as a release owner model where there's

179
00:11:46,808 --> 00:11:50,492
someone in your particular team that's reviewing your code, and then someone

180
00:11:50,626 --> 00:11:54,524
from more of like can experienced group doing some sort of

181
00:11:54,722 --> 00:11:58,592
standardization. So everyone is following kind of like

182
00:11:58,726 --> 00:12:02,944
some guidelines. So the last two

183
00:12:03,062 --> 00:12:06,496
kind of didn't work super well. It works sometimes,

184
00:12:06,598 --> 00:12:10,256
but sometimes it didn't really work so well for our use cases.

185
00:12:10,448 --> 00:12:12,470
But blocking commits definitely worked.

186
00:12:14,120 --> 00:12:17,444
So the only problem with blocking commits, right, like is if

187
00:12:17,482 --> 00:12:20,500
you revisited this campsite analogy,

188
00:12:21,240 --> 00:12:24,804
but then add in the case where your manager,

189
00:12:24,852 --> 00:12:28,504
or maybe your manager's manager, or maybe even the CEO was

190
00:12:28,542 --> 00:12:32,168
like, get this in today. What if you

191
00:12:32,174 --> 00:12:35,996
need to land something really fast? What we saw was that most

192
00:12:36,018 --> 00:12:40,316
people would just kind of move around and kind

193
00:12:40,338 --> 00:12:44,076
of even code around files with law

194
00:12:44,098 --> 00:12:48,076
of lin failures and then ship it done by overriding

195
00:12:48,108 --> 00:12:52,176
or avoiding. Great, right? Let's get this

196
00:12:52,198 --> 00:12:54,690
to production service of customers.

197
00:12:55,300 --> 00:12:58,690
That's kind of like what we're here for, right? To serve customers.

198
00:12:59,720 --> 00:13:02,310
Yeah, it's really great, I think,

199
00:13:02,680 --> 00:13:06,292
and can't really fault them, but not

200
00:13:06,346 --> 00:13:08,310
really fixing our lint failures problem.

201
00:13:10,120 --> 00:13:13,880
So to really stop the bleeding even more,

202
00:13:14,030 --> 00:13:17,512
we introduced two new things. One was

203
00:13:17,566 --> 00:13:20,756
a lend proposal process, and one was a task

204
00:13:20,788 --> 00:13:24,376
force to own, kind of like the lending

205
00:13:24,408 --> 00:13:28,072
framework. The point of the task force is to have accountable

206
00:13:28,136 --> 00:13:31,624
engineers who will maintain this framework

207
00:13:31,752 --> 00:13:35,320
throughout time until we get to zero lint failures,

208
00:13:35,400 --> 00:13:37,760
zero warnings, et cetera, et cetera.

209
00:13:38,980 --> 00:13:42,336
And the point of the lint proposal process was to

210
00:13:42,358 --> 00:13:45,644
make sure that when we add new rules, we don't

211
00:13:45,692 --> 00:13:49,200
add like 1000 more errors, which was another

212
00:13:49,270 --> 00:13:52,836
case where we would just suddenly get a bunch of

213
00:13:52,858 --> 00:13:56,612
new failures because a new rules was enabled and

214
00:13:56,746 --> 00:14:00,630
someone didn't bother to do even like a find, replace or something like that,

215
00:14:02,460 --> 00:14:05,784
which kind of really made

216
00:14:05,822 --> 00:14:09,588
it difficult to get to zero link failures.

217
00:14:09,764 --> 00:14:13,096
So the proposal process made sure

218
00:14:13,118 --> 00:14:17,036
that all existing failures must be resolved before enabling a

219
00:14:17,058 --> 00:14:20,344
rule. A lin rule, as can error, you can enable

220
00:14:20,392 --> 00:14:24,316
its warning, you can kind of like solicit feedback and stuff like

221
00:14:24,338 --> 00:14:27,804
that. But before its error, all existing failures

222
00:14:27,852 --> 00:14:31,970
must be resolved, unless you had a very good reason,

223
00:14:32,340 --> 00:14:36,044
usually something that we've

224
00:14:36,092 --> 00:14:39,616
seen time and time again take production down. So at

225
00:14:39,638 --> 00:14:43,236
that point, let's push this rule out and then make

226
00:14:43,258 --> 00:14:44,820
sure production is stable.

227
00:14:47,080 --> 00:14:50,416
So, yeah, this was kind of like one of the key turning

228
00:14:50,448 --> 00:14:54,264
points for us. All new rules must have

229
00:14:54,302 --> 00:14:58,490
existing failures resolved. This was not super popular either,

230
00:14:58,860 --> 00:15:02,596
because lint authors were questioning,

231
00:15:02,628 --> 00:15:05,944
like, what if there's like 1000 errors I need to solve? What if

232
00:15:05,982 --> 00:15:09,004
I don't know how to fix existing errors? What if I don't have the time

233
00:15:09,042 --> 00:15:13,000
to do this? What if I break something, right? I break production by fixing

234
00:15:13,080 --> 00:15:16,972
lin failure, and there's just other

235
00:15:17,026 --> 00:15:20,224
existing failures in the files I'm cleaning up. But this kind of like,

236
00:15:20,262 --> 00:15:23,776
revolves around the same theme, right? In order for us to get to

237
00:15:23,798 --> 00:15:27,570
zero in failures, everyone must chip in

238
00:15:29,140 --> 00:15:33,024
and all of these other kind of problems that

239
00:15:33,062 --> 00:15:37,956
Lin orders were facing, the feature themes themselves

240
00:15:38,058 --> 00:15:42,424
are facing the same thing, right? Like, they could be facing a lint errors while

241
00:15:42,462 --> 00:15:45,880
they're trying to ship a different, unrelated feature and cause

242
00:15:45,950 --> 00:15:49,400
something, production breaking. What we've seen

243
00:15:49,470 --> 00:15:53,300
is that the lint author is a lot more familiar

244
00:15:53,380 --> 00:15:56,956
with what needs to be fixed, and so they're less likely to

245
00:15:56,978 --> 00:16:01,468
break something in production at

246
00:16:01,474 --> 00:16:05,416
the end of it. What we've really learned is that not all problems are software

247
00:16:05,448 --> 00:16:08,930
engineering. Like, just be a human, talk to people.

248
00:16:10,100 --> 00:16:13,424
You can get really far with just trying to talk

249
00:16:13,462 --> 00:16:17,264
to people face to face or through

250
00:16:17,382 --> 00:16:20,692
any chat app, and just

251
00:16:20,826 --> 00:16:24,980
explain why you're trying to do this, understand why

252
00:16:25,130 --> 00:16:28,516
it's difficult for the other person to do this and help each

253
00:16:28,538 --> 00:16:32,230
other get through it together, instead of

254
00:16:33,560 --> 00:16:36,872
throwing kind of a package across the wall

255
00:16:36,926 --> 00:16:40,596
and making sure not bothering to communicate

256
00:16:40,628 --> 00:16:41,690
with the other person.

257
00:16:43,760 --> 00:16:47,916
So to our road

258
00:16:47,938 --> 00:16:51,580
to zero land failures, we had

259
00:16:51,650 --> 00:16:54,940
even other initiatives to get it down to zero.

260
00:16:55,010 --> 00:16:57,010
That was just to stop the bleeding, right?

261
00:16:57,940 --> 00:17:01,052
So really it starts with incentives, right? Incentives, incentives,

262
00:17:01,116 --> 00:17:04,128
incentives. We really need to understand,

263
00:17:04,294 --> 00:17:07,964
why would someone want to clean up a lint

264
00:17:08,012 --> 00:17:13,124
failure in their code case? Is it just because they

265
00:17:13,162 --> 00:17:15,664
need to, because their commit is blocked otherwise?

266
00:17:15,792 --> 00:17:19,316
Or is there any other kind of reason for

267
00:17:19,338 --> 00:17:23,056
them to clean up? Kind of like learn

268
00:17:23,098 --> 00:17:26,680
failures in their team's ownership.

269
00:17:27,740 --> 00:17:31,512
So we kind of had

270
00:17:31,566 --> 00:17:36,040
these goals of having accountable

271
00:17:36,200 --> 00:17:40,060
code owners, prioritizing lin failures,

272
00:17:40,480 --> 00:17:43,660
having a business case for getting prioritization,

273
00:17:44,160 --> 00:17:47,692
getting some sort of actionable insight for engineers

274
00:17:47,756 --> 00:17:51,136
so they know what to actually fix,

275
00:17:51,318 --> 00:17:54,690
and kind of tooling to tie it all together.

276
00:17:56,980 --> 00:18:00,980
So really we kind of provided a lot of technical support.

277
00:18:01,050 --> 00:18:04,532
So if someone's trying to clean

278
00:18:04,586 --> 00:18:08,660
up a lint failure, we'll kind of guide them step by step.

279
00:18:08,810 --> 00:18:14,264
The developer experience of the

280
00:18:14,302 --> 00:18:16,170
red squiggly lines, for example,

281
00:18:17,980 --> 00:18:21,800
sometimes breaks. And so our team was always

282
00:18:21,870 --> 00:18:25,724
there to help fix those issues.

283
00:18:25,922 --> 00:18:29,260
We provided lots of shout outs to engineers,

284
00:18:30,240 --> 00:18:33,336
and I want to add very specific shout outs

285
00:18:33,368 --> 00:18:37,952
to engineers who have fixed len failures by

286
00:18:38,006 --> 00:18:41,420
actually identifying kind of like very topical

287
00:18:41,500 --> 00:18:50,352
and understanding

288
00:18:50,416 --> 00:18:54,068
of what kind of like

289
00:18:54,234 --> 00:18:57,620
exactly in the prs they've

290
00:18:57,960 --> 00:19:02,536
fixed and provide them visibility for

291
00:19:02,638 --> 00:19:06,824
all their hard work and adequate recognition for

292
00:19:06,862 --> 00:19:10,920
taking that extra time to clean up the lint failure.

293
00:19:11,580 --> 00:19:14,956
So, tooling, right, we kept it really simple.

294
00:19:15,058 --> 00:19:18,796
Identify the owners, identify the errors, keep it up

295
00:19:18,818 --> 00:19:21,070
to date, and that's it.

296
00:19:22,080 --> 00:19:25,704
Very easy. There are a lot of more sophisticated

297
00:19:25,752 --> 00:19:29,470
tools out there, which we ended up

298
00:19:29,940 --> 00:19:34,736
looking into migrating right about now, but just

299
00:19:34,838 --> 00:19:38,704
at the very start, make it easy for people to just

300
00:19:38,742 --> 00:19:41,200
do their job and clean up the failures.

301
00:19:42,340 --> 00:19:45,910
So initially, single owner profile was

302
00:19:46,360 --> 00:19:49,696
kind of like the thing we need to get to nail

303
00:19:49,728 --> 00:19:53,200
down, right? Like you need to find for every single file,

304
00:19:53,280 --> 00:19:56,440
there's only one owner. Doesn't have to be one person,

305
00:19:56,510 --> 00:19:59,876
right? It could be one team, but there's a particular team who owns

306
00:19:59,908 --> 00:20:03,576
every single file. Otherwise, you're just kind of going in

307
00:20:03,598 --> 00:20:07,660
whack and all of going around teams figuring out who owns this file,

308
00:20:08,080 --> 00:20:10,990
if it's kind of like a dispersed ownership model.

309
00:20:12,240 --> 00:20:15,948
We also created a very basic visualizer tool. If you

310
00:20:15,954 --> 00:20:19,760
can see here, we didn't even put a font. We were just in

311
00:20:19,910 --> 00:20:23,692
a serif font here with an HTML

312
00:20:23,756 --> 00:20:27,664
table. But we broke it down by team. We broke it down by

313
00:20:27,702 --> 00:20:30,864
lint rules. And also we broke it down by

314
00:20:30,902 --> 00:20:34,564
team and lint rules. So if you're kind of like part of the

315
00:20:34,682 --> 00:20:38,484
article architects team, and you want to find out

316
00:20:38,522 --> 00:20:41,832
all the no unused variables, because you want to just delete all of that,

317
00:20:41,886 --> 00:20:45,464
you can kind of drill it down by that and

318
00:20:45,502 --> 00:20:49,032
kind of understand how much time you're committing to resolving those

319
00:20:49,086 --> 00:20:52,692
lint failures. For our MVP,

320
00:20:52,836 --> 00:20:56,156
it updated nightly via Cron job that kind of

321
00:20:56,178 --> 00:20:59,912
just like Ran Eslint. It ran on someone's VM machine,

322
00:20:59,976 --> 00:21:04,444
which was interesting during COVID and

323
00:21:04,482 --> 00:21:07,836
we opened up or we counted errors,

324
00:21:07,868 --> 00:21:11,212
warnings and disables. In this presentation,

325
00:21:11,276 --> 00:21:14,320
we'll really just focus on errors.

326
00:21:15,620 --> 00:21:20,784
Here's kind of like a drill down view of a single lint

327
00:21:20,832 --> 00:21:24,420
rule, and the kind of like the files that

328
00:21:24,570 --> 00:21:27,744
have this particular lint failure.

329
00:21:27,872 --> 00:21:30,420
In this case, it's no unused variables.

330
00:21:31,820 --> 00:21:35,704
We use checkup, which is a tool built

331
00:21:35,742 --> 00:21:40,456
by LinkedIn as well. That kind

332
00:21:40,478 --> 00:21:44,792
of like every night. It's like a node tax runner

333
00:21:44,936 --> 00:21:48,328
that will run through Eslint and a bunch

334
00:21:48,344 --> 00:21:52,156
of other tooling, and then you

335
00:21:52,258 --> 00:21:55,752
can format the Eslint output to a particular

336
00:21:55,906 --> 00:21:58,130
format. In our case,

337
00:21:58,900 --> 00:22:02,384
there's like a checkoff formatter for Eslint that

338
00:22:02,422 --> 00:22:04,800
then translates it to serif,

339
00:22:05,700 --> 00:22:10,644
which is kind of like a

340
00:22:10,682 --> 00:22:15,140
standard format that's not super digestible

341
00:22:16,760 --> 00:22:20,372
when you have thousands of failures. But for few

342
00:22:20,426 --> 00:22:24,712
failures, you can click into the file and then it'll jump to

343
00:22:24,846 --> 00:22:28,200
the particular line of code in your file.

344
00:22:29,580 --> 00:22:32,760
This is kind of like can example of a serif file.

345
00:22:33,180 --> 00:22:36,556
Again, your ide usually has a

346
00:22:36,658 --> 00:22:40,668
Sarah friendly viewer to get you the

347
00:22:40,754 --> 00:22:43,260
jump and click functionality.

348
00:22:45,840 --> 00:22:49,324
After that, when we have

349
00:22:49,362 --> 00:22:52,376
the Sarah file, we can then create a dashboard.

350
00:22:52,568 --> 00:22:55,884
We end up migrating dashboard to kind of

351
00:22:55,922 --> 00:23:00,336
like the, the company's

352
00:23:00,368 --> 00:23:03,700
kind of. I believe this is a docusource

353
00:23:04,840 --> 00:23:12,132
document stack, just because someone's

354
00:23:12,196 --> 00:23:15,528
VM environment kept getting shut off and it was just kind

355
00:23:15,534 --> 00:23:19,544
of hard to share ownership for

356
00:23:19,582 --> 00:23:23,290
that by if someone was on vacation or something like that.

357
00:23:24,160 --> 00:23:27,656
So yeah, a lot more prettier UI,

358
00:23:27,848 --> 00:23:31,788
more easier to use, but it's kind

359
00:23:31,794 --> 00:23:36,084
of like the same data as the original, kind of like serif

360
00:23:36,232 --> 00:23:38,480
version of the dashboard.

361
00:23:39,780 --> 00:23:42,976
And then we had a weekly scorecard that we would email to

362
00:23:42,998 --> 00:23:47,296
all the teams where for

363
00:23:47,318 --> 00:23:51,620
every team we gave them a green yellow or red green if

364
00:23:51,770 --> 00:23:56,352
you had a negative week over week increase

365
00:23:56,416 --> 00:24:00,256
in lint failures. So that means you've decreased the number of lint

366
00:24:00,288 --> 00:24:03,864
failures in your app, in your ownership for your team,

367
00:24:03,982 --> 00:24:06,824
or you're already at zero for your team.

368
00:24:06,942 --> 00:24:10,456
So you're green, you get yellow if there's been

369
00:24:10,478 --> 00:24:14,572
no increase or decrease in lin failures. So nothing

370
00:24:14,626 --> 00:24:18,264
really happened that week. And then red if there's a positive increase

371
00:24:18,312 --> 00:24:22,510
week over week. What we've seen is red is usually happens when

372
00:24:23,680 --> 00:24:27,344
some code have changed ownership or

373
00:24:27,542 --> 00:24:31,644
something was incorrectly updated in the configs

374
00:24:31,692 --> 00:24:35,584
or the dependency or something like that. All of these are

375
00:24:35,622 --> 00:24:38,972
really good to know early on

376
00:24:39,046 --> 00:24:43,556
rather than someone figuring it out later on that

377
00:24:43,578 --> 00:24:46,788
they're trying to fix their lint failures and there's just like

378
00:24:46,794 --> 00:24:50,310
a lot of failures that they've never even seen before.

379
00:24:51,100 --> 00:24:54,644
So actually it's been quite useful to have these reds,

380
00:24:54,772 --> 00:24:58,676
although it never was like a rogue engineer

381
00:24:58,708 --> 00:25:02,324
that just pushed in all these Lin

382
00:25:02,372 --> 00:25:06,044
failures. This is a

383
00:25:06,082 --> 00:25:09,116
sample of a scorecard that we would send out with a number of

384
00:25:09,138 --> 00:25:14,072
failure count and the green, yellow or red coloring

385
00:25:14,136 --> 00:25:18,444
per team. This was a manual email. We could have automated

386
00:25:18,492 --> 00:25:22,384
it for sure, but this was not something we wanted to

387
00:25:22,502 --> 00:25:26,700
invest so much time in. What we did invest time in is identifying

388
00:25:26,780 --> 00:25:31,110
maybe two or three engineers who fixed big issues that week

389
00:25:31,640 --> 00:25:35,556
and give them a personalized shout out and a link to their pr to

390
00:25:35,578 --> 00:25:38,932
kind of inspire other people and also kind of

391
00:25:39,066 --> 00:25:42,584
acknowledge that they went above and beyond their

392
00:25:42,622 --> 00:25:46,090
duties and helped out the overall community.

393
00:25:49,820 --> 00:25:53,556
But at the end of it, while we were trying to burn

394
00:25:53,588 --> 00:25:56,764
down the number of lint failures, what we

395
00:25:56,802 --> 00:26:00,968
end up seeing was an 80 20 rule playing.

396
00:26:00,984 --> 00:26:05,020
But in real life, the first 80%

397
00:26:05,090 --> 00:26:08,616
was quite fast, but the last 20%, the last mile,

398
00:26:08,728 --> 00:26:12,256
was really, really hard to get to zero. There was

399
00:26:12,278 --> 00:26:15,584
a lot of stragglers. But the end of it,

400
00:26:15,622 --> 00:26:19,056
we did like a team effort. We asked other teams for

401
00:26:19,078 --> 00:26:22,244
help. And also at the end of it,

402
00:26:22,282 --> 00:26:26,560
too, our team of volunteers in the task force ourselves

403
00:26:26,640 --> 00:26:29,830
just kind of like took on these files and cleaned it up.

404
00:26:31,160 --> 00:26:35,208
You might ask, does it really matter? You got 80%

405
00:26:35,294 --> 00:26:37,530
down. That seems pretty good.

406
00:26:38,860 --> 00:26:42,536
And the last mile was really long. If you can look

407
00:26:42,558 --> 00:26:45,964
at this chart, the first kind of like.

408
00:26:46,002 --> 00:26:49,516
It's almost like half of the chart is the

409
00:26:49,538 --> 00:26:53,470
80%. And the last, mal, is the last. Kind of like another.

410
00:26:53,840 --> 00:26:58,050
Another maybe. It's almost a year, right? I think it's another year.

411
00:26:58,740 --> 00:27:03,424
Granted, I did go on paternity leave around

412
00:27:03,622 --> 00:27:07,696
July 22, which is like right in the middle of this, so I

413
00:27:07,718 --> 00:27:11,380
was not able to, but the teams as much and run

414
00:27:11,450 --> 00:27:15,460
some of these kind of like emails,

415
00:27:15,960 --> 00:27:19,588
but it still took a long time and a lot of hard work to get

416
00:27:19,594 --> 00:27:23,192
the last mile. But yeah, the last

417
00:27:23,246 --> 00:27:26,890
mile does matter. Sustainability is key. If you see

418
00:27:27,420 --> 00:27:30,744
a file in your repository like

419
00:27:30,782 --> 00:27:34,088
this, it's much more easy for someone to

420
00:27:34,094 --> 00:27:37,000
be like, oh, it's fine for me to add a Lin failure,

421
00:27:37,360 --> 00:27:40,556
or if they're touching this file, they're going to just be like, oh,

422
00:27:40,578 --> 00:27:44,284
I'm just going to override because there's a lot of lin failures that

423
00:27:44,322 --> 00:27:47,916
I didn't cause and was just here. This file,

424
00:27:48,108 --> 00:27:51,552
compare a file like this to a file like this

425
00:27:51,686 --> 00:27:55,392
where there's no Lin failures, everything's good.

426
00:27:55,526 --> 00:27:59,250
It's kind of like having code that's already tested. Right.

427
00:27:59,880 --> 00:28:03,684
It's much easier to add a new test than to kind of add

428
00:28:03,722 --> 00:28:07,060
in all the test scaffolding for your existing component.

429
00:28:07,960 --> 00:28:11,456
Yeah. So for us, what we've seen was sustainability

430
00:28:11,568 --> 00:28:16,804
for making sure we're at zero meant

431
00:28:16,852 --> 00:28:20,200
that everyone actually had to have zero lint failures.

432
00:28:21,500 --> 00:28:25,130
So for summary, for the

433
00:28:27,020 --> 00:28:31,084
road to zero lint failures, we had

434
00:28:31,202 --> 00:28:35,956
a rule of no new errors. When enabling lind

435
00:28:36,008 --> 00:28:39,920
rules as error, there should be no new failures.

436
00:28:40,980 --> 00:28:44,816
We had a single owner per file, so we knew which team was

437
00:28:44,838 --> 00:28:49,076
accountable per file. We used a cron job every

438
00:28:49,178 --> 00:28:52,864
night using a tool called checkup

439
00:28:52,992 --> 00:28:58,400
to calculate how many failures

440
00:28:58,480 --> 00:29:02,564
each team had. We also did that for warnings and disables,

441
00:29:02,692 --> 00:29:06,676
et cetera. We had a homegrown dashboard

442
00:29:06,708 --> 00:29:10,152
identifying the issues and with a quick link

443
00:29:10,286 --> 00:29:14,220
to the GitHub line itself, which was

444
00:29:14,370 --> 00:29:17,676
invaluable for engineers looking to see if

445
00:29:17,698 --> 00:29:21,196
they had like five minutes in their day that

446
00:29:21,218 --> 00:29:25,436
they want to just quick bang out, like a pr

447
00:29:25,618 --> 00:29:28,930
fixing something, they can quickly identify that.

448
00:29:29,380 --> 00:29:33,404
We did a weekly scorecard to keep teams and individuals

449
00:29:33,452 --> 00:29:36,796
accountable and congratulating. Also teams

450
00:29:36,828 --> 00:29:40,196
and individuals and some

451
00:29:40,218 --> 00:29:42,230
healthy competition as well.

452
00:29:42,920 --> 00:29:46,196
Recognition, same thing as what I was trying

453
00:29:46,218 --> 00:29:50,656
to say. It's really important that it's

454
00:29:50,688 --> 00:29:54,020
not like a chore, it's more of like a team sport

455
00:29:54,100 --> 00:29:58,200
where we as a community try to figure out how

456
00:29:58,270 --> 00:30:02,264
to get a clean campsite where everyone enjoys it.

457
00:30:02,302 --> 00:30:06,376
It's much easier to work. There's no kind of unexpected

458
00:30:06,568 --> 00:30:09,916
work that arises when you open a file and then

459
00:30:09,938 --> 00:30:13,544
there's a lot of failures. It's much more maintainable

460
00:30:13,592 --> 00:30:17,520
too. And finally, also get your hands dirty.

461
00:30:18,340 --> 00:30:22,770
As a task force, which is volunteer run,

462
00:30:23,780 --> 00:30:27,024
we kind of went through different teams and

463
00:30:27,062 --> 00:30:30,308
just tried to fix their failures for them as well.

464
00:30:30,474 --> 00:30:35,412
If they're having a hard time, just because someone

465
00:30:35,466 --> 00:30:39,056
has to do it, and as someone leading

466
00:30:39,088 --> 00:30:42,376
the effort, you should definitely try to fix it if

467
00:30:42,398 --> 00:30:45,290
no one else is trying to fix it.

468
00:30:46,300 --> 00:30:50,840
So for the results of our kind of initiative.

469
00:30:53,440 --> 00:30:57,464
We kind of learned that individual developer

470
00:30:57,512 --> 00:31:01,020
experience was very important. The actual engineer working

471
00:31:01,090 --> 00:31:05,116
on the fixes should have all

472
00:31:05,138 --> 00:31:09,264
the attention, not kind of like some

473
00:31:09,302 --> 00:31:14,764
sort of 100,000ft

474
00:31:14,812 --> 00:31:19,508
view of the kind of landscape per

475
00:31:19,594 --> 00:31:21,750
individual is very important.

476
00:31:24,040 --> 00:31:28,150
The same thing for shoutouts, like very individualized shoutouts was important.

477
00:31:28,760 --> 00:31:32,804
And no regressions was also very important. Just because it keeps

478
00:31:32,852 --> 00:31:36,856
popping up, these regressions and having some

479
00:31:36,878 --> 00:31:40,296
sort of table was very important, was very useful for

480
00:31:40,318 --> 00:31:44,648
that. So between November

481
00:31:44,824 --> 00:31:47,230
21 to January 23,

482
00:31:48,160 --> 00:31:52,648
we removed close to 6000 lead failures.

483
00:31:52,824 --> 00:31:57,490
Took a little bit over a year to complete,

484
00:31:57,860 --> 00:32:01,628
with 55 engineers contributing

485
00:32:01,644 --> 00:32:05,216
to the effort. We kind of

486
00:32:05,238 --> 00:32:09,568
pulled a 30% increase in satisfaction

487
00:32:09,744 --> 00:32:13,140
for our quarterly surveys

488
00:32:13,480 --> 00:32:17,044
for code quality or

489
00:32:17,082 --> 00:32:21,200
perceived code quality, I guess, for individuals working on

490
00:32:21,290 --> 00:32:24,250
the repository, which was amazing.

491
00:32:25,900 --> 00:32:29,576
This was also coupled with kind

492
00:32:29,598 --> 00:32:33,284
of like continued changes in the lending

493
00:32:33,332 --> 00:32:37,308
ecosystem. We've had over 80 rules changes

494
00:32:37,394 --> 00:32:41,004
or dependency changes in the past year,

495
00:32:41,042 --> 00:32:44,876
I believe, and then over 45 unique contributors as well.

496
00:32:44,978 --> 00:32:48,796
So it's kind of been like the

497
00:32:48,818 --> 00:32:52,204
learning process has still kept going, even though we're trying to get

498
00:32:52,242 --> 00:32:56,236
the number of failures down to zero. So if

499
00:32:56,258 --> 00:33:00,672
you remember backer code, our quote from 2017,

500
00:33:00,736 --> 00:33:04,800
if it's not in docs, it's not a real thing. I think our new quote

501
00:33:04,880 --> 00:33:08,128
nowadays is that if it's not a relent rule, then it's

502
00:33:08,144 --> 00:33:11,876
not a real thing. And so thank

503
00:33:11,898 --> 00:33:15,236
you for attending my talk. Feel free to reach out if you have

504
00:33:15,258 --> 00:33:18,130
any questions or comments. Thank you.

