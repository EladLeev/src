1
00:00:17,450 --> 00:00:20,542
If you're a developer on a product team today, you probably know about design

2
00:00:20,596 --> 00:00:24,414
tools. Developers sometimes get to work with product designers or

3
00:00:24,452 --> 00:00:28,418
UI design who use these tools like sketch or figma,

4
00:00:28,514 --> 00:00:32,226
and these are basically vector drawing tools. They're very good at letting

5
00:00:32,258 --> 00:00:35,794
you quickly mock up uis and explore lots of different ideas rapidly,

6
00:00:35,842 --> 00:00:39,138
without investing the time into necessarily writing any

7
00:00:39,164 --> 00:00:42,614
code. But then when it comes time to collaborate with engineering,

8
00:00:42,662 --> 00:00:45,210
that's where things can get complex.

9
00:00:45,630 --> 00:00:48,854
Engineers have to essentially recreate the uis from scratch

10
00:00:48,902 --> 00:00:52,138
by hand, using code, and inevitably a

11
00:00:52,144 --> 00:00:54,960
lot of things can get missed in this translation process,

12
00:00:55,410 --> 00:00:58,686
or it can just be hard to translate because designs are

13
00:00:58,708 --> 00:01:01,966
freeform drawings. And so this leads to a lot of back and forth with

14
00:01:01,988 --> 00:01:05,554
design. And ultimately you have these two sources of truth that by

15
00:01:05,592 --> 00:01:08,450
most teams admission are never truly in sync.

16
00:01:09,030 --> 00:01:12,530
Now there are visual creation tools that let developers

17
00:01:13,030 --> 00:01:16,722
actually build production uis, and they're nothing

18
00:01:16,776 --> 00:01:20,882
new. They're actually very widely used on other platforms like iOS

19
00:01:20,946 --> 00:01:24,566
and Android and Windows, but not really so much for the web.

20
00:01:24,668 --> 00:01:28,118
To make one that fits well with the web means fitting well with how apps

21
00:01:28,134 --> 00:01:31,478
are written today, which means integrating

22
00:01:31,574 --> 00:01:35,206
in a natural way with code that is just increasingly

23
00:01:35,238 --> 00:01:39,002
written using these compositional component frameworks like React or

24
00:01:39,056 --> 00:01:42,410
view. And also, UI builders are

25
00:01:42,480 --> 00:01:46,254
generally perceived as clunky and very technical, a very far

26
00:01:46,292 --> 00:01:50,174
cry from the ease and speed of design tools. But anyway, on the web

27
00:01:50,212 --> 00:01:52,762
today, the status quo is to write everything in code.

28
00:01:52,916 --> 00:01:56,686
So there's a question of what a rethought development

29
00:01:56,718 --> 00:02:00,180
experience could look like for the web. How can we simplify things?

30
00:02:01,830 --> 00:02:03,890
There are also website builders.

31
00:02:05,510 --> 00:02:08,520
Website builders are everywhere. Here's a tiny fraction of them.

32
00:02:09,130 --> 00:02:12,806
These can all actually be quite different from each other as well. Some are

33
00:02:12,828 --> 00:02:16,274
simpler and more for nontechnical audiences

34
00:02:16,322 --> 00:02:20,026
like small business owners. And then there's others like Webflow, where you

35
00:02:20,048 --> 00:02:23,494
basically need to know CSS layout. But they're all focused

36
00:02:23,542 --> 00:02:26,666
on static websites, optionally hooked up to

37
00:02:26,688 --> 00:02:30,122
some content management system. But if you're working on a web app

38
00:02:30,176 --> 00:02:33,918
where you have an actual team of developers, or you have a

39
00:02:33,924 --> 00:02:37,486
database and user accounts, and I think most importantly just

40
00:02:37,508 --> 00:02:41,146
custom business logic, then static site builders aren't

41
00:02:41,178 --> 00:02:44,618
really meant for that. So this brings us to

42
00:02:44,644 --> 00:02:48,590
the last category, which is UI builders for web apps.

43
00:02:48,750 --> 00:02:52,098
This is actually a much more nascent category, so these logos are

44
00:02:52,104 --> 00:02:56,050
probably recognized by far fewer people, but it's emerging really fast.

45
00:02:56,120 --> 00:02:58,850
And this is actually just a subset of players.

46
00:02:59,830 --> 00:03:03,574
These are all about bridging design and development, but they all also have

47
00:03:03,612 --> 00:03:07,106
very different takes, so it's hard to summarize all of them together. Like for instance,

48
00:03:07,138 --> 00:03:10,342
modules lets you theme a design system of primitive components.

49
00:03:10,486 --> 00:03:14,650
Hadron lets you craft web components, Visli lets you craft react components.

50
00:03:14,990 --> 00:03:18,154
It's been really exciting actually to see all this

51
00:03:18,192 --> 00:03:21,678
activity and just raw tooling innovation happening. I work on one of

52
00:03:21,684 --> 00:03:25,406
these. I work on plasmic. So I'll give a quick demo of plasmic just

53
00:03:25,428 --> 00:03:28,846
to show one stab at what rethinking developer experience could

54
00:03:28,868 --> 00:03:32,286
look like. So this is

55
00:03:32,308 --> 00:03:35,358
plasmic. It's a browser based tool. And for this demo, I'm going

56
00:03:35,364 --> 00:03:39,026
to create two do MVC, which just

57
00:03:39,208 --> 00:03:42,802
a refresher of what everyone's favorite reference app looks like.

58
00:03:42,856 --> 00:03:45,598
I'm not going to create the whole thing. I'm actually going to create a subset

59
00:03:45,614 --> 00:03:48,990
of it, and I'm also going to create it from scratch.

60
00:03:49,070 --> 00:03:52,134
We have a different demo video on our website where we show how to start

61
00:03:52,172 --> 00:03:55,638
from a Figma file. So we have this figma plugin that lets you turn one

62
00:03:55,644 --> 00:03:59,338
of these figma documents into web standards. And so that's another way

63
00:03:59,344 --> 00:04:02,618
to get started. For now, we'll just

64
00:04:02,784 --> 00:04:06,490
directly draw on the canvas. You can directly add

65
00:04:06,560 --> 00:04:10,458
text, add boxes, et cetera. And the whole idea,

66
00:04:10,544 --> 00:04:13,774
the whole workflow that plasmic really tries to enable for you

67
00:04:13,812 --> 00:04:17,710
is to just start with these very rough, exploratory designs,

68
00:04:18,930 --> 00:04:22,598
not worrying about layout or anything like that. And I'm drawing

69
00:04:22,634 --> 00:04:26,258
this box for the task and the checkbox in it. I'm going to make the

70
00:04:26,264 --> 00:04:29,874
checkbox rounded. And here I'm just starting

71
00:04:29,912 --> 00:04:34,626
by creating these wireframes. And the

72
00:04:34,648 --> 00:04:37,506
idea is that you should be able to start with these and then refine it

73
00:04:37,528 --> 00:04:41,446
into something that's real, that's robust, that has proper layout and everything.

74
00:04:41,548 --> 00:04:45,366
So the idea is just start from scratch, refine, refine, refine, and you end up

75
00:04:45,388 --> 00:04:49,030
with something that you actually ship into production. So this

76
00:04:49,100 --> 00:04:52,666
task, I could now copy and paste this a bunch of times to

77
00:04:52,688 --> 00:04:56,186
have a list of tasks. But now if

78
00:04:56,208 --> 00:05:00,426
I actually want to style this thing or update one of these, then I

79
00:05:00,448 --> 00:05:03,626
have to do that manually for all the different copies. So instead of that,

80
00:05:03,728 --> 00:05:06,846
I'm actually going to right click this and create a component out of it,

81
00:05:06,868 --> 00:05:10,638
a reusable component called task. And now if I paste this

82
00:05:10,644 --> 00:05:14,446
a bunch of times, then I actually get instances of

83
00:05:14,468 --> 00:05:17,634
the same components. So if I double click

84
00:05:17,672 --> 00:05:21,460
into an instance, I'm editing the primary copy of the component. So if I

85
00:05:21,830 --> 00:05:25,106
drag this around or move things around, then you can see all

86
00:05:25,128 --> 00:05:27,380
the instances update as a result.

87
00:05:27,830 --> 00:05:32,274
So I just kind of drew some boxes. That's pretty much it for my wireframe

88
00:05:32,322 --> 00:05:34,998
of what I want the app to look like. Now from here, I'm going to

89
00:05:35,004 --> 00:05:38,578
start applying styling to make it look more like the real thing. And I'm

90
00:05:38,594 --> 00:05:41,346
going to start with this title here. I'm going to make it super thin and

91
00:05:41,388 --> 00:05:44,842
I'm going to apply some coloring to it. So maybe this light red color

92
00:05:44,976 --> 00:05:49,306
and this background here, the whole page, I'm actually going to set to be this

93
00:05:49,488 --> 00:05:53,040
off white, warm gray, something like that.

94
00:05:53,650 --> 00:05:57,342
And this task itself, I want to be just

95
00:05:57,396 --> 00:06:00,880
pure white. And this checkbox, I actually

96
00:06:01,570 --> 00:06:04,734
also want that to have a

97
00:06:04,772 --> 00:06:08,302
light gray border and just get rid of the background

98
00:06:08,366 --> 00:06:11,634
there. And I'm going to fidget with its text a little bit.

99
00:06:11,672 --> 00:06:15,554
It's a little small right now. I'm going to make it larger and just

100
00:06:15,592 --> 00:06:19,094
adjust its position a little bit. I'm going to set its text color to

101
00:06:19,132 --> 00:06:23,062
be something lighter. I'm going to make it maybe

102
00:06:23,116 --> 00:06:26,758
something like that. And I'm actually going to save this color as a

103
00:06:26,924 --> 00:06:30,858
reusable color token called text color. And so

104
00:06:31,024 --> 00:06:34,486
color tokens, spacing tokens, mix ins, these are all concepts

105
00:06:34,518 --> 00:06:37,574
in plasmic that let you create more maintainable,

106
00:06:37,622 --> 00:06:38,970
scalable designs.

107
00:06:40,290 --> 00:06:43,534
And actually they're very close to what you

108
00:06:43,572 --> 00:06:45,600
get when working with code.

109
00:06:47,730 --> 00:06:51,118
Now I have this list of

110
00:06:51,124 --> 00:06:54,878
three tasks and they're just kind of haphazardly placed. Let's say I

111
00:06:54,884 --> 00:06:57,858
wanted to introduce real layout. So what I can do,

112
00:06:58,024 --> 00:07:02,082
one way to introduce that is I can lasso these into basically

113
00:07:02,136 --> 00:07:05,486
a vertical stack like so. And these stacks keep everything distributed

114
00:07:05,518 --> 00:07:08,886
and organized. These are actually powered by Flexbox and

115
00:07:08,988 --> 00:07:12,374
you can see the controls for this. But we really try

116
00:07:12,412 --> 00:07:15,858
to streamline and simplify a lot of layout in CSS.

117
00:07:16,034 --> 00:07:19,366
And to show that, I'm going to right click this background to

118
00:07:19,388 --> 00:07:23,050
get rid of it. And I can basically,

119
00:07:23,200 --> 00:07:26,554
for instance, for this container, I'm just going to snap everything two the top

120
00:07:26,672 --> 00:07:30,314
to the left. I'm actually going to double click this bottom edge to auto size

121
00:07:30,352 --> 00:07:34,254
the content vertically and also in the horizontal direction as well. So these are

122
00:07:34,292 --> 00:07:37,646
some of the simpler features of

123
00:07:37,668 --> 00:07:41,440
the layout and we'll see some more interesting features in a little bit.

124
00:07:41,890 --> 00:07:45,200
Now, I have this element here,

125
00:07:45,810 --> 00:07:48,866
this container. I'm going to give it a name as well. I'm going to call

126
00:07:48,888 --> 00:07:52,494
it task list. And you can name elements just to keep your elements organized.

127
00:07:52,542 --> 00:07:56,500
And also this will come in handy later for the actual code generation part.

128
00:07:57,350 --> 00:08:00,566
These three tasks, they currently are kind of boring because they all say the same

129
00:08:00,588 --> 00:08:03,878
thing. I want them to be different and in fact I want the text to

130
00:08:03,884 --> 00:08:07,126
be variable. So what I will do is

131
00:08:07,228 --> 00:08:10,550
double click this again to drill into it. I'm going to right click this text

132
00:08:10,620 --> 00:08:14,054
and convert it to what's called a slot. And slots

133
00:08:14,102 --> 00:08:16,858
are kind of like poking a hole in the component. So from any one of

134
00:08:16,864 --> 00:08:20,494
these instances, I can select that slot and just change its text to make

135
00:08:20,532 --> 00:08:23,486
to do app show,

136
00:08:23,588 --> 00:08:26,766
demo, et cetera. But you can actually fill these up with

137
00:08:26,788 --> 00:08:28,830
arbitrary content, any number of elements.

138
00:08:29,250 --> 00:08:32,814
Now, that is almost it

139
00:08:32,852 --> 00:08:36,034
for my app. The only other thing I wanted to do is actually design these

140
00:08:36,072 --> 00:08:39,282
tasks in their different states. And this is just a very

141
00:08:39,416 --> 00:08:43,234
common thing for components in react. Certainly you want two

142
00:08:43,352 --> 00:08:46,814
make them appear differently in different circumstances.

143
00:08:46,942 --> 00:08:49,974
So instead of actually just

144
00:08:50,012 --> 00:08:53,670
keep double clicking into this task to keep editing it,

145
00:08:53,820 --> 00:08:57,026
I'm going to right click this and pop it out into its own new artboard

146
00:08:57,058 --> 00:09:01,110
on the side. And this is so I can edit it in isolation.

147
00:09:01,270 --> 00:09:04,870
If you're familiar with react storybook, it's the same general concept

148
00:09:04,950 --> 00:09:09,260
of just working on things by themselves. So here

149
00:09:09,790 --> 00:09:13,520
I'm going to start showing this concept of variance. And the way that

150
00:09:14,370 --> 00:09:18,106
state and variations of a component

151
00:09:18,218 --> 00:09:21,738
are all modeled in plasmic is through this unifying

152
00:09:21,754 --> 00:09:25,438
concept called variance. And I'm just going two, show this in action. So I'm

153
00:09:25,454 --> 00:09:29,060
going to create a variant group called states.

154
00:09:29,510 --> 00:09:33,314
And inside of states I'm going to create a variant for what

155
00:09:33,352 --> 00:09:36,290
my task looks like when it's marked completed.

156
00:09:36,870 --> 00:09:41,382
Maybe I want to design what it looks like when it's being edited and

157
00:09:41,436 --> 00:09:45,254
when it's marked high priority as well. So these are different states that

158
00:09:45,292 --> 00:09:48,626
this components can be in. And for this exercise,

159
00:09:48,658 --> 00:09:51,090
I'm just going to design out what the completed state is and I want there

160
00:09:51,100 --> 00:09:54,618
to be a checkmark in this checkbox. So I'm actually going

161
00:09:54,624 --> 00:09:58,506
to screen grab this checkmark from here because I just like the look

162
00:09:58,528 --> 00:10:01,580
of it. So I'm going to screen grab that like so.

163
00:10:02,290 --> 00:10:06,606
And back here I'm going to paste it in there and

164
00:10:06,708 --> 00:10:10,334
I'm going to zoom in actually to a pixel to adjust it.

165
00:10:10,532 --> 00:10:14,286
I can also use railayout for adjusting this. It doesn't really matter in this

166
00:10:14,308 --> 00:10:17,586
case. Now, after I do

167
00:10:17,608 --> 00:10:21,378
that, I can actually switch between my base appearance and my completed appearance. So you

168
00:10:21,384 --> 00:10:25,186
can notice that those changes that we made were actually just getting recorded specifically for

169
00:10:25,208 --> 00:10:28,020
the completed state and not affecting the base state.

170
00:10:28,410 --> 00:10:31,606
These are not different copies of the components that

171
00:10:31,628 --> 00:10:34,838
I'm looking at. The completed state is just a

172
00:10:34,844 --> 00:10:38,006
set of overrides or deltas on top of the base appearance. So to show you

173
00:10:38,028 --> 00:10:41,798
what I mean, I'm going to clone this artboard and have it sit

174
00:10:41,884 --> 00:10:44,538
side by side, and I'm going to set the bottom one to look at the

175
00:10:44,544 --> 00:10:47,994
base appearance and top one to look at the complete appearance. And if I

176
00:10:48,032 --> 00:10:51,258
make more changes to the base appearance, you can see those bleed through to

177
00:10:51,264 --> 00:10:55,166
the completed appearance, but any changes that I make specifically that

178
00:10:55,188 --> 00:10:58,430
are getting recorded to the completed appearance will stay within there.

179
00:10:58,500 --> 00:11:02,334
So as another example, I'm going to make this text strikeout and change

180
00:11:02,372 --> 00:11:05,700
its text color to be lighter as well.

181
00:11:06,710 --> 00:11:10,180
So you can just change any part of a component like this.

182
00:11:11,670 --> 00:11:15,026
Now, the thing about variants is that you can dynamically combine any number

183
00:11:15,048 --> 00:11:18,694
of them. So for instance, I'm going to introduce another variant here for

184
00:11:18,732 --> 00:11:22,294
my hover state. And hover is actually just a very

185
00:11:22,332 --> 00:11:26,146
common interaction, similar two pressed, et cetera. So there's

186
00:11:26,178 --> 00:11:29,400
like this special built in support for those states.

187
00:11:30,490 --> 00:11:33,654
And basically whenever I hover over any part of this component,

188
00:11:33,702 --> 00:11:37,434
I want this box here to become darker. So I'm just going to scroll down

189
00:11:37,472 --> 00:11:40,742
Yang Zhang its border color to become darker,

190
00:11:40,806 --> 00:11:44,126
like so now I

191
00:11:44,148 --> 00:11:48,494
can actually try this out in preview mode and

192
00:11:48,532 --> 00:11:51,246
I'm hovering over this thing. Okay, so that's close to what I want. But I

193
00:11:51,268 --> 00:11:54,994
actually realized another thing that I want is for there to be for

194
00:11:55,032 --> 00:11:58,674
this cursor to become a hand pointer as well. So I'm going to

195
00:11:58,712 --> 00:12:02,594
just set that here directly and

196
00:12:02,632 --> 00:12:05,620
preview again. Okay, so that's a lot better.

197
00:12:06,630 --> 00:12:10,306
And the thing about these variants is that they come with the component wherever

198
00:12:10,338 --> 00:12:13,206
it goes. So back in my main screen I can select any one of these

199
00:12:13,228 --> 00:12:16,760
instances. I can change it just for the purpose of mocking up

200
00:12:17,130 --> 00:12:20,778
into, for instance, the completed state. I can also preview this whole thing

201
00:12:20,864 --> 00:12:24,186
and just play with it. And it's a little nuanced, but you can see

202
00:12:24,208 --> 00:12:27,402
we're dynamically combining the completed state and the

203
00:12:27,456 --> 00:12:30,906
hover state here with this middle guy. So that is pretty

204
00:12:30,928 --> 00:12:34,346
much it for designing out this app. Maybe the last thing I'll do is tighten

205
00:12:34,378 --> 00:12:37,246
up the layout of the whole thing. So I'm going to set it to be

206
00:12:37,268 --> 00:12:40,926
a column layout and center everything and

207
00:12:41,028 --> 00:12:44,240
maybe add some padding to the top and bottom here,

208
00:12:45,410 --> 00:12:49,042
like so. And I'll turn this whole screen into

209
00:12:49,096 --> 00:12:52,866
a component as well, called to do app. So now my project has

210
00:12:52,888 --> 00:12:57,074
these two components. My to do app components, my task component from

211
00:12:57,112 --> 00:13:00,934
here. This part is the interesting part, which is how do we

212
00:13:00,972 --> 00:13:04,262
work with it from the code? So one way to get started is actually

213
00:13:04,316 --> 00:13:07,926
just through our code sandbox integration, and you can click this button and just

214
00:13:07,948 --> 00:13:11,530
spin up a sandbox. And you have basically this

215
00:13:11,680 --> 00:13:15,254
asset running as a standalone web app that you can directly

216
00:13:15,302 --> 00:13:18,602
start mucking with the code for. But more interesting

217
00:13:18,656 --> 00:13:22,154
for us is actually generating code into our own local code

218
00:13:22,192 --> 00:13:25,674
base. So there's this client that helps you with that.

219
00:13:25,712 --> 00:13:28,446
And I already have installed, so I'm going to skip the step. And the two

220
00:13:28,468 --> 00:13:31,758
other steps are basically running plasma init. And this is just a

221
00:13:31,764 --> 00:13:34,298
command you run every time you want to get started using plasma in a code

222
00:13:34,324 --> 00:13:38,580
base. So I have here in my terminal this

223
00:13:38,950 --> 00:13:42,626
basically, it's a blank create react app. And just to show you what that looks

224
00:13:42,648 --> 00:13:46,418
like, it's just a spinning logo. And I'm going

225
00:13:46,424 --> 00:13:49,558
to run that plasmic init command here. It's going to ask a bunch of questions

226
00:13:49,644 --> 00:13:52,360
that I'm going to answer with the defaults for.

227
00:13:53,770 --> 00:13:57,446
And the only other command here is this plasmic sync command, which is what

228
00:13:57,468 --> 00:13:59,580
actually pulls down the components from the project.

229
00:14:00,750 --> 00:14:02,570
So I'm going to go back to my terminal,

230
00:14:06,510 --> 00:14:09,626
and so now we have this to do app and task components synced down.

231
00:14:09,648 --> 00:14:12,826
And I'm going to pull up my code editor on

232
00:14:12,848 --> 00:14:17,086
the left and have my running app on the right. And just

233
00:14:17,108 --> 00:14:19,278
the first thing I'll do is just get things on the screen. So I'm going

234
00:14:19,284 --> 00:14:22,994
to replace all this boilerplate with just rendering this studio app like

235
00:14:23,032 --> 00:14:23,620
so.

236
00:14:26,710 --> 00:14:30,674
And now I should

237
00:14:30,712 --> 00:14:34,130
see exactly what I created in the design tool showing up as a

238
00:14:34,200 --> 00:14:37,460
pixel perfect component in my actual react app.

239
00:14:37,830 --> 00:14:41,640
From here, this is still the static mock data.

240
00:14:42,010 --> 00:14:45,398
So let's say I wanted to replace it with my real data.

241
00:14:45,564 --> 00:14:48,166
So what I can do is I'm going to double click this to do app

242
00:14:48,188 --> 00:14:51,462
to drill into it. This file has a lot of comments,

243
00:14:51,526 --> 00:14:55,274
but I'm going to get rid of these. So you can see that

244
00:14:55,312 --> 00:14:59,066
it's actually just a very simple file. This whole

245
00:14:59,088 --> 00:15:02,494
todo app Component is actually just a thin wrapper around the plasmic todo app

246
00:15:02,532 --> 00:15:05,694
component. So the plasmic Todo app component is this

247
00:15:05,732 --> 00:15:08,714
dumb presentational component that handles all the rendering.

248
00:15:08,762 --> 00:15:12,458
And this is actually generated by plasmic and is regenerated

249
00:15:12,474 --> 00:15:15,150
by plasmic. And we'll see that in a little bit.

250
00:15:15,220 --> 00:15:18,526
But Todo app itself, this whole file

251
00:15:18,558 --> 00:15:22,926
is just a skeleton starter that's generated

252
00:15:22,958 --> 00:15:26,142
for your convenience, but you can actually do whatever you want with this file.

253
00:15:26,286 --> 00:15:29,926
You as a developer own this file. So for instance, if I actually wanted

254
00:15:29,948 --> 00:15:33,558
to start introducing state or behavior to this, I can

255
00:15:33,564 --> 00:15:36,854
just do that here directly. So I'm going to start

256
00:15:36,892 --> 00:15:40,330
by adding some state for my tasks.

257
00:15:42,510 --> 00:15:46,234
And let's say my task objects are just simple js objects with

258
00:15:46,272 --> 00:15:49,978
can in property do stuff like. So I'm going to

259
00:15:49,984 --> 00:15:53,674
have three of them. And now I'm going to

260
00:15:53,792 --> 00:15:57,850
wire up this plasmic two do app components

261
00:15:58,010 --> 00:16:01,050
with the actual tasks.

262
00:16:01,130 --> 00:16:04,666
And to do that I'm going to reference one of the elements that I named

263
00:16:04,698 --> 00:16:07,618
previously. I'm going to reference it by name. So this task list, I'm going to

264
00:16:07,624 --> 00:16:11,294
replace all of its content with my own set of tasks.

265
00:16:11,422 --> 00:16:14,818
And to render these tasks I'm going

266
00:16:14,824 --> 00:16:17,910
to use the other component that we synced down, this task components.

267
00:16:18,250 --> 00:16:23,574
So now I have my

268
00:16:23,612 --> 00:16:26,774
own data showing up in the app. And so this is how you can work

269
00:16:26,812 --> 00:16:30,470
with these plasmic components,

270
00:16:30,630 --> 00:16:33,914
is you can just flexibly wire up any props that you want on

271
00:16:33,952 --> 00:16:35,420
them. Now,

272
00:16:38,110 --> 00:16:42,182
the real highlight of plasmic is that it's not just a one time code export,

273
00:16:42,246 --> 00:16:45,822
but you can actually go back into the editor and make changes to your design

274
00:16:45,956 --> 00:16:50,026
and those will be kept in sync with the code. So I'm

275
00:16:50,058 --> 00:16:53,726
going to run plasmic watch, which is just this mode where it'll live stream any

276
00:16:53,748 --> 00:16:57,058
edits I make in the editor into my code base. And I'm going

277
00:16:57,064 --> 00:17:00,354
to have the running app on the right and

278
00:17:00,392 --> 00:17:03,586
the editor on the left, like so.

279
00:17:03,768 --> 00:17:06,978
Actually don't have a ton of real estate here, so it's going to feel a

280
00:17:06,984 --> 00:17:10,806
little squish on the right. But now let's say I wanted to make some

281
00:17:10,988 --> 00:17:14,514
violent changes. Two, my layout. So instead of this vertical

282
00:17:14,562 --> 00:17:17,478
list, let's say I want it to be a set of tiles. So I'm going

283
00:17:17,484 --> 00:17:20,290
to double click this component to start editing it again. I'm going to make it

284
00:17:20,300 --> 00:17:23,754
look boxier, something like that. I'm also going to start

285
00:17:23,792 --> 00:17:27,254
applying some relay, but to this so that it's a row top aligned

286
00:17:27,382 --> 00:17:30,426
and maybe with some padding all around. I'm going to take

287
00:17:30,448 --> 00:17:33,578
this checkbox and pop it out of its place so it's free floating and I'm

288
00:17:33,594 --> 00:17:36,654
going to drag it down to the bottom right of

289
00:17:36,692 --> 00:17:40,174
the task and I'm going to pin it to the bottom

290
00:17:40,212 --> 00:17:44,126
right, actually, like so. And that's it

291
00:17:44,148 --> 00:17:47,026
for what I want. Two, change my tasks to look like now, this is still

292
00:17:47,048 --> 00:17:50,206
a vertical list, and I want this to be a set of tiles,

293
00:17:50,398 --> 00:17:53,938
like rows of tiles. So I'm going

294
00:17:53,944 --> 00:17:57,518
to change this thing to go from column to row. Now everything is spilling

295
00:17:57,534 --> 00:18:00,546
over on the right, but I'm going to turn on wrapping so that things wrap

296
00:18:00,578 --> 00:18:03,846
around and I'm going to mix it fixed size so

297
00:18:03,868 --> 00:18:07,206
that's actually centered in the screen. It's a little hard

298
00:18:07,228 --> 00:18:10,438
for me to tell apart the different tiles right now. So I'm also going

299
00:18:10,444 --> 00:18:13,978
to introduce some gap in the vertical direction and also

300
00:18:14,064 --> 00:18:17,610
the horizontal direction. So you can see some of the fancier features at play

301
00:18:17,680 --> 00:18:21,854
with the layout engine here. And if you think about how to implement things like

302
00:18:22,052 --> 00:18:26,094
a cross browser gap in a way that

303
00:18:26,132 --> 00:18:29,566
is friendly with things like

304
00:18:29,588 --> 00:18:33,354
wrapping and doesn't introduce selector specificity

305
00:18:33,402 --> 00:18:36,946
issues, it's actually quite annoying to do.

306
00:18:37,048 --> 00:18:41,058
So. These are examples of things that are just very common when it

307
00:18:41,064 --> 00:18:44,594
comes to layout tasks that plasma tries to make as simple

308
00:18:44,632 --> 00:18:47,510
as possible. So anyway, you could see that as I was making those changes,

309
00:18:47,580 --> 00:18:51,158
these were getting live streamed into the actual app.

310
00:18:51,324 --> 00:18:55,554
So that is pretty much it for this quick tour of plasmic

311
00:18:55,602 --> 00:18:59,058
and what it's all about. So now I'd

312
00:18:59,074 --> 00:19:01,706
like to pull back the curtain a little bit and talk about some of the

313
00:19:01,728 --> 00:19:05,414
challenges that went into building this thing, including both technical challenges

314
00:19:05,462 --> 00:19:09,066
and product challenges. So the first one I'll start with is

315
00:19:09,248 --> 00:19:13,194
just the state management infrastructure. So this is a

316
00:19:13,232 --> 00:19:17,142
very sprawling client application with a lot of complex state,

317
00:19:17,296 --> 00:19:20,958
and it's state that is constantly changing. And there's also a

318
00:19:20,964 --> 00:19:24,626
lot of surfaces that are reflecting out various parts of that state.

319
00:19:24,808 --> 00:19:28,926
And there are certain operations, certain interactions like drag

320
00:19:28,958 --> 00:19:33,106
operations, where if you want it to be smooth, which means if

321
00:19:33,128 --> 00:19:36,414
you're shooting for, let's say, 60 frames per second, then you typically

322
00:19:36,462 --> 00:19:39,746
have a frame budget of around 16 milliseconds. And if you

323
00:19:39,768 --> 00:19:42,726
want to make sure you're not busting that budget, then what that means is you

324
00:19:42,748 --> 00:19:45,046
just want to make sure you're doing the minimum amount of work that you can

325
00:19:45,068 --> 00:19:48,906
get away with per frame. And so this is where a lot

326
00:19:48,928 --> 00:19:52,266
of tools like state management frameworks come into

327
00:19:52,288 --> 00:19:55,866
play. They're all about minimizing in various ways that

328
00:19:55,888 --> 00:19:59,206
are more or less ergonomic for developers,

329
00:19:59,318 --> 00:20:02,814
just minimizing the amount of work that react does,

330
00:20:02,852 --> 00:20:05,710
the amount of rerendering that you do in response, two state updates.

331
00:20:06,770 --> 00:20:10,890
But what makes this application tricky is the combination of latency

332
00:20:10,970 --> 00:20:14,240
with scale. So to show what I mean,

333
00:20:15,350 --> 00:20:19,278
this example here, we have a canvas with these three artboards,

334
00:20:19,294 --> 00:20:22,610
which is a pretty simple project. But if you imagine a project

335
00:20:22,680 --> 00:20:25,858
with hundreds of artboards on the screen, then things get

336
00:20:25,864 --> 00:20:26,930
a lot diceier.

337
00:20:30,330 --> 00:20:34,310
What you don't want to do is to simply naively just

338
00:20:34,460 --> 00:20:38,246
make a synchronous update to

339
00:20:38,268 --> 00:20:41,658
your state and then have everything rerender as a result. So an

340
00:20:41,664 --> 00:20:44,714
example of a thing we do instead is we break up our updates into small

341
00:20:44,752 --> 00:20:48,774
chunks so that we can incrementally and lazily evaluate

342
00:20:48,822 --> 00:20:51,440
these updates, these rerenderings, I should say,

343
00:20:55,170 --> 00:20:59,120
we can actually see this in action. So as I am

344
00:21:00,530 --> 00:21:04,820
dragging around this checkbox here, you can notice that

345
00:21:05,350 --> 00:21:08,542
if you watch the other artboards, there's a slight

346
00:21:08,606 --> 00:21:12,194
delay and lag between when I moving

347
00:21:12,232 --> 00:21:16,142
this one around and when these others update. And that's actually an artifact

348
00:21:16,206 --> 00:21:19,922
of our scheduler in play. So there's prioritization

349
00:21:20,066 --> 00:21:23,666
of these different artboards where the one that you're manipulating directly is highest

350
00:21:23,698 --> 00:21:26,918
priority. The things around you are lower priority, and the

351
00:21:26,924 --> 00:21:30,326
things off screen are lower priority still. So that's

352
00:21:30,358 --> 00:21:34,634
one example of a way we actually break up some of the work here and

353
00:21:34,672 --> 00:21:37,180
then actually prioritize and schedule them.

354
00:21:37,950 --> 00:21:41,706
Another imported feature of plasma is one

355
00:21:41,728 --> 00:21:45,470
that I haven't shown in this demo, is code components. And this is about

356
00:21:45,620 --> 00:21:48,798
the ability to bring in your existing react components, maybe from

357
00:21:48,804 --> 00:21:52,490
your own code base, maybe from a library like material UI. And there's a

358
00:21:52,500 --> 00:21:56,206
lot of challenges here, such as simply making it easy for users

359
00:21:56,238 --> 00:22:00,226
to bundle up the components that

360
00:22:00,248 --> 00:22:05,058
they care about without becoming experts in webpack or

361
00:22:05,224 --> 00:22:08,626
just dynamically loading the modules into the runtime,

362
00:22:08,818 --> 00:22:12,374
because you're essentially injecting this foreign third

363
00:22:12,412 --> 00:22:15,766
party code into the canvas, and you want to do

364
00:22:15,788 --> 00:22:18,758
that in a secure and isolated way. But,

365
00:22:18,844 --> 00:22:22,790
okay, so even once you have your material UI button showing up in the canvas,

366
00:22:22,950 --> 00:22:27,046
how do you actually configure it and work with it? So that's where plasmax

367
00:22:27,078 --> 00:22:30,538
language tooling comes in. And this is basically about crawling your

368
00:22:30,544 --> 00:22:34,522
code base. Two, find the components available in it and reflecting out their interfaces,

369
00:22:34,666 --> 00:22:37,658
whether it's documented using typescript or prop types.

370
00:22:37,754 --> 00:22:41,278
And this can be nuanced because there are some props that you expect to

371
00:22:41,284 --> 00:22:44,318
show up as controls in the right hand panel, for instance, various knobs.

372
00:22:44,494 --> 00:22:47,906
And there's other props, like children props, or function as

373
00:22:47,928 --> 00:22:51,422
child props, where you expect to directly manipulate them on the canvas

374
00:22:51,566 --> 00:22:55,026
through drag and drop. On top

375
00:22:55,048 --> 00:22:58,678
of all this, there's these additional problems that I haven't talked about,

376
00:22:58,764 --> 00:23:02,066
like just harvesting out examples of how to use the components,

377
00:23:02,098 --> 00:23:06,114
because oftentimes that's also very well documented in code bases or documentation

378
00:23:06,162 --> 00:23:09,930
as well. There's also a slew of

379
00:23:10,000 --> 00:23:13,398
product challenges. So here are a couple. One is about distilling

380
00:23:13,414 --> 00:23:16,646
layout into a small set of intuitive controls.

381
00:23:16,838 --> 00:23:20,378
CSS layout is notorious for being hard to use,

382
00:23:20,464 --> 00:23:24,318
and layout is just such a pervasive aspect of

383
00:23:24,484 --> 00:23:27,994
creating uis that plasmic really focuses on trying to streamline

384
00:23:28,042 --> 00:23:31,118
that as much as possible. CSS comes with

385
00:23:31,124 --> 00:23:35,250
a lot of different concepts, both legacy and modern, and different overlapping ways

386
00:23:35,320 --> 00:23:38,674
of achieving the same thing, but with different trade offs and

387
00:23:38,712 --> 00:23:42,722
subtleties between them. And to this day, I still spend

388
00:23:42,776 --> 00:23:46,194
time debugging which props

389
00:23:46,242 --> 00:23:50,066
affect the declared height of can element, so that percentage

390
00:23:50,098 --> 00:23:53,474
heights respect that and just other minutiae

391
00:23:53,522 --> 00:23:57,554
of CSS. And this is actually really infuriating,

392
00:23:57,602 --> 00:24:01,710
because the answer changes in browsers over time. So plasmic

393
00:24:01,730 --> 00:24:05,846
tries to unify and simplify a lot of these concepts and distill

394
00:24:05,878 --> 00:24:08,986
them into simpler controls that cover the most common cases and then give you

395
00:24:09,008 --> 00:24:12,326
escape hatches to actually drop down and exercise full control over your flex

396
00:24:12,358 --> 00:24:14,400
basis, et cetera, if you really care to.

397
00:24:15,250 --> 00:24:18,398
The last aspect is something I alluded to in the

398
00:24:18,404 --> 00:24:22,014
middle of the demo, but it's the

399
00:24:22,052 --> 00:24:25,650
ability to actually bring in your

400
00:24:25,800 --> 00:24:29,394
designs from other design tools. And there's a lot of challenges here,

401
00:24:29,432 --> 00:24:33,038
actually just around mapping the concepts

402
00:24:33,134 --> 00:24:36,678
across these different domains. So this

403
00:24:36,684 --> 00:24:40,850
is about taking, for instance, Figma's document representation.

404
00:24:41,010 --> 00:24:45,526
And that actually is something that is very

405
00:24:45,548 --> 00:24:48,682
rooted in graphic design backgrounds. So you have concepts like

406
00:24:48,736 --> 00:24:53,226
layers and layer masks and blend modes. And in

407
00:24:53,248 --> 00:24:56,410
CSS, for instance, you have inner and outer shadows.

408
00:24:56,990 --> 00:25:00,960
In Figma, you have centered borders. So reconciling these

409
00:25:01,330 --> 00:25:04,960
impedance mismatches is a big part of

410
00:25:05,650 --> 00:25:09,246
the product challenge there. And the

411
00:25:09,268 --> 00:25:12,746
goal is really to automate

412
00:25:12,778 --> 00:25:16,446
away and do as much as possible of the grunt work,

413
00:25:16,548 --> 00:25:20,114
this rote work of translating designs into web

414
00:25:20,152 --> 00:25:23,762
standards. Code integration is,

415
00:25:23,816 --> 00:25:27,654
I think, the most important challenge for plasmic. If you think about

416
00:25:27,692 --> 00:25:31,654
what is natural for visual direct manipulation, and also

417
00:25:31,692 --> 00:25:35,158
what's natural for expressing code, we're essentially trying to marry the

418
00:25:35,164 --> 00:25:38,814
best of both worlds, and we're trying to find the most natural

419
00:25:38,882 --> 00:25:42,230
and flexible interface for doing that. This flexibility

420
00:25:42,310 --> 00:25:46,022
is there for practical reasons,

421
00:25:46,086 --> 00:25:49,594
right? Just at the end of the day, I need to instrument this element with

422
00:25:49,632 --> 00:25:53,310
a certain prop or event handler or behavior.

423
00:25:54,770 --> 00:25:57,946
But there's also what I'll call, quote unquote, aesthetic reasons

424
00:25:57,978 --> 00:26:01,754
as well. So I want to control what my component API

425
00:26:01,802 --> 00:26:05,274
looks like. In this example, I have this task component,

426
00:26:05,322 --> 00:26:08,162
and it takes the children for the content.

427
00:26:08,296 --> 00:26:11,378
But maybe that's not the interface I want. Maybe I want this task component to

428
00:26:11,384 --> 00:26:15,186
take a task entry data object, right? And then internally it

429
00:26:15,208 --> 00:26:18,518
can derive what content it should render, what state it should render in,

430
00:26:18,604 --> 00:26:21,846
et cetera, from that task entry object. So this is what

431
00:26:21,868 --> 00:26:25,846
I mean by control over the component API. So our thinking is

432
00:26:25,868 --> 00:26:29,126
always rooted in just giving developers as

433
00:26:29,148 --> 00:26:32,454
much flexibility as possible so that the code generation

434
00:26:32,502 --> 00:26:34,570
is only there to help and never to hinder.

435
00:26:36,190 --> 00:26:39,386
So we use plasma for building plasmic. And in terms of the impact on our

436
00:26:39,408 --> 00:26:42,986
own workflow, there's a few things I want to call out. So the first is

437
00:26:43,008 --> 00:26:46,446
around this design first mentality, which is about forcing you to

438
00:26:46,468 --> 00:26:49,738
think about the end goal, the product and the experience that you're

439
00:26:49,754 --> 00:26:53,482
going after, and then filling in the code in service of that end goal.

440
00:26:53,626 --> 00:26:56,962
So this is really nice as a top down approach, right? Making sure you're building

441
00:26:57,016 --> 00:27:00,210
the right thing. And bottom up approaches definitely have their place,

442
00:27:00,280 --> 00:27:03,950
especially in projects with high technical risk.

443
00:27:04,030 --> 00:27:07,910
But it can also be more bumbling for other kinds of projects.

444
00:27:08,970 --> 00:27:12,454
The second impact on our workflow is if you are

445
00:27:12,492 --> 00:27:15,926
lucky enough to be working with a technical designer who can wield something

446
00:27:15,948 --> 00:27:19,494
like plasmic, then there's just something very magical about running

447
00:27:19,532 --> 00:27:22,778
plasma sync and then seeing a nicer version of your landing page show up in

448
00:27:22,784 --> 00:27:26,234
your code base, which it's definitely

449
00:27:26,352 --> 00:27:29,938
a direction that we want to explore a lot more is broadening

450
00:27:29,974 --> 00:27:33,614
this tool to make it more accessible to thing

451
00:27:33,652 --> 00:27:38,174
I'll call out. In terms of workflow, impact is just

452
00:27:38,292 --> 00:27:41,706
the elimination of an entire class of visual regression

453
00:27:41,738 --> 00:27:44,958
tests and manual QA tools. So, for instance,

454
00:27:45,054 --> 00:27:48,754
we have these storybook plugins that would help

455
00:27:48,792 --> 00:27:52,254
you compare your implemented components with your designs.

456
00:27:52,382 --> 00:27:55,474
And that's obviated by the fact

457
00:27:55,512 --> 00:27:59,254
that this tool is essentially a declarative language for you

458
00:27:59,292 --> 00:28:03,160
two. What you see is exactly what you get in the final product.

459
00:28:04,570 --> 00:28:08,054
Anyway, that's all I want to share about plasmic. It's still really early days

460
00:28:08,092 --> 00:28:11,640
for us, but also for a lot of the tools in this camp.

461
00:28:13,290 --> 00:28:16,358
I'm actually really excited about this entire category. I think there's just a

462
00:28:16,364 --> 00:28:19,918
lot of innovation happening that I think could really transform what

463
00:28:19,964 --> 00:28:23,438
front end development looks like. So I definitely encourage you to check out

464
00:28:23,444 --> 00:28:26,426
these tools. We'll also be sharing our progress on Twitter.

465
00:28:26,538 --> 00:28:30,314
And the last thing I will call out is that we are hiring.

466
00:28:30,442 --> 00:28:34,174
We're a tiny team of five people total, three on engineering. So if these

467
00:28:34,212 --> 00:28:36,620
challenges sound like fun, then let us know.

