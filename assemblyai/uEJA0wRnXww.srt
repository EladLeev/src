1
00:00:30,770 --> 00:00:35,026
I'm excited today to talk about policies and contracts in distributed

2
00:00:35,058 --> 00:00:38,834
systems. My name is Prathamesh and I work as developer evangelist

3
00:00:38,882 --> 00:00:42,454
at last nine. This is my twitter handle. You can find me

4
00:00:42,492 --> 00:00:46,434
posting interesting things about distributed systems, time series,

5
00:00:46,482 --> 00:00:49,670
databases and so on. So if you want to follow,

6
00:00:49,740 --> 00:00:53,146
go ahead. As a software developer or engineer,

7
00:00:53,258 --> 00:00:56,478
we want to write code. We want to fix all the bugs. We want

8
00:00:56,484 --> 00:00:59,614
to ideally write code which is bug free right? We don't want

9
00:00:59,652 --> 00:01:03,582
to be the author who basically writes bugs every

10
00:01:03,636 --> 00:01:07,506
time. We want to use all the latest and greatest tools that is the

11
00:01:07,528 --> 00:01:11,154
North Star. If there is anything new that is coming out

12
00:01:11,192 --> 00:01:14,514
in the market, I will definitely want to try that,

13
00:01:14,632 --> 00:01:18,114
be it copilot or even a chat jeopardy for that matter.

14
00:01:18,232 --> 00:01:21,426
I want to integrate with best in class tools in my development

15
00:01:21,458 --> 00:01:25,526
workflow so that I get the best that is out there. That is

16
00:01:25,548 --> 00:01:29,038
my aim. But is it always possible? As a DevOps

17
00:01:29,074 --> 00:01:32,886
engineer, I want to make sure that my infrastructure scales.

18
00:01:32,998 --> 00:01:36,534
I want to make sure that the application utilizes resources

19
00:01:36,582 --> 00:01:40,306
efficiently. There are no extra resources that are just hanging

20
00:01:40,358 --> 00:01:44,238
and costing me money. I want to make sure that my cost is

21
00:01:44,324 --> 00:01:48,094
always optimized and under my control. It is not

22
00:01:48,212 --> 00:01:51,822
exploding massively unnecessarily. All of these

23
00:01:51,876 --> 00:01:55,294
is something that I will always strive for. But as

24
00:01:55,332 --> 00:01:59,230
the ad software engineers also or even DevOps engineers,

25
00:01:59,310 --> 00:02:02,974
it is possible or not is the question. As a team lead engineering

26
00:02:03,022 --> 00:02:07,330
manager, DevOps lead I have similar objectives.

27
00:02:07,490 --> 00:02:10,982
I want to make sure that the deadlines are met. The features work

28
00:02:11,036 --> 00:02:14,422
as expected within a performance criteria that

29
00:02:14,476 --> 00:02:17,894
basically caters for a customer experience by

30
00:02:17,932 --> 00:02:21,098
which they are satisfied. I want to make sure that my code

31
00:02:21,264 --> 00:02:24,602
and the infrastructure that is running the application is

32
00:02:24,656 --> 00:02:28,234
performant enough. The tech debt is not going out of control so

33
00:02:28,272 --> 00:02:32,154
that I don't want to cater for that when

34
00:02:32,192 --> 00:02:36,174
I really want to ship some features and at the same time I

35
00:02:36,212 --> 00:02:39,806
want to make sure that my team is motivated enough because otherwise there

36
00:02:39,828 --> 00:02:43,930
is no use of everything else if my team is not willing to

37
00:02:44,100 --> 00:02:47,474
work very happily with rest of the team

38
00:02:47,512 --> 00:02:50,994
members. All of these are my objectives, but they are also

39
00:02:51,032 --> 00:02:54,706
not always possible. As a product leader, I want

40
00:02:54,728 --> 00:02:57,682
to make sure that the team velocity is not slowing down.

41
00:02:57,816 --> 00:03:01,618
The external customer commitments, service level agreements

42
00:03:01,714 --> 00:03:05,394
are getting met. The product is getting adopted

43
00:03:05,442 --> 00:03:09,226
is also one of the constraint that I would like to put on my team.

44
00:03:09,408 --> 00:03:13,702
At the same time, the feedback from customers and their expectations

45
00:03:13,846 --> 00:03:17,034
are considered by my products and engineering teams and are

46
00:03:17,072 --> 00:03:20,746
getting incorporated so that my customers are happy. This is

47
00:03:20,768 --> 00:03:24,778
all I want, but all of these are constraints

48
00:03:24,874 --> 00:03:28,542
and sometimes they always run into each other. For example,

49
00:03:28,676 --> 00:03:31,934
if you want to ship a feature. But the engineering team is

50
00:03:31,972 --> 00:03:35,886
struggling with techtech from last print, their deliverables

51
00:03:35,918 --> 00:03:39,394
in this print will get affected. At the same time, if there is

52
00:03:39,432 --> 00:03:43,406
not enough marketing effort from the product marketing

53
00:03:43,438 --> 00:03:47,622
side or the sales side, then even if we have the best product

54
00:03:47,756 --> 00:03:51,046
that is out there, we won't have any customers who

55
00:03:51,068 --> 00:03:54,598
are willing to use it. With all of these and human

56
00:03:54,684 --> 00:03:58,114
contracts involved, we always have these knock

57
00:03:58,162 --> 00:04:02,090
star objectives, but they're not always possible because

58
00:04:02,240 --> 00:04:05,094
they always run into each other as contracts.

59
00:04:05,222 --> 00:04:08,826
Rasmussen long time ago developed a model

60
00:04:08,928 --> 00:04:12,394
of theory of constraints and that describes very

61
00:04:12,432 --> 00:04:15,754
nicely how accidents happen. Basically there are three

62
00:04:15,792 --> 00:04:19,406
axis to every software or any other system as well,

63
00:04:19,508 --> 00:04:23,966
where on one side you have the boundary of economic failure,

64
00:04:24,158 --> 00:04:27,758
beyond which, if you go, there are chances that your company will shut

65
00:04:27,774 --> 00:04:31,490
down, right? If we keep increasing the resources in our

66
00:04:31,560 --> 00:04:35,234
organization, then our cloud can go out

67
00:04:35,272 --> 00:04:38,806
of control and there is a chance that we'll have to shut down the

68
00:04:38,828 --> 00:04:42,502
company. A very trivial example, but you get an idea about

69
00:04:42,556 --> 00:04:45,974
how the boundary of economic failure works. At the same

70
00:04:46,012 --> 00:04:49,214
time, there is a boundary of unacceptable workload.

71
00:04:49,362 --> 00:04:52,154
I have few team members in my team,

72
00:04:52,272 --> 00:04:56,410
but if I continue to ask them to work every

73
00:04:56,480 --> 00:04:59,786
day, 24 x seven, then sometime they will say that,

74
00:04:59,808 --> 00:05:03,310
okay, I want to just leave now. I don't want to work here anymore because

75
00:05:03,460 --> 00:05:06,718
the workload is completely unacceptable. So there is a

76
00:05:06,724 --> 00:05:10,634
threshold up to which the workload can be acceptable and beyond

77
00:05:10,682 --> 00:05:13,858
which it is not sustainable. At the same time,

78
00:05:13,944 --> 00:05:17,662
there is also experience or performance

79
00:05:17,726 --> 00:05:20,802
expectation boundary. My application

80
00:05:20,936 --> 00:05:24,830
should load within a second. If it is a payment transaction,

81
00:05:24,910 --> 00:05:28,642
then it should always succeed. Or if it does not succeed,

82
00:05:28,706 --> 00:05:32,182
then at least my money should not get hanging in between.

83
00:05:32,236 --> 00:05:36,450
It should get credited to my account again. So there is a performance

84
00:05:36,610 --> 00:05:40,474
or safety regulations boundary as well. And the point of

85
00:05:40,512 --> 00:05:43,946
equilibrium should be in the middle in this

86
00:05:43,968 --> 00:05:48,218
circle, right? If you try to push it from one side, let's say I

87
00:05:48,304 --> 00:05:51,722
keep increasing the workload from the

88
00:05:51,856 --> 00:05:55,854
bottom side, then the gradient or my point of equilibrium will

89
00:05:55,892 --> 00:05:59,886
keep moving to an edge and there is always a boundary of

90
00:05:59,908 --> 00:06:04,106
failure, beyond which if I try to push harder, then accidents

91
00:06:04,138 --> 00:06:07,826
can happen. And this is applicable to all three axis. So if I try

92
00:06:07,848 --> 00:06:11,234
to push any one axis forward,

93
00:06:11,432 --> 00:06:15,302
there is a chance that the accident can happen. If I keep pushing it,

94
00:06:15,356 --> 00:06:18,226
we have to. As software leaders, sres,

95
00:06:18,338 --> 00:06:21,794
DevOps and people who manage these software

96
00:06:21,842 --> 00:06:25,430
systems, we want to make sure that this boundary of

97
00:06:25,580 --> 00:06:29,034
acceptable behavior is not broken. We are always

98
00:06:29,152 --> 00:06:32,874
within the constraint that the gradient is

99
00:06:32,912 --> 00:06:36,614
not completely out of the red boundary of accident,

100
00:06:36,742 --> 00:06:40,066
and Rasmussen basically developed this for control theory,

101
00:06:40,198 --> 00:06:43,306
but it is equally applicable to today's modern

102
00:06:43,338 --> 00:06:47,390
software systems. If we don't follow this boundary and

103
00:06:47,540 --> 00:06:50,490
we try keep pushing harder, then boom,

104
00:06:50,570 --> 00:06:54,542
we run into accidents. That's where we see misprints.

105
00:06:54,686 --> 00:06:58,530
We see efforts that is not aligned with rest of the organization.

106
00:06:58,950 --> 00:07:02,690
We see tech debt increasing and effectively causing

107
00:07:03,030 --> 00:07:06,630
more failures. In the long term, failures will happen

108
00:07:06,700 --> 00:07:11,046
anyways, but they will essentially happen because each

109
00:07:11,068 --> 00:07:14,322
and every stakeholder in an organization has a limit.

110
00:07:14,386 --> 00:07:17,554
They have a boundary beyond which things cannot be pushed.

111
00:07:17,682 --> 00:07:20,822
Either. It can be an economic boundary, or a workload

112
00:07:20,886 --> 00:07:24,378
related boundary, or a performance related boundary. As we saw in

113
00:07:24,384 --> 00:07:27,830
the Rasmosan's model. If one of the stakeholders pushes

114
00:07:27,910 --> 00:07:32,054
the boundaries too much, then accidents can happen. Business pushing

115
00:07:32,102 --> 00:07:35,674
for feature rollouts instead of worrying about detect debt

116
00:07:35,722 --> 00:07:39,050
is one of the example of this scenario.

117
00:07:39,210 --> 00:07:42,154
Whereas engineering can also keep chasing perfection,

118
00:07:42,282 --> 00:07:45,486
they can keep looking for the best solution,

119
00:07:45,598 --> 00:07:48,930
best product out there instead of shipping what they have,

120
00:07:49,000 --> 00:07:52,802
which eventually causes problems with the velocity of the

121
00:07:52,856 --> 00:07:56,082
software as well as the delivery consistency.

122
00:07:56,226 --> 00:07:59,222
So these failures will happen, if we don't mind,

123
00:07:59,356 --> 00:08:02,822
for these constraints and boundaries. Boundaries are nothing

124
00:08:02,876 --> 00:08:06,146
but something which limits or puts

125
00:08:06,178 --> 00:08:10,386
an extent to a criteria. It fixes a threshold

126
00:08:10,498 --> 00:08:13,946
for the objective that we are trying to achieve. There can

127
00:08:13,968 --> 00:08:16,842
be team constraints that I only have five people.

128
00:08:16,976 --> 00:08:20,890
One of my team member is on leave for a personal reason. That person

129
00:08:20,960 --> 00:08:24,190
has all the access to my AWS cloud account,

130
00:08:24,260 --> 00:08:28,286
right? And I'm a startup, so I don't have a lot of people

131
00:08:28,468 --> 00:08:32,222
to manage all of these things. Quality of work can also be another

132
00:08:32,276 --> 00:08:36,542
boundary. We cannot have a very unoptimized

133
00:08:36,606 --> 00:08:40,594
code base which keeps failing always time

134
00:08:40,712 --> 00:08:44,082
and time to delivery or time to market is also one more

135
00:08:44,136 --> 00:08:47,846
contracts that everybody is always concerned about. There are

136
00:08:47,868 --> 00:08:50,930
other constraints and boundaries as well, such as perfection,

137
00:08:51,090 --> 00:08:54,598
cost, pricing of the software, time to market,

138
00:08:54,684 --> 00:08:58,246
and so on. These are all examples of boundaries in

139
00:08:58,268 --> 00:09:01,798
modern software systems. Now how we deal with boundaries

140
00:09:01,894 --> 00:09:05,606
is via negotiations. People say that we'll be able to release

141
00:09:05,638 --> 00:09:09,626
this, but there can be few bugs. Are you okay with this?

142
00:09:09,808 --> 00:09:12,806
We will be able to ship 80% of the functionality,

143
00:09:12,918 --> 00:09:16,378
but can be certain bugs can be present. Like the

144
00:09:16,384 --> 00:09:19,742
way I am doing this talk. Mark had told

145
00:09:19,796 --> 00:09:23,246
us that your video should be in by 20 eigth and

146
00:09:23,268 --> 00:09:26,706
I'm making sure that I'm submitting the video recording the

147
00:09:26,728 --> 00:09:30,334
talk before 20th April because otherwise I'll break my promise

148
00:09:30,382 --> 00:09:34,174
to him. We can do certain deployments, but our AWS

149
00:09:34,222 --> 00:09:37,714
bill will increase for two three weeks. When we will get time

150
00:09:37,752 --> 00:09:41,458
for optimization. We'll be able to do the optimization, but until then we'll

151
00:09:41,474 --> 00:09:45,206
have to bear the but of increased bill. Things like we'll be able to

152
00:09:45,228 --> 00:09:49,602
roll out to certain customers, but teams will have to work overnight and weekend.

153
00:09:49,746 --> 00:09:52,986
They have already worked previous weekends as well. So do you want

154
00:09:53,008 --> 00:09:56,202
to really do it? And so on. These kind of negotiations we are used

155
00:09:56,256 --> 00:10:00,738
to doing in our day to day job. These negotiations

156
00:10:00,934 --> 00:10:04,462
effectively leads to contracts, which is a written or

157
00:10:04,516 --> 00:10:08,154
spoken enforceable agreement. When we negotiate

158
00:10:08,202 --> 00:10:11,934
something with our own colleagues or within our own

159
00:10:11,972 --> 00:10:14,660
organizations, and even with outside customers,

160
00:10:15,110 --> 00:10:18,962
we arrive at a contracts that

161
00:10:19,096 --> 00:10:22,946
all of us depend on and that all of us follow. The delivery will

162
00:10:22,968 --> 00:10:26,494
not happen today, but it will happen on Monday at 11:00

163
00:10:26,542 --> 00:10:30,166
a.m. Once we clarify on this contract, then it becomes an

164
00:10:30,188 --> 00:10:34,230
agreement between the two parties and then we follow that agreement

165
00:10:34,890 --> 00:10:38,506
as and when we go forward. If we think about how

166
00:10:38,528 --> 00:10:41,702
it relates to a programming concept,

167
00:10:41,846 --> 00:10:44,934
I would like to correlate it with API

168
00:10:44,982 --> 00:10:48,790
interface. When we talk about APIs and their documentation,

169
00:10:48,870 --> 00:10:52,446
it is nothing but a return agreement about what the

170
00:10:52,468 --> 00:10:56,574
endpoint will return promises. Let's take an example of

171
00:10:56,692 --> 00:11:00,474
the user's endpoint. So if the user's endpoint

172
00:11:00,522 --> 00:11:04,530
is returning HTTP status 20 one, in case of success

173
00:11:04,600 --> 00:11:08,718
scenario, it is returning bad request in case of when the request

174
00:11:08,814 --> 00:11:12,386
really does not have the correct input, and then it can have

175
00:11:12,408 --> 00:11:15,634
different statuses for an unauthorized request, or even when

176
00:11:15,672 --> 00:11:19,014
the resource is not found. This is the contract or this

177
00:11:19,052 --> 00:11:22,486
is the documentation of our user's endpoint, which can

178
00:11:22,508 --> 00:11:26,294
be publicly documented and given to the rest of the team

179
00:11:26,332 --> 00:11:30,234
members to follow so that they can work according to

180
00:11:30,272 --> 00:11:33,466
this agreement when they develop rest of the code that is

181
00:11:33,488 --> 00:11:37,302
consuming this particular endpoint. Now, when we talk about these programmable

182
00:11:37,366 --> 00:11:41,322
interfaces, what is the equivalent of that

183
00:11:41,376 --> 00:11:45,262
in our day to day life? Right? That is the runtime interfaces which

184
00:11:45,316 --> 00:11:49,118
we deal with every day when we deal with other people.

185
00:11:49,284 --> 00:11:53,262
It is a written agreement about how the endpoint will behave

186
00:11:53,326 --> 00:11:57,454
at runtime. It can be similar to the uptime

187
00:11:57,502 --> 00:12:00,898
of the endpoint, or this particular API is 90%

188
00:12:01,064 --> 00:12:04,786
if you expect the consumer of this particular

189
00:12:04,888 --> 00:12:08,658
service that the post users endpoint should always succeed.

190
00:12:08,754 --> 00:12:12,374
No, that is not possible because the agreement is

191
00:12:12,412 --> 00:12:15,222
that it is only available 90% of the time.

192
00:12:15,356 --> 00:12:18,658
10% of requests are allowed to fail every weekend because

193
00:12:18,764 --> 00:12:22,758
we don't work on weekend. Right? This can be an enforceable agreement

194
00:12:22,854 --> 00:12:26,442
which both parties have to follow during

195
00:12:26,496 --> 00:12:30,334
PCR. The latency can vary between certain limits. This is also an

196
00:12:30,372 --> 00:12:33,786
example of one of the promise that the API author

197
00:12:33,818 --> 00:12:37,578
is making to their consumers. So all of these promises

198
00:12:37,754 --> 00:12:41,434
will effectively define how the consumer

199
00:12:41,482 --> 00:12:44,830
will expect this particular service or API to behave.

200
00:12:44,990 --> 00:12:48,914
And there are no chances of confusion or there

201
00:12:48,952 --> 00:12:52,420
are no chances of accidents because both parties are

202
00:12:52,790 --> 00:12:56,390
aware of what those constraints are while

203
00:12:56,540 --> 00:13:00,514
deciding about the consumption of this particular API

204
00:13:00,562 --> 00:13:04,678
endpoint. When we talk about these runtime interfaces in

205
00:13:04,684 --> 00:13:07,858
the real world, they are effectively the objectives

206
00:13:07,954 --> 00:13:11,818
that we were talking about so far. And there is a beautiful concept in

207
00:13:11,904 --> 00:13:15,802
site reliability engineering or observability world for this, which is

208
00:13:15,856 --> 00:13:19,430
service level objectives. Using service level objectives,

209
00:13:19,510 --> 00:13:22,814
we basically define the criteria for

210
00:13:22,852 --> 00:13:26,398
a particular indicator, health indicator of a service

211
00:13:26,484 --> 00:13:30,382
or an API or a function over a period of time.

212
00:13:30,516 --> 00:13:34,046
An example of this can be that availability of

213
00:13:34,068 --> 00:13:37,966
my service will be greater than 99.99 over a period

214
00:13:37,998 --> 00:13:41,694
of one day. An example of the service level objective

215
00:13:41,742 --> 00:13:45,234
in case of this talk is that I promised mark that I will

216
00:13:45,272 --> 00:13:49,282
submit this talk. He selected my talk. I promised him that okay, I will upload

217
00:13:49,346 --> 00:13:52,774
this talk today. And then he promised me that

218
00:13:52,812 --> 00:13:56,278
once you upload it, I will publish it on 4 May.

219
00:13:56,364 --> 00:14:00,022
That is a layman's example of how service level objectives

220
00:14:00,086 --> 00:14:03,578
can be defined. Similarly, we can define objectives for

221
00:14:03,664 --> 00:14:07,226
key indicators such as latency and uptime over a

222
00:14:07,248 --> 00:14:10,682
period of time, and these gives enough visibility

223
00:14:10,826 --> 00:14:14,462
to all team members, all functions, all stakeholders about

224
00:14:14,516 --> 00:14:18,574
how a particular system, a service, or important

225
00:14:18,692 --> 00:14:22,474
infrastructure component is going to behave so that they can build

226
00:14:22,532 --> 00:14:26,402
redundancy, they can build parameters to consume this

227
00:14:26,536 --> 00:14:30,370
information or this service in a way that is consistent across

228
00:14:30,440 --> 00:14:33,886
the organization. There are other examples

229
00:14:33,918 --> 00:14:37,398
of service level objectives as well. What is my error rate on this particular

230
00:14:37,484 --> 00:14:41,622
payment checkout flow? Can we promise 99.9%

231
00:14:41,676 --> 00:14:45,090
availability to this enterprise customer? And if we can't,

232
00:14:45,170 --> 00:14:48,706
then what are the areas that we want to improve upon?

233
00:14:48,818 --> 00:14:53,034
Is it the tech debt that is stopping us, or is it some

234
00:14:53,072 --> 00:14:57,078
hardware that we need to invest to get to this particular availability?

235
00:14:57,174 --> 00:15:00,826
Because we have to remember that not every nine is free.

236
00:15:00,928 --> 00:15:04,566
As we go beyond certain three lies to four nines,

237
00:15:04,598 --> 00:15:07,950
to five lies, we'll have to invest more in terms of time, money,

238
00:15:08,020 --> 00:15:11,582
resources, people. Objectifying it and making

239
00:15:11,636 --> 00:15:15,602
it a contracts helps us in identifying where we

240
00:15:15,656 --> 00:15:19,474
have to spend more or do we even have to spend more to

241
00:15:19,512 --> 00:15:23,074
reach that particular level. It also helps answers questions

242
00:15:23,112 --> 00:15:25,954
such as should we prioritize tech debt over new features?

243
00:15:26,002 --> 00:15:29,126
Because if we know that the availability of

244
00:15:29,148 --> 00:15:32,454
a service itself is 80%, then shipping new

245
00:15:32,492 --> 00:15:36,134
features may not be even productive for our team

246
00:15:36,172 --> 00:15:39,894
members because these new features will also run into the same challenges.

247
00:15:40,022 --> 00:15:43,414
Instead, we can first prioritize improving

248
00:15:43,462 --> 00:15:46,810
the reliability from 80% to an acceptable level

249
00:15:46,960 --> 00:15:50,766
that is acceptable across organization, and then work on new

250
00:15:50,788 --> 00:15:54,714
features. Making those decisions then becomes extremely

251
00:15:54,762 --> 00:15:58,942
easy because everybody is aligned on the same objective and

252
00:15:58,996 --> 00:16:03,262
same goal. These runtime promises

253
00:16:03,406 --> 00:16:07,090
are nothing but service level objectives. As we saw,

254
00:16:07,240 --> 00:16:10,542
these runtime promises can be codified as documents,

255
00:16:10,686 --> 00:16:14,062
can be run as service level objectives

256
00:16:14,126 --> 00:16:17,798
if you're using observability tool or they can always

257
00:16:17,884 --> 00:16:21,842
be recorded as decisions in your decision

258
00:16:21,906 --> 00:16:25,606
lock tree where everybody can see them over time and

259
00:16:25,708 --> 00:16:28,802
they are essentially runtime. They are not static because

260
00:16:28,876 --> 00:16:32,634
if you start with a particular objective, you can always

261
00:16:32,752 --> 00:16:36,010
increase or decrease it. Adapt to the next

262
00:16:36,080 --> 00:16:39,594
nine based on the performance that you are seeing right now.

263
00:16:39,712 --> 00:16:43,390
So instead of forcing these promises top down,

264
00:16:43,540 --> 00:16:47,294
where the engineering leaders can say that okay, we want to start

265
00:16:47,332 --> 00:16:51,118
with three nines, four lies. Instead of that, the teams can start

266
00:16:51,204 --> 00:16:55,010
with what they have right now and use adaptive service

267
00:16:55,080 --> 00:16:58,462
level objectives to improve their reliability

268
00:16:58,526 --> 00:17:02,702
goals over time based on their current benchmark

269
00:17:02,766 --> 00:17:06,550
or the current baseline of service level objectives.

270
00:17:07,210 --> 00:17:10,902
These promises can effectively be codified then into

271
00:17:10,956 --> 00:17:14,454
policies where my P zero service or P

272
00:17:14,492 --> 00:17:19,450
zero API will only have 99.99%

273
00:17:19,520 --> 00:17:22,634
of availability versus my P three will have

274
00:17:22,672 --> 00:17:26,890
90% of availability, and this can be enforced across the organization.

275
00:17:27,310 --> 00:17:31,134
These help in setting right expectations on what's possible.

276
00:17:31,332 --> 00:17:34,894
It also helps understand these contracts to

277
00:17:34,932 --> 00:17:38,154
multiple stakeholders at the same time and effectively.

278
00:17:38,202 --> 00:17:42,270
This becomes a framework of communication between customers,

279
00:17:42,420 --> 00:17:45,634
between internal stakeholders, between other team

280
00:17:45,672 --> 00:17:49,266
members, and so on. It also helps in making decisions such

281
00:17:49,288 --> 00:17:53,186
as build versus but. For example, if I don't have enough

282
00:17:53,288 --> 00:17:57,106
team members resources to improve reliability of

283
00:17:57,128 --> 00:18:00,806
my infrastructure component, it will help me to take a decision that

284
00:18:00,828 --> 00:18:04,290
okay, I need this particular level of reliability.

285
00:18:04,450 --> 00:18:08,102
I don't have the enough resources. As of now, I'll go for a build decision

286
00:18:08,166 --> 00:18:11,802
or a but decision in such cases. It can also

287
00:18:11,856 --> 00:18:15,578
help us in tiered services like I discussed earlier, where I

288
00:18:15,584 --> 00:18:19,786
can categorize my services into critical normal and

289
00:18:19,968 --> 00:18:23,614
can be ignored in certain cases, and so on. Because this

290
00:18:23,652 --> 00:18:27,114
can help us in documenting that not everything is a priority.

291
00:18:27,242 --> 00:18:30,798
I can decide and take decisions based on whether a customer

292
00:18:30,884 --> 00:18:33,666
is a paid customer, or just a pilot customer,

293
00:18:33,848 --> 00:18:37,794
or whether a customer is an enterprise customer, or whether

294
00:18:37,832 --> 00:18:41,342
a but is happening only in an alpha release versus

295
00:18:41,406 --> 00:18:44,754
a release that is generally available, and so on.

296
00:18:44,872 --> 00:18:48,646
Because the most important thing to understand

297
00:18:48,748 --> 00:18:52,882
here is that in these today's world, time is the biggest

298
00:18:52,946 --> 00:18:56,850
constraint that all of us have. If we can focus our energies

299
00:18:56,930 --> 00:19:00,714
on specific things based on the objectives that we have

300
00:19:00,752 --> 00:19:04,154
decided upon as an organizational policy. It just

301
00:19:04,192 --> 00:19:07,974
helps us making those decisions, making these decisions faster,

302
00:19:08,022 --> 00:19:11,374
and prioritize right things instead of just going

303
00:19:11,412 --> 00:19:12,560
to fix everything.

304
00:19:14,130 --> 00:19:17,834
It helps us climb the ladder of reliability.

305
00:19:17,962 --> 00:19:21,214
You cannot improve what you can't measure. We already know that.

306
00:19:21,332 --> 00:19:25,154
So the way to go about this is always first baseline and

307
00:19:25,192 --> 00:19:28,974
then go one ladder at a time in adaptive way. As we discussed

308
00:19:29,022 --> 00:19:32,450
earlier, instead of going big Bang from 90%

309
00:19:32,520 --> 00:19:36,950
to five nine, that will lead us to a failure.

310
00:19:38,170 --> 00:19:42,358
So, recapping the Rasmussen's model of how accidents happen,

311
00:19:42,524 --> 00:19:46,674
there are essentially three boundaries. A boundary of economic failure,

312
00:19:46,802 --> 00:19:50,694
a boundary of workload, and a boundary of expected

313
00:19:50,742 --> 00:19:54,714
performance or safety regulations. The point of equilibrium or

314
00:19:54,752 --> 00:19:58,838
the gradient, if it is within this circle, within these three boundaries,

315
00:19:58,934 --> 00:20:02,554
then system is performing to its optimal level. But that

316
00:20:02,592 --> 00:20:05,774
is not at all the reality. At one point of time

317
00:20:05,812 --> 00:20:08,910
you will have one access pushing the other to access,

318
00:20:09,060 --> 00:20:12,698
and then there is a chance to the gradient

319
00:20:12,794 --> 00:20:16,446
moving beyond the boundary of acceptable failure where accidents

320
00:20:16,478 --> 00:20:20,034
will start happening. So we have to again do pushback from other

321
00:20:20,072 --> 00:20:24,094
lies to keep the gradient inside and make sure that the accidents

322
00:20:24,142 --> 00:20:27,830
don't happen. The boundaries still exist

323
00:20:28,250 --> 00:20:31,858
even if you use service level objectives or policies.

324
00:20:32,034 --> 00:20:36,166
But there is a tension that keeps them in balance. The tension is

325
00:20:36,268 --> 00:20:40,182
via these service level objectives and policies where every

326
00:20:40,236 --> 00:20:44,274
organizational function is aware of that and works in tandem

327
00:20:44,322 --> 00:20:48,326
with each other according to those objectives, instead of working against

328
00:20:48,428 --> 00:20:52,270
each other. The that results into fun and profit.

329
00:20:52,770 --> 00:20:54,380
That's all I have. Thank you.

