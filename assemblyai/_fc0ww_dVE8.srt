1
00:00:24,010 --> 00:00:27,206
Hi everyone, we are going to talk today with you about how

2
00:00:27,228 --> 00:00:31,720
we brought cows engineering in our organization in a fun and continuous way.

3
00:00:32,250 --> 00:00:35,766
And my name is Christina, I am a three product manager at

4
00:00:35,788 --> 00:00:39,698
Electrolux and I'm here in Stockholm office together with my colleague

5
00:00:39,794 --> 00:00:43,282
Long. He is senior SRE engineer with PhD

6
00:00:43,346 --> 00:00:45,240
in Cows Engineering in particular.

7
00:00:45,770 --> 00:00:49,366
So let's start here is

8
00:00:49,388 --> 00:00:53,294
the three section we are going to discuss today. And for

9
00:00:53,332 --> 00:00:56,702
the first one I would like to jump in into the

10
00:00:56,836 --> 00:01:00,158
context we work at Electrolux with a

11
00:01:00,164 --> 00:01:04,690
highly complex system and by this I meant IoT.

12
00:01:05,190 --> 00:01:08,466
So to explain what we

13
00:01:08,488 --> 00:01:12,402
are doing, I'd like to say that we are working in

14
00:01:12,456 --> 00:01:16,050
digital experience organization and here is where connectivity

15
00:01:16,130 --> 00:01:18,962
start at Electrolux and being developed.

16
00:01:19,106 --> 00:01:22,546
Our appliance is divided into three categories, taste,

17
00:01:22,578 --> 00:01:26,310
wellbeing and care. These are connected appliances.

18
00:01:26,810 --> 00:01:30,566
So just to provide you a simple use case, here is a lady

19
00:01:30,598 --> 00:01:34,234
and let's just imagine that she bought her oven, then she

20
00:01:34,272 --> 00:01:38,074
made it connected to the Internet via our mobile app.

21
00:01:38,192 --> 00:01:42,030
Then she places some food in it and the camera recognized the food

22
00:01:42,180 --> 00:01:45,870
and suggests the cooking mode, the temperature and duration.

23
00:01:46,370 --> 00:01:50,382
Then she starts cooking and goes

24
00:01:50,516 --> 00:01:54,430
out for a run. The oven keeps monitoring the cooking status

25
00:01:54,510 --> 00:01:57,874
and turns off the heating when it's done.

26
00:01:58,072 --> 00:02:01,154
And also she receives a notification from the app so

27
00:02:01,192 --> 00:02:04,290
she knows she can go home and enjoy the meal.

28
00:02:04,950 --> 00:02:08,510
To build all possible and impossible use cases, we have a firmware

29
00:02:08,590 --> 00:02:11,846
team that makes the brain of appliances smarter. We have a team

30
00:02:11,868 --> 00:02:15,206
of brilliant backend engineers that develops a connectivity cloud to

31
00:02:15,228 --> 00:02:19,146
send data from the appliance to a mobile phone. And of course we have a

32
00:02:19,168 --> 00:02:23,318
team of mobile developers together with designers

33
00:02:23,414 --> 00:02:27,462
building the meaningful digital experience for our consumers.

34
00:02:27,606 --> 00:02:30,880
And also here we are SRI team.

35
00:02:32,130 --> 00:02:35,098
And to provide more context,

36
00:02:35,194 --> 00:02:38,586
I also would love to say that we have a part of different types

37
00:02:38,618 --> 00:02:42,190
of appliances like fridges, vacuum cleaners, dishwashers,

38
00:02:43,190 --> 00:02:46,334
many third party company integrations

39
00:02:46,462 --> 00:02:49,858
and we currently launch in over 60 countries and support

40
00:02:49,944 --> 00:02:53,394
other 20 languages. We also run our services from

41
00:02:53,432 --> 00:02:57,826
several different regions and a part of the general complexity

42
00:02:57,938 --> 00:03:01,938
of the IoT. If you join as a developer

43
00:03:02,114 --> 00:03:05,638
Electrolux IoT domain, so the first

44
00:03:05,724 --> 00:03:08,874
day you can be overwhelmed with the

45
00:03:09,072 --> 00:03:12,762
range of various tools and cloud vendors we use.

46
00:03:12,896 --> 00:03:15,878
We have three main connectivity cloud platforms.

47
00:03:15,974 --> 00:03:19,706
The majority of services use AWS, but we

48
00:03:19,728 --> 00:03:23,038
have some services running on Azure, IBM and Google Cloud.

49
00:03:23,204 --> 00:03:26,778
And it means that all of our developer

50
00:03:26,874 --> 00:03:30,590
teams use different tools for monitoring.

51
00:03:32,470 --> 00:03:36,334
When it comes to incident, our team sri

52
00:03:36,382 --> 00:03:40,030
team needs to look into all the observability

53
00:03:40,110 --> 00:03:44,002
tools that used and identify the root cause which

54
00:03:44,056 --> 00:03:47,622
can take for a while. It has some

55
00:03:47,756 --> 00:03:51,126
historical reasons, but before we

56
00:03:51,148 --> 00:03:57,126
will move to the next session, it's important to note that when

57
00:03:57,148 --> 00:04:01,530
we started our journey, we hadn't had such a plan to solve

58
00:04:02,110 --> 00:04:05,820
all the complexity via chaos engineering. It just came after.

59
00:04:06,670 --> 00:04:10,054
So as a first step, we decided to

60
00:04:10,112 --> 00:04:14,478
address the obvious challenge first and

61
00:04:14,564 --> 00:04:18,286
bring everyone and every application we

62
00:04:18,308 --> 00:04:22,590
have into one observability platform. So we would have end to end tracing

63
00:04:23,030 --> 00:04:26,914
from the appliance via our

64
00:04:26,952 --> 00:04:30,366
connectivity platform to the app. So we'd

65
00:04:30,398 --> 00:04:34,210
be able to trace and troubleshoot much

66
00:04:34,280 --> 00:04:39,414
better. So as

67
00:04:39,452 --> 00:04:43,142
I said, there was some historical reasons that every team had

68
00:04:43,196 --> 00:04:46,818
their own preferences

69
00:04:46,994 --> 00:04:51,478
and their own observability platform. But we decided to consolidate

70
00:04:51,574 --> 00:04:55,066
everyone into one observability platform. So we

71
00:04:55,088 --> 00:04:58,874
selected datadoc as this platform and

72
00:04:59,072 --> 00:05:01,718
we started to onboard team by team.

73
00:05:01,904 --> 00:05:05,486
Here is a few dashboards from the different teams and I

74
00:05:05,508 --> 00:05:09,054
remember how one day engineer leads reach out

75
00:05:09,092 --> 00:05:12,598
to our team and say that they had an ongoing incident

76
00:05:12,794 --> 00:05:17,026
and they need our help. So it was a big change because

77
00:05:17,128 --> 00:05:20,962
usually it's we who notice the incident and

78
00:05:21,096 --> 00:05:24,434
now we started sometimes even not be

79
00:05:24,472 --> 00:05:28,550
involved, but they still sometimes

80
00:05:28,620 --> 00:05:31,880
needed our help to identify root cause and

81
00:05:32,570 --> 00:05:34,520
fully resolve the issue.

82
00:05:36,410 --> 00:05:40,058
So I would say that the first step

83
00:05:40,144 --> 00:05:43,366
towards gamification was when we created

84
00:05:43,398 --> 00:05:47,114
this page just to understand what

85
00:05:47,152 --> 00:05:50,434
is the difference among our developer teams,

86
00:05:50,582 --> 00:05:54,206
because for some teams they still use only some

87
00:05:54,228 --> 00:05:58,846
basic functions like only checking logs. And I

88
00:05:58,868 --> 00:06:02,014
just wanted to highlight with this example that if you

89
00:06:02,052 --> 00:06:05,646
made some changes in your organization, you cannot accept

90
00:06:05,678 --> 00:06:08,850
that everyone will be quickly adapt.

91
00:06:09,510 --> 00:06:12,674
So I remember also there was product people,

92
00:06:12,712 --> 00:06:16,150
they reached out to me and they asked how to get all the stars,

93
00:06:16,810 --> 00:06:20,294
which was quite fun because I would say

94
00:06:20,332 --> 00:06:24,358
that was the first step when they wanted

95
00:06:24,444 --> 00:06:28,166
to play this game with us and start to learn about a

96
00:06:28,188 --> 00:06:32,018
new observability tool. But in general

97
00:06:32,204 --> 00:06:35,914
we started to brainstorm what we can do about this big

98
00:06:35,952 --> 00:06:39,866
difference among different teams and how to

99
00:06:39,888 --> 00:06:42,938
help those teams to learn about observability

100
00:06:43,034 --> 00:06:46,222
tool. We provide more. So we got an idea to run

101
00:06:46,276 --> 00:06:49,838
internal cows engineering game day to promote our tool set

102
00:06:49,924 --> 00:06:53,710
and improve developers knowledge about monitoring.

103
00:06:55,090 --> 00:06:58,674
So we tools our developers that we are going to attack their services

104
00:06:58,792 --> 00:07:02,466
with many use cases that could happen in real life and we

105
00:07:02,488 --> 00:07:05,490
have an impact on our end users.

106
00:07:06,250 --> 00:07:09,554
We also tried to cover the different topics of troubleshooting,

107
00:07:09,602 --> 00:07:13,058
a part of log searching like metrics analysis about performance and traffic

108
00:07:13,074 --> 00:07:17,522
trace analysis and about latency. But let's

109
00:07:17,586 --> 00:07:21,146
call the experts in cows engineering so you could listen a bit

110
00:07:21,248 --> 00:07:25,900
more about it. Long perfect.

111
00:07:26,750 --> 00:07:29,814
Hello everyone. Thanks Christina for the nice introduction.

112
00:07:29,862 --> 00:07:33,280
This is long and I'm super proud to be here

113
00:07:33,730 --> 00:07:37,066
for the third time to talk about chaos engineering at comfort

114
00:07:37,098 --> 00:07:41,354
e two. This time we are going to share more about how we adopting chaos

115
00:07:41,402 --> 00:07:44,882
engineering in a fine and continuous way. As you

116
00:07:44,936 --> 00:07:48,466
already know that we have this one observability platform

117
00:07:48,648 --> 00:07:51,854
and we are going to onboard developers

118
00:07:51,902 --> 00:07:56,158
and enable them to learn more about how to use these observability

119
00:07:56,254 --> 00:08:00,242
tools. And also we think it's good to extend this purpose

120
00:08:00,306 --> 00:08:03,574
using chaos game day so that they can learn more about the

121
00:08:03,612 --> 00:08:06,902
infrastructure and also improve the knowledge of

122
00:08:06,956 --> 00:08:10,074
troubleshooting. So as a step two, how to make

123
00:08:10,112 --> 00:08:13,574
it fun using chaos engineering for our developers

124
00:08:13,622 --> 00:08:17,606
to learn and to improve troubleshooting shooting capabilities.

125
00:08:17,798 --> 00:08:21,434
We came up with this idea, Chaos game day. If you have

126
00:08:21,472 --> 00:08:24,686
a similar request and you want to adopting chaos engineering in

127
00:08:24,708 --> 00:08:28,602
your organizations, we are super happy to share more about this journey.

128
00:08:28,746 --> 00:08:32,414
First of all, I would like to share how we prepared for

129
00:08:32,452 --> 00:08:35,602
the Chaos game day. Of course it's very important to

130
00:08:35,656 --> 00:08:39,582
communicate and to decide the target environment beforehand

131
00:08:39,726 --> 00:08:43,634
because as we know chaos engineering, the ultimate goal is to

132
00:08:43,752 --> 00:08:47,682
improve the resilience and to directly conduct experiments

133
00:08:47,746 --> 00:08:51,030
in production. However, we are not there yet

134
00:08:51,100 --> 00:08:55,394
and we think it's good to begin with our staging

135
00:08:55,442 --> 00:08:59,506
environment because the first Chaos game day will be focused.

136
00:08:59,618 --> 00:09:03,050
We're focused on the education and also

137
00:09:03,120 --> 00:09:05,770
the onboarding experience for developers.

138
00:09:06,190 --> 00:09:10,374
So we need lots of communications with different teams

139
00:09:10,422 --> 00:09:13,902
and we also need to decide and we finally decided to use

140
00:09:13,956 --> 00:09:17,662
the staging environment. And second, we want to make it a

141
00:09:17,716 --> 00:09:20,814
fun way to learn and to improve the

142
00:09:20,852 --> 00:09:24,514
troubleshooting capabilities. And here we think it's good to

143
00:09:24,552 --> 00:09:28,494
use the CTF form of Chaos game day, the capture

144
00:09:28,542 --> 00:09:32,194
flags. This one is more used by

145
00:09:32,392 --> 00:09:35,942
security developers I would say, but it's also a

146
00:09:35,996 --> 00:09:39,894
perfect option for Chaos game days. So with

147
00:09:39,932 --> 00:09:43,718
the context of chaos engineering experiments, we think everything

148
00:09:43,804 --> 00:09:47,726
can be a flag, for example, the piece of logs,

149
00:09:47,858 --> 00:09:52,022
name of metrics or the method that raises exception,

150
00:09:52,086 --> 00:09:56,006
et cetera. We can predefined a set of flags

151
00:09:56,038 --> 00:09:59,510
and then we trigger or inject some exceptions

152
00:09:59,590 --> 00:10:02,894
on purpose and invite developers to figure out what

153
00:10:02,932 --> 00:10:06,350
is the flag we injected into the target environment.

154
00:10:06,930 --> 00:10:11,466
And based on this form, we decided to conduct

155
00:10:11,658 --> 00:10:15,950
seven experiments in total, which are all related to troubleshooting

156
00:10:16,030 --> 00:10:20,366
and also related to different aspects of observability

157
00:10:20,478 --> 00:10:23,922
platform knowledges. I will share this more in the

158
00:10:23,976 --> 00:10:27,970
next couple of slides. And finally, we also need some preparation

159
00:10:28,050 --> 00:10:31,922
for the logistics and also for the player registration

160
00:10:31,986 --> 00:10:35,702
and access control. So this is the

161
00:10:35,756 --> 00:10:39,254
example about the flow for one experiment execution.

162
00:10:39,382 --> 00:10:42,934
So before conducting any cost engineering experiments,

163
00:10:42,982 --> 00:10:46,954
we need to prepare the experiment and also we need to place the

164
00:10:46,992 --> 00:10:51,130
flag. For example, if I want to invite developers

165
00:10:51,210 --> 00:10:55,134
to figure out what is the abnormal behavior that

166
00:10:55,252 --> 00:10:59,082
outputs lots of error logs, we can pre inject

167
00:10:59,146 --> 00:11:02,798
some errors and trigger this service to output some

168
00:11:02,884 --> 00:11:06,366
specific error logs. And then we mark these error

169
00:11:06,398 --> 00:11:10,034
logs as a flag and ask developers to dig into

170
00:11:10,072 --> 00:11:14,162
their infrastructure and services to figure out which is a service that

171
00:11:14,216 --> 00:11:18,050
outputs the errors. Of course, we can also conduct

172
00:11:18,130 --> 00:11:21,974
experiments on the same Chaos game day and then report the

173
00:11:22,012 --> 00:11:25,830
error and invite developers to do the troubleshooting.

174
00:11:26,410 --> 00:11:30,054
So on the Chaos game day for each experiment, we will release

175
00:11:30,102 --> 00:11:34,058
a set of instructions for developers and then they will know

176
00:11:34,144 --> 00:11:37,926
what is the abnormal behavior from the end user's perspective.

177
00:11:38,038 --> 00:11:41,430
For example, if I'm using the mobile app to control my fridge,

178
00:11:41,510 --> 00:11:44,654
I will report as an end user, I cannot change

179
00:11:44,692 --> 00:11:48,234
the temperature for my fridge, and I got this error in my mobile

180
00:11:48,282 --> 00:11:51,774
app, then developers will use everything they can

181
00:11:51,812 --> 00:11:55,918
use on the observability platform to troubleshooting

182
00:11:56,014 --> 00:11:58,642
to do the troubleshooting. Of course,

183
00:11:58,696 --> 00:12:02,034
considering this is an educational process,

184
00:12:02,152 --> 00:12:06,526
we also prepare a set of hints for each experiment.

185
00:12:06,718 --> 00:12:09,970
But the only difference is before releasing the hint,

186
00:12:10,050 --> 00:12:13,686
developers or the teams will get a higher score if

187
00:12:13,708 --> 00:12:18,190
they succeed in finding the flag. And after that we close the experiment.

188
00:12:18,290 --> 00:12:21,786
And after the Chaos game day, we will do follow

189
00:12:21,808 --> 00:12:23,930
up sessions with all the participants.

190
00:12:26,190 --> 00:12:30,442
So here we would like to share a bit more about the tricks of experiment

191
00:12:30,506 --> 00:12:33,594
design. Because for chaos engineering experiments,

192
00:12:33,642 --> 00:12:37,678
we should always start from the hypothesis design,

193
00:12:37,764 --> 00:12:41,402
or we should always consider the goal of this set of chaos

194
00:12:41,466 --> 00:12:45,554
engineering experiments. And for us, for this specific Chaos game

195
00:12:45,592 --> 00:12:49,602
day, the goal is to bring infrastructure knowledge and also

196
00:12:49,656 --> 00:12:53,170
to enable developers to do troubleshooting using

197
00:12:53,320 --> 00:12:56,390
this one observability platform. So we always

198
00:12:56,460 --> 00:13:00,374
consider what kind of observability information

199
00:13:00,492 --> 00:13:04,450
or metrics we can use for chaos game day experiments.

200
00:13:04,530 --> 00:13:08,354
For example, we can inject error logs, we can inject

201
00:13:08,482 --> 00:13:11,906
some abnormal behavior from metrics or from

202
00:13:11,948 --> 00:13:15,370
some traces, et cetera. And then we will

203
00:13:15,520 --> 00:13:18,954
enable developers to do the troubleshooting and at the same

204
00:13:18,992 --> 00:13:20,750
time to improve their knowledge.

205
00:13:21,570 --> 00:13:25,102
Secondly, it's totally fine to trigger a failure at

206
00:13:25,156 --> 00:13:29,390
different levels because we would like to report this

207
00:13:29,460 --> 00:13:32,998
error or the abnormal behavior from the end user's

208
00:13:33,034 --> 00:13:36,606
perspective. No matter, this error is where this error

209
00:13:36,638 --> 00:13:40,494
is injected. We can always report that from the consumer's

210
00:13:40,542 --> 00:13:44,226
perspective, I cannot control something from my mobile app,

211
00:13:44,328 --> 00:13:48,294
and then it will be more natural for developers like they receive some

212
00:13:48,332 --> 00:13:51,862
tickets from the support team and they need to figure

213
00:13:51,916 --> 00:13:55,670
out what is happening in their backend services. So it's okay.

214
00:13:55,740 --> 00:13:59,558
For example, we can trigger this latency error from the database

215
00:13:59,734 --> 00:14:03,830
infrastructure perspective, or we can also inject some exceptions

216
00:14:03,910 --> 00:14:07,766
in the microservice and then report the error from end user's

217
00:14:07,798 --> 00:14:11,962
perspective. And finally, it's suggested

218
00:14:12,026 --> 00:14:15,258
to take advantages of various frameworks.

219
00:14:15,354 --> 00:14:18,910
You don't need to write or implement everything by your own,

220
00:14:18,980 --> 00:14:22,106
but actually there are lots of nice chaos engineering

221
00:14:22,138 --> 00:14:25,694
frameworks in the world. For example AWS fault injection

222
00:14:25,742 --> 00:14:29,074
simulator or chaos litmus as another open

223
00:14:29,112 --> 00:14:31,570
sourced chaos engineering frameworks.

224
00:14:31,990 --> 00:14:35,394
Both of them will be very helpful for you to conduct

225
00:14:35,442 --> 00:14:39,170
experiments. So as a summary

226
00:14:39,250 --> 00:14:42,774
for this Chaos game day, we have 41

227
00:14:42,812 --> 00:14:48,154
developers from different twelve teams, four countries to

228
00:14:48,192 --> 00:14:51,414
participate, and also we conducted seven experiments.

229
00:14:51,462 --> 00:14:54,902
In total we received lots of submissions,

230
00:14:54,966 --> 00:14:58,362
181 which was lot and

231
00:14:58,416 --> 00:15:02,142
which caused some issues for us. I will share more

232
00:15:02,196 --> 00:15:06,046
later on, but the good thing is we received lots of

233
00:15:06,148 --> 00:15:09,838
good and positive feedback. And we even found something

234
00:15:09,924 --> 00:15:12,954
extra as a surprise for our infrastructure.

235
00:15:13,082 --> 00:15:16,030
Like we didn't inject any failures here,

236
00:15:16,100 --> 00:15:19,250
but with the help of Kels game day

237
00:15:19,320 --> 00:15:23,086
or with the participants from different teams, we managed

238
00:15:23,118 --> 00:15:26,950
to find some more resilience issues in our infrastructure.

239
00:15:28,170 --> 00:15:31,686
So regarding feedback, we got lots of positive feedback from

240
00:15:31,708 --> 00:15:35,414
players. And here I would like to share one example that I

241
00:15:35,452 --> 00:15:39,126
liked the most. There was one developer who was actually a

242
00:15:39,148 --> 00:15:43,354
bit upset because the team she belonged to didn't win the match

243
00:15:43,472 --> 00:15:47,174
and she couldn't see any logs or metrics from the mobile

244
00:15:47,222 --> 00:15:50,406
app and she was kind of angry at herself because it's

245
00:15:50,438 --> 00:15:54,046
their team who didn't prioritize to have it. After the

246
00:15:54,068 --> 00:15:58,186
Chaos game day, the team actually started the real user monitoring

247
00:15:58,218 --> 00:16:01,242
integration on Datadog, and all the other participants

248
00:16:01,306 --> 00:16:04,542
also started to set up their monitors and alerts.

249
00:16:04,606 --> 00:16:08,846
So Chaos game day became a nice motivation for teams to improve

250
00:16:08,958 --> 00:16:12,082
their services observability. And from

251
00:16:12,136 --> 00:16:15,378
the SRE team's perspective, we think it's

252
00:16:15,394 --> 00:16:19,282
a very good approach to ship operations responsibilities

253
00:16:19,346 --> 00:16:22,754
to developers because with the help of chaos engineering

254
00:16:22,802 --> 00:16:26,898
experiments, they gain more knowledge about their infrastructure

255
00:16:26,994 --> 00:16:31,002
and also improve their capability of troubleshooting using our

256
00:16:31,056 --> 00:16:35,222
observability platforms. We also checked the number of incidents

257
00:16:35,286 --> 00:16:38,986
before and after we having chaos engineering game days.

258
00:16:39,168 --> 00:16:42,746
It's 33 percentage less. And of course it's

259
00:16:42,778 --> 00:16:46,158
not only because the effort we made for

260
00:16:46,244 --> 00:16:49,454
conducting chaos engineering experiments and also we

261
00:16:49,492 --> 00:16:53,102
improved the incident management process with the help of Chaos

262
00:16:53,166 --> 00:16:56,498
game days. Now developers and also

263
00:16:56,584 --> 00:17:00,062
different team leads requested to continuously conduct

264
00:17:00,126 --> 00:17:04,020
chaos engineering experiments, but what is the price for that?

265
00:17:04,390 --> 00:17:08,150
So we considered again about the feedback and also

266
00:17:08,220 --> 00:17:11,798
about the efforts we made for conducting the first Chaos game day.

267
00:17:11,884 --> 00:17:15,746
And we think there are many things that can be further improved.

268
00:17:15,858 --> 00:17:19,226
For example, many operations or the experiments can

269
00:17:19,248 --> 00:17:22,666
be automated. Some of the review or the check of

270
00:17:22,688 --> 00:17:25,802
the submitted flags can be automated as well.

271
00:17:25,936 --> 00:17:29,306
We can also organize and promote or provide a

272
00:17:29,328 --> 00:17:32,718
platform to conduct chaos engineering experiments instead

273
00:17:32,804 --> 00:17:36,366
of organizations the game days with lots of effort for

274
00:17:36,388 --> 00:17:40,606
the logistics. So how to do it in a continuous way?

275
00:17:40,788 --> 00:17:44,306
We come up with the idea that chaos engineering operations can

276
00:17:44,328 --> 00:17:48,210
be actually integrated with the platform engineering practices.

277
00:17:48,550 --> 00:17:52,222
So now we actually had developed

278
00:17:52,286 --> 00:17:55,586
our internal developer platform IDP around like two

279
00:17:55,608 --> 00:17:59,174
years ago, and we think chaos engineering is just one

280
00:17:59,212 --> 00:18:02,294
of the extra good aspects or good feature for

281
00:18:02,332 --> 00:18:05,974
our internal developer platform. So to give you a bit more

282
00:18:06,012 --> 00:18:09,814
context of our IDP, this is the overall design of

283
00:18:09,852 --> 00:18:13,142
the IDP we have. So as an SRE

284
00:18:13,206 --> 00:18:16,662
team member, we define a set of templates

285
00:18:16,726 --> 00:18:20,366
for our infrastructures and these templates are currently

286
00:18:20,468 --> 00:18:24,606
implemented using terraform. We define the

287
00:18:24,788 --> 00:18:28,702
set of standardized options for different resources like

288
00:18:28,756 --> 00:18:32,880
EKS, databases, et cetera. And then we also provide

289
00:18:33,350 --> 00:18:36,802
one single entry for our developers to actually

290
00:18:36,936 --> 00:18:40,690
create and manage all the infrastructure using backstage.

291
00:18:41,430 --> 00:18:44,722
So imagine if there is a new joiner to

292
00:18:44,776 --> 00:18:48,438
Electrolog's IoT team and he needs to create

293
00:18:48,524 --> 00:18:51,910
some infrastructure for daily tax, for example the eks.

294
00:18:52,410 --> 00:18:55,782
Instead of exploring the AWS console or

295
00:18:55,836 --> 00:18:59,354
ask around about what is the configurations for

296
00:18:59,392 --> 00:19:03,222
different infrastructures, she can simply visit

297
00:19:03,286 --> 00:19:06,458
the backstage IDP plugin and

298
00:19:06,544 --> 00:19:09,910
select eks and then she will get all the

299
00:19:10,000 --> 00:19:13,802
recommendations and all the options ready for creating eks

300
00:19:13,866 --> 00:19:17,614
cluster for her. This is a screenshot from

301
00:19:17,652 --> 00:19:21,310
our IDP and the first picture shows the

302
00:19:21,380 --> 00:19:25,406
Electrolux catalog for all of our infrastructure resources.

303
00:19:25,518 --> 00:19:29,422
And here you can see there is a list of resources

304
00:19:29,486 --> 00:19:32,654
like databases, cluster, EKS clusters,

305
00:19:32,782 --> 00:19:36,274
msks, et cetera. And as long as the developer

306
00:19:36,322 --> 00:19:38,710
has access to these resources,

307
00:19:40,090 --> 00:19:43,410
the developer is able to check all these details

308
00:19:43,570 --> 00:19:47,426
on the single platform, like the details of

309
00:19:47,548 --> 00:19:51,446
the infrastructure configuration. And if it is the eks,

310
00:19:51,638 --> 00:19:55,210
developers are also able to check, for example,

311
00:19:55,280 --> 00:19:58,250
the deployment in this eks cluster.

312
00:19:59,970 --> 00:20:03,258
So in order to integrate chaos engineering operations

313
00:20:03,354 --> 00:20:07,242
with our IDP, the first version we did we implemented

314
00:20:07,306 --> 00:20:11,818
is chaos engineering experiment shadowing

315
00:20:11,994 --> 00:20:16,018
plugin. There is a button for developers on different

316
00:20:16,104 --> 00:20:20,050
resources. For example, for a microservice which is deployed in

317
00:20:20,120 --> 00:20:23,700
Kubernetes clusters, we provide this button and

318
00:20:25,030 --> 00:20:28,706
there is the dialog for configuring cost engineering

319
00:20:28,738 --> 00:20:32,134
experiments. Developers can choose the fault models and

320
00:20:32,172 --> 00:20:35,766
also some configurations for this specific fault model, like the

321
00:20:35,788 --> 00:20:39,126
value of latencies or the type of errors, et cetera,

322
00:20:39,318 --> 00:20:43,254
then developers are able to trigger these experiments

323
00:20:43,302 --> 00:20:47,718
in a specific environment. They are also required to document

324
00:20:47,814 --> 00:20:51,662
the hypotheses because the experiment is done

325
00:20:51,716 --> 00:20:56,606
by IDP and most of the information

326
00:20:56,788 --> 00:21:00,570
are analyzed on the observability platform. So developers

327
00:21:00,650 --> 00:21:05,410
needs to cross compare the findings with the predefined hypothesis.

328
00:21:05,990 --> 00:21:09,154
This is a nice approach, but to make it

329
00:21:09,192 --> 00:21:12,782
really more scalable and more flexible, we think it's

330
00:21:12,846 --> 00:21:16,902
even better to consider the chaos engineering frameworks and also

331
00:21:16,956 --> 00:21:21,158
to consider some plugins on backstage so that we can actually

332
00:21:21,244 --> 00:21:25,014
provide a tape for different resources and also provide

333
00:21:25,132 --> 00:21:29,126
more richer fault models for chaos engineering

334
00:21:29,158 --> 00:21:32,854
experiments. This is the current plugin

335
00:21:32,902 --> 00:21:36,698
we have. We use litmus chaos backstage plugin together

336
00:21:36,784 --> 00:21:40,460
with the Litmus Chaos engineering frameworks version three.

337
00:21:40,830 --> 00:21:44,790
In this way, we actually provide a multitenancy setup

338
00:21:44,870 --> 00:21:48,686
for our chaos engineering experiments, and we can also

339
00:21:48,788 --> 00:21:52,722
adopt different fault models from different layers, like cloud

340
00:21:52,776 --> 00:21:56,686
provider fault models and also like Kubernetes fault models,

341
00:21:56,718 --> 00:22:00,642
et cetera. So considering the future

342
00:22:00,696 --> 00:22:04,974
plans, we think it's better to provide a multilevel

343
00:22:05,102 --> 00:22:08,230
and automated experiments platform for

344
00:22:08,380 --> 00:22:11,794
developers. For example, we can provide more fault models

345
00:22:11,842 --> 00:22:15,206
based on the type of infrastructure or the type of

346
00:22:15,228 --> 00:22:18,586
services. We can also improve the full feedback loop with

347
00:22:18,608 --> 00:22:22,570
the help of IDP, because currently we have one single entry for

348
00:22:22,640 --> 00:22:25,994
infrastructure and service management, we have

349
00:22:26,032 --> 00:22:29,254
another platform for observability management,

350
00:22:29,382 --> 00:22:33,118
and we can somehow automate the loop of these

351
00:22:33,284 --> 00:22:36,558
chaos engineering experiments. Okay,

352
00:22:36,644 --> 00:22:40,398
this is a talk for today. Considering the complexity of

353
00:22:40,484 --> 00:22:44,014
IoT systems, chaos engineering is definitely a good

354
00:22:44,052 --> 00:22:47,566
approach for resiliency improvements. However, we don't want to

355
00:22:47,588 --> 00:22:51,386
overwhelm our developers, and we don't want to add an extra task

356
00:22:51,418 --> 00:22:54,686
for them to do. Chaos engineering. We come up with the

357
00:22:54,708 --> 00:22:58,994
idea chaos engineering gamification, and also the integration

358
00:22:59,122 --> 00:23:02,694
with platform engineering approaches. If you would

359
00:23:02,732 --> 00:23:06,214
like to go deeper in platform engineering, feel free to give us

360
00:23:06,252 --> 00:23:09,798
a thumb and we will give another talk maybe in the

361
00:23:09,804 --> 00:23:13,794
recent future. Thank you guests and enjoy at comfort.

362
00:23:13,922 --> 00:23:14,210
Bye.

