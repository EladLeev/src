1
00:01:42,590 --> 00:01:45,458
You. Hello everyone.

2
00:01:45,544 --> 00:01:49,314
Welcome to can 42 devsecops 2023

3
00:01:49,352 --> 00:01:52,994
event. My name is leonidakinin, and today I'm presenting you your

4
00:01:53,032 --> 00:01:56,306
trusty Python package. Tactics, techniques and procedures of

5
00:01:56,328 --> 00:01:59,538
attacks on open source software in Python. And yes, as you

6
00:01:59,544 --> 00:02:03,026
can see from the title, today we're going to talk about supply chain attacks in

7
00:02:03,048 --> 00:02:06,906
Python first and foremost. Before we proceed forward,

8
00:02:07,048 --> 00:02:10,554
an important disclaimer. The code I'm going to show you today can

9
00:02:10,592 --> 00:02:14,314
be weaponized for malicious purposes. So if

10
00:02:14,352 --> 00:02:18,166
any materials will be misused. Neither me nor my employer

11
00:02:18,198 --> 00:02:21,998
are responsible for any liabilities or damage caused by the

12
00:02:22,004 --> 00:02:25,194
misuse of this material. So please use only for educational purposes,

13
00:02:25,242 --> 00:02:28,000
and please always do your own research.

14
00:02:28,690 --> 00:02:32,474
So we have a lot of ground to cover today, so let's

15
00:02:32,522 --> 00:02:35,290
go briefly through the contents.

16
00:02:35,450 --> 00:02:38,594
First and foremost, we're going to go through why this topic is important and why

17
00:02:38,632 --> 00:02:41,794
is it actually still relevant in 2023. We're going to go

18
00:02:41,832 --> 00:02:44,926
through a really brief, quick history of supply chain attacks,

19
00:02:45,038 --> 00:02:49,234
and then we're going to proceed to the actual demo of various techniques.

20
00:02:49,362 --> 00:02:53,126
We will obviously cover defenses, most common defenses we can

21
00:02:53,148 --> 00:02:57,126
use against this type of threats, attacks. And last but

22
00:02:57,148 --> 00:03:00,534
not least, we will go through some credits and references that are quite useful

23
00:03:00,582 --> 00:03:04,246
in this demonstration. Let's get started. So why this topic

24
00:03:04,278 --> 00:03:08,054
is important. As you can see, in January

25
00:03:08,182 --> 00:03:11,674
there's a very well known and famous machine learning package

26
00:03:11,722 --> 00:03:15,486
was compromised in supply chain attack. In particular, there was a dependency that has

27
00:03:15,508 --> 00:03:19,854
been compromised following by that event. In May,

28
00:03:20,052 --> 00:03:24,058
there was a temporary suspension of new users and projects

29
00:03:24,074 --> 00:03:27,890
at Pipi because bit was a massive influx of malicious packets.

30
00:03:28,230 --> 00:03:32,530
Then in July there were six quite dangerous malicious packages

31
00:03:32,870 --> 00:03:36,398
published that were targeting specifically Windows users. It is actually

32
00:03:36,424 --> 00:03:40,866
quite common these days that Python supply chain attacks are targeting Windows

33
00:03:40,978 --> 00:03:44,226
developers Windows users because the more comfortable

34
00:03:44,338 --> 00:03:47,754
Python ecosystem becomes on the Windows platform, the more malicious code

35
00:03:47,792 --> 00:03:51,290
we will see in this environment.

36
00:03:51,790 --> 00:03:55,126
And last but not least, the VM connect supply

37
00:03:55,158 --> 00:03:58,314
chain attack that was discovered some time ago. It's still up

38
00:03:58,352 --> 00:04:01,542
and running, and there's more and more packages

39
00:04:01,606 --> 00:04:05,550
been published. And there was one particular package that was targeting

40
00:04:06,210 --> 00:04:08,942
the VMware products. So as you can see,

41
00:04:09,076 --> 00:04:13,146
only in 2023 we have at least four events that were widely

42
00:04:13,178 --> 00:04:16,674
discussed in the industry, and no one knows actually how

43
00:04:16,712 --> 00:04:20,194
many more events there are in the wild and how many of them were actually

44
00:04:20,232 --> 00:04:23,906
disclosed and how many of those attacks happening in

45
00:04:23,928 --> 00:04:27,750
the background and completely hidden and undetected.

46
00:04:28,250 --> 00:04:31,334
And most importantly for

47
00:04:31,372 --> 00:04:35,286
me as a security professional, this topic is very relevant because I always consider

48
00:04:35,388 --> 00:04:38,906
that to learn how to defend, you need to learn

49
00:04:39,008 --> 00:04:42,490
how to attack. And if we refer to these

50
00:04:42,560 --> 00:04:46,234
three quotes from famous historical figures of

51
00:04:46,272 --> 00:04:50,506
different eras in different time, the active defense

52
00:04:50,618 --> 00:04:54,250
or offense used as a defense or offensive operations

53
00:04:54,330 --> 00:04:57,486
used as means of developing defenses is not

54
00:04:57,508 --> 00:05:00,830
a new concept. So I personally believe

55
00:05:00,900 --> 00:05:04,322
that for security professional, there's no better way of learning

56
00:05:04,376 --> 00:05:07,554
how to defend something rather than trying to

57
00:05:07,592 --> 00:05:11,442
breach those defenses. Let's go through a really quick history

58
00:05:11,496 --> 00:05:15,086
of supply chain attacks. First, supply chain attacks,

59
00:05:15,118 --> 00:05:18,790
they were dated back to 2017. At that time,

60
00:05:18,860 --> 00:05:22,178
most of them were seen purely as opportunistic,

61
00:05:22,274 --> 00:05:25,414
low success rate, and people didn't really

62
00:05:25,452 --> 00:05:28,786
pay much attention. So initial campaigns targeted docky, hub,

63
00:05:28,818 --> 00:05:32,474
NPM, and Pipi. So all the usual victims of in

64
00:05:32,512 --> 00:05:36,970
2023, they were already exploited back in 2017.

65
00:05:37,950 --> 00:05:42,378
Solar wind attack. The infamous solar wind attack probably was

66
00:05:42,544 --> 00:05:45,902
the first higher profile attack that really drew attention, and people started

67
00:05:45,956 --> 00:05:49,326
thinking about, okay, we have to do something with it, if you

68
00:05:49,348 --> 00:05:53,038
look at the right side of the slide. So colleagues from reversing labs and

69
00:05:53,044 --> 00:05:56,498
colleagues from sonotype, they collected a lot of really useful information, as we can

70
00:05:56,504 --> 00:06:00,162
see on both of these graphs. So starting from 2020, there was

71
00:06:00,216 --> 00:06:04,050
quite a steady growth. And if we look at the bottom

72
00:06:04,120 --> 00:06:07,454
chain, it says 742% of average growth

73
00:06:07,502 --> 00:06:11,014
rate year over year, and that was between 2019 and to

74
00:06:11,052 --> 00:06:14,710
2022. And as we can see on the top chart,

75
00:06:15,130 --> 00:06:18,898
while there's less malicious packages being published till

76
00:06:18,914 --> 00:06:22,410
the end of 2023 in PiPi, there's more and more stuff

77
00:06:22,480 --> 00:06:26,342
going on in the NPM. Although pipi attacks

78
00:06:26,406 --> 00:06:29,930
are still very, very much relevant. And nowadays,

79
00:06:30,350 --> 00:06:33,786
researchers and malware analysts, they observe techniques

80
00:06:33,818 --> 00:06:37,258
when pipi is solely used as a dropper. So pipi packages used solely

81
00:06:37,274 --> 00:06:40,862
as droppers for malicious code that's written in other

82
00:06:40,916 --> 00:06:44,194
languages. And I believe there was even example of like a

83
00:06:44,232 --> 00:06:47,662
JS malicious code running inside of the pardon,

84
00:06:47,726 --> 00:06:50,930
not running, but delivered by the malicious piper package.

85
00:06:51,590 --> 00:06:54,866
Also, supply chain attacks became one of the favorite vectors for the

86
00:06:54,888 --> 00:06:58,278
major apts due to the traditional lack of control over

87
00:06:58,364 --> 00:07:01,670
development environments. Especially in the era of flexible working,

88
00:07:01,740 --> 00:07:05,654
where the bring your own device policy is quite common and some

89
00:07:05,692 --> 00:07:08,566
companies do not invest in endpoint protection.

90
00:07:08,678 --> 00:07:12,342
It is quite a common scenario that one development

91
00:07:12,406 --> 00:07:16,266
workstation that is poorly protected can become

92
00:07:16,368 --> 00:07:19,746
sort of a be on the crack in your defenses

93
00:07:19,878 --> 00:07:22,654
that an attacks need to get through.

94
00:07:22,852 --> 00:07:26,702
And so pipi attacks are seen

95
00:07:26,756 --> 00:07:31,114
to be used alongside with the phishing campaigns when there's advertisement of a particular malicious

96
00:07:31,162 --> 00:07:34,242
product or project. And so, yeah,

97
00:07:34,296 --> 00:07:37,422
apts are actively using it. So it's not just phishing anymore.

98
00:07:37,486 --> 00:07:40,898
But yeah, supply chain attacks, also seen as a means for

99
00:07:40,904 --> 00:07:44,846
the initial access and attacks are ranging

100
00:07:44,878 --> 00:07:48,854
from opportunistic, where just a bunch of packages published out

101
00:07:48,892 --> 00:07:52,694
there, and attackers just sitting and waiting for low

102
00:07:52,732 --> 00:07:56,246
hanging fruits, or people who are not cautious enough or aware enough of these type

103
00:07:56,268 --> 00:07:59,654
of dangers or attacks can be tailored

104
00:07:59,702 --> 00:08:02,806
towards specific organization. And that normally indicates

105
00:08:02,918 --> 00:08:06,086
there's been a lot of reconnaissance done in advance.

106
00:08:06,198 --> 00:08:10,106
So attackers really investigated what type of

107
00:08:10,288 --> 00:08:14,746
technologies a particular organization is using so they can target specific projects

108
00:08:14,778 --> 00:08:18,126
and dependencies. So let's get started with the

109
00:08:18,148 --> 00:08:21,934
main part and tactics, techniques and procedures in supply chain attacks. So first

110
00:08:21,972 --> 00:08:25,006
of all, for those who are not familiar with the term,

111
00:08:25,118 --> 00:08:28,626
with the acronym TTP. So TTP is an acronym developed by the

112
00:08:28,648 --> 00:08:32,334
Mitre Corporation. It stands for tactics, techniques and procedures.

113
00:08:32,462 --> 00:08:35,858
So tactics is basically why or the reason why attacker performs

114
00:08:35,874 --> 00:08:39,400
the action. And here we can say the

115
00:08:40,490 --> 00:08:43,558
four common reasons are initial access,

116
00:08:43,724 --> 00:08:47,142
perimeter bypass, data exfiltration, and obviously

117
00:08:47,196 --> 00:08:50,746
ransomware. And they can be mixed and matched. So it really depends on the

118
00:08:50,768 --> 00:08:54,502
particular apt group, the particular attacks, and the particular campaign that was targeted

119
00:08:54,566 --> 00:08:57,786
against the organization or a group of

120
00:08:57,808 --> 00:09:01,706
users. So techniques is basically how an attacker performs the action.

121
00:09:01,738 --> 00:09:05,162
And here they're uploading malicious packages to repositories,

122
00:09:05,306 --> 00:09:09,102
they utilize typosquarding, they utilize starjacking, and they

123
00:09:09,156 --> 00:09:12,254
obviously inject malicious code through dev

124
00:09:12,292 --> 00:09:15,790
credentials compromise. It's quite a common scenario

125
00:09:15,870 --> 00:09:20,100
when credentials been reused, they were leaked through some

126
00:09:21,270 --> 00:09:25,234
secondary data breach, and then those credentials happened to be

127
00:09:25,352 --> 00:09:29,206
credentials from the PIPI account. And so this

128
00:09:29,228 --> 00:09:32,854
is how the common infiltrations are happening. And procedures is basically

129
00:09:32,892 --> 00:09:36,230
a step by step application of techniques. So today

130
00:09:36,300 --> 00:09:39,542
we're going to mostly focus on

131
00:09:39,676 --> 00:09:43,218
the individual techniques rather than this step by

132
00:09:43,244 --> 00:09:46,986
step application or like a wholesome procedure when it

133
00:09:47,008 --> 00:09:50,462
comes to supply chain attacks. So we will discuss and we will focus

134
00:09:50,516 --> 00:09:54,462
on things like supply chain compromise, so how things

135
00:09:54,516 --> 00:09:58,426
can get compromised. Some malicious code ends up in legitimate

136
00:09:58,458 --> 00:10:02,026
supply chain sources that we're using common defense evasion.

137
00:10:02,058 --> 00:10:05,554
So we're going to go through a payload obfuscation as

138
00:10:05,752 --> 00:10:09,582
technique for defensive agent, and we're also going to go through the traffic obfuscation.

139
00:10:09,646 --> 00:10:13,842
Specifically, we're going to use an example of tunneling. But I also mentioned

140
00:10:13,896 --> 00:10:17,282
DNS exfiltration. So the raw materials

141
00:10:17,346 --> 00:10:20,230
in the references part of this slide deck,

142
00:10:20,650 --> 00:10:24,082
please go through them and read about DNS

143
00:10:24,146 --> 00:10:27,366
exfiltration because it's a really common way of

144
00:10:27,388 --> 00:10:30,826
how data is living your protect environments. Then we're going to go

145
00:10:30,848 --> 00:10:34,486
through installation and delivery. So sometimes it is installation. First delivery,

146
00:10:34,518 --> 00:10:37,046
then sometimes it's delivery, then installation.

147
00:10:37,238 --> 00:10:41,134
But we will look into entry points where

148
00:10:41,172 --> 00:10:45,278
you can expect malicious payload to land

149
00:10:45,444 --> 00:10:48,654
in your environment. Last but not least, we're going to

150
00:10:48,692 --> 00:10:52,622
cover two examples when we're going to go through a data

151
00:10:52,676 --> 00:10:55,966
exfiltration example, which will be a very basic infosiller

152
00:10:55,998 --> 00:10:59,874
or credentials harvester. And then we're going to go through a command and control

153
00:10:59,992 --> 00:11:04,206
example where I will demonstrate a very rudimentary

154
00:11:04,318 --> 00:11:07,686
rat or remote access triangle. First of

155
00:11:07,708 --> 00:11:11,314
all, supply chain compromise. There are several ways how attackers

156
00:11:11,362 --> 00:11:15,506
can compromise your supply chain when it comes to the python and python

157
00:11:15,538 --> 00:11:19,350
packages. First and foremost, public project repository

158
00:11:19,430 --> 00:11:22,998
infiltration, stuff like transfer of ownership.

159
00:11:23,094 --> 00:11:27,258
If developer of a project is tired of supporting it, and then

160
00:11:27,424 --> 00:11:31,226
the project was transferred to someone else claiming they will be legitimate

161
00:11:31,258 --> 00:11:34,686
contributors, legitimate owners. It's one

162
00:11:34,708 --> 00:11:38,698
of the examples how project can be infiltrated. Also official channels

163
00:11:38,714 --> 00:11:42,786
of contribution, especially when project is poorly managed and there is a

164
00:11:42,888 --> 00:11:47,054
big rotation. Retention, sorry, not retention, but attrition

165
00:11:47,102 --> 00:11:50,734
rather of the contributors. And the retention

166
00:11:50,782 --> 00:11:54,206
rates are low. When people are changing on a monthly basis,

167
00:11:54,238 --> 00:11:57,606
it's very hard to track who is contributing what. And this is one of the

168
00:11:57,628 --> 00:12:01,190
ways how malicious code can land in a legitimate project.

169
00:12:01,340 --> 00:12:05,122
Dependency infiltration, obviously. Why targeting

170
00:12:05,186 --> 00:12:08,470
main project if you can infiltrate dependency,

171
00:12:08,550 --> 00:12:11,882
especially if that project is poorly managed. So that is a common

172
00:12:11,936 --> 00:12:15,350
thing, as we've seen in one of the earlier slides,

173
00:12:15,510 --> 00:12:19,130
with the compromise of an ML package,

174
00:12:19,630 --> 00:12:23,086
this is what can happen, and this is how your project can

175
00:12:23,108 --> 00:12:27,082
get compromised and project that you are using can get compromised.

176
00:12:27,226 --> 00:12:31,854
Attacks on private pipi service and proxies on

177
00:12:31,892 --> 00:12:35,634
one of my previous engagements I've actually observed that a company

178
00:12:35,752 --> 00:12:39,586
had a private pipi proxy just sitting in the

179
00:12:39,608 --> 00:12:44,094
public, widely open. And the good thing that the software

180
00:12:44,142 --> 00:12:48,214
they use to host their Python packages hasn't been vulnerable. But imagine that

181
00:12:48,332 --> 00:12:51,686
if that would be a vulnerable pipi server widely opened for

182
00:12:51,708 --> 00:12:55,986
the Internet, then we could see quite an interesting chain

183
00:12:56,018 --> 00:12:59,254
of events over there. Also over permissive Python

184
00:12:59,382 --> 00:13:03,462
pipi repositories when you are allowing to override

185
00:13:03,526 --> 00:13:06,906
already published packages, this is very dangerous because this

186
00:13:06,928 --> 00:13:10,026
is how malicious code can land when legitimate version can

187
00:13:10,048 --> 00:13:12,954
be rewritten with the malicious one.

188
00:13:13,152 --> 00:13:16,646
And yeah, obviously vulnerable pipi service, as I've

189
00:13:16,678 --> 00:13:20,474
mentioned, is a good thing. That company I worked for didn't have any vulnerabilities

190
00:13:20,522 --> 00:13:24,690
in their PIPi proxy, but if they did, that would be quite

191
00:13:24,840 --> 00:13:28,162
an unpleasant chain of events then public

192
00:13:28,216 --> 00:13:31,874
GitHub, repos and FTP service. So sometimes I've seen and actually not

193
00:13:31,912 --> 00:13:35,314
even sometimes quite often, I see that there can be

194
00:13:35,352 --> 00:13:38,526
a GitHub repo that says hey this is a python package

195
00:13:38,558 --> 00:13:42,166
to just clone bit do pip install or

196
00:13:42,268 --> 00:13:45,426
hey we already pre built it for you, there's a tar GZ

197
00:13:45,538 --> 00:13:49,494
archive sitting in the releases, or we just host bit on the FTP

198
00:13:49,542 --> 00:13:52,410
server. We don't want to mess with Pipi.

199
00:13:52,830 --> 00:13:56,966
While this is not specifically an indication of a malicious package

200
00:13:57,078 --> 00:14:01,134
or attackers, this can be just

201
00:14:01,252 --> 00:14:04,782
someone being lazy with their

202
00:14:04,916 --> 00:14:08,510
build and release and publishing processes. So with

203
00:14:08,580 --> 00:14:12,398
those particular instances, I would be very cautious and I would go through

204
00:14:12,564 --> 00:14:16,274
stuff that we will discuss today to make sure that if

205
00:14:16,312 --> 00:14:20,082
it's not officially published in PyPI, it's safe to use type

206
00:14:20,136 --> 00:14:23,778
squatting. Really popular one. So if you type

207
00:14:23,864 --> 00:14:27,598
squatting Python Google, there will be lots and lots of articles. Although it's

208
00:14:27,614 --> 00:14:31,334
getting harder and harder for attacks these days as major software vendors like

209
00:14:31,372 --> 00:14:35,174
for example Microsoft, they started registering as

210
00:14:35,212 --> 00:14:39,026
stub packages. Basically, a stub package is a package

211
00:14:39,058 --> 00:14:42,506
that doesn't have any functionality, but it rather points you to the actual

212
00:14:42,608 --> 00:14:46,426
package that contains what you're looking for. And the reason why companies are

213
00:14:46,448 --> 00:14:50,250
publishing those stubs is because they want to reserve the name

214
00:14:50,400 --> 00:14:52,926
to prevent a type of squatting attack.

215
00:14:53,108 --> 00:14:57,086
And this is actually a very clever technique and I would highly encourage you

216
00:14:57,188 --> 00:15:00,474
if you're working on a project that is actively

217
00:15:00,522 --> 00:15:04,322
published out there in the public, please think

218
00:15:04,376 --> 00:15:08,418
about registering some stub packages so you can defend yourself

219
00:15:08,504 --> 00:15:11,938
like in advance. Prevent any attempts of

220
00:15:11,944 --> 00:15:15,554
type of squatting and starjacking. So starjacking is actually

221
00:15:15,592 --> 00:15:19,474
my favorite one. Starjacking is a combination of a technical

222
00:15:19,522 --> 00:15:23,218
attack and sort of an aspect of social engineering and playing

223
00:15:23,234 --> 00:15:27,074
with the psychology of developers and users where it utilizes,

224
00:15:27,202 --> 00:15:30,634
some people say technical flow I consider as a technical flow, but some people say

225
00:15:30,672 --> 00:15:34,090
it's been just by design in the piping system.

226
00:15:34,240 --> 00:15:38,490
And this is where you can make a reference to the GitHub source

227
00:15:38,830 --> 00:15:43,370
that doesn't belong to your project and effectively stealing

228
00:15:43,530 --> 00:15:47,054
rating stars of that repository. And with

229
00:15:47,092 --> 00:15:51,066
that being said, we are moving to our first technical demo, which is a starjacking

230
00:15:51,098 --> 00:15:54,302
demo. Obviously my Kali Linux

231
00:15:54,446 --> 00:15:57,506
was blocked at this

232
00:15:57,528 --> 00:16:01,614
point because we spent some time on talking through attacks.

233
00:16:01,662 --> 00:16:05,346
But hey, let's proceed. So let's go

234
00:16:05,368 --> 00:16:09,254
to the vs code and let's go to this package that is

235
00:16:09,292 --> 00:16:12,806
called pub IP info. And if

236
00:16:12,828 --> 00:16:16,630
we look at the setup PI setup py file that is used to

237
00:16:16,700 --> 00:16:20,266
basically it's a build backend for this project.

238
00:16:20,448 --> 00:16:24,106
We can see that there is a name of the project

239
00:16:24,288 --> 00:16:28,090
and there's a version, so let's increment this version

240
00:16:28,510 --> 00:16:31,902
because I've been testing it before, let's increment it

241
00:16:31,956 --> 00:16:35,194
2.0. So it's a second major version,

242
00:16:35,242 --> 00:16:39,310
this package, and let's go back a few

243
00:16:39,460 --> 00:16:42,914
directories so we can actually get to

244
00:16:42,952 --> 00:16:46,210
a proper one. So let's go to sources.

245
00:16:47,270 --> 00:16:51,250
All right, so what we're going to do now, we are going

246
00:16:51,320 --> 00:16:54,934
to execute Python minus M build and

247
00:16:54,972 --> 00:16:59,000
while it's building we're going to go back and

248
00:17:00,570 --> 00:17:05,110
we're going to go to the repository and we're going to go to test

249
00:17:05,260 --> 00:17:08,982
Pipi. So the reason why I'm using test Pipi

250
00:17:09,046 --> 00:17:13,094
is because the production PiPi is actually monitored

251
00:17:13,142 --> 00:17:16,746
by different security vendors. So what

252
00:17:16,768 --> 00:17:20,940
we're going to do now is basically we're going to

253
00:17:21,570 --> 00:17:24,634
prevent my account from being blocked for publishing

254
00:17:24,682 --> 00:17:28,126
like intentionally malicious package. So if we're going to go

255
00:17:28,148 --> 00:17:32,400
to your project, as you can see there's already project and

256
00:17:33,410 --> 00:17:37,042
I believe we have a few versions already

257
00:17:37,096 --> 00:17:40,130
published there. So what we're going to do now, we're going to clean up whatever

258
00:17:40,200 --> 00:17:43,966
packages are there. Sorry, bit takes some time as I'm

259
00:17:43,998 --> 00:17:47,650
working in the virtual machine, so we have to be patient

260
00:17:47,730 --> 00:17:50,870
and there's a lot of processes in the recording running in the background.

261
00:17:51,450 --> 00:17:55,462
So if we just delete this version just

262
00:17:55,516 --> 00:17:59,346
to make sure we actually don't have any releases at

263
00:17:59,388 --> 00:18:03,098
all. So no releases found under pub

264
00:18:03,184 --> 00:18:06,346
IP info. Now let's look. Okay, we have

265
00:18:06,368 --> 00:18:09,922
successfully built the package and now what we're going to do, we're going to execute

266
00:18:10,086 --> 00:18:13,566
twine upload. So it will basically pick up

267
00:18:13,588 --> 00:18:17,102
the tarqz and the will and it will push bit to the test

268
00:18:17,156 --> 00:18:20,400
pipi and it's nearly there.

269
00:18:21,250 --> 00:18:23,780
Great. It's almost there.

270
00:18:24,390 --> 00:18:28,194
Check again. Brilliant. So this project

271
00:18:28,232 --> 00:18:32,100
was now published and if you click on the link,

272
00:18:32,550 --> 00:18:36,434
all right, as you can see we just published

273
00:18:36,482 --> 00:18:39,846
a brand new project. So if we

274
00:18:39,868 --> 00:18:43,446
click on the management panel it

275
00:18:43,468 --> 00:18:46,598
will show that it was released just 1 minute ago.

276
00:18:46,684 --> 00:18:51,050
So it's a brand new project. We deleted all previous releases.

277
00:18:51,550 --> 00:18:54,860
So if we go to the project itself.

278
00:18:55,310 --> 00:18:57,450
Sorry, we probably better use this link. Once again,

279
00:18:57,520 --> 00:19:01,786
apologies. So yeah, if we go to the testpipe.org

280
00:19:01,898 --> 00:19:05,406
project, pub ipinfo and this is the

281
00:19:05,428 --> 00:19:09,182
version that we just published, we can see that this

282
00:19:09,236 --> 00:19:12,670
project already has almost 5000 stars of rating,

283
00:19:13,030 --> 00:19:16,306
bit has nearly 2000 forks, it has a

284
00:19:16,328 --> 00:19:20,050
bunch of open issues and a bunch of open prs and

285
00:19:20,120 --> 00:19:23,540
it also has like a pretty legitimately looking

286
00:19:23,990 --> 00:19:27,746
readme description, the installation method

287
00:19:27,778 --> 00:19:31,254
and so on and so forth. So what actually happened here? So if we go

288
00:19:31,292 --> 00:19:34,680
back to the setup PI, as we can see,

289
00:19:35,050 --> 00:19:38,698
the URL is pointing to a completely different

290
00:19:38,784 --> 00:19:42,218
resource. And this resource is one of the

291
00:19:42,384 --> 00:19:46,266
example projects that's used by the

292
00:19:46,288 --> 00:19:49,450
documentation that explains how to package

293
00:19:50,370 --> 00:19:53,600
your python projects and how to publish them.

294
00:19:54,050 --> 00:19:57,120
And if we go to this link,

295
00:19:57,650 --> 00:20:01,726
yeah, these are the stats we are looking at. So what

296
00:20:01,748 --> 00:20:05,554
we just did, what just happened? In less than five minutes we

297
00:20:05,592 --> 00:20:09,426
basically performed a complete selling of

298
00:20:09,448 --> 00:20:12,722
the rating of this project and we

299
00:20:12,776 --> 00:20:16,082
reused that rating to make our malicious package

300
00:20:16,146 --> 00:20:19,766
look like a legitimate option. So this was

301
00:20:19,788 --> 00:20:22,120
starjacking. Now,

302
00:20:24,810 --> 00:20:28,846
next point in this talk is basically we're going to talk about defense evasion

303
00:20:28,898 --> 00:20:32,380
and the obfuscation. So why attackers want to

304
00:20:33,070 --> 00:20:36,666
obfuscate their payloads and their traffic? Well, first of all, they want to evade as

305
00:20:36,688 --> 00:20:41,558
many defenses as possible. And if their malware samples

306
00:20:41,734 --> 00:20:45,306
were detected, they want to make sure that it will be harder

307
00:20:45,338 --> 00:20:48,622
for reverse engineers, for malware analysts to get

308
00:20:48,676 --> 00:20:52,722
to the bottom of the actual payload that supposed to do something

309
00:20:52,776 --> 00:20:56,654
bad in our systems. So when it comes to the payload obfuscation,

310
00:20:56,782 --> 00:21:00,514
one of the few common things is when

311
00:21:00,552 --> 00:21:03,730
attackers using encoding encryption,

312
00:21:04,150 --> 00:21:08,338
bytecode and embedding binary executables

313
00:21:08,354 --> 00:21:12,006
that are written in different languages inside of your Python packages. Because in

314
00:21:12,028 --> 00:21:15,842
Python packages you can include arbitrary files,

315
00:21:15,986 --> 00:21:19,858
literally whatever you want can be included in the Python package.

316
00:21:20,034 --> 00:21:23,626
And when it comes to the traffic obfuscation that I will demonstrate at the

317
00:21:23,648 --> 00:21:27,494
end, we will come to the example of remote access triangle DNX

318
00:21:27,542 --> 00:21:31,774
exfiltration, proxying and tunneling of the traffic. So this

319
00:21:31,812 --> 00:21:35,150
is also very interesting and this is also an important

320
00:21:35,220 --> 00:21:38,798
part to be covered because supply chain attacks do not stop

321
00:21:38,884 --> 00:21:42,326
when you just install the package.

322
00:21:42,378 --> 00:21:45,998
So supply chain attack actually consists of many components,

323
00:21:46,014 --> 00:21:49,154
as we already discussed, and you have to consider many,

324
00:21:49,192 --> 00:21:53,246
many things to successfully detect them and protect yourselves

325
00:21:53,438 --> 00:21:57,522
against them. So with the payload

326
00:21:57,586 --> 00:22:00,870
obfuscation, I believe the best way will be to go

327
00:22:00,940 --> 00:22:04,134
through a demo. And what we're going to do,

328
00:22:04,252 --> 00:22:07,958
we're going to get back into the Kali Linux. We're going

329
00:22:07,964 --> 00:22:11,782
to check where we are at the moment. Actually it would be easier

330
00:22:11,846 --> 00:22:15,690
if we switch to the team accession.

331
00:22:16,190 --> 00:22:19,834
So we're going to go to the folder number one. By the way, when this

332
00:22:19,872 --> 00:22:23,120
talk will be released, I will also release the

333
00:22:23,890 --> 00:22:27,246
repository so you can get through all

334
00:22:27,268 --> 00:22:30,542
these examples on your own and just figure out how stuff

335
00:22:30,596 --> 00:22:33,746
works and play with it a little bit. So let's build

336
00:22:33,768 --> 00:22:38,482
the package. As you can see, bit has quite

337
00:22:38,536 --> 00:22:41,490
an obfuscated name called malware obfuscation.

338
00:22:41,990 --> 00:22:44,530
So we'll take a little bit to create the package.

339
00:22:44,950 --> 00:22:48,374
Nothing too crazy. We still have time. We are not even in

340
00:22:48,412 --> 00:22:51,878
half of this talk. Yeah, so we successfully build it.

341
00:22:51,964 --> 00:22:55,990
And what we're going to do now, we're going to run the installation

342
00:22:56,570 --> 00:23:00,202
of the package to make sure it's present in our system. Yeah,

343
00:23:00,256 --> 00:23:03,786
successfully installed. So for the ease of this demo,

344
00:23:03,888 --> 00:23:07,910
I'm going to run ipython in this part of the terminal.

345
00:23:08,070 --> 00:23:11,538
And in the top section of the terminal I'm going to start a receiver.

346
00:23:11,574 --> 00:23:14,954
And receiver is what we're going to use in all other demonstrations.

347
00:23:15,002 --> 00:23:18,474
And it will imitate an attacker that is sitting somewhere

348
00:23:18,522 --> 00:23:22,142
out there and just waiting and trying to

349
00:23:22,276 --> 00:23:26,146
basically catch the traffic from the

350
00:23:26,168 --> 00:23:30,334
attack machine. So we're going to do now we're going to run from Pymalware obfuscation,

351
00:23:30,382 --> 00:23:34,226
we're going to import the technics module. And inside of the

352
00:23:34,248 --> 00:23:37,958
technics module there is an obfuscation techniques class. And we're going

353
00:23:37,964 --> 00:23:41,686
to start running these methods one

354
00:23:41,788 --> 00:23:45,590
by one. So first one is

355
00:23:45,660 --> 00:23:48,854
executed. Then we're going to run the Unicode

356
00:23:48,902 --> 00:23:53,180
payload. Then we're going to run, I believe,

357
00:23:53,630 --> 00:23:56,646
encryption payload. And for the encryption payload,

358
00:23:56,838 --> 00:24:00,094
I actually need an

359
00:24:00,132 --> 00:24:03,534
encryption key URL. So I'll explain one

360
00:24:03,572 --> 00:24:06,394
by one what each and every method.

361
00:24:06,522 --> 00:24:09,760
Method does take some time.

362
00:24:10,130 --> 00:24:12,980
Yes, it's working. Guys,

363
00:24:13,910 --> 00:24:17,774
this is like a heavy technical demo, so hopefully

364
00:24:17,822 --> 00:24:21,282
everything will work from the first shot. But yeah,

365
00:24:21,336 --> 00:24:25,366
just in case, please be

366
00:24:25,388 --> 00:24:29,254
patient. There's a lot of fun stuff in this demo. All right,

367
00:24:29,292 --> 00:24:33,160
so we just executed 12345.

368
00:24:33,930 --> 00:24:38,170
I believe I missed one, which should be a

369
00:24:38,240 --> 00:24:41,478
combined payload method. So we just executed

370
00:24:41,494 --> 00:24:45,366
six methods from the intentionally

371
00:24:45,478 --> 00:24:49,398
malicious package. And as you can see on the receiving

372
00:24:49,414 --> 00:24:52,906
end, the end that imitates an attacker. We have some JSON

373
00:24:52,938 --> 00:24:56,670
data coming in and it basically contains breaking system

374
00:24:56,740 --> 00:25:00,874
name, version host IP and the username.

375
00:25:00,922 --> 00:25:04,930
And this is an example of a very basic data exfiltration.

376
00:25:05,350 --> 00:25:08,930
So to understand what's going on behind the scene, let's move back

377
00:25:09,000 --> 00:25:13,214
to the vs code and open up the obfuscation

378
00:25:13,342 --> 00:25:17,858
package and the techniques PI module.

379
00:25:18,034 --> 00:25:21,682
So if we scroll up in the doc string,

380
00:25:21,826 --> 00:25:25,318
there's a snippet of code that does a very basic thing, is basically

381
00:25:25,404 --> 00:25:28,570
imports Sys socket, other modules,

382
00:25:30,590 --> 00:25:34,442
starts a socket, connects to the receiver and then bit

383
00:25:34,496 --> 00:25:38,138
forms a JSON data that contains information

384
00:25:38,224 --> 00:25:43,918
about operating system and everything that we just seen in

385
00:25:43,924 --> 00:25:47,706
the Tmux terminal. And the first method that we executed

386
00:25:47,738 --> 00:25:51,566
was base 64 payload. And this string in

387
00:25:51,588 --> 00:25:55,154
base 64 the reversed base 64 string is

388
00:25:55,192 --> 00:25:58,546
this original code. So why reversed? Because there

389
00:25:58,568 --> 00:26:01,714
are scanners that recognize base

390
00:26:01,752 --> 00:26:05,940
64. They do decoding of base 64

391
00:26:06,390 --> 00:26:10,086
and then they do static analysis and they checking whether syntax actually looks like

392
00:26:10,108 --> 00:26:13,558
a programming language. And reversing base 64

393
00:26:13,644 --> 00:26:17,406
reduces, not removes, but reduces the risk for attacker

394
00:26:17,538 --> 00:26:20,570
that the payload will remain hidden.

395
00:26:20,910 --> 00:26:25,014
And then when this base 64 was decoded

396
00:26:25,062 --> 00:26:28,890
and reversed back before that decoded and passed to the exec,

397
00:26:29,230 --> 00:26:32,574
we saw the first message,

398
00:26:32,772 --> 00:26:36,346
we saw the first part of the traffic coming into the receiving

399
00:26:36,378 --> 00:26:39,722
end. So the next method was Unicode payload,

400
00:26:39,786 --> 00:26:43,566
which was exactly the same code but transformed

401
00:26:43,598 --> 00:26:47,246
into the list of basically the Unicode

402
00:26:47,358 --> 00:26:50,814
numbers or numbers that correspond to the particular character

403
00:26:50,862 --> 00:26:54,702
from the Unicode table. And the reverse operation contained

404
00:26:54,766 --> 00:26:58,946
joining it into a string and then executing using the bit in exec

405
00:26:58,978 --> 00:27:02,770
method. Then the base 64 Unicode combined payload,

406
00:27:02,850 --> 00:27:06,518
it was combination of the first, the base 64

407
00:27:06,684 --> 00:27:09,974
reversed, then transformed into this array.

408
00:27:10,022 --> 00:27:14,026
Array was also, or list was also reversed. And then

409
00:27:14,128 --> 00:27:18,246
the reverse operation was performed to execute exactly the same code snippet

410
00:27:18,278 --> 00:27:22,030
that imitates stealing some basic data from the system and

411
00:27:22,100 --> 00:27:25,166
pushing it somewhere to the remote location where our

412
00:27:25,348 --> 00:27:29,038
supposed attacker is sitting. And another

413
00:27:29,124 --> 00:27:32,846
one, which was called encryption payload, where I had to supply a paste bit

414
00:27:32,878 --> 00:27:36,750
URL, is basically an example of how attackers

415
00:27:36,830 --> 00:27:41,902
can use droppers. And droppers is basically a first stage payload

416
00:27:41,966 --> 00:27:45,474
or first stage malware that goes to the

417
00:27:45,512 --> 00:27:49,070
outside. In our case, it's pastebin grabs

418
00:27:49,150 --> 00:27:53,218
something. In this instance, we're not talking about the payload sitting

419
00:27:53,234 --> 00:27:57,266
in the external sources, but rather chain encryption key. And here attacker

420
00:27:57,298 --> 00:28:00,838
obfuscated the same snippet of code that we discussed

421
00:28:00,854 --> 00:28:04,314
at the beginning of this part. And it

422
00:28:04,352 --> 00:28:08,246
decrypts it using encryption key that is sitting in the paste bit.

423
00:28:08,278 --> 00:28:11,834
So this is a very neat technique and they can use it.

424
00:28:11,872 --> 00:28:15,386
For example, they can be several paste bins where one contains encryption

425
00:28:15,418 --> 00:28:19,290
key, another one contains the actual malware payload

426
00:28:19,450 --> 00:28:23,070
and so on and so forth. So they can fetch in payload from

427
00:28:23,140 --> 00:28:26,674
the second pace bin and decrypt it using encryption from the first base

428
00:28:26,712 --> 00:28:30,082
bit and then decode from base 64

429
00:28:30,136 --> 00:28:33,698
or whatever they're using for additional obfuscation and execute bit. So this is

430
00:28:33,704 --> 00:28:37,590
like a combination of many techniques. Now to the fun part,

431
00:28:37,740 --> 00:28:41,142
bytecode payloads. So the first three are actually

432
00:28:41,196 --> 00:28:44,680
quite commonly known and the exec is

433
00:28:45,130 --> 00:28:49,790
very well tracked by many SAS scanners. So if you run Semgrep,

434
00:28:49,890 --> 00:28:53,706
Semgrep will immediately actually, let's run

435
00:28:53,808 --> 00:28:57,606
Semgrep just to demonstrate how easy to spot exec.

436
00:28:57,638 --> 00:29:01,654
But why other functions are not detected

437
00:29:01,702 --> 00:29:05,130
by why other obfuscation techniques are not detected. So I already

438
00:29:05,200 --> 00:29:09,502
played with Semgrep a little bit and yeah,

439
00:29:09,556 --> 00:29:12,550
it's going to take some time. And in the meantime,

440
00:29:12,730 --> 00:29:16,494
let's look at the remaining methods. So the bytecode

441
00:29:16,542 --> 00:29:20,514
payload, what's going on here is we

442
00:29:20,552 --> 00:29:23,970
have a code that is at the top of this file,

443
00:29:24,390 --> 00:29:27,646
that small infosiller that was pre compiled

444
00:29:27,678 --> 00:29:31,346
into the bytecode. So as you know, when Python interpreter is executed,

445
00:29:31,378 --> 00:29:35,058
what it does, it first of all does a syntactical check bit, then builds

446
00:29:35,074 --> 00:29:38,726
up the ast and then it's all transformed into the bytecode. And the bytecode

447
00:29:38,758 --> 00:29:42,730
is what? Executed by the Python virtual machine.

448
00:29:43,070 --> 00:29:45,610
And these pre compiled bytecodes,

449
00:29:45,950 --> 00:29:49,354
they can be embedded in the package and they can

450
00:29:49,392 --> 00:29:53,342
be invoked exactly in exactly the same way

451
00:29:53,396 --> 00:29:57,440
and imported as your regular module. So if we scroll up

452
00:29:58,050 --> 00:30:01,950
at the very beginning, I'm importing compiled,

453
00:30:02,370 --> 00:30:05,506
and inside of the compiled there is

454
00:30:05,528 --> 00:30:09,490
an exfiltrate function. And the exfiltrate function contains code

455
00:30:09,640 --> 00:30:12,994
that we reviewed at the beginning, and the last one is

456
00:30:13,032 --> 00:30:16,642
pretty much the same. But now instead of using the bytecode,

457
00:30:16,786 --> 00:30:20,166
we are using a beacon that

458
00:30:20,188 --> 00:30:23,666
was written in Golang. So we're basically embedding an executable

459
00:30:23,698 --> 00:30:26,530
binary into the python package.

460
00:30:26,690 --> 00:30:30,262
And this is what we just demonstrated, this is what we just observed.

461
00:30:30,406 --> 00:30:34,038
So let's look at the results of the semgrap. So Semgrap

462
00:30:34,214 --> 00:30:37,594
went through the directory where we are

463
00:30:37,632 --> 00:30:41,390
now, and it is through one obfuscation,

464
00:30:41,890 --> 00:30:45,520
and, sorry, that was the wrong one.

465
00:30:48,210 --> 00:30:51,742
We probably need to switch directories because there's a lot of stuff

466
00:30:51,796 --> 00:30:55,394
going on there. Yeah, let's wait for the Samgrep to execute once

467
00:30:55,432 --> 00:30:58,894
again. But we will actually use results of the previous

468
00:30:58,942 --> 00:31:03,646
semgrep for another demonstration. So it's

469
00:31:03,678 --> 00:31:07,346
actually good that we run it in advance. So Semgrap

470
00:31:07,378 --> 00:31:10,214
is running 100%. Great.

471
00:31:10,332 --> 00:31:13,826
All right, so let's look at the results.

472
00:31:13,938 --> 00:31:14,920
First of all,

473
00:31:17,950 --> 00:31:21,306
it detects the bacon. Go, obviously,

474
00:31:21,488 --> 00:31:25,066
because let's call it a plain text file. It's not

475
00:31:25,088 --> 00:31:28,378
obfuscated or encrypted. There is

476
00:31:28,464 --> 00:31:31,878
an exact detection in one of the techniques

477
00:31:31,894 --> 00:31:35,406
from techniques py, and that's it.

478
00:31:35,588 --> 00:31:38,894
So if we look back at the techniques that we just

479
00:31:38,932 --> 00:31:42,762
demonstrated, the bytecode payload wasn't detected

480
00:31:42,906 --> 00:31:45,882
because what Samgrep does, it does the static analysis.

481
00:31:45,946 --> 00:31:49,266
It goes through the syntax of the files and then bit tries to

482
00:31:49,288 --> 00:31:52,642
look for the patterns. And embedded binary is the same

483
00:31:52,696 --> 00:31:56,194
because it was pre compiled. Bit only detected the

484
00:31:56,232 --> 00:31:59,446
content of beacon that was in beacon go. So the

485
00:31:59,468 --> 00:32:02,840
source file that I've included so you can look at the source of the example,

486
00:32:03,450 --> 00:32:07,246
it was also detected. So as we can see, while Samgrep

487
00:32:07,298 --> 00:32:10,522
did a really good job, it was only the

488
00:32:10,576 --> 00:32:14,582
static analysis check and it wasn't decompiling the pre compiled bytecode

489
00:32:14,646 --> 00:32:18,234
and the bacon. So essentially we

490
00:32:18,272 --> 00:32:22,814
bypassed, let's say two

491
00:32:22,932 --> 00:32:26,602
out of six techniques successfully bypassed

492
00:32:26,746 --> 00:32:30,094
this protection, even though the first four are pretty much

493
00:32:30,132 --> 00:32:33,634
exactly the same. It's just how payload was obfuscated before

494
00:32:33,672 --> 00:32:37,090
it was passed into the built in exec method.

495
00:32:37,430 --> 00:32:41,026
And this is all for the obfuscation. So these are the

496
00:32:41,048 --> 00:32:44,798
most basic and common techniques. So by any means

497
00:32:44,904 --> 00:32:48,594
these are not perfect techniques and there are way more sophisticated

498
00:32:48,642 --> 00:32:52,658
methods of bypassing the protections, the scanners

499
00:32:52,674 --> 00:32:56,086
and so on and so forth. But this is

500
00:32:56,108 --> 00:32:59,914
what you can look up for when you trying

501
00:32:59,952 --> 00:33:04,010
to determine whether your package is malicious or not and

502
00:33:04,080 --> 00:33:07,740
you don't have any scanners to use.

503
00:33:08,270 --> 00:33:12,074
Now, installation and delivery, that's another important and interesting topic.

504
00:33:12,122 --> 00:33:16,430
So when I went through a bunch of materials from

505
00:33:16,500 --> 00:33:20,074
other researchers and I researched some of the packages in my own, I discovered

506
00:33:20,122 --> 00:33:23,966
that the most common way is when the

507
00:33:23,988 --> 00:33:28,142
payload is invoked at the stage when packages imported.

508
00:33:28,206 --> 00:33:33,170
So the init PI placeholder that makes

509
00:33:33,240 --> 00:33:37,510
directory a python module or rather

510
00:33:37,580 --> 00:33:40,214
than a package, I would say, yeah,

511
00:33:40,412 --> 00:33:43,702
a package. So you can place

512
00:33:43,756 --> 00:33:47,418
code in init PI. And when this package will

513
00:33:47,424 --> 00:33:51,594
be imported, whatever is sitting there will be executed and

514
00:33:51,712 --> 00:33:55,820
depends on the creativity of an attacker. It can go completely

515
00:33:56,190 --> 00:34:00,206
hidden for the end user setup. PI is another

516
00:34:00,308 --> 00:34:04,142
interesting thing because when you're installing the package, you can

517
00:34:04,196 --> 00:34:07,470
specify custom installation steps.

518
00:34:07,970 --> 00:34:11,050
And when those custom installation steps are invoked,

519
00:34:11,130 --> 00:34:14,034
you can place whatever arbitrary code you want,

520
00:34:14,072 --> 00:34:17,838
you can download additional droppers, you can execute ransom, so on and so forth.

521
00:34:17,934 --> 00:34:20,420
This is also a very,

522
00:34:21,350 --> 00:34:25,614
I would say it's probably the major vector of how the payload

523
00:34:25,662 --> 00:34:29,298
is invoked during installation and obviously droppers.

524
00:34:29,474 --> 00:34:32,774
So as we checked in the example of encrypted payload where

525
00:34:32,812 --> 00:34:36,166
encryption key was downloaded from the paste bin in

526
00:34:36,188 --> 00:34:40,074
the previous section of this demo, droppers can

527
00:34:40,112 --> 00:34:44,006
be a very minimal snippets of code that will go to the outside sources

528
00:34:44,118 --> 00:34:47,946
or external sandboxes as some researchers call them.

529
00:34:48,128 --> 00:34:50,990
And this is when the actual payload will be sitting.

530
00:34:51,490 --> 00:34:55,482
The famous sandboxes are discord,

531
00:34:55,626 --> 00:34:58,926
pastebin, telegram bots and anon files that

532
00:34:58,948 --> 00:35:02,386
was I believe closed some time ago. So first of

533
00:35:02,408 --> 00:35:06,222
all, by no means I'm implying that Discord

534
00:35:06,286 --> 00:35:09,554
is just all about hosting malware, but it's a well

535
00:35:09,592 --> 00:35:14,306
known platform alongside with paste bit and Telegram. And as

536
00:35:14,328 --> 00:35:17,974
far as I'm concerned, recently there was a change in how the

537
00:35:18,012 --> 00:35:22,162
URL to files are published in Discord CDN, so you can't host

538
00:35:22,226 --> 00:35:25,526
files forever. I believe the link is

539
00:35:25,548 --> 00:35:29,066
only valid for like 24 hours. But yeah, I need

540
00:35:29,088 --> 00:35:32,602
to double check because there have been some changes just

541
00:35:32,656 --> 00:35:36,250
because droppers are using discord as

542
00:35:36,320 --> 00:35:39,658
their external sandboxes. And as we can see in

543
00:35:39,664 --> 00:35:43,658
the diagram, attacker publishes malicious code, developer initiates

544
00:35:43,674 --> 00:35:47,194
the package installation, and when the package installation

545
00:35:47,242 --> 00:35:51,498
happens, there is an external sandbox. External sandbox or malware

546
00:35:51,594 --> 00:35:55,710
is executed either from setup PI or through the init PI,

547
00:35:56,150 --> 00:36:00,766
and it's time for another demo. So let's

548
00:36:00,878 --> 00:36:04,290
go to our ipython,

549
00:36:04,630 --> 00:36:08,066
let's drop this session, let's check where we're sitting

550
00:36:08,098 --> 00:36:11,510
now. Yeah, like I said guys,

551
00:36:11,580 --> 00:36:14,994
I will publish all code snippets

552
00:36:15,042 --> 00:36:18,378
so you will have a chance to go through them. Let's drop the receiver so

553
00:36:18,384 --> 00:36:21,866
we can have a clear picture of what's going

554
00:36:21,888 --> 00:36:25,626
on on the screen. And let's run the

555
00:36:25,648 --> 00:36:28,460
same build command as we did before.

556
00:36:29,230 --> 00:36:32,800
And while it's building, let's go through

557
00:36:34,530 --> 00:36:38,462
the project. So the project or the package rather, it's that

558
00:36:38,516 --> 00:36:41,754
pub IP info we used for the starjacking

559
00:36:41,802 --> 00:36:43,860
demo. And actually,

560
00:36:44,630 --> 00:36:47,666
yeah, we didn't have to rebuild it once again because

561
00:36:47,688 --> 00:36:51,554
it's already published. But never mind. So what

562
00:36:51,592 --> 00:36:55,698
this package does, when it's installed in the system,

563
00:36:55,864 --> 00:36:59,154
it will create an entry point, which is a console script

564
00:36:59,282 --> 00:37:02,754
that will execute the CLI. So basically this is a CLI

565
00:37:02,802 --> 00:37:06,450
utility, and based on the description, it says CLI utility

566
00:37:06,530 --> 00:37:09,842
that drifts information about your public IP.

567
00:37:09,986 --> 00:37:13,846
So it's a little handy CLi utility that helps you to determine

568
00:37:13,958 --> 00:37:17,866
what is the current IP address that was given to you

569
00:37:17,888 --> 00:37:20,822
by your provider. So, seems like a neat little package,

570
00:37:20,886 --> 00:37:24,430
and as we saw from the starjacking example, it has almost

571
00:37:24,500 --> 00:37:27,902
five stars of a rating. So why shouldn't we trust

572
00:37:27,956 --> 00:37:31,566
that package? What just happened? So when package build was

573
00:37:31,588 --> 00:37:35,026
executed, the installation steps were also executed. And as we

574
00:37:35,048 --> 00:37:38,606
can see, the imitation of an attacker

575
00:37:38,798 --> 00:37:41,922
just received the very first

576
00:37:41,976 --> 00:37:44,420
piece of information that was stolen from our system.

577
00:37:45,030 --> 00:37:49,094
So let's actually manually install this

578
00:37:49,132 --> 00:37:52,246
packet and see if it happens again. So as

579
00:37:52,268 --> 00:37:56,050
I said, sometimes it happens that you can find those targz

580
00:37:56,130 --> 00:37:59,734
on the FTP service or just sitting in the repositories on GitHub

581
00:37:59,782 --> 00:38:04,330
or on some other version control systems platforms.

582
00:38:04,750 --> 00:38:08,234
And sometimes the instructions contain stuff like hey,

583
00:38:08,272 --> 00:38:12,186
do curl vjet, download this archive and just do pip

584
00:38:12,218 --> 00:38:15,790
install and this is what can happen when

585
00:38:15,860 --> 00:38:19,598
you download that arbitrary package and

586
00:38:19,684 --> 00:38:23,098
you execute installation without scanning. So let's do

587
00:38:23,124 --> 00:38:26,366
once again, okay? And exactly the same result, because the installation

588
00:38:26,398 --> 00:38:30,002
ttps were executed once again, we have another

589
00:38:30,056 --> 00:38:33,902
piece of information stolen from the machine. Now let's

590
00:38:33,966 --> 00:38:38,470
go back to the ipython and

591
00:38:38,620 --> 00:38:43,698
let's import this PkG.

592
00:38:43,874 --> 00:38:47,234
Sorry, let's import pub IP

593
00:38:47,282 --> 00:38:50,602
info. Oh, as soon as the import step

594
00:38:50,656 --> 00:38:54,742
has happened, there was another piece of information stolen from our machine

595
00:38:54,806 --> 00:38:59,174
and sent to the attacker. Now for the last piece of this demonstration,

596
00:38:59,302 --> 00:39:03,262
I will put on the screen the Windows ten

597
00:39:03,316 --> 00:39:06,746
sandbox, and I will open in a non

598
00:39:06,778 --> 00:39:09,390
privileged mode the comment prompt,

599
00:39:09,970 --> 00:39:14,226
and I will show that the

600
00:39:14,248 --> 00:39:18,020
windows defender is running. So everything is up and running and everything is green.

601
00:39:18,390 --> 00:39:22,514
For the second part, I will switch the

602
00:39:22,552 --> 00:39:25,686
tmux terminal sessions and

603
00:39:25,788 --> 00:39:29,078
I will run a listener. So we're going

604
00:39:29,084 --> 00:39:33,058
to demonstrate the reverse shell. So let's

605
00:39:33,154 --> 00:39:37,030
go to our pub IP info,

606
00:39:37,390 --> 00:39:41,210
grab this link, move back to Windows sandbox,

607
00:39:41,630 --> 00:39:44,554
and let's just run it here.

608
00:39:44,752 --> 00:39:48,410
Bit will take some time. It's quite a small,

609
00:39:48,480 --> 00:39:52,254
slim machine, so it doesn't have many resources. All right,

610
00:39:52,292 --> 00:39:56,160
so it was successfully installed. Let's go back here and

611
00:39:57,090 --> 00:40:00,720
put this thing on. So as you remember,

612
00:40:01,490 --> 00:40:06,338
the pub IP info is a

613
00:40:06,344 --> 00:40:09,534
CLI utility, so we can just simply

614
00:40:09,582 --> 00:40:12,900
run minus help. Nothing happened.

615
00:40:13,350 --> 00:40:16,920
Nothing happened. And as you can see,

616
00:40:17,530 --> 00:40:21,590
what just happened is the Microsoft defender

617
00:40:22,090 --> 00:40:25,266
detected a threat and it detected

618
00:40:25,298 --> 00:40:28,678
a trion, and what it actually detected,

619
00:40:28,774 --> 00:40:32,202
it was a dropper that tried to go

620
00:40:32,256 --> 00:40:36,374
outside and grab a payload

621
00:40:36,502 --> 00:40:39,978
that was sitting in the same paste

622
00:40:39,994 --> 00:40:43,786
bit, and it tried to establish reverse

623
00:40:43,818 --> 00:40:46,510
shell connection with this machine.

624
00:40:47,090 --> 00:40:50,602
And because of that, the windows defender

625
00:40:50,666 --> 00:40:54,658
detected this behavior and it blocked it.

626
00:40:54,824 --> 00:40:59,326
So let's

627
00:40:59,358 --> 00:41:03,022
say if we would disable the real time protection,

628
00:41:03,086 --> 00:41:06,680
so what would actually happen in this case?

629
00:41:07,370 --> 00:41:10,806
So let's do the

630
00:41:10,828 --> 00:41:14,198
pub IP info once again. And as you can see,

631
00:41:14,284 --> 00:41:18,022
when defender was disabled, the reverse shell was successfully

632
00:41:18,086 --> 00:41:20,540
spun up on the attacker's end.

633
00:41:20,990 --> 00:41:24,300
So like I said before,

634
00:41:25,550 --> 00:41:29,354
one of the means to obfuscate the payloads is for

635
00:41:29,392 --> 00:41:32,894
attackers to bypass the static analysis and

636
00:41:32,932 --> 00:41:36,698
to bypass, or make it harder, not even bypass, but make it harder

637
00:41:36,714 --> 00:41:40,958
for the malware analysts to find the actual payloads. But what we observed now

638
00:41:41,124 --> 00:41:44,766
is Windows Defender performed a dynamic

639
00:41:44,798 --> 00:41:49,058
analysis. So bit executed the code and

640
00:41:49,144 --> 00:41:52,770
it checked the behavior, the signature behavior of the code,

641
00:41:52,840 --> 00:41:56,626
and based on what we observed, it determined that it was a

642
00:41:56,648 --> 00:42:00,294
troyan because that thing tried to go

643
00:42:00,332 --> 00:42:04,226
outside, grab something and execute it locally. So it was behavior

644
00:42:04,258 --> 00:42:07,342
of a dropper of a triangle. So in this instance,

645
00:42:07,506 --> 00:42:10,998
if we would have our windows defender disabled,

646
00:42:11,174 --> 00:42:15,466
we would get into trouble. But because it

647
00:42:15,488 --> 00:42:19,226
was enabled, the malware was successfully blocked. So what actually happened behind

648
00:42:19,248 --> 00:42:22,814
the scenes? So behind the scenes we

649
00:42:22,852 --> 00:42:26,378
had the first execution of malware through the init py,

650
00:42:26,554 --> 00:42:31,274
and it referred to the netutils class from the utils module

651
00:42:31,402 --> 00:42:35,530
and the run method. And this method contains

652
00:42:35,610 --> 00:42:39,186
a base 64 string. It was exactly the same string bit

653
00:42:39,208 --> 00:42:42,770
was exactly the same code that we used during the first part of demo

654
00:42:42,840 --> 00:42:46,958
where we demonstrated, where I demonstrated the basic obfuscation

655
00:42:47,134 --> 00:42:50,690
techniques. So when package was imported,

656
00:42:51,830 --> 00:42:55,522
it run the run method from the netitils class

657
00:42:55,576 --> 00:42:58,550
of the utils module, decoded the string,

658
00:42:58,630 --> 00:43:02,954
executed it, stolen piece of information, sent it to the attacker within

659
00:43:02,992 --> 00:43:06,102
the setup PI. When we executed the installation,

660
00:43:06,246 --> 00:43:09,606
there was a custom install step, and while it looks like

661
00:43:09,648 --> 00:43:13,658
legitimate step, it checks pip version, ensures it is installed,

662
00:43:13,754 --> 00:43:17,626
it checks git installation. The git installation

663
00:43:17,818 --> 00:43:21,102
method of the custom install class also

664
00:43:21,156 --> 00:43:24,130
contained exactly the same payload.

665
00:43:24,550 --> 00:43:27,700
So when we installed the package, it did exactly the same.

666
00:43:28,070 --> 00:43:31,778
And last but not least, what happened on the Windows machine. So on

667
00:43:31,784 --> 00:43:35,250
the Windows machine, when user

668
00:43:35,330 --> 00:43:39,030
executed this pub IP info CLI utility,

669
00:43:39,690 --> 00:43:43,106
there was an implant in the CLI method,

670
00:43:43,218 --> 00:43:46,754
and it basically tried to execute

671
00:43:46,802 --> 00:43:50,346
a subprocess. And the subprocess had

672
00:43:50,368 --> 00:43:53,930
a pointer to the drop exit. As you remember, I've mentioned that

673
00:43:54,080 --> 00:43:57,706
you can include whatever files, arbitrary files you

674
00:43:57,728 --> 00:44:01,354
want in your package. And in this case it was a pre compiled

675
00:44:01,402 --> 00:44:05,870
dropper. And this dropper contains

676
00:44:06,210 --> 00:44:09,822
this piece of code, obfuscated in form

677
00:44:09,956 --> 00:44:13,838
of a list of unicode characters.

678
00:44:14,014 --> 00:44:17,694
If we join them, we will get a base 64 string.

679
00:44:17,822 --> 00:44:21,454
And when this snippet is executed, de obfuscated,

680
00:44:21,502 --> 00:44:24,478
and executed bit goes to the Internet,

681
00:44:24,574 --> 00:44:28,466
to the paste bin, and then it downloads the reverse

682
00:44:28,498 --> 00:44:32,198
shell listener or either connector. And as we

683
00:44:32,204 --> 00:44:36,310
can see, when Defender is disabled,

684
00:44:36,650 --> 00:44:40,726
it's actually quite dangerous, because such files, they can really, really harm

685
00:44:40,758 --> 00:44:44,474
your system. And if we go to the

686
00:44:44,512 --> 00:44:47,926
install package, and if we run the Samgrep

687
00:44:47,958 --> 00:44:51,790
once again, you will see that the drop xa

688
00:44:52,930 --> 00:44:56,414
wouldn't be detected. So let's give it some time.

689
00:44:56,612 --> 00:45:00,446
We're almost at the end of the technical part of

690
00:45:00,468 --> 00:45:03,698
this presentation. I know it's a bit lengthy, but please

691
00:45:03,784 --> 00:45:06,180
stay tuned. Stay until the end.

692
00:45:07,350 --> 00:45:11,246
The most fun part is still coming. All right, so Sam

693
00:45:11,278 --> 00:45:14,242
grab was finally executed, and what we can see now,

694
00:45:14,296 --> 00:45:17,858
it's pretty much exactly the same detection against the pub IP info

695
00:45:17,874 --> 00:45:21,990
malicious package. So it detects Exec, it detects

696
00:45:22,490 --> 00:45:26,114
again, exec. Exec. And it detects exec in setup

697
00:45:26,162 --> 00:45:29,530
PI. And that's pretty much it.

698
00:45:29,600 --> 00:45:33,142
So what actually happened? Bit didn't detect

699
00:45:33,206 --> 00:45:36,330
the init PI because this is a legitimate code.

700
00:45:36,480 --> 00:45:39,622
It just runs something. But it

701
00:45:39,696 --> 00:45:43,454
actually detected the code that this part was referring to in the

702
00:45:43,492 --> 00:45:47,006
utils and obviously in setuppy. But as

703
00:45:47,028 --> 00:45:51,246
you can see, part in the CLI function

704
00:45:51,348 --> 00:45:54,034
that was invoking the pre bit,

705
00:45:54,152 --> 00:45:57,010
executable bit wasn't detected.

706
00:45:57,590 --> 00:46:02,066
So as you can see, Defender did a really good job on

707
00:46:02,248 --> 00:46:06,642
detecting it in dynamics, because if Defender would be disabled,

708
00:46:06,706 --> 00:46:10,054
then yeah, basically attacker would

709
00:46:10,092 --> 00:46:13,894
get connection to the machine. And I

710
00:46:13,932 --> 00:46:16,566
believe that's it for installation, delivery, demo.

711
00:46:16,748 --> 00:46:20,354
Okay, last but not least, the most fun part, exfiltration and command

712
00:46:20,402 --> 00:46:24,266
and control. So infostillers and remote access drones or

713
00:46:24,288 --> 00:46:27,814
rats are very prevalent. So in the first instance,

714
00:46:27,862 --> 00:46:31,550
attackers just try to grab whatever is sitting in the environment.

715
00:46:31,890 --> 00:46:35,742
They will just try to hide stuff.

716
00:46:35,876 --> 00:46:40,234
They will just try to actually extract

717
00:46:40,282 --> 00:46:43,966
whatever's hidden in your system and then determine whether

718
00:46:44,068 --> 00:46:47,550
these are actual credentials, whether that's sensitive information,

719
00:46:47,620 --> 00:46:51,426
so on and so forth. So infrastructures can range from the

720
00:46:51,448 --> 00:46:55,066
basic examples as the one I'm going to demonstrate, where it just goes through environment

721
00:46:55,118 --> 00:46:58,338
variables and ssh keys,

722
00:46:58,434 --> 00:47:02,294
or whether it's actually going to go and try

723
00:47:02,332 --> 00:47:06,502
to steal your crypto wallets and so on and so forth. And crypto information and

724
00:47:06,556 --> 00:47:10,202
remote access triangles also can range from just

725
00:47:10,256 --> 00:47:13,626
those that simply tracking what's going on in your system as a means for

726
00:47:13,648 --> 00:47:16,954
additional reconnaissance or bit can be

727
00:47:17,072 --> 00:47:20,178
heavily vaporized and do screen grabbing,

728
00:47:20,294 --> 00:47:24,206
the webcam grabbing, and it can provide attacker with ability to

729
00:47:24,228 --> 00:47:28,640
execute arbitrary comments. Now the demo part.

730
00:47:29,250 --> 00:47:32,846
So for this section of our demo,

731
00:47:32,948 --> 00:47:36,954
actually, let's go to the initial

732
00:47:37,002 --> 00:47:40,098
Tmux session we used, and we're going

733
00:47:40,104 --> 00:47:43,586
to back to the source, the root of

734
00:47:43,608 --> 00:47:48,280
the repository, and we will go through harvester and

735
00:47:50,810 --> 00:47:54,050
we will pre build this package. And we will install this package.

736
00:47:54,130 --> 00:47:57,766
So while this package is building itself,

737
00:47:57,948 --> 00:48:01,082
well, not really itself, but using the backend build system,

738
00:48:01,136 --> 00:48:03,740
we're going to go through the contents of the source code.

739
00:48:04,350 --> 00:48:08,314
So the setup PI says that this is

740
00:48:08,352 --> 00:48:12,510
a collection of connectors for various databases.

741
00:48:13,170 --> 00:48:17,358
So assuming this is a collection of collectors, you can import

742
00:48:17,444 --> 00:48:21,930
this package after it's installed and

743
00:48:22,100 --> 00:48:26,110
use some of the methods present in this package

744
00:48:26,190 --> 00:48:30,066
to maybe ease your life when it comes to connections to

745
00:48:30,088 --> 00:48:33,442
different databases. So yeah, based on the content,

746
00:48:33,576 --> 00:48:36,578
yeah, looks like legit package,

747
00:48:36,754 --> 00:48:40,418
some bootstrap config. So maybe it's going to bootstrap

748
00:48:40,594 --> 00:48:43,878
some basic database connection configs for us,

749
00:48:43,964 --> 00:48:48,040
who knows? So let's get back to terminal and let's do

750
00:48:48,650 --> 00:48:52,170
pip install and the DB tool

751
00:48:52,240 --> 00:48:56,938
set tar GZ. And now

752
00:48:57,104 --> 00:48:59,530
let's run ipython.

753
00:49:00,210 --> 00:49:04,400
And because I already tested it, let's do import

754
00:49:04,930 --> 00:49:08,320
DB toolset. Ooh, what just happened?

755
00:49:08,770 --> 00:49:12,750
We get a bunch of stuff on the top. Looks like ssh keys.

756
00:49:13,190 --> 00:49:17,042
Yeah, looks like ssh keys. And it also tried

757
00:49:17,096 --> 00:49:20,462
to go through the envs, seems like. Yeah, definitely ssh

758
00:49:20,526 --> 00:49:24,514
keys and definitely tried to go through anvs. So what

759
00:49:24,552 --> 00:49:28,486
just happened is we downloaded malicious package, we installed malicious package and as

760
00:49:28,508 --> 00:49:31,986
soon as it was imported, remember the init

761
00:49:32,018 --> 00:49:35,478
PI can be used to place your malware there.

762
00:49:35,564 --> 00:49:38,978
So when the package is imported it will

763
00:49:39,004 --> 00:49:42,666
be automatically executed. And what we just observed when it was

764
00:49:42,688 --> 00:49:46,042
imported, there was some data collected locally and sent

765
00:49:46,096 --> 00:49:50,530
outside. So let's see how it was done. So initpy

766
00:49:50,710 --> 00:49:54,862
contained reference to import bootstrap config class

767
00:49:54,916 --> 00:49:58,574
from the bootstrap functions module and it executed the run

768
00:49:58,612 --> 00:50:02,538
method of this class. So what happened here in

769
00:50:02,564 --> 00:50:05,854
this run method, it is mimicking

770
00:50:05,902 --> 00:50:09,634
a method that's supposed to create some sample configs for us,

771
00:50:09,832 --> 00:50:13,426
and it seems like it even created some

772
00:50:13,448 --> 00:50:18,034
sort of a directory. So let's take a look whether it's

773
00:50:18,082 --> 00:50:21,542
actually the case. Yeah, and as you can see,

774
00:50:21,596 --> 00:50:25,702
it actually created some files for us. So it

775
00:50:25,756 --> 00:50:30,186
really mimics the behavior of

776
00:50:30,208 --> 00:50:34,982
a legitimate package really well. But if we look down it says envs,

777
00:50:35,126 --> 00:50:38,662
and as we just observed on the output

778
00:50:38,726 --> 00:50:42,426
received by the receiver, presumably our attacker,

779
00:50:42,618 --> 00:50:46,222
there was also reference to the NFS key. So we

780
00:50:46,276 --> 00:50:49,694
assume that attacker wanted to

781
00:50:49,732 --> 00:50:53,506
enumerate certain environment variables and check whether you

782
00:50:53,528 --> 00:50:56,420
store any credentials there. So if we encode this stuff.

783
00:50:57,030 --> 00:50:59,890
Pardon? I would rather say decode.

784
00:51:00,550 --> 00:51:04,414
Apologies for misclicking. It's quite a heavy technical

785
00:51:04,462 --> 00:51:07,270
demo. So yeah, it takes a bit of a coordination.

786
00:51:07,770 --> 00:51:11,474
So if we decode the first example, it says AWS

787
00:51:11,522 --> 00:51:14,790
access key. So looks like this

788
00:51:14,860 --> 00:51:18,650
list of base 64 strings is a collection of

789
00:51:18,720 --> 00:51:23,130
different nvars that attacker wanted

790
00:51:23,200 --> 00:51:28,026
to enumerate and send back to

791
00:51:28,048 --> 00:51:31,340
the listener to the receiving end. So let's decode another one.

792
00:51:31,790 --> 00:51:35,040
Okay, so bit seems like

793
00:51:35,650 --> 00:51:39,520
it only allows us to decode one by one.

794
00:51:39,970 --> 00:51:43,522
Yeah, azure oath location. So indeed here,

795
00:51:43,576 --> 00:51:46,898
attacker just placed a bunch of stuff and because they didn't want us to

796
00:51:46,904 --> 00:51:50,690
figure out what we are trying to enumerate, they just

797
00:51:50,760 --> 00:51:54,494
obfuscated this part. And down

798
00:51:54,632 --> 00:51:58,646
here, if you take a look, there is no obfuscation at

799
00:51:58,668 --> 00:52:02,626
all. So it's either sort of like opportunistic

800
00:52:02,658 --> 00:52:06,294
type of attack where attacker relies on sort

801
00:52:06,332 --> 00:52:10,018
of lack of competence on the receiving end or they

802
00:52:10,044 --> 00:52:13,578
just trying to bypass the static analysis. But yeah,

803
00:52:13,664 --> 00:52:17,194
this is a basic example of a harvester. And as you can see,

804
00:52:17,392 --> 00:52:20,186
you can collect information, you can send it outside.

805
00:52:20,288 --> 00:52:24,350
So this is not really a problem for an attacker. So last part,

806
00:52:24,420 --> 00:52:27,646
remote access, try. And this

807
00:52:27,668 --> 00:52:30,670
is going to be probably the funniest part of this presentation.

808
00:52:31,170 --> 00:52:34,590
So let's get back to our listener,

809
00:52:34,670 --> 00:52:38,322
let's get back to the ipython, and probably for

810
00:52:38,376 --> 00:52:42,126
this one, we will also need to rebuild

811
00:52:42,158 --> 00:52:45,894
the package. So let's go back to the

812
00:52:45,932 --> 00:52:49,590
rat, let's go to sources. Okay,

813
00:52:49,740 --> 00:52:52,760
so we're going to run the build,

814
00:52:53,210 --> 00:52:57,538
and while it's building itself, let's go to setup pie

815
00:52:57,644 --> 00:53:02,054
of this package and see what it does for us. So it says Cli

816
00:53:02,102 --> 00:53:06,650
utility to search for packages across different managers,

817
00:53:07,150 --> 00:53:11,798
and that's pretty much bit. So like

818
00:53:11,824 --> 00:53:14,986
I said before, this package can be downloaded,

819
00:53:15,018 --> 00:53:18,046
like packages can be downloaded from the pipi where

820
00:53:18,068 --> 00:53:21,466
they use starjacking to trick us into believing it's a legitimate

821
00:53:21,498 --> 00:53:24,638
project. Or we can just get it from, I don't

822
00:53:24,654 --> 00:53:28,610
know, someone maybe distributed this PKG search

823
00:53:28,680 --> 00:53:32,110
targz in discord or some forum,

824
00:53:32,190 --> 00:53:35,442
or just uploaded to FTP, or we just found it on GitHub,

825
00:53:35,506 --> 00:53:39,954
so who knows? So let's

826
00:53:40,002 --> 00:53:43,910
install this one. And assuming it's CLi utility,

827
00:53:45,210 --> 00:53:48,360
when we execute the PKG search,

828
00:53:48,730 --> 00:53:51,802
it should give us some results. So yeah,

829
00:53:51,856 --> 00:53:55,542
it says usage. All right, so package searcher.

830
00:53:55,606 --> 00:53:59,158
And it gives us like a few arguments, like for instance, minus amp stands

831
00:53:59,174 --> 00:54:03,002
for manager. So here we probably need to specify Pipi,

832
00:54:03,146 --> 00:54:07,150
and there's also package. And for package, I don't know, let's put

833
00:54:07,220 --> 00:54:11,082
GPT. So let's assume that this malicious package was downloaded,

834
00:54:11,146 --> 00:54:15,042
installed, and now the user is trying to look up for

835
00:54:15,096 --> 00:54:17,366
all GPT packages because hey, it's 2023,

836
00:54:17,368 --> 00:54:21,026
and like, who's not using GPT, right in their

837
00:54:21,048 --> 00:54:24,874
development? Okay, so we see some results,

838
00:54:24,942 --> 00:54:28,066
but also we see some incoming connection

839
00:54:28,098 --> 00:54:31,702
on the attacker's end. And apart from

840
00:54:31,756 --> 00:54:35,814
status online, assuming there is some sort of a

841
00:54:35,852 --> 00:54:39,574
beacon or agent or listener being spun up on the victim

842
00:54:39,622 --> 00:54:42,970
side, we also see the Ngrok URL.

843
00:54:43,550 --> 00:54:46,954
And what is this thing doing?

844
00:54:46,992 --> 00:54:49,850
So let's copy the IP address, let's copy the URL.

845
00:54:50,370 --> 00:54:53,674
And let me open the fresh firefox.

846
00:54:53,802 --> 00:54:57,486
So now I'm outside of a virtual machine, I'm using the

847
00:54:57,508 --> 00:55:01,600
Ngrok, and oh, it seems like

848
00:55:02,050 --> 00:55:05,694
we're hitting some sort of server with endpoints. So let's

849
00:55:05,742 --> 00:55:09,294
hit OS information about operating

850
00:55:09,342 --> 00:55:13,730
system proc, list of processes.

851
00:55:14,470 --> 00:55:17,590
Bit was user name of the user.

852
00:55:18,330 --> 00:55:21,366
And we have a screen grabber. And as you can

853
00:55:21,388 --> 00:55:24,534
see, all the information that we requested was

854
00:55:24,572 --> 00:55:28,646
sent back to the attacker. So this is an example of a

855
00:55:28,668 --> 00:55:32,234
very small triangle rat that

856
00:55:32,272 --> 00:55:35,980
was embedded in the malicious package. And what's going on here

857
00:55:36,670 --> 00:55:41,850
is let's use pstoxarch.

858
00:55:42,210 --> 00:55:45,946
So from PKG search package, there were several executions.

859
00:55:45,978 --> 00:55:49,854
And first of all there was a Python subprocess spun up that is

860
00:55:49,892 --> 00:55:52,398
running a precompiled bytecode as remember,

861
00:55:52,484 --> 00:55:56,418
bytecode can be included and bytecode, you need to decompile it in

862
00:55:56,424 --> 00:56:01,038
order to look into its content. So it's

863
00:56:01,054 --> 00:56:03,714
not a simple file that you can just open and read it.

864
00:56:03,912 --> 00:56:07,990
And there was another search index,

865
00:56:08,570 --> 00:56:11,570
also a bytecode executed.

866
00:56:11,730 --> 00:56:15,942
And combination of these two does the following. So this

867
00:56:16,076 --> 00:56:19,340
code, let's look in the original code.

868
00:56:20,030 --> 00:56:23,946
This file spins up a flask instance on the

869
00:56:23,968 --> 00:56:27,334
victim's machine and populates this endpoints

870
00:56:27,382 --> 00:56:30,646
where one of the endpoints is a screen grabber. And the screen grabber

871
00:56:30,678 --> 00:56:33,774
allows attacker to basically steal data. Look,

872
00:56:33,812 --> 00:56:37,498
if you're doing something, whatnot. So there can be many more endpoints

873
00:56:37,514 --> 00:56:41,114
here. There can be comment injection, there can be more data exfiltration.

874
00:56:41,242 --> 00:56:44,286
There can be even potentially endpoint that will enable ransom.

875
00:56:44,318 --> 00:56:48,610
It will just encrypt all your file system and data. So who knows?

876
00:56:48,950 --> 00:56:52,546
And then there was another file. And what this file did, it actually

877
00:56:52,728 --> 00:56:56,194
checked whether the flask instance was

878
00:56:56,232 --> 00:57:00,370
running. And when it was indeed successfully

879
00:57:00,450 --> 00:57:04,118
started, it established an Ngrok tunnel. So for those who doesn't know, Ngrok is

880
00:57:04,124 --> 00:57:07,266
actually a legitimate product. It's a great product. If you are a developer

881
00:57:07,298 --> 00:57:11,094
and you want to give a temporary access, or you just want to

882
00:57:11,132 --> 00:57:15,158
test your solution that you're developing locally, you want to test how it's

883
00:57:15,174 --> 00:57:18,966
going to look outside. So you start a listener locally and then you use Ngrok

884
00:57:18,998 --> 00:57:23,162
and it publishes the traffic through one of the tunnels that is established

885
00:57:23,306 --> 00:57:26,366
using the Ngrok's infrastructure. And while this is a

886
00:57:26,388 --> 00:57:30,634
great product, it was quite quickly adopted

887
00:57:30,682 --> 00:57:33,662
by attackers and pen testers and red teamers.

888
00:57:33,806 --> 00:57:37,266
So Ngrok is super useful, but you have

889
00:57:37,288 --> 00:57:41,234
to be careful. As you can see, it can be weaponized. And I know that

890
00:57:41,272 --> 00:57:44,962
in many, many companies, they actually now

891
00:57:45,016 --> 00:57:48,594
blocking Ngrog on the DNS level. And they're also tracking whether

892
00:57:48,712 --> 00:57:51,990
there's an Ngrok binary sitting somewhere in the processes.

893
00:57:52,490 --> 00:57:55,570
Last but not least, let's look at this file

894
00:57:55,650 --> 00:57:59,590
to search endpoints. So what's in search endpoints?

895
00:58:00,090 --> 00:58:04,182
There's a search other method

896
00:58:04,326 --> 00:58:07,900
that belongs to a search endpoints class.

897
00:58:08,350 --> 00:58:12,634
And what this method does and what its obfuscated string

898
00:58:12,682 --> 00:58:16,094
does, it basically runs the subprocess check.

899
00:58:16,292 --> 00:58:20,122
It uses current executable, which is python, and that it silently

900
00:58:20,186 --> 00:58:23,614
installs all the necessary dependencies.

901
00:58:23,662 --> 00:58:27,700
So this is what's called hidden imports. This is like another

902
00:58:28,310 --> 00:58:32,286
type of sort of malware invocation

903
00:58:32,318 --> 00:58:36,606
that you can use. And then it opens up two subprocesses

904
00:58:36,718 --> 00:58:40,146
using no hub and redirecting all errors to

905
00:58:40,168 --> 00:58:43,560
dev null and all standard output. And this

906
00:58:44,090 --> 00:58:48,354
is why we didn't see anything. And only when I executed Psaux

907
00:58:48,402 --> 00:58:52,380
and grabbed for search, we saw these files and

908
00:58:53,150 --> 00:58:56,358
how this guy was executed.

909
00:58:56,454 --> 00:59:00,742
So in the CLI amongst from legitimate

910
00:59:00,806 --> 00:59:04,766
CLI functions, as soon as we selected the

911
00:59:04,788 --> 00:59:08,590
particular manager, and as soon as this manager started to doing its job,

912
00:59:08,740 --> 00:59:12,046
as soon as bit was finished, there was an execution of

913
00:59:12,068 --> 00:59:15,410
a search other method from

914
00:59:15,480 --> 00:59:17,860
the search endpoints class.

915
00:59:18,550 --> 00:59:22,562
And by that, when we run our very first search against

916
00:59:22,616 --> 00:59:26,478
the pipi, we invoked this chain of events

917
00:59:26,574 --> 00:59:30,230
when dependencies were installed and when

918
00:59:30,300 --> 00:59:33,718
two malware components were executed in

919
00:59:33,724 --> 00:59:37,622
the system. And this is how a remote attacker got

920
00:59:37,676 --> 00:59:41,470
access to the Troyan via the Ngrok tunnel. So why Ngrock

921
00:59:41,490 --> 00:59:44,874
tunnel? Well, first of all, you want to obfuscate the traffic and

922
00:59:44,912 --> 00:59:49,002
you want to make sure that the traffic that is used

923
00:59:49,056 --> 00:59:53,280
for the command and control operations is hidden. And also

924
00:59:53,650 --> 00:59:56,878
you assume as an attacker that your victim is

925
00:59:56,884 --> 01:00:00,858
sitting behind the network access translation or the firewall,

926
01:00:01,034 --> 01:00:04,446
so you don't know their public IP address and whether they have a public

927
01:00:04,548 --> 01:00:08,002
IP address. But Ngrok in this instance is used

928
01:00:08,056 --> 01:00:11,826
first of all to hide the traffic, as this is a

929
01:00:11,848 --> 01:00:15,246
tunnel and all the tunnel is going on inside of the traffic.

930
01:00:15,438 --> 01:00:19,382
And last but not least, we are bypassing a need for

931
01:00:19,436 --> 01:00:23,222
the victim to have can IP address. And this is how we are

932
01:00:23,276 --> 01:00:26,280
essentially bypassing the perimeter. By no means.

933
01:00:28,490 --> 01:00:32,234
This is a technique that has 100% success ratio. As if you

934
01:00:32,272 --> 01:00:35,574
have edrs or more sophisticated means for the network

935
01:00:35,622 --> 01:00:39,194
monitoring. You can monitor such traffic. You can figure out like

936
01:00:39,232 --> 01:00:43,082
hey, why do you have a tunnel established towards Ngrog?

937
01:00:43,146 --> 01:00:46,846
And you can just kill those events instantly. So there is a way to

938
01:00:46,868 --> 01:00:50,190
protect against such operations. And as we also

939
01:00:50,260 --> 01:00:53,022
see in this instance,

940
01:00:53,086 --> 01:00:57,890
author of the malware used search endpoints,

941
01:00:58,230 --> 01:01:01,758
used base 64 in search endpoints to hide

942
01:01:01,934 --> 01:01:05,798
one of the payloads and the listener and

943
01:01:05,964 --> 01:01:08,710
the tunnel spanner were pre compiled.

944
01:01:09,210 --> 01:01:13,080
And this is basically the end of the

945
01:01:13,530 --> 01:01:17,346
exfiltration and the c two demo. And now we are moving into defenses

946
01:01:17,458 --> 01:01:21,546
or how we can protect ourselves against all

947
01:01:21,568 --> 01:01:24,890
the techniques that we just discovered. So first and foremost,

948
01:01:25,470 --> 01:01:28,966
let's divide it into presupply protection post supply protection. So presupply

949
01:01:28,998 --> 01:01:32,702
protection is what you can do before the package is either

950
01:01:32,756 --> 01:01:36,400
downloaded or imported or installed. So here,

951
01:01:36,930 --> 01:01:40,894
first and foremost, you can use individual development sandboxes. There's no

952
01:01:40,932 --> 01:01:44,642
need to develop on your host machine. So what you can do, you can have

953
01:01:44,696 --> 01:01:48,114
a VM, well protected vm that is

954
01:01:48,152 --> 01:01:51,810
not directly connected to your network. It can sit

955
01:01:51,880 --> 01:01:54,180
behind like additional nat or whatever,

956
01:01:54,790 --> 01:01:58,514
and you can just use for your VDI plugins

957
01:01:58,562 --> 01:02:01,654
for remote development like this one in vs code.

958
01:02:01,852 --> 01:02:05,174
By doing so, if anything is affected, it's only

959
01:02:05,212 --> 01:02:08,454
the VM is affected and not your host system. So the blast radius

960
01:02:08,502 --> 01:02:12,074
will be much smaller then avoiding shared development service

961
01:02:12,272 --> 01:02:16,026
I've seen several examples where remote development environment was a

962
01:02:16,048 --> 01:02:19,114
big chunky development server, and this is

963
01:02:19,232 --> 01:02:23,342
a very bad idea because if there's a malicious package being

964
01:02:23,396 --> 01:02:26,990
installed on such machine and there are no protections, the blessed radius will be

965
01:02:27,060 --> 01:02:30,106
just enormous. Review project details

966
01:02:30,138 --> 01:02:33,486
and reputations so as we demonstrated earlier, as it was

967
01:02:33,508 --> 01:02:36,894
demonstrated earlier, you can steal reputations through the starjacking.

968
01:02:37,022 --> 01:02:40,446
So please make sure that the name of the package corresponds

969
01:02:40,478 --> 01:02:43,998
to the repository. The authors are the same, the package hasn't

970
01:02:44,014 --> 01:02:48,162
been published five minutes ago, and the repository looks

971
01:02:48,296 --> 01:02:51,654
legit and there are at least some sort of a movement in terms of pull

972
01:02:51,692 --> 01:02:55,174
requests, contributions and so on and so forth. Code review so

973
01:02:55,212 --> 01:02:58,570
manual Grep and Sam grep so obviously manual code review.

974
01:02:58,640 --> 01:03:01,770
If you don't have any scanners or tools,

975
01:03:02,510 --> 01:03:06,006
at least unzip the package,

976
01:03:06,038 --> 01:03:09,802
untard the package and just manually look into the code.

977
01:03:09,856 --> 01:03:12,942
Look in those places that I showed you today. So looked into

978
01:03:12,996 --> 01:03:17,146
setup PI Grep for base 64, grep for weird

979
01:03:17,178 --> 01:03:20,622
looking lists with unicodes. Grab for any

980
01:03:20,676 --> 01:03:24,474
pre compiled stuff. Do not execute anything, just look at it.

981
01:03:24,532 --> 01:03:27,986
If there are too many red flags, just stay away from

982
01:03:28,008 --> 01:03:32,354
such package Semgrap Semgrep is amazing. As I demonstrated today,

983
01:03:32,552 --> 01:03:36,930
it is great for the static analysis, but as with example

984
01:03:37,080 --> 01:03:40,162
with Windows defender, if you don't have any antivirus,

985
01:03:40,226 --> 01:03:43,666
especially in the windows, there will be no dynamic protection,

986
01:03:43,698 --> 01:03:47,306
there will be no dynamic analysis of the malware and it will be

987
01:03:47,328 --> 01:03:50,886
bypassed. So the defenses will be bypassed.

988
01:03:50,998 --> 01:03:54,986
So package quarantine basically do

989
01:03:55,008 --> 01:03:58,442
not use package unless you know it is safe to use.

990
01:03:58,496 --> 01:04:02,734
That's what package quarantine stands. But also if you have

991
01:04:02,932 --> 01:04:06,874
a local mirrors your private pipi mirrors that you're using to download

992
01:04:06,922 --> 01:04:10,560
packages and to store your packages, you can use

993
01:04:11,410 --> 01:04:15,374
one pipi mirror to download the package, then do analysis,

994
01:04:15,422 --> 01:04:18,786
make sure bit is not malicious, and then push it to,

995
01:04:18,808 --> 01:04:22,846
let's say, another mirror that is a production one. It can be easily automated.

996
01:04:23,038 --> 01:04:26,226
There are enterprise level tools that allow you to do

997
01:04:26,248 --> 01:04:29,478
that. So package quarantine is amazing thing to do.

998
01:04:29,644 --> 01:04:33,190
Avoid projects that are not published in PYPI as I mentioned before,

999
01:04:33,260 --> 01:04:36,898
if package is not published on if project is not published in PYPI, bit doesn't

1000
01:04:36,914 --> 01:04:40,194
mean it's malicious. It might be just the contributors and development

1001
01:04:40,242 --> 01:04:43,974
team are just lazy or they don't see, for whatever reasons

1002
01:04:44,022 --> 01:04:47,340
a need to publish it. Maybe they're not going to support it for long,

1003
01:04:47,710 --> 01:04:51,770
but using those techniques I showed you today in specific places where malware

1004
01:04:51,850 --> 01:04:54,350
can sit can most likely be embedded.

1005
01:04:55,330 --> 01:04:58,734
Just look through the repository and just look at

1006
01:04:58,772 --> 01:05:02,138
the immediate red flags fixed versions of

1007
01:05:02,164 --> 01:05:05,506
dependencies please do not do pip install and

1008
01:05:05,528 --> 01:05:09,374
just name of the package. Do pip install and specify a particular version.

1009
01:05:09,422 --> 01:05:11,730
Because if project was infiltrated,

1010
01:05:15,270 --> 01:05:19,042
if newer package newer version of the package that has a malicious

1011
01:05:19,106 --> 01:05:22,406
implant in it was published without an owner of the

1012
01:05:22,428 --> 01:05:26,006
project knowing about it, you can install the

1013
01:05:26,028 --> 01:05:29,722
latest version and infiltrate your system by doing so. So please use

1014
01:05:29,776 --> 01:05:32,074
fixed dependencies. It's not that hard.

1015
01:05:32,272 --> 01:05:35,734
Restrict direct downloads of dependencies and this is where developers

1016
01:05:35,782 --> 01:05:39,718
will probably hate me. And this is where I personally saw a

1017
01:05:39,744 --> 01:05:43,214
biggest pushback. People want to download stuff

1018
01:05:43,252 --> 01:05:46,400
from Internet, they just want to do it.

1019
01:05:47,410 --> 01:05:51,198
Use private PiPi services, trusted proxies. So if you have your

1020
01:05:51,284 --> 01:05:54,578
PiPi mirror additional index, if you

1021
01:05:54,584 --> 01:05:57,870
can put stuff like SCA and SAS,

1022
01:05:58,030 --> 01:06:01,554
and you can scan packages before you release them to developers that will

1023
01:06:01,592 --> 01:06:05,246
protect them. Absolutely. Do SCA software

1024
01:06:05,278 --> 01:06:08,422
composition, analysis and precommits. There's a lot of stuff you can do. You can

1025
01:06:08,476 --> 01:06:12,034
invoke x ray CLI from Jeffrog, you can use safety,

1026
01:06:12,082 --> 01:06:15,526
you can use, I believe Samgrep as well.

1027
01:06:15,548 --> 01:06:19,242
If you connect to Samgrep Cloud, you can also do such text

1028
01:06:19,296 --> 01:06:23,446
there. But if it happened that you downloaded

1029
01:06:23,638 --> 01:06:27,606
dependency and you installed

1030
01:06:27,638 --> 01:06:31,262
it, and you didn't scan it with

1031
01:06:31,316 --> 01:06:34,766
SCA before installation, and it happened to

1032
01:06:34,788 --> 01:06:38,122
be a malicious package, as soon as you will try to push

1033
01:06:38,186 --> 01:06:41,850
such dependency to the repo to the integration

1034
01:06:41,930 --> 01:06:45,666
branch of your project, the SCA will flag it as

1035
01:06:45,768 --> 01:06:49,090
potentially well as malicious if it knows about it,

1036
01:06:49,160 --> 01:06:53,714
if it knows that it is malicious, if it was detected beforehand and

1037
01:06:53,752 --> 01:06:57,254
it will just block your commit. So in this case we're talking about sort of

1038
01:06:57,292 --> 01:07:01,202
like a containment technique. So it will not going to spread into repository.

1039
01:07:01,266 --> 01:07:05,138
But in general, if you have at least safety

1040
01:07:05,234 --> 01:07:09,034
or some grab or x ray or any other

1041
01:07:09,072 --> 01:07:12,182
sca when you install, when you download

1042
01:07:12,246 --> 01:07:15,354
the package, just run your checks against it,

1043
01:07:15,472 --> 01:07:19,162
maybe it's not worth even installing it. And last but not least,

1044
01:07:19,216 --> 01:07:21,978
antiviruses and edrs as I already showed you,

1045
01:07:22,064 --> 01:07:25,546
defender, even the basic windows defender is amazing. And if you have edrs

1046
01:07:25,578 --> 01:07:29,278
it's even better. They will kill stuff like tunneling, like DNS exfiltration and

1047
01:07:29,284 --> 01:07:34,274
so on and so forth. And post supply protection. So also

1048
01:07:34,392 --> 01:07:38,034
development sandboxes also relevant for

1049
01:07:38,152 --> 01:07:41,902
the presupply and the post supply traffic monitoring

1050
01:07:41,966 --> 01:07:45,658
is also important. I should have probably included into presupply

1051
01:07:45,694 --> 01:07:49,382
protection as well. And principle of list privilege on build agents

1052
01:07:49,436 --> 01:07:52,758
and nodes. This is very important,

1053
01:07:52,844 --> 01:07:56,566
especially if you are working with not FML nodes that

1054
01:07:56,588 --> 01:08:00,086
are just spun up, they run some pipeline and they're

1055
01:08:00,118 --> 01:08:03,334
dying afterwards. If you're using persistent nodes, like for instance

1056
01:08:03,382 --> 01:08:07,334
Jenkins build agents, if you are using a high privilege

1057
01:08:07,382 --> 01:08:11,130
user that has pseudo or root privileges,

1058
01:08:11,550 --> 01:08:14,638
I've seen such cases before moving to security. I used to be a

1059
01:08:14,644 --> 01:08:18,080
DevOps engineer and I've seen people doing such stuff.

1060
01:08:18,690 --> 01:08:21,546
If the malicious package will land on such node,

1061
01:08:21,578 --> 01:08:24,754
and if package will have implants that will

1062
01:08:24,792 --> 01:08:29,330
enumerate the system for any sort of a privilege escalation capabilities,

1063
01:08:33,750 --> 01:08:37,062
you might get yourself in a big trouble because you will first of all

1064
01:08:37,116 --> 01:08:40,822
allow attacker to get into your environment, but you will also allow them

1065
01:08:40,876 --> 01:08:44,834
for an easier lateral movement and data stealing,

1066
01:08:44,882 --> 01:08:48,934
and you will basically give them like a golden key

1067
01:08:48,972 --> 01:08:52,854
to the city. Samgrep Sca spa. So why

1068
01:08:52,892 --> 01:08:56,746
specifically Semgrap? So Semgrap, it's not an advertisement of Samgrep. I just

1069
01:08:56,768 --> 01:08:59,974
found that Samgrep has a really great collection for the static analysis.

1070
01:09:00,102 --> 01:09:03,546
So if you can do Semgrap, if you

1071
01:09:03,568 --> 01:09:07,086
can do in combination with any SCA, especially if

1072
01:09:07,108 --> 01:09:11,354
you just use Semgrap and its SCA capabilities, and if you use Zbom

1073
01:09:11,402 --> 01:09:14,714
and you integrate it in your CI CD pipelines, especially if you have a dedicated

1074
01:09:14,762 --> 01:09:18,514
CI CD pipeline that will download packages from the Internet and check

1075
01:09:18,552 --> 01:09:22,082
them if developers request them, that's the best.

1076
01:09:22,136 --> 01:09:25,794
Because if you have spom, and that spom indicates a

1077
01:09:25,832 --> 01:09:29,474
version of a package with a certain hash calculated

1078
01:09:29,522 --> 01:09:33,446
for that version, and if it happened that Spom now reports a

1079
01:09:33,468 --> 01:09:36,546
different hash for the same version, most likely something fishy

1080
01:09:36,578 --> 01:09:40,346
has happened. Most likely somebody changed the

1081
01:09:40,368 --> 01:09:43,626
package, overwritten it, whatever. What was done to

1082
01:09:43,648 --> 01:09:47,050
it, and most likely there's something malicious happened in the background.

1083
01:09:47,550 --> 01:09:51,194
One of the best examples of the protection for developers

1084
01:09:51,242 --> 01:09:55,006
I've seen is when two

1085
01:09:55,028 --> 01:09:58,430
pipi servers were living in parallel,

1086
01:09:59,330 --> 01:10:02,906
one of them was acting as an interim

1087
01:10:02,938 --> 01:10:06,498
proxy. So when developers requested the new package that

1088
01:10:06,584 --> 01:10:10,126
hasn't been present in the production Pipi mirror, in private production

1089
01:10:10,158 --> 01:10:13,646
Pipi mirror, that package was downloaded from Internet.

1090
01:10:13,678 --> 01:10:16,626
It was placed into the interim mirror.

1091
01:10:16,818 --> 01:10:20,166
Then scanners were executed against that

1092
01:10:20,188 --> 01:10:23,734
package, and when it was proven that it's not malicious, only then

1093
01:10:23,772 --> 01:10:27,350
it was released and pushed into the production mirror. And only

1094
01:10:27,420 --> 01:10:31,734
then developers had a chance to download it to their machines. And all developers

1095
01:10:31,782 --> 01:10:35,046
were forced to use only the production

1096
01:10:35,078 --> 01:10:38,454
pipe mirror. They were not allowed to go to pipi.org.

1097
01:10:38,582 --> 01:10:42,174
While it introduced certain delay to download the package the first time,

1098
01:10:42,292 --> 01:10:46,302
it actually allowed to detect about

1099
01:10:46,356 --> 01:10:50,478
like a dozen of the real malicious packages that

1100
01:10:50,564 --> 01:10:54,138
appeared in the interim mirror when developers simply type squatted.

1101
01:10:54,234 --> 01:10:57,438
So as you can see, you can combine those defenses and protections.

1102
01:10:57,614 --> 01:11:01,362
And antiviruses in the rs are also important not only

1103
01:11:01,416 --> 01:11:05,106
on your development machines, but also when you're working on the

1104
01:11:05,128 --> 01:11:08,806
service. So bit happened that package landed on

1105
01:11:08,828 --> 01:11:12,086
the build agent, which is basically a server. And if it's not an FML but

1106
01:11:12,108 --> 01:11:15,880
a persistent one, and imagine if there's the same

1107
01:11:16,890 --> 01:11:20,738
remote access troyon being executed through an Ngrok tunnel.

1108
01:11:20,834 --> 01:11:24,502
Well, it's better to have EDR and just kill such events

1109
01:11:24,646 --> 01:11:27,914
even before they happen or as soon as they happen. So yeah,

1110
01:11:27,952 --> 01:11:31,398
pre supply and post supply protection please look at this. There are many,

1111
01:11:31,424 --> 01:11:35,054
many different protection methods and products. Again,

1112
01:11:35,092 --> 01:11:38,686
I'm not advertising any of the products I've mentioned, but this

1113
01:11:38,708 --> 01:11:42,110
is what I worked with and they generally generate really good results.

1114
01:11:42,610 --> 01:11:45,822
Okay, last but not least, very important credits

1115
01:11:45,876 --> 01:11:49,234
and references. First of all, I would like to give some credit and

1116
01:11:49,272 --> 01:11:52,766
thank you to my employer epamsystems Ltd for supporting my initiatives

1117
01:11:52,798 --> 01:11:56,514
on security, researching and public speaking. I would like to say a

1118
01:11:56,552 --> 01:11:59,654
massive thank you to guys from evil Bunny Road. CTF team.

1119
01:11:59,692 --> 01:12:03,314
This is a CTF team I'm a member

1120
01:12:03,362 --> 01:12:06,838
of and we are having a lot of fun researching stuff together. And thanks for

1121
01:12:06,844 --> 01:12:10,486
the guys for sharing their expertise. And a very big thank you

1122
01:12:10,508 --> 01:12:13,958
to flat icon.com because I use their icons

1123
01:12:13,974 --> 01:12:17,626
and graphics in some of the diagrams in

1124
01:12:17,648 --> 01:12:20,890
this slide deck. And yeah,

1125
01:12:20,960 --> 01:12:24,746
they asking for the credit mentioned in the credit section.

1126
01:12:24,778 --> 01:12:28,762
So thanks guys for the graphics. They're amazing references

1127
01:12:28,826 --> 01:12:32,670
and additional rating. I collected some materials that are used in the preparation and

1128
01:12:32,740 --> 01:12:37,346
also just to give a bit of sort

1129
01:12:37,368 --> 01:12:40,866
of additional materials that you can investigate on your own.

1130
01:12:40,968 --> 01:12:44,386
And I've mentioned some of the tools and techniques and the sources I used

1131
01:12:44,408 --> 01:12:48,520
for this research, so please go through them. They're very interesting.

1132
01:12:49,370 --> 01:12:53,302
Last but not least, thank you all for joining this

1133
01:12:53,356 --> 01:12:56,758
session and this conference. And thank you can 42

1134
01:12:56,844 --> 01:12:59,834
for the invitation. I hope you guys enjoyed it.

1135
01:12:59,952 --> 01:13:03,450
And as soon as you will check this talk,

1136
01:13:03,520 --> 01:13:07,958
please use one of these two QR codes. Go to my GitHub repo

1137
01:13:08,054 --> 01:13:11,802
like I've mentioned before. I will release all these samples

1138
01:13:11,866 --> 01:13:15,774
of the code so you can go through them and play

1139
01:13:15,812 --> 01:13:18,942
with them on your own. Please, if during

1140
01:13:18,996 --> 01:13:22,960
this talk you found that I made,

1141
01:13:23,810 --> 01:13:27,630
I don't know, some sort of like a misstatement, or I made an error,

1142
01:13:27,710 --> 01:13:31,694
or you believe that something is not true or something is not super accurate,

1143
01:13:31,822 --> 01:13:35,650
or you maybe know an interesting technique that I didn't mention,

1144
01:13:35,800 --> 01:13:39,394
or you maybe know how to improve the stock in the future. Please do

1145
01:13:39,432 --> 01:13:44,190
get in touch. And also, if you're generally interested in supply chain protection,

1146
01:13:44,350 --> 01:13:47,594
please do get in touch. I think there's a lot of stuff we can discuss

1147
01:13:47,632 --> 01:13:49,980
and there's a lot of stuff that we can help each other with.

1148
01:13:50,350 --> 01:13:53,674
So with this, I will wrap up this

1149
01:13:53,712 --> 01:13:57,738
talk. Thank you once again for joining. I hope you enjoyed it and

1150
01:13:57,824 --> 01:14:01,062
see you soon. Stay safe and enjoy the rest of this conference.

1151
01:14:01,206 --> 01:14:01,430
Bye.

