WEBVTT

00:20.170 --> 00:23.934
Hello everyone. My name is Vipin Jain and I am

00:23.972 --> 00:27.254
speaking from a beautiful city of India called as

00:27.292 --> 00:30.950
Jaipur. It is also called as the pink city of India.

00:32.490 --> 00:35.426
As already told in my introduction,

00:35.538 --> 00:39.482
I work for a company called as Metacube Software. As a

00:39.616 --> 00:42.570
senior delivery manager and head of the QA department.

00:42.910 --> 00:47.386
IoT is my second love after my job

00:47.488 --> 00:51.082
as a delivery manager. And this has been always

00:51.136 --> 00:55.098
a challenge in front of me. How to develop a strategy

00:55.194 --> 00:57.920
to test IoT end to end.

00:58.290 --> 01:02.122
Now, end to end testing, we all know where we do the system testing,

01:02.186 --> 01:05.906
the integration and unit testing. But since IoT is

01:05.928 --> 01:09.106
not just a single software or a single hardware, it is a

01:09.128 --> 01:11.410
mesh of hardware, software,

01:11.990 --> 01:15.800
lots of protocols, there are APIs, there is

01:17.370 --> 01:20.166
a huge bandwidth connection between them.

01:20.348 --> 01:24.630
So I always ponder about how to test or how to develop

01:24.780 --> 01:28.806
a strategy for embedded systems, particularly Iot.

01:28.998 --> 01:32.666
About end to end testing. So in my talk end to

01:32.688 --> 01:35.446
end testing strategy for embedded systems,

01:35.558 --> 01:39.034
I will give you certain suggestions from my

01:39.072 --> 01:43.230
experiences. So let's move forward now.

01:43.380 --> 01:46.974
First and foremost question that comes to our mind is why do we

01:47.012 --> 01:50.410
even need to end to end test IoT setups

01:50.490 --> 01:54.114
when we can test each aspect of the application? So we can

01:54.152 --> 01:57.854
test software separately, we can test hardware, protocols,

01:57.982 --> 02:01.074
firmware, everything can be tested in a separate way.

02:01.192 --> 02:05.182
So why we need to perform or develop

02:05.256 --> 02:09.062
a strategy to test the IoT application

02:09.196 --> 02:12.294
end to end? Because we do not

02:12.332 --> 02:16.502
want to be in such a situation. This is a brilliant example

02:16.636 --> 02:20.374
of evolving an end to end solutions

02:20.502 --> 02:24.394
without developing a strategy. And you can end up in

02:24.432 --> 02:28.554
such a situation. So let's begin by

02:28.592 --> 02:31.978
a very brief history. So in the very early phase,

02:32.074 --> 02:35.530
IoT was developed as a two layer architecture

02:35.690 --> 02:39.578
where you have lots of devices and then you have lots

02:39.594 --> 02:43.554
of sensors or the things. IoT is Internet of things,

02:43.672 --> 02:46.900
so lot of things which produced data,

02:47.270 --> 02:50.610
and there is a two way combination between them

02:50.680 --> 02:54.354
and the cloud and the devices. As the application

02:54.472 --> 02:57.938
started getting complex, the IoT infrastructure

02:58.114 --> 03:01.622
or the architecture also started becoming complex. And then

03:01.676 --> 03:05.602
we introduced the third layer. And hence IoT

03:05.666 --> 03:09.574
became a three layer architecture. Where there is an application layer,

03:09.622 --> 03:12.970
a transportation layer and an interception layer,

03:13.470 --> 03:17.382
the things become more complex, the infrastructure becomes more complex,

03:17.446 --> 03:21.018
and similarly the software has become more complex. And ultimately,

03:21.114 --> 03:22.480
after lots of,

03:25.170 --> 03:27.920
I would say development and lots of thinking,

03:28.530 --> 03:32.202
a new seven layered architecture was introduced.

03:32.266 --> 03:35.298
And this is the one which is currently being used.

03:35.464 --> 03:39.314
If I quickly take you to what this seven layers architecture means,

03:39.512 --> 03:43.234
these are the seven layers where the lowest level or the

03:43.272 --> 03:46.374
things which produce the data, they are the

03:46.412 --> 03:49.602
physical device layers. Then there is a connectivity layers,

03:49.666 --> 03:53.538
edge computing layer, data accumulation, data abstraction,

03:53.634 --> 03:56.774
application layer and finally the collaboration and

03:56.812 --> 04:00.186
process layer. Now all these layers were introduced because

04:00.288 --> 04:03.962
the modern day applications are very complex and lot of

04:04.016 --> 04:06.490
communication happened between layers.

04:07.070 --> 04:11.246
So then in order to develop it or in order to test it,

04:11.348 --> 04:15.374
we need to apply our logics at every layer. And this

04:15.412 --> 04:18.590
is the base of my strategy. Now,

04:18.660 --> 04:21.470
what are the challenges in IoT testing?

04:21.890 --> 04:25.380
As I've just explained, IoT is a multilayered system.

04:26.070 --> 04:30.434
Then there are lots of dissimilar technologies being

04:30.472 --> 04:33.794
used in developing these systems, changing from very low

04:33.832 --> 04:37.990
level microcontrollers and very high level server programming.

04:38.330 --> 04:41.926
The functionalities span across multiple layers. Hence the

04:41.948 --> 04:44.520
communication between two layers become very important.

04:45.290 --> 04:49.802
Then the devices follow protocols, but then different

04:49.856 --> 04:53.606
protocols can be applicable to different devices,

04:53.718 --> 04:56.890
which means the protocols can become incompatible.

04:57.470 --> 05:00.986
The functionalities were developed by different teams or the teams

05:01.018 --> 05:04.830
which are sitting geographically very apart. So hence,

05:07.730 --> 05:11.598
because those teams are not working together, sitting together,

05:11.764 --> 05:14.830
there are scenarios where the use cases,

05:14.910 --> 05:18.658
they do not match with each other. The solution looks

05:18.744 --> 05:22.514
simpler because there is a very limited UI, but below that

05:22.552 --> 05:25.758
interface there is a very, very complex architecture

05:25.934 --> 05:29.478
and code is very less to justify your testing because

05:29.564 --> 05:33.414
I can write 100 test cases and can say that look, everything is

05:33.452 --> 05:36.886
working fine, but those 100 test cases are actually

05:36.988 --> 05:40.394
just testing the code which is written, which can be

05:40.432 --> 05:44.406
only 10% of the entire architecture and not enough test cases

05:44.438 --> 05:47.830
are written to test that architecture.

05:47.990 --> 05:51.962
So these are some challenges which are different from the challenges

05:52.026 --> 05:55.710
we have faced in testing noniot applications.

05:56.210 --> 05:59.582
So what is the general practice when we start talking about

05:59.636 --> 06:03.714
e two e testing? Organizations use e two e testing at

06:03.752 --> 06:06.930
system level. They follow the most logical option

06:07.000 --> 06:10.322
available, like assemble the system fully and then test

06:10.376 --> 06:13.966
it, which gives a realistic simulation of the end user

06:13.998 --> 06:17.574
experience. But the issues that they face, as I

06:17.612 --> 06:21.366
explained earlier, also systems cannot simulate all

06:21.388 --> 06:24.774
the situations. Building such a system is very time

06:24.812 --> 06:27.922
consuming and costly. You need to gather every component,

06:28.066 --> 06:31.194
make sure all the components are connected with each other,

06:31.312 --> 06:35.034
the protocols are compatible and so on. Testing become

06:35.072 --> 06:38.694
very changing as it involves many applications working in tandem.

06:38.742 --> 06:41.180
APIs become very, very important here.

06:41.730 --> 06:45.342
The error detection happens in late cycle because everything is

06:45.396 --> 06:49.166
made, then it has been simulated and now if you

06:49.188 --> 06:53.066
can find an error then the entire setup or entire development

06:53.098 --> 06:56.782
process Iot needs to be reworked upon. This ultimately

06:56.846 --> 07:00.914
results in a lot of delay in the time to market and

07:01.032 --> 07:04.190
the responses to that application are very verified

07:04.270 --> 07:06.950
and they become very difficult to handle.

07:07.450 --> 07:11.074
I take a very simple example which is called as a blood glucose

07:11.122 --> 07:15.000
tracking system. Now what happens here is,

07:16.570 --> 07:20.426
as you can see in this diagram, there are two

07:20.448 --> 07:23.626
variables. One is the glucose sensor and the other

07:23.648 --> 07:27.434
is the insulin injector. And then there is a smartphone which

07:27.472 --> 07:31.194
acts as the middleware. So very

07:31.232 --> 07:34.310
simply put, there is a glucose sensor,

07:34.390 --> 07:38.170
like a small, I would say a patch which has a chip

07:38.250 --> 07:41.614
and that is inserted on. There's a small

07:41.652 --> 07:45.314
pin inserted inside your stomach and the patch is stuck on

07:45.352 --> 07:49.166
your stomach. And then it is constantly checking the blood sugar

07:49.198 --> 07:52.754
level. If the sugar level goes above or

07:52.792 --> 07:56.690
below a certain threshold value, it sends a message to

07:56.760 --> 08:00.322
the mobile. And from the mobile which acts as a middleware,

08:00.386 --> 08:04.022
it goes to cloud where lot of healthcare management system

08:04.076 --> 08:07.930
takes place. And as a result it sends an instruction back

08:08.000 --> 08:11.062
to the insulin pump if required,

08:11.206 --> 08:14.806
so that the pump gets activated and some insulin is secreted

08:14.838 --> 08:17.130
inside the body of the patient.

08:17.710 --> 08:21.102
So he gets immediate attention despite of

08:21.236 --> 08:24.638
where he is standing or sitting in

08:24.644 --> 08:28.350
the world. So this is the blood dugout tracking system

08:28.420 --> 08:32.254
that I want to explain. So this sensor monitor the

08:32.292 --> 08:35.854
blood for certain parameter, and the insulin injector follows

08:35.902 --> 08:39.234
a programmed schedule. But the problem is, if it is

08:39.272 --> 08:43.234
disconnected from the other components of the system, then there

08:43.272 --> 08:46.674
can be issues, right? And we'll see

08:46.712 --> 08:49.880
each issue one by one. Let's see this diagram in detail.

08:50.490 --> 08:54.150
So now you can see all the movements of the data

08:54.220 --> 08:57.946
and the instructions between various places. And let me explain each one

08:57.968 --> 09:01.334
of them. So, as I mentioned, the smartphone app serves

09:01.382 --> 09:05.334
as a middleware. And in addition to providing simple analysis

09:05.382 --> 09:09.862
to the user, the app forwards glucose level information

09:10.016 --> 09:13.870
to cloudbased healthcare system for additional processing.

09:14.370 --> 09:17.678
This cloud application compares the current measurement to

09:17.684 --> 09:21.802
the historical data of the patient and perform advanced analysis.

09:21.946 --> 09:26.350
And IoT constantly keeps looking for some unwanted patterns.

09:26.510 --> 09:30.034
If any unwanted pattern is found and IoT can lead

09:30.072 --> 09:33.806
to a potential danger, the system sends a warning directly

09:33.838 --> 09:37.030
to the user or reports to a human medical staff.

09:37.450 --> 09:40.870
Specialized medical consultant can immediately analyze the data

09:40.940 --> 09:44.754
and decides whether or not a special alert needs to be generated

09:44.802 --> 09:47.986
for the patient. The patient receives an alarm

09:48.018 --> 09:51.782
and guidance for the next steps, which can include change in the medication

09:51.846 --> 09:54.742
dosing. After the patient's approval,

09:54.806 --> 09:57.290
the change are delivered to the injector.

09:57.630 --> 10:01.258
But there can be a scenario where the patient is IoT able to respond.

10:01.354 --> 10:05.050
In that case, the medical consultants can send the GPS

10:05.130 --> 10:09.098
information packaged with the smartphone data to send an ambulance.

10:09.274 --> 10:13.250
Your mobile's automation can be tracked and

10:13.320 --> 10:16.100
immediate medical help can be sent.

10:16.790 --> 10:20.418
Right? So this is the entire

10:20.504 --> 10:24.322
blood tracking system diagram which I just explained. So this healthcare system

10:24.376 --> 10:28.050
covers everything here the phone acts as the middleware

10:28.210 --> 10:31.878
and immediate helps from the doctor to the

10:31.884 --> 10:36.086
patient. Can happen if the healthcare system alerts this

10:36.188 --> 10:40.010
and all this data gets recorded in the cloud, so that the next time

10:40.080 --> 10:43.862
something happens, it is again matched to the historical

10:43.926 --> 10:48.214
data which is already present. Let's see some wider scenarios.

10:48.262 --> 10:52.586
So what is the basic use case here? The blood sensor is simulated,

10:52.778 --> 10:56.346
the data package is selected, the data moves

10:56.378 --> 10:59.886
to the cloud, the cloud generate alerts. After comparing the

10:59.908 --> 11:03.046
current data with the existing data, the medical

11:03.098 --> 11:06.386
staff responds to the alert either by injecting the

11:06.408 --> 11:10.494
insulin or by changing the dose of the insulin, or by alerting

11:10.542 --> 11:13.490
some medical staff and ambulance nearby.

11:13.830 --> 11:17.922
The patient also receives those alert and notifications and ultimately

11:17.986 --> 11:21.682
the injection schedule and the injecting of insulin

11:21.746 --> 11:24.230
is completely automated.

11:24.730 --> 11:28.140
And all of these things still have to follow,

11:28.590 --> 11:32.842
still have to cater to these market requirements. Test early

11:32.896 --> 11:37.210
and test often speed versus quality time to market automation.

11:37.710 --> 11:41.134
We need to still perform all of these. But this is

11:41.172 --> 11:45.086
a typical IoT application. And if you see

11:45.188 --> 11:48.158
there is a cloud storage, there are data moving,

11:48.244 --> 11:51.706
there are bandwidth involved, there are devices,

11:51.898 --> 11:55.554
there is mobile, there is Internet speeds, all of

11:55.592 --> 11:59.234
these need to be tested. And then only we can

11:59.272 --> 12:03.074
say that I have what is called as an end

12:03.112 --> 12:06.590
to end testing strategy for testing

12:06.670 --> 12:09.830
blood glucose patient monitoring systems.

12:10.250 --> 12:13.686
So what is the solution, how to perform these kind of

12:13.708 --> 12:17.422
testing? Deconstruct the system into layers

12:17.506 --> 12:21.018
for more effective testing. So rather than taking the entire

12:21.104 --> 12:24.774
application as a whole, break it down into perception layer,

12:24.822 --> 12:29.142
network layer, middlewares, business layer and application layer.

12:29.286 --> 12:32.634
Your perception layer consists of the physical objects,

12:32.762 --> 12:36.426
sensors. The network layer consists of the transmissions,

12:36.538 --> 12:39.786
three g, four g. The middleware layers consist

12:39.818 --> 12:43.238
of information, process, action, the storage,

12:43.434 --> 12:47.106
whereas the business layer, it takes a look at the analytics and

12:47.128 --> 12:50.098
flowcharts to see the data. And finally,

12:50.184 --> 12:53.602
the application layer where the smart applications and their

12:53.656 --> 12:56.886
management resides. And then

12:56.988 --> 13:00.934
in each layer, isolate the components and test early.

13:01.132 --> 13:04.466
So if every layer just separate

13:04.498 --> 13:09.094
out the components. So your wireless, IoT devices, IoT smartphone,

13:09.142 --> 13:12.250
laptops, security gateways, security devices,

13:12.670 --> 13:16.154
just separate them and then test each one of them.

13:16.272 --> 13:19.702
Few are already required as tested by their vendors

13:19.766 --> 13:22.430
and few we have to test as testers.

13:23.250 --> 13:26.782
Right? So this is the two things

13:26.836 --> 13:30.666
that I want to explain. And now let's

13:30.698 --> 13:33.946
move forward. Deconstruct the system into

13:33.988 --> 13:38.110
layers, which is the first one. What are the primary challenges?

13:38.270 --> 13:41.554
Designing the system in such a way that it can

13:41.592 --> 13:45.006
be conducive to deconstruct in smaller blocks with well

13:45.048 --> 13:48.834
defined interfaces. Just like we say that in manual

13:48.882 --> 13:52.278
and automation testing automation needs to be built

13:52.364 --> 13:56.450
into the code so that when we automation engineers

13:56.530 --> 14:00.326
want to perform it, then they can do it. Similarly,

14:00.438 --> 14:04.074
the system should be designed here in such a way

14:04.192 --> 14:07.802
that it can be broken down or deconstructed into

14:07.856 --> 14:11.790
smaller blocks, and each block should have a well defined interface.

14:12.370 --> 14:16.030
And then you have to build automation around these blocks.

14:16.450 --> 14:20.522
And there is always a discussion that goes on between unit testing

14:20.586 --> 14:24.194
versus functional testing. So in general, a test

14:24.232 --> 14:27.182
plan should include a combination of unit testing,

14:27.246 --> 14:31.326
integration testing, and endtoend testing. The proportion

14:31.358 --> 14:35.026
of unit test to integration test may vary depending on

14:35.048 --> 14:39.110
the complexity of the solution. The more complex the solutions is,

14:39.180 --> 14:41.560
the more important unit tests become,

14:41.930 --> 14:45.254
because as the complexity grows, it become more and

14:45.292 --> 14:49.082
more difficult to simulate high level interfaces that

14:49.136 --> 14:53.142
ensure that various paths are executed. Unit testing,

14:53.206 --> 14:56.426
though, is expensive. We all know that, and it is expensive in

14:56.448 --> 15:00.186
terms of time and resources. Therefore, someone with a

15:00.208 --> 15:03.562
programmatic experience, for example, an engineer,

15:03.626 --> 15:07.758
must write the test, and because they are closely tied to the code,

15:07.844 --> 15:11.566
unit tests are also brittle, which means changing in

15:11.588 --> 15:15.550
a code could easily impact them. So an engineer is required

15:15.710 --> 15:19.394
consistently to maintain the tests as you move

15:19.432 --> 15:23.374
further up the stack. Function level tests are less prone to breakage,

15:23.502 --> 15:28.046
but it becomes hard to identify systematic issues when

15:28.088 --> 15:31.382
a unit test fails. On the other hand, identifying the root cause

15:31.436 --> 15:35.026
is very simpler, so you have to actually do a trade

15:35.058 --> 15:38.454
off to find a balance or create a blended approach

15:38.582 --> 15:42.246
to see a balance between unit test and functional

15:42.278 --> 15:45.574
testing. So use a blended approach for testing

15:45.622 --> 15:49.286
IoT, deconstruct the system into layers,

15:49.478 --> 15:52.638
right. So what we want to discuss here.

15:52.804 --> 15:56.762
So for IoT solutions, the first natural layer

15:56.826 --> 16:00.026
contains the wireless communication components.

16:00.218 --> 16:03.758
This is where the subsystem interacts with the APIs.

16:03.934 --> 16:07.150
Now, underneath the APIs are messaging protocols

16:07.230 --> 16:11.262
such as MQTT or HTTP, which send payloads

16:11.406 --> 16:14.446
like JSON and Rest, as well as the proprietary

16:14.478 --> 16:18.038
protocol and binary payloads. In the IoT world,

16:18.124 --> 16:21.814
the communication usually follows a

16:21.852 --> 16:25.640
publish subscribe model or a request response model.

16:26.010 --> 16:29.242
This model involves broadcasting data while other

16:29.296 --> 16:32.486
components listen for and then consume the published

16:32.518 --> 16:36.170
data and perform an action in request response model.

16:36.240 --> 16:40.338
We just send a message to the server directly and asynchronously

16:40.374 --> 16:43.678
waiting for a response. Automation is

16:43.684 --> 16:47.694
the key. What does that mean? To do

16:47.732 --> 16:51.214
this, you have to have a framework for simulating the

16:51.252 --> 16:55.198
sut system under test and verify its response,

16:55.294 --> 16:58.302
as shown here. For simple scenarios,

16:58.366 --> 17:02.046
Python or simpler steps can serve as service testing

17:02.078 --> 17:06.022
solutions. There are a number of stepping utilities that

17:06.076 --> 17:09.750
easily allow you to send payloads for testing purposes,

17:10.250 --> 17:13.606
but this tactic doesn't scale as the number

17:13.628 --> 17:16.920
of test scenarios grows from few hundred to few thousand,

17:17.390 --> 17:20.970
adding and changing the scripts become difficult and inefficient.

17:21.310 --> 17:24.634
So implementing more complex parameters is very

17:24.672 --> 17:28.774
difficult to do. With simple scripting tools.

17:28.902 --> 17:32.670
For smaller small sized things, it becomes very useful.

17:33.170 --> 17:35.950
You also can automate the server components.

17:36.450 --> 17:39.934
For example, you see this cloud healthcare system.

17:40.132 --> 17:44.034
There is this API layer. The message or the payload is sent

17:44.072 --> 17:48.226
to the services. The response comes back

17:48.408 --> 17:52.306
and then from the cloud two messages can go, one to

17:52.328 --> 17:55.526
the medical point location system and other to the

17:55.548 --> 17:59.094
medical staff consultation center. So this

17:59.132 --> 18:03.202
is a back end, right? The database contains all the historical

18:03.266 --> 18:07.218
data. The process is similar to testing the sensor.

18:07.394 --> 18:11.146
Simulate the system by sending a simulated package of data from

18:11.168 --> 18:14.330
the patient. Now the blood scan report,

18:14.400 --> 18:17.642
which comes back if it has some deviation, which means

18:17.696 --> 18:21.322
a warning needs to be produced. High priority warning

18:21.386 --> 18:25.310
involves human medical staff, low consultation. The warning message

18:25.380 --> 18:29.086
is sent back to the patient may contain information about the

18:29.108 --> 18:32.990
nearest hospital, urgent care or other medical facility.

18:33.430 --> 18:37.726
The testing framework will execute a number of test cases containing

18:37.758 --> 18:41.646
different values for different patients and expect specific warnings

18:41.678 --> 18:44.530
to be generated in the response.

18:45.110 --> 18:48.040
We can isolate the components and stress early,

18:48.650 --> 18:52.594
so let's also use a case here. Scan blood to determine

18:52.642 --> 18:55.926
glucose level we could potentially place the

18:55.948 --> 18:59.750
sensor probe in a liquid with a known level of glucose and other parameters

18:59.830 --> 19:03.382
corresponding to real blood, but this approach is neither

19:03.446 --> 19:07.014
practical nor it is scalable. A better approach

19:07.062 --> 19:10.826
would be to intercept the function call that reads from the

19:10.848 --> 19:14.554
probe and redirect it to the testware stub or mock

19:14.682 --> 19:18.874
for generating and simulating a response. It will eliminate

19:18.922 --> 19:22.766
the probe itself from the testing process while enabling the opportunity

19:22.948 --> 19:26.626
to perform automated testing of all the other parts of the

19:26.648 --> 19:30.194
system. A mock of the interaction needs to be

19:30.232 --> 19:32.820
installed to emulate a hardware function call.

19:33.350 --> 19:36.774
The stuff should be able to respond with reasonable values during the

19:36.812 --> 19:40.274
test process, using hard coded values or reading

19:40.322 --> 19:44.454
test data from an external data source. You also

19:44.492 --> 19:48.022
have to isolate the server side components, which again looks

19:48.076 --> 19:51.180
like the client side components, but there is some difference.

19:51.710 --> 19:55.046
For simple test cases, you can use a stuff that contains

19:55.078 --> 19:58.806
a node JS script to produce the standard responses.

19:58.998 --> 20:03.258
But for more advanced scenarios, a service virtualization

20:03.354 --> 20:07.098
tool can allow you to define a response depending

20:07.114 --> 20:10.718
on the input pattern. You can also use service

20:10.804 --> 20:14.338
virtualization to record actual traffic and replay it

20:14.344 --> 20:17.380
to simulate the real operations of a connected system.

20:17.750 --> 20:21.890
In some cases, you may want to switch even between a real

20:21.960 --> 20:25.254
system or a virtual asset. So a group of

20:25.292 --> 20:28.774
medical experts here are connected to this prioritized queue for

20:28.812 --> 20:32.742
consultation requests. The first person that becomes available,

20:32.876 --> 20:36.658
processes the next highest priority request

20:36.834 --> 20:40.394
to enable the automated testing, we need to replace this part

20:40.432 --> 20:43.718
of the system with a virtual equivalent.

20:43.894 --> 20:48.310
So this is how we can separate the components

20:48.390 --> 20:52.746
and then test them separately, whether they are the server side components

20:52.778 --> 20:55.630
or whether they are the client side components.

20:56.050 --> 21:00.042
So you have to remember a few things. IoT systems require

21:00.106 --> 21:03.490
thinking about the software quality in a larger scope.

21:03.830 --> 21:08.110
IoT solutions, such as our medical device examples,

21:08.270 --> 21:12.482
they are different from the normal systems because an

21:12.536 --> 21:16.230
individual feature may span multiple layers of the solution.

21:16.570 --> 21:20.200
Which means if we start testing these individual

21:21.290 --> 21:25.442
functionality, you actually have to traverse between various

21:25.506 --> 21:29.782
layers. That means the communication

21:29.846 --> 21:32.620
between any two layers becomes very important.

21:32.990 --> 21:36.794
The response request models or the published consume models are again

21:36.832 --> 21:40.534
very important because data gets published from one layer,

21:40.662 --> 21:45.002
may get consumed at some other layer. Similarly, the response

21:45.066 --> 21:49.054
sent or the request sent from one layer may receive a response from

21:49.092 --> 21:53.022
another layer. So at every layer we need to ensure that

21:53.076 --> 21:56.900
we should be able to send data or we should be able to receive data.

21:57.350 --> 22:01.182
Then delivering a high quality system, it requires testing capabilities

22:01.246 --> 22:05.394
at every layer. But the problem here is the low

22:05.432 --> 22:08.420
level layer has a lot of c code,

22:08.890 --> 22:11.954
the API testing layers, and then there is a backend

22:12.002 --> 22:15.590
part which is the very hard to access layer. So you have to develop

22:15.660 --> 22:19.306
strategy to cover all of these. You also have to

22:19.328 --> 22:22.682
consider a lot of cost which is associated with the system,

22:22.816 --> 22:25.530
because the reason is quite simple,

22:25.680 --> 22:28.922
a design failure that can outweigh the cost

22:28.976 --> 22:33.360
of deploying or testing solution. If you encounter such,

22:34.050 --> 22:38.282
ensure that you have a testing solution

22:38.426 --> 22:41.902
which enables you to isolate the test components or

22:41.956 --> 22:44.850
the API testing or the backend testing.

22:45.190 --> 22:49.218
So with this I come to the end of this talk.

22:49.384 --> 22:52.706
I hope you got some valuable information out of

22:52.728 --> 22:56.694
it. IoT testing is challenging, but it is not

22:56.732 --> 23:00.214
difficult. You have to upgrade yourself

23:00.332 --> 23:03.974
from your normal testings to IoT testing, and you also have to

23:04.012 --> 23:08.258
upskill yourself from testing softwares to testing hardwares.

23:08.354 --> 23:12.162
Firmwares have a mix of all kind of testing,

23:12.306 --> 23:15.990
and then you should be able to test Iot quite easily.

23:16.650 --> 23:19.430
Thank you. Thank you for hearing me patiently.

23:19.970 --> 23:22.700
I'm open to any kind of questions. Thank you.
