1
00:00:24,090 --> 00:00:27,030
Hi, let's talk about Unix shell.

2
00:00:27,370 --> 00:00:30,600
More specifically about what we could do better now,

3
00:00:30,970 --> 00:00:34,326
and even more specifically about what we could

4
00:00:34,428 --> 00:00:37,430
do better since the we didn't.

5
00:00:38,090 --> 00:00:42,662
I'm Ilya Sher. I'm a longtime bash user and

6
00:00:42,716 --> 00:00:45,330
I'm programming and I'm doing DevOps.

7
00:00:45,490 --> 00:00:49,618
But at 2013 I was fed up enough with this subpar user

8
00:00:49,634 --> 00:00:52,926
experience when using Bash. So I started working on

9
00:00:52,948 --> 00:00:56,734
my own shell. What's wrong with the shell? That would be the first question.

10
00:00:56,772 --> 00:00:59,338
CTO a person that started working on his own shell.

11
00:00:59,514 --> 00:01:03,278
Well, shell is basically two things. That's a

12
00:01:03,284 --> 00:01:07,346
programming language and a user interface. Both of

13
00:01:07,368 --> 00:01:11,074
them are not very good, I think. And the

14
00:01:11,112 --> 00:01:15,006
difference is that the first problem, that the programming language is not

15
00:01:15,048 --> 00:01:18,066
very good. I think this problem is understood.

16
00:01:18,258 --> 00:01:22,262
And I'm saying that judging based

17
00:01:22,316 --> 00:01:25,542
on other projects, they are actively working on

18
00:01:25,596 --> 00:01:29,350
fixing the programming language. There are several projects,

19
00:01:29,430 --> 00:01:32,618
they all agree with this problem of the

20
00:01:32,624 --> 00:01:35,722
programming language. They are all working on solving that.

21
00:01:35,776 --> 00:01:39,370
So that's why I assume this problem is widely understood.

22
00:01:41,170 --> 00:01:45,630
Basically the problem is syntax. Arcane syntax comes

23
00:01:45,700 --> 00:01:49,742
from too long ago. Error handling is

24
00:01:49,876 --> 00:01:53,778
afterthought, not very good, and lack of structured data,

25
00:01:53,864 --> 00:01:56,994
of course. So the big

26
00:01:57,112 --> 00:02:00,254
other issue is the user interface.

27
00:02:00,382 --> 00:02:04,558
And that's what I'm focusing on today. This talk is about user interface.

28
00:02:04,734 --> 00:02:07,670
I just mentioned the programming language to leave whats aside.

29
00:02:08,090 --> 00:02:12,166
And the user interface is basically the same as

30
00:02:12,188 --> 00:02:16,262
a telegraph. That means that in this paradigm you

31
00:02:16,316 --> 00:02:20,234
send text and you receive text. That's how you communication with

32
00:02:20,272 --> 00:02:24,118
the other end. The fact that the communication

33
00:02:24,214 --> 00:02:28,154
style of the shell and the telegraph, they are exactly the same

34
00:02:28,352 --> 00:02:32,430
is not a coincidence. It's a historical development.

35
00:02:32,930 --> 00:02:37,470
So let's overview how we got from telegraph

36
00:02:38,050 --> 00:02:41,246
to the shell today. Okay, so we

37
00:02:41,268 --> 00:02:44,514
had telegraph. Then somebody figured out,

38
00:02:44,552 --> 00:02:48,420
okay, that's not convenient. Let's replace this button with something

39
00:02:48,870 --> 00:02:52,514
more practical. They did keyboard and

40
00:02:52,552 --> 00:02:56,626
printer. So the device, which is called teleprinter,

41
00:02:56,818 --> 00:03:00,210
is basically a keyboard and a printer. To communication,

42
00:03:00,290 --> 00:03:04,114
you need to have two of these devices. They are cross

43
00:03:04,162 --> 00:03:07,994
connected, which means whatever you type on your

44
00:03:08,032 --> 00:03:11,510
end is coming out of the printer

45
00:03:11,590 --> 00:03:15,366
of the remote end, and whatever they type on their keyboard

46
00:03:15,478 --> 00:03:19,210
comes out on our end out of the printer.

47
00:03:19,710 --> 00:03:22,798
Then computers came and

48
00:03:22,884 --> 00:03:26,426
they were using punched cards. It was not very convenient.

49
00:03:26,618 --> 00:03:29,950
Somebody figured out, okay, we have teleprinter.

50
00:03:30,450 --> 00:03:33,540
Let's connect the teleprinter to the computer.

51
00:03:34,310 --> 00:03:36,260
And they did. And it worked.

52
00:03:37,190 --> 00:03:41,410
Then another incremental improvement video

53
00:03:41,480 --> 00:03:45,038
display unit. It looks like computer terminal,

54
00:03:45,134 --> 00:03:47,350
which we will see in a moment in the next slide.

55
00:03:49,290 --> 00:03:52,774
But it was exact replacement of

56
00:03:52,812 --> 00:03:56,326
paper. So if you had new text, it was added at the

57
00:03:56,348 --> 00:03:59,686
bottom. And all the other lines of the text were scrolled

58
00:03:59,718 --> 00:04:02,986
up a bit. And I could like to

59
00:04:03,008 --> 00:04:06,282
highlight whats all of these devices had.

60
00:04:06,336 --> 00:04:09,494
No conceptual breakthrough. They were better technologies,

61
00:04:09,542 --> 00:04:12,670
of course, but these were incremental improvements.

62
00:04:13,490 --> 00:04:16,874
Nobody said, okay, hold a moment, let's rethink

63
00:04:16,922 --> 00:04:20,080
the whole thing. This has got happened.

64
00:04:20,690 --> 00:04:25,122
When did we have technological breakthrough with

65
00:04:25,176 --> 00:04:29,154
these guys? This guy, VT 52,

66
00:04:29,272 --> 00:04:32,162
which was released in 74 or maybe 75,

67
00:04:32,216 --> 00:04:36,210
unclear, supported cursor movement.

68
00:04:36,870 --> 00:04:40,054
That means that you can go with the cursor to any

69
00:04:40,092 --> 00:04:44,262
location on the screen and overwrite the text that's there or

70
00:04:44,316 --> 00:04:46,840
clear it, which is more specific use case.

71
00:04:47,550 --> 00:04:51,082
And the reaction to that was as

72
00:04:51,136 --> 00:04:55,622
follows. Billjoy invented a text editor

73
00:04:55,766 --> 00:04:59,178
which was using this capability and basically

74
00:04:59,264 --> 00:05:02,700
brought the text editing to computers as we know it today.

75
00:05:03,390 --> 00:05:06,974
Which means the text is occupying the whole screen.

76
00:05:07,092 --> 00:05:10,590
And you got with your cursor to the point that you want to edit,

77
00:05:11,090 --> 00:05:15,070
and you edit the text there and it's replaced

78
00:05:15,230 --> 00:05:18,974
at that point. That is as opposed

79
00:05:19,022 --> 00:05:22,820
to previous text editors, which like the shell today

80
00:05:23,590 --> 00:05:27,602
had a command line interface. And you were typing comments

81
00:05:27,666 --> 00:05:31,286
such as add text, replace text, delete text. These are

82
00:05:31,308 --> 00:05:35,202
all comments that you were typing. And you could not edit

83
00:05:35,346 --> 00:05:38,826
the text at any point on the screen.

84
00:05:39,008 --> 00:05:42,918
You just had these comments how Unix shell reacted

85
00:05:42,934 --> 00:05:47,002
to this new capability? It didn't pretty

86
00:05:47,056 --> 00:05:50,506
much until this day. So we have the

87
00:05:50,528 --> 00:05:54,558
situation in the shell until this day

88
00:05:54,724 --> 00:05:58,026
that most of the screen is not actually interactive. It's treated

89
00:05:58,058 --> 00:06:02,080
like paper. So the text which is on the screen above the command line

90
00:06:02,450 --> 00:06:05,806
is not anything to the shell. The shell

91
00:06:05,838 --> 00:06:09,140
doesn't know about that. Shell cannot interact with that.

92
00:06:09,510 --> 00:06:12,894
And the only interactions that you have in the interactive

93
00:06:12,942 --> 00:06:16,626
shell is actually on one line. Sometimes you have

94
00:06:16,648 --> 00:06:20,200
completion. So it's like few lines, but basically it's one line.

95
00:06:20,650 --> 00:06:24,198
And I could like to fix that. I think that the screen

96
00:06:24,364 --> 00:06:27,880
can be interactive and we should catch up with this

97
00:06:28,270 --> 00:06:31,994
capability from the 75 and

98
00:06:32,192 --> 00:06:36,010
make this wall part interactive.

99
00:06:36,990 --> 00:06:38,860
How that would look like?

100
00:06:40,130 --> 00:06:43,594
Well, the screen will have textual

101
00:06:43,642 --> 00:06:47,374
representations of objects, somewhat like

102
00:06:47,412 --> 00:06:50,960
links on the web. The shell would

103
00:06:51,730 --> 00:06:55,058
trace the link between the text on the screen

104
00:06:55,144 --> 00:06:58,466
and the objects. And the objects will

105
00:06:58,488 --> 00:07:01,474
have description like, okay,

106
00:07:01,512 --> 00:07:04,926
we are of type that our unique id is that to display

107
00:07:04,958 --> 00:07:09,160
on the screen, we need to look like that. So we have this example.

108
00:07:09,690 --> 00:07:13,810
We have a file on the screen and a CI CD pipeline.

109
00:07:13,890 --> 00:07:17,590
In our case, AWS code pipeline. I'm not affiliated

110
00:07:19,550 --> 00:07:22,220
how the interaction would look like,

111
00:07:23,230 --> 00:07:27,530
let's say we want to interact with the code pipeline,

112
00:07:28,910 --> 00:07:32,826
since everything is semantic. When you start interaction

113
00:07:33,018 --> 00:07:37,150
with a search object on the screen, the shell can ask all the plugins

114
00:07:37,570 --> 00:07:41,054
that it has. Which one of you guys is

115
00:07:41,092 --> 00:07:44,522
handling objects of type code pipeline,

116
00:07:44,586 --> 00:07:48,142
by the way, it can be more than one. So when we create a menu

117
00:07:48,206 --> 00:07:51,586
for that object, the items in

118
00:07:51,608 --> 00:07:54,850
the menu come from different plugins or maybe one plugin.

119
00:07:55,770 --> 00:07:59,314
Also, these plugins can maybe provide the default

120
00:07:59,362 --> 00:08:03,174
action. So what would happen if you left click on the

121
00:08:03,212 --> 00:08:06,326
object, or if you navigate with the

122
00:08:06,348 --> 00:08:10,470
cursor and press enter? So this interaction

123
00:08:10,550 --> 00:08:14,442
that we have seen on the previous slide, it should be recorded because

124
00:08:14,496 --> 00:08:18,314
the, the problem with the web interface, which this

125
00:08:18,352 --> 00:08:22,046
interface moves into direction of the

126
00:08:22,068 --> 00:08:25,326
problem with the web interface is that you don't have a

127
00:08:25,348 --> 00:08:28,080
record of what you did, and that's very bad.

128
00:08:28,930 --> 00:08:32,320
No one wants to accept that for serious work.

129
00:08:32,690 --> 00:08:36,498
So if you did interact with something on the screen,

130
00:08:36,584 --> 00:08:40,654
this interaction should be recorded, not only recorded, but also immediately

131
00:08:40,702 --> 00:08:43,874
displayed to the user. And this

132
00:08:43,912 --> 00:08:47,670
recording should be on the highest semantic possible label.

133
00:08:50,090 --> 00:08:53,910
What do I mean by that? If you had several pipelines listed on that

134
00:08:53,980 --> 00:08:56,790
and we started to interact with the one that failed,

135
00:08:57,370 --> 00:09:00,746
the user interaction will be recorded as you are

136
00:09:00,768 --> 00:09:04,330
interacting now with a pipeline that has a status failed.

137
00:09:04,750 --> 00:09:08,134
Why is that important? Because next time, let's say tomorrow,

138
00:09:08,182 --> 00:09:12,126
you come to see these pipelines and another pipeline failed, and the

139
00:09:12,148 --> 00:09:15,582
flow that you were recording was actually looking at the failed one.

140
00:09:15,716 --> 00:09:19,310
So if tomorrow another pipeline fails,

141
00:09:19,890 --> 00:09:23,826
you will be looking at the failed pipeline. When you replay, you will not be

142
00:09:23,848 --> 00:09:26,980
looking at the same exact pipeline as you were looking today.

143
00:09:27,510 --> 00:09:31,134
Another example of why semantic

144
00:09:31,182 --> 00:09:33,810
recording and not literal recording,

145
00:09:34,470 --> 00:09:37,558
let's say you have instance with id one, two, three,

146
00:09:37,724 --> 00:09:41,446
and you are interacting with that instance. This id one

147
00:09:41,468 --> 00:09:45,266
CTO three is meaningless completely to the user. You're interacting

148
00:09:45,298 --> 00:09:49,322
with that instance, not because it whats particular id, but because

149
00:09:49,376 --> 00:09:53,482
it has some interesting property. For example, it has

150
00:09:53,536 --> 00:09:56,954
a name tag of something or some other tag with some

151
00:09:56,992 --> 00:10:00,746
particular value, or maybe it is residing

152
00:10:00,778 --> 00:10:04,254
in the VPC of an interest, or maybe

153
00:10:04,292 --> 00:10:08,062
it has a security group or some other different things,

154
00:10:08,196 --> 00:10:11,902
or some combination of this. And you need to record

155
00:10:11,956 --> 00:10:15,922
this interaction semantically. So tomorrow, when you have some

156
00:10:15,976 --> 00:10:19,394
slightly different situation, you will not have

157
00:10:19,432 --> 00:10:23,026
instance one, two, three, because it will be long gone. You will

158
00:10:23,048 --> 00:10:26,358
have some other id for that instance, and you want to interact with that

159
00:10:26,444 --> 00:10:29,606
instance, not the one that has id one,

160
00:10:29,628 --> 00:10:32,886
two, three. And to do all of

161
00:10:32,908 --> 00:10:36,374
that semantic understanding and semantic work

162
00:10:36,412 --> 00:10:40,106
with objects. What do we need to do? We need to

163
00:10:40,128 --> 00:10:44,022
understand the output and the typical concern

164
00:10:44,086 --> 00:10:47,850
or let's say objection or argument against that

165
00:10:47,920 --> 00:10:52,926
is, first of all, whats shell is got supposed to get into semantics and

166
00:10:53,108 --> 00:10:56,922
it's too much work. So I want to refute

167
00:10:56,986 --> 00:11:00,334
these two arguments immediately by

168
00:11:00,372 --> 00:11:03,770
looking at what we already have. Okay,

169
00:11:03,940 --> 00:11:07,214
let's look at exit code of a process. The shell

170
00:11:07,262 --> 00:11:11,086
has to understand that in order to do even the basic error

171
00:11:11,118 --> 00:11:14,606
handling. And the shell was understanding exit

172
00:11:14,638 --> 00:11:17,990
codes for a long, long time. At some point

173
00:11:18,140 --> 00:11:22,150
later in time, somebody added command line completion.

174
00:11:22,490 --> 00:11:26,214
This feature is very valued and it's very powerful and

175
00:11:26,252 --> 00:11:30,074
it's very practical and everybody uses it.

176
00:11:30,272 --> 00:11:31,660
And guess what?

177
00:11:33,150 --> 00:11:37,414
This needs semantic understanding of the programs

178
00:11:37,542 --> 00:11:41,118
that we are running. And it was quite a

179
00:11:41,124 --> 00:11:45,360
bit of work because we needed a kind of plugin for

180
00:11:46,210 --> 00:11:49,360
each of these programs. And it's done.

181
00:11:50,370 --> 00:11:55,294
We are looking at pretty much symmetrical

182
00:11:55,342 --> 00:11:59,694
feature, which will be roughly

183
00:11:59,742 --> 00:12:03,202
the same amount of work, or at least on the same order

184
00:12:03,256 --> 00:12:07,714
of magnitude of work. So that's why I think it's

185
00:12:07,762 --> 00:12:11,794
possible and it should be done. I would like to summarize what's

186
00:12:11,842 --> 00:12:14,934
important in the UI. What should

187
00:12:14,972 --> 00:12:18,746
be in the UI, first of all, is semantic understanding, and the more

188
00:12:18,768 --> 00:12:22,506
your program understands the data that it works with,

189
00:12:22,688 --> 00:12:25,340
the more powerful this program can be.

190
00:12:27,950 --> 00:12:31,818
If we compare, for example notepad in Windows

191
00:12:31,914 --> 00:12:35,680
and the jetbrains IDE, not affiliated jnbrains IDE,

192
00:12:36,050 --> 00:12:39,760
you can do way more with jetbrains IDE.

193
00:12:40,450 --> 00:12:44,042
You can edit programs in both of them, right? But the IDE

194
00:12:44,116 --> 00:12:47,406
understands way more of the semantics

195
00:12:47,518 --> 00:12:51,460
of the text that we are working with. Also, if you take

196
00:12:52,390 --> 00:12:56,198
for example middle ground, like Vi, it's not a complete id.

197
00:12:56,364 --> 00:12:59,974
Well, it could be, but if configured properly. But let's say it's not

198
00:13:00,012 --> 00:13:03,446
a complete id. It has for example syntax highlighting, right?

199
00:13:03,468 --> 00:13:07,858
So it understands somewhat, right? And we have

200
00:13:08,044 --> 00:13:11,274
language plugins, they understand more. So all the

201
00:13:11,312 --> 00:13:14,954
power comes from semantic understanding of

202
00:13:14,992 --> 00:13:18,060
the data that you are working with. Also,

203
00:13:18,910 --> 00:13:22,266
semantics, well, we have exit codes, we have command

204
00:13:22,298 --> 00:13:25,962
line arguments. I think it's just like logical

205
00:13:26,026 --> 00:13:29,390
continuation to get more semantics into the shell and understand

206
00:13:29,460 --> 00:13:33,422
the output. Second big thing

207
00:13:33,556 --> 00:13:37,182
that should be in a shell, in the UI of the shell is

208
00:13:37,236 --> 00:13:41,166
capturing. You have to capture the interactions and

209
00:13:41,188 --> 00:13:44,734
you have to capture as much as you can, and you

210
00:13:44,772 --> 00:13:48,594
have to capture at the highest possible level of semantic

211
00:13:48,642 --> 00:13:52,630
understanding of the interaction. That's how your

212
00:13:52,780 --> 00:13:56,274
record replay facility could be powerful and applicable

213
00:13:56,322 --> 00:14:00,760
to other situations. That's it. Thank you,

214
00:14:01,210 --> 00:14:01,490
bye.

