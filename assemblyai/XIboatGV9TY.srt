1
00:00:25,570 --> 00:00:29,074
You. Hello and welcome to the Kubernetes

2
00:00:29,122 --> 00:00:32,306
Security Workshop with Msweeper. I'm your host, Jacob Beasley.

3
00:00:32,338 --> 00:00:35,800
I'll be teaching you a lot about Kubernetes and Kubernetes security.

4
00:00:36,250 --> 00:00:40,006
I've been using kubernetes since 2016, so that's a long time, kind of from the

5
00:00:40,028 --> 00:00:43,446
beginning. I've got experience building and supporting software in just about every

6
00:00:43,468 --> 00:00:47,026
tech stack you can think of, from Java net to rails to python

7
00:00:47,058 --> 00:00:50,686
to PHP. I'm a certified Kubernetes security specialist and

8
00:00:50,708 --> 00:00:54,206
administrator and a lead a team of people lead

9
00:00:54,228 --> 00:00:57,626
a team of site reliability engineers that has deployed many like hundreds

10
00:00:57,658 --> 00:01:01,630
of applications to Kubernetes. I also lead a

11
00:01:01,700 --> 00:01:05,578
team who this same team supports the open source project Msweeper,

12
00:01:05,674 --> 00:01:09,330
which you're going to be learning a lot about. It's essentially a Kubernetes security

13
00:01:09,400 --> 00:01:13,454
platform that takes all of the tools the Cloud native Foundation recommends,

14
00:01:13,502 --> 00:01:17,402
all the things the Linux foundation recommends, and gives you a user interface

15
00:01:17,486 --> 00:01:20,934
to manage all of those tools. All right, so before

16
00:01:20,972 --> 00:01:23,814
we get too deep into this, I want to talk about the four c's of

17
00:01:23,852 --> 00:01:25,880
cloud or container security.

18
00:01:28,090 --> 00:01:31,478
When you think about security in kubernetes, we think of it as

19
00:01:31,564 --> 00:01:35,974
a layered security model, starting with the cloud. The cloud is really the physical infrastructure

20
00:01:36,022 --> 00:01:39,546
and the way in which you manage the physical infrastructure. So how do you go

21
00:01:39,568 --> 00:01:43,094
from your bare metal to your virtual machines, which Kubernetes

22
00:01:43,142 --> 00:01:46,446
ultimately runs inside of? And that's really important because you have to think about things

23
00:01:46,468 --> 00:01:50,446
like network security and physical security. That's largely out of

24
00:01:50,468 --> 00:01:53,886
scope of this presentation because it isn't really anything specific to

25
00:01:53,908 --> 00:01:57,438
Kubernetes. The next layer is the Kubernetes cluster itself. So we'll

26
00:01:57,454 --> 00:02:00,786
be looking a lot about how do you secure that cluster. Then we'll look

27
00:02:00,808 --> 00:02:04,114
at the container. The container in Kubernetes is the unit of

28
00:02:04,152 --> 00:02:07,918
work. How do you make sure that the container isn't running with too many privileges

29
00:02:08,014 --> 00:02:11,446
and that you don't have applications that can escape or do bad things in that

30
00:02:11,468 --> 00:02:14,694
container? And then finally we have the code, and the code is the code

31
00:02:14,732 --> 00:02:18,054
that actually runs your application and

32
00:02:18,092 --> 00:02:21,530
we have different ways of validating that code doesn't have any obvious

33
00:02:21,600 --> 00:02:24,938
vulnerabilities. We're going to be doing a

34
00:02:24,944 --> 00:02:28,698
number of labs in the process of this presentation. So you're going

35
00:02:28,704 --> 00:02:32,326
to see demonstrations of Kubebench, Kubernetes, OPA,

36
00:02:32,358 --> 00:02:35,870
Gatekeeper, Cubesec, trivia and Project Falco.

37
00:02:36,450 --> 00:02:40,026
By the time we finish this presentation, these aren't going to be foreign concepts

38
00:02:40,058 --> 00:02:42,720
for you. They're going to be very real things that you'll be able to use.

39
00:02:43,110 --> 00:02:46,610
Now if you want to follow along with the lab, you can click on the

40
00:02:46,680 --> 00:02:50,162
View lab guide in the PowerPoint. You can also

41
00:02:50,216 --> 00:02:53,620
go to killercoda.com

42
00:02:53,990 --> 00:02:58,002
slash mindsweeper. Killercoda is a great

43
00:02:58,056 --> 00:03:02,002
resource for you to go spin up a Kubernetes cluster rapidly and play it trout

44
00:03:02,066 --> 00:03:05,186
different things in Kubernetes and we have a Msweeper

45
00:03:05,378 --> 00:03:08,838
lab that you can click on here and it will walk you through setting up

46
00:03:08,844 --> 00:03:11,914
a Msweeper cluster inside of killer coda and using every one of these

47
00:03:11,952 --> 00:03:15,926
tools that we'll be talking about today. It's a great way to introduce minesuper

48
00:03:15,958 --> 00:03:19,866
and try it out. All right, let's get started talking about

49
00:03:19,888 --> 00:03:23,040
the cloud. So what is Kubernetes exactly?

50
00:03:23,650 --> 00:03:27,374
Kubernetes is a container orchestration engine. What does

51
00:03:27,412 --> 00:03:31,214
that mean? With Kubernetes you can have many nodes which are where

52
00:03:31,252 --> 00:03:34,346
your applications run typically, and you can describe

53
00:03:34,378 --> 00:03:37,906
to Kubernetes what you want to deploy and then it will make

54
00:03:37,928 --> 00:03:41,794
it. So you typically do that by talking to its API using

55
00:03:41,912 --> 00:03:46,046
various command line tools and saying, here's what I want to deploy.

56
00:03:46,158 --> 00:03:49,474
And then it will plan out using various

57
00:03:49,522 --> 00:03:53,346
controllers like schedulers and things that are part of this API or connected

58
00:03:53,378 --> 00:03:57,126
to the API technically, where those things should go, and then it will

59
00:03:57,148 --> 00:04:01,430
make it. So on each of your node you have Kubelet and Kubeproxy.

60
00:04:01,510 --> 00:04:04,906
And Kubernetes talks to the API and says, what should I

61
00:04:04,928 --> 00:04:09,078
deploy? And then it deploys it. And then the Kubernetes proxy

62
00:04:09,174 --> 00:04:12,586
does all the networking for you. This is important because

63
00:04:12,608 --> 00:04:16,046
when you talk about Kubernetes security, you'll see I've circled the API in red.

64
00:04:16,148 --> 00:04:19,870
The majority of our efforts revolve around making sure that

65
00:04:19,940 --> 00:04:23,822
access to that API is limited and that users can't deploy

66
00:04:23,886 --> 00:04:27,442
bad things with that API. Here are some general

67
00:04:27,496 --> 00:04:30,866
best practices that aren't related to the configuration of

68
00:04:30,888 --> 00:04:34,562
the cluster itself, but they're things that are really important,

69
00:04:34,696 --> 00:04:38,194
right? So one of them is don't expose your API on the Internet. So typically

70
00:04:38,242 --> 00:04:41,638
people will put it behind a VPN or at minimum have some kind

71
00:04:41,644 --> 00:04:45,250
of IP address whitelist that just significantly reduces your footprint.

72
00:04:45,330 --> 00:04:49,750
If Kubernetes ever had a major zero day vulnerability,

73
00:04:50,330 --> 00:04:54,026
if you were behind a VPN, it's much harder for someone to find your

74
00:04:54,048 --> 00:04:57,322
cluster, connect to it and then exploit it.

75
00:04:57,376 --> 00:05:00,494
So far there haven't really been those, but if it ever did happen,

76
00:05:00,612 --> 00:05:04,350
you want to be behind a VPN. Number two, don't make everybody

77
00:05:04,420 --> 00:05:09,166
an administrator. So by default, if you use a

78
00:05:09,188 --> 00:05:12,714
lot of the different cloud managed Kubernetes environments,

79
00:05:12,842 --> 00:05:16,066
it's very easy to say grant someone administrative access to that

80
00:05:16,088 --> 00:05:19,554
environment, but you really want to limit that to only people who

81
00:05:19,592 --> 00:05:23,090
really need to have administrative access. It's very helpful.

82
00:05:24,950 --> 00:05:28,946
Most of the clouds have some kind of managed Kubernetes service with can active

83
00:05:28,978 --> 00:05:32,678
directory or some other kind of identity provider integrated where you

84
00:05:32,684 --> 00:05:36,838
can say this, say active directory group is granted access to this particular

85
00:05:36,924 --> 00:05:40,406
namespace or this particular role in Kubernetes. So keep

86
00:05:40,428 --> 00:05:43,594
that in mind. And the third one, I'll go back a little bit,

87
00:05:43,712 --> 00:05:47,018
I kind of brushed over this, but you'll see the API connects to this

88
00:05:47,024 --> 00:05:51,238
thing called ETCD. ETCD is a form of database

89
00:05:51,414 --> 00:05:54,666
and it's where all the data is stored. And that's

90
00:05:54,698 --> 00:05:58,366
important because you need to control access to

91
00:05:58,388 --> 00:06:01,534
that eTCD data store the same way you would anything else.

92
00:06:01,572 --> 00:06:04,858
So it's a file on disk, and if somebody had

93
00:06:04,884 --> 00:06:08,226
access to connect to that VM and modify the

94
00:06:08,248 --> 00:06:10,942
contents of that decrypt and modify etCd,

95
00:06:11,086 --> 00:06:14,546
then theoretically they could cause a lot of problems. So a good

96
00:06:14,568 --> 00:06:17,682
example of that would be if they were to delete things,

97
00:06:17,736 --> 00:06:20,838
they might be able to break your cluster or they might be able to create

98
00:06:20,924 --> 00:06:24,274
new things in Kubernetes, effectively bypassing the API.

99
00:06:24,322 --> 00:06:27,974
So that's something important that I want to point out. All right,

100
00:06:28,012 --> 00:06:31,498
moving on, cluster. So the first thing I want to talk

101
00:06:31,504 --> 00:06:35,450
about is role based access control. Role based access control

102
00:06:35,520 --> 00:06:38,922
simply means preventing people from having too much

103
00:06:38,976 --> 00:06:43,120
access to the cluster. I think we've all had that case of

104
00:06:43,890 --> 00:06:47,342
access denied errors when using Kubernetes, but you really

105
00:06:47,396 --> 00:06:50,638
should set up roles in Kubernetes. I want to talk about a

106
00:06:50,644 --> 00:06:54,034
few vocabulary terms. First of all, cluster roles and

107
00:06:54,072 --> 00:06:57,234
roles. The cluster roles are

108
00:06:57,272 --> 00:07:00,674
for all namespaces, the whole cluster, whereas roles are for

109
00:07:00,712 --> 00:07:04,194
specific namespaces. Namespaces is how we segregate different

110
00:07:04,232 --> 00:07:07,794
teams within your company or different workloads. Once you have a role,

111
00:07:07,842 --> 00:07:11,558
you then bind it to something. So you might say bind it

112
00:07:11,564 --> 00:07:15,266
to a group, to a user, et cetera. So there's cluster role bindings

113
00:07:15,298 --> 00:07:18,826
and role bindings. Users are not actually a thing that

114
00:07:18,848 --> 00:07:21,180
exists in Kubernetes directly. Rather,

115
00:07:21,790 --> 00:07:25,606
Kubernetes implicitly has integrations

116
00:07:25,718 --> 00:07:28,758
for external user stores, identity providers.

117
00:07:28,854 --> 00:07:31,446
So you typically bind to a group, you can even bind to a user,

118
00:07:31,478 --> 00:07:34,938
but you still have to have an identity provider hooked

119
00:07:34,954 --> 00:07:37,870
up to Kubernetes to allow that person to authenticate.

120
00:07:38,370 --> 00:07:41,946
Finally, service accounts allow applications to communicate with Kubernetes API.

121
00:07:41,978 --> 00:07:45,698
So we have the ability to create service accounts in Kubernetes and then

122
00:07:45,784 --> 00:07:49,806
you can generate certificates for those and somebody can use that certificate

123
00:07:49,838 --> 00:07:53,342
to connect to kubernetes. Here's an example role.

124
00:07:53,486 --> 00:07:57,438
So here we have kind role. We have some information about what namespace

125
00:07:57,454 --> 00:08:00,270
it is. Remember roles are namespace scope,

126
00:08:00,350 --> 00:08:04,210
whereas cluster roles are global. And you can see what APIs

127
00:08:04,370 --> 00:08:07,606
they can connect to. So if you want to know

128
00:08:07,628 --> 00:08:10,858
which APIs are available, look it up in the docs, it's not too bad.

129
00:08:10,944 --> 00:08:14,474
But here in this example you can see they can get watch and list

130
00:08:14,592 --> 00:08:17,946
pods in the pod reader or in the

131
00:08:17,968 --> 00:08:21,726
default namespace. That's an example role, but before you

132
00:08:21,748 --> 00:08:24,880
can use it you have to bind some user to it. So here's an example.

133
00:08:25,250 --> 00:08:29,674
A user or group, right? So role binding

134
00:08:29,802 --> 00:08:33,034
subject, Jane, right? So a user named Jane,

135
00:08:33,082 --> 00:08:37,246
it could also be a group and then the reference is

136
00:08:37,268 --> 00:08:40,286
a reference to the role that it's going to be related to. So the pod

137
00:08:40,318 --> 00:08:43,262
reader role that we created is bound to Jane.

138
00:08:43,326 --> 00:08:47,058
So now Jane is a pod reader. If you're wondering how to

139
00:08:47,064 --> 00:08:50,210
bind to things like active directory groups,

140
00:08:50,370 --> 00:08:54,166
check the documentation for your cloud providers. They generally have great examples and you pretty

141
00:08:54,188 --> 00:08:58,360
much just copy paste from the examples and set up your roles as needed.

142
00:08:58,810 --> 00:09:02,606
Next we're going to look at a couple of tools, Kubebench and Kubernetes.

143
00:09:02,658 --> 00:09:05,738
And I do want to back up and say, well why can't I just give

144
00:09:05,744 --> 00:09:09,034
you a checklist of things that you should do and you should just follow

145
00:09:09,072 --> 00:09:12,394
it? Why do I need tools to help me secure kubernetes?

146
00:09:12,522 --> 00:09:16,814
The answer is kubernetes is pretty sophisticated and

147
00:09:17,012 --> 00:09:20,234
for every other major technology, whether it's Linux or Windows,

148
00:09:20,362 --> 00:09:23,694
there are an established set of benchmarks that you should follow. And most

149
00:09:23,732 --> 00:09:27,278
companies that are successful securing Windows or Linux

150
00:09:27,374 --> 00:09:31,106
or Kubernetes will simply use the right tools to make sure

151
00:09:31,128 --> 00:09:34,494
they're following best practices. So we're going to be looking at Cubebench,

152
00:09:34,622 --> 00:09:38,098
which runs the center for Internet Security's

153
00:09:38,114 --> 00:09:39,350
benchmark suite.

154
00:09:41,770 --> 00:09:45,142
CIs has its own benchmark suite, but it's a paid product,

155
00:09:45,276 --> 00:09:48,534
whereas Qbench is open source and made by Aquasec, a great

156
00:09:48,572 --> 00:09:51,800
company. So Qbench is what we recommend,

157
00:09:52,350 --> 00:09:55,510
it's the one that, they're members of the Linux foundation,

158
00:09:55,590 --> 00:09:59,574
it's a CNCF project, it's very well respected.

159
00:09:59,622 --> 00:10:02,906
So Kubebench will connect to

160
00:10:02,928 --> 00:10:06,586
your cluster and run a battery of tests and give you feedback

161
00:10:06,618 --> 00:10:09,870
on how secure your cluster is. Cubehunter will do a pen test.

162
00:10:09,940 --> 00:10:13,438
It can even try to exploit things, although by default you do

163
00:10:13,444 --> 00:10:16,970
it in a passive mode. So let's demo these. Now you can

164
00:10:16,980 --> 00:10:19,698
run all these tools from the command line, but the way that we like to

165
00:10:19,704 --> 00:10:23,586
do it is we have msweeper installed in our cluster and

166
00:10:23,608 --> 00:10:27,826
when minesweeper is running I can see my list of clusters and

167
00:10:27,848 --> 00:10:32,230
I can click on Cube bench on the left navigation

168
00:10:32,970 --> 00:10:36,598
and I can see every time that I've run it.

169
00:10:36,764 --> 00:10:39,782
If you want to set up Kubebench in your cluster, you can click this run

170
00:10:39,836 --> 00:10:43,146
audit button and it'll help you figure out how

171
00:10:43,168 --> 00:10:46,362
to install it. We've created helm charts which are open

172
00:10:46,416 --> 00:10:50,282
source and you can say things like run it every day, run it every week,

173
00:10:50,416 --> 00:10:53,962
or you can just run it one time and be done so it's all automated.

174
00:10:54,026 --> 00:10:57,406
Here, take this, put it in a pipeline, hit go and you've got

175
00:10:57,428 --> 00:11:00,798
yourself a benchmark running. We typically recommend

176
00:11:00,884 --> 00:11:04,018
running a benchmark every day to make sure that configuration changes

177
00:11:04,104 --> 00:11:08,210
don't drift. Or if you do a cluster upgrade, you don't suddenly

178
00:11:08,790 --> 00:11:12,226
have things configured in an insecure way. Here you

179
00:11:12,248 --> 00:11:15,746
can see we ran a worker node test and

180
00:11:15,768 --> 00:11:19,574
you can see it ran and it checked a number of different things. So is

181
00:11:19,612 --> 00:11:23,794
the worker node configured correctly? Is Kubelet configured correctly?

182
00:11:23,922 --> 00:11:27,302
And then I can click down and see details about the test

183
00:11:27,356 --> 00:11:30,906
and what happened. I'm just going to find one where I got a

184
00:11:30,928 --> 00:11:34,730
warning. Here it is, 3211. I can see

185
00:11:34,880 --> 00:11:38,666
ensure that rotate Kubelet server certificate is set to true.

186
00:11:38,848 --> 00:11:42,138
It's not set to true and it gives me advice on how

187
00:11:42,144 --> 00:11:45,598
to remediate it. Now when I'm using a managed service, I can't always change all

188
00:11:45,604 --> 00:11:48,954
of these. I could dig into it. In this case I'm using Azure Kubernetes

189
00:11:49,002 --> 00:11:52,686
service. So I might not be able to fix everything. But you can see this

190
00:11:52,708 --> 00:11:55,786
is pretty good. So that's Kubebench.

191
00:11:55,978 --> 00:11:59,346
Next I want to look at Kubernetes. This is a very similar tool, but it

192
00:11:59,368 --> 00:12:02,930
does a penetration test, meaning that it actually boots up an application

193
00:12:03,000 --> 00:12:06,602
inside of Kubernetes. And it says, if I'm an app running in Kubernetes,

194
00:12:06,766 --> 00:12:10,214
do I have access to do bad things? So you can see it

195
00:12:10,252 --> 00:12:12,760
ran and it has some advice for us.

196
00:12:13,290 --> 00:12:17,286
It says that by default it's injecting a

197
00:12:17,308 --> 00:12:21,138
service account into the container that it's running in. So that's not

198
00:12:21,164 --> 00:12:25,046
necessarily good. A service account is how your pod can communicate

199
00:12:25,078 --> 00:12:28,506
with the Kubernetes API, and a lot of people recommend turning that off by

200
00:12:28,528 --> 00:12:31,946
default so that it only injects it. If a pod actually needs to

201
00:12:31,968 --> 00:12:34,960
connect to Kubernetes, that is a smart move.

202
00:12:35,330 --> 00:12:38,778
Also, it says here that there's an API. This is a big one, and I'll

203
00:12:38,794 --> 00:12:43,102
explain in a minute why that allows the application to

204
00:12:43,236 --> 00:12:46,578
learn a lot of information about its environment. In this case, it can find out

205
00:12:46,584 --> 00:12:50,126
what version of Kubernetes is being run. And that's

206
00:12:50,158 --> 00:12:53,790
concerning, because if there was again, a vulnerability in Kubernetes,

207
00:12:53,950 --> 00:12:57,762
I could leverage that API to figure out which say,

208
00:12:57,816 --> 00:13:01,446
metasploit exploit that I would run. But if I

209
00:13:01,468 --> 00:13:04,646
didn't have that exposed, it would be much more difficult. So it kind of gives

210
00:13:04,668 --> 00:13:07,858
you some advice. You can click on this cubehunter link.

211
00:13:07,964 --> 00:13:11,098
I could get more details about what I need to do to fix that.

212
00:13:11,264 --> 00:13:14,554
So Kubebench and Kubernetes, great tools from

213
00:13:14,592 --> 00:13:18,566
a very reputable company. Open source projects

214
00:13:18,758 --> 00:13:22,366
very, a great tool. Let me pop back to our

215
00:13:22,388 --> 00:13:25,358
PowerPoint. All right, next,

216
00:13:25,524 --> 00:13:29,006
let's talk about securing the container. Before we dive into that,

217
00:13:29,028 --> 00:13:33,006
let's explain the difference between a virtual machine and a

218
00:13:33,028 --> 00:13:36,946
container. This is really important. So virtualization allows an

219
00:13:36,968 --> 00:13:40,034
operating system to virtualize another operating system inside

220
00:13:40,072 --> 00:13:43,874
of it. Use this thing called a hypervisor to keep track of

221
00:13:44,072 --> 00:13:48,006
to do cpu scheduling between the different operating systems, to keep track of

222
00:13:48,028 --> 00:13:51,494
things like storage and memory, things like

223
00:13:51,532 --> 00:13:55,138
ram. The hypervisor keeps

224
00:13:55,154 --> 00:13:58,898
the vms from stepping on each other's toes and accessing each other's data.

225
00:13:59,004 --> 00:14:02,378
And that's great. But a VM has the overhead of

226
00:14:02,384 --> 00:14:05,866
a whole nother operating system typically takes a while to boot up. It's kind

227
00:14:05,888 --> 00:14:09,690
of heavy. Enter containers so containers

228
00:14:10,130 --> 00:14:14,206
share allow different apps, different container to

229
00:14:14,228 --> 00:14:17,678
share the same operating system kernel. So instead of having to

230
00:14:17,684 --> 00:14:21,120
have a hypervisor detecting things,

231
00:14:21,890 --> 00:14:25,398
you can have a container. The Linux kernel supports

232
00:14:25,434 --> 00:14:28,846
several features that enable containers to work from the perspective

233
00:14:28,878 --> 00:14:32,386
of your application. Your app thinks that it's running as if

234
00:14:32,408 --> 00:14:36,446
it's its own virtual machine for the most part. But we use a few features

235
00:14:36,478 --> 00:14:40,566
of the Linux kernel to trick the app or to isolate the apps so

236
00:14:40,588 --> 00:14:44,706
that they are mostly separate. C groups limit the cpu

237
00:14:44,738 --> 00:14:48,342
and memory of each container. So when you create a container, you can share

238
00:14:48,396 --> 00:14:52,534
cpu and memory, but make sure that one container doesn't use all of the cpu

239
00:14:52,582 --> 00:14:56,106
time. CH Root means that you can change

240
00:14:56,128 --> 00:14:59,562
the root directory. So when a container boots up, it unzips your

241
00:14:59,616 --> 00:15:03,070
container image and all of its software into a

242
00:15:03,140 --> 00:15:06,346
folder in the host operating system. And then it switches

243
00:15:06,378 --> 00:15:10,026
into that folder and runs your entry point as the appropriate

244
00:15:10,058 --> 00:15:14,254
C group. So now it's got its own root folder.

245
00:15:14,382 --> 00:15:18,034
It's running with limited cpu and memory. And then finally for things like

246
00:15:18,072 --> 00:15:21,586
users processes, network volume mounts, we use this

247
00:15:21,608 --> 00:15:25,158
thing called namespacing so that your app in

248
00:15:25,164 --> 00:15:29,634
its container cannot see other applications processes,

249
00:15:29,762 --> 00:15:33,778
can't see other volume mounts, can't see other applications users.

250
00:15:33,874 --> 00:15:37,522
Now I will say some of the things like namespacing for users

251
00:15:37,666 --> 00:15:40,406
is not implemented in many of the container runtimes.

252
00:15:40,438 --> 00:15:44,026
So we'll talk later when we get to cubesec about this. But there

253
00:15:44,048 --> 00:15:47,894
are some key best practices that you need to do to prevent

254
00:15:47,942 --> 00:15:51,370
applications from potentially breaking out of their container.

255
00:15:51,710 --> 00:15:54,894
It's not foolproof, but it doesn't have to be that hard. We've got great

256
00:15:54,932 --> 00:15:58,654
tools and there are many great open source tools that will help you do

257
00:15:58,692 --> 00:16:01,850
this really well. So we have degrees of isolation.

258
00:16:02,010 --> 00:16:05,950
On the one extreme we have like racking a physical server

259
00:16:06,030 --> 00:16:09,762
for each client application. And then on the other hand, we have

260
00:16:09,816 --> 00:16:12,530
running applications with no isolation.

261
00:16:13,030 --> 00:16:16,702
Virtualization is considered less segregated

262
00:16:16,766 --> 00:16:20,162
than hardware separation. There have been vulnerabilities in hypervisors

263
00:16:20,226 --> 00:16:23,858
where people could break out of one vm and see the other. It's very rare.

264
00:16:24,034 --> 00:16:28,230
Containerization is not quite as much isolation as virtualization.

265
00:16:28,570 --> 00:16:32,134
Containers have quite a bit of isolation. But if you're not careful,

266
00:16:32,182 --> 00:16:35,206
or if there's a Linux security vulnerability,

267
00:16:35,398 --> 00:16:39,158
maybe you could break out. And then finally, if you have no isolation where apps

268
00:16:39,174 --> 00:16:42,378
are just running as the same or different users in Linux they have

269
00:16:42,384 --> 00:16:46,170
even less isolation. One application by default in Linux

270
00:16:46,330 --> 00:16:49,674
can use all the cpu and memory. Unless you do C groups like containers

271
00:16:49,722 --> 00:16:53,310
do. So containers are better isolation than if you had none.

272
00:16:53,650 --> 00:16:57,362
Cotta containers I want to mention, right, if we want to make

273
00:16:57,416 --> 00:17:01,358
containerization a bit more secure, if we're afraid of can application breaking

274
00:17:01,374 --> 00:17:05,534
out of its container, some people will use kata containers or gvisor.

275
00:17:05,582 --> 00:17:08,854
Cotta containers actually spin every container up in a very

276
00:17:08,892 --> 00:17:12,690
lightweight virtual machine. So it'll spin up a vm

277
00:17:12,850 --> 00:17:17,850
with enough on it to be able to

278
00:17:17,920 --> 00:17:21,514
boot up a container inside of it.

279
00:17:21,632 --> 00:17:26,166
So that's Kata containers. And then Gvisor will filter

280
00:17:26,358 --> 00:17:29,706
and validate that applications aren't doing things they're not

281
00:17:29,728 --> 00:17:33,226
allowed to do. So in case there's a vulnerability in the Linux

282
00:17:33,258 --> 00:17:37,498
kernel, Gvisor will prevent an application from escalating privileges

283
00:17:37,594 --> 00:17:41,294
or accessing things it shouldn't be allowed to access. Let's talk

284
00:17:41,332 --> 00:17:44,914
about the parts of a container image. So I mentioned that we do things like

285
00:17:44,952 --> 00:17:48,146
C groups, ch root and namespacing. I should say

286
00:17:48,248 --> 00:17:51,570
the container runtime engine, whether that's docker or

287
00:17:51,640 --> 00:17:54,530
container D, takes care of this for you.

288
00:17:54,680 --> 00:17:58,706
And in a container you

289
00:17:58,728 --> 00:18:02,102
create a container image. The image is actually a layered file system.

290
00:18:02,156 --> 00:18:05,826
So technically what that means is it's a series of tar files that get unzipped

291
00:18:05,858 --> 00:18:09,230
one after another. And if you've ever seen a docker file, which we'll

292
00:18:09,250 --> 00:18:12,746
look at in a moment here, actually, I'll pull one

293
00:18:12,768 --> 00:18:16,074
up. A docker file has a series of

294
00:18:16,272 --> 00:18:20,886
steps, and each step, in each step it figures out what files changed

295
00:18:20,998 --> 00:18:24,150
and then it tars them up.

296
00:18:24,240 --> 00:18:27,454
So then when you're downloading a docker container, you'll see it saying

297
00:18:27,492 --> 00:18:31,454
downloading, downloading, downloading a whole bunch of files. Each of those files was

298
00:18:31,492 --> 00:18:35,026
a step in the original docker file. Inside of a

299
00:18:35,048 --> 00:18:38,590
container image, we have a command, which is the command

300
00:18:38,750 --> 00:18:43,182
that is used by default to boot up whatever application you're containerizing.

301
00:18:43,326 --> 00:18:46,606
You have a working directory, just like when you are running a command

302
00:18:46,638 --> 00:18:50,086
shell, you've got a working directory you're sitting in. The present working directory is

303
00:18:50,108 --> 00:18:53,474
the default directory where you're going to be running that command

304
00:18:53,602 --> 00:18:56,406
that it runs by default. When the container boots up,

305
00:18:56,588 --> 00:18:59,994
you could have a list of default environment variables. So you might

306
00:19:00,032 --> 00:19:03,942
default in a rails application, you might default rails environment to production,

307
00:19:04,086 --> 00:19:08,438
or you might default a path to include certain executable files.

308
00:19:08,614 --> 00:19:12,042
And finally, what group and user does it typically run with?

309
00:19:12,176 --> 00:19:15,690
The thing about it here is that almost every part of this can be overridden

310
00:19:15,770 --> 00:19:19,182
at runtime. And you'll see when we get to security contexts and things,

311
00:19:19,236 --> 00:19:23,150
there's ways of doing that. And I did want to show you a docker.

312
00:19:23,590 --> 00:19:27,458
See this docker? We look at an example of a

313
00:19:27,464 --> 00:19:30,706
docker file. You'll see, look at a

314
00:19:30,728 --> 00:19:34,418
good example here. Here's a good example you'll see

315
00:19:34,424 --> 00:19:38,214
here in this docker file. We start out saying we're from

316
00:19:38,252 --> 00:19:42,770
Ubuntu 22, so it's going to download that base image and unzip it effectively.

317
00:19:42,930 --> 00:19:47,074
Then it's going to copy in a file from my local directory

318
00:19:47,122 --> 00:19:50,774
inside into my container. Then it's going to run the make command,

319
00:19:50,902 --> 00:19:55,222
and then when the app boots up, it's actually going to run pythonappapp

320
00:19:55,286 --> 00:19:58,758
py. So here you're configuring your container, and there's

321
00:19:58,854 --> 00:20:02,386
many other commands to configure container. But these are the basics.

322
00:20:02,438 --> 00:20:05,966
Copy them. Some files say what user you're going to run as. That's the

323
00:20:05,988 --> 00:20:09,760
basics. All right, I want to talk about

324
00:20:10,130 --> 00:20:13,390
container breakout. What happens if we don't secure a container?

325
00:20:13,730 --> 00:20:17,246
So the worst case scenario is you don't secure a container

326
00:20:17,358 --> 00:20:21,026
and then the application can break out. The easiest way to do it is if

327
00:20:21,048 --> 00:20:24,210
a container is running as root, you actually have the capability

328
00:20:25,210 --> 00:20:29,138
of mounting volumes into your container. So running as root,

329
00:20:29,314 --> 00:20:33,810
you could potentially mount a volume that's actually the host root

330
00:20:33,970 --> 00:20:37,442
volume. So even though you're switched into your

331
00:20:37,516 --> 00:20:41,050
container folder, you could mount a volume from outside

332
00:20:41,120 --> 00:20:44,774
of your container, effectively letting you see everything else running in the operating

333
00:20:44,822 --> 00:20:47,690
system. So that's container breakout,

334
00:20:48,110 --> 00:20:51,818
preventing container breakout. All right, so now we get to the fun part.

335
00:20:51,904 --> 00:20:55,598
So whenever you are deployments an app to

336
00:20:55,604 --> 00:20:59,226
kubernetes, we need to set a security context. So a pod

337
00:20:59,258 --> 00:21:02,478
is the unit of working kubernetes. So most of our examples are just going to

338
00:21:02,484 --> 00:21:05,742
be with pods, although oftentimes when you deploy, you'll use a deployments,

339
00:21:05,806 --> 00:21:10,014
a stateful set, a daemon set, some kind of container that will deploy multiple pods,

340
00:21:10,062 --> 00:21:13,922
whether that's n instances of pods or one for every

341
00:21:13,976 --> 00:21:18,270
node. But in this example here, we've got an individual pod,

342
00:21:18,430 --> 00:21:22,054
and you'll see the pod is set up to run as a particular user and

343
00:21:22,092 --> 00:21:25,346
group. You can configure some things like run as user

344
00:21:25,378 --> 00:21:29,286
and group, both on the security context layer globally for the pod or

345
00:21:29,308 --> 00:21:32,582
on the individual container, and then file system.

346
00:21:32,636 --> 00:21:35,786
Group says basically if you have any volume mounts, who's going

347
00:21:35,808 --> 00:21:39,146
to be the owner of those volume mounts? Typically if you want to be able

348
00:21:39,168 --> 00:21:41,946
to read and write from those, you'll set the owner to the same as the

349
00:21:41,968 --> 00:21:45,214
group. This example is a bit different, but just bear with me.

350
00:21:45,332 --> 00:21:49,034
And then for the container here you can see allow privilege escalation,

351
00:21:49,082 --> 00:21:52,526
false, run as non root, true privileged false. These three are

352
00:21:52,548 --> 00:21:55,922
kind of best practice to set these three. Some people

353
00:21:55,976 --> 00:21:59,346
also will do a read only file system to prevent one container from

354
00:21:59,368 --> 00:22:03,346
using up the whole disk in Linux. But you

355
00:22:03,368 --> 00:22:06,882
probably don't need that. So you can see run as user group and file system

356
00:22:06,936 --> 00:22:10,390
group security context. Very straightforward.

357
00:22:11,930 --> 00:22:15,186
If you wanted to enforce or at least make sure people are following

358
00:22:15,218 --> 00:22:19,074
best practices, there's a great tool. We have it built in here, open source

359
00:22:19,122 --> 00:22:23,114
cubesec. You can choose any pod that's running and I'll find one here

360
00:22:23,312 --> 00:22:27,530
that I know is going to be probably in trouble.

361
00:22:28,110 --> 00:22:31,546
Go Project Falco, which we'll explain later. And here

362
00:22:31,568 --> 00:22:35,374
it looked at my project Falco pod and it said, is this pod following best

363
00:22:35,412 --> 00:22:39,054
practices? And my answer is no. But that's actually

364
00:22:39,092 --> 00:22:42,718
because Project Falco legitimately needs elevated privileges. But you

365
00:22:42,724 --> 00:22:46,462
can see okay, service account name is green good. Limited cpu

366
00:22:46,526 --> 00:22:49,694
good. Limited memory good. Requested cpu and memory,

367
00:22:49,742 --> 00:22:52,702
good. Okay, we're good, but then come down here to critical.

368
00:22:52,766 --> 00:22:56,398
Uh oh, we're running as privileged, basically running as root.

369
00:22:56,574 --> 00:23:00,262
We have access to the docker socket. We can connect directly to

370
00:23:00,316 --> 00:23:04,022
docker. It's not good. And then it's got a number of other advice here

371
00:23:04,076 --> 00:23:08,114
saying let's use app armor seccomp to limit

372
00:23:08,162 --> 00:23:11,734
which Linux capabilities we have and which Linux

373
00:23:11,862 --> 00:23:15,178
calls we can make. It's saying run as non root should be true. So a

374
00:23:15,184 --> 00:23:18,906
lot of, lot of good advice here. So we got a negative 39 on

375
00:23:18,928 --> 00:23:22,038
critical, seven for passed. It adds it up and says,

376
00:23:22,064 --> 00:23:25,754
well, we get negative 32 points, we stink.

377
00:23:25,882 --> 00:23:29,706
That's actually okay though, because project Falco legitimately needs these privileges.

378
00:23:29,818 --> 00:23:32,926
But I recommend using this for most of your applications and

379
00:23:32,948 --> 00:23:36,562
getting teams to look at it. And even better, we'll talk about later

380
00:23:36,616 --> 00:23:40,494
tools like gatekeeper that allow us to enforce policies.

381
00:23:40,542 --> 00:23:44,242
So you could just prevent application teams from ever deploying anything

382
00:23:44,376 --> 00:23:47,590
that looks like this. But we'll come back to that in a minute.

383
00:23:47,930 --> 00:23:52,006
All right, preventing container breakout. So do

384
00:23:52,028 --> 00:23:55,026
not allow applications to run as root or escalate privileges.

385
00:23:55,138 --> 00:23:58,470
Good. Two, don't mount in any host.

386
00:23:58,810 --> 00:24:02,806
Be very careful with host volumes. So Kubernetes allows you to mount

387
00:24:02,838 --> 00:24:06,394
in volumes. One of them is called a host path. But if you

388
00:24:06,432 --> 00:24:10,234
could connect to Kubernetes, if you could mount a host path, why not just

389
00:24:10,272 --> 00:24:13,930
mount slash as the host path? Effectively, then you've

390
00:24:14,010 --> 00:24:17,630
just become the root computer. You've just overridden everything,

391
00:24:17,700 --> 00:24:21,358
right? You now have access to the root file system you've broken out of

392
00:24:21,364 --> 00:24:24,366
your container. Three, use tools like OPA,

393
00:24:24,398 --> 00:24:28,594
gatekeeper, pod security policies, and pod security standards. We'll cover more later

394
00:24:28,712 --> 00:24:32,514
to prevent someone from deploying pods with host volumes or

395
00:24:32,552 --> 00:24:36,478
with elevated privileges. So basically don't do these

396
00:24:36,504 --> 00:24:39,926
things and then use some kind of policy standards to just prevent someone from

397
00:24:39,948 --> 00:24:43,522
doing these things. And then finally limit service account privileges.

398
00:24:43,586 --> 00:24:47,702
So the service account is potentially an

399
00:24:47,836 --> 00:24:51,126
account that's injected into your pod in order to

400
00:24:51,148 --> 00:24:54,266
allow your pod to talk to Kubernetes. Maybe your app wants to connect directly to

401
00:24:54,288 --> 00:24:57,962
Kubernetes for some reason. Maybe it needs to legitimately spin up other

402
00:24:58,016 --> 00:25:01,686
containers. For example, if you're using Apache airflow, other tools.

403
00:25:01,798 --> 00:25:05,166
Apache Airflow will want to kick off jobs in kubernetes great.

404
00:25:05,348 --> 00:25:09,262
But definitely look at those service account privileges and

405
00:25:09,396 --> 00:25:13,374
only give people access to the things they need. Keeping in mind that if

406
00:25:13,412 --> 00:25:16,442
that service account can create pods,

407
00:25:16,586 --> 00:25:19,970
it can effectively, and you have no policies

408
00:25:20,550 --> 00:25:24,254
that service account can effectively create a pod with elevated

409
00:25:24,302 --> 00:25:28,070
privileges and break out of the container. So unless you're doing some kind of policy

410
00:25:28,140 --> 00:25:31,910
management, be very careful with your use of service accounts.

411
00:25:32,570 --> 00:25:35,382
Limiting Linux kernel calls it's another fun one,

412
00:25:35,436 --> 00:25:39,302
so let's back up a little bit. A lot of us have used

413
00:25:39,356 --> 00:25:43,002
Linux. Not a lot of us understand exactly what a kernel is

414
00:25:43,136 --> 00:25:46,762
and how the Linux kernel works. So whenever your application wants to

415
00:25:46,816 --> 00:25:49,782
do something other than access cpu and memory,

416
00:25:49,926 --> 00:25:53,178
maybe it wants to open a file, maybe it wants to connect to something on

417
00:25:53,184 --> 00:25:57,786
the Internet. It has to make a system call to the Linux kernel.

418
00:25:57,978 --> 00:26:01,054
An example of a system call might be something like getting the current time or

419
00:26:01,092 --> 00:26:04,446
setting the current time. But some system calls are kind of

420
00:26:04,468 --> 00:26:07,698
dangerous. So maybe you want to do a system call to change your

421
00:26:07,704 --> 00:26:11,202
user account. That might be dangerous. You might want to get a system

422
00:26:11,256 --> 00:26:14,738
call to change the time of the computer. That might be dangerous because it

423
00:26:14,744 --> 00:26:19,000
might mess up other people or mess up other applications running on that computer.

424
00:26:19,530 --> 00:26:23,590
So we want to limit our apps from doing certain

425
00:26:23,660 --> 00:26:27,526
things. You can, within the security context, specify a

426
00:26:27,548 --> 00:26:30,626
list of which things are dropped or added.

427
00:26:30,818 --> 00:26:34,374
Also, some people will use seccomp and app armor to create pre made profiles.

428
00:26:34,422 --> 00:26:38,326
App armor can even listen, follow your app for a while, build a profile

429
00:26:38,438 --> 00:26:41,690
based upon what it's using, and then you can apply that profile.

430
00:26:42,670 --> 00:26:46,014
So I'm not going to demonstrate using setcomp and app armor, but I will

431
00:26:46,052 --> 00:26:49,982
demonstrate this. So inside of the security context, you can explicitly add

432
00:26:50,036 --> 00:26:53,886
or remove capabilities. So here I'm adding the sys time, which would

433
00:26:53,908 --> 00:26:56,320
allow me to change the system time. As an example.

434
00:26:56,770 --> 00:26:59,090
I'm not going to give you the big list of all the different options.

435
00:26:59,160 --> 00:27:02,606
There's a lot out there. Usually the defaults

436
00:27:02,638 --> 00:27:05,858
are good enough in many cases, but it is worth considering this.

437
00:27:05,944 --> 00:27:10,162
If an app ever needs to add capabilities, be careful, dig into what those capabilities

438
00:27:10,226 --> 00:27:13,846
are. Net admin is a great example of one that could

439
00:27:13,868 --> 00:27:17,494
be a bit dangerous, right? It could allow the app to look

440
00:27:17,532 --> 00:27:21,482
at other things that are running around or to reconfigure networking to

441
00:27:21,616 --> 00:27:25,494
potentially break things. Sometimes you have legitimate

442
00:27:25,542 --> 00:27:28,538
use cases for this, so just think critically about it.

443
00:27:28,704 --> 00:27:31,542
All right, Cubesec, we demonstrated Cubesec earlier,

444
00:27:31,606 --> 00:27:35,514
so Cubesec will analyze the manifest of a pod and give you advice.

445
00:27:35,642 --> 00:27:39,402
We've built a UI around Cubesec. I know, I demonstrated it briefly

446
00:27:39,466 --> 00:27:42,590
earlier. I can go to Cubesec here.

447
00:27:42,740 --> 00:27:46,546
I can choose a pod or upload and

448
00:27:46,568 --> 00:27:48,900
I can even pick. So we'll pick,

449
00:27:49,510 --> 00:27:52,654
let's do cube system, like pod.

450
00:27:52,702 --> 00:27:55,586
I'm going to click all of them. I can even pick a whole bunch of

451
00:27:55,608 --> 00:27:59,326
them and it'll run it for all of them at once. Take it a minute.

452
00:27:59,518 --> 00:28:02,886
Hopefully it works. You never know with live demos. There it goes. And now

453
00:28:02,908 --> 00:28:06,578
it's given me a breakdown of every single pod in this namespace and how they're

454
00:28:06,594 --> 00:28:09,946
doing. Now it is cube system. So I

455
00:28:09,968 --> 00:28:13,766
can see the azure disk, some of this you'd expect, right? So azure

456
00:28:13,798 --> 00:28:17,530
disk in cube system, the CSI driver is going to of course

457
00:28:17,600 --> 00:28:21,290
need elevated privileges, right? Cube proxy,

458
00:28:21,710 --> 00:28:25,086
same thing. It's got to have network administrator access to set up

459
00:28:25,108 --> 00:28:28,174
the proxies. So it makes sense. But it is interesting to look

460
00:28:28,212 --> 00:28:31,406
at. So great tool, it's a great tool. We've made

461
00:28:31,428 --> 00:28:34,466
it even better with can easy to use Ui so that it's easy for your

462
00:28:34,488 --> 00:28:37,250
team to use, even if they're fairly new to Kubernetes.

463
00:28:37,830 --> 00:28:41,570
All right, next, pod security admissions.

464
00:28:42,070 --> 00:28:44,674
So for those of us who've been around a while,

465
00:28:44,712 --> 00:28:48,406
Kubernetes used to have this thing called pod security policies, which gave you a lot

466
00:28:48,428 --> 00:28:52,146
of granular control over what things could do. But Kubernetes recognized,

467
00:28:52,178 --> 00:28:55,602
or the creators of Kubernetes recognized that that was really too complicated

468
00:28:55,666 --> 00:28:59,642
for most people. It's enough simply to have a few general

469
00:28:59,696 --> 00:29:02,966
presets and if it's not enough, they can go use OPA gatekeeper

470
00:29:02,998 --> 00:29:06,902
or something to create their own policies. So with pod security admissions,

471
00:29:07,046 --> 00:29:10,454
we have three pre made standards for Kubernetes

472
00:29:10,502 --> 00:29:14,198
security, privileged baseline and restricted.

473
00:29:14,374 --> 00:29:17,454
What you can do is enable in a namespace a standard, and then if any

474
00:29:17,492 --> 00:29:20,926
app tries to deploy that doesn't meet one of these pre made standards, it will

475
00:29:20,948 --> 00:29:24,094
block it. Anything running in, say, Kube system is

476
00:29:24,132 --> 00:29:27,566
probably going to need privilege access like we talked about earlier. So that's what privilege

477
00:29:27,598 --> 00:29:31,314
is for. Unrestricted deploy anything you want. Definitely lock down

478
00:29:31,352 --> 00:29:33,970
those namespaces that allow privileged deployments.

479
00:29:34,630 --> 00:29:39,010
Baseline, this is pretty good. It prevents things like basically

480
00:29:39,080 --> 00:29:42,486
the things that would allow container breakout. You need to dig through the

481
00:29:42,508 --> 00:29:45,922
list because I think you could probably still do host paths, which are potentially

482
00:29:45,986 --> 00:29:49,574
dangerous, but it would prevent like running as root or privilege escalation

483
00:29:49,702 --> 00:29:53,606
at a very minimum. Start with baseline and then finally restricted,

484
00:29:53,718 --> 00:29:57,260
which requires you to set quite a bit. You have to

485
00:29:58,030 --> 00:30:01,686
configure a bunch of stuff in security context on every pod.

486
00:30:01,718 --> 00:30:05,102
It's kind of a pain. We've actually created an open source project

487
00:30:05,156 --> 00:30:08,942
which I'll show you in a minute, that makes deploying all of your apps with

488
00:30:08,996 --> 00:30:12,480
restricted pod security standards fairly easy.

489
00:30:13,030 --> 00:30:16,366
When you configure a namespace, you have to add this label,

490
00:30:16,478 --> 00:30:20,462
podsecurity Kubernetes IO enforce restricted.

491
00:30:20,606 --> 00:30:24,846
And this would allow you to enforce a particular level of pod security admission

492
00:30:24,878 --> 00:30:28,270
standards. So you could do privileged baseline or restricted. If you

493
00:30:28,280 --> 00:30:32,226
do nothing, it's effectively privileged. Right. But if you configure baseline or restricted,

494
00:30:32,258 --> 00:30:35,320
it's going to start locking down that namespace, which is really nice.

495
00:30:35,770 --> 00:30:39,510
I want to show you. We've created a project called

496
00:30:39,580 --> 00:30:43,430
K eight EZ. It's a helm chart for deploying apps to Kubernetes.

497
00:30:43,590 --> 00:30:46,698
It allows you to deploy an app just by specifying the name. Or you can

498
00:30:46,704 --> 00:30:50,394
create a full values file to configure everything you could think of. The big thing

499
00:30:50,432 --> 00:30:54,266
is that by default the security context is fairly locked

500
00:30:54,298 --> 00:30:58,014
down. So by default it's running as non root, it's dropping all

501
00:30:58,052 --> 00:31:01,418
Linux capabilities, privileged, false. Run as non

502
00:31:01,434 --> 00:31:05,306
root, true. Allow, privilege, escalation, false. It's doing all those things by default

503
00:31:05,338 --> 00:31:08,658
that you want to do. So definitely try it out. We use it for a

504
00:31:08,664 --> 00:31:12,238
lot of our client implementations and it's been very successful.

505
00:31:12,334 --> 00:31:15,666
We've also had clients where they have a whole bunch of apps in kubernetes and

506
00:31:15,688 --> 00:31:18,626
they're able to use a single helm chart to deploy all of them. So then

507
00:31:18,648 --> 00:31:21,826
if they're enforcing tens or hundreds of apps to Kubernetes, or if we're

508
00:31:21,858 --> 00:31:25,126
onboarding them, they can just create a values file for each app.

509
00:31:25,148 --> 00:31:27,858
They don't have to create a custom helm chart for every app. And they can

510
00:31:27,884 --> 00:31:30,700
trust that by default things are pretty locked down.

511
00:31:31,150 --> 00:31:34,458
You couple this with the pod security

512
00:31:34,544 --> 00:31:38,810
standards and you do a good job locking down kubernetes.

513
00:31:39,150 --> 00:31:42,110
All right, let's keep moving. Network policies.

514
00:31:42,610 --> 00:31:46,282
So Kubernetes network policies allow you to limit

515
00:31:46,426 --> 00:31:49,886
what pods can connect to what pods. This is really nice.

516
00:31:49,988 --> 00:31:53,374
In a lot of architectures you'll have a front end and a back

517
00:31:53,412 --> 00:31:57,266
end, and the front end and back end might both run on

518
00:31:57,288 --> 00:32:00,958
your servers, right? So maybe you have something that receives requests

519
00:32:00,974 --> 00:32:04,146
from the Internet and then it connects to APIs. And I see a lot of

520
00:32:04,168 --> 00:32:07,446
times where some of those back end APIs that have no

521
00:32:07,468 --> 00:32:11,414
external ingress also have no authentication. I wish they did.

522
00:32:11,532 --> 00:32:15,858
There's a lot of applications where people are not doing any authentication or authorization

523
00:32:15,954 --> 00:32:19,254
on internal backend APIs. So with

524
00:32:19,292 --> 00:32:23,274
network policies in Kubernetes we can lock down what applications are even

525
00:32:23,312 --> 00:32:26,538
allowed to connect to them. So that makes it much harder for a

526
00:32:26,544 --> 00:32:30,614
hacker to exploit one of these APIs, because let's just say hypothetically,

527
00:32:30,662 --> 00:32:34,174
you have hundreds of APIs, but maybe half of them are

528
00:32:34,212 --> 00:32:37,646
internal only and maybe don't have a lot of authentication or authorization on

529
00:32:37,668 --> 00:32:41,786
them. You can use network policies to just prevent any app from connecting

530
00:32:41,818 --> 00:32:45,266
to those APIs. So you can literally limit it to things in

531
00:32:45,288 --> 00:32:49,214
the same namespace or just named

532
00:32:49,262 --> 00:32:52,594
connections. A network policy looks a bit like this,

533
00:32:52,712 --> 00:32:56,430
you would say what pods it applies to. So you'll use a pod selector

534
00:32:56,510 --> 00:32:59,522
to match pods with certain labels or certain namespaces,

535
00:32:59,666 --> 00:33:03,078
and then you can say whether it's in ingress or egress policy.

536
00:33:03,244 --> 00:33:06,486
So this one here for example, would deny all ingress. So it says

537
00:33:06,508 --> 00:33:09,946
it's can ingress, but it also doesn't specify what can connect to

538
00:33:09,968 --> 00:33:13,466
it. So the default is to deny everything. You can

539
00:33:13,488 --> 00:33:16,698
do the opposite, where you say ingress and you

540
00:33:16,704 --> 00:33:19,926
have an array meaning match everything, which allows all ingress.

541
00:33:20,118 --> 00:33:23,646
Same thing for Egress. I'll let you dig through the docs on all

542
00:33:23,668 --> 00:33:27,578
the different options, but the big thing is that you can say this namespace

543
00:33:27,674 --> 00:33:31,050
or these pods can connect to these pods. Very helpful.

544
00:33:31,210 --> 00:33:34,430
Not all container network interfaces support it.

545
00:33:34,500 --> 00:33:37,594
So istio does, but some of them don't.

546
00:33:37,642 --> 00:33:40,498
So you do have to think critically when you set up your cluster, do I

547
00:33:40,504 --> 00:33:43,646
want this or not? And if I do, which network interface

548
00:33:43,678 --> 00:33:46,990
do I want to use? And that's something when you set up your cluster.

549
00:33:47,070 --> 00:33:50,166
A lot of people are using cloud managed clusters, and by default they come with

550
00:33:50,188 --> 00:33:53,894
something like this. Definitely something to check into though. There are

551
00:33:53,932 --> 00:33:57,078
shortcomings though. So one of the big ones is that, and I

552
00:33:57,084 --> 00:34:00,362
don't even know if I've got it on the PowerPoint here. One of the problems

553
00:34:00,416 --> 00:34:04,330
is that it doesn't allow you to connect to control

554
00:34:04,400 --> 00:34:07,962
access to external hostnames. So a lot of people we see using

555
00:34:08,096 --> 00:34:12,490
Kubernetes service entries to control access to particular hostnames.

556
00:34:12,910 --> 00:34:16,266
Most of the rules are namespace wide, but you can do pod

557
00:34:16,298 --> 00:34:19,934
selectors like label selectors. Not all conceivable rules can be

558
00:34:19,972 --> 00:34:23,598
set up. So again you can say external host names is a

559
00:34:23,604 --> 00:34:26,674
big limit. So if you wanted to say I'm going to allow them to connect

560
00:34:26,712 --> 00:34:30,014
to an external database. But that database doesn't have an IP,

561
00:34:30,062 --> 00:34:33,506
it's got a hostname. Kubernetes by default doesn't support it.

562
00:34:33,608 --> 00:34:37,054
But again, people use istio with Egress gateways

563
00:34:37,102 --> 00:34:40,326
to do that, or some people are using cilium for that now. So there are

564
00:34:40,348 --> 00:34:44,338
other methods. And yeah, pod security standards are far less granular

565
00:34:44,514 --> 00:34:48,214
and may not be appropriate for all workloads. Still, it's very powerful

566
00:34:48,342 --> 00:34:51,466
and it can be extended with other third party applications as

567
00:34:51,488 --> 00:34:55,382
well. All right, OpA and gatekeeper. So OPA

568
00:34:55,446 --> 00:34:59,226
is a language really, it's a

569
00:34:59,248 --> 00:35:02,618
language for describing policies. And Gatekeeper is a plugin

570
00:35:02,634 --> 00:35:06,058
for Kubernetes. It creates a CNI,

571
00:35:06,234 --> 00:35:09,630
basically it extends Kubernetes to allow you to describe policies

572
00:35:10,530 --> 00:35:14,670
inside of Kubernetes and then it will assess and enforce those policies.

573
00:35:15,010 --> 00:35:18,786
So you write these scripts, and usually you don't write the scripts, you use

574
00:35:18,808 --> 00:35:22,286
one of the open source standards and you just configure it. And then these scripts

575
00:35:22,318 --> 00:35:25,598
validate whenever something tries to deploy that it meets those standards

576
00:35:25,694 --> 00:35:29,026
and it does more than deployments. You can do it for even namespaces,

577
00:35:29,138 --> 00:35:32,390
anything. I'll give you a couple examples.

578
00:35:33,450 --> 00:35:37,414
So a good example would be maybe you want to make sure that for

579
00:35:37,452 --> 00:35:40,858
cost accounting reasons, you want to make sure that every application

580
00:35:40,944 --> 00:35:44,300
has a cost center attached to it. So if I open up

581
00:35:45,790 --> 00:35:49,238
know gatekeeper in the UI,

582
00:35:49,334 --> 00:35:53,294
the first thing I do is create a constraint template. So by default there

583
00:35:53,332 --> 00:35:56,842
are numerous different constraint templates that are included

584
00:35:56,986 --> 00:36:00,586
in gatekeeper. It's an open source project and they have a number of premade

585
00:36:00,618 --> 00:36:04,142
constraint templates. Constraint templates are different.

586
00:36:04,196 --> 00:36:06,866
Think of it as different kinds of operations you want to do. So you might

587
00:36:06,888 --> 00:36:10,414
want to say, I want to require

588
00:36:10,462 --> 00:36:12,994
containers to have a limit on cpu and memory. So I can say okay,

589
00:36:13,032 --> 00:36:16,514
container limit. And you'll see here we have

590
00:36:16,552 --> 00:36:20,226
different constraint templates available and they have this rego

591
00:36:20,258 --> 00:36:23,890
code in it. But advising rego code, it's really complicated.

592
00:36:24,050 --> 00:36:26,600
I can let you go dig into that on your own time,

593
00:36:26,970 --> 00:36:30,586
but we don't see a lot of people actually doing that. Usually what they do

594
00:36:30,608 --> 00:36:34,406
is they use one of the official ones like constraint

595
00:36:34,438 --> 00:36:37,446
limits or pod security policies,

596
00:36:37,558 --> 00:36:39,370
like running as non root.

597
00:36:41,630 --> 00:36:45,114
Let me find one. I like the label one. Okay, required labels.

598
00:36:45,162 --> 00:36:48,474
All right, so we're going to do required labels. We're going to actually require

599
00:36:48,522 --> 00:36:52,302
that people tag every pod with a cost center

600
00:36:52,436 --> 00:36:55,794
so that we can do our fin offs that we're all being told we have

601
00:36:55,832 --> 00:36:59,406
to do. Right? So I've created the required labels constraint

602
00:36:59,438 --> 00:37:03,426
template. Then I have to come in here and click add more and

603
00:37:03,448 --> 00:37:06,526
I have to pick, I have to configure each

604
00:37:06,568 --> 00:37:10,758
constraint. So the constraint template is the rego code,

605
00:37:10,844 --> 00:37:14,134
the constraint is parameters for the regal code.

606
00:37:14,252 --> 00:37:17,818
So I'm going to say I want to enforce it on all pods. I'm going

607
00:37:17,824 --> 00:37:20,986
to call it cost center constraint. I'll just call it

608
00:37:21,008 --> 00:37:24,118
cost center cost center required

609
00:37:24,214 --> 00:37:28,422
okay, kubernetes required labeled labels description

610
00:37:28,566 --> 00:37:32,794
require cost center to deploy pods excluded,

611
00:37:32,842 --> 00:37:36,426
namespace included. We're going to exclude

612
00:37:36,618 --> 00:37:41,054
gatekeeper system and cube system and

613
00:37:41,092 --> 00:37:45,058
Msweeper system. Okay, cert manager. So I'm going to

614
00:37:45,144 --> 00:37:48,466
exclude my built in stuff. I'm going

615
00:37:48,488 --> 00:37:52,580
to say allowed Reg X and key.

616
00:37:53,190 --> 00:37:57,220
So we're going to require cost center

617
00:37:57,830 --> 00:38:00,918
and it's going to be star meaning anything. It's got to

618
00:38:00,924 --> 00:38:04,646
be there, but it can be anything. I'm not going to be picky about the

619
00:38:04,668 --> 00:38:07,160
format of it, save changes,

620
00:38:07,850 --> 00:38:11,530
and now I've just created it. Let me just take a look real quick.

621
00:38:11,600 --> 00:38:15,114
Good. There's different modes, audit and

622
00:38:15,152 --> 00:38:18,698
enforce. Audit means we just simply report on it,

623
00:38:18,864 --> 00:38:22,586
whereas enforce actually looks at it. It can take it a minute to

624
00:38:22,608 --> 00:38:26,058
actually run and give me back my violations. I've actually got another one that's

625
00:38:26,074 --> 00:38:29,758
already been set up called container limits. And you can

626
00:38:29,764 --> 00:38:33,454
see here, once it's had time to compile and run the rego code,

627
00:38:33,572 --> 00:38:37,246
I can click on this violations here and it'll list off for me every pod

628
00:38:37,278 --> 00:38:41,090
that's currently violating. So very useful.

629
00:38:41,590 --> 00:38:45,138
Here we go. It's beginning to compile all the pods that

630
00:38:45,144 --> 00:38:48,434
are breaking the rules. So my ingress controller doesn't have a cost center,

631
00:38:48,472 --> 00:38:51,462
so I don't know who to charge for it.

632
00:38:51,596 --> 00:38:55,122
So pretty useful. And you can see here, we did it all through a UI,

633
00:38:55,186 --> 00:38:58,514
so it was super easy. We also enforced creating exceptions

634
00:38:58,562 --> 00:39:01,946
so you could give a team an exception, but for only a specific period of

635
00:39:01,968 --> 00:39:05,206
time. Pretty powerful stuff. All right, so that's

636
00:39:05,238 --> 00:39:09,210
gatekeeper. Next I want to talk about

637
00:39:09,280 --> 00:39:13,226
code scanning. So whenever you create a container

638
00:39:13,258 --> 00:39:16,634
image, a container image contains both your operating

639
00:39:16,682 --> 00:39:20,638
system and all of the operating system utilities you require. Maybe you need

640
00:39:20,724 --> 00:39:24,526
go script to create pdfs, for example. Right? And you need Java to run

641
00:39:24,548 --> 00:39:27,758
your Java code, and then it's got your code. So maybe it's your Java

642
00:39:27,774 --> 00:39:31,250
jar files, your ruby code, your php code, your node code,

643
00:39:31,400 --> 00:39:35,314
whatever. So this packaged up container image is

644
00:39:35,352 --> 00:39:39,130
actually something we can scan, kind of like a VM image and trivia

645
00:39:39,230 --> 00:39:42,866
or sneak are the most common two that I see. We integrate with trivia

646
00:39:42,898 --> 00:39:46,566
sneak is coming. Let me show you a little bit

647
00:39:46,588 --> 00:39:49,986
about that. So you can run it yourself from the command

648
00:39:50,018 --> 00:39:53,802
line or in a CI 3D pipeline locally, and you'll get an output like this,

649
00:39:53,856 --> 00:39:56,998
which is very useful. You can even block someone from deploying

650
00:39:57,014 --> 00:40:00,490
something that has certain levels of vulnerabilities or even things that are

651
00:40:00,560 --> 00:40:04,014
not fixable. But a lot of times we find people have to create

652
00:40:04,052 --> 00:40:07,406
exceptions. So we created an interface here where it

653
00:40:07,428 --> 00:40:10,682
will scan everything that's currently running in your cluster.

654
00:40:10,826 --> 00:40:14,190
You can browse around say by namespace,

655
00:40:14,610 --> 00:40:17,570
you can see what's running there and what container image it's running,

656
00:40:17,720 --> 00:40:21,730
and then you can expand and see a scan of that container image

657
00:40:22,150 --> 00:40:25,714
and whether or not it meets your standards. You can even

658
00:40:25,752 --> 00:40:29,890
block things from booting up that don't meet your standards. And you can create exceptions

659
00:40:29,970 --> 00:40:34,006
for teams that need those. So here you can see I

660
00:40:34,028 --> 00:40:37,810
did can open policy gatekeeper. Apparently I'm not running the oldest,

661
00:40:37,970 --> 00:40:41,618
and I can see here it's running an older version that

662
00:40:41,644 --> 00:40:45,082
has a vulnerability out of bounds memory access. That's pretty

663
00:40:45,136 --> 00:40:48,458
bad. And it's fixable in version 00:40

664
00:40:48,624 --> 00:40:52,026
so I should probably upgrade. I can click

665
00:40:52,128 --> 00:40:55,886
request exception here. So if I was getting blocked for that reason, I could click

666
00:40:55,908 --> 00:40:59,898
a request exception and request the security team give me an exception.

667
00:40:59,994 --> 00:41:03,854
We have an entire exception flow here where you can request an exception and

668
00:41:03,892 --> 00:41:08,178
emails the admins. They can review and give you a thumbs up or thumbs down.

669
00:41:08,344 --> 00:41:11,170
They can give you an exception for a specific period of time,

670
00:41:11,320 --> 00:41:14,914
that sort of thing. And then if I scroll down I can

671
00:41:14,952 --> 00:41:18,838
see they click details, details about that

672
00:41:18,924 --> 00:41:23,202
particular CVE known vulnerability

673
00:41:23,266 --> 00:41:26,966
and exposure. So here I can see details. If I was to

674
00:41:26,988 --> 00:41:30,506
open this up new tab, I can see more

675
00:41:30,528 --> 00:41:34,586
details about that CVE. So CVE 2002 228946

676
00:41:34,768 --> 00:41:38,586
high. You'll notice there's different scoring methodologies, but it's bad,

677
00:41:38,688 --> 00:41:41,786
should probably upgrade. And there's a lot more in here

678
00:41:41,808 --> 00:41:44,954
too. That's a little bit about CVE scanning.

679
00:41:45,082 --> 00:41:48,362
I want to show you the exception management interface. It's pretty neat,

680
00:41:48,506 --> 00:41:54,206
so you can see all the exceptions and then for any exception I

681
00:41:54,228 --> 00:41:58,210
can configure it. So kind of like what you would expect. Super useful.

682
00:41:58,710 --> 00:42:02,366
All right, next I want to talk about Project Falco.

683
00:42:02,558 --> 00:42:05,806
I want to back up a little bit. So if you remember we talked earlier

684
00:42:05,838 --> 00:42:10,374
about Linux kernel calls. So every time your app wants to do something other

685
00:42:10,412 --> 00:42:14,006
than cpu and memory, it has to do a kernel call to do that

686
00:42:14,028 --> 00:42:17,590
action or to perform it. And so what if something was

687
00:42:17,660 --> 00:42:21,446
doing something that it's allowed to do, but that thing seems suspicious?

688
00:42:21,478 --> 00:42:24,602
Or what if it tries to do something that it's not allowed to do,

689
00:42:24,736 --> 00:42:27,366
but trying to do it is itself suspicious?

690
00:42:27,478 --> 00:42:30,986
So if an application tries to change its user

691
00:42:31,018 --> 00:42:34,526
account, that's suspicious. If an application tries to

692
00:42:34,548 --> 00:42:37,790
mount a volume when it's not supposed to,

693
00:42:37,940 --> 00:42:41,854
that's suspicious, right. Project Falco can

694
00:42:41,892 --> 00:42:45,262
monitor and alert you whenever that's happening.

695
00:42:45,316 --> 00:42:48,386
Well, should say alert. It doesn't do alerts. It'll just do an API call or

696
00:42:48,408 --> 00:42:52,178
a log. It can also monitor the Kubernetes API logs. It can

697
00:42:52,184 --> 00:42:56,206
really do anything. It's kind of like OPA open policy agent. It's a generic rules

698
00:42:56,238 --> 00:42:59,826
engine, but we've integrated with it and a lot of people use it for monitoring

699
00:42:59,858 --> 00:43:03,154
Kubernetes API logs or just Linux

700
00:43:03,202 --> 00:43:07,234
kernel calls with an EBPF filter so it can monitor

701
00:43:07,282 --> 00:43:09,610
for suspicious behavior.

702
00:43:12,110 --> 00:43:16,122
We make it very easy for people to set up and use.

703
00:43:16,176 --> 00:43:19,100
Falco, let me go back here.

704
00:43:19,470 --> 00:43:22,874
There we go, Falco. So in my cluster I can

705
00:43:22,912 --> 00:43:26,206
set up all my filters and I can see.

706
00:43:26,388 --> 00:43:29,374
Okay, so here I can see all the recent events. Now this is a test

707
00:43:29,412 --> 00:43:32,890
cluster where we've intentionally configured it so that we get lots of events.

708
00:43:33,050 --> 00:43:36,926
So here I can click on this one and see what happened. Okay. Cube Prometheus

709
00:43:36,958 --> 00:43:41,118
deck. It got a priority error level. Okay, that's high ish.

710
00:43:41,214 --> 00:43:45,138
And the message, full message. If I expand it,

711
00:43:45,304 --> 00:43:49,118
file. Okay, it attempt to open a file for writing.

712
00:43:49,214 --> 00:43:53,174
And that's a so, all right, so I shouldn't do that.

713
00:43:53,212 --> 00:43:56,690
And then I can see here all of the different other times that it occurred.

714
00:43:56,770 --> 00:43:59,798
And if I click more, it actually will expand and it takes a

715
00:43:59,804 --> 00:44:03,946
minute. But it's going to give me a graph of the historical incident rate.

716
00:44:04,048 --> 00:44:07,686
So it's happening regularly. So it's probably part of some kind of regularly scheduled

717
00:44:07,718 --> 00:44:10,934
process. We calculate

718
00:44:10,982 --> 00:44:14,798
a signature here by combining several pieces of metadata and

719
00:44:14,804 --> 00:44:18,142
then Shaw hashing it so that I can find all of the other

720
00:44:18,196 --> 00:44:22,190
cases where this same kind of thing occurred with Project Falco.

721
00:44:23,490 --> 00:44:26,546
So you can search and see all the other incidences. And then if I go

722
00:44:26,568 --> 00:44:30,066
down to raw data here, I can actually see the

723
00:44:30,088 --> 00:44:33,730
full details in JSON or Yaml or in a table

724
00:44:34,470 --> 00:44:38,470
that project Falco logged out. So very nifty.

725
00:44:38,810 --> 00:44:42,242
So we've built this. You can go into your Falco

726
00:44:42,306 --> 00:44:45,954
settings globally and you can create rules.

727
00:44:46,002 --> 00:44:49,478
We've found that by default, Project Falco is kind of chatty. So we've got

728
00:44:49,484 --> 00:44:52,906
a rules engine here where you can go in and say ignore certain things in

729
00:44:52,928 --> 00:44:56,346
certain environments. From a realistic standpoint, you're probably going to have to do some

730
00:44:56,368 --> 00:44:59,578
tuning. We also do anomaly detection where it

731
00:44:59,584 --> 00:45:03,226
will automatically alert you whenever it finds something new. So if

732
00:45:03,248 --> 00:45:07,210
I go to settings in the corner here, I can say notify about anomalies,

733
00:45:07,370 --> 00:45:10,494
notify no more than once every say once a week.

734
00:45:10,612 --> 00:45:14,202
And I only want to be alerted to alert, emergency,

735
00:45:14,266 --> 00:45:17,698
critical and maybe nothing below that and I want

736
00:45:17,704 --> 00:45:20,962
to send to myself. Right. So pretty

737
00:45:21,016 --> 00:45:24,922
powerful. This allows you to configure

738
00:45:25,006 --> 00:45:29,062
alerts so that you're notified whenever something

739
00:45:29,116 --> 00:45:33,046
suspicious happens. And because we're doing that signature where

740
00:45:33,068 --> 00:45:36,502
we combine different metadata, we're able to alert whenever something new

741
00:45:36,556 --> 00:45:39,370
has occurred. So it's really powerful.

742
00:45:39,870 --> 00:45:43,306
All right, summary so we talked

743
00:45:43,328 --> 00:45:46,694
about the four c's of cloud security, cloud cluster,

744
00:45:46,742 --> 00:45:50,026
container and code. We talked about different tools you

745
00:45:50,048 --> 00:45:53,942
can use such as vpns and firewalls to limit access to the Kubernetes API.

746
00:45:54,006 --> 00:45:58,234
Kubenshube Hunter role based access control open gatekeeper

747
00:45:58,282 --> 00:46:02,458
Cubesec trivium project Falco we wrapped it all up in a really neat

748
00:46:02,634 --> 00:46:05,422
Msweeper demo. If you have questions,

749
00:46:05,556 --> 00:46:09,002
if you go to we have.

750
00:46:09,076 --> 00:46:12,466
You can use the contact form to reach out to me and you can click

751
00:46:12,488 --> 00:46:15,634
on docs at the top and we have great documentation on how to get started,

752
00:46:15,752 --> 00:46:19,454
so I definitely recommend starting there. We have an easy install

753
00:46:19,512 --> 00:46:22,966
guide on the left here. This getting started guide will actually get you up and

754
00:46:22,988 --> 00:46:26,422
running fairly quickly. It can be as easy as one line

755
00:46:26,476 --> 00:46:30,038
or you can create as easy as a one liner to try it out.

756
00:46:30,204 --> 00:46:33,494
As I mentioned earlier, we also have killer

757
00:46:33,542 --> 00:46:36,906
Coda, so that's also another great way to try it out.

758
00:46:37,008 --> 00:46:40,486
You can spin up a cluster and install all the tools in 2030

759
00:46:40,528 --> 00:46:43,760
minutes and it'll go away when it's done. So super easy.

760
00:46:44,450 --> 00:46:48,414
Also, if you have any issues, if you go to GitHub.com

761
00:46:48,532 --> 00:46:52,490
msweeper msweeper our GitHub repository

762
00:46:52,650 --> 00:46:55,822
is where you'll see all the activity happening as well as

763
00:46:55,876 --> 00:46:59,694
who has contributed. And you can always file an issue

764
00:46:59,812 --> 00:47:03,050
to give us feedback about feature requests.

765
00:47:03,210 --> 00:47:06,946
Or if there are gaps that you're finding or bugs that you're finding,

766
00:47:07,058 --> 00:47:10,214
definitely post them there. We'd love to hear from you. All right,

767
00:47:10,252 --> 00:47:12,578
thanks so much for the time. I hope you enjoyed it. I hope you learned

768
00:47:12,594 --> 00:47:15,718
a lot about Kubernetes security and I hope to talk to you

769
00:47:15,724 --> 00:47:16,418
on GitHub.

