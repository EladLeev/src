1
00:00:26,770 --> 00:00:30,374
Hi everyone, thank you for deciding my talk about

2
00:00:30,412 --> 00:00:33,830
the managecret across cloud on kubernetes.

3
00:00:34,330 --> 00:00:38,034
That's me. That is Jonathan Hill DevOps

4
00:00:38,082 --> 00:00:42,054
engineer at Appgate. I start

5
00:00:42,172 --> 00:00:46,342
the talk about the unfraze life is

6
00:00:46,396 --> 00:00:51,294
real simple but we insist on making it complicated by

7
00:00:51,332 --> 00:00:54,782
confusion. I love that phrase because when you

8
00:00:54,836 --> 00:00:58,314
try to do something new for your team and generate

9
00:00:58,362 --> 00:01:01,518
new value for your company, it's very hard.

10
00:01:01,604 --> 00:01:05,922
When you implement this with a new technology or

11
00:01:05,976 --> 00:01:09,042
in this case with kubernetes when you try to do

12
00:01:09,096 --> 00:01:13,022
something different where your knowledge

13
00:01:13,166 --> 00:01:17,046
it's very hard generate new tool or generate a

14
00:01:17,068 --> 00:01:20,454
specific tool for with best practice or with

15
00:01:20,492 --> 00:01:23,714
secure it's very hard. It's a learning path

16
00:01:23,762 --> 00:01:27,930
very difficult. But when you learn

17
00:01:28,000 --> 00:01:31,466
this new you can generate new feature to

18
00:01:31,568 --> 00:01:34,890
generate more value for your company. But every

19
00:01:34,960 --> 00:01:39,034
day that you learn something new it's very hard because

20
00:01:39,152 --> 00:01:43,358
implement this in your company, in your job,

21
00:01:43,444 --> 00:01:46,974
in your ecosystem, it's very hard for

22
00:01:47,012 --> 00:01:50,654
you and your team. In this case we learn about how

23
00:01:50,692 --> 00:01:53,674
to use secrets over kubernetes,

24
00:01:53,802 --> 00:01:57,294
how you can use these secrets for your

25
00:01:57,492 --> 00:02:01,234
cloud environments or on prem environments too.

26
00:02:01,432 --> 00:02:05,038
In this case bare metal for kubernetes is more

27
00:02:05,224 --> 00:02:08,694
fashion could be and learning how you can

28
00:02:08,732 --> 00:02:12,306
use these secrets for your Kubernetes cluster

29
00:02:12,418 --> 00:02:16,194
and how do you can get from your cloud provider

30
00:02:16,242 --> 00:02:20,086
and how you can obtain these new secrets for your

31
00:02:20,268 --> 00:02:23,758
cloud environment and how do you can get these secrets

32
00:02:23,794 --> 00:02:28,246
for your cluster ecosystem kubernetes.

33
00:02:28,438 --> 00:02:32,960
That's it. Learning something new okay,

34
00:02:33,410 --> 00:02:37,390
in this talk we're talking about the AWS SSam

35
00:02:38,450 --> 00:02:42,510
Azure keyboard, GCP secret manager Hashicor Bowl

36
00:02:42,850 --> 00:02:46,974
QR Net is a little speckle about QR nets and

37
00:02:47,092 --> 00:02:50,846
the object inside the QR that is called secrets.

38
00:02:50,958 --> 00:02:54,354
How you can use external secret data

39
00:02:54,472 --> 00:02:57,878
operator inside of kubernetes and how to install

40
00:02:58,044 --> 00:03:01,414
could be a little steps for use that and

41
00:03:01,452 --> 00:03:05,154
a little demo about how to use secrets

42
00:03:05,202 --> 00:03:08,726
in kubernetes using bold and how to mix

43
00:03:08,838 --> 00:03:12,570
this ecosystem and how you can use every day

44
00:03:12,640 --> 00:03:15,994
on your QR networks cluster. Talking about

45
00:03:16,032 --> 00:03:20,614
the AWS system manage parameter restore parameter

46
00:03:20,662 --> 00:03:24,842
restore is a capability of AWS system manager

47
00:03:24,906 --> 00:03:28,922
provides secure erational storage for configuration,

48
00:03:28,986 --> 00:03:32,802
data management and secrets management. You can store

49
00:03:32,856 --> 00:03:36,318
data such as password database strings,

50
00:03:36,414 --> 00:03:39,854
MSM machine image ids and Lisa and Scott

51
00:03:39,902 --> 00:03:43,554
ads parameter values. Your secrets area

52
00:03:43,672 --> 00:03:47,014
around the AWS and you store

53
00:03:47,132 --> 00:03:51,078
this in text plane in this case

54
00:03:51,164 --> 00:03:54,614
for row and you can encrypt this

55
00:03:54,652 --> 00:03:57,838
data with your HSM

56
00:03:58,034 --> 00:04:01,786
manage key generated inside

57
00:04:01,888 --> 00:04:06,678
the AWS. You can use that for your deployments

58
00:04:06,774 --> 00:04:10,302
or your ecosystem or your easy

59
00:04:10,356 --> 00:04:14,330
to instance or your virtual machine inside AWS,

60
00:04:14,490 --> 00:04:18,382
right? In this case we're talking show how

61
00:04:18,436 --> 00:04:21,466
do you create parameters inside AWS?

62
00:04:21,658 --> 00:04:25,490
You create parameters inside like a standard that

63
00:04:25,560 --> 00:04:29,298
is generate my poll that is the

64
00:04:29,384 --> 00:04:32,994
bad like that I use. In this case my

65
00:04:33,032 --> 00:04:36,210
secret is called my secret AWS.

66
00:04:36,630 --> 00:04:40,182
In this case the poll for that is

67
00:04:40,316 --> 00:04:43,734
my value, right? You can use

68
00:04:43,852 --> 00:04:47,362
this secret. In this case is client text

69
00:04:47,516 --> 00:04:51,514
for obtain from my deployments or

70
00:04:51,552 --> 00:04:55,030
obtain from my applications

71
00:04:55,110 --> 00:04:58,554
around my ecosystem inside the QR net or

72
00:04:58,672 --> 00:05:02,286
outside of QR net. It could be like a function as

73
00:05:02,308 --> 00:05:06,800
a service in AWS it's called lambda. You can use that

74
00:05:07,410 --> 00:05:10,782
inside of lambda and obtain this information

75
00:05:10,916 --> 00:05:14,320
around the database strings or

76
00:05:15,090 --> 00:05:19,026
could be endpoints from other API that I

77
00:05:19,048 --> 00:05:23,186
can use. You can store this secret in

78
00:05:23,368 --> 00:05:27,410
secure way and you can obtain this secrets

79
00:05:27,490 --> 00:05:31,730
from secure way in EWS you can define

80
00:05:31,890 --> 00:05:36,706
in amy account associate

81
00:05:36,738 --> 00:05:41,226
from a user or from a role from

82
00:05:41,408 --> 00:05:45,610
different ecosystem that you can deploy in there.

83
00:05:45,760 --> 00:05:49,194
You can define that role uses from lambda or uses

84
00:05:49,232 --> 00:05:52,634
from EC two instance or used for virtual machine and

85
00:05:52,672 --> 00:05:56,702
obtain a specific secrets and just can use

86
00:05:56,756 --> 00:06:00,030
for read don't for write just for read and can

87
00:06:00,100 --> 00:06:04,370
update in this case for the ecosystem

88
00:06:05,030 --> 00:06:10,366
the secure team could be updated this secret

89
00:06:10,478 --> 00:06:14,526
for obtain and generate new value for your tools.

90
00:06:14,558 --> 00:06:18,250
And how do you can generate this prospective

91
00:06:18,350 --> 00:06:22,214
for your team, for all your teams and all your company and

92
00:06:22,252 --> 00:06:26,770
how do you can define this process when the applications

93
00:06:26,850 --> 00:06:30,678
can obtain only the secure

94
00:06:30,854 --> 00:06:34,666
secret and how to the secure team can

95
00:06:34,768 --> 00:06:38,874
update this data without the developer team could

96
00:06:38,912 --> 00:06:42,798
be checked this data or it team

97
00:06:42,884 --> 00:06:46,494
just the secure team. That is a big feature for

98
00:06:46,532 --> 00:06:50,350
the cloud and how you can use that in

99
00:06:50,420 --> 00:06:54,794
all Azure keyboard secrets

100
00:06:54,922 --> 00:06:58,674
Azure keyboard is a cloud service for security strongly and

101
00:06:58,712 --> 00:07:02,626
accessing secrets a secret is anything that you can

102
00:07:02,808 --> 00:07:06,850
want to cliently control access to such as API

103
00:07:06,930 --> 00:07:10,566
keys, password, certificates or cryptographic keys key

104
00:07:10,588 --> 00:07:14,114
value therapy support two type of container bowels

105
00:07:14,162 --> 00:07:18,390
and manage hardware security mode HSM pools

106
00:07:18,470 --> 00:07:22,138
poll support storing software and HS back end

107
00:07:22,304 --> 00:07:26,214
keys and certificate manage HSM

108
00:07:26,342 --> 00:07:30,720
pool only support HM backend keys that

109
00:07:31,730 --> 00:07:35,694
could be confused for learning in this part.

110
00:07:35,812 --> 00:07:38,000
But in other words,

111
00:07:42,130 --> 00:07:46,082
how do you can store your data in

112
00:07:46,216 --> 00:07:50,622
security way right in this picture?

113
00:07:50,766 --> 00:07:55,022
Check how can you create new

114
00:07:55,096 --> 00:07:58,854
secrets over the Azure how you can store

115
00:07:58,972 --> 00:08:03,154
secret like AWS, how to dissimilar

116
00:08:03,282 --> 00:08:06,422
for AWS and how you can use in

117
00:08:06,476 --> 00:08:10,410
Azure, right. You generate a bolt

118
00:08:11,710 --> 00:08:14,922
primary in Azure and

119
00:08:15,056 --> 00:08:18,794
secondly you can generate a

120
00:08:18,832 --> 00:08:22,686
secret over the bolt and what is the type of the

121
00:08:22,788 --> 00:08:26,510
secret you can generate inside? How you can

122
00:08:26,660 --> 00:08:30,510
put this secret over the Azure

123
00:08:31,330 --> 00:08:34,494
Azure manage airbag

124
00:08:34,622 --> 00:08:38,820
access control for all ecosystem in your

125
00:08:39,430 --> 00:08:43,426
cloud and how you can put all together how you

126
00:08:43,448 --> 00:08:46,566
can use this like a function as a

127
00:08:46,588 --> 00:08:49,974
service over the Azure. Now how

128
00:08:50,012 --> 00:08:53,910
do you can obtain this secret from

129
00:08:54,060 --> 00:08:58,474
Azure as a function fast or like

130
00:08:58,672 --> 00:09:02,406
virtual machines or from your database

131
00:09:02,518 --> 00:09:06,042
or from your ecosystem around your

132
00:09:06,096 --> 00:09:09,894
deployment inside the cloud and how you can obtain

133
00:09:09,942 --> 00:09:13,294
and how do you can put there all together

134
00:09:13,412 --> 00:09:17,898
inside the azure? In this way you can generate

135
00:09:18,074 --> 00:09:22,240
granularity for your teams or for your

136
00:09:23,270 --> 00:09:27,330
developer teams or IT teams or security team for

137
00:09:27,480 --> 00:09:31,090
obtain this glan reality option from

138
00:09:31,240 --> 00:09:35,446
how you can use for your proposal or how

139
00:09:35,548 --> 00:09:39,750
you can change all your ecosystem around

140
00:09:39,820 --> 00:09:43,462
the company. How do you can

141
00:09:43,596 --> 00:09:47,266
obtain this feature and generate

142
00:09:47,458 --> 00:09:51,190
this process for your company that

143
00:09:51,260 --> 00:09:54,314
isn't very high level because you

144
00:09:54,352 --> 00:09:58,118
can generate could be the security team updated

145
00:09:58,214 --> 00:10:02,654
the secret how to the developer team could be obtained no,

146
00:10:02,772 --> 00:10:06,314
the developer team can update can obtain

147
00:10:06,362 --> 00:10:10,430
this secrets just the application. When this

148
00:10:10,500 --> 00:10:13,954
application is deployment in this way you

149
00:10:13,992 --> 00:10:18,434
can generate this process who

150
00:10:18,552 --> 00:10:22,146
can update these secret and how

151
00:10:22,168 --> 00:10:26,210
to obtain for an application and how to use that for

152
00:10:26,280 --> 00:10:30,398
all ecosystem that you generate inside

153
00:10:30,504 --> 00:10:33,880
around the ecosystem the application right,

154
00:10:34,890 --> 00:10:38,774
okay, checking other cloud GCP Secret

155
00:10:38,822 --> 00:10:42,902
Manager Secret Manager is a secure and companion storage

156
00:10:42,966 --> 00:10:46,266
system for API keys, password, certificates and

157
00:10:46,288 --> 00:10:49,494
other sensitive data. Secret Manager provides central

158
00:10:49,542 --> 00:10:52,770
place and single source truth manage access and outdated

159
00:10:52,790 --> 00:10:56,382
secrets across Google Cloud. That is

160
00:10:56,436 --> 00:10:59,854
definition we've taken about this gets from

161
00:11:00,052 --> 00:11:04,342
GCP around the how to store and how to manage secrets

162
00:11:04,426 --> 00:11:07,954
inside that, right? In this

163
00:11:07,992 --> 00:11:11,266
case we have this picture about how you

164
00:11:11,288 --> 00:11:14,514
can create over the Google Cloud

165
00:11:14,712 --> 00:11:17,858
secrets. You generate a secret like

166
00:11:17,944 --> 00:11:21,766
AWS and Azure generate a path could be or

167
00:11:21,788 --> 00:11:25,350
generate just the name for your secret and

168
00:11:25,420 --> 00:11:29,546
what is the value for your secret in

169
00:11:29,568 --> 00:11:33,174
this case, in GCP you can generate

170
00:11:33,222 --> 00:11:37,050
the granularity for your teams and the application and how

171
00:11:37,120 --> 00:11:40,974
you can use this definition around your

172
00:11:41,012 --> 00:11:44,686
process, how you can put together for the application

173
00:11:44,788 --> 00:11:48,974
and how your security team can be updated and

174
00:11:49,012 --> 00:11:52,222
how your application gets

175
00:11:52,356 --> 00:11:56,578
this updated from your secret for the security

176
00:11:56,664 --> 00:12:00,642
teams and you can change that for your

177
00:12:00,776 --> 00:12:05,494
granular definition in your

178
00:12:05,532 --> 00:12:09,554
matrix could be or your role

179
00:12:09,602 --> 00:12:13,014
associated inside for your company and how to the

180
00:12:13,052 --> 00:12:16,342
secure team just can change and

181
00:12:16,396 --> 00:12:20,638
just generate and just update these secrets.

182
00:12:20,754 --> 00:12:24,442
How the application obtained this secret update it from

183
00:12:24,496 --> 00:12:28,042
your GCP Secret manager how this

184
00:12:28,096 --> 00:12:31,818
application only the application can obtain this secret,

185
00:12:31,994 --> 00:12:35,310
not the IT team or developer team like as well.

186
00:12:35,460 --> 00:12:38,910
In Azure and AWS,

187
00:12:39,490 --> 00:12:43,182
Hashicor Bolt Bolt is a tool for secure

188
00:12:43,246 --> 00:12:46,386
access in secret. A secret is anything that

189
00:12:46,408 --> 00:12:49,634
you want to tightly control access to such an

190
00:12:49,672 --> 00:12:53,886
API key password certificate will provide a unified

191
00:12:53,918 --> 00:12:57,778
interface to any secret while provide tight access

192
00:12:57,864 --> 00:13:01,922
control and recording and detailing. Audited lock secured secret

193
00:13:01,986 --> 00:13:05,414
stores arbitrary key value secret can

194
00:13:05,452 --> 00:13:08,694
be stored in bold bold encrypts these secrets

195
00:13:08,742 --> 00:13:12,646
prior reading them to persist storage or gaining

196
00:13:12,678 --> 00:13:16,294
access to the robot storage. Using no access to your secrets,

197
00:13:16,342 --> 00:13:19,466
bolt can write disk, console and more,

198
00:13:19,648 --> 00:13:23,102
right? In this case, Hashicorpol could

199
00:13:23,156 --> 00:13:27,550
be interface for all your secrets around

200
00:13:27,700 --> 00:13:32,042
your cloud provider or on Prem's infrastructures

201
00:13:32,106 --> 00:13:36,274
too. How do you can manage this secret out

202
00:13:36,312 --> 00:13:39,634
of the box from the cloud providers and

203
00:13:39,672 --> 00:13:43,362
you can generate this interface and

204
00:13:43,416 --> 00:13:47,510
how do you can generate this process? You can define involved

205
00:13:47,850 --> 00:13:51,862
two granularity definition your

206
00:13:51,916 --> 00:13:55,574
matrix for your teams, how to the security

207
00:13:55,692 --> 00:13:59,142
team generate and update these

208
00:13:59,196 --> 00:14:03,142
secrets about your

209
00:14:03,276 --> 00:14:07,114
modify how you can obtain this

210
00:14:07,152 --> 00:14:10,574
secrets only for your application how you can

211
00:14:10,612 --> 00:14:14,398
pull all together that works very nice

212
00:14:14,564 --> 00:14:18,334
for your teams and your

213
00:14:18,452 --> 00:14:21,646
paths for your successful security in

214
00:14:21,668 --> 00:14:25,810
your company, right? In this case, the pictures show

215
00:14:25,880 --> 00:14:29,170
how you can create a keyboard secret.

216
00:14:31,030 --> 00:14:35,170
First you create a bowl, second you create a secret

217
00:14:35,670 --> 00:14:39,382
and third you can create your secret over

218
00:14:39,436 --> 00:14:43,558
the cloud over bolt for present

219
00:14:43,644 --> 00:14:47,106
this secret for your workload

220
00:14:47,218 --> 00:14:52,874
or for your function as a service out of the box for the

221
00:14:52,912 --> 00:14:57,562
cloud provider or on Prem. Could be you can install this

222
00:14:57,696 --> 00:15:00,826
solution on your machines,

223
00:15:00,938 --> 00:15:04,302
on your ecosystem, on your virtualization. Could be

224
00:15:04,436 --> 00:15:08,634
or the hashicorp

225
00:15:08,682 --> 00:15:12,558
could be generate this new tool for

226
00:15:12,724 --> 00:15:15,710
all deployment that you put altogether.

227
00:15:16,710 --> 00:15:20,980
In this case you can deploy these two

228
00:15:21,590 --> 00:15:25,930
in the Qrnet cluster, could be generate a security cluster

229
00:15:26,030 --> 00:15:29,442
only for storage all your bold secrets.

230
00:15:29,586 --> 00:15:34,114
How to your security teams are managed for this cluster

231
00:15:34,242 --> 00:15:37,882
only for the company, right? You can put

232
00:15:37,936 --> 00:15:42,070
all together and generate separately for developer environment

233
00:15:42,150 --> 00:15:45,270
or staging environment or production environment.

234
00:15:45,430 --> 00:15:49,190
How do you can separate these responsibilities

235
00:15:49,270 --> 00:15:52,620
for all environments? How do the

236
00:15:53,310 --> 00:15:56,522
security team can generate this

237
00:15:56,576 --> 00:16:00,318
new feature for the old company? Because you

238
00:16:00,404 --> 00:16:03,040
can generate a new process,

239
00:16:03,350 --> 00:16:07,010
how you can storage and how do you manage all

240
00:16:07,080 --> 00:16:10,626
secrets for the company and how can you

241
00:16:10,728 --> 00:16:15,060
provide these secrets and how you can get these secrets for all application

242
00:16:15,370 --> 00:16:19,154
around your cloud providers or your deployments

243
00:16:19,282 --> 00:16:22,694
that you generate inside the clouds or generate out of

244
00:16:22,732 --> 00:16:26,818
the clouds. Okay, talking about Kubernetes,

245
00:16:26,994 --> 00:16:30,962
it's an interesting technology, could be increased

246
00:16:31,106 --> 00:16:35,558
a lot of the expectation around

247
00:16:35,644 --> 00:16:39,340
the world, how you can use that in all

248
00:16:39,870 --> 00:16:43,914
specification in your company and how to bury

249
00:16:43,962 --> 00:16:48,074
this route for your company and for your team. How you can increase

250
00:16:48,202 --> 00:16:51,534
all values for your company. That is a good

251
00:16:51,572 --> 00:16:55,714
technology that you can use in your ecosystem for

252
00:16:55,752 --> 00:16:59,394
your application or for your IT environments. How do you

253
00:16:59,432 --> 00:17:03,614
can use that with virtualization or increase

254
00:17:03,662 --> 00:17:07,206
the value for all teams and your application.

255
00:17:07,308 --> 00:17:08,600
That's very good.

256
00:17:11,050 --> 00:17:14,374
Let me little definition about

257
00:17:14,412 --> 00:17:17,974
Kubernetes Kubernetes is a portable extensible open

258
00:17:18,012 --> 00:17:21,980
source platform for managing containerized workloads and service

259
00:17:22,430 --> 00:17:26,970
that facilitates both declarative configuration and automutation.

260
00:17:27,390 --> 00:17:30,278
It has a large rapidly growing ecosystem.

261
00:17:30,374 --> 00:17:33,902
Unreal service support and tools are

262
00:17:33,956 --> 00:17:37,520
weirdly available. Yeah, it's a very

263
00:17:38,530 --> 00:17:42,720
explosion for your mind blow up could be.

264
00:17:43,330 --> 00:17:47,310
And how you can uses QRnett and how to increase

265
00:17:47,390 --> 00:17:51,154
your value for your company with that. That is

266
00:17:51,192 --> 00:17:53,810
a good question for you for your company.

267
00:17:53,960 --> 00:17:57,346
How do you can use QR nets for all your ecosystem,

268
00:17:57,458 --> 00:18:01,234
all your apps, all your teams for generating

269
00:18:01,282 --> 00:18:04,982
new value for your company? Let me check about

270
00:18:05,036 --> 00:18:08,626
the little object inside the QR nets is a secret.

271
00:18:08,738 --> 00:18:11,882
Secret is can object that contains a small

272
00:18:11,936 --> 00:18:15,142
amount of sensitive data. Such a password,

273
00:18:15,206 --> 00:18:19,002
a token or a key information myth other

274
00:18:19,056 --> 00:18:22,922
side but put in a bot specification or near

275
00:18:22,976 --> 00:18:27,146
a container image using a secret meet that you don't

276
00:18:27,178 --> 00:18:30,766
need to include confidential data in your application code that

277
00:18:30,788 --> 00:18:34,498
it's a very nice definition because you can

278
00:18:34,664 --> 00:18:38,674
extract the sensitive data for

279
00:18:38,712 --> 00:18:41,860
your application, for your code, for your

280
00:18:44,310 --> 00:18:47,510
repositories. How you can put

281
00:18:47,660 --> 00:18:51,400
this data inside your application

282
00:18:52,090 --> 00:18:56,134
around your Kubernetes ecosystem that

283
00:18:56,172 --> 00:18:59,990
is very nice. In this part of the picture

284
00:19:00,150 --> 00:19:04,730
talking about the master node, how to work secure netties

285
00:19:05,070 --> 00:19:08,170
Kubernetes works with one master node and

286
00:19:08,320 --> 00:19:12,202
worker node. Could be, but depends for your architecture,

287
00:19:12,266 --> 00:19:15,806
depends for your availability zone, depends for your

288
00:19:15,908 --> 00:19:17,840
replication for your application.

289
00:19:19,170 --> 00:19:23,220
How do you can put your

290
00:19:24,150 --> 00:19:26,500
infrastructure, your application,

291
00:19:27,030 --> 00:19:30,834
your business for all your clients and how to

292
00:19:30,872 --> 00:19:34,674
decline your application for all

293
00:19:34,712 --> 00:19:38,440
your needs, right? In this case it's a

294
00:19:39,130 --> 00:19:42,818
single ecosystem for Kubernetes

295
00:19:42,914 --> 00:19:46,866
it's a master node and worker node. And the worker

296
00:19:46,898 --> 00:19:51,398
node deploy a port, a workload, a container

297
00:19:51,574 --> 00:19:55,082
that you can define your application. In this

298
00:19:55,136 --> 00:19:59,094
pod you can inject the secret for your ecosystem,

299
00:19:59,222 --> 00:20:02,990
right? That it could be a small

300
00:20:03,060 --> 00:20:06,794
definition with QR nets and secrets,

301
00:20:06,842 --> 00:20:11,040
but you can use more around that because you can put

302
00:20:11,570 --> 00:20:16,370
in your pod, in your container

303
00:20:16,950 --> 00:20:20,226
application your secret in

304
00:20:20,408 --> 00:20:22,820
two ways, in three ways. Sorry,

305
00:20:23,590 --> 00:20:27,526
this way is environment variable or a

306
00:20:27,548 --> 00:20:31,826
file or a patch with a lot of files but depends

307
00:20:31,858 --> 00:20:36,214
for your architecture for your application and how to the

308
00:20:36,252 --> 00:20:40,380
application gets this configuration or these

309
00:20:41,070 --> 00:20:44,714
passwords or these sensitive data for

310
00:20:44,752 --> 00:20:48,474
yours in that, right? Depends a lot of your application

311
00:20:48,592 --> 00:20:52,240
how to the developer team will be obtained this data

312
00:20:53,810 --> 00:20:57,662
for generate the value for the application. Talking about

313
00:20:57,716 --> 00:21:01,546
the external secrets external secrets

314
00:21:01,658 --> 00:21:05,342
operator it's an operator that integrates

315
00:21:05,406 --> 00:21:08,190
a secret manager system like AWS,

316
00:21:08,350 --> 00:21:12,030
secret manager, hashicorpole, Google secret manager,

317
00:21:12,110 --> 00:21:16,070
Azure keyboard and a lot of other

318
00:21:16,140 --> 00:21:19,942
cloud providers. How to get this information

319
00:21:20,076 --> 00:21:23,510
how you can get this sensitive data for your

320
00:21:23,580 --> 00:21:27,910
cluster, right? These APIs

321
00:21:27,990 --> 00:21:31,514
connect with the operator and

322
00:21:31,552 --> 00:21:34,118
update this data for your bot,

323
00:21:34,294 --> 00:21:38,202
right. But what is an operator? What is

324
00:21:38,256 --> 00:21:41,514
Kubernetes? What is operator by the new

325
00:21:41,552 --> 00:21:45,546
term operator are the software extension for Kubernetes

326
00:21:45,658 --> 00:21:49,454
that make use of custom resources to manage application

327
00:21:49,572 --> 00:21:53,342
and their components. Operators follow Kubernetes

328
00:21:53,406 --> 00:21:56,958
principles, notably the control loop.

329
00:21:57,134 --> 00:22:00,210
In this case when you work

330
00:22:00,280 --> 00:22:03,726
with operator in Kubernetes QR

331
00:22:03,758 --> 00:22:07,350
net is generate new

332
00:22:07,420 --> 00:22:11,334
things for your teams and how you can increase the

333
00:22:11,372 --> 00:22:15,174
value for QR nets could be just for you and

334
00:22:15,212 --> 00:22:19,126
you can use operator for increase this value for QR nets and

335
00:22:19,148 --> 00:22:22,662
how you can use for your company new features.

336
00:22:22,726 --> 00:22:26,054
That cloud be not generated inside of Qrnettis

337
00:22:26,102 --> 00:22:30,220
is just for you and your IT team and how you can generate this

338
00:22:30,930 --> 00:22:34,238
toil task and you can manage

339
00:22:34,324 --> 00:22:39,562
this task with one operator developed

340
00:22:39,626 --> 00:22:43,922
by your or your team and how to reduce the

341
00:22:43,976 --> 00:22:47,474
time that you can use for generate some

342
00:22:47,512 --> 00:22:51,106
task and you can define this task over the

343
00:22:51,128 --> 00:22:55,006
operator, right. You can change everything in QR nets

344
00:22:55,038 --> 00:22:58,454
and how to the QR net how

345
00:22:58,492 --> 00:23:01,846
to the operator could be generated for these

346
00:23:01,948 --> 00:23:05,286
new responsibilities with an operator and

347
00:23:05,308 --> 00:23:09,660
how you can deploy more easily, more fast

348
00:23:11,310 --> 00:23:14,618
that it's a very extensible you can use

349
00:23:14,784 --> 00:23:17,942
this operator for your teams and your clusters

350
00:23:18,006 --> 00:23:21,642
and how to develop that in your company.

351
00:23:21,776 --> 00:23:24,910
That's very nice that works with Kubernetes.

352
00:23:25,730 --> 00:23:29,870
Let me show you little architecture

353
00:23:30,370 --> 00:23:33,738
high level that QR net is an

354
00:23:33,764 --> 00:23:37,966
external secrets use. First you define a secret in your providers

355
00:23:37,998 --> 00:23:42,062
or bare metal in this case with Azure,

356
00:23:42,126 --> 00:23:46,194
with GCP, with AWS or bold

357
00:23:46,322 --> 00:23:49,938
that it's the last slides

358
00:23:50,034 --> 00:23:53,954
you can use any ecosystem that you define

359
00:23:54,002 --> 00:23:57,914
for your application or your security team could be defined for your

360
00:23:57,952 --> 00:24:01,514
company. That covers all needed for your company,

361
00:24:01,632 --> 00:24:05,510
right? Second you can write this definition

362
00:24:05,590 --> 00:24:09,670
for your file for your jammer file. That is the description

363
00:24:09,750 --> 00:24:13,498
how you can obtain this data from the external

364
00:24:13,674 --> 00:24:17,082
provider and how to obtain these values

365
00:24:17,146 --> 00:24:20,814
for the pod, for your warloat for

366
00:24:20,852 --> 00:24:24,914
your application and how to obtain and how to put in there

367
00:24:25,032 --> 00:24:28,754
how to the application weight. This secrets like

368
00:24:28,792 --> 00:24:32,350
can environment variable or file

369
00:24:32,430 --> 00:24:35,814
or path for folder could

370
00:24:35,852 --> 00:24:39,782
be depends everything about

371
00:24:39,916 --> 00:24:43,766
how the application is created for

372
00:24:43,788 --> 00:24:47,830
the developer teams or architecture team and how to define

373
00:24:48,750 --> 00:24:52,234
code can get this information for

374
00:24:52,272 --> 00:24:55,642
the bot or the application, right? And third

375
00:24:55,776 --> 00:24:59,786
you can use this secret in your cluster in this case or

376
00:24:59,808 --> 00:25:03,038
just only for your bot comes to

377
00:25:03,044 --> 00:25:06,654
the demo, right? Okay. In this

378
00:25:06,692 --> 00:25:10,686
demo we show how you can use stern secrets in

379
00:25:10,708 --> 00:25:14,290
your cluster environment and how you can update and

380
00:25:14,360 --> 00:25:18,066
install first the helm chart and

381
00:25:18,088 --> 00:25:21,234
how do you can use this chart and configure the

382
00:25:21,272 --> 00:25:26,790
char for connect for bolt? In this case first

383
00:25:26,940 --> 00:25:30,850
you need to add the external secrets

384
00:25:30,930 --> 00:25:34,434
held to your installation

385
00:25:34,482 --> 00:25:37,910
in the cluster. This case is this command.

386
00:25:38,910 --> 00:25:43,414
We add the helm repo that name external

387
00:25:43,462 --> 00:25:47,322
secrets that it's linked for this

388
00:25:47,456 --> 00:25:51,130
helm char in Internet location.

389
00:25:51,290 --> 00:25:54,842
In this case we can check what other repos

390
00:25:54,906 --> 00:25:58,880
can install in our cluster. In this case,

391
00:26:01,490 --> 00:26:05,214
repo list how we can shake external

392
00:26:05,262 --> 00:26:09,294
secrets it's added for the moment for our external

393
00:26:09,342 --> 00:26:12,594
secrets for our cluster and how you

394
00:26:12,632 --> 00:26:17,154
can use for that. This enable the

395
00:26:17,352 --> 00:26:21,026
hell the chart and you can use this chart

396
00:26:21,058 --> 00:26:24,630
for the configuration. Second, you need to install

397
00:26:24,700 --> 00:26:28,602
external secrets into qrnaries external secrets with

398
00:26:28,656 --> 00:26:33,110
helm enable helm enable

399
00:26:33,190 --> 00:26:37,654
external secrets that invoke external

400
00:26:37,702 --> 00:26:41,434
secrets chart that install and obtain

401
00:26:41,482 --> 00:26:44,878
external secrets value for this case.

402
00:26:45,044 --> 00:26:48,974
In this case we can generate the

403
00:26:49,012 --> 00:26:52,720
external secrets namespace. But in this moment,

404
00:26:53,990 --> 00:26:58,530
if we can check the currently name space is created

405
00:26:58,950 --> 00:27:03,330
actually we have this name space in our cluster

406
00:27:04,230 --> 00:27:08,440
cubectl get

407
00:27:09,130 --> 00:27:12,902
Ms spaces in this case

408
00:27:13,036 --> 00:27:17,426
we can create external secrets mspace

409
00:27:17,538 --> 00:27:21,720
and don't create this

410
00:27:23,050 --> 00:27:26,858
mspace. Let can copy for that

411
00:27:26,944 --> 00:27:30,640
comment and pass in deers and you can

412
00:27:31,090 --> 00:27:34,094
execute this command. In this case,

413
00:27:34,292 --> 00:27:38,250
helm generates all values for your cluster

414
00:27:38,330 --> 00:27:42,574
and the operator can

415
00:27:42,612 --> 00:27:46,114
be enabled for the cluster. In this case we can

416
00:27:46,232 --> 00:27:49,662
execute part of the operator and configure this operator

417
00:27:49,726 --> 00:27:53,330
if you need it. But in this case we can check

418
00:27:53,400 --> 00:27:57,570
how to can use this operator helm

419
00:27:57,650 --> 00:28:01,154
list in this case external

420
00:28:01,202 --> 00:28:05,634
secrets it's enabled for our cluster in the namespace external

421
00:28:05,682 --> 00:28:10,758
secrets is the fear reservation is deployed

422
00:28:10,774 --> 00:28:14,854
in this case. In this case it's

423
00:28:14,982 --> 00:28:19,690
a lot of object generated for external secret cubectl

424
00:28:22,050 --> 00:28:25,646
get pod it's a

425
00:28:25,668 --> 00:28:27,840
new pod for this case.

426
00:29:06,590 --> 00:29:11,674
In this case external secrets or this is the qualification

427
00:29:11,802 --> 00:29:15,950
for minus. If you can use QCTl

428
00:29:17,890 --> 00:29:24,546
get external secrets or

429
00:29:24,728 --> 00:29:28,706
QCTL get

430
00:29:28,808 --> 00:29:32,434
cases. It's the

431
00:29:32,472 --> 00:29:36,514
same way that you can find all objects in the namespace

432
00:29:36,562 --> 00:29:39,720
for the external secrets. In this case,

433
00:29:40,410 --> 00:29:44,006
don't show any resources because you

434
00:29:44,028 --> 00:29:48,106
need first configurate the resource and second use the

435
00:29:48,128 --> 00:29:52,246
resource for to generate new obtain

436
00:29:52,278 --> 00:29:55,834
the information about the bolt, right? In this

437
00:29:55,872 --> 00:29:59,210
case we preparate

438
00:30:00,770 --> 00:30:04,634
secret inside bolt. This secret

439
00:30:04,762 --> 00:30:08,730
is called my secret

440
00:30:08,890 --> 00:30:11,440
and obtained from bolt, right?

441
00:30:12,530 --> 00:30:15,950
First generate the secret bold

442
00:30:16,370 --> 00:30:19,842
we generate in this case on installation about

443
00:30:19,896 --> 00:30:23,662
external secrets. Now we can configure secret

444
00:30:23,726 --> 00:30:27,640
store from one secret poll jaml check

445
00:30:28,890 --> 00:30:33,560
what information have this Jamil this information is

446
00:30:34,570 --> 00:30:38,614
first create a secret that it's

447
00:30:38,662 --> 00:30:41,754
named bold token. This token is the

448
00:30:41,792 --> 00:30:45,494
communication from the username.

449
00:30:45,622 --> 00:30:49,594
In this case for the root name that can you

450
00:30:49,712 --> 00:30:53,226
obtain this authentication for the

451
00:30:53,408 --> 00:30:56,814
bolt in this server and this

452
00:30:56,852 --> 00:31:01,022
part is just the token for

453
00:31:01,076 --> 00:31:05,150
bolt. But in this cases in this part is the configuration

454
00:31:05,230 --> 00:31:08,834
about the server about what

455
00:31:08,872 --> 00:31:12,014
is the path

456
00:31:12,062 --> 00:31:15,430
of the that you can connect

457
00:31:15,500 --> 00:31:18,950
in this case that is the API version.

458
00:31:20,170 --> 00:31:23,894
How you can hold this secrets store in

459
00:31:23,932 --> 00:31:28,378
this case is bold backend and how

460
00:31:28,464 --> 00:31:32,746
to authenticate for the bolt. In this case use

461
00:31:32,848 --> 00:31:36,458
the token authenticate and uses

462
00:31:36,544 --> 00:31:39,850
the bold token that generate in this secret

463
00:31:41,890 --> 00:31:45,790
the secret obtained when the configuration

464
00:31:46,370 --> 00:31:50,240
happens. It's the first part when

465
00:31:52,470 --> 00:31:56,478
you can check the operation teams

466
00:31:56,654 --> 00:32:00,418
could be don't know

467
00:32:00,504 --> 00:32:04,466
what is the secret. In this case I can

468
00:32:04,568 --> 00:32:07,894
separate the files and

469
00:32:07,932 --> 00:32:11,922
this file is the security team and this file

470
00:32:11,986 --> 00:32:15,794
is the operation teams that can generate

471
00:32:15,842 --> 00:32:19,494
the configuration around what is the bold

472
00:32:19,622 --> 00:32:22,858
service or bold survey that I can use

473
00:32:23,024 --> 00:32:26,922
and this configuration it's the common for

474
00:32:26,976 --> 00:32:30,006
the security team and operation teams

475
00:32:30,038 --> 00:32:33,434
or it team that you can use what is

476
00:32:33,472 --> 00:32:37,678
the name of the bowl that you can generate security team

477
00:32:37,764 --> 00:32:41,278
and how to the security team and it team

478
00:32:41,444 --> 00:32:45,822
define this name for generate and establish

479
00:32:45,966 --> 00:32:49,298
some definitions how

480
00:32:49,384 --> 00:32:53,138
the names about the secrets around the QR net is going

481
00:32:53,144 --> 00:32:58,470
to be put in there. Right next

482
00:32:58,540 --> 00:33:02,694
step just apply this file but

483
00:33:02,812 --> 00:33:06,134
after that we can check that what type

484
00:33:06,172 --> 00:33:11,302
of secrets exist in there. Cutectl get

485
00:33:11,356 --> 00:33:15,154
secrets in this case exists

486
00:33:15,202 --> 00:33:19,978
this secret external token external

487
00:33:20,034 --> 00:33:24,240
null secret token secret store

488
00:33:25,250 --> 00:33:30,366
secret but not it's for that and

489
00:33:30,468 --> 00:33:34,302
is the installation about the helm that we generate

490
00:33:34,366 --> 00:33:38,340
in the last step. All right

491
00:33:38,950 --> 00:33:41,060
this isn't secret store.

492
00:33:42,790 --> 00:33:46,660
Kubectl get

493
00:33:47,510 --> 00:33:51,682
secret store that

494
00:33:51,736 --> 00:33:55,634
announce configuration about the secret store around the external

495
00:33:55,682 --> 00:33:58,490
secret right that's it.

496
00:33:58,640 --> 00:34:03,322
Then apply this configuration file and

497
00:34:03,376 --> 00:34:07,114
in this case generate a secret and secret store

498
00:34:07,232 --> 00:34:10,800
in the namespay that we in there

499
00:34:12,290 --> 00:34:15,806
and check what object generated in

500
00:34:15,828 --> 00:34:19,598
this case Kubectl get

501
00:34:19,764 --> 00:34:23,226
secrets and voila.

502
00:34:23,338 --> 00:34:27,114
That's my secret that I generate that it's

503
00:34:27,162 --> 00:34:30,994
vault token that is the name of the token that we

504
00:34:31,112 --> 00:34:35,640
send in this case with this value and

505
00:34:36,330 --> 00:34:40,182
we can check exactly with secret store that

506
00:34:40,236 --> 00:34:44,102
this bowl back end that contains all

507
00:34:44,156 --> 00:34:47,938
configuration around the external secret and

508
00:34:47,964 --> 00:34:51,740
how to connect with the bolt and

509
00:34:52,350 --> 00:34:56,566
my secret for generate this authentication

510
00:34:56,758 --> 00:35:01,050
for the application. Right in this guide

511
00:35:02,430 --> 00:35:06,026
config external secret from both using external

512
00:35:06,058 --> 00:35:10,154
secret is definition on how to you can uses external

513
00:35:10,202 --> 00:35:13,922
secret and how to before this

514
00:35:13,976 --> 00:35:17,806
authentication you can uses external secret for obtain

515
00:35:17,918 --> 00:35:21,422
the secret from world. In this path

516
00:35:21,486 --> 00:35:24,722
we can check my secret ball this

517
00:35:24,776 --> 00:35:28,886
property for secret the secret generate for my store

518
00:35:28,988 --> 00:35:32,578
configuration. In this case is example sync

519
00:35:32,674 --> 00:35:36,630
and generate a secrets store reference for

520
00:35:36,700 --> 00:35:40,650
my secret. That is the back end the bulb

521
00:35:40,990 --> 00:35:44,474
and it's a 60 store, right?

522
00:35:44,672 --> 00:35:48,810
In this case 60 store is boil backend

523
00:35:49,790 --> 00:35:53,054
ball backend this configuration that we generate in this

524
00:35:53,092 --> 00:35:56,414
case. In this definition how to

525
00:35:56,452 --> 00:36:00,042
authenticate before that it's authentication.

526
00:36:00,186 --> 00:36:03,314
You can use this authentication for obtain this

527
00:36:03,352 --> 00:36:07,182
secret right before the authentication

528
00:36:07,326 --> 00:36:11,006
you can obtain the secret in this path

529
00:36:11,198 --> 00:36:14,900
exactly this secret and put in my

530
00:36:15,290 --> 00:36:18,918
new secret definition example

531
00:36:19,004 --> 00:36:22,520
sync and put in their full bar,

532
00:36:22,970 --> 00:36:26,486
right? Let me check

533
00:36:26,588 --> 00:36:30,618
more simply with the example apply

534
00:36:30,704 --> 00:36:32,970
this configuration file.

535
00:36:33,470 --> 00:36:36,954
In this case generate bowl example that

536
00:36:36,992 --> 00:36:40,454
it's our external secret

537
00:36:40,502 --> 00:36:44,454
generation QCtl get

538
00:36:44,512 --> 00:36:49,150
secrets and voila. This example sync

539
00:36:49,730 --> 00:36:53,450
that contains the FUBAR definition

540
00:36:53,610 --> 00:36:57,170
Kubectl describe

541
00:36:57,910 --> 00:37:02,242
secret example sync and

542
00:37:02,296 --> 00:37:06,310
this my fubar my information

543
00:37:06,460 --> 00:37:10,406
about the secret. In any case I

544
00:37:10,428 --> 00:37:14,438
can use this secret that obtained from bowl from

545
00:37:14,524 --> 00:37:18,454
my pod and inject this secret in input

546
00:37:18,502 --> 00:37:22,294
of my pod with environment

547
00:37:22,342 --> 00:37:25,674
variable or can use for

548
00:37:25,792 --> 00:37:30,074
config file or a pack if I

549
00:37:30,112 --> 00:37:34,110
need it. Depends exactly what is the architecture for the application

550
00:37:34,260 --> 00:37:38,062
and how to can use this secrets for

551
00:37:38,116 --> 00:37:41,680
the application and how to can inject in there

552
00:37:42,050 --> 00:37:45,426
for the pod. We're talking about how you

553
00:37:45,448 --> 00:37:49,534
can use the secret generated by external

554
00:37:49,582 --> 00:37:53,470
secret and how to implement in this case for a deployment

555
00:37:53,630 --> 00:37:58,310
over the pod. In this definition we have a deployment

556
00:37:59,210 --> 00:38:02,598
in this case the example that use

557
00:38:02,764 --> 00:38:06,950
image in nginx

558
00:38:08,830 --> 00:38:12,410
80 and use in this case

559
00:38:12,480 --> 00:38:16,006
that is the important part. The secret username,

560
00:38:16,118 --> 00:38:19,734
right? That secret username is belly

561
00:38:19,782 --> 00:38:24,230
from secret key ref. In this case you invoke

562
00:38:24,310 --> 00:38:28,270
the exam pole sync and

563
00:38:28,340 --> 00:38:32,334
obtain the full bar value. That's the definition that

564
00:38:32,372 --> 00:38:36,622
we generate in the previous example that define

565
00:38:36,766 --> 00:38:40,722
the example sync and generate the few bar that

566
00:38:40,776 --> 00:38:44,434
obtained from the bolt. In this case,

567
00:38:44,632 --> 00:38:48,022
right? Just apply

568
00:38:48,156 --> 00:38:53,240
with this comment qctl apply

569
00:38:58,270 --> 00:39:02,970
and in this case generate a deployment qctl

570
00:39:04,670 --> 00:39:08,714
get bot this is

571
00:39:08,912 --> 00:39:11,500
example deployment, right?

572
00:39:11,950 --> 00:39:15,690
Kubectl describe

573
00:39:16,910 --> 00:39:20,846
bot this pot exactly the example

574
00:39:20,948 --> 00:39:24,226
deployment and in this case we

575
00:39:24,248 --> 00:39:28,020
can check something new in

576
00:39:28,470 --> 00:39:31,934
the deployment put in there the pod

577
00:39:32,062 --> 00:39:35,970
the secret environment secret username connect

578
00:39:36,040 --> 00:39:39,662
the secret example sec and obtain full VAR.

579
00:39:39,816 --> 00:39:43,686
In this case if we can check the secrets in these

580
00:39:43,868 --> 00:39:47,190
deployment in these namespace Kubectl

581
00:39:48,030 --> 00:39:51,674
get secrets we

582
00:39:51,712 --> 00:39:55,466
have example sync that contains in

583
00:39:55,488 --> 00:40:00,330
this case get secret describe secret

584
00:40:03,070 --> 00:40:07,440
that obtain the few bar data

585
00:40:07,890 --> 00:40:11,742
that is the complete flow that you can use define for

586
00:40:11,796 --> 00:40:15,394
first the security team how to

587
00:40:15,512 --> 00:40:19,662
define the connectivity

588
00:40:19,806 --> 00:40:23,362
and authorization and authentication over

589
00:40:23,416 --> 00:40:26,722
the bolt and how to in bolt. You can define

590
00:40:26,786 --> 00:40:31,640
this secret that don't know the

591
00:40:32,970 --> 00:40:36,582
developer team or it team just

592
00:40:36,636 --> 00:40:41,930
for the configuration. In this case for it team this

593
00:40:42,000 --> 00:40:45,482
other configuration that will be generated for the it

594
00:40:45,536 --> 00:40:49,740
team they're using secret and third the

595
00:40:50,210 --> 00:40:54,174
development team just use the secret for

596
00:40:54,212 --> 00:40:57,680
the environment and put in environment for the application.

597
00:41:01,570 --> 00:41:06,574
All process around. How do you can define

598
00:41:06,702 --> 00:41:10,926
how you can sensitive data could be secured

599
00:41:11,038 --> 00:41:14,890
in your whole ecosystem in the CLDC

600
00:41:15,070 --> 00:41:18,758
lifecycle could generate new

601
00:41:18,844 --> 00:41:22,758
value for the company because the

602
00:41:22,924 --> 00:41:27,294
secret that could be eject for the database

603
00:41:27,442 --> 00:41:31,740
or could be something other service or

604
00:41:32,190 --> 00:41:35,930
this very sensitive data the IT

605
00:41:36,000 --> 00:41:39,894
team or development team can't access for that

606
00:41:40,032 --> 00:41:44,382
just for the application and the secure team. And it's at the more

607
00:41:44,516 --> 00:41:48,478
powerful tool that you can use for the connect

608
00:41:48,564 --> 00:41:52,574
your cloud and you can connect the

609
00:41:52,612 --> 00:41:56,802
environmental two for the external secrets and

610
00:41:56,856 --> 00:42:00,386
how you can use this external secret for the

611
00:42:00,408 --> 00:42:03,534
Kubernetes and how to these external

612
00:42:03,582 --> 00:42:07,586
secrets generate a new proposal for all your

613
00:42:07,688 --> 00:42:10,902
company and how you can determine this

614
00:42:10,956 --> 00:42:14,950
for your company new process that the IT

615
00:42:15,020 --> 00:42:18,634
team and development team don't know. What is

616
00:42:18,672 --> 00:42:21,946
the sensitive data? Just the secure team

617
00:42:22,048 --> 00:42:26,202
and the application. No more. In this case it's a good

618
00:42:26,256 --> 00:42:28,780
example for the application.

619
00:42:30,610 --> 00:42:34,878
These slides contains the video about how you can check

620
00:42:34,964 --> 00:42:37,630
this offline. Could be,

621
00:42:37,780 --> 00:42:40,974
but you can

622
00:42:41,092 --> 00:42:44,622
explain in this video what is the part of the

623
00:42:44,676 --> 00:42:48,110
secret? What is the part of GML files using

624
00:42:48,180 --> 00:42:51,726
for demo. You can check this video too if you

625
00:42:51,748 --> 00:42:55,446
want. No problem. You if

626
00:42:55,468 --> 00:42:59,160
you have some questions you can send me

627
00:43:00,170 --> 00:43:04,338
pink over the social networks like Twitter

628
00:43:04,514 --> 00:43:07,510
or YouTube or GitHub.

629
00:43:08,410 --> 00:43:11,462
I hope that you can learn something new.

630
00:43:11,596 --> 00:43:14,180
Thank you for your time. See you soon.

