1
00:01:54,490 --> 00:01:57,710
Hi there, thank you for joining my session.

2
00:01:58,210 --> 00:02:01,966
Today we'll be talking about pragmatic security

3
00:02:02,068 --> 00:02:05,640
automation and devsecops in the cloud.

4
00:02:06,730 --> 00:02:10,546
So let me quickly introduce myself. I am Joshua Arvin

5
00:02:10,578 --> 00:02:14,566
lat people call me arvs. I am the chief technology

6
00:02:14,668 --> 00:02:18,246
officer of Nuworks Interactive Labs. I am

7
00:02:18,268 --> 00:02:21,786
also an AWS machine learning hero and I'm the author of

8
00:02:21,808 --> 00:02:25,286
the Tools Machine Learning with Amazon Sagemaker Cookbook

9
00:02:25,398 --> 00:02:28,358
and machine learning Engineering on AWS.

10
00:02:28,534 --> 00:02:31,162
So feel free to check this out on Amazon,

11
00:02:31,306 --> 00:02:34,586
especially if you're interested in performing machine

12
00:02:34,618 --> 00:02:37,280
learning experiments and deployments in the cloud.

13
00:02:40,150 --> 00:02:43,346
For today, our talk will be

14
00:02:43,528 --> 00:02:47,346
composed of three parts. The first one would be a quick introduction

15
00:02:47,378 --> 00:02:50,920
to the different concepts which we will use throughout the talk.

16
00:02:51,450 --> 00:02:54,882
The second part will talk about the different attacks

17
00:02:54,946 --> 00:02:58,218
possible depending on the type of system

18
00:02:58,304 --> 00:03:01,974
that you're dealing with in the cloud. And lastly,

19
00:03:02,022 --> 00:03:05,674
the exciting part, we will talk about. A variety of security

20
00:03:05,792 --> 00:03:09,390
automation strategies would be useful for you

21
00:03:09,460 --> 00:03:13,258
and your career. So let's get started. So let's

22
00:03:13,274 --> 00:03:17,086
start with the introduction. So why are we

23
00:03:17,108 --> 00:03:21,494
starting with this one? We would like to start with the reality

24
00:03:21,642 --> 00:03:26,622
where a lot of business owners often would deprioritize

25
00:03:26,766 --> 00:03:30,382
security and compliance, because generally

26
00:03:30,446 --> 00:03:34,146
a lot of business owners think that hey, there's nothing to

27
00:03:34,168 --> 00:03:37,622
secure if there's no business. So let's just prioritize the short

28
00:03:37,676 --> 00:03:41,686
term and long term financial objectives first. And then of

29
00:03:41,708 --> 00:03:45,014
course we need to prioritize also the client and

30
00:03:45,052 --> 00:03:48,874
customer happiness. And then finally, that's the time they

31
00:03:48,912 --> 00:03:52,634
focus on the other things like operational compliance along

32
00:03:52,672 --> 00:03:56,890
with security governance and other compliance requirements.

33
00:03:57,630 --> 00:04:01,038
So as you can see here in the screen, the priority level

34
00:04:01,124 --> 00:04:04,846
for most businesses for security would definitely be

35
00:04:04,868 --> 00:04:08,382
low, and you might be surprised because this

36
00:04:08,436 --> 00:04:10,640
may not be what you're thinking of. However,

37
00:04:11,110 --> 00:04:15,170
again, most companies often have this sort of

38
00:04:15,320 --> 00:04:16,580
priority level.

39
00:04:20,310 --> 00:04:24,022
That said, a lot of devsecops and

40
00:04:24,076 --> 00:04:27,954
even engineers dealing with the applications and systems

41
00:04:28,002 --> 00:04:31,830
hosted in cloud environments are often not

42
00:04:31,900 --> 00:04:35,682
trained to handle and mitigate

43
00:04:35,746 --> 00:04:39,658
different types of security risk and challenges. For example,

44
00:04:39,824 --> 00:04:43,354
if you're a developer working in a company, and that

45
00:04:43,392 --> 00:04:47,606
developer is working with a team of data scientists and engineers

46
00:04:47,798 --> 00:04:51,470
to build and manage ML powered systems,

47
00:04:51,970 --> 00:04:55,642
developers may often use libraries

48
00:04:55,706 --> 00:04:58,970
such as this one, where if we were to load

49
00:04:59,130 --> 00:05:02,674
a model with payload inside it,

50
00:05:02,792 --> 00:05:07,220
then there's a big chance that the system would get

51
00:05:07,590 --> 00:05:11,362
compromised. So the challenge there is that developers often

52
00:05:11,416 --> 00:05:15,126
just focus on the business requirements and they often try to

53
00:05:15,148 --> 00:05:19,046
hit the deadlines. So even if there are warnings or security issues

54
00:05:19,148 --> 00:05:22,646
like this, again, developers will deprioritize this

55
00:05:22,748 --> 00:05:26,258
and focus on getting the application working first.

56
00:05:26,444 --> 00:05:30,246
So what if a malicious user

57
00:05:30,438 --> 00:05:34,458
decides to upload a model in

58
00:05:34,464 --> 00:05:38,300
the Internet and the team decides to use

59
00:05:39,090 --> 00:05:42,382
that model? So that model, not knowing that there are

60
00:05:42,436 --> 00:05:46,014
certain types of attacks which could take advantage of these

61
00:05:46,052 --> 00:05:49,454
types of vulnerabilities, that team would

62
00:05:49,492 --> 00:05:53,982
fall victim to that sort of exploit

63
00:05:54,126 --> 00:05:56,980
where when the application loads the model,

64
00:05:57,430 --> 00:06:01,422
the server where the application is running would be compromised,

65
00:06:01,566 --> 00:06:05,126
which after a couple of minutes or maybe an

66
00:06:05,148 --> 00:06:08,566
hour or so, the entire account would be compromised as

67
00:06:08,588 --> 00:06:11,894
well. So again, the challenge right now

68
00:06:11,932 --> 00:06:15,654
is that security is often deprioritized, which means that

69
00:06:15,692 --> 00:06:20,198
in terms of training, in terms of budget, there's generally

70
00:06:20,374 --> 00:06:24,186
no one in the team who would be able to manage the

71
00:06:24,208 --> 00:06:27,482
security risk involved when building different

72
00:06:27,536 --> 00:06:29,340
types of applications in the cloud.

73
00:06:31,790 --> 00:06:35,946
So if you were the attacker, how would you

74
00:06:36,048 --> 00:06:39,210
try to attack that system? Of course,

75
00:06:39,280 --> 00:06:41,138
from a builder's point of view,

76
00:06:41,184 --> 00:06:44,338
you'll be telling yourself, okay,

77
00:06:44,424 --> 00:06:47,778
it's not a good idea to use that library. However,

78
00:06:47,864 --> 00:06:51,506
if you were the attacker, you would think of

79
00:06:51,528 --> 00:06:54,946
the offensive side of things, and you would think of

80
00:06:54,968 --> 00:06:58,262
the different strategies on how to compromise the system. So again,

81
00:06:58,316 --> 00:07:02,230
the way the defenders think and the way the attackers think

82
00:07:02,380 --> 00:07:05,638
are generally different. And it's important for security

83
00:07:05,724 --> 00:07:09,366
engineers to be aware of both mindsets.

84
00:07:09,558 --> 00:07:12,780
So if you were the attacker, you would

85
00:07:13,390 --> 00:07:17,178
have a malicious file, which is in this case, maybe a

86
00:07:17,184 --> 00:07:21,322
machine learning model. And that malicious file would contain

87
00:07:21,466 --> 00:07:25,086
payload, which contains instructions. So when the

88
00:07:25,108 --> 00:07:28,654
application loads that file, the application would

89
00:07:28,692 --> 00:07:32,654
also be running the commands

90
00:07:32,702 --> 00:07:35,300
in that payload. So in this case,

91
00:07:35,830 --> 00:07:39,954
the payload instructs the server to connect back to an

92
00:07:39,992 --> 00:07:43,490
attacker machine. So that attacker machine is actually a different

93
00:07:43,560 --> 00:07:47,446
machine. So the resource affected would connect back to the

94
00:07:47,468 --> 00:07:51,670
attacker machine using something like a reverse shell.

95
00:07:52,890 --> 00:07:56,322
So again, I'll repeat that part, a reverse shell.

96
00:07:56,466 --> 00:08:00,266
So what do I mean by that? So, once the reverse shell has been

97
00:08:00,288 --> 00:08:03,734
triggered and the attacker machine is connected, CTO, the victim

98
00:08:03,782 --> 00:08:07,914
machine or resource, the attacker could easily just perform

99
00:08:08,032 --> 00:08:11,858
any sort of operations and actions in the victim machine

100
00:08:11,894 --> 00:08:15,498
or resource as if it were his or her own machine.

101
00:08:15,594 --> 00:08:19,418
So similar to how SSH works, we connect to a machine

102
00:08:19,514 --> 00:08:22,660
and then we basically type in the commands that we need to run.

103
00:08:23,350 --> 00:08:26,690
So once the attacker is able to compromise certain

104
00:08:26,760 --> 00:08:30,306
resources and machines, the attacker can technically do

105
00:08:30,328 --> 00:08:33,802
anything. So the attacker can convert that machine

106
00:08:33,886 --> 00:08:37,478
into another attacker machine and attack

107
00:08:37,564 --> 00:08:40,694
other systems. The attacker could also check

108
00:08:40,732 --> 00:08:43,986
if there are valuable resources and let's

109
00:08:44,018 --> 00:08:47,354
say, database records, which could be used to

110
00:08:47,392 --> 00:08:49,900
compromise other accounts or even steal money.

111
00:08:50,670 --> 00:08:54,470
So again, the goal of the defenders would be to ensure

112
00:08:54,630 --> 00:08:58,550
that the system that they're taking care of would not fall

113
00:08:58,640 --> 00:09:00,830
victim into these types of attacks.

114
00:09:03,250 --> 00:09:07,486
So in the previous slide, we talked about a single

115
00:09:07,588 --> 00:09:11,086
move or exploit, and it's basically a single step where a

116
00:09:11,108 --> 00:09:14,206
reverse shell was triggered. In reality,

117
00:09:14,318 --> 00:09:17,902
this is just one of the different steps involved

118
00:09:18,046 --> 00:09:21,154
when dealing with security attacks. And there is

119
00:09:21,192 --> 00:09:24,010
something called the cybersecurity attack chain,

120
00:09:24,190 --> 00:09:28,022
where the attacker makes use of a variety of

121
00:09:28,076 --> 00:09:31,798
different attacks in sequence in order

122
00:09:31,884 --> 00:09:35,766
to accomplish what needs to be done from an offensive side

123
00:09:35,788 --> 00:09:40,026
of things. So for example, maybe there should be

124
00:09:40,208 --> 00:09:43,580
some sort of scanning happening at the start.

125
00:09:44,270 --> 00:09:47,260
And then once certain vulnerabilities have been,

126
00:09:48,030 --> 00:09:51,886
let's say, verified, then certain services in

127
00:09:51,908 --> 00:09:55,534
the application may be exploited. And then once

128
00:09:55,652 --> 00:09:59,182
those applications gets exploited, then maybe

129
00:09:59,236 --> 00:10:03,454
the next step would be privilege escalation, or maybe lateral movement,

130
00:10:03,582 --> 00:10:07,150
where other resources and other accounts

131
00:10:07,310 --> 00:10:10,674
may be checked and used in order to take over

132
00:10:10,712 --> 00:10:12,740
the entire cloud account.

133
00:10:13,430 --> 00:10:18,514
So once certain resources have been accessed,

134
00:10:18,642 --> 00:10:22,290
then again records and even databases

135
00:10:22,370 --> 00:10:25,670
can be downloaded and other sorts of

136
00:10:25,820 --> 00:10:29,338
moves can be performed by the attacker. So again,

137
00:10:29,504 --> 00:10:33,446
it's not just one step, it's actually a sequence of steps

138
00:10:33,558 --> 00:10:37,194
where attackers take advantage of vulnerabilities which

139
00:10:37,232 --> 00:10:38,410
can be exploited.

140
00:10:42,130 --> 00:10:45,934
So from a defender's point of view and

141
00:10:45,972 --> 00:10:49,770
from a defender's standpoint, how cloud defenders

142
00:10:49,850 --> 00:10:53,054
and security engineers prevent

143
00:10:53,102 --> 00:10:56,626
these types of attacks, given that

144
00:10:56,728 --> 00:11:00,254
a lot of the company's

145
00:11:00,302 --> 00:11:04,150
budget and resources are actually spent on the building

146
00:11:04,220 --> 00:11:08,134
part. So let's say that you had 40 hours

147
00:11:08,172 --> 00:11:12,200
in a week, the company would allocate maybe

148
00:11:12,730 --> 00:11:17,082
35 to 38 hours of your time to

149
00:11:17,136 --> 00:11:20,346
building the systems, and maybe just one CTO,

150
00:11:20,368 --> 00:11:23,546
2 hours for other things. So you

151
00:11:23,568 --> 00:11:27,482
would tell yourself, hey, isn't that not

152
00:11:27,536 --> 00:11:31,374
enough in order for us to check and audit the

153
00:11:31,412 --> 00:11:34,560
security aspect? And if you're asking that question,

154
00:11:35,090 --> 00:11:38,158
then yes, that's actually the right question to ask,

155
00:11:38,244 --> 00:11:42,382
because it's true. It's true that the

156
00:11:42,436 --> 00:11:45,682
attacks cannot be prevented by just spending 1

157
00:11:45,736 --> 00:11:49,006
hour on reviewing what types of security attacks

158
00:11:49,038 --> 00:11:53,122
are possible. So the best move in order for you to save time and

159
00:11:53,176 --> 00:11:57,080
help you manage the different competing needs in your company, is to

160
00:11:57,690 --> 00:12:00,070
use automation to your advantage.

161
00:12:01,930 --> 00:12:06,082
And automation helps us speed things up,

162
00:12:06,236 --> 00:12:10,138
where instead of us doing things manually, we're able to

163
00:12:10,304 --> 00:12:14,602
focus on the work that we need to do manually and

164
00:12:14,656 --> 00:12:18,406
have the rest perform automation. So what's

165
00:12:18,438 --> 00:12:22,094
an example of this? So for example, we have an

166
00:12:22,132 --> 00:12:26,394
automated pipeline. This automated pipelines basically performs

167
00:12:26,442 --> 00:12:29,678
a sequence of programmed steps where,

168
00:12:29,764 --> 00:12:33,074
let's say you push in some new code, you push in,

169
00:12:33,112 --> 00:12:37,106
some new updates, the automated pipeline would run.

170
00:12:37,288 --> 00:12:41,358
And let's say in the second step, different sorts of tools

171
00:12:41,454 --> 00:12:44,920
and libraries would be used to assess the code.

172
00:12:45,530 --> 00:12:48,722
So maybe the different libraries used would be checked.

173
00:12:48,866 --> 00:12:52,802
Maybe if there are existing vulnerabilities and weaknesses

174
00:12:52,866 --> 00:12:56,634
in the packages that you used, those would be flagged by

175
00:12:56,672 --> 00:13:00,778
the second step. The third step may be

176
00:13:00,864 --> 00:13:04,630
a manual approval step where additional checks may be performed

177
00:13:04,710 --> 00:13:08,058
by a security engineer, maybe using

178
00:13:08,144 --> 00:13:12,286
a set of tools. And those types of checks need

179
00:13:12,308 --> 00:13:15,406
to be performed after the second step. So even

180
00:13:15,428 --> 00:13:20,058
if the second step has been performing manually, has been performed automation,

181
00:13:20,234 --> 00:13:23,874
the third step can be manual and

182
00:13:23,912 --> 00:13:27,794
then the final step would be the deployment step. So once all checks have been

183
00:13:27,832 --> 00:13:31,250
performed, then the application can now be deployed.

184
00:13:31,670 --> 00:13:34,520
CTO production so again,

185
00:13:34,970 --> 00:13:38,758
these types of pipelines are helpful, and this is

186
00:13:38,844 --> 00:13:42,838
about combining the DevOps CICD process

187
00:13:43,004 --> 00:13:46,494
with that security component in order to ensure

188
00:13:46,562 --> 00:13:50,390
that before we actually deploy the changes in production,

189
00:13:50,550 --> 00:13:54,122
we're able to ensure that the system is also

190
00:13:54,176 --> 00:13:57,270
secure. In some cases,

191
00:13:57,430 --> 00:14:01,434
especially for companies without a security pipeline

192
00:14:01,482 --> 00:14:05,562
like this one, teams would be deploying

193
00:14:05,626 --> 00:14:09,230
changes to production only to find out that after

194
00:14:09,300 --> 00:14:13,310
running vulnerability assessment test that a certain component

195
00:14:13,390 --> 00:14:16,946
in their application is vulnerable. So they would have to

196
00:14:16,968 --> 00:14:20,974
roll that back and spend maybe one to two weeks resolving

197
00:14:21,022 --> 00:14:24,406
and remediating those vulnerabilities and then perform the

198
00:14:24,428 --> 00:14:28,326
deployment maybe a few days later. So again, that's not

199
00:14:28,348 --> 00:14:31,414
the recommended process. One of the best ways would

200
00:14:31,452 --> 00:14:34,840
be to incorporate security as early as possible

201
00:14:35,770 --> 00:14:39,450
and use automated pipelines in order to

202
00:14:39,520 --> 00:14:42,970
reduce the amount of time spent on security checks.

203
00:14:45,150 --> 00:14:49,222
So now that we're done talking about certain concepts

204
00:14:49,286 --> 00:14:53,134
which are very relevant, CTO, the different other slides in this

205
00:14:53,172 --> 00:14:55,680
talk, let's now proceed with part two,

206
00:14:56,210 --> 00:14:59,726
understanding what attacks are possible. So a lot

207
00:14:59,748 --> 00:15:03,886
of us, when we're trying to learn about security automation and devsecops,

208
00:15:03,998 --> 00:15:08,014
we try to learn the different concepts like DevOps,

209
00:15:08,062 --> 00:15:11,474
we try to learn the different automation techniques and we try

210
00:15:11,512 --> 00:15:14,798
to force the usage of these concepts in

211
00:15:14,824 --> 00:15:18,678
our everyday lives. We try to copy what other companies

212
00:15:18,764 --> 00:15:23,014
are doing, but in reality, what we should be doing is we

213
00:15:23,052 --> 00:15:27,418
should try to customize the solution to what our company needs.

214
00:15:27,584 --> 00:15:31,494
That's why it's important for us to understand what attacks

215
00:15:31,542 --> 00:15:33,900
are possible in our own system.

216
00:15:35,470 --> 00:15:39,226
So for example, for this one, this is a system utilizing

217
00:15:39,258 --> 00:15:42,880
Kubernetes inside our AWS account.

218
00:15:43,490 --> 00:15:47,166
So here it's easy for us to spot. Hey,

219
00:15:47,348 --> 00:15:51,454
isn't the cloud nine easy CTO instance high

220
00:15:51,492 --> 00:15:54,686
risk, meaning that given that it's in the public subnet,

221
00:15:54,798 --> 00:15:58,786
is it prone to attacks? So yes, it might be true that it might

222
00:15:58,808 --> 00:16:02,322
be prone to attacks, but at the same time, a lot of us are

223
00:16:02,376 --> 00:16:06,194
unaware that Kubernetes,

224
00:16:06,322 --> 00:16:10,054
especially when not configured properly, can also

225
00:16:10,092 --> 00:16:13,686
be prone to attacks. So security engineers must

226
00:16:13,708 --> 00:16:17,494
be aware that developers and DevOps engineers trying

227
00:16:17,532 --> 00:16:21,420
to use Kubernetes might be overwhelmed with a different

228
00:16:22,910 --> 00:16:26,890
combination of steps in order to manage that

229
00:16:27,040 --> 00:16:30,526
framework or by that tool. So security engineers must

230
00:16:30,548 --> 00:16:34,654
be aware that maybe the one deployed in production might be

231
00:16:34,692 --> 00:16:38,238
using the security standard

232
00:16:38,324 --> 00:16:42,114
defaults, which the impact of that would be

233
00:16:42,232 --> 00:16:45,774
that for that setup to be insecure,

234
00:16:45,902 --> 00:16:50,030
given that the DevOps team didn't configure

235
00:16:50,190 --> 00:16:54,462
the production set up properly, and a lot of teams

236
00:16:54,606 --> 00:16:57,894
actually encounter that problem, they would try CTO,

237
00:16:57,932 --> 00:17:01,174
use that shiny tool and they would try to include that

238
00:17:01,212 --> 00:17:04,870
in their resumes, and then after one month, two months,

239
00:17:05,020 --> 00:17:09,302
their system would be attacked because they forgot

240
00:17:09,446 --> 00:17:12,650
to secure the production configuration.

241
00:17:12,990 --> 00:17:16,634
So again, tools and services like

242
00:17:16,752 --> 00:17:20,874
this can easily be secured as long as we properly

243
00:17:20,922 --> 00:17:25,070
perform the steps to secure this. So again, teams forget

244
00:17:25,650 --> 00:17:27,280
that crucial step.

245
00:17:30,210 --> 00:17:33,998
So let's say that we have the type of system, we have to be aware

246
00:17:34,094 --> 00:17:37,602
of the different types of attacks possible on

247
00:17:37,656 --> 00:17:40,958
cloud resources as well. So in addition to Kubernetes,

248
00:17:41,054 --> 00:17:45,142
as you can see, we're using eks elastic Kubernetes service

249
00:17:45,276 --> 00:17:47,958
and we're using EC, two instances there.

250
00:17:48,124 --> 00:17:52,386
So the different types of attacks and risk involved there would include,

251
00:17:52,498 --> 00:17:56,490
let's say ineffective logging and monitoring. It may include also

252
00:17:56,560 --> 00:18:00,310
sensitive data exposure, especially for misconfigured

253
00:18:00,390 --> 00:18:04,058
resources. In terms of security

254
00:18:04,144 --> 00:18:07,770
misconfiguration, similar to what I said earlier,

255
00:18:08,270 --> 00:18:12,026
there might be security misconfigurations in the car container

256
00:18:12,058 --> 00:18:15,726
orchestration tool itself. And in addition to

257
00:18:15,748 --> 00:18:18,974
that, maybe the network security configuration has

258
00:18:19,012 --> 00:18:20,720
not been processed well. Also,

259
00:18:21,730 --> 00:18:25,582
and in terms of the inclusion of, let's say, CI CD pipelines,

260
00:18:25,726 --> 00:18:29,026
especially when these accounts have these types of

261
00:18:29,128 --> 00:18:32,754
resources as well, a lot of teams forget the

262
00:18:32,792 --> 00:18:36,354
security of that also. And then in terms of secret

263
00:18:36,402 --> 00:18:40,662
storage, a lot of teams have no idea where to store the

264
00:18:40,716 --> 00:18:43,510
security credentials. So for example,

265
00:18:43,580 --> 00:18:47,226
they'll ask themselves, oh, the best practice for this one is

266
00:18:47,328 --> 00:18:50,906
to put everything in environment variables. So again,

267
00:18:51,008 --> 00:18:54,554
there's a debate going around when talking about these

268
00:18:54,592 --> 00:18:58,294
types of best practices, but the real best practice

269
00:18:58,342 --> 00:19:02,110
here is looking for a solution

270
00:19:02,690 --> 00:19:06,606
which would work best even if a malicious actor would

271
00:19:06,628 --> 00:19:10,240
try to attack that system. So again,

272
00:19:10,850 --> 00:19:14,754
best practices from an engineering end may not

273
00:19:14,792 --> 00:19:18,786
really be best practices, especially if proven wrong by

274
00:19:18,968 --> 00:19:20,290
real attacks.

275
00:19:23,850 --> 00:19:26,870
In addition, CTO the example shared earlier,

276
00:19:27,370 --> 00:19:31,234
there are also applications utilizing the serverless

277
00:19:31,362 --> 00:19:35,720
mindset where different types of

278
00:19:36,270 --> 00:19:39,914
serverless services allow developers and

279
00:19:39,952 --> 00:19:43,974
engineers to build applications without managing servers.

280
00:19:44,102 --> 00:19:47,194
So of course in reality there's actually a server there,

281
00:19:47,312 --> 00:19:50,954
but that's the responsibilities of the cloud provider.

282
00:19:51,082 --> 00:19:55,566
So here we only need to worry about the custom part inside

283
00:19:55,668 --> 00:19:59,502
the services. For example, the serverless application makes

284
00:19:59,556 --> 00:20:03,266
use of a function as a service such

285
00:20:03,288 --> 00:20:06,674
as lambda, and it utilizes other services like

286
00:20:06,712 --> 00:20:09,410
API, gateway and Cloudwatch.

287
00:20:10,070 --> 00:20:13,534
So in terms of the surface area, the surface

288
00:20:13,582 --> 00:20:18,066
area would be different and the attacks on serverless applications

289
00:20:18,178 --> 00:20:21,734
would be different as well. So given that the team

290
00:20:21,852 --> 00:20:25,142
would focus more on the code part, then a big

291
00:20:25,196 --> 00:20:28,806
portion of the security of serverless applications

292
00:20:28,998 --> 00:20:32,522
would focus more on the code part. So attacks there

293
00:20:32,576 --> 00:20:36,470
would focus mainly on code injection, and it may include

294
00:20:36,550 --> 00:20:39,694
SQL injection as well. So you might think, hey,

295
00:20:39,732 --> 00:20:43,278
isn't SQL injection already old school

296
00:20:43,444 --> 00:20:46,670
something which is an attack from the past?

297
00:20:46,820 --> 00:20:50,794
So if a developer trying to utilize serverless

298
00:20:50,842 --> 00:20:54,270
applications have no idea about SQL injection,

299
00:20:54,430 --> 00:20:58,370
then they might try to simply load

300
00:20:58,950 --> 00:21:02,914
the request input and put it

301
00:21:02,952 --> 00:21:06,246
directly inside an SQL statement. So the

302
00:21:06,268 --> 00:21:09,910
danger there is that developers would think, hey,

303
00:21:09,980 --> 00:21:13,254
isn't all of this secure already? There's nothing to worry about when it comes

304
00:21:13,292 --> 00:21:17,318
to security because we're utilizing serverless resources.

305
00:21:17,494 --> 00:21:21,020
The unfortunate part there is that developers have no idea

306
00:21:21,390 --> 00:21:24,886
that serverless applications are also vulnerable,

307
00:21:24,998 --> 00:21:29,122
and the security level of these applications and resources

308
00:21:29,286 --> 00:21:32,880
depend on the developers implementing the code.

309
00:21:34,130 --> 00:21:37,774
So there's also something called denial of wallet attack.

310
00:21:37,892 --> 00:21:42,034
So if you're using something like lambda, then a well

311
00:21:42,072 --> 00:21:45,922
crafted attack would be able to use

312
00:21:45,976 --> 00:21:49,714
that lambda function that compute resource and have

313
00:21:49,752 --> 00:21:52,820
it running an infinite number of times.

314
00:21:53,830 --> 00:21:57,638
So that would mean that instead of that company paying

315
00:21:57,724 --> 00:22:00,966
for, let's say $50 per month, the company would be

316
00:22:00,988 --> 00:22:04,694
surprised that they would be paying for let's say $1

317
00:22:04,732 --> 00:22:09,046
million. So there are a lot of examples

318
00:22:09,078 --> 00:22:13,094
of that happening all around the world, and some examples involve

319
00:22:13,142 --> 00:22:17,958
developers making mistakes. However, in some cases attackers

320
00:22:18,054 --> 00:22:21,534
would do this where

321
00:22:21,652 --> 00:22:25,534
if they're not able to perform code injection, if they're not

322
00:22:25,572 --> 00:22:29,210
able to have some sort of remote code execution,

323
00:22:29,370 --> 00:22:33,678
especially on your setup, if they see that they can perform attacks

324
00:22:33,694 --> 00:22:37,426
like denial of service and denial of wallet attacks, then they'll do

325
00:22:37,448 --> 00:22:41,918
that as well. And in some cases, if you're not aware,

326
00:22:42,094 --> 00:22:45,494
there's also broken authentication mechanisms which

327
00:22:45,532 --> 00:22:49,206
can be taken advantage of. There are some companies who are

328
00:22:49,228 --> 00:22:53,122
not aware that when they use and have credentials

329
00:22:53,186 --> 00:22:55,800
in the front end part of a serverless application,

330
00:22:56,670 --> 00:23:00,202
then the correct set of steps will allow

331
00:23:00,256 --> 00:23:03,626
the attacker to get the credentials and

332
00:23:03,728 --> 00:23:07,610
perform privilege escalation, especially if the credentials used

333
00:23:07,760 --> 00:23:11,594
are bound CTo an account which have excessive

334
00:23:11,642 --> 00:23:14,906
permissions. So again, the attacks

335
00:23:14,938 --> 00:23:18,426
on serverless applications are a bit different, but again, when you're

336
00:23:18,458 --> 00:23:21,986
using serverless, it does not mean that your

337
00:23:22,088 --> 00:23:24,290
system is automatically secure.

338
00:23:25,670 --> 00:23:29,518
How about machine learning applications and systems?

339
00:23:29,694 --> 00:23:32,738
So let's say you're using a machine learning service,

340
00:23:32,904 --> 00:23:36,658
and the input parameters to your service would include

341
00:23:36,674 --> 00:23:40,866
let's say the model artifacts, some custom code, docker container

342
00:23:40,898 --> 00:23:44,134
images, a bit of configuration and a bit

343
00:23:44,172 --> 00:23:47,978
more. And that machine learning service is supposed to

344
00:23:48,144 --> 00:23:52,022
produce a server, a machine learning inference

345
00:23:52,086 --> 00:23:56,570
endpoint, which is used to perform predictions and inference.

346
00:23:57,150 --> 00:24:00,366
So if you have a machine learning system like that,

347
00:24:00,548 --> 00:24:04,810
you should be aware that in addition to the infrastructure attacks,

348
00:24:04,970 --> 00:24:08,382
there are also attacks possible when it comes to data

349
00:24:08,436 --> 00:24:11,546
privacy and model privacy. So again,

350
00:24:11,668 --> 00:24:15,426
even if the infrastructure has been secured properly, it does

351
00:24:15,448 --> 00:24:19,294
not mean that you're already protected. A well crafted

352
00:24:19,342 --> 00:24:23,626
input can easily take advantage

353
00:24:23,758 --> 00:24:27,026
of the weaknesses in your implementation.

354
00:24:27,218 --> 00:24:31,490
And again, this would affect data privacy and model privacy.

355
00:24:31,650 --> 00:24:35,478
So these attacks would include membership inference attack,

356
00:24:35,644 --> 00:24:39,720
model inversion attack, attribute inference attack, and more.

357
00:24:40,490 --> 00:24:43,674
So there kind of scary, right? So if this is the first

358
00:24:43,712 --> 00:24:47,146
time you're hearing about these types of attacks, then you would be

359
00:24:47,168 --> 00:24:50,958
surprised that attackers actually know more and they have actually

360
00:24:51,044 --> 00:24:53,790
specialized on these types of knowledge.

361
00:24:55,090 --> 00:24:57,806
Now let's focus on the third part,

362
00:24:57,988 --> 00:25:02,026
the exciting part, security automation strategies.

363
00:25:02,218 --> 00:25:05,474
Now that we have a good idea on what we need to do

364
00:25:05,592 --> 00:25:09,346
whenever we're dealing with security requirements, let's now focus

365
00:25:09,448 --> 00:25:13,346
on the different tips and techniques when dealing with security

366
00:25:13,448 --> 00:25:17,494
automation requirements. So the first question we need to tasks ourselves is,

367
00:25:17,532 --> 00:25:21,574
do we need to automate everything? The answer to

368
00:25:21,612 --> 00:25:25,270
this one is whenever it makes sense,

369
00:25:25,340 --> 00:25:29,046
whenever we're doing something over and over again, and we're spending

370
00:25:29,078 --> 00:25:32,730
a lot of time doing something repetitive, when in fact

371
00:25:32,880 --> 00:25:36,234
we could have been doing something more important,

372
00:25:36,352 --> 00:25:39,722
then yes, it may be a good idea to automate

373
00:25:39,786 --> 00:25:42,974
certain parts of your processes. However,

374
00:25:43,172 --> 00:25:47,040
it does not mean that we have to automate everything.

375
00:25:48,210 --> 00:25:52,242
Okay, so let's say that you have a team of five

376
00:25:52,296 --> 00:25:55,214
engineers, and they would be automating,

377
00:25:55,342 --> 00:25:58,610
let's say, for a certain

378
00:25:58,680 --> 00:26:01,778
part of the process, and they would be spending, let's say, one month.

379
00:26:01,864 --> 00:26:05,186
To automate that one, you would have to compute

380
00:26:05,218 --> 00:26:08,982
the cost associated to automating that

381
00:26:09,036 --> 00:26:12,006
part of the process. So of course you would need to take into account the

382
00:26:12,028 --> 00:26:16,206
salaries of the team members performing

383
00:26:16,258 --> 00:26:19,654
that automation work. So again, that includes

384
00:26:19,702 --> 00:26:23,606
a bit of financial knowledge, because in addition to the salaries,

385
00:26:23,718 --> 00:26:26,970
you would have to think about the other expenses

386
00:26:27,390 --> 00:26:30,702
of the company. So again, there's a formula there.

387
00:26:30,836 --> 00:26:34,446
But as mentioned, make sure that we automate the

388
00:26:34,468 --> 00:26:37,982
right stuff. And speaking

389
00:26:38,036 --> 00:26:41,986
of automation, the next question here is, is it

390
00:26:42,008 --> 00:26:46,114
a good idea to use automated pipelines, especially when

391
00:26:46,152 --> 00:26:50,500
trying CTO secure the output of the development team?

392
00:26:50,870 --> 00:26:54,306
So in most cases, the answer to this

393
00:26:54,328 --> 00:26:57,814
one would be a yes. Because instead of

394
00:26:57,852 --> 00:27:01,138
your team trying to learn all the types of security attacks,

395
00:27:01,234 --> 00:27:05,350
trying to specialize in security while they're learning how to code properly,

396
00:27:06,250 --> 00:27:09,510
there might be a better way to do that by incorporating

397
00:27:09,590 --> 00:27:13,514
security in the CI CD pipeline, where after the

398
00:27:13,552 --> 00:27:17,354
code has been pushed, CTO production before the application

399
00:27:17,472 --> 00:27:21,134
gets deployed, then a lot of security checks would

400
00:27:21,172 --> 00:27:24,880
be running before the actual deployment step.

401
00:27:25,490 --> 00:27:29,722
So the only risk CTO this one, is that a lot of companies forget

402
00:27:29,866 --> 00:27:33,380
that automated pipelines need to be secured. Also,

403
00:27:33,910 --> 00:27:37,134
because there is something called the poisoned pipeline

404
00:27:37,182 --> 00:27:40,914
execution, where an attacker will take

405
00:27:40,952 --> 00:27:44,546
advantage of the weaknesses of the CI

406
00:27:44,578 --> 00:27:48,966
CD pipelines. So what happens here is that a

407
00:27:48,988 --> 00:27:52,102
well crafted attack would use,

408
00:27:52,236 --> 00:27:55,862
and would use commands, and these commands would be

409
00:27:55,916 --> 00:27:59,046
run inside that pipelines. So let's

410
00:27:59,078 --> 00:28:03,750
say that the code is pushed to a repository,

411
00:28:03,910 --> 00:28:07,914
and then maybe the configuration is included there. Also, what if

412
00:28:07,952 --> 00:28:12,190
the configuration has been poisoned by the attacker?

413
00:28:13,170 --> 00:28:16,282
So, yes. So this may include a sequence

414
00:28:16,346 --> 00:28:19,822
of attacks in order to perform that attack. But again,

415
00:28:19,956 --> 00:28:24,206
that's one of the dangers when you're using an automated pipeline.

416
00:28:24,318 --> 00:28:27,986
So make sure that your pipeline has been secured as

417
00:28:28,008 --> 00:28:31,234
well. So how do we do

418
00:28:31,272 --> 00:28:35,498
it? We incorporate the principle of least privilege.

419
00:28:35,694 --> 00:28:39,590
And when you're dealing with cloud resources,

420
00:28:40,010 --> 00:28:45,670
there are generally different types of

421
00:28:45,740 --> 00:28:49,420
IAM entities. So for example,

422
00:28:50,270 --> 00:28:54,042
one IAM entity would correspond or map to a real

423
00:28:54,096 --> 00:28:57,402
human, but there are IAM entities which

424
00:28:57,456 --> 00:29:00,006
would map to cloud resources.

425
00:29:00,198 --> 00:29:03,782
So instead of your cloud resources being assigned

426
00:29:03,926 --> 00:29:07,862
IAM roles and permissions, which are overly permissive,

427
00:29:08,006 --> 00:29:12,002
the best move there would be to limit the

428
00:29:12,056 --> 00:29:15,730
privileges and permissions there only to what is needed

429
00:29:15,880 --> 00:29:19,600
by that resource. So let's say that the attack.

