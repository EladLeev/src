1
00:00:23,050 --> 00:00:26,334
Hi, my name is Ken Snyder and I want to share my journey of

2
00:00:26,372 --> 00:00:29,814
using Remix in my web app application and why you

3
00:00:29,852 --> 00:00:33,366
might love it as much has I do. I'll cover three things in

4
00:00:33,388 --> 00:00:36,374
this presentation. First, why I chose it for my project.

5
00:00:36,572 --> 00:00:39,826
Second, I'll introduce you to remix by creating

6
00:00:39,858 --> 00:00:44,150
a small app. And finally I'll talk more about remix philosophies

7
00:00:44,230 --> 00:00:48,826
and approaches and how they can be applied outside remix let

8
00:00:48,848 --> 00:00:52,422
me introduce myself. My name is Ken Snyder. I founded

9
00:00:52,486 --> 00:00:56,030
the company Shoreline, which offers a web application

10
00:00:56,180 --> 00:00:59,742
that allows cancer doctors to provide patients with

11
00:00:59,796 --> 00:01:03,278
specific and well timed educational resources throughout the

12
00:01:03,284 --> 00:01:07,342
treatment process. I am a co founder of UtahJs,

13
00:01:07,486 --> 00:01:11,502
a group for JavaScript engineers to get together for lectures

14
00:01:11,566 --> 00:01:15,602
and networking. And this presentation is on Remix, which is

15
00:01:15,656 --> 00:01:19,310
a meta framework, meaning that it doesn't replace react

16
00:01:19,390 --> 00:01:23,222
or code, but sits on top of both of them and really

17
00:01:23,276 --> 00:01:26,710
not just node but any javascript or typescript runtime

18
00:01:27,210 --> 00:01:30,742
for us. We are in the situation where patients are

19
00:01:30,796 --> 00:01:34,646
viewing education information on slow cellular networks.

20
00:01:34,758 --> 00:01:38,202
They're looking at only one or two pages and we want

21
00:01:38,256 --> 00:01:42,186
them to see the content as soon as possible and interact with

22
00:01:42,208 --> 00:01:46,094
it as soon as possible. Remix comes from the minds behind

23
00:01:46,212 --> 00:01:50,250
react router, which is the gold standard for building a react

24
00:01:50,330 --> 00:01:53,086
app, and remix is actually a company.

25
00:01:53,188 --> 00:01:56,894
It's staffed by full time engineers. Earlier this year

26
00:01:56,932 --> 00:02:01,182
they were acquired by Shopify, and so they have a lot of attention and resources

27
00:02:01,246 --> 00:02:05,250
driving this framework. So let's go ahead and dive in

28
00:02:05,320 --> 00:02:08,546
and create a remix app. A really easy way to get

29
00:02:08,568 --> 00:02:12,486
started with Remix is to use MPX create Remix. You give it

30
00:02:12,508 --> 00:02:16,390
a directory and you can also pass it a template and

31
00:02:16,460 --> 00:02:20,182
it will create a new application for you using that template. There's over 100

32
00:02:20,236 --> 00:02:24,710
templates in the community and this case we're just using the basic

33
00:02:24,870 --> 00:02:28,762
default template, but we can go ahead and open

34
00:02:28,896 --> 00:02:32,794
vs code to that folder and

35
00:02:32,832 --> 00:02:36,794
as we go in we can run NPX,

36
00:02:36,842 --> 00:02:40,430
run dev, and that will create a server for us.

37
00:02:40,500 --> 00:02:43,994
It will add a hot module reloading and as we visit

38
00:02:44,042 --> 00:02:47,410
this new application we get a welcome screen.

39
00:02:47,560 --> 00:02:50,754
This is defined in the routes folder as

40
00:02:50,792 --> 00:02:54,334
underscore index that represents the slash route

41
00:02:54,462 --> 00:02:57,726
or the root route. And in here we're

42
00:02:57,758 --> 00:03:01,458
going to go ahead and create a new page and it's

43
00:03:01,474 --> 00:03:05,238
going to be shop and so we create

44
00:03:05,404 --> 00:03:08,790
a file inside of the routes folder called Shop TSX.

45
00:03:09,450 --> 00:03:13,382
With that all we have to do is define a component and

46
00:03:13,436 --> 00:03:17,274
whatever's in that component will get rendered at that URL. In this case

47
00:03:17,312 --> 00:03:20,966
we're just creating a header so that we can see and demonstrate

48
00:03:20,998 --> 00:03:23,740
that we've got this route working.

49
00:03:24,670 --> 00:03:28,142
And then the second thing we're going to do is we want to create

50
00:03:28,196 --> 00:03:31,854
a page inside of this shell. So down

51
00:03:31,892 --> 00:03:35,354
below the header we're going to create the list of shopping items

52
00:03:35,482 --> 00:03:39,220
and allow us to add things to the list and to

53
00:03:39,910 --> 00:03:44,180
put things in our cart and to delete them and to

54
00:03:45,590 --> 00:03:50,102
just have this shopping cart kind of application.

55
00:03:50,236 --> 00:03:54,002
So we're creating this outlet

56
00:03:54,146 --> 00:03:57,718
and inside the outlet we want to render a child

57
00:03:57,804 --> 00:04:00,830
page which is shop items TSX.

58
00:04:00,930 --> 00:04:05,610
So we put that in the routes folder. And now whatever

59
00:04:05,680 --> 00:04:08,874
we return here from this component will be

60
00:04:08,912 --> 00:04:12,198
put and rendered at shopitems.

61
00:04:12,374 --> 00:04:15,918
So we'll go ahead and create just a hello world page so

62
00:04:15,924 --> 00:04:19,406
we can see that it's working. And then

63
00:04:19,508 --> 00:04:22,974
let's go ahead and load some

64
00:04:23,012 --> 00:04:26,946
items in. So we don't have a database but we're going to go ahead and

65
00:04:26,968 --> 00:04:30,398
just load items from memory. Here we're

66
00:04:30,414 --> 00:04:34,514
going to use this function called JSon. It's a remix function that

67
00:04:34,552 --> 00:04:38,482
just creates a response object with

68
00:04:38,536 --> 00:04:42,238
content type JSon. And this case we're passing

69
00:04:42,254 --> 00:04:45,846
it in one piece of data, which is items. And instead of

70
00:04:45,868 --> 00:04:49,462
items getting from the database like we might normally here,

71
00:04:49,516 --> 00:04:52,742
we're just going to define some in memory here that will sit

72
00:04:52,796 --> 00:04:56,666
with the server. The id is just the

73
00:04:56,688 --> 00:05:00,618
new date. So normally that would be an id from the database, the name of

74
00:05:00,624 --> 00:05:03,594
the item, and then we're going to say that it's not in the cart yet,

75
00:05:03,632 --> 00:05:07,294
we've just put it on our list. And these need

76
00:05:07,332 --> 00:05:11,214
to code into our items component. And the way we pull them in is by

77
00:05:11,252 --> 00:05:14,622
using this function, use loader data. So one thing

78
00:05:14,676 --> 00:05:18,562
that's nice about use loader data is that you can use

79
00:05:18,616 --> 00:05:21,986
type of loader to tell typescript what data is going to

80
00:05:22,008 --> 00:05:25,458
come in. So we know that

81
00:05:25,544 --> 00:05:29,446
the items have the shape defined in line

82
00:05:29,548 --> 00:05:33,094
four and those items come out of

83
00:05:33,132 --> 00:05:36,520
the loader function using the JSON function.

84
00:05:36,970 --> 00:05:40,886
And so when we tell typescript to

85
00:05:40,908 --> 00:05:44,314
use the type of loader, then in our items component here

86
00:05:44,432 --> 00:05:48,086
we actually get a list of items and we know exactly what types

87
00:05:48,118 --> 00:05:51,338
they are. And so we get that nice transition of types between

88
00:05:51,424 --> 00:05:55,386
server and client without having to do any extra steps

89
00:05:55,418 --> 00:06:00,138
or define any schemas

90
00:06:00,234 --> 00:06:05,498
or sharing and defining

91
00:06:05,594 --> 00:06:09,614
lots of types. So we're just going to go ahead and print out

92
00:06:09,812 --> 00:06:13,442
the items using a pre so that we can see them come in.

93
00:06:13,576 --> 00:06:16,222
And then we're going to make a way to create an item.

94
00:06:16,286 --> 00:06:19,540
And with that all we're going to do is create a form.

95
00:06:19,910 --> 00:06:23,170
The form is going to have one thing which is an input for

96
00:06:23,240 --> 00:06:26,646
the name and then a submit button. So we can go ahead and see

97
00:06:26,668 --> 00:06:30,326
in here. If we add something and click add item, we've got

98
00:06:30,348 --> 00:06:33,754
a 405 because we don't have any way

99
00:06:33,792 --> 00:06:38,230
to handle that post yet. The way to handle that post is just an export

100
00:06:38,390 --> 00:06:41,722
function action. And the action basically will

101
00:06:41,776 --> 00:06:45,914
respond to any posts or other verbs,

102
00:06:46,042 --> 00:06:49,566
other methods. And in this case we are reading the

103
00:06:49,588 --> 00:06:52,958
form data object. So because it's a form post,

104
00:06:53,044 --> 00:06:56,702
it's sending a form serialized in the normal

105
00:06:56,766 --> 00:07:00,514
browser, HTML form serialization, and we can

106
00:07:00,552 --> 00:07:04,878
pull that data out has a form data object by awaiting

107
00:07:04,974 --> 00:07:08,466
request form data. We're going

108
00:07:08,488 --> 00:07:11,286
to pull out the name from the form data which is the name of the

109
00:07:11,308 --> 00:07:14,646
item. And we can do that by just calling get name

110
00:07:14,748 --> 00:07:18,102
and we should have a string representing the name

111
00:07:18,156 --> 00:07:21,926
of the item. And we don't have a

112
00:07:21,948 --> 00:07:26,150
database here. But again, we're just going to add the new item with

113
00:07:26,300 --> 00:07:29,706
an id, a name and represent that it's not

114
00:07:29,728 --> 00:07:33,782
in the cart neither. So as we do that and we refresh,

115
00:07:33,846 --> 00:07:36,714
we can see, oh shoot, it still doesn't work.

116
00:07:36,752 --> 00:07:39,966
What do we need to do for the action? Well, it says you have to

117
00:07:39,988 --> 00:07:43,258
return something from the action. So in this case we don't

118
00:07:43,274 --> 00:07:46,414
really need any success messages or additional data

119
00:07:46,452 --> 00:07:50,734
sent back to the user. We just return null. And whenever

120
00:07:50,782 --> 00:07:54,402
we do this remix is automatically calling

121
00:07:54,456 --> 00:07:58,082
the loader again to get the new data. And so if we type

122
00:07:58,136 --> 00:08:01,682
in a new item and click add item, the way it gets added

123
00:08:01,746 --> 00:08:05,202
is that it's going to go into the action,

124
00:08:05,346 --> 00:08:08,786
push the item and then it'll go into the loader and load

125
00:08:08,818 --> 00:08:12,414
the item and rerender the component with the new items.

126
00:08:12,562 --> 00:08:16,298
You'll see here. One of the problems is that the

127
00:08:16,384 --> 00:08:19,946
text stays in the text box. We'd love it

128
00:08:19,968 --> 00:08:24,026
to clear out that text so we can add an item over and

129
00:08:24,048 --> 00:08:27,294
over again without doing anything special. A really

130
00:08:27,332 --> 00:08:31,358
simple way to do this is to force react to rerender the form

131
00:08:31,444 --> 00:08:35,454
anytime the items or the number of items changes.

132
00:08:35,652 --> 00:08:38,946
And so that will actually clear out our form anytime that

133
00:08:38,968 --> 00:08:42,466
we type something in. One thing though, if we

134
00:08:42,488 --> 00:08:45,954
type in and press enter, we're not going to be in the

135
00:08:45,992 --> 00:08:49,798
input anymore. So all we have to do is do auto focus.

136
00:08:49,884 --> 00:08:53,894
And now the browser will automatically keep focus into

137
00:08:54,012 --> 00:08:57,430
that input as we add more items.

138
00:08:57,850 --> 00:09:01,286
So let's go ahead and actually take the

139
00:09:01,308 --> 00:09:03,980
items and display them in a reasonable way.

140
00:09:04,350 --> 00:09:07,914
We're going to use an unordered list and each of the items will be

141
00:09:07,952 --> 00:09:11,226
a list item. Here we're using the id

142
00:09:11,328 --> 00:09:15,302
has something unique. Again, this might be an id from database

143
00:09:15,446 --> 00:09:19,038
and then we're just going to print out the item name. So you

144
00:09:19,044 --> 00:09:22,686
can see here we've got a nice unordered list with our items on

145
00:09:22,708 --> 00:09:25,930
it and now we want to be

146
00:09:25,940 --> 00:09:29,282
able to delete items off of our list. And so

147
00:09:29,336 --> 00:09:33,490
one way we can do this is do a post

148
00:09:33,640 --> 00:09:37,220
to shopitems and the item id.

149
00:09:37,670 --> 00:09:41,558
And we're going to go ahead and display it inline just for this demo so

150
00:09:41,564 --> 00:09:45,122
we can have the button next to each item.

151
00:09:45,266 --> 00:09:48,150
And you can see we're doing something special with this button.

152
00:09:48,220 --> 00:09:51,286
It's not a normal submit button. It has a name and a

153
00:09:51,308 --> 00:09:54,742
value. It turns out in javascript and in HTML

154
00:09:54,806 --> 00:09:58,506
you can just give a button a name and a value and when you

155
00:09:58,528 --> 00:10:02,058
click on that button it's as if that form contained a

156
00:10:02,064 --> 00:10:05,066
hidden input with that name and value.

157
00:10:05,248 --> 00:10:08,814
So this will allow us to tell that the delete button

158
00:10:08,852 --> 00:10:12,766
was clicked. When the form gets serialized it will have one value with the

159
00:10:12,788 --> 00:10:16,466
name of operation and a value of delete. So we need to go ahead and

160
00:10:16,488 --> 00:10:20,146
handle that form. And so we're going to create a new file in shop

161
00:10:20,248 --> 00:10:24,450
items dollarid. What that does is create

162
00:10:24,520 --> 00:10:28,318
a new URL for shopitem

163
00:10:28,494 --> 00:10:31,734
and then the id of the item which will allow us to mutate that

164
00:10:31,772 --> 00:10:35,526
particular item. The dollar id represents the name

165
00:10:35,628 --> 00:10:39,094
that the param that will come in and so

166
00:10:39,132 --> 00:10:41,770
we can just read the params inside the action.

167
00:10:44,910 --> 00:10:48,330
So we'll read the iD, we'll parse it as an integer

168
00:10:48,750 --> 00:10:51,834
and then we'll take the form data from that

169
00:10:51,872 --> 00:10:55,454
form and deserialize it. So we just have the one

170
00:10:55,492 --> 00:10:59,018
thing that we're interested in, which is the operation, and we're

171
00:10:59,034 --> 00:11:02,590
going to handle when the operation is equal to delete

172
00:11:03,330 --> 00:11:06,986
and we're going to just act directly on that list of items

173
00:11:07,018 --> 00:11:10,514
that we defined in our other route. Normally you

174
00:11:10,552 --> 00:11:14,370
would be doing some sort of database manipulation here, but anyway,

175
00:11:14,440 --> 00:11:18,514
what we're going to do to delete item is just find

176
00:11:18,552 --> 00:11:22,706
the index of the item with that particular id. And if it's found we're

177
00:11:22,738 --> 00:11:26,374
going to splice out the items at the

178
00:11:26,492 --> 00:11:30,374
given index. And as we learned before, with actions you've got

179
00:11:30,412 --> 00:11:33,430
to return something. So here we're going to return null.

180
00:11:33,770 --> 00:11:37,050
But now you can see if we type in a new option,

181
00:11:37,120 --> 00:11:40,806
we can add it and then we can also delete it. So let's

182
00:11:40,838 --> 00:11:44,710
add the ability to mark it as loaded into your cart.

183
00:11:44,790 --> 00:11:47,866
We're going to use another button. We don't have any more hidden inputs.

184
00:11:47,898 --> 00:11:51,310
We're just adding a new button with a name and an operation

185
00:11:51,810 --> 00:11:55,358
and the value of load. And that allows us to create

186
00:11:55,444 --> 00:11:58,930
a second mutation which is to load it into the cart.

187
00:11:59,430 --> 00:12:02,994
And we're going to represent loaded items by just giving them a

188
00:12:03,032 --> 00:12:06,546
line through text decoration so we can

189
00:12:06,568 --> 00:12:10,418
see the item is still there and that we've purchased it or that we've

190
00:12:10,434 --> 00:12:13,686
got it in the cart but it's not deleted from the

191
00:12:13,708 --> 00:12:17,586
list yet. And so here we're going to handle

192
00:12:17,698 --> 00:12:21,366
that load operation. And before we do

193
00:12:21,388 --> 00:12:24,118
that, I've realized we can refactor a little bit here.

194
00:12:24,284 --> 00:12:28,138
We're always going to be operating on one item. So let's find the item first.

195
00:12:28,224 --> 00:12:32,346
And then if we delete, if we need to delete the item, we splice it.

196
00:12:32,448 --> 00:12:35,926
If we need to load it, all we're doing is saying that it

197
00:12:35,968 --> 00:12:38,400
is in cart of true.

198
00:12:38,930 --> 00:12:42,986
And so as you can see, we can add an item and we can load

199
00:12:43,018 --> 00:12:46,558
it in the cart and it will have that nice strike through

200
00:12:46,644 --> 00:12:50,146
on it. Last thing is be able to unload it from

201
00:12:50,168 --> 00:12:53,630
our cart. So we're going to create a new button that does unloading.

202
00:12:53,790 --> 00:12:57,650
And again, it's going to come in here to the same action and

203
00:12:57,720 --> 00:13:01,106
we're going to handle the case when operation is

204
00:13:01,128 --> 00:13:05,606
unload. And it's very similar. All we're doing is marking as in

205
00:13:05,628 --> 00:13:08,962
cart as false. So now we can add items,

206
00:13:09,026 --> 00:13:12,134
we can delete them, we can load them in our cart. We can unload them

207
00:13:12,172 --> 00:13:15,402
in our cart. And now we've got a very simple and nice little

208
00:13:15,456 --> 00:13:18,220
app with just very few lines of code.

209
00:13:18,670 --> 00:13:21,898
If you're interested in doing more with this particular code,

210
00:13:21,984 --> 00:13:25,486
you can try it on GitHub. I have it at this URL and

211
00:13:25,588 --> 00:13:28,926
this QR code. One more thing I kind of

212
00:13:28,948 --> 00:13:32,782
want to mention about outlets. So outlets can

213
00:13:32,836 --> 00:13:36,942
be representing kind of your series of URLs.

214
00:13:37,006 --> 00:13:40,434
So in this particular app here, we have

215
00:13:40,552 --> 00:13:44,126
some general information like the header

216
00:13:44,158 --> 00:13:47,886
that comes across the top and that can be represented at the root

217
00:13:47,918 --> 00:13:51,394
route. And then when we load

218
00:13:51,522 --> 00:13:54,694
projects, we're loading this green area, which is

219
00:13:54,812 --> 00:13:58,534
a list of projects. And if you click on a project,

220
00:13:58,732 --> 00:14:02,594
then you'll get to the slash 1234 part of the URL

221
00:14:02,722 --> 00:14:06,522
and that will render inside of the green which is

222
00:14:06,576 --> 00:14:10,266
represented by red. So it allows you to really organize your

223
00:14:10,288 --> 00:14:14,006
code really simply when it comes to parent child relationships.

224
00:14:14,118 --> 00:14:17,694
And of course you don't have to do that, but it's a nice feature for

225
00:14:17,732 --> 00:14:21,374
those kinds of situations. You might say

226
00:14:21,492 --> 00:14:25,310
the forms that we dealt with were really simple and

227
00:14:25,460 --> 00:14:29,314
let's talk about something more complex. So here

228
00:14:29,352 --> 00:14:32,878
is a user's table. How in the heck would you represent

229
00:14:32,974 --> 00:14:35,694
this with just form actions?

230
00:14:35,822 --> 00:14:39,074
Normally your

231
00:14:39,112 --> 00:14:42,006
first thought would be okay, we're going to add a click handler to each of

232
00:14:42,028 --> 00:14:46,226
the pages and we're going to add a click handler to the sorting

233
00:14:46,338 --> 00:14:50,274
and we're going to capture the submit

234
00:14:50,402 --> 00:14:54,714
and apply the filters. So let's take this and

235
00:14:54,832 --> 00:14:58,282
we'll say that the form is this box right

236
00:14:58,336 --> 00:15:01,942
here and that these are actually all buttons.

237
00:15:02,006 --> 00:15:06,270
So we don't have any on click handlers, we just have an outer form

238
00:15:06,420 --> 00:15:10,506
and inside the form we have all of the submit buttons.

239
00:15:10,698 --> 00:15:14,510
So the filter will be just a regular submit button.

240
00:15:14,660 --> 00:15:18,318
So if you type something into search, you click filter

241
00:15:18,494 --> 00:15:21,746
and then it's going to go ahead

242
00:15:21,768 --> 00:15:25,154
and post that and you can do

243
00:15:25,192 --> 00:15:29,018
a search. And then we're going to use our trick

244
00:15:29,054 --> 00:15:32,962
that we learned from before, which is that buttons can have names and values.

245
00:15:33,106 --> 00:15:36,406
So the sort buttons, for example,

246
00:15:36,508 --> 00:15:39,798
this one is the email address. To sort

247
00:15:39,884 --> 00:15:43,178
upwards or ascending, you would send the value

248
00:15:43,344 --> 00:15:46,714
for sort as email and you could

249
00:15:46,752 --> 00:15:49,930
represent the descending with email or email

250
00:15:50,000 --> 00:15:52,620
descending or however you like to do it.

251
00:15:53,230 --> 00:15:57,230
Then the pages, they represent a page

252
00:15:57,300 --> 00:16:01,566
and a value. And so for example, if we were to make

253
00:16:01,588 --> 00:16:05,486
this a get form, you could see in the URL that we

254
00:16:05,508 --> 00:16:09,182
would have the name page equals

255
00:16:09,246 --> 00:16:13,458
two and sort equals email

256
00:16:13,624 --> 00:16:17,058
and filter equals bob. And that would

257
00:16:17,064 --> 00:16:20,354
all be in the URL. It would work right

258
00:16:20,392 --> 00:16:24,226
out of the box where it would search immediately if you went to that URL.

259
00:16:24,338 --> 00:16:27,558
Or it would just update the URL as you're going along clicking on

260
00:16:27,564 --> 00:16:31,426
these buttons. Let's talk about the remix philosophy.

261
00:16:31,538 --> 00:16:34,922
So as we saw, the way to write server and

262
00:16:34,976 --> 00:16:38,566
client code is very simple. We didn't

263
00:16:38,598 --> 00:16:42,186
think a lot about what runs on the client and what runs on the

264
00:16:42,208 --> 00:16:46,442
server. We are working with web foundations. The requests

265
00:16:46,506 --> 00:16:50,682
that come through, for example, are regular request

266
00:16:50,746 --> 00:16:54,510
objects and the responses are regular response objects.

267
00:16:54,930 --> 00:16:58,386
And we'll also talk a little

268
00:16:58,408 --> 00:17:01,614
bit later about how these kinds of applications

269
00:17:01,662 --> 00:17:05,970
can work without javascript and why you might want it to work without javascript.

270
00:17:06,310 --> 00:17:10,214
And we'll talk a little bit about the roadmap and

271
00:17:10,252 --> 00:17:13,830
the future flags, concepts that they embrace.

272
00:17:14,970 --> 00:17:18,520
So talking a little bit more about the server client model,

273
00:17:19,530 --> 00:17:23,030
basically I'm kind of person that's interested

274
00:17:23,100 --> 00:17:26,826
in how in the world does this get bundled. So we saw that there

275
00:17:26,848 --> 00:17:31,046
were a loader, a component and an action.

276
00:17:31,238 --> 00:17:34,714
And in doing that, how is

277
00:17:34,752 --> 00:17:37,994
the bundle created for the browser, and how is the bundle

278
00:17:38,042 --> 00:17:41,920
created for the server? So this is basically how it goes.

279
00:17:42,370 --> 00:17:46,880
If we look back at our shopping cart application,

280
00:17:47,730 --> 00:17:51,426
all of the things are in the server bundle. So everything

281
00:17:51,528 --> 00:17:54,946
gets bundled on the server and that makes the server capable of

282
00:17:54,968 --> 00:17:59,130
fetching data and writing and generating the HTML

283
00:17:59,310 --> 00:18:02,614
and then the browser, all that it needs is the part that

284
00:18:02,652 --> 00:18:06,066
generates HTML and the remix

285
00:18:06,098 --> 00:18:09,334
runtime which will automatically handle form submission and

286
00:18:09,372 --> 00:18:13,094
navigation and load things via

287
00:18:13,142 --> 00:18:16,906
fetch and kind of comparing it

288
00:18:16,928 --> 00:18:20,246
to a single page app. What you traditionally

289
00:18:20,278 --> 00:18:24,154
would see is the HTML first comes down to

290
00:18:24,192 --> 00:18:28,046
the browser and then the browser sees that it needs to download a bundle and

291
00:18:28,068 --> 00:18:31,178
so it has to go back to the server to get the bundle. The bundle

292
00:18:31,194 --> 00:18:35,534
will finally tell what data needs to be fetched and then

293
00:18:35,652 --> 00:18:38,930
when that data is returned, it can generate the HTML.

294
00:18:39,270 --> 00:18:43,310
Compare that to a remix application where on the first load

295
00:18:43,470 --> 00:18:47,054
the server is able to grab the data, generate the HTML

296
00:18:47,102 --> 00:18:51,014
and return that in the initial response. So immediately the user can

297
00:18:51,052 --> 00:18:54,678
interact with the page. What will be at the bottom

298
00:18:54,764 --> 00:18:58,498
is this client bundle, and its purpose is to hydrate

299
00:18:58,514 --> 00:19:02,570
the page. And by hydrate we mean make additional

300
00:19:03,150 --> 00:19:06,870
interactive things work. So with forms

301
00:19:06,950 --> 00:19:11,014
it will automatically handle them and submit them via

302
00:19:11,062 --> 00:19:15,102
fetch. And for links it will use

303
00:19:15,156 --> 00:19:18,446
react router to load only the parts of

304
00:19:18,468 --> 00:19:22,346
the page that change. So it adds efficiency. But it's

305
00:19:22,378 --> 00:19:25,774
not absolutely necessary for the application to work.

306
00:19:25,972 --> 00:19:30,030
And one way to maybe visualize this is to think about a waterfall.

307
00:19:30,110 --> 00:19:33,554
With remix, the page is fully painted and you

308
00:19:33,592 --> 00:19:37,026
can use it, and then by the time all

309
00:19:37,048 --> 00:19:41,062
of the hydration occurs taken, it's fully interactive in terms of

310
00:19:41,116 --> 00:19:44,258
anything that's special to JavaScript. So for example, if you've

311
00:19:44,274 --> 00:19:47,762
got Tinymce, obviously remix

312
00:19:47,826 --> 00:19:51,562
can't completely paint that from the server side

313
00:19:51,616 --> 00:19:55,258
because it takes a

314
00:19:55,264 --> 00:19:58,730
lot of client side JavaScript to make the

315
00:19:58,800 --> 00:20:02,378
tiny MCE work. And you can compare that to

316
00:20:02,464 --> 00:20:06,314
single page apps where it takes multiple

317
00:20:06,362 --> 00:20:10,030
waterfalls until the page is even painted.

318
00:20:10,610 --> 00:20:14,414
One really great feature of remix is that there

319
00:20:14,452 --> 00:20:18,114
are lots of server and runtime adapters. So you can

320
00:20:18,152 --> 00:20:22,162
use new runtimes such as Cloudflare workers, Dino and

321
00:20:22,216 --> 00:20:26,082
Bun, and you can use services like

322
00:20:26,136 --> 00:20:28,770
Netflix, Azure and AWS.

323
00:20:29,370 --> 00:20:33,142
It supports all of those things. And also you can

324
00:20:33,196 --> 00:20:36,530
have actually just more traditional

325
00:20:36,610 --> 00:20:39,234
server frameworks, including exprs,

326
00:20:39,282 --> 00:20:42,586
fastify and many more. And if you actually look at the

327
00:20:42,608 --> 00:20:46,278
official list, there's 116 repositories

328
00:20:46,374 --> 00:20:49,846
right now of stacks that people have created.

329
00:20:49,878 --> 00:20:53,366
And these are various combinations of technologies. And it's

330
00:20:53,398 --> 00:20:57,294
really great to see people from the community creating these

331
00:20:57,412 --> 00:21:01,182
stacks and making remix work in so many different

332
00:21:01,316 --> 00:21:04,846
ways. And I do want to just highlight the fact that

333
00:21:04,948 --> 00:21:08,266
we've got some really great concepts in Dino and bun

334
00:21:08,378 --> 00:21:11,518
that are coming out and code as it's

335
00:21:11,614 --> 00:21:15,234
getting to version 20 and 18 and 20. There's call these

336
00:21:15,272 --> 00:21:19,414
amazing new things, and I love that we can just pick Remix now and

337
00:21:19,452 --> 00:21:22,760
it will work with all of these things going forward.

338
00:21:23,850 --> 00:21:27,990
So the second thing to mention is that we want to

339
00:21:28,060 --> 00:21:31,146
understand and work with the foundations of the

340
00:21:31,168 --> 00:21:34,250
web. So you may be familiar with this episode,

341
00:21:34,590 --> 00:21:38,234
this reference where Roy and Moss get together

342
00:21:38,352 --> 00:21:41,674
and convince Jen that this little box is the

343
00:21:41,712 --> 00:21:45,102
Internet. And so we have a bunch of great

344
00:21:45,156 --> 00:21:49,054
standards. As I mentioned, requests and response are

345
00:21:49,092 --> 00:21:52,286
things that remix does right out of the box.

346
00:21:52,468 --> 00:21:56,242
We also have both server side and client side, the same

347
00:21:56,296 --> 00:21:58,610
fetch API as of node 18.

348
00:21:59,030 --> 00:22:03,214
And basically remix

349
00:22:03,262 --> 00:22:06,558
uses that fetch mechanism internally.

350
00:22:06,734 --> 00:22:10,658
We also saw how you can use form data to serialize forms,

351
00:22:10,834 --> 00:22:14,534
and a few other things that we'll cover in a bit

352
00:22:14,572 --> 00:22:18,710
here. Headers, how to read headers and set headers,

353
00:22:19,130 --> 00:22:23,066
how to work with URLs to parse them or

354
00:22:23,088 --> 00:22:26,954
to build them, and the parameters to serialize and

355
00:22:26,992 --> 00:22:30,934
unserialize query parameters in a URL. And then remix

356
00:22:30,982 --> 00:22:34,240
also takes advantage of some

357
00:22:35,410 --> 00:22:39,566
prefetching and caching that's built intro the

358
00:22:39,588 --> 00:22:43,022
web and built into browsers. And we don't know a ton about these,

359
00:22:43,076 --> 00:22:46,754
probably because we're not used to making use

360
00:22:46,792 --> 00:22:50,146
of them. But Remix has kind of done

361
00:22:50,168 --> 00:22:53,566
the hard work for us and automatically

362
00:22:53,598 --> 00:22:57,540
uses prefetching and caching in its mechanisms for

363
00:22:58,250 --> 00:23:01,954
adding those features. And then we also talked about HTML

364
00:23:02,002 --> 00:23:05,960
forms and how remix embraces those in order to

365
00:23:06,970 --> 00:23:09,030
do any kinds of mutations.

366
00:23:10,250 --> 00:23:13,846
So just to kind of give you an example, the way request

367
00:23:13,878 --> 00:23:18,090
and response both work on server and on client,

368
00:23:18,590 --> 00:23:22,566
we have these newest runtimes, Bundino Cloudflare

369
00:23:22,598 --> 00:23:26,042
workers, for example, they all use a raw request

370
00:23:26,106 --> 00:23:29,790
and they all expect you to return a new response.

371
00:23:30,290 --> 00:23:33,130
So these are really interesting primitives.

372
00:23:33,290 --> 00:23:37,086
And obviously these functions here that fetch and

373
00:23:37,108 --> 00:23:40,194
receives a request, that's where you would add some sort of

374
00:23:40,232 --> 00:23:43,806
adapter that does the routing based on the request URL.

375
00:23:43,998 --> 00:23:47,186
And that's sort of how remix can plug into each

376
00:23:47,208 --> 00:23:50,270
of these. And you may not have realized it,

377
00:23:50,280 --> 00:23:53,494
but when you're using fetch, you're really using request and

378
00:23:53,532 --> 00:23:56,966
response. So fetch and request have the

379
00:23:56,988 --> 00:24:00,358
exact same signature. You can take a URL and then you

380
00:24:00,364 --> 00:24:04,074
can also take an initialization where you can set the

381
00:24:04,112 --> 00:24:07,846
method and the headers and the body of the request.

382
00:24:08,038 --> 00:24:11,402
And so what you really can actually do is just create the

383
00:24:11,456 --> 00:24:14,442
request and you can send the request to fetch.

384
00:24:14,506 --> 00:24:18,270
So that's an alternate signature for using fetch.

385
00:24:19,170 --> 00:24:22,554
And one way to think about it is that fetch

386
00:24:22,682 --> 00:24:26,218
takes in a request and returns a promise with a response.

387
00:24:26,314 --> 00:24:29,602
You can also use headers when the request comes through.

388
00:24:29,736 --> 00:24:33,860
It has a headers property, and this is actually an headers object.

389
00:24:34,310 --> 00:24:37,586
And headers has things like get and set.

390
00:24:37,768 --> 00:24:41,570
Get allows you to get the header regardless

391
00:24:41,650 --> 00:24:44,998
of uppercase or lowercase letters, because the

392
00:24:45,004 --> 00:24:49,202
HTML standard headers are not case sensitive, so it's

393
00:24:49,266 --> 00:24:52,954
easy to work with them. If you just use the get and set

394
00:24:52,992 --> 00:24:56,682
methods, you can create a new headers object by

395
00:24:56,736 --> 00:24:59,786
just passing in plain JavaScript object,

396
00:24:59,968 --> 00:25:03,402
and the key value pairs will be used to create

397
00:25:03,456 --> 00:25:06,714
the headers. If you need headers, for example,

398
00:25:06,832 --> 00:25:10,558
that repeat. So if you have two cookies that you need to send,

399
00:25:10,724 --> 00:25:14,046
then you have to have set cookie twice in

400
00:25:14,068 --> 00:25:17,166
order to do that. You can't use a plain JavaScript object, but you

401
00:25:17,188 --> 00:25:21,074
can send an array of arrays. So in this headers object we

402
00:25:21,112 --> 00:25:24,654
have three headers. One is content type, one is set cookie,

403
00:25:24,702 --> 00:25:28,130
and another is also set cookie with a different cookie.

404
00:25:28,890 --> 00:25:32,594
In a similar way you can serialize and serialize

405
00:25:32,642 --> 00:25:36,594
search parameters. With the URL search params constructor

406
00:25:36,642 --> 00:25:40,518
you can pass in one of three things. The first is

407
00:25:40,604 --> 00:25:43,930
just a regular string that you might see in the URL.

408
00:25:44,350 --> 00:25:47,818
Second is a plain old JavaScript object

409
00:25:47,904 --> 00:25:51,674
that will have the keys and values as

410
00:25:51,792 --> 00:25:55,226
properties and values in the object. And in

411
00:25:55,248 --> 00:25:59,166
a similar way you can handle when search params have more than one

412
00:25:59,188 --> 00:26:02,654
of the same thing. So in this example maybe we

413
00:26:02,692 --> 00:26:05,854
are doing a search form. We're filtering by the word hello,

414
00:26:05,972 --> 00:26:09,058
we're sorting by name, and we're saying that we want

415
00:26:09,144 --> 00:26:12,354
things that match either the tag JavaScript or

416
00:26:12,392 --> 00:26:15,794
the tag typescript. You can use things like

417
00:26:15,832 --> 00:26:19,366
fetch and form data in a traditional react component. So in

418
00:26:19,388 --> 00:26:22,966
this case we have an add user page where

419
00:26:22,988 --> 00:26:26,534
you can type in first last email of the user. We're going

420
00:26:26,572 --> 00:26:31,926
to actually take the submission and prevent

421
00:26:31,958 --> 00:26:35,114
the default submission from happening.

422
00:26:35,312 --> 00:26:39,082
In the form data constructor you can pass in the

423
00:26:39,136 --> 00:26:43,094
form element itself, and then you can deserialize

424
00:26:43,142 --> 00:26:47,038
it by using object from entries, and that will get the form data

425
00:26:47,204 --> 00:26:50,320
out into these variables first, last and email.

426
00:26:50,850 --> 00:26:54,014
And then you can do more of a traditional kind of post to

427
00:26:54,052 --> 00:26:57,460
a server or API where we're going to

428
00:26:59,270 --> 00:27:02,718
post it with content type application JSON and we're

429
00:27:02,734 --> 00:27:06,834
going to send that body JSon stringified with the three values that we have

430
00:27:06,872 --> 00:27:10,006
here. Now what's interesting is that you

431
00:27:10,028 --> 00:27:13,874
can actually do it without serializing into JSON.

432
00:27:14,002 --> 00:27:17,154
So if your server is prepared, you can receive

433
00:27:17,202 --> 00:27:21,194
the form data object as an object and just pass

434
00:27:21,232 --> 00:27:25,274
it in that way and so you don't have to destructure the form

435
00:27:25,392 --> 00:27:30,010
or serialize it into JSON.

436
00:27:30,350 --> 00:27:34,330
And you may have noticed here that

437
00:27:34,400 --> 00:27:38,570
that's what remix is doing as well. In our examples,

438
00:27:38,730 --> 00:27:42,046
the form data we were getting from the request object,

439
00:27:42,228 --> 00:27:45,840
and this is what it looks like on the clientside, sending that up.

440
00:27:46,950 --> 00:27:50,610
Or you can just use remix. So the nice thing about remix here

441
00:27:50,680 --> 00:27:54,270
is that we don't have any logic around submitting.

442
00:27:54,430 --> 00:27:58,578
We can just have a form component and

443
00:27:58,664 --> 00:28:02,626
it will automatically capture

444
00:28:02,658 --> 00:28:06,758
the submit, use a fetch and navigate to the correct place

445
00:28:06,844 --> 00:28:10,294
after that. As I mentioned before, there are some times that you may

446
00:28:10,332 --> 00:28:14,154
want your application to work without javascript. So in

447
00:28:14,192 --> 00:28:17,862
our case we've got patients coming to look at some pages

448
00:28:18,006 --> 00:28:21,462
and we love this idea that the first render

449
00:28:21,606 --> 00:28:25,402
they get all of the HTML, but also for forms

450
00:28:25,466 --> 00:28:29,534
that are in there, they still work before hydration because they

451
00:28:29,572 --> 00:28:32,874
act like just regular HTML forms and submit to regular

452
00:28:32,922 --> 00:28:36,542
URLs. The other reason is we

453
00:28:36,596 --> 00:28:40,418
ran intro a need for supporting IU eleven. So one of

454
00:28:40,424 --> 00:28:44,142
the electronic medical records providers, very popular

455
00:28:44,206 --> 00:28:48,478
one, they actually today are selling their desktop app

456
00:28:48,664 --> 00:28:52,674
with integration ability only available through ie

457
00:28:52,722 --> 00:28:56,022
eleven, kind of framed in thing inside the Windows app.

458
00:28:56,156 --> 00:28:59,430
So we have a need for our application to work

459
00:28:59,500 --> 00:29:02,678
with ie eleven. And if you look around at a

460
00:29:02,684 --> 00:29:06,154
lot of the popular frameworks and everything that we've been

461
00:29:06,192 --> 00:29:10,294
using, we're thinking we're going to have to check every one of our dependencies.

462
00:29:10,422 --> 00:29:14,842
We're going to have to find out which

463
00:29:14,896 --> 00:29:18,378
polyfills we need to use, which ones don't have polyfills,

464
00:29:18,394 --> 00:29:22,506
which ones just can't work at all on old browsers. And that's

465
00:29:22,538 --> 00:29:26,062
going to be really painful. So I first started out by going

466
00:29:26,116 --> 00:29:29,314
to remix's website and saying, hey, do they have

467
00:29:29,352 --> 00:29:33,058
support for ie eleven? And they're like, well, we use

468
00:29:33,144 --> 00:29:36,526
script type module, so anything that's a little bit older

469
00:29:36,638 --> 00:29:40,658
than three or four years ago won't even be able to load the javascript

470
00:29:40,754 --> 00:29:44,994
because those browsers only know how to download

471
00:29:45,042 --> 00:29:48,886
scripts that are script type javascript. So that worried me

472
00:29:48,908 --> 00:29:52,394
a little bit. But then the following sentence was talking about how

473
00:29:52,512 --> 00:29:56,394
you can actually make it work with Netscape or any

474
00:29:56,432 --> 00:29:59,734
browser that's ever been made, because you're

475
00:29:59,782 --> 00:30:02,970
just using regular forms and regular navigation.

476
00:30:03,490 --> 00:30:06,990
And so let's take a look closer at

477
00:30:07,060 --> 00:30:11,230
what our example application looks like without

478
00:30:11,300 --> 00:30:14,926
JavaScript. So back to our applications. We can open the

479
00:30:14,948 --> 00:30:18,382
root TSX file and you'll see in there that it has a reference

480
00:30:18,446 --> 00:30:22,094
to this special component

481
00:30:22,142 --> 00:30:25,426
called scripts. And if we take that out, if we

482
00:30:25,448 --> 00:30:28,754
comment that out, basically what we're going to end up with is our

483
00:30:28,792 --> 00:30:32,430
application will have no javascript and you can see there

484
00:30:32,520 --> 00:30:35,954
in the network tab that we don't have any network requests

485
00:30:36,002 --> 00:30:39,654
going on. So you can add items, call you want. What happens

486
00:30:39,692 --> 00:30:43,494
if you go to delete the item? Oh no, we've got this returning

487
00:30:43,542 --> 00:30:47,382
null. Well, what we should have done in our action is actually redirect.

488
00:30:47,526 --> 00:30:52,890
So you kind of have to think back to fully

489
00:30:54,050 --> 00:30:57,994
multi page app to how those actions should redirect.

490
00:30:58,042 --> 00:31:01,658
But once we have those, it is reloading

491
00:31:01,674 --> 00:31:05,470
the entire page each time. But this form situation

492
00:31:05,620 --> 00:31:09,026
is working wonderfully for us to do whatever kinds of

493
00:31:09,048 --> 00:31:12,862
additions or changes we need to just with regular

494
00:31:12,926 --> 00:31:16,402
forms. And then the last thing that I'll mention here

495
00:31:16,456 --> 00:31:20,294
about their philosophy is the way they do their roadmap and this

496
00:31:20,332 --> 00:31:23,718
concept future flags. So what's nice is that you

497
00:31:23,724 --> 00:31:27,090
can go to GitHub, you can see the rfcs for each feature

498
00:31:27,170 --> 00:31:29,990
that are coming up or being proposed,

499
00:31:30,490 --> 00:31:34,134
and you can comment on those and you can give your ideas

500
00:31:34,182 --> 00:31:37,882
and you can add your own rfcs. And it's really great to have that level

501
00:31:37,936 --> 00:31:41,594
of transparency and interest from the

502
00:31:41,632 --> 00:31:45,766
creators of the framework. I'll just mention some of the highlights that

503
00:31:45,808 --> 00:31:49,614
they have on their roadmap. By the time you're watching this,

504
00:31:49,732 --> 00:31:53,038
I think they'll complete the Veet build system.

505
00:31:53,124 --> 00:31:56,350
So they have been using a build system based on ES build,

506
00:31:56,420 --> 00:31:59,798
which is what Veet uses, but they're actually changing

507
00:31:59,834 --> 00:32:03,394
remix so that it's just a plugin within vite and that allows a lot more

508
00:32:03,432 --> 00:32:05,970
flexibility and will add a little bit of speed.

509
00:32:06,630 --> 00:32:10,534
They're also looking at loader and action middleware, which will allow you to

510
00:32:10,572 --> 00:32:14,630
do authentication or other checks

511
00:32:15,050 --> 00:32:18,418
before each and every action or loader.

512
00:32:18,594 --> 00:32:22,358
And they're going to give some more tools for optimistic updates.

513
00:32:22,454 --> 00:32:25,802
As you saw in our app, it was pretty naive and any

514
00:32:25,856 --> 00:32:30,134
changes that happen rely on having a loader reload

515
00:32:30,182 --> 00:32:33,498
the data when the action is done.

516
00:32:33,584 --> 00:32:36,926
So real world APIs can

517
00:32:36,948 --> 00:32:40,526
take a little while. And so it's nice to be able

518
00:32:40,548 --> 00:32:44,560
to have some tools where you can update the UI before anything

519
00:32:45,010 --> 00:32:48,674
actually comes back from the server. And I love this idea

520
00:32:48,712 --> 00:32:52,946
of future flags that they've done. So remix recently came

521
00:32:53,048 --> 00:32:56,494
into version two. Before that, in version

522
00:32:56,542 --> 00:32:59,762
one, your remix combination file looked something

523
00:32:59,816 --> 00:33:03,606
like this. There were six breaking changes between V

524
00:33:03,628 --> 00:33:07,094
one and V two, and what happened was you could opt into

525
00:33:07,132 --> 00:33:10,200
them one at a time. So for example,

526
00:33:10,890 --> 00:33:14,454
error boundary syntax changed. And so

527
00:33:14,492 --> 00:33:17,706
in your application you could say okay, I'm going to go in and I'm going

528
00:33:17,728 --> 00:33:20,778
to edit every single error boundary function,

529
00:33:20,944 --> 00:33:24,506
and then I'm going to put this future flag v two error boundary true,

530
00:33:24,688 --> 00:33:28,282
and then the application will run normally and we've

531
00:33:28,426 --> 00:33:30,910
already done one 6th of the migration,

532
00:33:31,330 --> 00:33:35,134
and if you're really on top of it, you can do these migrations as

533
00:33:35,172 --> 00:33:38,720
they come out, so that by the time

534
00:33:39,110 --> 00:33:42,930
the new version comes out you're already ready for the new APIs

535
00:33:43,510 --> 00:33:46,754
and the breaking changes aren't a big deal. And I love that because

536
00:33:46,792 --> 00:33:50,622
it's so easy for you to use some framework

537
00:33:50,686 --> 00:33:54,326
and then when a new version comes out it seems like so daunting to go

538
00:33:54,348 --> 00:33:58,280
back and change everything and deal with all the breaking changes.

539
00:33:58,730 --> 00:34:02,114
So this makes it very nice. It allows you to get new features

540
00:34:02,162 --> 00:34:05,754
faster and allows you a lot of freedom in terms of when you

541
00:34:05,792 --> 00:34:08,380
want to update these breaking changes.

542
00:34:09,230 --> 00:34:12,794
So to recap the philosophy and how you might

543
00:34:12,832 --> 00:34:16,014
use it in other contexts. So in any

544
00:34:16,052 --> 00:34:19,422
application you can directly use fetch and form data

545
00:34:19,476 --> 00:34:23,440
and URL, and you can learn those web standards and

546
00:34:23,890 --> 00:34:27,650
they're not super hard and they're meant to be really

547
00:34:27,720 --> 00:34:30,766
helpful and useful and eliminate

548
00:34:30,798 --> 00:34:34,354
the need for a lot of NPM modules that

549
00:34:34,392 --> 00:34:37,810
do the same thing. You can even learn

550
00:34:37,960 --> 00:34:42,022
about runtimes like Cloudflare workers and

551
00:34:42,156 --> 00:34:45,750
Dino and bun, because your request and

552
00:34:45,900 --> 00:34:49,606
response objects are basically the same as what you would

553
00:34:49,628 --> 00:34:53,066
work with in those runtimes. And then it

554
00:34:53,088 --> 00:34:57,802
also is nice to think about what can we do to make the experience good

555
00:34:57,856 --> 00:35:01,190
for people on mobile with low cellular

556
00:35:01,270 --> 00:35:05,342
speeds, and what can we do for any

557
00:35:05,396 --> 00:35:08,718
other kinds of challenges that you might run into,

558
00:35:08,804 --> 00:35:11,440
like a user not having javascript at call.

559
00:35:11,810 --> 00:35:15,582
And to recap what I love about

560
00:35:15,636 --> 00:35:19,142
remix, when I write remix route, I don't have to worry

561
00:35:19,226 --> 00:35:23,010
where my code runs. It could be server side, it could be

562
00:35:23,080 --> 00:35:26,434
client side, it could be the first render, or it could be

563
00:35:26,472 --> 00:35:29,614
that the user has JavaScript disabled.

564
00:35:29,742 --> 00:35:32,946
So it's the same kind of code regardless

565
00:35:32,978 --> 00:35:36,566
of that, and you don't really have to think about it. In fact,

566
00:35:36,748 --> 00:35:40,086
for the first several days that I use remix, I turned the

567
00:35:40,108 --> 00:35:43,434
script tags off completely just so I could

568
00:35:43,472 --> 00:35:46,938
kind of see and understand how these form mutations work

569
00:35:47,104 --> 00:35:51,130
and kind of the different mindset and how it's liberating.

570
00:35:51,790 --> 00:35:55,374
Because of these kinds of patterns, I don't have to think about

571
00:35:55,492 --> 00:35:58,730
duplicating code on the client or server,

572
00:35:58,810 --> 00:36:02,666
I don't have to run into all of the gotchas and pitfalls

573
00:36:02,698 --> 00:36:05,962
of server side rendering, and the performance

574
00:36:06,026 --> 00:36:09,386
is just great. It's great for first renders, it's great for subsequent

575
00:36:09,418 --> 00:36:12,958
renders, and I don't have to think about the different difference

576
00:36:13,044 --> 00:36:16,814
between them. Finally, I'll just mention that if you're interested in

577
00:36:16,852 --> 00:36:20,822
learning more about line and what we do for

578
00:36:20,876 --> 00:36:24,310
cancer patients, our website

579
00:36:24,380 --> 00:36:27,686
is at Shoreline Health. And if you

580
00:36:27,708 --> 00:36:31,286
have been, thanks for watching, and thanks to comp 42 for the opportunity

581
00:36:31,388 --> 00:36:33,140
to speak. Have a great day.

