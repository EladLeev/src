1
00:00:23,270 --> 00:00:26,682
Everyone and thanks for watching my talk at the Con 42

2
00:00:26,736 --> 00:00:29,998
conference on JavaScript. I'm Peleg and I'm

3
00:00:30,014 --> 00:00:33,666
thrilled to explore the configurations as code approach with

4
00:00:33,688 --> 00:00:37,394
you today. Over the 15 to 20 minutes, we will

5
00:00:37,432 --> 00:00:41,366
uncover how configuration as code can revolutionize your approach to

6
00:00:41,388 --> 00:00:44,946
configuration management and software development.

7
00:00:45,138 --> 00:00:48,470
Before diving into configuration, let me introduce myself.

8
00:00:48,620 --> 00:00:52,294
My name is Peleg and I've been a software developer for

9
00:00:52,332 --> 00:00:56,314
more than 80 years. I mainly focused on cybersecurity and

10
00:00:56,352 --> 00:00:59,290
in the past three years I've been leading configu.

11
00:00:59,630 --> 00:01:03,190
My journey has led me to the exciting world of configuration management,

12
00:01:03,270 --> 00:01:06,794
where I've been explored the ascode approach and especially

13
00:01:06,912 --> 00:01:09,130
the configuration as code approach.

14
00:01:10,590 --> 00:01:14,186
So let me start by outlining what we will explore

15
00:01:14,218 --> 00:01:17,834
in this talk. Our journey will include understanding

16
00:01:17,882 --> 00:01:21,154
application configuration, tackling the challenges they

17
00:01:21,192 --> 00:01:24,514
present, and diving deep into these configuration as

18
00:01:24,552 --> 00:01:29,154
code approach. Great. Let's start our

19
00:01:29,192 --> 00:01:32,862
exploration. Begin with our software Bible, the twelve factory

20
00:01:32,926 --> 00:01:36,566
guide. I know some folks find this guide a bit old school,

21
00:01:36,668 --> 00:01:40,306
but it does a good job of explaining the basics.

22
00:01:40,498 --> 00:01:43,946
In particular, we'll focus on the config section and talk

23
00:01:43,968 --> 00:01:47,546
about application configuration. So every software is a

24
00:01:47,568 --> 00:01:51,082
combination of code that specify the logic and

25
00:01:51,136 --> 00:01:54,570
configuration that define the behavior of the software.

26
00:01:54,910 --> 00:01:58,206
Think of configuration as a bench of setting that tell

27
00:01:58,228 --> 00:02:01,950
our software how to act. It's like giving specific

28
00:02:02,020 --> 00:02:05,566
instruction to a video game so that it know how

29
00:02:05,588 --> 00:02:08,800
to start and what level difficulty to use.

30
00:02:09,170 --> 00:02:13,042
As developers, we keep configurations separate from our code

31
00:02:13,176 --> 00:02:16,930
and store them in separate locations or dedicated files.

32
00:02:17,350 --> 00:02:20,558
This includes configuration like environment variables,

33
00:02:20,654 --> 00:02:24,150
secrets to keep data safe, feature flag to turn certain

34
00:02:24,220 --> 00:02:28,200
functions on or off, and other such setting data.

35
00:02:28,650 --> 00:02:32,274
As we delve into the world of configuration and configuration

36
00:02:32,322 --> 00:02:36,460
management, it's essential to understand the versus formats available.

37
00:02:36,910 --> 00:02:40,314
One prevalent format you will encounter is the dot and

38
00:02:40,352 --> 00:02:43,674
file format it flavored for its simplicity and

39
00:02:43,712 --> 00:02:47,310
adaptability, making it a common choice among developers.

40
00:02:47,650 --> 00:02:51,722
But it's worth nothing that the need for effective configuration

41
00:02:51,786 --> 00:02:54,830
management extend beyond just n file.

42
00:02:55,490 --> 00:02:58,294
There are other formats like JSON,

43
00:02:58,442 --> 00:03:02,162
YaML, and more, each with its own set of

44
00:03:02,216 --> 00:03:04,370
advantages and disadvantages.

45
00:03:05,110 --> 00:03:09,234
In fact, the importance of configuration management has grown so

46
00:03:09,272 --> 00:03:13,560
much that even node js, starting from version 26,

47
00:03:14,090 --> 00:03:18,006
offers built in supports for dot and files, recognizing the

48
00:03:18,028 --> 00:03:21,906
significance of keeping configurations separate and secure.

49
00:03:22,098 --> 00:03:25,842
So whether you choose dot and files, explore alternative

50
00:03:25,906 --> 00:03:29,546
formats, or utilize built in support, remember that the

51
00:03:29,568 --> 00:03:33,286
quest for efficient and secure configuration management

52
00:03:33,478 --> 00:03:36,410
is a shared journey for all developers.

53
00:03:37,010 --> 00:03:40,890
Configuration are essential, but managing them bring challenges.

54
00:03:41,050 --> 00:03:44,574
This includes complexity, development slowdowns and

55
00:03:44,612 --> 00:03:48,474
scalability issues. At Configu we invested lot

56
00:03:48,532 --> 00:03:52,594
of time talking with developers and DevOps engineers from

57
00:03:52,632 --> 00:03:55,826
small startups to big corporates, and we found a

58
00:03:55,848 --> 00:03:59,730
major common problem in how they handle application configuration.

59
00:04:00,230 --> 00:04:04,262
Most of them say their configurations are fragment and

60
00:04:04,316 --> 00:04:07,766
distributed all over the place. They are saved as a

61
00:04:07,788 --> 00:04:12,150
simple raw text in many different locations like databases,

62
00:04:12,570 --> 00:04:16,790
files or even third party services. This mixup

63
00:04:16,870 --> 00:04:20,294
leads to internal friction, governance gaps,

64
00:04:20,422 --> 00:04:24,518
developer distractions. Yeah, and even data risks

65
00:04:24,614 --> 00:04:28,682
if not managed effectively. Wrong or outdated

66
00:04:28,746 --> 00:04:32,222
setting can cause problems making our software act

67
00:04:32,276 --> 00:04:35,680
up, which could lead to downtime and lost money.

68
00:04:36,130 --> 00:04:39,826
Managing this setting correctly is super important to

69
00:04:39,848 --> 00:04:44,206
keep our system stable and our team working smoothly.

70
00:04:44,398 --> 00:04:48,082
It's key to know what setting are being used and

71
00:04:48,136 --> 00:04:51,766
to have a way to keep them accurate, reliable and up

72
00:04:51,788 --> 00:04:55,654
to date. For example, a company we met told

73
00:04:55,692 --> 00:04:59,062
us about a developer they have who accidentally changed a

74
00:04:59,116 --> 00:05:02,146
single character in their database connection string.

75
00:05:02,338 --> 00:05:06,330
And yeah, connection string may seem humanly readable,

76
00:05:06,830 --> 00:05:10,662
but they often contain special characters, making it challenging

77
00:05:10,726 --> 00:05:14,390
to tell the difference between necessary components

78
00:05:14,470 --> 00:05:17,678
and potentials error. As a result,

79
00:05:17,844 --> 00:05:21,466
the application experienced a critical failure

80
00:05:21,658 --> 00:05:25,182
and it took them too much time to figure it out and

81
00:05:25,236 --> 00:05:28,666
fix the issue. Showing how important

82
00:05:28,788 --> 00:05:33,010
is to have a strong and reliable way to manage configurations.

83
00:05:33,510 --> 00:05:36,990
Understanding these challenges requires a transformative

84
00:05:37,070 --> 00:05:40,814
concept, and after looking into infrastructure

85
00:05:40,862 --> 00:05:43,874
as code and seeing the good stuff it bring to the table,

86
00:05:44,002 --> 00:05:48,002
we thought why not to build on these winning formula.

87
00:05:48,146 --> 00:05:51,446
And that's how configuration as code came to

88
00:05:51,468 --> 00:05:54,874
our life. Let's dive into the

89
00:05:54,912 --> 00:05:59,606
heart of our discussion. Configuration as code configuration

90
00:05:59,638 --> 00:06:03,926
as code is a powerful solution designed to streamline configuration management,

91
00:06:04,038 --> 00:06:07,070
making it a game changer for developers.

92
00:06:07,650 --> 00:06:11,406
These core of configurations as code appeal lies on

93
00:06:11,428 --> 00:06:15,450
its benefits and these include consistency

94
00:06:15,530 --> 00:06:20,042
and reproducibility. Configuration as code keeps configuration consistent

95
00:06:20,186 --> 00:06:23,770
across different settings because they are handled as

96
00:06:23,860 --> 00:06:27,070
code, versioning and tracking,

97
00:06:27,230 --> 00:06:30,482
changes to configurations are tracked over

98
00:06:30,536 --> 00:06:34,038
time, making it easy to see who change what

99
00:06:34,124 --> 00:06:37,986
and when. Automation and efficiency

100
00:06:38,178 --> 00:06:42,290
no more manual mess configuration as code automates configurations

101
00:06:42,370 --> 00:06:46,330
processes, making deployments faster and smoother.

102
00:06:46,910 --> 00:06:50,474
Scalability and agility. Configuration as code make it

103
00:06:50,512 --> 00:06:53,754
easy to adjust and scale configurations to meet

104
00:06:53,792 --> 00:06:57,614
changing needs more quickly. Collaboration and

105
00:06:57,652 --> 00:07:01,402
teamwork it helps developers, operations teams

106
00:07:01,466 --> 00:07:05,066
and stakeholders work together more harmoniously.

107
00:07:05,258 --> 00:07:09,074
Auditability and security all changes

108
00:07:09,192 --> 00:07:12,974
can be reviewed and audited, ensuring configurations remain

109
00:07:13,022 --> 00:07:16,382
secure simplifies configuration management.

110
00:07:16,526 --> 00:07:20,014
Configurations as code brings a clear structure to managing

111
00:07:20,062 --> 00:07:23,910
configurations, making them easier to understand and evolve.

112
00:07:24,250 --> 00:07:27,874
Eliminates manual errors by managing configuration

113
00:07:27,922 --> 00:07:31,654
as code, it reduce manual mistakes, leading to

114
00:07:31,692 --> 00:07:35,050
more reliable setup. Last but not least,

115
00:07:35,120 --> 00:07:39,302
enhances efficiency and productivity. So configuration

116
00:07:39,366 --> 00:07:43,034
as code frees up time for teams to focus on

117
00:07:43,072 --> 00:07:46,490
building a great applications and achieving

118
00:07:46,570 --> 00:07:50,270
their business goals. So now that we understand

119
00:07:50,340 --> 00:07:53,370
configuration as code, let me briefly introduce configu,

120
00:07:53,450 --> 00:07:57,600
an open source tool that brings configuration as code principles to life.

121
00:07:58,050 --> 00:08:01,950
Configure provides a structured approach to managing configuration

122
00:08:02,030 --> 00:08:06,050
across all different environments, systems, and technologies.

123
00:08:06,550 --> 00:08:10,478
It is built to provide a common, flexible and extensible

124
00:08:10,574 --> 00:08:14,882
process for storing, mutating, and orchestrating

125
00:08:14,946 --> 00:08:18,262
configuration data across different environments and

126
00:08:18,316 --> 00:08:21,686
systems. With configu, you can leverage the

127
00:08:21,708 --> 00:08:25,510
power of configuration as code ensure streamlined and efficient

128
00:08:25,590 --> 00:08:29,162
configuration management for your application. So,

129
00:08:29,216 --> 00:08:32,506
to gain better understanding of how configu works, I would like

130
00:08:32,528 --> 00:08:36,634
to introduce a few of Config's core concepts. The first concept

131
00:08:36,682 --> 00:08:40,286
is config, which is a data model that represents a

132
00:08:40,308 --> 00:08:43,594
single application configuration. On configu, it includes

133
00:08:43,642 --> 00:08:47,354
three parameters, a key, a value, and a context

134
00:08:47,402 --> 00:08:50,878
set. For example, imagine debug level equals

135
00:08:50,974 --> 00:08:55,026
error on a production set. Config store

136
00:08:55,128 --> 00:08:59,586
Config store is where those configu are saved and read from.

137
00:08:59,768 --> 00:09:03,314
It could be any storage engines and includes

138
00:09:03,362 --> 00:09:07,250
any type of configuration data, from text files and databases

139
00:09:07,410 --> 00:09:10,866
to secret managers and any configuration manager

140
00:09:10,898 --> 00:09:14,774
you use. Config set config set is the context

141
00:09:14,822 --> 00:09:18,934
of the configuration. It could be an environment like development

142
00:09:18,982 --> 00:09:22,874
or production, but it also can be a

143
00:09:22,912 --> 00:09:26,602
region, a customer, or basically any context

144
00:09:26,666 --> 00:09:30,094
you need to group configurations for. The last and

145
00:09:30,132 --> 00:09:33,706
most important concept is config schema. The config

146
00:09:33,738 --> 00:09:37,134
is implementation for the configuration as code

147
00:09:37,172 --> 00:09:40,282
approach. So basically it's a file

148
00:09:40,346 --> 00:09:43,874
that is part of your service code. It declare how the

149
00:09:43,912 --> 00:09:47,666
code looks and behave, and lets you

150
00:09:47,768 --> 00:09:52,354
to add useful metadata on each configu for collaboration,

151
00:09:52,482 --> 00:09:55,640
testing, local development, and many more.

152
00:09:56,170 --> 00:09:59,686
We called it a CFGU file, and we

153
00:09:59,708 --> 00:10:03,746
will see an example of it in a moment. And now let's

154
00:10:03,778 --> 00:10:07,146
move to the fun part and see some code examples. We will

155
00:10:07,168 --> 00:10:11,142
use the configured open source as our management interface

156
00:10:11,286 --> 00:10:14,554
and the CFGU format as our configuration as

157
00:10:14,592 --> 00:10:18,314
code. I'm going to use an hello word

158
00:10:18,352 --> 00:10:21,646
JavaScript app and describe its configurations on the

159
00:10:21,668 --> 00:10:25,390
schema file, and then I will manage it as I manage code.

160
00:10:25,540 --> 00:10:29,426
In this example, I will use a JSON file as my config store,

161
00:10:29,608 --> 00:10:33,380
but you can choose any config storage you want or need.

162
00:10:33,750 --> 00:10:37,346
So here's my super complex JavaScript application

163
00:10:37,528 --> 00:10:41,394
that prints any message that it gets from the environment

164
00:10:41,442 --> 00:10:44,758
variable. As you can see here, we will start with

165
00:10:44,844 --> 00:10:48,438
installing the configure CLI. In this case,

166
00:10:48,524 --> 00:10:51,654
I already have it installed on my

167
00:10:51,692 --> 00:10:54,470
computer. Sorry, configu,

168
00:10:55,790 --> 00:10:59,386
let's run it okay, so this

169
00:10:59,408 --> 00:11:03,100
is a configu CLI command and

170
00:11:03,790 --> 00:11:07,462
now that we have configu, let's create our first schema.

171
00:11:07,606 --> 00:11:11,230
We'll do that by running the configure init command

172
00:11:13,730 --> 00:11:17,360
and in this case we will use the

173
00:11:17,810 --> 00:11:21,326
get started flag so it will generate

174
00:11:21,358 --> 00:11:25,300
a premade hello world example. Awesome.

175
00:11:25,750 --> 00:11:29,278
As you can see here, our schema file contain three keys,

176
00:11:29,374 --> 00:11:32,710
greeting, subject and

177
00:11:32,780 --> 00:11:36,710
message over greeting. We are enforcing

178
00:11:37,050 --> 00:11:40,946
type rejects with greeting pattern

179
00:11:41,058 --> 00:11:45,210
and we gave it a default value of hello on

180
00:11:45,280 --> 00:11:49,466
subject. It's free string with

181
00:11:49,488 --> 00:11:53,034
a default of world and message

182
00:11:53,152 --> 00:11:57,290
is template which is additional feature of configu

183
00:11:58,450 --> 00:12:02,218
and it creates a value by templating other values.

184
00:12:02,314 --> 00:12:05,774
Very handy if you need to build string like

185
00:12:05,812 --> 00:12:08,898
connection string or endpoints. And in

186
00:12:08,904 --> 00:12:12,798
general there are many other capabilities that you can achieve with the CFDU

187
00:12:12,894 --> 00:12:16,750
file. It offers additional attributes

188
00:12:16,830 --> 00:12:20,858
like description, test restrictions

189
00:12:20,974 --> 00:12:24,422
and many others. So to be able

190
00:12:24,476 --> 00:12:28,390
to work with the JSON store as we mentioned

191
00:12:28,460 --> 00:12:32,130
before, I will need to add the details of the JSON

192
00:12:32,210 --> 00:12:35,562
file to the config file. I already

193
00:12:35,616 --> 00:12:40,422
have it here and I already insert

194
00:12:40,486 --> 00:12:44,394
all the relevant details, which is the JSON stored

195
00:12:44,592 --> 00:12:48,026
JSon. It's a stored from JSON

196
00:12:48,058 --> 00:12:51,998
file type and it's ready to use. As you can see here,

197
00:12:52,164 --> 00:12:57,050
it's empty for now, but we will generate configu

198
00:12:57,130 --> 00:13:00,930
very soon. Great. So everything is ready

199
00:13:01,000 --> 00:13:04,942
and we can insert some values. We will use the upset

200
00:13:05,006 --> 00:13:08,260
command and save values for

201
00:13:08,790 --> 00:13:13,934
my development environment. Let's start configure

202
00:13:13,982 --> 00:13:14,850
absurd.

203
00:13:16,390 --> 00:13:17,650
Observe.

204
00:13:19,190 --> 00:13:23,706
Let's sorry for all

205
00:13:23,728 --> 00:13:28,074
the junk, but we'll use my JSON store for

206
00:13:28,192 --> 00:13:32,102
set development. I will use the schema

207
00:13:32,246 --> 00:13:35,894
get started schema that we generated and

208
00:13:36,032 --> 00:13:39,230
we will start with the greeting.

209
00:13:40,690 --> 00:13:45,358
For example, let's add hey and

210
00:13:45,444 --> 00:13:49,970
also let's insert for subject

211
00:13:51,430 --> 00:13:55,460
the value conf 42

212
00:13:59,910 --> 00:14:03,490
successfully. Note that in the background configure

213
00:14:03,570 --> 00:14:07,266
validating the type and all the restrictions you added

214
00:14:07,298 --> 00:14:10,994
to the CFG file. In this case, for greeting,

215
00:14:11,122 --> 00:14:14,714
it must meet the regex we defined. If you want

216
00:14:14,752 --> 00:14:18,460
to check it out, let's do the same thing,

217
00:14:19,390 --> 00:14:22,698
but instead of hey, let's just

218
00:14:22,784 --> 00:14:29,774
add blah and

219
00:14:29,812 --> 00:14:33,706
we will get an error that blah is not meet the regex.

220
00:14:33,898 --> 00:14:37,838
Now let's see how it's saved. Let's open our JSOn store

221
00:14:38,004 --> 00:14:42,638
and as you can see, we have two configs.

222
00:14:42,814 --> 00:14:47,140
Each one of them is built from key, set and value.

223
00:14:47,590 --> 00:14:50,990
For example, the first one, the key is greeting under

224
00:14:51,080 --> 00:14:55,942
development and the value is going to be hey great.

225
00:14:56,076 --> 00:14:59,686
Now let's add additional configs to

226
00:14:59,708 --> 00:15:03,046
a different set for example, let's use production and maybe we

227
00:15:03,068 --> 00:15:07,126
will do additional set that's going to be under production,

228
00:15:07,318 --> 00:15:10,826
a child set of production that can inherit the

229
00:15:10,848 --> 00:15:14,026
values from it and add a

230
00:15:14,048 --> 00:15:17,774
different one. Let's choose a specific

231
00:15:17,972 --> 00:15:21,934
customer for example under production and it's going to be

232
00:15:22,132 --> 00:15:26,426
look like this one. So as you can see, I'm doing multiple upset

233
00:15:26,618 --> 00:15:30,578
together. The first one is going to add welcome

234
00:15:30,664 --> 00:15:34,738
greeting to the production and the second one is going to be

235
00:15:34,824 --> 00:15:38,402
to add the user one subject to

236
00:15:38,536 --> 00:15:40,420
my customer, one set.

237
00:15:43,190 --> 00:15:46,882
Great. As you should see in live everything is saved

238
00:15:46,946 --> 00:15:50,230
to my JSON store for ending this process.

239
00:15:50,300 --> 00:15:53,706
Let's run our application with these configurations. First I will run

240
00:15:53,728 --> 00:15:57,466
it for my local environment, so let's run it using the

241
00:15:57,488 --> 00:16:01,494
default only. So I won't need anything except

242
00:16:01,542 --> 00:16:05,994
my schema will look like it

243
00:16:06,032 --> 00:16:12,800
will look like that and sorry,

244
00:16:13,970 --> 00:16:16,320
I'm missing space. Great.

245
00:16:18,210 --> 00:16:21,954
Yeah, so my Javascript is run and we

246
00:16:21,992 --> 00:16:25,394
got the hello word example. If you want to see how it looks like

247
00:16:25,512 --> 00:16:30,210
without the configure so node

248
00:16:30,790 --> 00:16:34,054
index it will get undefined. Running it

249
00:16:34,092 --> 00:16:37,942
with the defaults will get the hello word. And now

250
00:16:37,996 --> 00:16:41,030
instead of running it, let's generate a dot and file.

251
00:16:41,450 --> 00:16:44,838
Let's do it for the development environment

252
00:16:44,934 --> 00:16:48,474
it's going to look like that. So we

253
00:16:48,512 --> 00:16:52,630
have again exporting JSOn store development

254
00:16:52,790 --> 00:16:56,454
set and now instead of running it we'll

255
00:16:56,502 --> 00:17:00,478
export into a n format, it will look like

256
00:17:00,564 --> 00:17:04,142
that. So we got the dot and these. If I want, I can

257
00:17:04,196 --> 00:17:07,950
also pipe it into a n file

258
00:17:09,750 --> 00:17:13,522
and it will generate the dotten file. Let's see

259
00:17:13,576 --> 00:17:17,486
it. Here is the dotten

260
00:17:17,518 --> 00:17:21,346
file and for the finale let's

261
00:17:21,378 --> 00:17:25,382
do the same. But now we

262
00:17:25,516 --> 00:17:29,222
want to run it again and instead

263
00:17:29,276 --> 00:17:32,790
of development let's just export

264
00:17:33,950 --> 00:17:37,366
the production.

265
00:17:37,558 --> 00:17:42,534
Customer one yay.

266
00:17:42,662 --> 00:17:46,966
Welcome customer one. You can see how our team implemented

267
00:17:47,078 --> 00:17:50,714
and visit Configure's open source project on GitHub if you find

268
00:17:50,752 --> 00:17:54,570
it useful. We would appreciate your star and support. And better yet,

269
00:17:54,720 --> 00:17:58,386
if you want, join our team and contribute to the project

270
00:17:58,528 --> 00:18:02,386
for helping everyone to improve configurations. Thanks for

271
00:18:02,408 --> 00:18:05,954
watching my talk and feel free to reach out if you have any questions

272
00:18:06,072 --> 00:18:07,250
or thoughts.

