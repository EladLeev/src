1
00:00:17,450 --> 00:00:20,766
Many of the quantum circuits used in the niscar and beyond can be

2
00:00:20,788 --> 00:00:24,446
understood visually as a collection of gates placed in a circuit, according to

3
00:00:24,468 --> 00:00:28,450
some better one. Of course, the purpose of any circuit is mainly a specification

4
00:00:28,530 --> 00:00:32,246
on how to perform a quantum computation. However, judging by

5
00:00:32,268 --> 00:00:35,574
the managed circuits running one algorithm are often reused in more

6
00:00:35,612 --> 00:00:38,722
complicated ones. The visual aspect is an important factor

7
00:00:38,786 --> 00:00:42,074
for both understanding the inner working of an algorithm and

8
00:00:42,112 --> 00:00:45,898
how this can be reused to build more advanced ones. As a concrete example,

9
00:00:45,984 --> 00:00:49,146
we show here an implementation of the Grover search algorithm on

10
00:00:49,168 --> 00:00:52,874
five qubits. What the algorithm does is that it permits searching an

11
00:00:52,912 --> 00:00:56,826
unstructured data set for a particular value. 1 may observe that the circuit

12
00:00:56,858 --> 00:01:00,558
is initialized in a default state, which usually is chosen to

13
00:01:00,564 --> 00:01:03,982
be the state where all qubits are in the zero state. The six

14
00:01:04,116 --> 00:01:08,174
ancillary qubit is initialized in one state. Next, the level of Hadamar gates

15
00:01:08,222 --> 00:01:12,082
is applied. The effect of Hadamar gates is to transform the initial state

16
00:01:12,136 --> 00:01:15,346
to a superposition of all possible states. You may

17
00:01:15,368 --> 00:01:18,742
have heard sometime the statement that the quantum device computes all

18
00:01:18,796 --> 00:01:22,166
possible results in parallel. This statement is, of course

19
00:01:22,188 --> 00:01:25,974
a bit of a stretch, but it captures the rationale between this step, which is

20
00:01:26,012 --> 00:01:29,674
using many other algorithms. Next, we apply a series of gates that

21
00:01:29,712 --> 00:01:33,146
implement the algorithm itself. The same circuit can be

22
00:01:33,168 --> 00:01:35,740
drawn in a more compact manner like this one.

23
00:01:38,030 --> 00:01:40,854
We see that first we apply an oracle subsurface,

24
00:01:40,902 --> 00:01:44,074
whose purpose is to mark the state we want to measure by flipping its

25
00:01:44,112 --> 00:01:48,090
face, and next we apply the so called Grover diffusion operator,

26
00:01:48,170 --> 00:01:52,030
which has the effect of inverting each 32 values stored in the

27
00:01:52,100 --> 00:01:55,022
first five qubits around their global mean value.

28
00:01:55,156 --> 00:01:58,462
Overall, these two gates have the effect of increasing the probability

29
00:01:58,526 --> 00:02:02,478
of measuring the state flagged by oracle as a solution and decreasing

30
00:02:02,494 --> 00:02:06,526
the probability of measuring any other state. The combination of oracle and diffusion

31
00:02:06,558 --> 00:02:09,942
operator is applied several times in a row, and during

32
00:02:09,996 --> 00:02:13,730
each iteration the probability of measuring the state we are searching for increases,

33
00:02:13,810 --> 00:02:16,866
while the probability of measuring the other state decreases.

34
00:02:17,058 --> 00:02:20,674
The results that we get when we perform the final set of measurements

35
00:02:20,722 --> 00:02:24,294
on the top five qubits is not to be found with 100% certainty,

36
00:02:24,342 --> 00:02:28,250
but is captured with very high probability. As another example,

37
00:02:28,320 --> 00:02:31,742
we show here an implementation of quantum phase estimation, which,

38
00:02:31,796 --> 00:02:35,070
like Grober, is not only a significant algorithm by itself,

39
00:02:35,220 --> 00:02:39,498
but is often reused as a subcomponent in many other algorithms.

40
00:02:39,594 --> 00:02:43,098
Here we also see the familiar construction of using a layer

41
00:02:43,114 --> 00:02:46,514
of Hadamar gates in the preparation of the initial state for the top five

42
00:02:46,552 --> 00:02:50,146
qubits. What is also important to remark here is that the

43
00:02:50,168 --> 00:02:53,822
state of lower three qubits is prepared to be an eigen state of the operator

44
00:02:53,886 --> 00:02:57,566
u whose eigenvalue we want to measure. As a consequence

45
00:02:57,598 --> 00:03:01,594
of this, whenever we apply a control u operation on a bottom three qubit

46
00:03:01,742 --> 00:03:05,686
due to a phenomenon named phase give back, the phase of u is recorded

47
00:03:05,788 --> 00:03:09,238
bit by bit on the top control qubits. The case of u can be

48
00:03:09,244 --> 00:03:12,426
linked to the eigenvalue of u and can be read out at the end

49
00:03:12,448 --> 00:03:16,154
of the experiment by layer of measure gates shown here in red after we

50
00:03:16,192 --> 00:03:19,626
applied an inverse quantum free a transform gate because the

51
00:03:19,648 --> 00:03:22,846
phase was written in free a bases, while when we make

52
00:03:22,868 --> 00:03:26,782
a measurement on a quantum computer we usually measure in the standard Z

53
00:03:26,836 --> 00:03:30,126
base. What we have seen so far is

54
00:03:30,148 --> 00:03:33,386
that the use case for designing circuits visually using an editor

55
00:03:33,418 --> 00:03:36,766
is a very strong one. However, most of the existing circuit

56
00:03:36,798 --> 00:03:40,546
editors are rather limited. Uranium is a platform that intends to

57
00:03:40,568 --> 00:03:44,034
fill this unoccupied space. It is open source and free to

58
00:03:44,072 --> 00:03:47,498
use. At its core it comprises can advanced circuit editor

59
00:03:47,534 --> 00:03:51,346
which is easy to work with and powerful, and a high performance

60
00:03:51,378 --> 00:03:55,350
simulator, and written eras that can run both in your browser and offline.

61
00:03:55,770 --> 00:03:59,382
As a concrete example, here is how one can start using

62
00:03:59,436 --> 00:04:02,858
our editor. First of all, you need to pick up gate and

63
00:04:02,944 --> 00:04:06,234
drag and drop it into the editor area. Now you may

64
00:04:06,272 --> 00:04:09,466
ask, do I need to do that for every gate that I want on my

65
00:04:09,488 --> 00:04:13,246
circuit? The answer is not once you have added a

66
00:04:13,268 --> 00:04:17,194
gate, you can easily duplicate it. You can generate an array

67
00:04:17,242 --> 00:04:20,750
of identical gates of an existing one.

68
00:04:20,900 --> 00:04:24,174
You can select a portion of a circuit

69
00:04:24,222 --> 00:04:27,794
which you can copy, you can paste or

70
00:04:27,832 --> 00:04:30,690
if you wish, you can erase.

71
00:04:32,790 --> 00:04:36,418
Circuits can be reused in a sense that smaller circuits can be saved in a

72
00:04:36,424 --> 00:04:39,926
project and reused that gates in a larger circuit from

73
00:04:39,948 --> 00:04:43,640
the same project. For example like this one.

74
00:04:45,130 --> 00:04:48,634
We also provide a very simple python API which one can

75
00:04:48,672 --> 00:04:51,690
use to generate circuits programmatically. After doing that,

76
00:04:51,760 --> 00:04:54,730
circuits can be imported in your existing projects.

77
00:04:55,390 --> 00:04:59,382
Another very useful feature is, especially when working with compostable

78
00:04:59,446 --> 00:05:03,706
circuits, is the ability to replicate a gate. This permits

79
00:05:03,738 --> 00:05:07,566
you to generate an array of circuits of gates like

80
00:05:07,588 --> 00:05:11,006
this, one of

81
00:05:11,028 --> 00:05:14,674
the similar kinds that you have seen in quantum case estimation and are

82
00:05:14,712 --> 00:05:18,510
very often used in many other algorithms of the same inspiration

83
00:05:18,670 --> 00:05:22,338
for editing gate parameters, you can of course

84
00:05:22,424 --> 00:05:26,226
interact with the gate pop up. So basically when you add

85
00:05:26,248 --> 00:05:29,366
a gate and you can add for those gates that

86
00:05:29,388 --> 00:05:33,106
accept parameters, you can add parameters from the gate

87
00:05:33,138 --> 00:05:37,126
pop up, you can duplicate the gate and parameters will

88
00:05:37,148 --> 00:05:41,382
be copied identically, there are a number of shortcuts between two editors

89
00:05:41,446 --> 00:05:45,098
such that you can quickly switch from one gate on another or quickly

90
00:05:45,184 --> 00:05:50,198
delete a gates. Measure gates behave a little bit different perhaps

91
00:05:50,294 --> 00:05:54,330
I should first explain what is the role of the measure gates in our editor.

92
00:05:54,490 --> 00:05:58,046
Because we display probability distribution, we do

93
00:05:58,068 --> 00:06:01,898
not make sampling when you add a measure gate,

94
00:06:02,074 --> 00:06:05,954
but what it happens. Well, if no measure gates are

95
00:06:05,992 --> 00:06:09,874
added to the circuit, the output results for the

96
00:06:09,912 --> 00:06:13,362
simulation will display results for the full Hilbert space

97
00:06:13,496 --> 00:06:17,154
covered by the circuit. In this case, we have a circuit

98
00:06:17,202 --> 00:06:20,262
with four qubits and the

99
00:06:20,316 --> 00:06:24,006
simulation results have four states. When we add a

100
00:06:24,028 --> 00:06:27,878
measure gate to the circuit, what the editor does is to

101
00:06:27,964 --> 00:06:32,026
select a portion or subspace of the Hilbert space in

102
00:06:32,048 --> 00:06:36,186
order to display results and ignore the

103
00:06:36,208 --> 00:06:39,210
other one which is not covered by measure gates.

104
00:06:39,550 --> 00:06:43,182
Whenever you add a measure gate to the circuit, it will

105
00:06:43,236 --> 00:06:47,182
assign a classic bit to the measure gates and

106
00:06:47,236 --> 00:06:50,382
usually the index of the classic bit is taken to be the same

107
00:06:50,436 --> 00:06:53,220
with the index of the target bit. However,

108
00:06:53,830 --> 00:06:57,090
for example, when you generate can array of measure gates,

109
00:06:57,750 --> 00:07:01,234
this behavior might occasionally be different

110
00:07:01,352 --> 00:07:05,054
because the editors tries to think to guess

111
00:07:05,112 --> 00:07:08,774
which is the best configuration of measurements that you

112
00:07:08,812 --> 00:07:10,280
want to apply.

113
00:07:12,970 --> 00:07:17,526
In general, whenever you are uncertain about the

114
00:07:17,548 --> 00:07:20,746
state of the circuit at training moment, you can

115
00:07:20,768 --> 00:07:24,474
use this tooltip button which will show the parameters for

116
00:07:24,512 --> 00:07:27,050
all those gates which have parameters.

117
00:07:27,630 --> 00:07:30,854
And basically this is a very handy tool to

118
00:07:30,912 --> 00:07:34,154
figure out what is the current state of your circuit

119
00:07:34,202 --> 00:07:37,582
at any time. We support a large

120
00:07:37,636 --> 00:07:41,310
collection of gates, many of which are not to be found elsewhere.

121
00:07:42,470 --> 00:07:46,990
So of course we support the standard polygates xyz

122
00:07:47,070 --> 00:07:51,202
gates. We support other

123
00:07:51,336 --> 00:07:55,138
created closely related gates like v, which is the square root of x,

124
00:07:55,224 --> 00:07:59,126
h which is square root of y and s, which is

125
00:07:59,148 --> 00:08:02,582
the square root of z and

126
00:08:02,636 --> 00:08:05,750
t, which is square root of f of s. We support

127
00:08:05,820 --> 00:08:09,434
of course, arbitrary rotation on the blocks here around the

128
00:08:09,472 --> 00:08:13,830
x, y and z axis. We support the Hadamar gates

129
00:08:13,990 --> 00:08:16,970
which is used in almost every algorithm,

130
00:08:17,310 --> 00:08:20,666
but we support some other gates. For example, what Hadamar

131
00:08:20,698 --> 00:08:24,186
gate is is a rotation on the diagonal axis

132
00:08:24,218 --> 00:08:28,746
in Zx plane. So besides this standard Hadamar

133
00:08:28,778 --> 00:08:33,374
gate, there are two other Hadamar gates which are occasionally useful,

134
00:08:33,502 --> 00:08:37,138
and this represent PI rotation around the diagonal axis in

135
00:08:37,144 --> 00:08:39,810
the y, z and xy plane.

136
00:08:40,470 --> 00:08:45,246
We support standard parametric gates ranging

137
00:08:45,278 --> 00:08:48,514
from one to three parameters. We support the

138
00:08:48,552 --> 00:08:51,734
sea gate which performs a

139
00:08:51,772 --> 00:08:55,334
permutation on the x,

140
00:08:55,372 --> 00:09:00,466
y and z axis. We support integral

141
00:09:00,578 --> 00:09:04,202
root of x, y and z gates which are used,

142
00:09:04,256 --> 00:09:08,678
for example, in quantum

143
00:09:08,694 --> 00:09:12,746
free transform circuits for the two qubit

144
00:09:12,778 --> 00:09:16,334
gates. We of course support the

145
00:09:16,372 --> 00:09:19,962
swap gate and various

146
00:09:20,026 --> 00:09:24,046
variants of swap like parametric swap or iswap,

147
00:09:24,158 --> 00:09:27,742
and several others. We support the so called icing gates,

148
00:09:27,806 --> 00:09:31,054
which are native gates to trap driven ion

149
00:09:31,102 --> 00:09:34,770
devices. We support the Magic gate.

150
00:09:35,190 --> 00:09:38,994
We support the Givens gate, which is used occasionally

151
00:09:39,042 --> 00:09:42,642
in computational chemistry. We support the cross resonance gate,

152
00:09:42,706 --> 00:09:46,146
which is a native gate in superconductic

153
00:09:46,178 --> 00:09:51,386
base devices. And in

154
00:09:51,408 --> 00:09:54,742
general you can add any numbers of controls to a gate.

155
00:09:54,886 --> 00:09:58,694
For example, you can add controls in the Z basis

156
00:09:58,742 --> 00:10:01,120
like this. Sorry,

157
00:10:01,890 --> 00:10:05,294
but you can also add controls in the X

158
00:10:05,332 --> 00:10:08,878
basis, or you can add controls in

159
00:10:08,884 --> 00:10:10,030
the Y basis.

160
00:10:12,050 --> 00:10:15,454
You can add controls either by dragging the control icon

161
00:10:15,502 --> 00:10:19,934
from the top left of the UI, or you can add controls

162
00:10:19,982 --> 00:10:23,138
from the gate pop up dialog where you

163
00:10:23,144 --> 00:10:27,110
can add a little bit faster and larger number of controls.

164
00:10:28,010 --> 00:10:31,846
We also support the aggregate gate, which is a method to

165
00:10:31,868 --> 00:10:35,302
group several gates together and assign them a common

166
00:10:35,356 --> 00:10:37,800
set of controls. For example,

167
00:10:38,330 --> 00:10:41,980
here is an implementation of the Steen error correction code

168
00:10:42,590 --> 00:10:45,882
in general, where you are unsure what a gate does.

169
00:10:45,936 --> 00:10:49,994
You can use our help facility how it works. You select a gate from

170
00:10:50,032 --> 00:10:53,120
the gate panel on the left and push the help button.

171
00:10:53,730 --> 00:10:57,530
If you unselect the gate, you'll get to a general section

172
00:10:57,610 --> 00:11:01,166
that will give you some hints on

173
00:11:01,348 --> 00:11:04,866
general hints for using our editor an important detail when

174
00:11:04,888 --> 00:11:08,702
we display our simulation result is the choice of ordering for qubits

175
00:11:08,766 --> 00:11:12,466
when representing quantum states. Most quantum textbook use the

176
00:11:12,488 --> 00:11:16,482
big indian ordering, while many commercial hardware quantum computing platform

177
00:11:16,616 --> 00:11:20,194
use the little indian ordering because interpreting gates as binary

178
00:11:20,242 --> 00:11:23,270
numbers makes sense. Using the letter collection,

179
00:11:23,610 --> 00:11:26,680
we provide support for both.

180
00:11:29,950 --> 00:11:33,466
When simulating quantum circuits, you can simulate circuits with

181
00:11:33,488 --> 00:11:36,838
up to 27 qubits online. The simulator was written

182
00:11:36,854 --> 00:11:40,678
in rust complex webassembly and runs very fast

183
00:11:40,704 --> 00:11:44,542
in your browser, surprisingly fast. A 20 qubit circuit with

184
00:11:44,596 --> 00:11:48,334
300 gigs is simulated in less than 1 second. We also

185
00:11:48,372 --> 00:11:51,754
support we provide support for simulating

186
00:11:51,802 --> 00:11:55,790
circuits with up to 32 qubits offline,

187
00:11:55,950 --> 00:11:59,934
an important aspect to be reused. Our platform is not an isolated island

188
00:11:59,982 --> 00:12:03,822
in the space of quantum computing software. We provide support for exporting

189
00:12:03,886 --> 00:12:07,022
quantum circuits to Kiskit and OpencaSm format.

190
00:12:07,166 --> 00:12:10,342
We also provide support for running your circuits directly on

191
00:12:10,396 --> 00:12:14,038
IBMQ quantum devices. For this you need

192
00:12:14,124 --> 00:12:17,786
to go to one of your projects, select a circuit you want

193
00:12:17,808 --> 00:12:21,226
to run on, and then press the

194
00:12:21,248 --> 00:12:22,700
ping IBMQ button.

195
00:12:24,270 --> 00:12:28,122
This will take a few seconds because this will make an API call

196
00:12:28,176 --> 00:12:31,806
towards IBM on the cloud. But eventually you are going

197
00:12:31,828 --> 00:12:35,246
to see here a list of quantum devices which

198
00:12:35,348 --> 00:12:39,514
you are allowed to use. Unfortunately, I have a basic ABM

199
00:12:39,562 --> 00:12:42,730
Q account, and I have only access

200
00:12:42,820 --> 00:12:45,730
to real devices, up to seven qubits.

201
00:12:46,470 --> 00:12:50,114
You may be able to do more. At any rate, you also

202
00:12:50,152 --> 00:12:53,742
have access to some very performance simulators.

203
00:12:53,886 --> 00:12:57,534
For example, there is a tensor network simulator

204
00:12:57,582 --> 00:13:01,190
which can simulate circuits with up to 100 qubits.

205
00:13:01,530 --> 00:13:05,366
At this moment, you can easily create circuits in our editor with up to even

206
00:13:05,468 --> 00:13:08,774
30 qubits or more. It may be a bit more tedious for the very

207
00:13:08,812 --> 00:13:12,422
largest one, but it can definitely be done. And in general

208
00:13:12,476 --> 00:13:15,642
it can be done fast and easily. To be fair, if you work with 30

209
00:13:15,696 --> 00:13:18,986
qubits, a larger display might help, but you also provide a zoom in

210
00:13:19,008 --> 00:13:22,206
zoom out function which allows you to

211
00:13:22,228 --> 00:13:26,122
accommodate circuits with up to even 32 qubits

212
00:13:26,186 --> 00:13:29,422
on the display of a laptop. In the future,

213
00:13:29,476 --> 00:13:32,398
we want to scale our editor to hundreds of,

214
00:13:32,564 --> 00:13:36,174
even perhaps thousands of qubits by

215
00:13:36,212 --> 00:13:39,726
supporting circuits like this one. What you should

216
00:13:39,748 --> 00:13:43,774
note here is the dots, meaning that you

217
00:13:43,812 --> 00:13:46,946
could in principle will make circuits with an arbitrary

218
00:13:46,978 --> 00:13:50,614
large number of qubits. Another interesting feature that we

219
00:13:50,652 --> 00:13:54,646
might try to add support for is running semi classical quantum algorithms like

220
00:13:54,668 --> 00:13:57,730
VQE and QA using our simulator.

221
00:13:57,890 --> 00:14:01,254
In the end, I would like to invite you to try out our editor and

222
00:14:01,292 --> 00:14:04,550
you have any kind of feedback, questions or feature requests, please contact

223
00:14:04,620 --> 00:14:06,180
us on Discord. Thank you very much.

