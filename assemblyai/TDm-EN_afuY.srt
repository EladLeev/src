1
00:02:14,760 --> 00:02:18,416
Hello, I'm Martin Wimpress. I'm senior director for developer

2
00:02:18,448 --> 00:02:21,892
relations and community at Slimai. Today I'll be

3
00:02:21,946 --> 00:02:25,892
sharing five practices examples of best practices to better

4
00:02:25,946 --> 00:02:28,420
secure your production ready containers.

5
00:02:29,000 --> 00:02:32,784
I'll briefly introduce Slim AI. Slim AI was created

6
00:02:32,832 --> 00:02:36,052
to give developers the power to build,

7
00:02:36,106 --> 00:02:39,420
say, for cloud native applications with less friction

8
00:02:39,760 --> 00:02:43,496
in connection with our open source Docker Slim. The Slimai

9
00:02:43,688 --> 00:02:47,464
SaaS platform allows developers to optimize their containers,

10
00:02:47,592 --> 00:02:51,216
reducing both overall size and vulnerability count.

11
00:02:51,398 --> 00:02:55,276
By increasing efficiency and decreasing the attack surface,

12
00:02:55,388 --> 00:02:59,484
Slim AI ensures you're only shipping into production

13
00:02:59,612 --> 00:03:03,652
what you need to today I'm going to present five

14
00:03:03,706 --> 00:03:06,928
security best practices for your production ready containers.

15
00:03:07,104 --> 00:03:09,750
I'll briefly introduce our sample application,

16
00:03:10,280 --> 00:03:14,536
then I'll look at container best practices with a specific focus

17
00:03:14,638 --> 00:03:16,570
on where it impacts security.

18
00:03:17,980 --> 00:03:21,988
You should understand exactly what you're shipping

19
00:03:22,164 --> 00:03:25,848
into production, and I'll introduce several tools that

20
00:03:25,934 --> 00:03:28,750
can help with that that you can start using today.

21
00:03:29,360 --> 00:03:33,096
We'll then make an objective decision on what the best base image

22
00:03:33,128 --> 00:03:37,116
is for our example application. And finally, we'll minify the

23
00:03:37,138 --> 00:03:41,040
container images with Docker Slim to significantly reduce the attack

24
00:03:41,110 --> 00:03:44,736
surface. So we're going to use Python for our

25
00:03:44,758 --> 00:03:48,384
example. Here's a very simple Python flask app that

26
00:03:48,422 --> 00:03:52,404
implements an even simpler restful API, and that app is just

27
00:03:52,442 --> 00:03:55,744
for illustrative purposes. Its function is unimportant.

28
00:03:55,792 --> 00:03:59,764
We could have done this example with node js. For example,

29
00:03:59,962 --> 00:04:03,820
we'll container this app using four different base images

30
00:04:03,920 --> 00:04:07,204
and several different container composition techniques.

31
00:04:07,332 --> 00:04:09,960
So let's just take a look at one of those Docker files.

32
00:04:11,020 --> 00:04:14,612
This docker file adheres to container best practice.

33
00:04:14,756 --> 00:04:17,976
It uses an official Python base images.

34
00:04:18,088 --> 00:04:21,484
A work directory is defined for our app. It has good

35
00:04:21,522 --> 00:04:25,192
layer construction to minimize cache invalidation

36
00:04:25,256 --> 00:04:28,712
and optimize build performance. Files are copied

37
00:04:28,776 --> 00:04:32,464
only as required. A port is exposed, and it

38
00:04:32,502 --> 00:04:36,544
uses an entry point for proper signal handling. But there are

39
00:04:36,582 --> 00:04:39,888
a few things that can help specifically with container security,

40
00:04:40,054 --> 00:04:43,110
so let's take a closer look at each of those.

41
00:04:44,360 --> 00:04:48,080
If you do not specify a user in your docker file,

42
00:04:48,160 --> 00:04:52,400
your app will run as root nobody is an unprivileged

43
00:04:52,480 --> 00:04:55,940
system account. It's available by default in Debian,

44
00:04:56,020 --> 00:04:59,620
Ubuntu, rel, Alpine, distroless, etc.

45
00:04:59,780 --> 00:05:03,016
The nobody account is intended to run things

46
00:05:03,118 --> 00:05:06,660
that don't need any special permissions. It's usually

47
00:05:06,750 --> 00:05:10,044
reserved for services so that if they get

48
00:05:10,082 --> 00:05:13,192
compromised, the wouldbe attacker has minimal

49
00:05:13,256 --> 00:05:16,364
impact or access to the rest of the system.

50
00:05:16,562 --> 00:05:20,108
By contrast, if the app is running in the root context,

51
00:05:20,204 --> 00:05:24,064
then the wouldbe attacker potentially has complete access to

52
00:05:24,102 --> 00:05:28,464
the container and possibly access to all the tools and

53
00:05:28,662 --> 00:05:32,864
utilities shipped in the container that they can now use to disrupt

54
00:05:32,912 --> 00:05:36,516
your operations. Choosing a version number for

55
00:05:36,538 --> 00:05:39,312
your base images is often referred to as pinning.

56
00:05:39,456 --> 00:05:42,640
Some tutorials teach newcomers to pin

57
00:05:42,720 --> 00:05:45,736
their images to the latest tag. However,

58
00:05:45,838 --> 00:05:48,984
containers are meant to be ephemeral, meaning that

59
00:05:49,022 --> 00:05:51,844
they can be created, destroyed, started, stopped,

60
00:05:51,892 --> 00:05:55,464
reproduced with ease and reliability. Using the

61
00:05:55,502 --> 00:05:59,100
latest tag means there isn't a single source of truth for your

62
00:05:59,170 --> 00:06:03,020
software bill of materials, resulting in your container getting

63
00:06:03,090 --> 00:06:06,270
whatever the most recently updated version is.

64
00:06:06,800 --> 00:06:10,800
A new version to the latest tag can introduce major

65
00:06:10,870 --> 00:06:14,396
version bumps to the system and the language, which will likely

66
00:06:14,428 --> 00:06:18,496
introduce breaking changes. Pinning a specific major and

67
00:06:18,518 --> 00:06:22,432
minor version in your docker file is a trade off. You're choosing

68
00:06:22,496 --> 00:06:26,452
to not automatically receive system upgrades and

69
00:06:26,506 --> 00:06:29,872
language improvements and fixes via the update mechanisms,

70
00:06:30,016 --> 00:06:33,124
but most devsecops teams prefer to

71
00:06:33,162 --> 00:06:37,204
employ security scanning as a way to control updates

72
00:06:37,332 --> 00:06:41,604
rather than dealing with the unpredictability that comes with container

73
00:06:41,652 --> 00:06:45,236
build and runtime failures. We'll now see how pinning

74
00:06:45,268 --> 00:06:47,640
a base image tack can be helpful.

75
00:06:49,020 --> 00:06:52,832
Avoiding run AptGet upgrade in Dockerfiles

76
00:06:52,916 --> 00:06:56,924
was considered best practice. It was considered best

77
00:06:56,962 --> 00:07:00,268
practice in the vast majority of cases.

78
00:07:00,364 --> 00:07:04,224
This is not good advice. Base images from vendors and

79
00:07:04,262 --> 00:07:07,280
large projects are frequently updated using

80
00:07:07,350 --> 00:07:10,816
the same tag to include critical bug fixes and security

81
00:07:10,918 --> 00:07:14,212
updates. However, there can often be

82
00:07:14,266 --> 00:07:17,780
days between the updates being packaged. Sorry,

83
00:07:17,930 --> 00:07:21,956
between the updates being published in the package repositories and the

84
00:07:21,978 --> 00:07:25,800
revised base images being pushed to the registries,

85
00:07:26,460 --> 00:07:29,828
relying on the base image alone is not sufficient,

86
00:07:30,004 --> 00:07:33,784
even from images blessed by Docker and container by

87
00:07:33,822 --> 00:07:37,372
companies with plenty of resources. Now imagine a small

88
00:07:37,426 --> 00:07:41,230
open source project maintained in somebody's spare time.

89
00:07:42,000 --> 00:07:46,072
If you pin a stable base image, package updates

90
00:07:46,136 --> 00:07:50,124
are purely focused on security fixes and severe bug

91
00:07:50,172 --> 00:07:54,256
fixes. You can safely apply system updates without

92
00:07:54,358 --> 00:07:57,804
fear of unexpected upgrades that may introduce breaking

93
00:07:57,852 --> 00:08:01,916
changes, but you do need to be sure you're

94
00:08:01,948 --> 00:08:05,664
really applying the latest updates. Docker builds

95
00:08:05,712 --> 00:08:09,492
can be slow, so we use layer caching to reuse build

96
00:08:09,546 --> 00:08:12,948
steps from prior builds to speed up the current one.

97
00:08:13,114 --> 00:08:17,108
And while this does improve performance, there's a potential downside.

98
00:08:17,284 --> 00:08:21,144
Caching can lead to insecure images for most

99
00:08:21,182 --> 00:08:25,428
Docker file commands. If the text of the command hasn't changed,

100
00:08:25,524 --> 00:08:29,630
the previously cached layer will be reused in the current build.

101
00:08:30,080 --> 00:08:33,852
When you're relying on caching, those Aptget install

102
00:08:33,986 --> 00:08:37,308
update upgrade run commands will

103
00:08:37,394 --> 00:08:41,280
add old, possibly insecure packages into

104
00:08:41,350 --> 00:08:44,844
your images. Even after the distro vendor

105
00:08:44,892 --> 00:08:47,356
has released security updates,

106
00:08:47,548 --> 00:08:50,924
so sometimes you're going to want to bypass

107
00:08:51,052 --> 00:08:55,376
the caching, and you can do so by passing a couple of arguments

108
00:08:55,408 --> 00:08:59,136
to Docker build pull pulls,

109
00:08:59,168 --> 00:09:02,870
the latest version of the base image instead of using

110
00:09:04,620 --> 00:09:08,644
the locally cached one, and no cache

111
00:09:08,772 --> 00:09:12,772
ensures all additional layers in the Docker file get rebuilt

112
00:09:12,836 --> 00:09:16,040
from scratch instead of relying on the layer cache.

113
00:09:16,460 --> 00:09:20,396
If you add those arguments to Docker build, the new image will

114
00:09:20,418 --> 00:09:24,300
have the latest system level packages and security updates.

115
00:09:24,640 --> 00:09:28,252
But if you want the benefits of caching and get

116
00:09:28,306 --> 00:09:32,256
security updates in a reasonable amount of time, you'll need to

117
00:09:32,278 --> 00:09:37,104
have two build processes, your normal build process that

118
00:09:37,302 --> 00:09:41,244
happens whenever new code is released, and a nightly

119
00:09:41,292 --> 00:09:44,988
process that rebuilds your container image from scratch.

120
00:09:45,084 --> 00:09:48,864
Using docker build pulls no cache

121
00:09:48,912 --> 00:09:51,620
to ensure you have all the security updates.

122
00:09:52,200 --> 00:09:55,316
So at this point, we now have a container image that adheres

123
00:09:55,348 --> 00:09:58,970
to best practice, but what's actually inside it?

124
00:09:59,500 --> 00:10:02,996
I'm not going to deep dive into container vulnerability

125
00:10:03,108 --> 00:10:06,512
scanning and software bill of material generation

126
00:10:06,676 --> 00:10:09,900
that cool be a talk in its own right. However,

127
00:10:10,050 --> 00:10:14,264
you should absolutely perform vulnerability scans and generate

128
00:10:14,312 --> 00:10:18,376
s bombs in your production container image, build pipelines,

129
00:10:18,568 --> 00:10:22,364
and review the results. These are also extremely

130
00:10:22,412 --> 00:10:26,220
useful tools for understanding what's in your containers,

131
00:10:26,380 --> 00:10:30,204
what you are shipping to production, and what your potential exposure

132
00:10:30,252 --> 00:10:34,336
is. For the purposes of this presentation, I have used docker

133
00:10:34,368 --> 00:10:37,604
scan, which is powered by sneak and Docker S

134
00:10:37,642 --> 00:10:41,216
bomb, which is powered by Sift. Other scanning

135
00:10:41,248 --> 00:10:44,916
utilities are available, such as Trivi Gripe

136
00:10:44,948 --> 00:10:48,650
and Claire. I do recommend that you give them all a try.

137
00:10:50,140 --> 00:10:53,716
I use the Slimai SaaS platform and more recently the slim

138
00:10:53,748 --> 00:10:57,336
AI docker extension to demystify containers

139
00:10:57,448 --> 00:11:00,904
and really get to know what's inside them. Knowing what's

140
00:11:00,952 --> 00:11:04,232
inside your container is critical to securing your software

141
00:11:04,296 --> 00:11:07,896
supply chain. The slim platform lifts

142
00:11:07,928 --> 00:11:11,132
the veil on container internals so you can analyze,

143
00:11:11,196 --> 00:11:14,556
optimize, and compare changes before deploying

144
00:11:14,588 --> 00:11:18,524
your cloud native apps. Let's use container

145
00:11:18,572 --> 00:11:22,404
scanning and analysis to determine what the best base image would

146
00:11:22,442 --> 00:11:24,390
be. For our example application,

147
00:11:25,880 --> 00:11:29,812
the regular official Python base image is built

148
00:11:29,866 --> 00:11:34,604
from Debian eleven and weighs in at 915 megabytes,

149
00:11:34,752 --> 00:11:37,450
but smaller starting points are available.

150
00:11:38,620 --> 00:11:41,992
I'll containerize our example app using four different

151
00:11:42,046 --> 00:11:45,732
base images, including the official Python

152
00:11:45,796 --> 00:11:48,750
image based on Alpine 315,

153
00:11:49,200 --> 00:11:52,872
the official slim Python image based on Debian

154
00:11:52,936 --> 00:11:56,830
eleven, a distroless multistage build,

155
00:11:57,360 --> 00:12:01,116
and Ubuntu 22 four, which doesn't include

156
00:12:01,148 --> 00:12:04,672
Python by default, so has to be installed via a docker run

157
00:12:04,726 --> 00:12:08,416
command. Sometimes it's necessary to install

158
00:12:08,518 --> 00:12:12,624
additional system packages as dependencies for your applications

159
00:12:12,752 --> 00:12:16,688
or otherwise to help your build the image.

160
00:12:16,864 --> 00:12:20,036
The Ubuntu base image doesn't include Python, so it needs

161
00:12:20,058 --> 00:12:23,504
to be installed via AptGet using a dockerfile

162
00:12:23,552 --> 00:12:27,128
run command. The default options for system

163
00:12:27,214 --> 00:12:30,760
package installation on Debian, Ubuntu, and rel

164
00:12:30,910 --> 00:12:34,360
can result in much bigger images than expected.

165
00:12:34,860 --> 00:12:38,616
That 915 megabyte Python base image

166
00:12:38,648 --> 00:12:40,910
I mentioned earlier is a good example.

167
00:12:41,600 --> 00:12:45,016
More packages make the container image larger,

168
00:12:45,208 --> 00:12:49,172
which may in turn increase the attack surface of the container.

169
00:12:49,336 --> 00:12:53,228
So when you do need to install additional system packages,

170
00:12:53,404 --> 00:12:56,556
avoid installing the recommended dependencies.

171
00:12:56,748 --> 00:13:00,716
I've included examples here for Ubuntu and rel that install Python

172
00:13:00,748 --> 00:13:04,560
three without those unnecessary recommended packages.

173
00:13:05,060 --> 00:13:08,224
Using no install recommends on my

174
00:13:08,262 --> 00:13:11,984
Ubuntu based container reduced the image size by approximately

175
00:13:12,032 --> 00:13:15,704
266 megabytes. So let's build our

176
00:13:15,742 --> 00:13:19,480
app with each of those base images and see how those final

177
00:13:19,550 --> 00:13:22,650
image sizes stack up against one another.

178
00:13:23,020 --> 00:13:27,004
Here's the results in terms of image size. The images all

179
00:13:27,042 --> 00:13:31,080
include Python, our example app, and its dependencies.

180
00:13:31,160 --> 00:13:35,420
And those dependencies are eleven packages that get installed via PiP.

181
00:13:35,760 --> 00:13:39,484
The adage goes smaller is safer. A smaller

182
00:13:39,532 --> 00:13:43,360
image size should correspond to fewer packages

183
00:13:44,260 --> 00:13:47,520
that should result in fewer vulnerabilities.

184
00:13:48,020 --> 00:13:52,128
So let's check that there's

185
00:13:52,144 --> 00:13:55,424
no denying that these alpine results are excellent

186
00:13:55,472 --> 00:13:59,136
with zero vulnerabilities. The official Python

187
00:13:59,168 --> 00:14:02,708
images based on Debian eleven is not looking great,

188
00:14:02,794 --> 00:14:06,452
however, with 84 vulnerabilities, of which 13

189
00:14:06,516 --> 00:14:09,736
are critical and three are high. And these

190
00:14:09,758 --> 00:14:12,644
are all in system packages installed via apT.

191
00:14:12,772 --> 00:14:16,372
Distros, which is also based on Debian eleven has

192
00:14:16,446 --> 00:14:19,900
46 vulnerabilities. Of those,

193
00:14:19,970 --> 00:14:24,028
three are critical and seven are high. Again, these are all in system

194
00:14:24,114 --> 00:14:27,528
packages installed via APT and with Distrolus

195
00:14:27,624 --> 00:14:30,768
it's also difficult to do much about this.

196
00:14:30,934 --> 00:14:34,076
Unlike traditional debian derived images,

197
00:14:34,188 --> 00:14:38,640
there is no aptget in order to install the latest updates it

198
00:14:38,710 --> 00:14:42,436
can be worked around, but it is nontrivial. And that

199
00:14:42,458 --> 00:14:45,952
brings us to Ubuntu, the largest container image

200
00:14:46,016 --> 00:14:49,876
but the second best vulnerability assessment. No critical or

201
00:14:49,898 --> 00:14:53,824
high vulnerabilities at all, just seven medium and 16 low

202
00:14:53,882 --> 00:14:57,496
risk vulnerabilities. Well, why is this? Ubuntu is

203
00:14:57,518 --> 00:15:01,700
derived from Debian, right? Ubuntu is a commercially

204
00:15:01,780 --> 00:15:05,832
backed Linux distro with a full time security team that

205
00:15:05,886 --> 00:15:08,988
has slas to mitigate vulnerabilities for their customers

206
00:15:09,074 --> 00:15:13,320
and users, which also includes mitigating all critical

207
00:15:13,400 --> 00:15:16,956
and high vulnerabilities for the supported lifetime of the

208
00:15:16,978 --> 00:15:20,352
distro. Debian, on the other hand, is a community project.

209
00:15:20,486 --> 00:15:23,888
And while many Debian contributors, including myself,

210
00:15:24,054 --> 00:15:27,804
do fix security issues in Debian, it simply cannot

211
00:15:27,852 --> 00:15:31,580
provide the same level of commitment to security as the commercially

212
00:15:31,660 --> 00:15:35,344
backed Linux vendors such as canonical, red Hat and

213
00:15:35,382 --> 00:15:38,464
sousa. So looking at these results,

214
00:15:38,512 --> 00:15:41,190
Alpine is the clear winner, right?

215
00:15:41,720 --> 00:15:45,016
Well, sadly not. Python and node and some

216
00:15:45,038 --> 00:15:48,648
other languages can result in significantly slower build times

217
00:15:48,734 --> 00:15:52,580
and introduce runtime bugs and unexpected behavior

218
00:15:52,740 --> 00:15:56,676
when using Alpine. This is due to the differences

219
00:15:56,708 --> 00:16:00,444
in muscle used in Alpine as opposed to glib C used in most

220
00:16:00,482 --> 00:16:04,076
other distributions. And this topic could also be a

221
00:16:04,098 --> 00:16:07,372
talk of itself. Personally, I do not

222
00:16:07,426 --> 00:16:10,816
recommend using Alpine for Python apps, but it can be great for

223
00:16:10,838 --> 00:16:17,104
go and rust. So what

224
00:16:17,142 --> 00:16:20,752
if I could have the low complexity of maintaining ubuntu based

225
00:16:20,806 --> 00:16:24,884
containers and the security profile of Alpine? And what

226
00:16:24,922 --> 00:16:28,580
if I can make containers smaller than Alpine?

227
00:16:29,000 --> 00:16:32,372
Well, let's try that. The terms

228
00:16:32,506 --> 00:16:36,072
slim, minify and optimized are used

229
00:16:36,126 --> 00:16:39,688
interchangeably to describe the act of reducing the size of

230
00:16:39,694 --> 00:16:43,844
a container image. Docker slim is a free and open source

231
00:16:43,892 --> 00:16:47,996
software available from GitHub. Both Docker Slimai and the

232
00:16:48,018 --> 00:16:51,724
Slim AI SaaS platform can automatically optimize your

233
00:16:51,762 --> 00:16:55,192
containers. Don't change anything in your container image

234
00:16:55,256 --> 00:16:57,790
and minify it up to 30 times,

235
00:16:58,980 --> 00:17:02,528
making it more secure and reducing the attack surface of

236
00:17:02,534 --> 00:17:06,108
the container. Docker Slim has been used with node, js,

237
00:17:06,204 --> 00:17:09,004
Python, Ruby, Java, Golang,

238
00:17:09,132 --> 00:17:12,020
Elixir, Rust R,

239
00:17:12,170 --> 00:17:15,984
PhP and all running on top of Ubuntu, Debian,

240
00:17:16,032 --> 00:17:18,550
Centos, Alpine, distroless and more.

241
00:17:20,360 --> 00:17:24,104
We always get asked how Docker Slim works, so let's just

242
00:17:24,142 --> 00:17:27,812
take a quick look at that. Docker slim

243
00:17:27,876 --> 00:17:31,544
optimizes containers by understand your application and

244
00:17:31,582 --> 00:17:34,804
what it actually needs. Using various analysis

245
00:17:34,852 --> 00:17:38,140
techniques including static and dynamic tracing,

246
00:17:39,040 --> 00:17:42,584
Docker slim will throw away what the container doesn't

247
00:17:42,632 --> 00:17:46,264
need. A new single layer images is created and it's

248
00:17:46,312 --> 00:17:49,692
composed from only those files in the original fat

249
00:17:49,756 --> 00:17:53,136
image that are actually required by your app in

250
00:17:53,158 --> 00:17:57,424
order for it to function. You can understand your

251
00:17:57,462 --> 00:18:01,372
container images before and after optimization using

252
00:18:01,446 --> 00:18:05,024
the Slim AI SaaS platform or the Slim AI Docker desktop

253
00:18:05,072 --> 00:18:08,484
extension. There are also a number of benefits

254
00:18:08,602 --> 00:18:12,544
to slimming containers only ship to production

255
00:18:12,592 --> 00:18:15,992
what your app requires slim containers can be up to 30

256
00:18:16,046 --> 00:18:19,716
times smaller than fat containers. Slim container

257
00:18:19,748 --> 00:18:23,876
images are faster to deploy due to their lower size and faster

258
00:18:23,908 --> 00:18:27,150
to start due to having fewer files inside them.

259
00:18:27,680 --> 00:18:31,356
Slim containers can be less expensive to store and transfer,

260
00:18:31,538 --> 00:18:35,020
and slimai containers reduce your attack surface.

261
00:18:35,440 --> 00:18:38,996
In our report titled what we discovered analyzing

262
00:18:39,048 --> 00:18:42,512
the top 100 public container images, we saw

263
00:18:42,566 --> 00:18:46,364
an increasing trend in dev test QA and infrastructure

264
00:18:46,412 --> 00:18:50,764
tooling being left inside production containers unused

265
00:18:50,812 --> 00:18:54,692
shells interpreters cool utilities left

266
00:18:54,746 --> 00:18:58,384
in your container images can be used against your infrastructure

267
00:18:58,432 --> 00:19:02,340
to disrupt your operations if a container is compromised.

268
00:19:03,080 --> 00:19:06,120
So let's take a look at those slimmed containers.

269
00:19:07,100 --> 00:19:10,408
In most cases, there are significant size reductions to

270
00:19:10,414 --> 00:19:14,132
be had slimming any container image regardless of the build technique

271
00:19:14,196 --> 00:19:18,124
or base image used in our example here, we're seeing

272
00:19:18,162 --> 00:19:22,568
between three and five times size reductions, quite modest

273
00:19:22,664 --> 00:19:26,172
but valuable. All the same, as the container attack

274
00:19:26,226 --> 00:19:30,000
surface has been significantly reduced, we often

275
00:19:30,070 --> 00:19:33,660
see ten to 30 times size reductions in complex

276
00:19:33,740 --> 00:19:37,472
applications. And our slim Ubuntu based

277
00:19:37,526 --> 00:19:41,656
image is now just five megabytes larger than the slim alpine

278
00:19:41,708 --> 00:19:45,184
based image, but with none of the compatibility concerns,

279
00:19:45,312 --> 00:19:48,692
and 37 megabytes smaller than the

280
00:19:48,746 --> 00:19:52,480
unoptimized alpine image. But has Slimming

281
00:19:52,560 --> 00:19:56,650
also improved the vulnerability assessment? Let's find out.

282
00:19:58,620 --> 00:20:02,616
Analyzing if vulnerable components exist in slimmed containers is

283
00:20:02,638 --> 00:20:06,676
currently a manual task, as the metadata the scanning tools

284
00:20:06,708 --> 00:20:10,332
use is often no longer available. That said,

285
00:20:10,466 --> 00:20:13,148
it only takes a few minutes at most,

286
00:20:13,314 --> 00:20:16,584
and using the slim AI SAS or the slim AI

287
00:20:16,632 --> 00:20:20,476
Docker desktop extension to search for vulnerable components and confirm

288
00:20:20,508 --> 00:20:23,916
that they're no longer present we've already confirmed

289
00:20:23,948 --> 00:20:28,560
the Ubuntu based image was free of critical and high risk vulnerabilities.

290
00:20:28,980 --> 00:20:32,708
The seven medium risk vulnerabilities were in e two

291
00:20:32,794 --> 00:20:35,856
FS progs, which are Linux file system utilities,

292
00:20:36,048 --> 00:20:39,652
lib, SQL lite three, and Perl base. It took

293
00:20:39,706 --> 00:20:43,280
literally seconds to confirm that none of those components

294
00:20:43,360 --> 00:20:46,596
exist in the slimmed image. So now we

295
00:20:46,618 --> 00:20:49,332
just have the low risk vulnerabilities remaining.

296
00:20:49,476 --> 00:20:53,284
And two of those low risk vulnerabilities were in the Python

297
00:20:53,332 --> 00:20:56,424
mailcap module, something we should be interested in,

298
00:20:56,462 --> 00:21:00,204
given we have a Python application here and it was specifically in

299
00:21:00,242 --> 00:21:04,104
the find match function. Again, it took seconds

300
00:21:04,152 --> 00:21:10,316
to use the slim AI Docker desktop extension to

301
00:21:10,338 --> 00:21:13,772
confirm that the Python mailcap module was no longer

302
00:21:13,826 --> 00:21:17,564
present in the slim image. In fact, let's do

303
00:21:17,602 --> 00:21:21,310
that now. So this is our

304
00:21:21,720 --> 00:21:25,776
unoptimized Ubuntu

305
00:21:25,808 --> 00:21:29,572
image with our app inside it. So let's just analyzed that

306
00:21:29,626 --> 00:21:33,268
very quickly. We're going to search

307
00:21:33,354 --> 00:21:36,616
for mailcap because that's the Python module that

308
00:21:36,638 --> 00:21:40,616
we're interested in. So let's bring those results up

309
00:21:40,718 --> 00:21:44,676
and we can see here. Here is the mailcap module,

310
00:21:44,788 --> 00:21:48,528
and here's the compiled bytecode for that module.

311
00:21:48,644 --> 00:21:51,996
So this is in the unoptimized image, so we can confirm that there

312
00:21:52,018 --> 00:21:55,324
it is, it's present. But now what we'll do is we'll look

313
00:21:55,362 --> 00:21:57,980
at the slim image,

314
00:21:58,740 --> 00:22:02,256
so we'll analyze this one and we'll do

315
00:22:02,278 --> 00:22:05,996
the same search. So we'll

316
00:22:06,028 --> 00:22:09,776
search for mailcap and as you can

317
00:22:09,798 --> 00:22:13,364
see, no results have come back. So this is great. We had a Python app

318
00:22:13,402 --> 00:22:16,752
with a vulnerable component. Our app doesn't use that component,

319
00:22:16,816 --> 00:22:20,544
so consequently that vulnerability is entirely

320
00:22:20,592 --> 00:22:24,448
absent from our resulting container. A couple

321
00:22:24,474 --> 00:22:28,196
of minutes was all that was required to use the Slimai Docker

322
00:22:28,228 --> 00:22:31,832
desktop extension to confirm that all of the

323
00:22:31,966 --> 00:22:36,336
components affected by the remaining six low risk vulnerabilities

324
00:22:36,468 --> 00:22:40,396
have also been entirely removed. So yes,

325
00:22:40,498 --> 00:22:43,580
we can have our cake and eat it too.

326
00:22:43,730 --> 00:22:47,752
We have an Ubuntu based images with no known vulnerabilities

327
00:22:47,896 --> 00:22:51,452
of comparable size to a slimmed alpine image,

328
00:22:51,516 --> 00:22:55,760
but with none of the potential complexity of working with Alpine.

329
00:22:56,100 --> 00:23:00,524
It's also worth noting that the high risk vulnerability CVE

330
00:23:00,652 --> 00:23:04,656
2021 three triple nine in Glibc

331
00:23:04,848 --> 00:23:08,832
that exists in the distroless and official

332
00:23:08,896 --> 00:23:12,660
python images that are based on Debian eleven

333
00:23:13,240 --> 00:23:17,572
wants still present in those images, unlike Ubuntu,

334
00:23:17,636 --> 00:23:21,300
where it's already been mitigated, and unlike Alpine,

335
00:23:21,380 --> 00:23:25,476
where it never existed by virtue of alpine using muscle.

336
00:23:25,668 --> 00:23:28,956
So therefore in this case, Ubuntu is

337
00:23:28,978 --> 00:23:32,270
the best base image for our example application.

338
00:23:33,920 --> 00:23:36,060
So let's take a look at what we've learned.

339
00:23:37,360 --> 00:23:41,090
Following container best practice will set you up for success.

340
00:23:41,700 --> 00:23:45,804
Always run Internet facing apps and services via unprivileged

341
00:23:45,852 --> 00:23:49,116
user accounts. Pin your base images,

342
00:23:49,308 --> 00:23:53,376
use a stable base images, and apply your security updates.

343
00:23:53,568 --> 00:23:57,168
Be mindful of layer caching, introducing potentially

344
00:23:57,264 --> 00:24:00,820
insecure packages into your container images

345
00:24:01,320 --> 00:24:04,504
container scanning and analysis are essential to

346
00:24:04,542 --> 00:24:07,320
fully understand what's inside your containers.

347
00:24:08,220 --> 00:24:11,784
Do not install recommended packages to help keep

348
00:24:11,822 --> 00:24:15,672
your containers, Slimai and secure Linux vendors have

349
00:24:15,806 --> 00:24:19,628
security slas assess your base image options

350
00:24:19,714 --> 00:24:22,990
and pick what is most suitable for your project.

351
00:24:23,680 --> 00:24:27,032
You can slim just about any kind of container images,

352
00:24:27,096 --> 00:24:31,170
including those based on alpine and distroless and

353
00:24:34,180 --> 00:24:37,680
slimming significantly reduces vulnerabilities

354
00:24:38,420 --> 00:24:42,004
and the attack surface. But yes, that was more than

355
00:24:42,042 --> 00:24:45,764
five and you're welcome. So thanks

356
00:24:45,802 --> 00:24:49,024
for listening. I hope you've picked up a few tips

357
00:24:49,072 --> 00:24:51,780
to help improve the security of your containers.

358
00:24:52,200 --> 00:24:56,048
We invite you to give Slimai SAS and the Slimai

359
00:24:56,144 --> 00:24:59,604
Docker extension a try. Both are free to use and

360
00:24:59,642 --> 00:25:03,284
also take Docker Slimai for a spin. If you have follow

361
00:25:03,322 --> 00:25:06,892
up questions, then join the slim AI discord and ask.

362
00:25:07,026 --> 00:25:10,764
Or you can follow us on Twitter and ask there. Keep building

363
00:25:10,882 --> 00:25:12,520
and enjoy the rest of the conference.

