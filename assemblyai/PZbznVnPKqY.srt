1
00:00:26,850 --> 00:00:30,518
Hello everyone. In this video we're going to see

2
00:00:30,604 --> 00:00:34,754
this open source project that we built, Kubernetes Bootstrapper,

3
00:00:34,882 --> 00:00:38,722
an extendable framework to set up production grade kubernetes

4
00:00:38,786 --> 00:00:41,160
cluster. Before we head into the project,

5
00:00:41,770 --> 00:00:44,902
we'll just give you an overview of what

6
00:00:44,956 --> 00:00:49,062
is a production ready kubernetes stack. As you can see, I really like

7
00:00:49,116 --> 00:00:52,702
this for graphic from Cloudnative where

8
00:00:52,756 --> 00:00:56,350
in the center you have Kubernetes which is basically a framework,

9
00:00:56,770 --> 00:01:00,094
but you need all the other facets such

10
00:01:00,132 --> 00:01:02,160
as infrastructure, security,

11
00:01:02,550 --> 00:01:06,638
authentication, observability releases and deployments

12
00:01:06,734 --> 00:01:10,066
and development on a really high level. These are the

13
00:01:10,088 --> 00:01:13,554
facets that are needed to set

14
00:01:13,592 --> 00:01:16,550
up a production ready kubernetes cluster.

15
00:01:17,290 --> 00:01:22,018
But is it easy? If you look at the cloud native landscape,

16
00:01:22,194 --> 00:01:25,542
you really can't fit the whole landscape into a single

17
00:01:25,596 --> 00:01:29,526
page. There are so many applications and tools

18
00:01:29,558 --> 00:01:32,810
that are popping up in the cloud native world these days,

19
00:01:32,960 --> 00:01:37,126
so it can be quite daunting for engineers and organizations

20
00:01:37,238 --> 00:01:41,178
to pick and choose the right tool and to put everything together

21
00:01:41,264 --> 00:01:45,034
so that they work together as an integrated package

22
00:01:45,162 --> 00:01:49,226
in order to solve this problem. And that was like problem statement

23
00:01:49,258 --> 00:01:52,786
that we wanted to address with this open source framework that

24
00:01:52,808 --> 00:01:56,626
we're working on is how do people

25
00:01:56,808 --> 00:01:59,874
can quickly set up and

26
00:01:59,912 --> 00:02:04,030
integrate all these applications so that they can get day two operations

27
00:02:04,110 --> 00:02:08,130
ready, right? That's the birth of the Kubernetes bootstrapper.

28
00:02:08,210 --> 00:02:12,322
We've leveraged tools such as Terraform

29
00:02:12,466 --> 00:02:16,194
and Argo CD. For those of you who aren't aware

30
00:02:16,242 --> 00:02:19,846
of Terraform and Argo CD, Terraform is an open source

31
00:02:19,878 --> 00:02:23,734
infrastructure as code software that enables you to safely

32
00:02:23,782 --> 00:02:27,542
and predictably create, change and improve

33
00:02:27,606 --> 00:02:31,262
the infrastructure. Argo CD, on the other hand,

34
00:02:31,316 --> 00:02:34,778
is a Gitops continuous delivery tool for Kubernetes.

35
00:02:34,954 --> 00:02:38,974
It allows developers to declaratively manage the

36
00:02:39,012 --> 00:02:42,742
desired state of their Kubernetes applications and automatically

37
00:02:42,826 --> 00:02:46,146
synchronize that state with the actual state of the

38
00:02:46,168 --> 00:02:50,066
cluster. Terraform and Argo CD can help

39
00:02:50,248 --> 00:02:54,030
improve the development and deployment process for Kubernetes

40
00:02:54,110 --> 00:02:58,274
application by automating and standardizing the management

41
00:02:58,322 --> 00:03:01,154
of infrastructure and application resources,

42
00:03:01,202 --> 00:03:04,898
respectively. The bootstrapper project combines

43
00:03:04,994 --> 00:03:09,494
terraform and Argo CD to build an infrastructure automation

44
00:03:09,622 --> 00:03:12,998
and application delivery platform for Kubernetes.

45
00:03:13,174 --> 00:03:17,542
This project integrates popular open source applications.

46
00:03:17,606 --> 00:03:21,502
As you can see here, we have battle tested open

47
00:03:21,556 --> 00:03:24,960
source apps that have been integrated into this project.

48
00:03:26,050 --> 00:03:29,150
Being a flexible and extendable framework,

49
00:03:29,650 --> 00:03:33,390
it is really easy to add or disable

50
00:03:33,730 --> 00:03:37,794
applications into it. We've leveraged Argocd's app

51
00:03:37,832 --> 00:03:40,382
of app pattern to build this framework.

52
00:03:40,526 --> 00:03:44,098
So are you all excited? Let's head straight to the

53
00:03:44,104 --> 00:03:48,306
GitHub repository where I'm going to walk you through the repository,

54
00:03:48,498 --> 00:03:51,778
the workflow, and then we're going to get our hands dirty

55
00:03:51,874 --> 00:03:55,222
and spin up this bad boy. You can

56
00:03:55,276 --> 00:03:59,126
head to GitHub under Kubernetes KDEs

57
00:03:59,158 --> 00:04:03,238
bootstrapper. That's the project. So we expect minimum

58
00:04:03,334 --> 00:04:08,774
knowledge on Kubernetes and also familiarize

59
00:04:08,822 --> 00:04:12,778
yourself with tools such as terraform, because we're going to use terraform to spin

60
00:04:12,794 --> 00:04:16,494
up the infrastructure and then use Argo CD to spin up

61
00:04:16,532 --> 00:04:20,586
other components. Here's the overview of the repository.

62
00:04:20,618 --> 00:04:23,886
We have an Argo CD directory. We're going to keep the configurations of

63
00:04:23,908 --> 00:04:28,542
Argo CD that's optional. And you have the bootstrap directory

64
00:04:28,686 --> 00:04:32,206
where all the templates required. The bootstrap

65
00:04:32,238 --> 00:04:36,274
resources, which we'll go in detail, are stored docs

66
00:04:36,322 --> 00:04:40,178
directory for documents and other images and assets.

67
00:04:40,354 --> 00:04:44,246
The infrastructure directory where you have all the terraform modules to

68
00:04:44,268 --> 00:04:47,606
spin up your infrastructure on digitalocean. And you have the

69
00:04:47,628 --> 00:04:51,034
observability directory where we're going to use an open

70
00:04:51,072 --> 00:04:54,646
source tool called robusta to set up our observability

71
00:04:54,758 --> 00:04:57,722
stack. It's going to be like a three step process.

72
00:04:57,856 --> 00:05:01,214
First the infra and

73
00:05:01,252 --> 00:05:04,782
then bootstrap process, and then set up the

74
00:05:04,916 --> 00:05:09,114
observability stack. This is the end architecture

75
00:05:09,242 --> 00:05:12,614
that we aim to achieve. So let's head straight

76
00:05:12,682 --> 00:05:16,638
into our infrastructure directory terraform.

77
00:05:16,734 --> 00:05:20,702
And here you have all the terraform modules

78
00:05:20,766 --> 00:05:23,374
and all the instructions that you can copy,

79
00:05:23,422 --> 00:05:27,518
paste and modify a bit to set

80
00:05:27,544 --> 00:05:30,886
up this infrastructure. So what we're going to do now,

81
00:05:30,988 --> 00:05:34,834
we'll head to visual studio code where I've checked out this repository

82
00:05:34,962 --> 00:05:38,774
and we're going to perform the terraform commands, spin up this

83
00:05:38,812 --> 00:05:42,266
infrastructure, and then we'll come back to go ahead with the

84
00:05:42,288 --> 00:05:46,118
bootstrapper process and to set up the observability stack.

85
00:05:46,214 --> 00:05:49,446
So let's head to our vs code. So you have the infrastructure

86
00:05:49,478 --> 00:05:52,430
directory and you have terraform.

87
00:05:54,210 --> 00:05:57,070
Click readme and give it a preview.

88
00:05:58,130 --> 00:06:01,886
All right, I'm inside it. I'll just make sure I'm up

89
00:06:01,908 --> 00:06:05,380
to date. I'm right now going to head into

90
00:06:06,070 --> 00:06:08,690
infrastructure terraform.

91
00:06:09,030 --> 00:06:12,226
Okay, I'm going to perform terraform in

92
00:06:12,248 --> 00:06:15,082
it. I'm just going to follow along the guide.

93
00:06:15,246 --> 00:06:19,250
Awesome. So the bootstrapper TFRS

94
00:06:19,330 --> 00:06:21,400
sample file. Let's open that first.

95
00:06:24,170 --> 00:06:27,534
So it's the variables

96
00:06:27,602 --> 00:06:31,622
file here where we've defined the configurations

97
00:06:31,686 --> 00:06:35,222
of our infrastructure. You can change it and modify

98
00:06:35,286 --> 00:06:40,390
it however you deem fit. I have my own configurations

99
00:06:40,470 --> 00:06:44,158
here. Take a copy of this file, modify changes

100
00:06:44,244 --> 00:06:48,014
if need be, and then you're going to plan and then apply. Let's go back

101
00:06:48,052 --> 00:06:51,866
here. I already have the bootstrap TFRS

102
00:06:51,898 --> 00:06:55,970
file with me, so I'm just going to go ahead and copy this command.

103
00:06:59,750 --> 00:07:03,294
All right. Terraform throws

104
00:07:03,342 --> 00:07:06,726
out the entire plan for me. Pretty much what we saw in the figure.

105
00:07:06,828 --> 00:07:10,690
It's going to spin up a Kubernetes cluster, it's going to spin up a digitalocean

106
00:07:10,770 --> 00:07:14,530
container registry and then it's going to automatically

107
00:07:14,610 --> 00:07:18,200
install Argo CD as we saw

108
00:07:18,830 --> 00:07:22,298
here. Okay, I'm just going

109
00:07:22,304 --> 00:07:24,700
to go ahead and apply this,

110
00:07:26,990 --> 00:07:29,850
copy the command paste.

111
00:07:35,730 --> 00:07:40,350
It takes some time to set up your infrastructure.

112
00:07:41,090 --> 00:07:45,058
Once it's successfully done, you will have your cluster id

113
00:07:45,224 --> 00:07:49,090
in the terminal. So you could just update your kubecontext

114
00:07:50,230 --> 00:07:53,982
so that we can start accessing and observing our Kubernetes

115
00:07:54,046 --> 00:07:57,398
cluster. I'm using to

116
00:07:57,404 --> 00:08:01,000
go ahead and copy the cluster id. Going to paste it.

117
00:08:03,850 --> 00:08:06,070
Updated my kubecontext.

118
00:08:07,870 --> 00:08:11,162
So if I open canines, I should

119
00:08:11,216 --> 00:08:14,602
be seeing the Kubernetes cluster. Yes.

120
00:08:14,736 --> 00:08:17,770
Which has Argo CD installed.

121
00:08:20,690 --> 00:08:24,378
Awesome. So right now our infrastructure

122
00:08:24,474 --> 00:08:28,750
is ready and Argo CD has been installed successfully.

123
00:08:29,170 --> 00:08:34,930
Let's check out our next steps.

124
00:08:36,390 --> 00:08:40,942
All right, we are heading into the bootstrapper

125
00:08:41,006 --> 00:08:44,642
territory. The bootstrap process is not

126
00:08:44,696 --> 00:08:48,134
something new. It's been there. You could

127
00:08:48,172 --> 00:08:51,746
check out the documentation on how Argo

128
00:08:51,778 --> 00:08:55,298
CD suggests. So it's called cluster bootstrapping.

129
00:08:55,474 --> 00:08:59,386
So basically what this means is there

130
00:08:59,408 --> 00:09:03,814
is a parent app. In our case it's going to be the bootstrap

131
00:09:03,942 --> 00:09:07,370
and then you declare all the dependent child

132
00:09:07,440 --> 00:09:10,926
apps beneath it, which we will see

133
00:09:11,028 --> 00:09:15,402
right now. So what this means is Argo.

134
00:09:15,466 --> 00:09:19,070
And we ask Argo to go ahead and install the parent

135
00:09:19,140 --> 00:09:22,962
app. And once the parent app is installed, it goes

136
00:09:23,096 --> 00:09:26,770
ahead and starts installing all the child apps.

137
00:09:27,270 --> 00:09:31,262
The app of apps pattern can be structured

138
00:09:31,406 --> 00:09:34,866
in several ways and we've used helm to

139
00:09:34,888 --> 00:09:39,010
do so. That's why you see the helm structure in the repositories

140
00:09:39,090 --> 00:09:42,486
here as like any helm chart, right?

141
00:09:42,508 --> 00:09:45,346
We have a values file and in this values file,

142
00:09:45,458 --> 00:09:48,842
yaml, we set some flags that makes it easy

143
00:09:48,896 --> 00:09:52,314
for us to enable or disable the apps that we

144
00:09:52,352 --> 00:09:55,814
want. We have logging, we have observability.

145
00:09:55,942 --> 00:10:00,122
There is traffic, traffic is can controller and

146
00:10:00,176 --> 00:10:04,254
trivi is a security operator. So we

147
00:10:04,292 --> 00:10:07,854
can extendable or disable them here. And then if you

148
00:10:07,892 --> 00:10:11,406
enable them, arco picks it up and installs it.

149
00:10:11,428 --> 00:10:14,674
If you've disabled it, of course it won't. What you need to

150
00:10:14,712 --> 00:10:18,226
understand is there is

151
00:10:18,248 --> 00:10:23,550
a strict Gitops workflow here. What this means is ArcoCd

152
00:10:23,630 --> 00:10:27,734
that's installed in our Kubernetes cluster, right, is constantly looking at

153
00:10:27,772 --> 00:10:31,554
this repository, at the configurations, at the flags.

154
00:10:31,682 --> 00:10:34,914
If you want to make a change, if you want to extendable

155
00:10:34,962 --> 00:10:38,390
or disable the apps, you set the values in the file

156
00:10:38,470 --> 00:10:41,706
and you push the code to git to

157
00:10:41,728 --> 00:10:44,442
your branch that argo CD is looking into.

158
00:10:44,496 --> 00:10:48,586
Otherwise you will

159
00:10:48,608 --> 00:10:51,920
not have the end state reflected because

160
00:10:52,450 --> 00:10:56,366
you want to have all the configurations as code stored in

161
00:10:56,388 --> 00:11:00,078
Git. There are huge benefits for it. I don't want

162
00:11:00,084 --> 00:11:03,210
to go into details, but it's great for auditing.

163
00:11:03,290 --> 00:11:06,402
You have a clean track of who's committed what,

164
00:11:06,536 --> 00:11:09,694
and git being your source of truth.

165
00:11:09,822 --> 00:11:14,158
So whatever is in git is going to be synchronized with your cluster.

166
00:11:14,254 --> 00:11:17,974
So any changes you make to the values file, make sure or

167
00:11:18,012 --> 00:11:21,174
any file in this repository when you check out,

168
00:11:21,212 --> 00:11:24,566
make sure you push the changes to git so

169
00:11:24,588 --> 00:11:28,166
that Argo can do its magic. So I'm

170
00:11:28,198 --> 00:11:31,626
going to copy this and I'm assuming you have all

171
00:11:31,728 --> 00:11:35,494
the command line tools and clients installed

172
00:11:35,622 --> 00:11:38,810
that's needed. I'm going to go ahead and.

173
00:11:38,960 --> 00:11:42,414
All right, while it's getting installed, let's log into

174
00:11:42,452 --> 00:11:46,906
the argo CD UI and see what's happening. Since we installed Argo,

175
00:11:47,018 --> 00:11:50,766
Argo generates a default password. You can change it,

176
00:11:50,868 --> 00:11:54,414
let's grab it and then let's run

177
00:11:54,452 --> 00:11:58,066
this command. I'm just basically port forwarding it

178
00:11:58,088 --> 00:12:01,266
so that we can access it in localhost. There is

179
00:12:01,288 --> 00:12:04,990
also a section on how to configure it so that you can access

180
00:12:05,080 --> 00:12:08,406
Argo CdyR domain. Feel free to check that out

181
00:12:08,428 --> 00:12:12,354
as well. Open Argo here's

182
00:12:12,402 --> 00:12:15,666
your Argo UI.

183
00:12:15,778 --> 00:12:19,366
The default username is admin and

184
00:12:19,468 --> 00:12:22,930
we just generated got the password from the command.

185
00:12:23,090 --> 00:12:27,466
So this is the Argo UI. And here if you see you

186
00:12:27,488 --> 00:12:30,686
have the parent bootstrap project. So I'm clicking this and

187
00:12:30,708 --> 00:12:34,286
then the bootstrap project goes ahead and installs an

188
00:12:34,308 --> 00:12:38,666
application called Bootstrap Resources, which is going to be your ingress resource,

189
00:12:38,778 --> 00:12:42,298
your certificates, and you have your cert manager,

190
00:12:42,474 --> 00:12:45,774
it's installed. You have your metrics server, you have

191
00:12:45,812 --> 00:12:50,030
traffic as your ingress controller, and you have trivia operator

192
00:12:50,190 --> 00:12:53,586
as your runtime security operator. So you can see that the

193
00:12:53,608 --> 00:12:56,498
sync is okay, everything seems healthy.

194
00:12:56,674 --> 00:13:00,614
And all these components are

195
00:13:00,652 --> 00:13:04,466
now installed, which means if we head back to the git

196
00:13:04,498 --> 00:13:08,274
repository, right, let's head back to the bootstrapper

197
00:13:08,322 --> 00:13:08,920
project.

198
00:13:11,290 --> 00:13:14,982
All these apps here as you see, cert manager

199
00:13:15,126 --> 00:13:18,758
traffic, let's encrypt and your trivia

200
00:13:18,774 --> 00:13:23,280
runtime security app. All that's remaining now is

201
00:13:24,130 --> 00:13:27,070
to install our observability stack.

202
00:13:27,490 --> 00:13:31,610
So hope everything is clear. Up till now infrastructure

203
00:13:31,690 --> 00:13:34,766
automation done through terraform and then the bootstrapping

204
00:13:34,798 --> 00:13:37,170
process was done via CD.

205
00:13:37,670 --> 00:13:41,234
Now we're going to install our observability stack into

206
00:13:41,272 --> 00:13:45,274
Kubernetes. And now let's head to our observability stack setup

207
00:13:45,342 --> 00:13:49,750
using robusta robusta is an open source Kubernetes monitoring

208
00:13:50,170 --> 00:13:54,242
automation platform and it comes pre baked with Prometheus

209
00:13:54,306 --> 00:13:57,630
stack. You also have Grafana dashboards

210
00:13:57,730 --> 00:14:01,270
and it also has seamless integration with slack.

211
00:14:01,350 --> 00:14:04,454
So if anything goes wrong in your Kubernetes cluster,

212
00:14:04,502 --> 00:14:07,754
you get slack notifications. A huge shout out

213
00:14:07,792 --> 00:14:11,990
to these folks at Robusta. You need to set

214
00:14:12,080 --> 00:14:15,726
some things up in order to access the platform.

215
00:14:15,828 --> 00:14:17,760
Let's go ahead and do that.

216
00:14:19,330 --> 00:14:22,446
I'm going to head back to vs code and then we're going to do it

217
00:14:22,468 --> 00:14:26,054
from there. We're going to observe multistag

218
00:14:26,122 --> 00:14:26,930
readme.

219
00:14:30,070 --> 00:14:34,334
Right? Let's open a new session.

220
00:14:34,462 --> 00:14:37,906
You need to generate a configuration file once you've

221
00:14:37,938 --> 00:14:41,526
installed the robusta client. It's as simple as

222
00:14:41,628 --> 00:14:45,302
just type in robusta gen config and it takes you

223
00:14:45,356 --> 00:14:47,670
through an interactive session.

224
00:14:48,270 --> 00:14:49,740
So let's do that.

225
00:14:52,520 --> 00:14:55,060
Let's say yes to slack integration.

226
00:14:56,360 --> 00:14:57,700
Add to slack,

227
00:15:01,100 --> 00:15:04,970
you can configure your slack channels. I'm going to give allow

228
00:15:05,820 --> 00:15:08,856
and let's head back to our terminal. As it

229
00:15:08,878 --> 00:15:17,470
says, let's do observability no

230
00:15:19,520 --> 00:15:23,068
yes, asking me whether I want

231
00:15:23,074 --> 00:15:26,492
to install the cube prompt stack and I'm going to go ahead and say

232
00:15:26,546 --> 00:15:30,396
yes here. So now that's done, let's copy

233
00:15:30,508 --> 00:15:34,364
commands and update it. As you can see, it's now generated

234
00:15:34,492 --> 00:15:37,868
files called generated underscore values Yaml. So we're

235
00:15:37,884 --> 00:15:40,800
going to use that to install robusta.

236
00:15:40,880 --> 00:15:44,372
So let's do set cluster name

237
00:15:44,426 --> 00:15:50,772
equal to our cluster name. And while

238
00:15:50,826 --> 00:15:54,632
it's installing, let's head to our

239
00:15:54,686 --> 00:15:57,610
canines and see what's going on there.

240
00:15:59,340 --> 00:16:01,530
Okay, there are pods running.

241
00:16:03,180 --> 00:16:07,180
You have like cert manager and all other components installed.

242
00:16:07,600 --> 00:16:11,230
You have traffic, you have the trivia operator running,

243
00:16:12,320 --> 00:16:15,772
and if you check the charts it might take a while

244
00:16:15,826 --> 00:16:19,896
to so Argo CD chart has been installed

245
00:16:20,088 --> 00:16:23,852
and once I think robust has successfully installed,

246
00:16:23,996 --> 00:16:27,376
we'll see that in a minute. All right,

247
00:16:27,558 --> 00:16:31,204
as you can see, now that robusta is going

248
00:16:31,242 --> 00:16:34,816
ahead and installing Grafana, the Kuberom

249
00:16:34,848 --> 00:16:38,548
stack, Kuberom operator. So everything is being installed in

250
00:16:38,554 --> 00:16:41,944
the background. Once it's successfully installed, we'll be

251
00:16:41,982 --> 00:16:45,652
able to log in to a web UI

252
00:16:45,716 --> 00:16:49,220
where we can access the metrics of our Kubernetes

253
00:16:49,300 --> 00:16:53,000
cluster. So let's wait for that. Looks like

254
00:16:53,070 --> 00:16:56,540
robusta helm chart has been successfully deployed.

255
00:16:57,840 --> 00:17:01,836
We should be able to head to.

256
00:17:01,938 --> 00:17:05,820
So you have all our services here

257
00:17:05,970 --> 00:17:09,536
and we could monitor them. This is pretty neat. I'll leave it

258
00:17:09,558 --> 00:17:13,232
to you folks to explore robusta. So what's now

259
00:17:13,286 --> 00:17:17,196
happened is we have set up the observability stack onto

260
00:17:17,228 --> 00:17:21,030
our Kubernetes cluster. So this is the third step in our process.

261
00:17:21,480 --> 00:17:25,124
We also have the Grafana dashboards that can be

262
00:17:25,162 --> 00:17:28,788
accessed pretty much. So if I go into services,

263
00:17:28,954 --> 00:17:33,256
right, and should have let

264
00:17:33,278 --> 00:17:36,808
me expose it and access it now,

265
00:17:36,894 --> 00:17:40,280
Fana, that would be default? Would be, I think,

266
00:17:40,350 --> 00:17:43,210
admin and. Awesome.

267
00:17:44,080 --> 00:17:47,276
So you have some dashboard. So let's just click one of

268
00:17:47,298 --> 00:17:50,460
them. Look into August CD default.

269
00:17:53,520 --> 00:17:57,184
Yeah. Cool. So if we

270
00:17:57,222 --> 00:17:59,330
head back to our project,

271
00:18:00,740 --> 00:18:04,236
right? Yeah, I have my observability slack

272
00:18:04,268 --> 00:18:07,724
channel here. Yes. So it's

273
00:18:07,772 --> 00:18:11,424
configured. So if there's some warning or alerts,

274
00:18:11,472 --> 00:18:14,788
I'll receive the message here in

275
00:18:14,794 --> 00:18:18,310
this slack channel. Pretty neat. Let's head back

276
00:18:18,840 --> 00:18:20,070
to our project.

277
00:18:21,980 --> 00:18:25,336
Okay, so as you can see, we've done

278
00:18:25,438 --> 00:18:29,012
the infrastructure automation, we've done the bootstrapping using Argo,

279
00:18:29,076 --> 00:18:33,080
and we've set up the observability stack using robusta.

280
00:18:33,520 --> 00:18:37,436
This is the end state of our architecture, so you

281
00:18:37,458 --> 00:18:41,352
can see how it's really simple and straightforward

282
00:18:41,416 --> 00:18:44,764
to set up such can infrastructure, along with

283
00:18:44,802 --> 00:18:48,792
all the applications and configurations neatly packaged.

284
00:18:48,856 --> 00:18:52,352
So try out the bootstrapper, let us know what you think. If you have any

285
00:18:52,406 --> 00:18:55,596
questions, feel free to reach out to me on socials.

286
00:18:55,628 --> 00:18:58,656
I'm Diab and yeah, thanks. I hope

287
00:18:58,678 --> 00:19:02,524
you enjoyed it and we look forward to hearing your feedback.

288
00:19:02,572 --> 00:19:05,584
Do try it out. Give us a star, check it out.

289
00:19:05,702 --> 00:19:09,500
If you have some suggestions on adding different apps

290
00:19:09,580 --> 00:19:13,016
to it, let us know know. Thank you

291
00:19:13,038 --> 00:19:13,350
very much.

