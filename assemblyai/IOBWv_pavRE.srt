1
00:00:23,110 --> 00:00:26,474
Hi all, and thanks for being here. Half an hour is

2
00:00:26,512 --> 00:00:29,426
very little time, so let's dive into the talk.

3
00:00:29,528 --> 00:00:32,638
I'm Francesco and we will take a quick ride

4
00:00:32,734 --> 00:00:36,014
through the tool we use the most, our trusty

5
00:00:36,062 --> 00:00:39,586
browser. It helps everyone surf the web,

6
00:00:39,688 --> 00:00:43,542
but more importantly, it allows everyone to

7
00:00:43,596 --> 00:00:47,346
serve through our artistic creation.

8
00:00:47,538 --> 00:00:51,654
Well, but first, let's do a virtual show

9
00:00:51,692 --> 00:00:55,082
of fans. We are not in person, I know,

10
00:00:55,136 --> 00:00:59,130
but this will do. I bet if I ask it

11
00:00:59,280 --> 00:01:03,034
all of you right now, how many times have

12
00:01:03,072 --> 00:01:06,558
you gotten frustrated with your browser not

13
00:01:06,644 --> 00:01:10,542
responding? Or how often have you seen or

14
00:01:10,596 --> 00:01:14,014
closed the page with laggy animations or

15
00:01:14,052 --> 00:01:17,902
a bad user experience? Well, I can

16
00:01:17,956 --> 00:01:21,922
picture an infinite number of age dance at this

17
00:01:21,976 --> 00:01:25,970
moment. Well, it's time to understand why our

18
00:01:26,040 --> 00:01:29,346
dear beloved browsers sometimes act

19
00:01:29,448 --> 00:01:33,174
like this. Well, but what

20
00:01:33,212 --> 00:01:36,470
is a browser, you ask? Everyone uses it,

21
00:01:36,540 --> 00:01:40,520
but you really know it really works.

22
00:01:40,890 --> 00:01:44,234
So let's start by learning how it works and

23
00:01:44,272 --> 00:01:46,250
what challenges it faces.

24
00:01:46,830 --> 00:01:50,554
Okay. If we try to simplify things,

25
00:01:50,752 --> 00:01:54,122
it's an application that requests data from

26
00:01:54,176 --> 00:01:57,498
the web servers, sends a network

27
00:01:57,594 --> 00:02:01,454
request to the URL, retrieve resources and

28
00:02:01,492 --> 00:02:05,486
present them interactively. Sounds simple,

29
00:02:05,588 --> 00:02:09,406
right? Well, in reality there's

30
00:02:09,598 --> 00:02:13,314
nothing simple about it and it's one of

31
00:02:13,352 --> 00:02:17,246
the most complex processes you can imagine.

32
00:02:17,438 --> 00:02:20,958
Browsers are the most widely used

33
00:02:21,064 --> 00:02:25,160
software ready to run any kind of application.

34
00:02:25,850 --> 00:02:28,920
Everything today is web based.

35
00:02:29,370 --> 00:02:33,234
They helped us navigate for decades

36
00:02:33,362 --> 00:02:37,130
and they're build with millions of line

37
00:02:37,200 --> 00:02:40,954
of c plus plus code and a bunch of other

38
00:02:40,992 --> 00:02:44,026
hardcore starts. They need

39
00:02:44,208 --> 00:02:48,218
also to adapt to the ever growing demands

40
00:02:48,314 --> 00:02:50,622
of users. Trust me,

41
00:02:50,756 --> 00:02:54,686
they're a concentrated mix of technology

42
00:02:54,788 --> 00:02:58,834
and algorithms that makes the bad mobile looks

43
00:02:58,872 --> 00:03:03,314
like a regular car. And trust me, you should know

44
00:03:03,432 --> 00:03:06,660
that I'm Batman enthusiast. Well,

45
00:03:07,350 --> 00:03:11,478
okay. But those

46
00:03:11,564 --> 00:03:14,870
who write browsers have a little

47
00:03:14,940 --> 00:03:18,694
has to manage. Users love to

48
00:03:18,732 --> 00:03:21,926
see pixels on their screen has quickly as

49
00:03:21,948 --> 00:03:25,660
possible making a web application fast.

50
00:03:26,270 --> 00:03:29,340
Okay, you might be thinking,

51
00:03:30,350 --> 00:03:34,250
why should I care? I'm not a browser code developer,

52
00:03:35,310 --> 00:03:38,154
right? Oh, a little disclaimer.

53
00:03:38,282 --> 00:03:40,878
If you are from the Kramer team,

54
00:03:41,044 --> 00:03:44,382
please be merciful. Okay, thank you.

55
00:03:44,516 --> 00:03:48,486
Okay. Has fence quad goes. As web developers

56
00:03:48,618 --> 00:03:51,874
we must understand some of the mechanics of

57
00:03:51,912 --> 00:03:55,662
browsers so we can make better decision

58
00:03:55,806 --> 00:04:00,446
and grasp some things that sometimes seem absurd.

59
00:04:00,638 --> 00:04:04,958
Actually it's not Femiscott, it's mine Chicho

60
00:04:04,974 --> 00:04:08,630
from Valdemon, a national name of

61
00:04:08,780 --> 00:04:12,422
place in Sicily. But I

62
00:04:12,476 --> 00:04:16,038
hope that it will be very famous quote

63
00:04:16,134 --> 00:04:20,806
and you can help me. Okay, we have confirmed

64
00:04:20,918 --> 00:04:24,662
that it's complex stuff, but worth knowing

65
00:04:24,726 --> 00:04:28,094
about. So let's dive into how it's built

66
00:04:28,212 --> 00:04:31,710
and look a bit inside the architecture.

67
00:04:32,130 --> 00:04:36,618
Well, currently there are no standard specification

68
00:04:36,714 --> 00:04:40,226
for browsers and approaches could

69
00:04:40,328 --> 00:04:44,338
change from other to another, from one to another.

70
00:04:44,504 --> 00:04:48,334
Well, however, today a multiprocess

71
00:04:48,382 --> 00:04:52,310
architecture is commonly used where

72
00:04:52,460 --> 00:04:56,406
each process handles specific task or

73
00:04:56,428 --> 00:04:59,974
logic. Moreover, these processes have

74
00:05:00,172 --> 00:05:04,426
a main thread and dedicated thread for more specific

75
00:05:04,528 --> 00:05:08,842
tasks to manage more specific tasks. To get

76
00:05:08,976 --> 00:05:12,442
a clearer understanding of the concept of

77
00:05:12,496 --> 00:05:16,430
processes and threads, we can define them very

78
00:05:16,500 --> 00:05:20,366
high level as follow a process

79
00:05:20,468 --> 00:05:23,802
is a running program that includes the executable

80
00:05:23,866 --> 00:05:27,498
code, data, program state and other elements

81
00:05:27,594 --> 00:05:31,826
required for the execution. Each process has its

82
00:05:32,008 --> 00:05:35,922
own address space and is managed by

83
00:05:36,056 --> 00:05:40,206
the operating system Lida, an independent

84
00:05:40,318 --> 00:05:44,102
entity. A thread is a single unit of

85
00:05:44,156 --> 00:05:47,654
execution within a process. A process can

86
00:05:47,692 --> 00:05:51,686
contain one or more threads which share the same memory space

87
00:05:51,788 --> 00:05:55,398
and resources of the parent

88
00:05:55,484 --> 00:05:59,030
process. Well, since browsers use

89
00:05:59,180 --> 00:06:03,094
multiprocess architectures, processes must communicate

90
00:06:03,142 --> 00:06:08,630
with each other. So using the interfaces

91
00:06:08,710 --> 00:06:12,206
communication APC the APC is a set

92
00:06:12,228 --> 00:06:16,650
of mechanisms and techniques such as pipes,

93
00:06:16,730 --> 00:06:20,014
socket, shared memory and blah blah blah, that enables

94
00:06:20,062 --> 00:06:23,582
separate processes on operating system to exchange

95
00:06:23,726 --> 00:06:27,074
data and communicate between them. IPC is

96
00:06:27,112 --> 00:06:30,834
essential when coordination and sharing of information are

97
00:06:30,872 --> 00:06:33,910
needed between separate processes,

98
00:06:34,250 --> 00:06:37,814
such in a multitasking system

99
00:06:37,932 --> 00:06:40,870
or a distributed application, for example.

100
00:06:41,020 --> 00:06:44,106
Well, a browser is a

101
00:06:44,128 --> 00:06:47,866
multiprocess application and these processes manage

102
00:06:48,048 --> 00:06:50,860
to communicate with each other.

103
00:06:51,790 --> 00:06:55,802
Well, but what exactly are these

104
00:06:55,856 --> 00:06:59,470
processes and how do they collaborate?

105
00:07:00,850 --> 00:07:04,442
Whoa. Don't be scared. It seemed complex

106
00:07:04,586 --> 00:07:08,446
and indeed it is, as we can

107
00:07:08,468 --> 00:07:12,702
see in this wonderful, beautiful low zone diagram made

108
00:07:12,756 --> 00:07:16,562
by myself, our brother, is divided into

109
00:07:16,696 --> 00:07:20,500
various processes. Okay, the first one,

110
00:07:21,050 --> 00:07:24,630
main or browser process, is the browser's

111
00:07:24,970 --> 00:07:29,106
primary process, responsible for managing the user interface,

112
00:07:29,218 --> 00:07:32,326
address bar, menus, tabs and so on. As well

113
00:07:32,348 --> 00:07:35,690
as coordinating interaction between others

114
00:07:35,760 --> 00:07:39,594
processes. It also handles the creation and

115
00:07:39,632 --> 00:07:43,402
termination of tab rendering processes. Okay,

116
00:07:43,536 --> 00:07:46,974
one moment. Well then we have

117
00:07:47,012 --> 00:07:50,798
the rendering processes. Each open tab in

118
00:07:50,804 --> 00:07:54,202
the browser is associated with a separate rendering

119
00:07:54,266 --> 00:07:57,518
process. This process renders web page,

120
00:07:57,684 --> 00:08:01,198
process, HTML, execute javascript, and interfaces

121
00:08:01,294 --> 00:08:05,250
with the dome. Each tab has dedicated process and sometimes

122
00:08:05,400 --> 00:08:09,394
different contexts, like an iframe for

123
00:08:09,432 --> 00:08:13,400
example. You can think

124
00:08:14,810 --> 00:08:18,390
that each tab having its own

125
00:08:18,460 --> 00:08:23,080
rendering process right now is good enough to understand.

126
00:08:23,630 --> 00:08:27,446
It's not perfect like a concept, but it's

127
00:08:27,478 --> 00:08:31,322
good enough. Well, the network process manages all

128
00:08:31,376 --> 00:08:35,062
network requests, including resource

129
00:08:35,126 --> 00:08:39,402
download like image, style sheet and so on. It isolates network

130
00:08:39,466 --> 00:08:43,630
operation to ensure security issues or crashes,

131
00:08:43,970 --> 00:08:47,582
so don't impact the entire browser experience.

132
00:08:47,716 --> 00:08:50,866
It's basically responsible for communicating with

133
00:08:50,888 --> 00:08:54,626
the network with the Internet. The GPU process

134
00:08:54,728 --> 00:08:59,140
handles hardware acceleration for rendering pages and works

135
00:08:59,830 --> 00:09:03,666
closely. Yes, closely with the rendering processes.

136
00:09:03,778 --> 00:09:07,522
It provides better graphic

137
00:09:07,586 --> 00:09:11,234
performance by separating graphic work from tab

138
00:09:11,282 --> 00:09:14,378
and user interface management. There are also

139
00:09:14,464 --> 00:09:16,950
others processes like storage,

140
00:09:17,030 --> 00:09:20,214
extension and various minor processes,

141
00:09:20,262 --> 00:09:23,482
but it's not important for our session. Okay,

142
00:09:23,616 --> 00:09:27,210
as you can see, each process has a priority

143
00:09:27,370 --> 00:09:31,662
showing how important a process is to the operating system.

144
00:09:31,796 --> 00:09:35,054
DOS balances process priorities to

145
00:09:35,172 --> 00:09:38,838
ensure efficient use of system resources

146
00:09:38,954 --> 00:09:42,450
and a responsive experience for our application.

147
00:09:42,600 --> 00:09:44,740
Okay, it's important.

148
00:09:45,350 --> 00:09:50,350
Well, like everything else, multiprocessor architecture

149
00:09:50,510 --> 00:09:53,540
has its pros and cons.

150
00:09:56,490 --> 00:10:00,022
Talking about pros, sandboxing is like

151
00:10:00,076 --> 00:10:03,170
a security bubble that isolates processes

152
00:10:03,250 --> 00:10:06,634
and underlaying the operating system.

153
00:10:06,752 --> 00:10:10,806
So if one process gets hit by malware,

154
00:10:10,918 --> 00:10:13,638
for example, the image is contained.

155
00:10:13,734 --> 00:10:17,254
So that process without messing

156
00:10:17,302 --> 00:10:20,702
up the world browser operating system is a very

157
00:10:20,756 --> 00:10:24,030
important thing. Blackship detection nice

158
00:10:24,100 --> 00:10:28,522
name. Consider this a way to spot processes

159
00:10:28,586 --> 00:10:31,986
that are consuming too much resources like cpu or

160
00:10:32,008 --> 00:10:35,682
memory or ones that might be blocked, for example.

161
00:10:35,816 --> 00:10:39,330
This feature helps prevent a single

162
00:10:39,400 --> 00:10:42,786
tab or process from destroying your browsing.

163
00:10:42,818 --> 00:10:45,974
Experience optimal memory fruit in another one.

164
00:10:46,092 --> 00:10:50,546
This is about ensuring your browser uses memory

165
00:10:50,658 --> 00:10:54,478
wisely. Nobody likes a memory hog.

166
00:10:54,594 --> 00:10:58,410
Okay? Privacy data this feature can ensure

167
00:10:58,830 --> 00:11:01,450
sensitive stuff like cookies,

168
00:11:01,790 --> 00:11:05,862
private browser data and so on are handled securely

169
00:11:05,926 --> 00:11:09,738
and privately. And the last one set isolation

170
00:11:09,834 --> 00:11:13,242
that ensures web pages

171
00:11:13,306 --> 00:11:17,450
from different sites load in separate

172
00:11:17,530 --> 00:11:19,840
processes for the same reason.

173
00:11:20,690 --> 00:11:24,414
But there are some counts. It's normal.

174
00:11:24,542 --> 00:11:28,434
We have got to deal with extra memory usage, for example,

175
00:11:28,552 --> 00:11:32,738
creating lots of processes and a lot of chitchat

176
00:11:32,834 --> 00:11:35,640
between them using ABC. Okay,

177
00:11:36,170 --> 00:11:40,002
well we understand what happens when we browse

178
00:11:40,066 --> 00:11:42,120
then. Okay, well,

179
00:11:42,970 --> 00:11:46,954
when we enter a URL or a search query in our address bar,

180
00:11:47,072 --> 00:11:51,690
the input is evaluated by the browser process and

181
00:11:51,760 --> 00:11:55,834
the end navigation begins. The browser process

182
00:11:55,952 --> 00:11:59,486
communicates with the network trader process

183
00:11:59,668 --> 00:12:03,278
to execute the request and then

184
00:12:03,444 --> 00:12:07,470
manage the response handle the response.

185
00:12:07,890 --> 00:12:11,834
At this point, a render process is activated by the browser

186
00:12:11,882 --> 00:12:15,950
process and navigation is taken over by the render

187
00:12:16,030 --> 00:12:20,174
process. Finally, the document loading phase begins,

188
00:12:20,302 --> 00:12:24,050
maintaining the dialogue between the render

189
00:12:24,130 --> 00:12:25,990
and browser processes.

190
00:12:27,450 --> 00:12:30,694
It's very weird, but it's true.

191
00:12:30,812 --> 00:12:34,650
So the user types in the address bar.

192
00:12:34,720 --> 00:12:38,106
The browser process asks the network process to

193
00:12:38,128 --> 00:12:40,790
go fetch the information of the Internet.

194
00:12:40,950 --> 00:12:44,298
Once it is received, the browser process

195
00:12:44,384 --> 00:12:47,854
instantiates or look for the best is

196
00:12:47,892 --> 00:12:51,550
another concept render process which

197
00:12:51,620 --> 00:12:55,866
communicates with the browser process and TaDA.

198
00:12:55,978 --> 00:12:59,446
The page is served. So it's not magic,

199
00:12:59,578 --> 00:13:03,700
but what happens inside the rendering process.

200
00:13:04,150 --> 00:13:07,966
Well, let's try to understand it together. The rendering

201
00:13:07,998 --> 00:13:11,830
process taken care of by the trusty render process

202
00:13:11,980 --> 00:13:15,330
is certainly the most intricate and exciting

203
00:13:15,410 --> 00:13:19,254
part, and it's where we encounter the

204
00:13:19,292 --> 00:13:22,454
much clearer critical rendering part.

205
00:13:22,652 --> 00:13:26,886
Great concept, but what exactly does it entail?

206
00:13:26,998 --> 00:13:30,234
What does each rendering process need

207
00:13:30,272 --> 00:13:33,420
to do to render the requested page?

208
00:13:34,030 --> 00:13:38,142
Well, here is the

209
00:13:38,276 --> 00:13:42,302
entire journey that the rendering process has

210
00:13:42,356 --> 00:13:47,610
to do to render a single frame fira,

211
00:13:47,770 --> 00:13:50,942
a very common gesture in Italy. You know,

212
00:13:50,996 --> 00:13:54,430
Italians are known for the expressive gestures,

213
00:13:54,510 --> 00:13:58,334
and I'm sicilian, the best one for the expressive

214
00:13:58,382 --> 00:14:01,060
gestures, trust me. Okay,

215
00:14:01,370 --> 00:14:04,614
let's remove the expression of terror from our

216
00:14:04,652 --> 00:14:08,600
faces and take a look at the main phases of the rendering process.

217
00:14:10,010 --> 00:14:13,910
Tense is a considerable part to the main thread,

218
00:14:14,510 --> 00:14:17,962
which we'll discuss later. The rendering process needs

219
00:14:18,016 --> 00:14:20,694
to handle parsing, style, calculation,

220
00:14:20,822 --> 00:14:24,294
layout, painting and composing.

221
00:14:24,422 --> 00:14:26,986
Okay, hand composing.

222
00:14:27,178 --> 00:14:30,414
Let's go through them one by one. Well,

223
00:14:30,612 --> 00:14:34,554
when we send over the Internet, data travels

224
00:14:34,602 --> 00:14:38,110
as packets, and when retrieved by the network process,

225
00:14:38,180 --> 00:14:41,250
the data is nothing more than row bytes.

226
00:14:41,830 --> 00:14:46,126
The first thing we receive is the HTML

227
00:14:46,318 --> 00:14:49,982
also received a simple bytes. What's necessary

228
00:14:50,046 --> 00:14:53,858
is to execute a parsing phase that follows

229
00:14:54,034 --> 00:14:57,442
a well defined process. It transformed bytes

230
00:14:57,506 --> 00:15:01,206
into a sequence of character that are then

231
00:15:01,308 --> 00:15:05,478
tokenized. Tokenization means converting

232
00:15:05,654 --> 00:15:08,890
them into a sequence of tokens.

233
00:15:09,230 --> 00:15:12,902
A tokens is a piece of text representing

234
00:15:12,966 --> 00:15:17,038
an HTML element, an attribute text, or other content

235
00:15:17,124 --> 00:15:21,162
within the HTML document. For example, a tag

236
00:15:21,306 --> 00:15:25,070
like opening div tag becomes

237
00:15:25,570 --> 00:15:29,870
an open token, while closing

238
00:15:29,950 --> 00:15:33,422
div tags becomes a closing token,

239
00:15:33,566 --> 00:15:36,398
as you can see in these images,

240
00:15:36,574 --> 00:15:40,890
by doing these, what were once bytes become analyzable.

241
00:15:40,990 --> 00:15:44,454
Structure and the tokens are analyzed by

242
00:15:44,572 --> 00:15:48,966
Alexer, Alex analyzer to understand the

243
00:15:49,068 --> 00:15:53,302
language, to identify their type and

244
00:15:53,356 --> 00:15:57,498
relative information, such as the tag name or attribute value

245
00:15:57,584 --> 00:16:01,370
or so on. The lexer

246
00:16:03,390 --> 00:16:07,130
breaks down the tokens, the token

247
00:16:07,210 --> 00:16:10,266
stream and recognize their structure.

248
00:16:10,378 --> 00:16:14,398
So the browser can finally create

249
00:16:14,484 --> 00:16:18,590
nodes and dom using these tokens and

250
00:16:18,660 --> 00:16:22,250
information extracted during tokenization

251
00:16:22,410 --> 00:16:26,510
and relaxer works. Finally, the DOM

252
00:16:26,590 --> 00:16:30,050
is like a tree like

253
00:16:30,120 --> 00:16:33,494
representation of the page's structure, and each

254
00:16:33,532 --> 00:16:37,554
node represents an element in the HTML document

255
00:16:37,602 --> 00:16:41,560
and contains information about the relationship

256
00:16:41,930 --> 00:16:45,786
between elements. But we should read it

257
00:16:45,808 --> 00:16:49,580
now this, and I'm sure you know this well.

258
00:16:50,030 --> 00:16:53,610
After creating the DOM, the browser builds another

259
00:16:53,760 --> 00:16:58,906
free knows as CSSOM.

260
00:16:59,098 --> 00:17:02,798
The CSSOM, a very difficult

261
00:17:02,884 --> 00:17:06,080
name for an italian guy like me,

262
00:17:06,850 --> 00:17:10,846
represents all CSS rules declared in the document,

263
00:17:10,958 --> 00:17:15,250
including selectors, style declaration and their specificity.

264
00:17:15,990 --> 00:17:19,074
It uses similar

265
00:17:19,192 --> 00:17:21,330
parsing techniques,

266
00:17:22,330 --> 00:17:25,730
not the same, but similar for the CSS

267
00:17:25,810 --> 00:17:29,094
files and retrieve information found in

268
00:17:29,132 --> 00:17:33,490
line during parsing. In fact, references to

269
00:17:33,580 --> 00:17:36,934
CSS style sheets are identified and the rendering

270
00:17:36,982 --> 00:17:40,950
process, or better, the main thread, fetches the relative

271
00:17:41,110 --> 00:17:45,142
CSS files or extract styles directly

272
00:17:45,286 --> 00:17:48,718
from the HTML documenting line. Okay,

273
00:17:48,884 --> 00:17:53,680
well, CSS style sheets are parsed and

274
00:17:55,090 --> 00:17:58,822
we get the CSSOR.

275
00:17:58,986 --> 00:18:02,434
Well, this phase and another phase is

276
00:18:02,472 --> 00:18:05,780
completed and the process is ready to create

277
00:18:06,230 --> 00:18:11,182
the layout or render tree once

278
00:18:11,256 --> 00:18:14,294
the DOM and CsS Som are created. In fact,

279
00:18:14,412 --> 00:18:17,874
the main thread traverses through the DoM and styles

280
00:18:18,002 --> 00:18:21,506
making the layout or render tree.

281
00:18:21,618 --> 00:18:25,174
This tree contains the information such

282
00:18:25,212 --> 00:18:28,262
as the coordinates and dimensions of

283
00:18:28,316 --> 00:18:32,518
elements. These structures represent

284
00:18:32,694 --> 00:18:36,800
the visible elements on the web page and their relationship.

285
00:18:37,650 --> 00:18:41,694
Non visible element will not be included in this

286
00:18:41,812 --> 00:18:45,566
tree in the render tree. Okay, the layout process

287
00:18:45,748 --> 00:18:49,182
is quite resource intensive for the browser

288
00:18:49,246 --> 00:18:53,522
because it has to compute the exact position and

289
00:18:53,576 --> 00:18:57,266
size of every element on the page.

290
00:18:57,448 --> 00:19:00,926
Every element on the page, the exact position

291
00:19:01,048 --> 00:19:05,122
and size. Well, this is a slide I'm

292
00:19:05,186 --> 00:19:08,706
very proud of. Quite a notable quote.

293
00:19:08,818 --> 00:19:12,146
I hope you catch the quote

294
00:19:12,258 --> 00:19:15,670
and it's animated too. I'm expecting a virtual

295
00:19:15,750 --> 00:19:20,086
and great applause. Okay, the dome and CSS

296
00:19:20,198 --> 00:19:23,050
on fusion. Whoa.

297
00:19:23,390 --> 00:19:27,550
Well, he obtains not a super

298
00:19:27,620 --> 00:19:30,730
science, but the most powerful layout tree.

299
00:19:30,810 --> 00:19:33,658
Well, during the layout phase,

300
00:19:33,754 --> 00:19:37,502
the browser calculates the size and position of

301
00:19:37,556 --> 00:19:42,334
element in the box tree. This process is known has reflow

302
00:19:42,382 --> 00:19:46,020
elements are positionated based on

303
00:19:46,790 --> 00:19:51,066
their type, dimension of their content, and the computed styles

304
00:19:51,118 --> 00:19:54,662
values on the x and y

305
00:19:54,716 --> 00:19:58,834
axis two dimension axis. This has considers

306
00:19:58,882 --> 00:20:02,066
factors such as viewport dimensions,

307
00:20:02,258 --> 00:20:06,054
browser windows resizing, and other variables

308
00:20:06,102 --> 00:20:09,660
that can affect the position of the element. Okay,

309
00:20:10,030 --> 00:20:14,138
I hope this video help you.

310
00:20:14,304 --> 00:20:18,446
The video is clear enough, but watching it

311
00:20:18,548 --> 00:20:21,902
give a good sense of how much work is

312
00:20:21,956 --> 00:20:25,342
required to position element by element on the page.

313
00:20:25,476 --> 00:20:30,238
It's a great work and very hard

314
00:20:30,324 --> 00:20:32,100
work. Okay, well,

315
00:20:34,230 --> 00:20:37,730
once we have positioned the element on the

316
00:20:37,800 --> 00:20:40,958
x and y axis, a new face come into play,

317
00:20:41,064 --> 00:20:45,314
the paint phase. However, to be able to draw every pixel

318
00:20:45,362 --> 00:20:49,174
on the page, it's also necessary to know how the

319
00:20:49,212 --> 00:20:53,042
elements are arranged on z axis.

320
00:20:53,186 --> 00:20:56,586
So what's in front and what's behind.

321
00:20:56,768 --> 00:21:00,762
Okay, the painting has is the process in which the

322
00:21:00,816 --> 00:21:04,746
browser draw pixel on the user device screen

323
00:21:04,928 --> 00:21:08,318
based on the calculated layout and web page

324
00:21:08,404 --> 00:21:12,778
content. During this phase, the layout tree is traversed

325
00:21:12,874 --> 00:21:17,178
to build a queue, a queue of paint records

326
00:21:17,274 --> 00:21:21,146
which helps detect pixel colors, drawing orders

327
00:21:21,178 --> 00:21:24,002
of element and their overlapping. Okay,

328
00:21:24,136 --> 00:21:27,730
the content is divided in two layers

329
00:21:28,550 --> 00:21:32,514
traversing the layer tree, and it is useful

330
00:21:32,562 --> 00:21:35,190
to generate the layer tree.

331
00:21:35,530 --> 00:21:39,142
Okay, the compositing phase is

332
00:21:39,196 --> 00:21:42,818
the next step after the painting phase.

333
00:21:42,914 --> 00:21:46,538
It's a very important phase. During this,

334
00:21:46,624 --> 00:21:51,318
the browser combines the previously prepared layers

335
00:21:51,494 --> 00:21:55,494
into a single compositing mage

336
00:21:55,622 --> 00:21:59,582
that represent the final visual appearance of

337
00:21:59,636 --> 00:22:03,070
our web page. This phase,

338
00:22:03,890 --> 00:22:07,534
and it is very important, is handled by an

339
00:22:07,572 --> 00:22:11,582
independent thread called compositor thread,

340
00:22:11,726 --> 00:22:15,874
and some of the more resource intensive operations such

341
00:22:15,912 --> 00:22:20,190
as scrolling are managed by this thread.

342
00:22:20,350 --> 00:22:24,034
Before compositing begins, the content is divided

343
00:22:24,162 --> 00:22:27,954
into layers by traversing the layout tree

344
00:22:28,002 --> 00:22:31,442
to generate the layer tree, another structure,

345
00:22:31,506 --> 00:22:35,334
another tree. The information is then received by the compositor

346
00:22:35,382 --> 00:22:39,210
thread, which handles the rasterization of each

347
00:22:39,280 --> 00:22:43,434
layer by breaking them down into draw quotes and

348
00:22:43,472 --> 00:22:47,402
sending them to the raster thread. Draw quotes a portion

349
00:22:47,466 --> 00:22:51,920
of pages like quotes for

350
00:22:52,290 --> 00:22:55,866
our page. After the draw quotes

351
00:22:55,978 --> 00:22:59,682
are created, the compositor trait gators around

352
00:22:59,736 --> 00:23:02,974
the world the information to create a composite

353
00:23:03,022 --> 00:23:03,730
frame.

354
00:23:08,070 --> 00:23:11,954
It is like a

355
00:23:11,992 --> 00:23:15,170
collection of information and

356
00:23:15,320 --> 00:23:17,970
is then sent to the browser.

357
00:23:18,310 --> 00:23:22,242
The browser process, I'm sorry, via pc and

358
00:23:22,296 --> 00:23:25,462
then to the GP U for display

359
00:23:25,606 --> 00:23:29,370
for display to our display. Well,

360
00:23:29,520 --> 00:23:32,538
for example, if there is a scrolling event,

361
00:23:32,624 --> 00:23:36,322
the compositor trap creates another compositor frame

362
00:23:36,406 --> 00:23:39,360
to send it to the gpu. Okay,

363
00:23:39,890 --> 00:23:43,566
so we finally have our

364
00:23:43,668 --> 00:23:47,114
rendered frame. When a user

365
00:23:47,162 --> 00:23:51,810
gesture like a touch on the screen occurs,

366
00:23:53,430 --> 00:23:56,866
what we have to do okay, when a

367
00:23:56,888 --> 00:24:00,958
user gesture like attach, for example on a script on a

368
00:24:00,984 --> 00:24:04,054
screen, I'm sorry occurs, the browser process is

369
00:24:04,092 --> 00:24:07,782
the one that receives the gesture at first.

370
00:24:07,916 --> 00:24:11,942
However, the browser process only knows where

371
00:24:11,996 --> 00:24:15,466
that gesture occurred. Since the render process

372
00:24:15,648 --> 00:24:18,694
handles content inside a tab,

373
00:24:18,822 --> 00:24:22,540
so the web process sends the event type

374
00:24:23,150 --> 00:24:26,958
touch start, for example, and this coordinates to

375
00:24:27,044 --> 00:24:30,858
the render process. The render process handles

376
00:24:30,954 --> 00:24:34,462
the event appropriately by finding the target and

377
00:24:34,516 --> 00:24:37,546
running the attaching listener, the attached listener.

378
00:24:37,578 --> 00:24:43,362
Okay, this work is

379
00:24:43,416 --> 00:24:46,446
made by the compositor thread.

380
00:24:46,558 --> 00:24:50,034
The compositor thread marks a region on the page,

381
00:24:50,232 --> 00:24:54,200
one or more region or more regions on the page

382
00:24:55,290 --> 00:24:59,042
with the event handlers attached,

383
00:24:59,186 --> 00:25:03,282
and these regions are called non

384
00:25:03,346 --> 00:25:06,822
fast crawlable region. This information allow

385
00:25:06,876 --> 00:25:10,550
the competitor thread to send input

386
00:25:10,630 --> 00:25:15,942
events to the main thread to

387
00:25:16,016 --> 00:25:19,600
manage this event only if the event

388
00:25:19,970 --> 00:25:24,382
occurs in that region. If an input event come

389
00:25:24,516 --> 00:25:28,074
from outside this region, the compositor

390
00:25:28,122 --> 00:25:32,194
thread continues compositing a new frame without

391
00:25:32,392 --> 00:25:35,650
waiting for the main thread. And it is

392
00:25:35,720 --> 00:25:39,614
wonderful and sorry, there's indeed

393
00:25:39,662 --> 00:25:43,634
a lot to do and every step is critical.

394
00:25:43,762 --> 00:25:47,382
Critical the World Series of

395
00:25:47,436 --> 00:25:51,190
step is often called CRP

396
00:25:51,850 --> 00:25:56,090
critical rendering, but the entire

397
00:25:56,240 --> 00:26:00,102
process has to manage an aspect

398
00:26:00,246 --> 00:26:04,166
that makes it especially critical.

399
00:26:04,358 --> 00:26:08,282
It's crucial for the browser to render

400
00:26:08,426 --> 00:26:12,094
about 60 frames per second to

401
00:26:12,132 --> 00:26:15,710
ensure smooth animation. So the

402
00:26:15,780 --> 00:26:20,080
entire pipeline I saw I talk

403
00:26:20,850 --> 00:26:24,722
has approximately ten milliseconds to

404
00:26:24,776 --> 00:26:28,674
complete its task, and it is crazy or

405
00:26:28,792 --> 00:26:32,674
it's critical. Okay, if the browser fails

406
00:26:32,722 --> 00:26:35,682
to maintain this frame generation frequency,

407
00:26:35,826 --> 00:26:39,990
we'll see those infamous logs that

408
00:26:40,060 --> 00:26:43,702
are so detested by users we

409
00:26:43,756 --> 00:26:46,970
often refer to as junk

410
00:26:47,390 --> 00:26:50,874
in technical jargon. But we are

411
00:26:50,912 --> 00:26:53,866
sure no user wants a poor experience,

412
00:26:54,048 --> 00:26:57,550
so avoiding it is crucial.

413
00:26:58,290 --> 00:27:02,266
It's important to know that you can skip

414
00:27:02,458 --> 00:27:05,822
specific steps in the rendering process through

415
00:27:05,956 --> 00:27:09,758
some optimization. You can skip the layout phase

416
00:27:09,854 --> 00:27:13,854
when the dimension or positions aren't changed.

417
00:27:13,982 --> 00:27:17,858
For instance, if only color of the text

418
00:27:17,944 --> 00:27:21,974
changes, there's no need to redo this has or

419
00:27:22,092 --> 00:27:26,386
you can skip the painting phase. Use specific CSS

420
00:27:26,498 --> 00:27:31,000
rules like transform and opacity that works

421
00:27:32,810 --> 00:27:35,450
directly on the gpu.

422
00:27:36,270 --> 00:27:40,122
Skipping any of these phases will help

423
00:27:40,176 --> 00:27:44,410
the browser render the correct number of frames

424
00:27:44,830 --> 00:27:47,280
for asmooth experience.

425
00:27:47,730 --> 00:27:52,062
Okay, well, so we

426
00:27:52,116 --> 00:27:55,918
need clarification on a concept we should

427
00:27:56,004 --> 00:28:00,526
all be familiar with, but it's

428
00:28:00,558 --> 00:28:04,322
very important to clarify web

429
00:28:04,376 --> 00:28:08,094
application use the main thread to execute

430
00:28:08,222 --> 00:28:12,050
most application logic and user interface

431
00:28:12,210 --> 00:28:15,926
tasks. We are really familiar with the concept of

432
00:28:15,948 --> 00:28:20,210
the event loop, I'm sure. However, it's crucial

433
00:28:20,290 --> 00:28:24,442
to understand that it lives within the main thread and

434
00:28:24,496 --> 00:28:28,342
its behavior also help us in the rendering

435
00:28:28,406 --> 00:28:32,140
phase helps browser or us

436
00:28:32,750 --> 00:28:36,366
in the rendering phases haven't loop is basically

437
00:28:36,468 --> 00:28:40,206
an infinite loop responsible for selecting a

438
00:28:40,228 --> 00:28:43,582
task from the task queue and placing it

439
00:28:43,716 --> 00:28:47,514
on the main thread for execution until completion. And I'm

440
00:28:47,562 --> 00:28:52,254
sure you know, but sometimes selecting

441
00:28:52,302 --> 00:28:56,014
a render steps task instead of reading

442
00:28:56,062 --> 00:28:59,566
from the task queue to generate a frame.

443
00:28:59,758 --> 00:29:03,554
So we need to be careful

444
00:29:03,682 --> 00:29:07,110
not to overload it. This task

445
00:29:07,690 --> 00:29:11,126
to execute comes in various states

446
00:29:11,228 --> 00:29:15,426
that include all the render steps performed

447
00:29:15,538 --> 00:29:18,540
on the main trait well,

448
00:29:19,150 --> 00:29:23,402
so looking back at the recap slide now,

449
00:29:23,536 --> 00:29:26,894
we should understand better, or at least I hope

450
00:29:26,932 --> 00:29:30,622
so. It's essential to grasp how

451
00:29:30,676 --> 00:29:34,430
much work the browser has to do

452
00:29:34,580 --> 00:29:37,934
frame by frame, and how crucial it

453
00:29:37,972 --> 00:29:42,142
is to achieve those famous 60 frame

454
00:29:42,206 --> 00:29:46,434
per second. Okay, so far what

455
00:29:46,472 --> 00:29:50,450
I have told you aligns with what happens in

456
00:29:50,520 --> 00:29:54,566
chromium based architecture. However, it's important

457
00:29:54,668 --> 00:29:58,402
to remember that various rendering

458
00:29:58,466 --> 00:30:01,974
engines work depending on

459
00:30:02,012 --> 00:30:05,080
your browser on your choice. Okay,

460
00:30:05,610 --> 00:30:08,890
so our browser don't have

461
00:30:08,960 --> 00:30:12,220
such an easy life as we could see,

462
00:30:12,670 --> 00:30:17,038
and it's a good idea to start thinking about how

463
00:30:17,124 --> 00:30:20,670
to make their job more manageable.

464
00:30:21,410 --> 00:30:24,030
Well, some ideas,

465
00:30:24,370 --> 00:30:28,554
some stuff we can dig into include request

466
00:30:28,602 --> 00:30:32,414
animation frame and request idle frame API.

467
00:30:32,542 --> 00:30:36,398
Use it, use them. Use the wheel

468
00:30:36,494 --> 00:30:38,530
change, but be careful.

469
00:30:39,430 --> 00:30:42,982
CSS rules to create a layer of

470
00:30:43,036 --> 00:30:46,274
rendering to create another layer

471
00:30:46,322 --> 00:30:50,130
of rendering, use the async and deferred tag

472
00:30:50,210 --> 00:30:54,054
attributes to

473
00:30:54,092 --> 00:30:57,980
load our script in a synchronous way.

474
00:30:58,590 --> 00:31:03,062
Please use workers workers

475
00:31:03,126 --> 00:31:06,960
is an incredible technology not so young.

476
00:31:07,410 --> 00:31:11,662
And this kind of technology is

477
00:31:11,716 --> 00:31:15,520
helpful to move a lot of work

478
00:31:16,450 --> 00:31:19,460
out of the main thread. Okay.

479
00:31:21,030 --> 00:31:25,154
Manage the priority of the resources with preload or

480
00:31:25,272 --> 00:31:29,138
check out CSS and API triggers that

481
00:31:29,304 --> 00:31:33,314
force the layout and paint faces

482
00:31:33,442 --> 00:31:36,920
well to ensure a smooth experience.

483
00:31:37,370 --> 00:31:41,414
Let's try to help the tool that takes us

484
00:31:41,532 --> 00:31:45,882
through. Billions and billions and billions of pages full

485
00:31:45,936 --> 00:31:49,290
of things to learn and kittens every day.

486
00:31:49,440 --> 00:31:53,050
Well, I do it in my way. I use the bad computer,

487
00:31:53,200 --> 00:31:57,134
which is powerful and I don't care no like

488
00:31:57,172 --> 00:32:00,862
that, but by trying to

489
00:32:00,916 --> 00:32:04,350
write better code. Okay, well,

490
00:32:04,420 --> 00:32:07,678
this is a collection of link. It is always

491
00:32:07,764 --> 00:32:11,042
handy links and more and more and

492
00:32:11,096 --> 00:32:14,414
more. Okay, well, I'm Francesco Shudi,

493
00:32:14,462 --> 00:32:18,094
a developer by choice and patient. I'm a Google developer

494
00:32:18,142 --> 00:32:21,518
expert at Microsoft MVP. I'm also a partner

495
00:32:21,694 --> 00:32:24,914
in an italian company that specializes in front

496
00:32:24,952 --> 00:32:28,738
end mobile development and provides training in this field.

497
00:32:28,904 --> 00:32:32,130
So thank you all very much

498
00:32:32,280 --> 00:32:36,602
and here are some links to reach out to me or my company.

499
00:32:36,736 --> 00:32:41,030
Thanks again. And now it's feedback

500
00:32:41,110 --> 00:32:42,440
time. Thank you so much.

