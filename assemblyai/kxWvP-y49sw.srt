1
00:00:26,130 --> 00:00:29,990
Hi everyone, thank you for coming for my talk today. We're going to

2
00:00:30,060 --> 00:00:33,586
talk about TDD, test driven development in legacy

3
00:00:33,618 --> 00:00:36,966
code. I'm Gil, I'm the

4
00:00:36,988 --> 00:00:41,346
one on the left, not the one reading the book. And I'll

5
00:00:41,378 --> 00:00:44,802
be with you for the next few minutes talking about TDD.

6
00:00:44,946 --> 00:00:48,466
So first of all, I'm Gil, I'm coming to you from Israel.

7
00:00:48,498 --> 00:00:53,834
I'm a consultant and trainer and do all kinds of workshop

8
00:00:53,962 --> 00:00:56,400
and teach people,

9
00:00:56,930 --> 00:00:59,838
developers, testers, automation people,

10
00:01:00,004 --> 00:01:03,150
agile people, whatever, to write better software.

11
00:01:03,910 --> 00:01:07,714
And this is what I do. I'm also

12
00:01:07,752 --> 00:01:11,006
the author of two books, everyday unit testing, everyday spring testing.

13
00:01:11,118 --> 00:01:14,526
This is the Java thing and we mostly

14
00:01:14,558 --> 00:01:18,270
in Python today, although there's going to be one couple of slides that

15
00:01:18,360 --> 00:01:23,046
talk about Java. You can get me@testingil.com or everydayunitetesting.com,

16
00:01:23,068 --> 00:01:26,646
which is the book site, and I'll leave on Twitter so you

17
00:01:26,668 --> 00:01:30,902
can actually meet me there if you have any questions afterwards

18
00:01:30,966 --> 00:01:34,294
and so on. Test driven development

19
00:01:34,342 --> 00:01:37,638
TDD, it's a methodology of writing

20
00:01:37,734 --> 00:01:38,570
software,

21
00:01:40,670 --> 00:01:43,934
although it has test in it. Basically we have three

22
00:01:43,972 --> 00:01:47,566
steps. Red, green refactor, we call them. Red is when we

23
00:01:47,588 --> 00:01:51,022
write the test and the test fails for any

24
00:01:51,076 --> 00:01:54,978
reason. Second one is green when we write

25
00:01:55,064 --> 00:01:58,340
just the code to make it work.

26
00:01:58,950 --> 00:02:02,386
And then we refactor because once we

27
00:02:02,408 --> 00:02:06,194
have tests and everything's passing, until now, we can

28
00:02:06,232 --> 00:02:09,622
actually move stuff around and refactor it. How does it look?

29
00:02:09,676 --> 00:02:12,870
Like I said, it's going to be but of Java here, before we jump into

30
00:02:13,020 --> 00:02:17,254
the code. So we have a test.

31
00:02:17,452 --> 00:02:20,582
You see that the squiggly lines under the calculator class,

32
00:02:20,636 --> 00:02:24,010
because I haven't created it yet. So the id

33
00:02:24,080 --> 00:02:27,338
will shout what are you doing? What are you doing with that?

34
00:02:27,424 --> 00:02:31,210
And that's okay because the test can fail because it doesn't compile.

35
00:02:32,350 --> 00:02:35,898
Then we add the code. You can see that, no more squiggly lines.

36
00:02:35,914 --> 00:02:39,690
I have the calculator there and I've added the method and I have two parameters,

37
00:02:39,770 --> 00:02:43,566
Inj and this works on it. I can

38
00:02:43,588 --> 00:02:47,678
make it a bit more readable and I can transform inj

39
00:02:47,774 --> 00:02:51,490
to something a bit more readable, which is first number and second number.

40
00:02:51,640 --> 00:02:55,250
And this is the refactoring bit. And I can do this over

41
00:02:55,320 --> 00:02:58,630
and over and over and over and over again and it sounds.

42
00:02:58,780 --> 00:03:02,022
Could it be that easy? It could be.

43
00:03:02,156 --> 00:03:05,400
It usually is. Unless we're talking about legacy code.

44
00:03:06,010 --> 00:03:09,974
Because we have legacy code.

45
00:03:10,012 --> 00:03:13,180
It's not like the calculator examples, right?

46
00:03:13,790 --> 00:03:19,286
It works very well in new stuff, but examples

47
00:03:19,318 --> 00:03:22,762
are usually too simplistic when you look it up and you

48
00:03:22,816 --> 00:03:26,510
probably look at it and say, well, yes, but it probably

49
00:03:26,660 --> 00:03:30,158
won't work on my code. We have a

50
00:03:30,164 --> 00:03:34,160
lot of dependencies in our code, and that means

51
00:03:36,870 --> 00:03:40,850
we usually focus on the code that we're writing, mock everything else

52
00:03:40,920 --> 00:03:44,740
if needed, or so it depends on what we're doing.

53
00:03:45,270 --> 00:03:48,498
If we have a lot of dependencies, we might need to mock a

54
00:03:48,504 --> 00:03:51,974
lot. Tests become crappy and coupled to the

55
00:03:52,012 --> 00:03:55,506
code, not what TDD aims

56
00:03:55,538 --> 00:03:59,434
us to do. So we say, well, we need to change the code,

57
00:03:59,472 --> 00:04:03,290
but we haven't written tests for the code. So thats means

58
00:04:03,440 --> 00:04:06,940
that the code resists and we don't want to break stuff

59
00:04:07,710 --> 00:04:10,894
whenever we are in the process. And we've heard about

60
00:04:11,012 --> 00:04:15,470
a new development process, TDD included,

61
00:04:16,370 --> 00:04:19,630
you want to introduce it because you've heard that it's good,

62
00:04:19,780 --> 00:04:23,026
but you don't want to break anything that you've done until now because

63
00:04:23,128 --> 00:04:27,314
you put a lot of effort into that. So we

64
00:04:27,352 --> 00:04:31,380
don't want to change the code, but we probably could do that

65
00:04:32,070 --> 00:04:35,586
fairly simple or fairly easy if we had tests to tell

66
00:04:35,608 --> 00:04:37,750
us while you're breaking stuff. But we don't.

67
00:04:39,930 --> 00:04:43,238
But it is a good thing to do. And this is what,

68
00:04:43,324 --> 00:04:46,566
the main thing I want you to remember from this talk, it's not

69
00:04:46,588 --> 00:04:48,070
like the techniques,

70
00:04:48,830 --> 00:04:52,554
it's how this

71
00:04:52,592 --> 00:04:56,154
affects your time and somebody else's time. Because everything we

72
00:04:56,192 --> 00:04:59,970
talk about in software processes, like good software processes,

73
00:05:00,070 --> 00:05:03,802
whether it's TDD or automation test automation

74
00:05:03,946 --> 00:05:07,854
or design reviews or code reviews, it really doesn't matter.

75
00:05:07,972 --> 00:05:12,080
Whatever we do and other people do as well,

76
00:05:12,550 --> 00:05:16,514
is really making sure that we

77
00:05:16,632 --> 00:05:20,782
consistently deliver code and we don't waste

78
00:05:20,846 --> 00:05:23,300
time on other stuff.

79
00:05:23,670 --> 00:05:27,046
And everything that we do when we

80
00:05:27,068 --> 00:05:30,886
are afraid to move code around because we might

81
00:05:30,908 --> 00:05:34,006
break anything that extends the time to

82
00:05:34,028 --> 00:05:37,586
delivery. When we read logs

83
00:05:37,618 --> 00:05:41,654
and kind of read code, when we're trying to bugs features

84
00:05:41,702 --> 00:05:46,026
and understand what it does because it's not readable. That's about time.

85
00:05:46,208 --> 00:05:49,754
If the code was more readable, if we had tests around, it would

86
00:05:49,792 --> 00:05:53,694
be easier to change it, fix it quicker and

87
00:05:53,732 --> 00:05:56,954
get it to something that's working to deliver

88
00:05:57,002 --> 00:06:00,138
it. Also, new features,

89
00:06:00,314 --> 00:06:03,714
we love working on new features. But again,

90
00:06:03,832 --> 00:06:07,682
if this requires us not just to write new code,

91
00:06:07,816 --> 00:06:11,220
but code inside other code that works,

92
00:06:11,590 --> 00:06:14,910
it's going to take time. So every process

93
00:06:15,000 --> 00:06:18,054
that we're talking about, clean code,

94
00:06:18,252 --> 00:06:21,478
unit testing, integration tests, we're going to

95
00:06:21,484 --> 00:06:24,674
talk. But today on TDD, code reviews,

96
00:06:24,722 --> 00:06:28,460
design reviews, every process that is basically

97
00:06:29,470 --> 00:06:33,322
other people are doing it or you're doing it to make code better,

98
00:06:33,376 --> 00:06:37,466
don't think about it on making code better, think about

99
00:06:37,648 --> 00:06:41,022
how to make a better

100
00:06:41,076 --> 00:06:44,254
use of your time. Because if things are working,

101
00:06:44,372 --> 00:06:48,602
you'll waste less time on the debugging stuff, on the reading logs,

102
00:06:48,746 --> 00:06:51,598
on staring at code,

103
00:06:51,684 --> 00:06:55,694
trying to understand what it does. You'll be quicker

104
00:06:55,742 --> 00:06:59,186
to move over these hurdles and get to something that

105
00:06:59,288 --> 00:07:02,706
we like getting working code

106
00:07:02,808 --> 00:07:06,466
out there very quickly. So TDD

107
00:07:06,578 --> 00:07:10,200
included in that, it's about respecting your time.

108
00:07:12,250 --> 00:07:15,830
Now, I'm going to

109
00:07:15,980 --> 00:07:22,406
take the principles of TDD and I'm going to look

110
00:07:22,428 --> 00:07:25,546
at them got in the whole cycle thing,

111
00:07:25,728 --> 00:07:29,546
but also in principles. So the things I want to do

112
00:07:29,568 --> 00:07:33,054
though is I'm going to start with legacy code, is that I

113
00:07:33,092 --> 00:07:37,038
don't want to break anything. Now with TDD, it's about

114
00:07:37,124 --> 00:07:41,166
writing a test and then you

115
00:07:41,188 --> 00:07:44,354
haven't written the code in because how can you?

116
00:07:44,392 --> 00:07:45,490
That's TDD.

117
00:07:47,830 --> 00:07:51,298
But before you do that, what about the code that you already

118
00:07:51,384 --> 00:07:54,754
have? So how do you know that

119
00:07:54,792 --> 00:07:58,274
you haven't broken anything that worked?

120
00:07:58,392 --> 00:08:01,622
Now, if you're looking at a UI or something, you probably know,

121
00:08:01,676 --> 00:08:04,966
but if you're looking at the code of a component and you're going

122
00:08:04,988 --> 00:08:08,474
to add stuff to it, how do you know that the code, the remaining code

123
00:08:08,512 --> 00:08:11,020
in that component still works?

124
00:08:12,030 --> 00:08:15,100
Think about that. Try to answer that.

125
00:08:16,350 --> 00:08:20,410
Then we're going to talk about how to add tests. I'm not going to teach

126
00:08:20,480 --> 00:08:23,754
you uni tests in this session.

127
00:08:23,802 --> 00:08:27,374
I'm assuming that it's easy to pick

128
00:08:27,412 --> 00:08:30,846
up. I mostly in

129
00:08:30,868 --> 00:08:34,366
my courses, but very little on tools,

130
00:08:34,398 --> 00:08:37,714
more about how you use them. But then we're going to add

131
00:08:37,752 --> 00:08:41,746
tests according to what we want to do and

132
00:08:41,928 --> 00:08:45,140
then we're going to add code.

133
00:08:45,450 --> 00:08:49,686
Right? And after we tdd the code, we're going

134
00:08:49,788 --> 00:08:53,286
to do some refactor. Refactoring, for the

135
00:08:53,308 --> 00:08:57,206
benefit of our session is changing the

136
00:08:57,228 --> 00:09:00,570
way the code looks without changing its functionality.

137
00:09:02,430 --> 00:09:06,486
It could be ruining it for the worst, but we don't

138
00:09:06,518 --> 00:09:10,422
do that here. That's basically refactor. It could be like renaming

139
00:09:10,486 --> 00:09:13,946
it could be like adding blank white space or blank lines

140
00:09:13,978 --> 00:09:17,646
to make code readable. That's refactoring too. And it could be

141
00:09:17,668 --> 00:09:21,566
something a lot more complex. Like I'm going

142
00:09:21,588 --> 00:09:25,198
to show you something thats can be done manually.

143
00:09:25,294 --> 00:09:27,460
Sometimes it can be done by the ide.

144
00:09:30,230 --> 00:09:33,506
The complex ones are usually you need an

145
00:09:33,528 --> 00:09:37,526
ide for that. And that's basically it.

146
00:09:37,548 --> 00:09:41,730
Once you get the ideas of what you're doing, you can do these steps

147
00:09:41,890 --> 00:09:45,766
and if TDD, regular, proper TDD is like

148
00:09:45,868 --> 00:09:49,542
every ten or 15 minutes, you'll have something working, something new working

149
00:09:49,596 --> 00:09:53,386
because you're working in small steps. You may not have this kind

150
00:09:53,408 --> 00:09:57,366
of cycle, but you'll have a cycle and this cycle works and you'll

151
00:09:57,398 --> 00:10:01,070
be able to trim it to focus on the small things.

152
00:10:01,220 --> 00:10:05,134
And once you get small things working, that is the most

153
00:10:05,172 --> 00:10:08,254
important thing. Small things working all

154
00:10:08,292 --> 00:10:12,262
the time, you'll see that you get quicker to deliver.

155
00:10:12,426 --> 00:10:16,402
And this is where my personal advice comes

156
00:10:16,456 --> 00:10:20,274
in. TDD is the best way, the best,

157
00:10:20,392 --> 00:10:24,450
and I've experienced a few to deliver

158
00:10:25,210 --> 00:10:29,750
working code consistently in a consistent manner.

159
00:10:31,450 --> 00:10:34,870
You can sure fire without test something thats

160
00:10:34,940 --> 00:10:38,300
works fairly well once,

161
00:10:38,990 --> 00:10:43,178
but if you're building something for a few weeks,

162
00:10:43,344 --> 00:10:46,826
even a few weeks, not mentioning months, TD is the

163
00:10:46,848 --> 00:10:50,266
best way to go because every time you pass a

164
00:10:50,288 --> 00:10:54,174
test, you'll be able to show something. Well, I know at this point all

165
00:10:54,212 --> 00:10:55,840
what I've written is working.

166
00:10:58,530 --> 00:11:02,190
I'm going to show you two examples of how you can use TDD.

167
00:11:04,470 --> 00:11:07,874
The first one is a bug fix and

168
00:11:07,912 --> 00:11:11,154
the second one is adding a feature. And as you

169
00:11:11,192 --> 00:11:12,180
probably know,

170
00:11:15,450 --> 00:11:19,590
this is most of our lives. The application that

171
00:11:19,740 --> 00:11:24,738
I'm going to show you is something that I've taken from my workshops.

172
00:11:24,834 --> 00:11:28,166
It's a messy calculator, so we're going to

173
00:11:28,188 --> 00:11:31,994
start with something that works. I know that I showed you examples of calculator before.

174
00:11:32,032 --> 00:11:35,226
It's not going to be something like that. Our calculator is going

175
00:11:35,248 --> 00:11:38,694
to be, it has two functions, two APIs.

176
00:11:38,822 --> 00:11:41,630
One is pressing the keys.

177
00:11:42,130 --> 00:11:46,238
It's not going to be a UI as messy as that, but it could be.

178
00:11:46,404 --> 00:11:48,160
And you pass a string in.

179
00:11:49,330 --> 00:11:52,766
And the other thing that we have

180
00:11:52,788 --> 00:11:56,626
is a got display, kind of shows what's on the screen to

181
00:11:56,648 --> 00:12:00,658
show it. And that's basically it. It's not complete and

182
00:12:00,744 --> 00:12:03,540
it does all kinds of things in a very messy way.

183
00:12:05,050 --> 00:12:08,200
So now I'm going to jump into the code, which is python code,

184
00:12:09,690 --> 00:12:14,390
and see what's up. So let's

185
00:12:16,170 --> 00:12:19,654
end the show. And we're in Pycharm.

186
00:12:19,702 --> 00:12:24,026
Okay, so we're in the beginning and

187
00:12:24,048 --> 00:12:28,234
the first thing I'm going to show you is what we have and

188
00:12:28,272 --> 00:12:30,880
then I'm going to do the bugs fix.

189
00:12:33,570 --> 00:12:36,960
So like I said, this is our calculator class

190
00:12:38,290 --> 00:12:41,950
has a press method. You see this thing

191
00:12:42,020 --> 00:12:45,506
here? It's called arrow code. Like if

192
00:12:45,608 --> 00:12:49,554
else, if something like that, which is

193
00:12:49,672 --> 00:12:53,314
something that you've probably seen, you've seen in the wild and

194
00:12:53,352 --> 00:12:57,302
you know that it's something that's very hard to

195
00:12:57,356 --> 00:13:01,590
add something to or fix something in it, because you don't know

196
00:13:01,660 --> 00:13:05,446
what the effect would be on the other branches. So this

197
00:13:05,468 --> 00:13:08,614
is something that we have. This is Python,

198
00:13:08,662 --> 00:13:11,580
so it actually fits in one string in one screen.

199
00:13:12,110 --> 00:13:15,798
We also have the get display method,

200
00:13:15,894 --> 00:13:20,894
so self display. It features zero if

201
00:13:20,932 --> 00:13:24,398
it's empty. And you

202
00:13:24,404 --> 00:13:28,080
can see that it works with plus and Div,

203
00:13:28,610 --> 00:13:32,554
but it doesn't work in minus and multiplying.

204
00:13:32,602 --> 00:13:36,110
It's not complete. You have sort of calculation

205
00:13:36,190 --> 00:13:39,874
here. And we have something that's weird here.

206
00:13:39,992 --> 00:13:43,460
And the thing is, this is a good examples of something thats

207
00:13:43,830 --> 00:13:47,186
somebody tells you, yeah, you go fix a bug and you're

208
00:13:47,218 --> 00:13:50,742
not sure how to deal with that because

209
00:13:50,796 --> 00:13:54,102
you haven't tested it yet. So this is where we start. I'm starting

210
00:13:54,156 --> 00:13:58,594
with a very uni

211
00:13:58,652 --> 00:14:02,666
testy generated code

212
00:14:02,768 --> 00:14:06,954
coming from when

213
00:14:06,992 --> 00:14:10,406
I create a unit test just does this. Absolutely, it fails

214
00:14:10,518 --> 00:14:14,158
and that's it. I have code and I have a very

215
00:14:14,324 --> 00:14:17,566
not useful tests. So what am I going

216
00:14:17,588 --> 00:14:21,102
to do first? Talk about a bug fix. I'm going to do something

217
00:14:21,236 --> 00:14:22,320
before that.

218
00:14:24,550 --> 00:14:28,210
That something is called characterization test.

219
00:14:28,280 --> 00:14:32,194
A characterization test is not a unit test or integration test. It's not a type

220
00:14:32,232 --> 00:14:35,954
of test, but it's something that tells you how

221
00:14:35,992 --> 00:14:40,166
the system is working. Now you usually do this by

222
00:14:40,268 --> 00:14:43,638
operating the system and see what comes out.

223
00:14:43,724 --> 00:14:47,286
And we have also all kinds of expectations of how it should work.

224
00:14:47,388 --> 00:14:51,266
So I'm going to show you something that I've written, so calculators

225
00:14:51,298 --> 00:14:54,714
stay the same for the beginning. And I wrote this

226
00:14:54,752 --> 00:14:58,794
test that creates a calculator class. And I

227
00:14:58,832 --> 00:15:02,286
feel that at the beginning, my expectation, it should

228
00:15:02,388 --> 00:15:05,358
show zero. And when I press three,

229
00:15:05,444 --> 00:15:09,200
it should show three. And this tests works.

230
00:15:11,570 --> 00:15:15,026
It works according to my expectations. So I

231
00:15:15,048 --> 00:15:18,754
take this and I multiply that, because I know that one test

232
00:15:18,792 --> 00:15:22,542
will not be enough here. So I've written

233
00:15:22,606 --> 00:15:26,514
and kind of refactor it in this way. So I'm creating calculator

234
00:15:26,562 --> 00:15:30,102
once and I've accumulated all the things

235
00:15:30,156 --> 00:15:33,282
that are working under the test successes.

236
00:15:33,346 --> 00:15:36,866
So I'll share the code in a minute. But sulfate

237
00:15:36,898 --> 00:15:40,438
star should show zero, pressing c should show zero,

238
00:15:40,524 --> 00:15:44,074
pressing three should show three. You know this from the beginning. And then

239
00:15:44,112 --> 00:15:48,022
we have three, plus should return three. Because this is an old calculator.

240
00:15:48,086 --> 00:15:52,046
When you press an operation, the display doesn't change.

241
00:15:52,148 --> 00:15:55,246
But when you write a number, operation number, it shows

242
00:15:55,348 --> 00:15:58,574
only the last number. And I've added this,

243
00:15:58,612 --> 00:16:02,190
all these things are working, which is cool.

244
00:16:02,260 --> 00:16:04,740
But then I found out some things are not working,

245
00:16:05,350 --> 00:16:08,626
so pressing plus at the beginning I expect it to

246
00:16:08,648 --> 00:16:12,498
show zero, but it doesn't. And if I press zero three,

247
00:16:12,584 --> 00:16:15,810
it doesn't show three because this is my expectation

248
00:16:16,230 --> 00:16:19,446
of all calculators and it doesn't do

249
00:16:19,468 --> 00:16:23,446
it. How do I know? I try it. I write these things and

250
00:16:23,468 --> 00:16:26,966
you can see the code at the bottom. I also

251
00:16:26,988 --> 00:16:30,730
have something that I thought was weird to work

252
00:16:30,800 --> 00:16:33,900
and I was expecting something else,

253
00:16:35,230 --> 00:16:38,906
but it fails. So I kind of created all kinds of

254
00:16:38,928 --> 00:16:42,062
cases through it system. And now

255
00:16:42,116 --> 00:16:45,742
I know what works and what doesn't because I know that what

256
00:16:45,796 --> 00:16:49,486
works still needs to work at the end. How does it

257
00:16:49,508 --> 00:16:53,386
look? Basically it's like wrapper methods using fluent

258
00:16:53,418 --> 00:16:56,530
interface things. So I collect the result

259
00:16:56,680 --> 00:16:59,810
at the start, pressing calls,

260
00:17:00,950 --> 00:17:05,558
first reset and then press

261
00:17:05,644 --> 00:17:09,622
for every character in a string. So I can actually

262
00:17:09,756 --> 00:17:12,070
write this as a shorthand.

263
00:17:12,810 --> 00:17:15,800
So it press three plus one plus four.

264
00:17:16,170 --> 00:17:20,058
And finally it should show does the assert. So now

265
00:17:20,144 --> 00:17:23,642
I have characterization test. I know this still

266
00:17:23,696 --> 00:17:27,178
needs to work at the end and I can

267
00:17:27,264 --> 00:17:30,460
add more here, but I decided to stop.

268
00:17:31,570 --> 00:17:34,750
Okay, so now I know how the system behaves.

269
00:17:37,490 --> 00:17:40,286
What are we going to do? So, going to fix a bug? The bug that

270
00:17:40,308 --> 00:17:43,874
we're going to fix is, I think

271
00:17:43,912 --> 00:17:47,426
one of the first one. I think it's this one, but I'll show you in

272
00:17:47,448 --> 00:17:48,130
a minute.

273
00:17:50,390 --> 00:17:54,194
So all the test successes, I move them into

274
00:17:54,312 --> 00:17:57,960
test characterization. Haven't touched them.

275
00:17:58,890 --> 00:18:02,306
Basically that's it. Just remove the features, because I want to see everything that's

276
00:18:02,338 --> 00:18:06,022
failing in front of my eyes

277
00:18:06,076 --> 00:18:10,006
rather than just obscured by all the other stuff.

278
00:18:10,108 --> 00:18:13,980
So this is the bug fix I'm doing. So what I did here is,

279
00:18:14,350 --> 00:18:17,802
first of all, let's define it. If I'm pressing plus,

280
00:18:17,856 --> 00:18:20,910
oh, that's the first one. If I'm pressing plus and then zero,

281
00:18:20,980 --> 00:18:25,214
I have a failure. I run it at this

282
00:18:25,252 --> 00:18:29,994
point you'll see that I have a failure invalid

283
00:18:30,042 --> 00:18:33,586
literal for int base ten. I'll show you what's the

284
00:18:33,608 --> 00:18:36,786
problem in a minute. I've copied here all the

285
00:18:36,808 --> 00:18:40,114
pressing and thats should show here, because I want something

286
00:18:40,312 --> 00:18:44,434
that works first, I refactor the code later.

287
00:18:44,552 --> 00:18:48,614
This is the separation between writing code for

288
00:18:48,652 --> 00:18:52,790
functionality and changing the code for quality is

289
00:18:52,860 --> 00:18:56,022
a whole separate thing. So that's the first thing.

290
00:18:56,076 --> 00:18:58,620
I have a failing test.

291
00:18:58,990 --> 00:19:01,340
Now let's look at what's causing it.

292
00:19:02,110 --> 00:19:06,540
You'll see thats in this

293
00:19:07,630 --> 00:19:08,380
line.

294
00:19:10,830 --> 00:19:14,366
I'm trying to cast something that at the beginning is empty and I'm trying to

295
00:19:14,388 --> 00:19:16,480
cast it to an int and that's the problem.

296
00:19:17,330 --> 00:19:20,000
Cool. How do I fix that? Well,

297
00:19:22,050 --> 00:19:23,810
now I have a test failing.

298
00:19:26,230 --> 00:19:29,794
What's the most easiest way or

299
00:19:29,832 --> 00:19:33,522
simplest way to pass the test? So apart from the if

300
00:19:33,576 --> 00:19:37,446
that was here, I added another condition. If the

301
00:19:37,468 --> 00:19:41,174
display is not empty, then do this. Then no

302
00:19:41,212 --> 00:19:44,950
casting occurs. So now my test is passing.

303
00:19:47,390 --> 00:19:51,002
Excellent. Excellent. Not completely. Why?

304
00:19:51,136 --> 00:19:54,890
Because you can see that this pattern returns.

305
00:19:57,390 --> 00:20:00,300
So my solution only works here.

306
00:20:00,750 --> 00:20:04,860
So I probably need to duplicate it

307
00:20:05,630 --> 00:20:09,360
in the things of oil. But I'm not just going to copy it. No,

308
00:20:10,450 --> 00:20:13,938
because we're doing it in a better fixed way. Which means

309
00:20:14,104 --> 00:20:17,282
we write three tests, one for each,

310
00:20:17,336 --> 00:20:20,370
one for the plus, one for the div, one for the equals,

311
00:20:20,950 --> 00:20:25,060
and then we can do

312
00:20:25,610 --> 00:20:29,462
this thing. Now you're probably asking

313
00:20:29,516 --> 00:20:33,014
why is he not using and or something like that? Because this

314
00:20:33,052 --> 00:20:35,960
is the functionally working part.

315
00:20:36,330 --> 00:20:39,478
Now that I've done this, I can refactor.

316
00:20:39,654 --> 00:20:42,858
And the refactoring I did is if you look at

317
00:20:42,864 --> 00:20:46,266
the pattern here is that if we

318
00:20:46,288 --> 00:20:49,450
go in, these two are tied.

319
00:20:50,450 --> 00:20:54,160
So once I have thats test working,

320
00:20:55,570 --> 00:21:05,120
I actually created the method called parse key number and

321
00:21:05,750 --> 00:21:11,218
probably need a better name and

322
00:21:11,304 --> 00:21:14,434
basically put the check here. And if it's here

323
00:21:14,472 --> 00:21:17,922
just return zero because this is what we want to display.

324
00:21:18,066 --> 00:21:21,414
Otherwise we do the casting. And I put this

325
00:21:21,452 --> 00:21:24,806
thing here because there's no point in duplicating the

326
00:21:24,828 --> 00:21:28,246
code. It's not a major refactoring. I could do

327
00:21:28,268 --> 00:21:31,018
a bit more than that, but I wanted to show you that a lot of

328
00:21:31,024 --> 00:21:34,502
the times a bit of refactoring

329
00:21:34,566 --> 00:21:39,050
is okay as well. Don't need to do a major refactoring

330
00:21:40,050 --> 00:21:43,774
but we'll get to that in a minute. So are we done

331
00:21:43,812 --> 00:21:47,198
here? Almost. Remember I copied things

332
00:21:47,284 --> 00:21:50,590
from the main test mix, from the characterization tests,

333
00:21:51,890 --> 00:21:55,250
the setup at start

334
00:21:55,320 --> 00:21:58,626
pressing and should know I copied that into the bug fix as well

335
00:21:58,648 --> 00:22:02,466
because I wanted things to work. But do I need

336
00:22:02,488 --> 00:22:06,038
this application? No, I can refactor that application

337
00:22:06,124 --> 00:22:08,920
out. So I'm going to refactor the test as well.

338
00:22:11,290 --> 00:22:14,966
So I've created base class which has all called

339
00:22:15,068 --> 00:22:18,294
base calculator tests. Has the pressing sheet no.

340
00:22:18,332 --> 00:22:21,786
And the setup and then both the

341
00:22:21,808 --> 00:22:25,962
characterization tests are inherit these things

342
00:22:26,096 --> 00:22:29,686
and become a lot more shorter. And I've

343
00:22:29,718 --> 00:22:32,986
also renamed the bugs fix thing for test calculator

344
00:22:33,018 --> 00:22:36,186
at start. So before that, if you look at the bug

345
00:22:36,218 --> 00:22:39,994
fixes descriptions or names I call them when pressing operation

346
00:22:40,042 --> 00:22:43,262
at start should show zero and pressing div at start should show zero

347
00:22:43,316 --> 00:22:47,086
and pressing equal at start should show zero. I can also reflect

348
00:22:47,118 --> 00:22:50,530
the dome's name. So I put them at a class called tests

349
00:22:50,600 --> 00:22:53,970
calculator at start and then I don't need at

350
00:22:54,040 --> 00:22:57,558
start for everyone. This is also a refactoring in

351
00:22:57,644 --> 00:23:00,950
strings, which is very cool. Makes things

352
00:23:01,020 --> 00:23:02,840
a lot more easier to read.

353
00:23:04,730 --> 00:23:08,040
We've done a bug fix. Well that's very cool.

354
00:23:08,350 --> 00:23:10,970
Now let's talk about adding a feature.

355
00:23:13,870 --> 00:23:19,434
Now the functionality. We're going to start at

356
00:23:19,472 --> 00:23:23,214
the same point we are. But before we do, I want to show you what

357
00:23:23,252 --> 00:23:27,902
we are going to add.

358
00:23:27,956 --> 00:23:32,078
So we currently have a behavior that if

359
00:23:32,084 --> 00:23:34,130
you press a number and then the operation.

360
00:23:35,430 --> 00:23:39,140
Forgive the semicolon copy thing.

361
00:23:41,190 --> 00:23:44,802
If you press can operation a number, thats the operation. You see the number

362
00:23:44,856 --> 00:23:48,478
only. And we have that for plus and div. But we don't have minus yet.

363
00:23:48,504 --> 00:23:52,118
And I want this got just to add minus as an a

364
00:23:52,124 --> 00:23:55,510
key operation. I want to make sure thats the behavior of

365
00:23:55,580 --> 00:23:58,946
pressing an operation after a number still

366
00:23:59,068 --> 00:24:02,474
stays the same. So this is the case that we're trying to do.

367
00:24:02,672 --> 00:24:07,418
But this time I'm going to take a bit another

368
00:24:07,504 --> 00:24:10,586
approach. And this is refactoring the code based on what

369
00:24:10,608 --> 00:24:13,726
we have right now. All the tests, the characterization test and the bug fixed test

370
00:24:13,748 --> 00:24:17,022
that we have right now and try to see if we make it better.

371
00:24:17,156 --> 00:24:22,154
So the risk of adding this new functionality becomes

372
00:24:22,202 --> 00:24:25,746
less. So I'm going to take you through a

373
00:24:25,768 --> 00:24:29,918
couple of refactoring patterns that make things simpler.

374
00:24:30,094 --> 00:24:34,190
So we are here. So we have the test before we have the calculator

375
00:24:34,350 --> 00:24:36,520
as before with a power ski number.

376
00:24:37,930 --> 00:24:41,218
That's basically it. First thing I'm

377
00:24:41,234 --> 00:24:44,754
going to do is look here. So remember I told you about the arrow

378
00:24:44,802 --> 00:24:48,534
code. So error code is like you have. If it looks

379
00:24:48,572 --> 00:24:52,474
like an arrow and you don't know what's working and thats is

380
00:24:52,512 --> 00:24:56,474
going to be broken. We don't want it. How do you make an arrow less

381
00:24:56,512 --> 00:25:00,418
of an arrow? And one of the techniques is called adding a guardrail.

382
00:25:00,454 --> 00:25:04,446
So you see that if I have if do something else and

383
00:25:04,468 --> 00:25:07,040
this is the last else in the function,

384
00:25:09,010 --> 00:25:12,694
I can replace it with what we call a guard term.

385
00:25:12,762 --> 00:25:15,220
So it looks like this.

386
00:25:17,990 --> 00:25:22,994
If the key do something and return because

387
00:25:23,112 --> 00:25:26,482
everything else is the else. I can just

388
00:25:26,536 --> 00:25:30,002
move everything out of the else, shift it

389
00:25:30,056 --> 00:25:33,598
to the left. And we already got something of less and

390
00:25:33,624 --> 00:25:36,902
of can arrow. And you can do a got of the things with guard terms

391
00:25:36,956 --> 00:25:40,458
like that. You usually do it

392
00:25:40,464 --> 00:25:43,980
with validation and stuff like that. I showed you an example.

393
00:25:44,590 --> 00:25:48,266
Next thing I'm going to refactor is, well, you look

394
00:25:48,288 --> 00:25:51,242
at this, the if, this else,

395
00:25:51,376 --> 00:25:54,606
this else and so on, it kind of screams that you

396
00:25:54,628 --> 00:25:58,014
have like what we call a switch case or a match case. And I'm going

397
00:25:58,052 --> 00:26:01,966
to use the match case from python 310

398
00:26:02,148 --> 00:26:06,306
to replace these ifs with

399
00:26:06,328 --> 00:26:09,730
a match case. Now this has to be manual.

400
00:26:10,310 --> 00:26:14,014
No tool will do this. Very smartly for you. Very smartly

401
00:26:14,062 --> 00:26:17,394
means guarantee that it works.

402
00:26:17,592 --> 00:26:20,546
So you have to be a bit careful.

403
00:26:20,738 --> 00:26:24,914
But you have some of the tests thats you already collected.

404
00:26:24,962 --> 00:26:28,746
And if you're not really

405
00:26:28,848 --> 00:26:32,582
satisfied with thats tests that you have, add more characterization tests

406
00:26:32,646 --> 00:26:36,234
so you can feel covered. So how

407
00:26:36,272 --> 00:26:38,460
does this look in 310?

408
00:26:41,710 --> 00:26:49,502
So have a match key and cases in

409
00:26:49,556 --> 00:26:53,586
all other languages, you don't need to go through

410
00:26:53,768 --> 00:26:57,666
a dictionary of things. So 310 came

411
00:26:57,688 --> 00:27:01,060
out in September. Think very good.

412
00:27:02,550 --> 00:27:07,886
And the default is here we've

413
00:27:07,918 --> 00:27:11,414
done the guard term, we've done the match case. What else

414
00:27:11,612 --> 00:27:16,086
we see at least here a

415
00:27:16,108 --> 00:27:20,220
repetition, it's can application. The only difference is the operation type.

416
00:27:22,990 --> 00:27:25,366
So we can extract that into a method.

417
00:27:25,478 --> 00:27:29,194
So let's see how

418
00:27:29,232 --> 00:27:32,686
it looks like. I called it a handle op key and

419
00:27:32,708 --> 00:27:36,142
I pass in the enum of the thing,

420
00:27:36,196 --> 00:27:39,630
the operation that I'm doing, it's here basically

421
00:27:39,700 --> 00:27:43,394
the same code extraction method. Extraction. And look at the code

422
00:27:43,432 --> 00:27:46,340
that I have right now. First of all,

423
00:27:47,110 --> 00:27:51,074
less of an arrow. A lot things

424
00:27:51,112 --> 00:27:54,594
are separated by functionality. And now I

425
00:27:54,632 --> 00:27:58,710
come to the point where, you know, what if I now TDD minus,

426
00:28:00,330 --> 00:28:04,306
it will just work. Am I adding the minus? No, I'm adding

427
00:28:04,338 --> 00:28:07,954
a test first. So that's the refactor bit. Let me close that up.

428
00:28:08,012 --> 00:28:11,146
I'll close everything here so it

429
00:28:11,168 --> 00:28:14,060
won't confuse us. I'm going to TDD a test.

430
00:28:16,110 --> 00:28:18,730
This one, this is the tests I'm adding.

431
00:28:20,130 --> 00:28:23,550
And this obviously fails on the color and calculator.

432
00:28:24,370 --> 00:28:26,400
So I'm adding the code,

433
00:28:28,130 --> 00:28:31,966
I added the minus to the enum and

434
00:28:32,148 --> 00:28:37,310
TDD. Thats. And because all the behavior

435
00:28:37,390 --> 00:28:41,214
regarding operation is already there and extracted

436
00:28:41,262 --> 00:28:44,562
and you just need to call the right parameter and that makes

437
00:28:44,616 --> 00:28:48,146
the test simply work. It's like magic

438
00:28:48,178 --> 00:28:51,686
really. We worked hard at this magic, but it

439
00:28:51,708 --> 00:28:55,446
just works. And do we refactor after that?

440
00:28:55,548 --> 00:28:58,698
Yes. What kind of refactoring? Well, if you look at

441
00:28:58,704 --> 00:29:00,090
the code of the calculator,

442
00:29:02,430 --> 00:29:06,710
first of all, you see, well, this is already refactored.

443
00:29:06,790 --> 00:29:10,138
This is not refactored yet. There's an opportunity to do that

444
00:29:10,224 --> 00:29:13,326
and I'm going to do that. But before that, look at the

445
00:29:13,348 --> 00:29:17,726
code that we have. So by extracting this code to

446
00:29:17,748 --> 00:29:21,374
a method, we have something that's a higher level

447
00:29:21,572 --> 00:29:25,354
of code than this one because this is like the implementation details

448
00:29:25,402 --> 00:29:28,962
it was before that as well. So our

449
00:29:29,016 --> 00:29:32,050
code, our press method,

450
00:29:32,710 --> 00:29:36,374
really what it does, it talks in two different languages. And we

451
00:29:36,412 --> 00:29:39,510
don't want that. We want the same language,

452
00:29:40,250 --> 00:29:45,058
level of language at that thing. So extracting

453
00:29:45,154 --> 00:29:48,650
this and extracting this will create

454
00:29:48,720 --> 00:29:52,378
a higher level of, and the same level of

455
00:29:52,464 --> 00:29:55,930
reading readability in this thing.

456
00:29:56,000 --> 00:30:03,614
So I'm going to extract those into functions and

457
00:30:03,652 --> 00:30:07,166
that's what's left. So I called handle equals, and the

458
00:30:07,188 --> 00:30:09,440
rest is what handle number does.

459
00:30:11,730 --> 00:30:15,010
And basically just extracting the code, nothing else.

460
00:30:15,160 --> 00:30:18,754
And look how a simple it

461
00:30:18,792 --> 00:30:22,242
looks right now and readable, you know,

462
00:30:22,296 --> 00:30:25,574
where to look for things, where to add stuff and so

463
00:30:25,612 --> 00:30:29,110
on. And it reads the same language,

464
00:30:29,450 --> 00:30:33,286
the user language, rather than the implementation language, because you

465
00:30:33,308 --> 00:30:37,646
don't see all the other variables

466
00:30:37,698 --> 00:30:42,234
like staring you in the face. So things

467
00:30:42,272 --> 00:30:45,706
to remember when you're doing refactoring. That's basically all the

468
00:30:45,728 --> 00:30:51,070
code I wanted to show you today. So I want to

469
00:30:51,220 --> 00:30:55,134
summarize what we did and the

470
00:30:55,172 --> 00:30:58,046
principles behind them, because that's the more important stuff.

471
00:30:58,148 --> 00:31:00,720
So first of all,

472
00:31:03,090 --> 00:31:06,394
this is the most important stuff. You're introducing something new.

473
00:31:06,452 --> 00:31:10,274
You don't want to break whatever else worked until now. You know that

474
00:31:10,312 --> 00:31:13,666
from code, what I'm talking at the process level. So whatever you're trying

475
00:31:13,688 --> 00:31:17,362
to do, including TDD, you're trying to minimize the risks.

476
00:31:17,426 --> 00:31:21,042
And in order to do that, I've introduced you to characterization

477
00:31:21,106 --> 00:31:24,470
tests. You lock in the behavior that works.

478
00:31:24,540 --> 00:31:28,194
Now, sometimes it's not that easy to write them,

479
00:31:28,332 --> 00:31:32,074
but sometimes it is. Sometimes it's not easy to

480
00:31:32,112 --> 00:31:35,722
figure out what's expected. But that's okay.

481
00:31:35,856 --> 00:31:39,450
Run it, you'll see what's happening. Then you add an assert to that.

482
00:31:39,600 --> 00:31:43,198
So the more you feel you need

483
00:31:43,284 --> 00:31:45,840
more tests, add more tests, that's okay.

484
00:31:48,850 --> 00:31:53,138
Second thing is like you focus on

485
00:31:53,304 --> 00:31:56,562
what you want to do,

486
00:31:56,696 --> 00:31:59,774
where you want it. So we talked about adding a functionality.

487
00:31:59,822 --> 00:32:03,060
In all the bug fix, we defined what we want.

488
00:32:03,430 --> 00:32:07,042
We answered that question and only that questions. At the beginning,

489
00:32:07,106 --> 00:32:10,610
we saw an opportunity to fix two more bugs.

490
00:32:10,770 --> 00:32:14,342
We went back, added tests and added the code.

491
00:32:14,396 --> 00:32:17,880
Then don't jump ahead, don't storm the code.

492
00:32:20,750 --> 00:32:24,918
Final thing, the refactoring.

493
00:32:25,094 --> 00:32:28,794
I refactored the code. I've refactored the tests. I came

494
00:32:28,832 --> 00:32:32,526
back, I looked at it in terms of not do

495
00:32:32,548 --> 00:32:35,514
I understand what it does? Because your programmers,

496
00:32:35,562 --> 00:32:39,262
I'm a programmer eventually will

497
00:32:39,316 --> 00:32:42,974
understand what it does. But does it take me

498
00:32:43,012 --> 00:32:47,186
a lot to understand what it does or does it take me a short time

499
00:32:47,288 --> 00:32:50,754
and do I know where to look for stuff and do I know where

500
00:32:50,792 --> 00:32:54,398
to add stuff? So this is the thing that's

501
00:32:54,414 --> 00:32:58,902
really important. And so refactoring really gets

502
00:32:58,956 --> 00:33:02,390
to the point where next time I'm going to be here,

503
00:33:02,460 --> 00:33:06,120
it's going to be less time than I probably would.

504
00:33:07,450 --> 00:33:11,074
And that's basically it. That's how we are using TDD for legacy code.

505
00:33:11,132 --> 00:33:14,794
Write a test, fix a bug, do it over and over and over

506
00:33:14,832 --> 00:33:18,218
and over and over again. That's all I wanted to show you

507
00:33:18,224 --> 00:33:21,134
today. So final words,

508
00:33:21,252 --> 00:33:24,720
if you have questions, will be on the Discord channel

509
00:33:26,610 --> 00:33:31,294
and you can get back to me@gilatestingguild.com.

510
00:33:31,412 --> 00:33:34,538
On Twitter. I have an Instagram

511
00:33:34,634 --> 00:33:39,742
channel. When you have all these memes going there, the bookstanggill.com.

512
00:33:39,876 --> 00:33:44,286
I want to thank you for having me here today and

513
00:33:44,308 --> 00:33:46,310
thank you and see you somewhere else.

