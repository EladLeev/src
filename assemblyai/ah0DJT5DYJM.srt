1
00:00:00,250 --> 00:00:01,630
Are you an SRe?

2
00:00:03,570 --> 00:00:07,358
A developer, a quality

3
00:00:07,444 --> 00:00:11,406
engineer who wants to tackle the challenge of improving reliability in

4
00:00:11,428 --> 00:00:15,294
your DevOps? You can enable your DevOps for reliability with

5
00:00:15,332 --> 00:00:19,114
chaos native. Create your free account at Chaos

6
00:00:19,162 --> 00:01:17,878
native. Litmus Cloud hello.

7
00:01:18,044 --> 00:01:22,226
Hi, con 42. Hi everyone. Hi Noah.

8
00:01:22,258 --> 00:01:25,622
How are you? I'm very good. How are you, Shiman? Very good.

9
00:01:25,676 --> 00:01:29,202
Very excited. It's, you know, there aren't so many SRE conferences,

10
00:01:29,266 --> 00:01:32,826
you know, really well, you know, it's a question by itself. What is an

11
00:01:32,848 --> 00:01:36,314
SRE? What is a DevOps? You can have an entire talk

12
00:01:36,352 --> 00:01:39,210
about the difference and who calls it what,

13
00:01:39,280 --> 00:01:42,698
but yeah. Cool. So today we're

14
00:01:42,714 --> 00:01:46,654
going to talk to you about what we've learned from working with

15
00:01:46,772 --> 00:01:50,186
companies and experiencing and reading

16
00:01:50,378 --> 00:01:54,254
a lot of Kubernetes postmortems. We're going to go over some

17
00:01:54,292 --> 00:01:57,586
of the postmortems themselves and also talk about what

18
00:01:57,608 --> 00:02:01,922
are the best practices in order to avoid taking

19
00:02:01,976 --> 00:02:05,718
your cluster down or introducing security hazards and so on.

20
00:02:05,804 --> 00:02:08,934
So we're going to show you practical tools of how to do it and

21
00:02:08,972 --> 00:02:12,854
also the methodology of how we believe is

22
00:02:12,892 --> 00:02:14,680
a good way to avoid it.

23
00:02:17,780 --> 00:02:20,492
Cool. Spoilers. Spoilers,

24
00:02:20,556 --> 00:02:21,170
no?

25
00:02:24,280 --> 00:02:26,630
Nice ship. Yeah.

26
00:02:27,400 --> 00:02:30,820
Cool. So before we begin, maybe we should introduce ourselves.

27
00:02:31,560 --> 00:02:34,796
Yes. Hi everyone. My name is Noaa Barki.

28
00:02:34,848 --> 00:02:39,384
I'm a full stack developer for over five years and

29
00:02:39,502 --> 00:02:42,856
I'm also a tech writer and one of the leaders of

30
00:02:42,878 --> 00:02:46,040
GitHub Israel community, which is the largest GitHub community

31
00:02:46,110 --> 00:02:49,169
in the whole. And I'm very,

32
00:02:49,669 --> 00:02:52,190
very excited to be here. Thank you all for coming.

33
00:02:54,000 --> 00:02:57,804
Thank you very much. And my name is Shimon. I'm one of the co founders

34
00:02:57,852 --> 00:03:01,164
and the CEO of the Tree. I'm also very much involved

35
00:03:01,212 --> 00:03:04,524
within communities. I'm an AWS

36
00:03:04,572 --> 00:03:08,604
community hero. I run an 8000 members meetup

37
00:03:08,652 --> 00:03:11,772
group of cloud enthusiasts,

38
00:03:11,836 --> 00:03:15,504
mainly around AWS, and also I run the local CNCF

39
00:03:15,552 --> 00:03:19,200
chapter in Tel Aviv. And my background is in DevOps

40
00:03:19,280 --> 00:03:22,740
backend software engineering.

41
00:03:23,400 --> 00:03:28,256
And let's dive deep into know.

42
00:03:28,298 --> 00:03:31,496
Let me tell you a little bit more about how we got here. So in

43
00:03:31,518 --> 00:03:35,064
my previous role, I was the general manager for a software

44
00:03:35,112 --> 00:03:39,340
engineering department which was responsible for all of the infrastructure

45
00:03:39,920 --> 00:03:44,184
engineering, and we had 400 engineers

46
00:03:44,232 --> 00:03:47,744
in the company. And at the

47
00:03:47,782 --> 00:03:51,008
time we were already running on the cloud and we had a lot

48
00:03:51,014 --> 00:03:54,480
of services and hundreds of git repositories.

49
00:03:54,900 --> 00:03:59,424
And one day a developer made a misconfiguration which

50
00:03:59,462 --> 00:04:02,996
reached production, which happens. I make mistakes all the time.

51
00:04:03,098 --> 00:04:06,852
What can you do? But at this point

52
00:04:06,906 --> 00:04:10,864
I was faced with the question like how do I propagate this development

53
00:04:10,912 --> 00:04:14,916
standard and make sure that people in my organization

54
00:04:15,028 --> 00:04:18,696
don't make the same mistakes again. And this

55
00:04:18,718 --> 00:04:22,324
is fast forward to today. We created the tree,

56
00:04:22,372 --> 00:04:25,976
which is a company that is aimed to

57
00:04:25,998 --> 00:04:28,744
prevent misconfigurations from reaching production.

58
00:04:28,872 --> 00:04:32,060
And the way we do it is we have an open source Cli.

59
00:04:32,400 --> 00:04:36,296
I invite you to go and check it out. It's written in go.

60
00:04:36,418 --> 00:04:40,252
And what it does is it scans the Kubernetes

61
00:04:40,316 --> 00:04:44,256
manifests and helm charts. And every time

62
00:04:44,278 --> 00:04:48,748
that a developer or anyone makes a code change to

63
00:04:48,774 --> 00:04:51,668
a Kubernetes related manifest, we scan it,

64
00:04:51,754 --> 00:04:55,520
we provide predefined rules out of the box and we prevent

65
00:04:55,600 --> 00:04:57,860
misconfigurations that we identify.

66
00:04:58,840 --> 00:05:02,810
And usually people run it in the CI, CD and or

67
00:05:04,460 --> 00:05:08,330
on their machine. So probably

68
00:05:09,020 --> 00:05:13,636
if you read between the lines here and I'm sure that you do in

69
00:05:13,678 --> 00:05:17,804
the tree, because this is what we do, because we integrate the

70
00:05:17,842 --> 00:05:21,128
code that you write, your Kubernetes resources

71
00:05:21,304 --> 00:05:24,380
and we check them

72
00:05:24,450 --> 00:05:28,030
on every change policies is what we do for a living.

73
00:05:28,500 --> 00:05:32,064
This is what we do every day, every single day, all day.

74
00:05:32,182 --> 00:05:35,356
And partly my job as a developer at the tree

75
00:05:35,388 --> 00:05:39,430
was not only to understand how Kubernetes works and

76
00:05:40,120 --> 00:05:43,572
what are the main components in kubernetes, but also

77
00:05:43,626 --> 00:05:46,960
how you can blow up your own cluster.

78
00:05:47,120 --> 00:05:50,676
And this is practically what we are going to talk

79
00:05:50,698 --> 00:05:54,680
about today, the 100 plus postmortems.

80
00:05:55,820 --> 00:05:59,176
So today, Shimon, I know that we usually

81
00:05:59,278 --> 00:06:02,696
do it in a postmortem way, so usually we would talk

82
00:06:02,718 --> 00:06:06,216
about the event and see what are the lessons that we've

83
00:06:06,248 --> 00:06:09,916
learns from that event. But especially today. Are you ready?

84
00:06:10,018 --> 00:06:14,076
We are going to do it in my very own. What's the

85
00:06:14,098 --> 00:06:16,270
mistake? Private game show.

86
00:06:17,520 --> 00:06:20,652
Wait, what are the prizes? What are the prizes?

87
00:06:20,796 --> 00:06:23,810
What can I win? It's a million dollars. What is it?

88
00:06:25,220 --> 00:06:28,592
Okay, I'm sorry I didn't think about it, but I will.

89
00:06:28,646 --> 00:06:32,132
I promise I will. Okay. If you're curious about it,

90
00:06:32,186 --> 00:06:35,956
just contact me later. I'll tell you what you wanted to won or did

91
00:06:35,978 --> 00:06:40,070
not win. Maybe I won't win. I believe in you. Thank you.

92
00:06:41,560 --> 00:06:44,856
So what we are going to do is that I'll show you a

93
00:06:44,878 --> 00:06:48,088
Kubernetes resource and you will have to find

94
00:06:48,174 --> 00:06:51,736
or guess what's the mistake? Are you ready?

95
00:06:51,838 --> 00:06:54,570
I'm ready. Let's do it. Hit me. Hit me.

96
00:06:55,280 --> 00:06:59,260
This is a default cron job configuration.

97
00:06:59,920 --> 00:07:03,310
Yeah. So there isn't too much configuration here.

98
00:07:04,880 --> 00:07:08,124
With Cron job you always mix up the scheduler

99
00:07:08,252 --> 00:07:11,696
and the configuration. So I'll go and say that there

100
00:07:11,718 --> 00:07:15,280
is a problem with the scheduling here. The scheduling

101
00:07:15,700 --> 00:07:19,670
I guess. Is it the scheduling? Maybe not.

102
00:07:22,440 --> 00:07:23,190
No,

103
00:07:25,640 --> 00:07:29,700
it's not the scheduling. Low tech

104
00:07:29,770 --> 00:07:33,652
effects. Okay. It's the concurrency

105
00:07:33,716 --> 00:07:37,204
policy. We always want to make sure that we set the concurrency

106
00:07:37,252 --> 00:07:40,916
policy to either forbid or to replace.

107
00:07:41,108 --> 00:07:44,188
Do you know why? Tell me more.

108
00:07:44,274 --> 00:07:47,790
I'll tell you. It's because when we set it to

109
00:07:49,680 --> 00:07:52,830
allow, I'm sorry, when we set it to.

110
00:07:53,440 --> 00:07:56,796
No, I'm not sorry, when we set it to allow, whenever a

111
00:07:56,818 --> 00:08:00,684
cron job gets failed, it will not replace the previous

112
00:08:00,732 --> 00:08:04,188
one, it will always create a new one. Oh, and if I'm

113
00:08:04,204 --> 00:08:07,584
not mistaken, the cron job here spawns like

114
00:08:07,622 --> 00:08:11,220
a task every minute. Yes. So I guess they wanted to have like an almost

115
00:08:11,290 --> 00:08:14,432
long lived one. And if it won't finish the previous

116
00:08:14,496 --> 00:08:18,112
one it will just spawn more. Yes, every minute.

117
00:08:18,256 --> 00:08:21,060
So concurrency policy as it sounds,

118
00:08:21,210 --> 00:08:24,424
controls the concurrency. Do you want to know how much more?

119
00:08:24,462 --> 00:08:27,560
I'll tell you anyway. If you don't want, that's your problem.

120
00:08:27,630 --> 00:08:34,244
But if you want to know how much more, it's 4300

121
00:08:34,302 --> 00:08:37,580
plus restarting pods that were

122
00:08:37,650 --> 00:08:40,920
constantly restarting. And this is actually what happened to target.

123
00:08:41,000 --> 00:08:44,860
They had one failing crunch up that created thousands pods.

124
00:08:45,600 --> 00:08:48,784
And not only that well it immediately took

125
00:08:48,822 --> 00:08:52,432
their cluster down, but it also cost them a lot of money because

126
00:08:52,486 --> 00:08:56,272
their cpu always accumulated thousands of

127
00:08:56,326 --> 00:09:00,108
cpus. So the lessons

128
00:09:00,204 --> 00:09:03,668
here that we learns from target is to never ever

129
00:09:03,834 --> 00:09:07,572
trust the default configuration. Just because Kubernetes allows you to

130
00:09:07,626 --> 00:09:11,780
deploy a specific resource specification which are

131
00:09:11,850 --> 00:09:15,530
the default, it doesn't mean that you should do it, it doesn't mean that

132
00:09:16,700 --> 00:09:20,164
this is the configuration that you should use even though it's default.

133
00:09:20,212 --> 00:09:23,992
And you always say to yourself that's the default. I see

134
00:09:24,046 --> 00:09:27,390
how it can harm me I guess, because maybe

135
00:09:28,480 --> 00:09:31,644
the classical case is that maybe you spawn a cron job once

136
00:09:31,682 --> 00:09:35,928
a day or something. So I'm thinking as a Kubernetes developer

137
00:09:36,024 --> 00:09:39,164
it makes sense to me why you would use concurrency policy allow,

138
00:09:39,282 --> 00:09:42,812
but in this use case when they're trying to spawn it every 1 minute,

139
00:09:42,956 --> 00:09:46,684
it doesn't make sure makes sense. So I guess even if you configure

140
00:09:46,732 --> 00:09:49,788
something you should check what are the default configuration.

141
00:09:49,884 --> 00:09:53,556
Even if they're not stated in your manifest, you should check what is under the

142
00:09:53,578 --> 00:09:57,060
hood and understand how is it going to behave. Yeah,

143
00:09:57,130 --> 00:10:01,140
I know that whenever I see the default behavior

144
00:10:03,260 --> 00:10:09,096
subconsciously I always say to myself well how

145
00:10:09,118 --> 00:10:12,840
can it be dangerous? It's supposed to be safe.

146
00:10:13,180 --> 00:10:17,004
But it's not. You should

147
00:10:17,042 --> 00:10:20,700
think about it. But let's move forward to the next

148
00:10:20,770 --> 00:10:24,140
mistake. This is another cron job

149
00:10:24,210 --> 00:10:27,470
configuration. What's the mistake here?

150
00:10:27,840 --> 00:10:31,724
Okay, so you've taught me about the concurrency policy, which is forbid,

151
00:10:31,772 --> 00:10:35,376
which you taught me is good. Yes, it's good. By the way,

152
00:10:35,398 --> 00:10:38,884
I think that maybe in some cases it's bad, right? It depends on your use

153
00:10:38,922 --> 00:10:42,772
case. You are totally correct. And I want to say to you

154
00:10:42,826 --> 00:10:46,052
audience that whenever I say that

155
00:10:46,106 --> 00:10:47,430
we should always.

156
00:10:49,080 --> 00:10:53,544
I have a disclaimer. Just my

157
00:10:53,582 --> 00:10:56,792
main point is to know why you should

158
00:10:56,846 --> 00:11:00,216
not use it and how it works under the

159
00:11:00,238 --> 00:11:04,152
hood. So you will definitely know if that default

160
00:11:04,216 --> 00:11:07,804
behavior is good for you. Sometimes you would wanted

161
00:11:07,842 --> 00:11:11,404
to use the allow. Yeah, I agree there

162
00:11:11,442 --> 00:11:14,252
for a reason. Yeah, that's for sure. Yeah.

163
00:11:14,386 --> 00:11:18,284
So the concurrency policy is correct. I'll go with restart

164
00:11:18,332 --> 00:11:21,090
policy. Restart policy,

165
00:11:21,460 --> 00:11:25,216
yes. Let's find out. No,

166
00:11:25,318 --> 00:11:27,410
it's not the restart policy,

167
00:11:28,260 --> 00:11:31,636
it's incorrect yaml structure. We always want

168
00:11:31,658 --> 00:11:35,204
to make sure that, and this time, yes, I mean it.

169
00:11:35,242 --> 00:11:39,076
We always want to make sure that our yaml structure in

170
00:11:39,098 --> 00:11:42,792
our Kubernetes resources is valid. There is no way

171
00:11:42,846 --> 00:11:46,776
that you wouldn't want to do it. And this is actually what happened

172
00:11:46,878 --> 00:11:50,600
to Zalendo. Zalendo is a big online fashion company

173
00:11:50,670 --> 00:11:54,216
with over 6000 employees. I mentioned that

174
00:11:54,238 --> 00:11:58,428
because I want you to understand the scale of that company.

175
00:11:58,594 --> 00:12:02,412
What happened to that company when their API server was down and their

176
00:12:02,466 --> 00:12:06,200
API server was down due to out of memory issues because

177
00:12:06,290 --> 00:12:09,772
they used the correct resource configuration

178
00:12:09,836 --> 00:12:12,944
for Cronjab but they placed it incorrectly in their

179
00:12:12,982 --> 00:12:16,976
yaml. Instead of placing it here, they placed it

180
00:12:16,998 --> 00:12:21,120
here. So it's like you think you configured it, but actually you didn't

181
00:12:21,280 --> 00:12:25,076
because it's in the wrong place. So Kubernetes takes the

182
00:12:25,098 --> 00:12:28,944
default configuration or other configuration that you have. So you actually didn't

183
00:12:28,992 --> 00:12:32,440
configure it. Yes, very misleading. And it's just like tabs.

184
00:12:32,860 --> 00:12:36,868
Yes, it was honest mistake, it was an innocent mistake

185
00:12:36,964 --> 00:12:40,810
and one of their developers did it

186
00:12:41,340 --> 00:12:44,984
by mistake. And as

187
00:12:45,022 --> 00:12:48,572
you can see here, the concurrency policy wasn't part of the cron job spec.

188
00:12:48,626 --> 00:12:53,116
So then ended up with a cron job that created thousands of

189
00:12:53,218 --> 00:12:56,648
pods that immediately took their APR server down.

190
00:12:56,834 --> 00:13:01,116
And Zelando

191
00:13:01,148 --> 00:13:04,832
taught me the importance of having

192
00:13:04,886 --> 00:13:09,632
a clearly defined standards and policies and validation

193
00:13:09,696 --> 00:13:13,856
standards in your organization because this is actually yaml structure

194
00:13:13,888 --> 00:13:17,216
that was invalid. It's not the understanding

195
00:13:17,248 --> 00:13:20,892
of kubernetes that was wrong, it's not using the default

196
00:13:21,056 --> 00:13:24,504
behavior that was not the

197
00:13:24,542 --> 00:13:26,890
behavior that you should have used.

198
00:13:28,380 --> 00:13:31,944
It's a simple automated checks that you could have done.

199
00:13:32,142 --> 00:13:36,236
It's really hard, and it's really hard as a human to

200
00:13:36,258 --> 00:13:39,484
see this because it's like it's the right thing, it's just placed in the wrong

201
00:13:39,522 --> 00:13:43,372
location. It's kind of hard

202
00:13:43,426 --> 00:13:46,908
to see it. It's like as a developer,

203
00:13:47,004 --> 00:13:51,200
it always reminded me when I thought about Zalando incident

204
00:13:52,020 --> 00:13:55,564
the days before typescript when you could have forgot,

205
00:13:55,612 --> 00:13:59,228
I don't know, a semicolon or something and just everything

206
00:13:59,334 --> 00:14:02,884
didn't work. And you don't know why. You don't know

207
00:14:02,922 --> 00:14:06,336
why. Yeah. So this is what Zalando

208
00:14:06,368 --> 00:14:09,830
told me. But let's move forward to the next question.

209
00:14:10,360 --> 00:14:14,100
This is an ingress resource. What's the mistake?

210
00:14:15,240 --> 00:14:19,064
I guess, you know, in this case it seems like the host is

211
00:14:19,102 --> 00:14:22,980
star, which is kind of weird because usually you want to give like a URL

212
00:14:23,060 --> 00:14:26,708
or where do you point this? Like which service you want

213
00:14:26,734 --> 00:14:29,832
to listen to this ingress? So I'll go with the host

214
00:14:29,896 --> 00:14:33,160
star. Are you sure it's not maybe the rules

215
00:14:33,240 --> 00:14:36,864
maybe is this like who wants to be a millionaire? We're like,

216
00:14:36,982 --> 00:14:39,970
ask me a thousand times. Yes, why not?

217
00:14:42,740 --> 00:14:46,048
My final answer is host star. This is your final

218
00:14:46,134 --> 00:14:49,508
answer? My final answer, yes.

219
00:14:49,674 --> 00:14:53,296
And you are correct. The host.

220
00:14:53,408 --> 00:14:57,264
We want to prevent user from specifying

221
00:14:57,392 --> 00:15:00,756
host as a wildcard. And the reason that we would

222
00:15:00,778 --> 00:15:05,096
want to do it is because when we put a star in

223
00:15:05,118 --> 00:15:09,496
the ingress resource, Kubernetes will immediately forward

224
00:15:09,598 --> 00:15:13,912
all the traffic to that container. So you may be

225
00:15:13,966 --> 00:15:17,436
ending with one container having all

226
00:15:17,458 --> 00:15:21,100
the traffic through an entire cluster. And this is what happened to target.

227
00:15:21,680 --> 00:15:25,484
This is not something that you don't want to do ever because

228
00:15:25,522 --> 00:15:29,692
sometimes you would want to use wildcard.

229
00:15:29,836 --> 00:15:33,392
But what happened to target is that one of the developer set

230
00:15:33,446 --> 00:15:37,440
a star in their ingress resource and

231
00:15:37,590 --> 00:15:40,370
just immediately took their entire cluster down.

232
00:15:40,740 --> 00:15:44,164
And the lesson that we learned here from target, this is

233
00:15:44,202 --> 00:15:48,420
actually fun fact. It was their first mistake when they started to use Kubernetes.

234
00:15:49,320 --> 00:15:53,528
Anyway, the lesson that we learned from target here is how important

235
00:15:53,614 --> 00:15:57,236
it is to delegate the knowledge from the DevOps

236
00:15:57,268 --> 00:16:01,400
team to the developers teams or SRE teams or the SRE

237
00:16:02,060 --> 00:16:07,756
or the SRE, God forbid the SRE to

238
00:16:07,778 --> 00:16:10,584
the entire teams in the organization.

239
00:16:10,712 --> 00:16:13,804
It's very important. And I

240
00:16:13,842 --> 00:16:17,184
think that even five years ago when

241
00:16:17,222 --> 00:16:21,488
you worked at that company that you talked about, it was

242
00:16:21,574 --> 00:16:25,520
still important back then. It's not something that really

243
00:16:25,590 --> 00:16:29,296
related to kubernetes, just kubernetes is such an amazing thing.

244
00:16:29,478 --> 00:16:33,844
And it's across your organization whether you would want it or not. This is

245
00:16:33,962 --> 00:16:37,092
the entire app. I think that once we switch from

246
00:16:37,226 --> 00:16:40,724
Ops team and dev team and you throwing things off

247
00:16:40,762 --> 00:16:44,024
the wall as a developer to the Ops team to do it, and once

248
00:16:44,062 --> 00:16:47,652
you delegate infrastructure as code and operations responsibilities

249
00:16:47,716 --> 00:16:51,160
to developers, that's it. You got to educate them,

250
00:16:51,230 --> 00:16:54,636
you got to give them the tools in order to do the right thing.

251
00:16:54,818 --> 00:16:58,456
Because otherwise how are you supposed to do it? Like maybe I'm

252
00:16:58,488 --> 00:17:01,848
the best java payment engineer, but I'm not a docker expert,

253
00:17:01,944 --> 00:17:03,820
I'm not a Kubernetes expert.

254
00:17:05,680 --> 00:17:11,376
I think it's more than that because I

255
00:17:11,398 --> 00:17:14,832
always get angry when people say that DevOps and

256
00:17:14,886 --> 00:17:18,016
developers should work together just like that.

257
00:17:18,198 --> 00:17:21,316
It's not the same, it's not the same job, it's not

258
00:17:21,338 --> 00:17:25,488
the same way of thinking. I am a developer

259
00:17:25,584 --> 00:17:30,036
and I want to be the best feature machine ever.

260
00:17:30,218 --> 00:17:34,136
And you as a DevOps engineer, you would want to keep your

261
00:17:34,158 --> 00:17:37,000
production safe, your production warrior.

262
00:17:37,420 --> 00:17:41,464
That's the reason that you wake up every morning and go to your

263
00:17:41,662 --> 00:17:45,400
work. And it's not only

264
00:17:45,470 --> 00:17:48,712
that, it's also how we think as a developer.

265
00:17:48,776 --> 00:17:52,072
I take, I don't know, let's imagine a microservice

266
00:17:52,216 --> 00:17:55,996
and I take that microservice and I go to the controller and

267
00:17:56,018 --> 00:17:59,672
then to the service and then to the bits and the bytes of every

268
00:17:59,746 --> 00:18:03,056
variable. And you as a DevOps, you should think like in

269
00:18:03,078 --> 00:18:06,464
a zoom out way, you should think about, okay, I'll take that

270
00:18:06,502 --> 00:18:10,000
microservice and I put a load balancer and that region and

271
00:18:10,070 --> 00:18:13,524
if it would go to that place and that place. But that's the thing

272
00:18:13,562 --> 00:18:16,916
now, developers also need to think about it. Yes, and you need to give

273
00:18:16,938 --> 00:18:20,836
them the tools. Exactly. This is the key

274
00:18:20,858 --> 00:18:25,876
point because you should understand that it's

275
00:18:25,908 --> 00:18:29,512
different people, you should taught them.

276
00:18:29,646 --> 00:18:33,076
I agree. But you know, today if I interview someone, like as a developer,

277
00:18:33,188 --> 00:18:36,872
one of the questions that I ask them is like, how is your code making

278
00:18:36,926 --> 00:18:41,128
it to production? If a developer tells me it's

279
00:18:41,144 --> 00:18:44,572
not magic, it's a like I send

280
00:18:44,626 --> 00:18:48,616
it and then there's a build and Harry Potter does the CICD,

281
00:18:48,648 --> 00:18:51,840
you know, I think it's important, but let's move on to the next one.

282
00:18:51,910 --> 00:18:55,904
Yes, you are correct. Okay, so this

283
00:18:55,942 --> 00:18:59,592
is just a simple pod. Simple, innocent pod.

284
00:18:59,676 --> 00:19:03,056
What's the mistake here? This doesn't seem like there's

285
00:19:03,088 --> 00:19:04,390
a mistakes here.

286
00:19:06,920 --> 00:19:10,580
Front end. Yeah, I go with no mistake.

287
00:19:11,100 --> 00:19:14,868
What could go wrong here? No mistake.

288
00:19:15,044 --> 00:19:18,504
No mistake. Are you sure? I am positive. This is my

289
00:19:18,542 --> 00:19:21,930
final answer. No mistake. No you are not correct.

290
00:19:22,380 --> 00:19:26,604
This no limit doesn't have any limits. We always

291
00:19:26,722 --> 00:19:31,020
want to make sure that we specify the request limits,

292
00:19:31,360 --> 00:19:34,652
especially if we use third

293
00:19:34,706 --> 00:19:38,764
party applications. And this is actually what happened to Blue Metador.

294
00:19:38,812 --> 00:19:42,432
This is a small startup company, they had one pod that

295
00:19:42,486 --> 00:19:44,290
served a third party application,

296
00:19:45,620 --> 00:19:49,512
but it didn't have any limits.

297
00:19:49,596 --> 00:19:54,484
So nothing stopped from those pod to take the

298
00:19:54,522 --> 00:19:58,564
entire. Yeah, like if you think about it, especially when you bring on

299
00:19:58,602 --> 00:20:01,796
third party applications, you don't know what they're going to do.

300
00:20:01,898 --> 00:20:05,880
And running things in containers inside Kubernetes

301
00:20:06,460 --> 00:20:09,684
is similar, but different than running it in a vm,

302
00:20:09,812 --> 00:20:12,872
right, because let's say you have an EC two instance or a vm or something,

303
00:20:12,926 --> 00:20:16,608
just give it like you're forced to give it a memory limit

304
00:20:16,644 --> 00:20:19,816
and a cpu limit because you define how much memory and cpu

305
00:20:19,848 --> 00:20:23,964
they're going to have. But here in kubernetes it's interesting, you can

306
00:20:24,082 --> 00:20:27,532
actually spawn it without specifying any limits. Now I remember

307
00:20:27,586 --> 00:20:31,264
using for example, RabbitMQ, which is a very popular queuing service,

308
00:20:31,382 --> 00:20:35,104
and the default configuration is just to accumulate as much

309
00:20:35,142 --> 00:20:39,004
memory as possible in order to use it for queuing. So like the default behavior

310
00:20:39,052 --> 00:20:42,880
of this third party application is like I'm going to hog your entire memory.

311
00:20:43,040 --> 00:20:47,092
And if you don't know that, it's very important to

312
00:20:47,226 --> 00:20:51,184
put boundaries and limits to all of your third party applications.

313
00:20:51,312 --> 00:20:55,464
Yes, but Blue Metador actually the lesson that they

314
00:20:55,502 --> 00:20:58,680
taught me is, and I think it's the important

315
00:20:58,750 --> 00:21:02,008
lesson of all, is that it can really happen to anyone.

316
00:21:02,174 --> 00:21:06,344
And when I say anyone, I mean anyone.

317
00:21:06,542 --> 00:21:09,544
Google, Spotify, urban beat, Datadog,

318
00:21:09,672 --> 00:21:13,950
Toyota, really anyone? The Internet is

319
00:21:15,760 --> 00:21:19,384
full of stories about companies that blew

320
00:21:19,432 --> 00:21:23,368
their cluster know,

321
00:21:23,394 --> 00:21:27,250
but the real question is how we can prevent it in the future.

322
00:21:27,700 --> 00:21:31,276
Yeah, because I think remembering, like don't put star here

323
00:21:31,318 --> 00:21:35,840
and put the memory there in a way it's becoming redundant

324
00:21:35,920 --> 00:21:39,536
and it's very hard. It's almost impossible. Like how do you propagate

325
00:21:39,568 --> 00:21:42,992
this to, I donts know, 400 developers, 100 developers.

326
00:21:43,136 --> 00:21:46,984
And every day there are new features added to Kubernetes and every

327
00:21:47,022 --> 00:21:50,216
day you need to remember if you want to use the default configuration, not use

328
00:21:50,238 --> 00:21:53,192
the default configuration, and maybe you have new developers. Yeah,

329
00:21:53,246 --> 00:21:56,860
you're on board new developers every day and how are you supposed to tell them?

330
00:21:57,010 --> 00:22:00,476
So I'm a big believer in automation and I think that the

331
00:22:00,498 --> 00:22:04,444
way to go is actually to automate and have automated tests during your

332
00:22:04,482 --> 00:22:07,984
development process. Both in your computer and or

333
00:22:08,022 --> 00:22:11,664
in your CI CD process. So I think

334
00:22:11,702 --> 00:22:15,552
that number one, you need to define what are your

335
00:22:15,606 --> 00:22:19,776
policies. And you

336
00:22:19,798 --> 00:22:23,444
can use tools like conftest and gatekeeper or

337
00:22:23,482 --> 00:22:27,536
the datree. The main difference between them is like with conftest

338
00:22:27,568 --> 00:22:31,140
for example, it's an amazing tool, but you need to script your entire

339
00:22:31,290 --> 00:22:35,476
rules by yourself. So you could go and look at different best practices.

340
00:22:35,668 --> 00:22:39,096
And I think that the important thing is, number one, to define what are the

341
00:22:39,118 --> 00:22:42,616
policies that you wanted to have and which ones you

342
00:22:42,638 --> 00:22:46,388
want to enable and also which

343
00:22:46,494 --> 00:22:50,316
rules should run on which types of workloads. Because maybe a

344
00:22:50,338 --> 00:22:53,944
front end server is different than a back end server. Different than like a batch

345
00:22:53,992 --> 00:22:57,468
processing the from. Yeah, I think that if you

346
00:22:57,474 --> 00:23:00,816
donts know if we're saying policies, policies, policies, if you

347
00:23:00,838 --> 00:23:03,730
don't know what your policies, just ask yourself,

348
00:23:04,180 --> 00:23:08,032
what do I need to do in order to feel confident with my code

349
00:23:08,166 --> 00:23:12,356
to ship it to production? I know that as developer the

350
00:23:12,378 --> 00:23:16,288
basic things that I would do is to use unit

351
00:23:16,304 --> 00:23:18,896
testing and QA testing, integration, testing, testing,

352
00:23:18,928 --> 00:23:22,552
testing. I would also use clean code and

353
00:23:22,686 --> 00:23:26,056
conventions and coding standards that would make

354
00:23:26,078 --> 00:23:29,864
me feel confident and I would do

355
00:23:29,902 --> 00:23:33,576
it through automated checks. And the

356
00:23:33,598 --> 00:23:37,404
policies in the DevOps world would be to check your

357
00:23:37,442 --> 00:23:41,164
Kubernetes resource. It's a code like every

358
00:23:41,202 --> 00:23:44,588
other code in your application. So the first thing that we

359
00:23:44,594 --> 00:23:48,784
would want to do is to define the policies. What we

360
00:23:48,822 --> 00:23:52,896
want to check every time on every code change.

361
00:23:52,998 --> 00:23:56,528
Yeah. The next step would be to

362
00:23:56,614 --> 00:23:59,440
integrate policies in your organization.

363
00:23:59,600 --> 00:24:03,104
We would want to make sure that we validate

364
00:24:03,232 --> 00:24:06,820
any code change through automated policy

365
00:24:06,890 --> 00:24:09,590
checks on every change. So as we said before,

366
00:24:10,520 --> 00:24:14,296
it can be through the CI CD, it can be as

367
00:24:14,318 --> 00:24:19,944
a pre commit hook. I recommend to use it also as

368
00:24:19,982 --> 00:24:23,816
a local testing because it will make a

369
00:24:23,838 --> 00:24:28,076
lot of sense to your developers because they're used to it. They used to

370
00:24:28,178 --> 00:24:31,788
using unit testing. Every time that they make code change

371
00:24:31,954 --> 00:24:35,500
right before they push it to the repository,

372
00:24:35,920 --> 00:24:39,100
they always like NPM test. Good. I feel confident,

373
00:24:39,180 --> 00:24:42,816
yeah, let's push it. And it would make a lot of sense to

374
00:24:42,838 --> 00:24:46,224
them and it will help you create a

375
00:24:46,342 --> 00:24:49,504
good communication between the developers and the DevOps.

376
00:24:49,552 --> 00:24:52,132
It's like a gateway. Yes,

377
00:24:52,266 --> 00:24:56,064
exactly. Yeah exactly. I think it brings confidence

378
00:24:56,112 --> 00:24:59,350
to everyone. Yes of course.

379
00:25:03,320 --> 00:25:07,608
But the third thing. Yeah, I think that one

380
00:25:07,614 --> 00:25:10,488
of the challenges, so let's say, okay, we know which policies we want,

381
00:25:10,574 --> 00:25:13,556
we integrate them like as a pre commit hook, as a vs.

382
00:25:13,588 --> 00:25:17,276
Code extension, in RCI, in RCD and so on.

383
00:25:17,378 --> 00:25:20,670
But then I think one of the challenges is like, okay,

384
00:25:21,120 --> 00:25:24,316
an R D organization is a living breathing thing, right?

385
00:25:24,418 --> 00:25:28,064
And you have new people coming in, people offboarding new services,

386
00:25:28,262 --> 00:25:31,584
and then also you upgrade to new versions of

387
00:25:31,622 --> 00:25:35,248
clusters. You have different causes in different workloads. So how do

388
00:25:35,254 --> 00:25:39,152
you dynamically adjust the policies that are needed in general,

389
00:25:39,286 --> 00:25:43,184
the policies that you want to run on the specific workload

390
00:25:43,312 --> 00:25:47,296
and how do you propagate the changes? So let's say I have 500 git

391
00:25:47,328 --> 00:25:50,816
repositories and I enable those tests and now I upgrade,

392
00:25:50,848 --> 00:25:54,010
I don't know, to Kubernetes 122, whatever.

393
00:25:54,940 --> 00:25:58,184
So what now I need to make 500 pull requests to

394
00:25:58,222 --> 00:26:00,410
change all my policies? I hope not.

395
00:26:01,020 --> 00:26:04,472
Yeah, so you need some kind of like a centralized control,

396
00:26:04,606 --> 00:26:08,108
centralized management that can pull and dynamically configure it.

397
00:26:08,194 --> 00:26:11,800
Of course you can build it by yourself, maybe create like a console

398
00:26:11,880 --> 00:26:15,356
or an ETCD or put it in s three as

399
00:26:15,378 --> 00:26:18,752
a json. I don't know what, but you need some kind of way to

400
00:26:18,806 --> 00:26:22,016
centralize the management and control of the

401
00:26:22,038 --> 00:26:25,584
policies because it's just impossible to do it one by one. Unifying and

402
00:26:25,622 --> 00:26:29,884
having a dedicated place is one of the biggest advantages

403
00:26:30,012 --> 00:26:33,668
of using GOPA, right? I datree

404
00:26:33,754 --> 00:26:37,876
this is something that we definitely want

405
00:26:37,898 --> 00:26:41,108
to have. So now that we understand,

406
00:26:41,194 --> 00:26:44,664
what are the steps that we need to do in order to start

407
00:26:44,702 --> 00:26:48,904
using policies in your organization, let's talk about three main

408
00:26:48,942 --> 00:26:52,712
tools that you can use in order to use it

409
00:26:52,766 --> 00:26:55,930
in your organization, like how to implement it.

410
00:26:57,100 --> 00:27:00,888
And we'll talk about three tools. We'll talk about confidence and gatekeeper,

411
00:27:00,984 --> 00:27:04,684
which are based on OPA, OPA under

412
00:27:04,722 --> 00:27:09,776
the hood. And we'll talk about our very own, the tree application which

413
00:27:09,798 --> 00:27:13,804
is also open source, which is also an open source. And I really encourage

414
00:27:13,852 --> 00:27:17,648
you to submit a pool of crest. This is my code and

415
00:27:17,734 --> 00:27:20,230
mine, obviously my team.

416
00:27:21,880 --> 00:27:25,444
And the important thing that

417
00:27:25,482 --> 00:27:29,604
I want you to think about when

418
00:27:29,642 --> 00:27:33,888
we will introduce you those tools is to think

419
00:27:33,994 --> 00:27:38,632
where would be the most suitable place to you to use these

420
00:27:38,686 --> 00:27:42,216
tools in your pipeline. Because at the end of the day you

421
00:27:42,238 --> 00:27:45,596
have a developer and you have a DevOps and you have the development and the

422
00:27:45,618 --> 00:27:48,988
production and where the exact

423
00:27:49,074 --> 00:27:52,924
point that you will choose to use one of the tools might

424
00:27:52,962 --> 00:27:57,200
affect your entire organization and how you work with kubernetes.

425
00:27:57,780 --> 00:28:01,392
If you would use gatekeeper, you will protect

426
00:28:01,526 --> 00:28:04,704
the production itself and not the pipeline of any

427
00:28:04,742 --> 00:28:08,716
code changes in the development phase,

428
00:28:08,828 --> 00:28:12,776
as I like to say. But if you would use the tree and conftest,

429
00:28:12,828 --> 00:28:16,532
you will place it in the CI pipeline like a shift left before it even

430
00:28:16,586 --> 00:28:20,532
reaches the production. Yes. So let's go deeper into

431
00:28:20,586 --> 00:28:24,376
it. So Gatekeeper is a

432
00:28:24,398 --> 00:28:28,440
great project which is part of the open policy agent organization.

433
00:28:28,860 --> 00:28:32,376
It runs inside your kubernetes and

434
00:28:32,398 --> 00:28:36,456
it's actually admission webhook that is hooked

435
00:28:36,488 --> 00:28:39,916
on top of your kubernetes. And every time that someone does like a

436
00:28:39,938 --> 00:28:43,752
Kubectl apply command and schedules a resource

437
00:28:43,816 --> 00:28:48,092
to be added or modified inside your kubernetes,

438
00:28:48,156 --> 00:28:51,260
it will run tests. You can write tests in Rego,

439
00:28:51,340 --> 00:28:56,028
which is like a declarative policy language.

440
00:28:56,204 --> 00:29:00,256
And it will then allow or deny this change to

441
00:29:00,278 --> 00:29:03,636
be applied to your cluster. This is great, but the

442
00:29:03,658 --> 00:29:07,364
downside of it is that it's like it's in the end of the line.

443
00:29:07,482 --> 00:29:10,996
And when I write the code and test it on my machine and

444
00:29:11,018 --> 00:29:14,632
test it in my CI CD, I won't see any problems. And only

445
00:29:14,686 --> 00:29:18,440
when our continuous delivery, continuous deployment

446
00:29:19,100 --> 00:29:22,456
production actually applies it, only then I will see that there is a

447
00:29:22,478 --> 00:29:26,524
problem. Yeah. So moving on to the next one is

448
00:29:26,562 --> 00:29:29,916
conftest. Conftest. I really like

449
00:29:29,938 --> 00:29:33,532
conftest. Conftest enables you to write tests on any

450
00:29:33,586 --> 00:29:36,776
structured file. Any structured file

451
00:29:36,808 --> 00:29:40,204
can be Yaml, XMl, Docker, JSoN,

452
00:29:40,332 --> 00:29:43,696
anything. And it is specially designed to be used in the

453
00:29:43,718 --> 00:29:47,136
CI or as a local testing. You can practically think about it

454
00:29:47,158 --> 00:29:50,844
as a unit testing library for your Kubernetes resources.

455
00:29:50,972 --> 00:29:54,812
And under the hood conftest is built on top of OPA, just like

456
00:29:54,886 --> 00:29:58,116
gatekeeper. So all the policies that you

457
00:29:58,138 --> 00:30:01,636
will write should be also written in Rego. There is

458
00:30:01,658 --> 00:30:06,024
no other way. And something that is pretty cool about it is

459
00:30:06,062 --> 00:30:09,864
that it also allows you to push and pull your

460
00:30:09,902 --> 00:30:13,524
policies to a docker registry. It's not about containers

461
00:30:13,572 --> 00:30:17,692
anymore. And the way that confidence work is

462
00:30:17,746 --> 00:30:21,020
very simple. You only need to install it,

463
00:30:21,090 --> 00:30:24,476
write your policies and manage them

464
00:30:24,578 --> 00:30:28,128
of course, and run the command confidence test.

465
00:30:28,214 --> 00:30:31,840
And it will simply output you all the violations.

466
00:30:32,260 --> 00:30:36,268
And that's it. And that's it. Mainly about conference.

467
00:30:36,364 --> 00:30:39,556
It's really simple and I

468
00:30:39,578 --> 00:30:42,260
really like that it's in the CI pipeline.

469
00:30:43,320 --> 00:30:46,420
But let's move forward to the tree.

470
00:30:47,480 --> 00:30:50,116
Next slide. I don't see. Ah, here, now I see it.

471
00:30:50,138 --> 00:30:54,036
Okay, so yeah, the final one is we

472
00:30:54,058 --> 00:30:57,672
have the tree again, an open source, you can use it. Noah wrote some code,

473
00:30:57,726 --> 00:31:00,920
I wrote some code, feel free to check it out. The main difference

474
00:31:00,990 --> 00:31:04,568
is that it's very similar to gatekeeper and conftest,

475
00:31:04,664 --> 00:31:08,712
but it has both capabilities and also it comes predefined

476
00:31:08,776 --> 00:31:12,204
with policies. So you don't need to actually write your

477
00:31:12,242 --> 00:31:15,724
own policies. We have predefined rules and

478
00:31:15,762 --> 00:31:19,404
rule packs that you can enable and disable. And you also have a centralized

479
00:31:19,452 --> 00:31:24,224
management. So in the next slide you will be able to see that the

480
00:31:24,262 --> 00:31:27,884
difference by the tools. So gatekeeper,

481
00:31:27,932 --> 00:31:32,564
it only runs on the production and you need to write the

482
00:31:32,602 --> 00:31:36,516
tests manually. Conftest runs on

483
00:31:36,538 --> 00:31:39,988
a shift left way and you can run it in your computer and or in

484
00:31:39,994 --> 00:31:43,864
your CI CD. But again, you need to define the policies by yourself

485
00:31:44,062 --> 00:31:47,780
and somehow build a centralized policy management.

486
00:31:47,860 --> 00:31:52,056
And the tree is basically the same as confidence and gatekeeper only.

487
00:31:52,238 --> 00:31:56,300
You don't need to write your own rules. We have predefined rules. We also support

488
00:31:56,370 --> 00:32:00,584
writing custom rules. You can also write it in Yaml

489
00:32:00,632 --> 00:32:03,932
specs or in OPA. And then

490
00:32:04,066 --> 00:32:07,468
finally it has a centralized management mechanism. So let's

491
00:32:07,484 --> 00:32:11,116
say you have 500 repos, you can dynamically say which rules

492
00:32:11,148 --> 00:32:13,650
run on, which resources and so on.

493
00:32:15,060 --> 00:32:18,652
And my main takeaways from this session

494
00:32:18,716 --> 00:32:22,610
is from the very 100

495
00:32:23,640 --> 00:32:26,980
postmortems to donts trust the default configuration,

496
00:32:27,640 --> 00:32:31,056
define the policies in your organization and have a clearly

497
00:32:31,088 --> 00:32:34,320
defined coding validation standard

498
00:32:34,490 --> 00:32:37,544
and coding standards. That's also something that I

499
00:32:37,582 --> 00:32:41,304
encourage. Delegate the knowledge to

500
00:32:41,422 --> 00:32:46,956
the developers, put an effort in that and

501
00:32:47,138 --> 00:32:49,790
just remember that it can really happen to anyone.

502
00:32:51,200 --> 00:32:55,112
And to sum up, I really want you to remember that Kubernetes

503
00:32:55,176 --> 00:32:58,700
is not something that it's done in a day and DevOps

504
00:32:58,780 --> 00:33:02,690
is a process and you should really think about

505
00:33:03,380 --> 00:33:07,344
how you wanted to do it and manage it in your organization because

506
00:33:07,382 --> 00:33:11,312
it's a culture, it's something that takes time and

507
00:33:11,366 --> 00:33:14,864
patience. And eventually communities will become your

508
00:33:14,982 --> 00:33:16,400
production temple.

509
00:33:18,260 --> 00:33:21,992
And I really hope that this will inspire you to start thinking about

510
00:33:22,046 --> 00:33:25,384
your policies. What are your policies and how you

511
00:33:25,422 --> 00:33:28,440
want to enforce those policies in your organization.

512
00:33:28,860 --> 00:33:32,184
Great. So thank you very much, Noel. It was great. Thank you very

513
00:33:32,222 --> 00:33:34,936
much, Iman. Thank you. And let us know if you have any questions.

