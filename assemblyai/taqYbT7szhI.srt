1
00:00:34,770 --> 00:00:38,582
Welcome to this talk. Today I'll be talking to you about every

2
00:00:38,636 --> 00:00:42,086
developer's or administrators or

3
00:00:42,108 --> 00:00:45,522
operator's favorite tool, which is SSH,

4
00:00:45,666 --> 00:00:49,982
the same Ssh that allows us to remotely and

5
00:00:50,076 --> 00:00:54,030
securely connect to Linux securely connect

6
00:00:54,100 --> 00:00:57,738
to Linux remote Linux servers

7
00:00:57,914 --> 00:01:01,200
over an insecure network. Now, at the moment,

8
00:01:04,550 --> 00:01:08,878
the most popular way of authenticating

9
00:01:08,974 --> 00:01:12,370
SSH access is using SSH keys,

10
00:01:12,710 --> 00:01:16,440
and that's what I'm here to talk about. This talk is to

11
00:01:17,930 --> 00:01:23,506
show you or shine

12
00:01:23,538 --> 00:01:27,640
more light on why Ssh keys aren't so good,

13
00:01:29,150 --> 00:01:32,746
how they are doing harm to your infrastructure, and to convince you,

14
00:01:32,768 --> 00:01:36,742
or to show youll how SSH certificates are superior

15
00:01:36,806 --> 00:01:38,780
and why you should adopt them.

16
00:01:42,770 --> 00:01:46,782
Now, SsH keys are actually not

17
00:01:46,836 --> 00:01:51,226
bad. At least they are better than using passwords,

18
00:01:51,418 --> 00:01:54,802
plain passwords. Theyre they are convenient and easy

19
00:01:54,856 --> 00:02:00,690
to set up, and on their own they are actually quite secure

20
00:02:01,270 --> 00:02:05,258
and cannot easily be hacked, thanks to the mathematics

21
00:02:05,294 --> 00:02:09,174
of private keys and public keys, which I'll get into

22
00:02:09,212 --> 00:02:09,800
later.

23
00:02:12,010 --> 00:02:12,760
However,

24
00:02:14,650 --> 00:02:18,310
traditional SSH keys usage has

25
00:02:18,380 --> 00:02:22,314
private keys stored on digs, which means that

26
00:02:22,512 --> 00:02:27,754
they can often be stolen using

27
00:02:27,952 --> 00:02:31,302
malware or red

28
00:02:31,456 --> 00:02:35,760
if a team member's device is compromised and

29
00:02:36,130 --> 00:02:39,802
they have Ssh keys that aren't protected

30
00:02:39,866 --> 00:02:42,590
with passphrase on their device.

31
00:02:43,510 --> 00:02:47,134
Now, even when SSH keys stored on Dix are protected

32
00:02:47,182 --> 00:02:50,980
with encryption passwords, they can also be stolen using

33
00:02:52,230 --> 00:02:57,458
those passwords can also be hijacked

34
00:02:57,554 --> 00:03:01,014
using brute force attacks because people

35
00:03:01,052 --> 00:03:05,830
are susceptible to using insecure or easily guessed passwords.

36
00:03:06,570 --> 00:03:10,474
And when SSH keys are stolen, bad things

37
00:03:10,592 --> 00:03:14,262
happen. In recent

38
00:03:14,326 --> 00:03:18,710
times we've had several

39
00:03:18,790 --> 00:03:23,386
terrifying stories of companies that have suffered severe

40
00:03:23,578 --> 00:03:27,422
data and monetary loss due to one

41
00:03:27,476 --> 00:03:31,294
or two compromised SSH keys. We have companies like

42
00:03:31,332 --> 00:03:34,574
Godaddy, Shapeshift, Capital one, and just

43
00:03:34,612 --> 00:03:38,082
to name a few. Now, I won't go into the details of what

44
00:03:38,136 --> 00:03:41,778
happened with these companies because these stories are available

45
00:03:41,864 --> 00:03:44,020
online and you can read them on your own.

46
00:03:47,290 --> 00:03:52,310
The aim of this talk is to spark discussion

47
00:03:52,970 --> 00:03:57,602
and for us to examine really

48
00:03:57,676 --> 00:04:01,750
the inner workings of how traditional SSH key authentication

49
00:04:01,830 --> 00:04:05,130
works, and consider if there are better

50
00:04:05,200 --> 00:04:08,714
ways to manage SSH access in such

51
00:04:08,752 --> 00:04:12,634
a way that these incidents are less likely

52
00:04:12,682 --> 00:04:16,698
to happen, and in such a way that SSH

53
00:04:16,794 --> 00:04:18,590
access is safer.

54
00:04:20,850 --> 00:04:24,334
The question is, is there a better solution?

55
00:04:24,462 --> 00:04:27,630
And yes, there is, and that's SSH

56
00:04:27,710 --> 00:04:30,882
certificates, and that's what I'll be talking about in this

57
00:04:30,936 --> 00:04:34,942
talk to show you how SSH certificates

58
00:04:35,006 --> 00:04:38,022
are superior to using SSH keys and

59
00:04:38,076 --> 00:04:41,206
how you can start using them. But before I get

60
00:04:41,228 --> 00:04:44,742
into all that, I'll just take a moment to introduce myself and my company

61
00:04:44,876 --> 00:04:46,390
and then we'll proceed.

62
00:04:51,610 --> 00:04:54,926
Yep, that's me. My name is Linda Ikechukwu

63
00:04:54,978 --> 00:04:58,262
and I'm a developer advocate at Smallstep Labs.

64
00:04:58,406 --> 00:05:01,902
Now, small step builds Small Step is a company

65
00:05:01,956 --> 00:05:05,850
that builds toolkits that empowers developers,

66
00:05:05,930 --> 00:05:10,330
operators, DevOps, engineers, it administrators

67
00:05:10,410 --> 00:05:14,462
to be able to easily

68
00:05:14,526 --> 00:05:18,420
and seamlessly adopt PKI and use

69
00:05:18,870 --> 00:05:22,930
digital certificates, 509 certificates, SSH certificates

70
00:05:23,830 --> 00:05:28,342
to encrypt and secure all

71
00:05:28,396 --> 00:05:32,130
their infrastructure, from internal websites to kubernetes

72
00:05:32,210 --> 00:05:36,290
to docker containers to databases

73
00:05:36,370 --> 00:05:37,640
and what have you.

74
00:05:39,470 --> 00:05:43,434
So now

75
00:05:43,472 --> 00:05:50,574
in this talk, I'll be shining the light on how

76
00:05:50,612 --> 00:05:54,654
SSh keys work and reasons why they are

77
00:05:54,692 --> 00:05:58,142
bad for you. And then from that

78
00:05:58,196 --> 00:06:01,850
we'll move to looking at what SSH certificates

79
00:06:01,930 --> 00:06:05,826
are, how they work, and how they

80
00:06:05,848 --> 00:06:09,982
are superior to traditional SSH keys authentication,

81
00:06:10,126 --> 00:06:13,410
why they are great for you. And then after that,

82
00:06:13,480 --> 00:06:16,962
we'll look at how you can start using SSH

83
00:06:17,026 --> 00:06:20,294
certificates. What are some tools that are available out there that you can

84
00:06:20,332 --> 00:06:24,054
start using to deploy SSH certificates into your

85
00:06:24,092 --> 00:06:27,926
infrastructure? And then lastly,

86
00:06:27,958 --> 00:06:32,234
I also shared some links that will help you learn or

87
00:06:32,352 --> 00:06:35,850
set up SSH certificates in your own infrastructure.

88
00:06:36,670 --> 00:06:38,700
So let's get right into it.

89
00:06:43,150 --> 00:06:45,994
Why are SSh keys bad for you?

90
00:06:46,192 --> 00:06:49,006
Now, before I proceed, I'd like to state one thing.

91
00:06:49,108 --> 00:06:53,154
SSh keys are not so bad as I mentioned.

92
00:06:53,352 --> 00:06:57,330
In fact, I would say that when

93
00:06:57,400 --> 00:07:00,674
they are properly secured and managed, they could

94
00:07:00,712 --> 00:07:05,874
be the simplest solution and probably the ideal

95
00:07:05,922 --> 00:07:09,046
or preferred solution for a small of,

96
00:07:09,068 --> 00:07:13,106
say, ten to 20 devices or users

97
00:07:13,138 --> 00:07:17,080
or developers, or a small home lab.

98
00:07:18,330 --> 00:07:22,686
Because right now, with the addition of the SSh

99
00:07:22,738 --> 00:07:26,454
key types, a server can now enforce the use of hardware

100
00:07:26,502 --> 00:07:31,258
bound private keys for SSH.

101
00:07:31,434 --> 00:07:36,366
And this prevents sh

102
00:07:36,468 --> 00:07:40,190
private keys from being stolen from devices.

103
00:07:41,810 --> 00:07:44,580
And that's great.

104
00:07:45,030 --> 00:07:48,514
But as we proceed in this talk and look at

105
00:07:48,552 --> 00:07:51,682
the walkings of Ssh keys and how it works

106
00:07:51,736 --> 00:07:55,310
underneath, youll discover that SSH keys

107
00:07:55,390 --> 00:07:59,202
are just not scalable

108
00:07:59,266 --> 00:08:04,182
or robust for larger organizations who have fifty

109
00:08:04,236 --> 00:08:08,422
s or hundreds or thousands of servers

110
00:08:08,566 --> 00:08:12,730
and users. Do youll hand out

111
00:08:12,800 --> 00:08:16,380
dongles to every single person who needs Ssh access?

112
00:08:18,030 --> 00:08:23,786
That's a bit of an overhead, yeah. So let's

113
00:08:23,818 --> 00:09:00,064
take a look at how

114
00:09:00,102 --> 00:09:02,210
ssh key authentication works.

115
00:09:03,640 --> 00:09:06,912
Ssh key authentication works kudos to the magic

116
00:09:06,976 --> 00:09:10,484
of asymmetric cryptography, as I mentioned, which is the

117
00:09:10,522 --> 00:09:14,432
special correspondence between a public key and a private

118
00:09:14,496 --> 00:09:20,616
key. So if

119
00:09:20,718 --> 00:09:25,412
I send you a big random

120
00:09:25,476 --> 00:09:29,164
data and you sign it with

121
00:09:29,282 --> 00:09:32,590
your private key and send it back to me,

122
00:09:33,280 --> 00:09:36,908
if I'm able to use youll public key that

123
00:09:36,994 --> 00:09:40,888
I know to decrypt the signed

124
00:09:40,984 --> 00:09:44,484
random number that you've sent to me to obtain the original

125
00:09:44,632 --> 00:09:47,824
random number that I sent to you. Then I can be sure that I'm talking

126
00:09:47,862 --> 00:09:51,104
to you because you are the only person who has

127
00:09:51,142 --> 00:09:54,516
your private key and your public key and

128
00:09:54,538 --> 00:09:57,812
your corresponding public keys, which I have, is the only key

129
00:09:57,866 --> 00:10:01,940
that can decrypt the signed random message

130
00:10:02,010 --> 00:10:05,680
that you've sent to me that can correctly decrypt it.

131
00:10:05,770 --> 00:10:09,176
Yeah. So when

132
00:10:09,198 --> 00:10:12,772
you ssh into a server using your public key, the SsH

133
00:10:12,836 --> 00:10:16,056
server challenges your client to sign something with

134
00:10:16,078 --> 00:10:20,168
your private key, and when it does, that signature

135
00:10:20,264 --> 00:10:23,612
or that signed message is checked against the public

136
00:10:23,666 --> 00:10:28,072
key stored on the server. And if it matches, then you can successfully

137
00:10:28,136 --> 00:10:33,836
log in just as this image depicts.

138
00:10:34,028 --> 00:10:37,596
Now this may be an oversimplification, but it's

139
00:10:37,708 --> 00:10:41,170
more or less how SSH public keys authentication works.

140
00:10:42,500 --> 00:10:45,972
SSH certificate authentication works the same way,

141
00:10:46,026 --> 00:10:49,430
but with an important twist that we'll get to in a moment.

142
00:10:50,600 --> 00:10:55,680
Now how so

143
00:10:55,770 --> 00:10:58,650
we get the hang of how SSH authentication works.

144
00:10:59,100 --> 00:10:59,850
Now,

145
00:11:01,820 --> 00:11:03,720
when a developer,

146
00:11:05,260 --> 00:11:08,444
like I mentioned, to ssh into a host using a public

147
00:11:08,482 --> 00:11:11,820
key authentication, the host needs to know youll

148
00:11:11,890 --> 00:11:15,336
public key. Now, by default, youll public keys

149
00:11:15,368 --> 00:11:19,452
have to be added to the

150
00:11:19,506 --> 00:11:23,084
authorized key file of every host or server

151
00:11:23,132 --> 00:11:26,972
that youll like to have access to. So a normal SSh

152
00:11:27,036 --> 00:11:30,284
key onboarding or deployment involves a developer

153
00:11:30,332 --> 00:11:33,516
first generating their own key pair,

154
00:11:33,708 --> 00:11:38,560
which usually involves some baroque incantation of SSH keygen.

155
00:11:38,900 --> 00:11:42,832
Then they'll submit their public key to an administrator or operator

156
00:11:42,896 --> 00:11:46,592
for approval and distribution. Then the operator

157
00:11:46,656 --> 00:11:50,428
will then deploy their public key to a host

158
00:11:50,544 --> 00:11:53,896
where they need access, sometimes to

159
00:11:53,918 --> 00:11:57,160
all hosts or all servers within the infrastructure,

160
00:11:57,740 --> 00:12:02,044
maybe using some workflow into

161
00:12:02,162 --> 00:12:05,612
the authorized key files of all servers. And then once

162
00:12:05,666 --> 00:12:09,400
that's done, the developer now has SSH

163
00:12:09,480 --> 00:12:12,690
access from this,

164
00:12:15,860 --> 00:12:16,850
from this.

165
00:12:23,800 --> 00:12:27,796
From what I've just described, we can already see the

166
00:12:27,978 --> 00:12:31,700
first shortcoming of SSH keys, which is that it

167
00:12:31,770 --> 00:12:36,180
requires laborious and mundane key management activities.

168
00:12:37,900 --> 00:12:42,568
The procedure because

169
00:12:42,654 --> 00:12:46,196
let's face it, the process of onboarding SSH keys

170
00:12:46,228 --> 00:12:50,252
is time consuming and not

171
00:12:50,306 --> 00:12:53,624
scalable for organizations with hundreds to thousands

172
00:12:53,672 --> 00:12:55,310
of servers. Like I mentioned,

173
00:12:56,880 --> 00:13:00,780
you're going to have to maintain and update

174
00:13:01,380 --> 00:13:05,804
keys on the authorized key file of every server, and that can be operationally

175
00:13:05,852 --> 00:13:09,996
challenging and intensely time consuming for operators

176
00:13:10,028 --> 00:13:11,520
and administrators.

177
00:13:15,480 --> 00:13:18,932
So one way organizations try to deal with

178
00:13:18,986 --> 00:13:23,156
this sprawl, or key sprawl is as

179
00:13:23,178 --> 00:13:26,570
they grow, is to use can authorized keys command on

180
00:13:27,100 --> 00:13:32,136
servers. This could be a program or a

181
00:13:32,158 --> 00:13:36,280
bash script that outputs authorized public

182
00:13:36,350 --> 00:13:39,532
key files. So instead of a file, you can have a

183
00:13:39,586 --> 00:13:43,032
dynamic lookup of keys every time someone tries

184
00:13:43,096 --> 00:13:47,416
to log in, or they use something like ansible

185
00:13:47,528 --> 00:13:51,216
to push keys out to all their servers and

186
00:13:51,238 --> 00:13:53,520
keep those files in sync.

187
00:13:54,180 --> 00:13:57,664
But then even all of this

188
00:13:57,782 --> 00:14:01,936
adds very unnecessary overhead. And the

189
00:14:01,958 --> 00:14:05,152
truth is, no matter how thoughtfully executed,

190
00:14:05,296 --> 00:14:08,612
the task of gathering and shipping and

191
00:14:08,666 --> 00:14:12,944
maintaining SSH keys always remains

192
00:14:13,072 --> 00:14:17,384
messy. It's always messy. Always how

193
00:14:17,422 --> 00:14:21,016
do you keep track of all credentials that can open a

194
00:14:21,038 --> 00:14:24,340
door in your infrastructure?

195
00:14:24,500 --> 00:14:28,872
Do you have up to date inventory of all SSH enabled SSH

196
00:14:28,936 --> 00:14:32,760
keys in your organization? Do you even know who is using ssh

197
00:14:32,840 --> 00:14:36,270
in youll.org or which keys belong to which person?

198
00:14:37,200 --> 00:14:40,840
Because SSh keys on their own

199
00:14:40,930 --> 00:14:45,020
do not encourage a strong understanding of which device

200
00:14:45,100 --> 00:14:49,360
or which user owns specific keys.

201
00:14:53,320 --> 00:14:57,060
And there's always ongoing cost

202
00:14:57,130 --> 00:15:01,072
associated with monitoring and maintaining homegrown machinery

203
00:15:01,136 --> 00:15:05,220
for adding, removing, synchronizing, and auditing

204
00:15:05,580 --> 00:15:08,824
static public key files across your

205
00:15:08,862 --> 00:15:09,640
fleet.

206
00:15:12,940 --> 00:15:16,344
Now the second reasons why ssh keys aren't so great

207
00:15:16,382 --> 00:15:19,420
for you is that ssh keys do not expire.

208
00:15:21,440 --> 00:15:25,132
They remain valid forever, whether you intend them to

209
00:15:25,186 --> 00:15:28,556
or not. And the truth is, as long as the public key is in

210
00:15:28,578 --> 00:15:32,384
place of somewhere, the private key would work.

211
00:15:32,502 --> 00:15:35,936
So even after developers leave your company, their SSh keys would

212
00:15:35,958 --> 00:15:39,232
still remain valid. And they or some other

213
00:15:39,286 --> 00:15:42,364
person Ssh keys can be shared,

214
00:15:42,412 --> 00:15:45,668
theyre can be stolen. So they or some other person

215
00:15:45,754 --> 00:15:49,824
or can get a hold of those private

216
00:15:49,872 --> 00:15:54,244
keys and use it to wreck know, just like the

217
00:15:54,282 --> 00:15:58,552
story of shapeshift, godaddy and

218
00:15:58,606 --> 00:16:00,040
other organizations.

219
00:16:02,940 --> 00:16:06,392
And the worrisome thing is that there isn't actually any way to

220
00:16:06,446 --> 00:16:10,696
revoke inactive keys. So to revoke or remove

221
00:16:10,888 --> 00:16:13,580
a key from youll fleet of infrastructure,

222
00:16:14,160 --> 00:16:18,152
you have to update all your host or servers to remove

223
00:16:18,216 --> 00:16:21,864
that public key. Now,

224
00:16:21,922 --> 00:16:25,296
can you easily update all your servers and

225
00:16:25,318 --> 00:16:28,364
then back to the tracking problem of SSH keys?

226
00:16:28,492 --> 00:16:31,536
Still, when a developer leaves, how do

227
00:16:31,558 --> 00:16:35,364
you know the keys, the exact keys that belonged to

228
00:16:35,402 --> 00:16:39,540
them? So then, how do you know which key to remove?

229
00:16:39,960 --> 00:16:43,764
So unless your company builds its

230
00:16:43,802 --> 00:16:47,080
own custom solution, Ssh keys do not support

231
00:16:47,150 --> 00:16:49,960
that level of object trail.

232
00:16:50,860 --> 00:16:54,792
The next reason why SSH keys are really bad for you

233
00:16:54,926 --> 00:16:58,416
is that it encourages unsafe user

234
00:16:58,468 --> 00:17:00,780
behavior and bad security practices.

235
00:17:02,000 --> 00:17:05,612
Have you ever tried using into a remote host for the first time and

236
00:17:05,666 --> 00:17:08,956
encountered the image or

237
00:17:08,978 --> 00:17:13,028
the warning on the screen? Now, the default

238
00:17:13,064 --> 00:17:17,072
behavior here for most of us is to click

239
00:17:17,126 --> 00:17:20,976
yes and just move on with our lives without giving it a second thought,

240
00:17:21,158 --> 00:17:24,828
but that shouldn't be so, because what's happening here is the SSH

241
00:17:24,924 --> 00:17:28,144
client literally screaming at youll that the authenticity

242
00:17:28,272 --> 00:17:32,288
of the server or host you're trying to connect to can be proven

243
00:17:32,384 --> 00:17:35,876
like it's telling you that you can actually be sure that you're connecting to the

244
00:17:35,898 --> 00:17:40,244
right server or that the server that you're connecting to belongs

245
00:17:40,292 --> 00:17:43,800
to your organization or is an infrastructure within your organization.

246
00:17:44,380 --> 00:17:48,176
So what's happening theyre is that your client tries to initiate

247
00:17:48,228 --> 00:17:51,784
an SSH connection to a server, but the server

248
00:17:51,912 --> 00:17:55,180
tries to authenticate the client by checking.

249
00:17:55,840 --> 00:17:59,896
The server first tries to authenticate the client

250
00:18:00,088 --> 00:18:03,692
by checking if the client's public keys is present in its authorized

251
00:18:03,756 --> 00:18:07,056
key file. Now it does that and it

252
00:18:07,078 --> 00:18:11,084
is. Then your client also tries to authenticate

253
00:18:11,132 --> 00:18:14,684
the server by checking if it is a trusted

254
00:18:14,732 --> 00:18:18,064
server or if the server's public key is in its known hosts

255
00:18:18,112 --> 00:18:22,644
file. Now it does that and

256
00:18:22,682 --> 00:18:26,624
it doesn't find it because that's not ingrained.

257
00:18:26,672 --> 00:18:30,992
It's not a process that usually occurs in traditional SSH

258
00:18:31,056 --> 00:18:34,776
keys deployment. At this point, the right thing

259
00:18:34,798 --> 00:18:39,320
to do here would be to verify theyre fingerprints

260
00:18:39,480 --> 00:18:43,096
by using an administrator or an operator or consulting

261
00:18:43,128 --> 00:18:47,160
a database that has fingerprints of all servers

262
00:18:47,240 --> 00:18:50,896
across your fruits. But the truth is that how many

263
00:18:50,918 --> 00:18:55,180
people do that? Yeah, and so when you type, yes, your connection

264
00:18:55,260 --> 00:18:58,576
proceeds without authentication and the server's public key is

265
00:18:58,598 --> 00:19:01,884
permanently added to the known host

266
00:19:01,932 --> 00:19:05,860
file of your client. And this whole

267
00:19:05,930 --> 00:19:09,252
scenario is known as trust on first

268
00:19:09,306 --> 00:19:11,700
use antipattern. That's tofu.

269
00:19:13,080 --> 00:19:16,772
In this scenario, you're basically making assumptions

270
00:19:16,836 --> 00:19:20,036
that you're connecting to the right server. And frankly,

271
00:19:20,148 --> 00:19:23,764
that's a scary assumption to make because it's a cold

272
00:19:23,812 --> 00:19:25,850
world out there. Yeah,

273
00:19:26,700 --> 00:19:30,764
and theyre are top

274
00:19:30,802 --> 00:19:34,030
of mind, three reasons why Ssh keys are just

275
00:19:34,400 --> 00:19:39,100
bad for larger organizations.

276
00:19:40,480 --> 00:19:44,380
And then now you're probably wondering, is there a better way to manage SSH?

277
00:19:44,460 --> 00:19:48,140
Is there a better way to manage SSH

278
00:19:48,220 --> 00:19:51,728
access that makes is there

279
00:19:51,734 --> 00:19:55,952
a better way to manage SSh keys? Can we do something about SSH keys

280
00:19:56,016 --> 00:19:59,072
to rectify these situations?

281
00:19:59,136 --> 00:20:02,964
And quite frankly, I would say that you're asking the wrong

282
00:20:03,002 --> 00:20:08,028
questions. The truth is you can't tame

283
00:20:08,064 --> 00:20:10,330
ssh keys. Yeah,

284
00:20:12,380 --> 00:20:16,120
they just have a rudimentary fundamental

285
00:20:17,180 --> 00:20:20,684
design flaw. And so the answer would

286
00:20:20,722 --> 00:20:23,816
be to just use SSH certificates and here's

287
00:20:23,848 --> 00:20:24,430
why.

288
00:20:34,440 --> 00:20:38,472
So what I have here is what an SSH key

289
00:20:38,526 --> 00:20:40,920
certificate looks like when decoded.

290
00:20:43,660 --> 00:20:47,720
So an SSh key is simply a public

291
00:20:47,790 --> 00:20:51,432
key bound to some meta data and policies

292
00:20:51,496 --> 00:20:54,732
defining who the certificate belongs to and what

293
00:20:54,786 --> 00:20:58,190
the certificates can be used to assess, among other things.

294
00:20:59,120 --> 00:21:02,604
And I will just walk through some important

295
00:21:02,722 --> 00:21:06,704
properties or some properties of the SSH certificate on screen just

296
00:21:06,742 --> 00:21:10,076
to give you an idea of what it enables.

297
00:21:10,268 --> 00:21:13,616
So first we have the type and there are two types of

298
00:21:13,638 --> 00:21:17,616
SSH certificates. We have the user and the host certificates.

299
00:21:17,808 --> 00:21:21,380
What I have here is a user certificate.

300
00:21:22,200 --> 00:21:25,924
So host certificates are used by hosts or servers to

301
00:21:25,962 --> 00:21:28,852
authenticate themselves through SSH clients.

302
00:21:28,996 --> 00:21:33,044
I will talk on that later when I describe

303
00:21:33,092 --> 00:21:35,690
how SSH certificate authentication works.

304
00:21:36,220 --> 00:21:39,524
And for user certificates,

305
00:21:39,572 --> 00:21:44,168
which is what I have here, theyre are used to authenticate SSH

306
00:21:44,264 --> 00:21:46,940
clients to host.

307
00:21:47,360 --> 00:21:51,820
Now, user stats are quite similar to host.

308
00:21:52,800 --> 00:21:56,560
The major difference here is the principles field,

309
00:21:56,630 --> 00:22:00,832
which we'll get to next.

310
00:22:00,886 --> 00:22:04,908
You have the public keys, and this is the same public key

311
00:22:05,014 --> 00:22:08,720
portion of the key that you would have with a traditional SSh

312
00:22:08,800 --> 00:22:14,900
key. The difference with a certificate is that a

313
00:22:14,970 --> 00:22:18,852
certificate authority, which we'll get later, has signed

314
00:22:18,916 --> 00:22:22,856
all of this metadata that you're seeing and satisfying that

315
00:22:23,038 --> 00:22:26,596
the public and private keys pair

316
00:22:26,788 --> 00:22:29,880
is trusted within your infrastructure.

317
00:22:31,520 --> 00:22:35,964
Next we'll have the signing CA, which is

318
00:22:36,082 --> 00:22:40,830
the signature of the

319
00:22:42,560 --> 00:22:46,176
CA that signed, which is the signature of the

320
00:22:46,198 --> 00:22:51,600
certificate authority that signed this certificate.

321
00:22:53,060 --> 00:22:56,660
Then we have the key id and this property is usually

322
00:22:56,730 --> 00:23:00,564
outputted in SSH logs so you can put any

323
00:23:00,602 --> 00:23:03,990
important identifying information here.

324
00:23:05,480 --> 00:23:08,808
Then we have valid which

325
00:23:08,894 --> 00:23:12,484
defines the lifetime of an SSH certificate,

326
00:23:12,532 --> 00:23:15,880
because SSH certificates do not live forever.

327
00:23:17,340 --> 00:23:20,524
Next we have the principles. And principles are an

328
00:23:20,562 --> 00:23:25,128
arbitrary string that allow access to a specific host

329
00:23:25,304 --> 00:23:28,392
or a specific user

330
00:23:28,456 --> 00:23:30,700
on a specific host.

331
00:23:32,180 --> 00:23:36,240
And then we have the extensions property which allows for

332
00:23:36,310 --> 00:23:39,888
privileged SSH features like agent and

333
00:23:39,974 --> 00:23:44,080
port forwarding, or even to force configuration directives.

334
00:23:47,400 --> 00:23:52,544
Now let's look at how SSH certificate

335
00:23:52,592 --> 00:23:56,132
authentication works. Now to get started using

336
00:23:56,186 --> 00:23:59,320
SSH certificates based authentication,

337
00:23:59,900 --> 00:24:03,624
the only additional element you need to introduce to your infrastructure is

338
00:24:03,662 --> 00:24:07,432
an SSH authority. Now I make the distinction of

339
00:24:07,486 --> 00:24:11,304
calling it an SSH certificate authority because you cannot

340
00:24:11,352 --> 00:24:14,748
use a certificates authority configured to issue

341
00:24:14,834 --> 00:24:17,980
S 509 or TLS certificates to issue

342
00:24:18,050 --> 00:24:22,328
SSH certificates. And that's because

343
00:24:22,434 --> 00:24:26,492
OpenSSh uses a custom and simpler

344
00:24:26,636 --> 00:24:30,144
certificate format. Now as

345
00:24:30,182 --> 00:24:33,600
I mentioned in the beginning, SSH certificate authentication works

346
00:24:33,670 --> 00:24:36,832
almost the same way as using SSH keys.

347
00:24:36,976 --> 00:24:40,032
Now in this case you would configure

348
00:24:40,096 --> 00:24:44,084
clients and hosts to trust certificates issued by your CA.

349
00:24:44,282 --> 00:24:47,504
And to do this it would involve

350
00:24:47,552 --> 00:24:51,360
something like editing the SSHD config file

351
00:24:51,440 --> 00:24:55,224
on each host to specify the CA's public key so

352
00:24:55,262 --> 00:24:58,948
that that can be used to verify user certificates

353
00:24:59,124 --> 00:25:02,824
and then youll can also add. It would also involve you

354
00:25:02,862 --> 00:25:06,300
adding your CS public keys to each client's

355
00:25:06,720 --> 00:25:10,812
known host file to

356
00:25:10,866 --> 00:25:13,680
be used to verify host certificates.

357
00:25:15,140 --> 00:25:18,464
I won't go into the technical details of how

358
00:25:18,502 --> 00:25:23,184
this is set up because that's not what this talk is all about and

359
00:25:23,382 --> 00:25:27,488
different tools have different ways to do it. And some tools

360
00:25:27,664 --> 00:25:31,350
make this process automated. Yeah,

361
00:25:32,120 --> 00:25:35,892
I'll link to resources at the end. My duty theyre is to convince youll

362
00:25:35,946 --> 00:25:39,684
to consider using SSH certificates in your

363
00:25:39,722 --> 00:25:42,856
infrastructure, show you why they are great, and so you can

364
00:25:42,878 --> 00:25:46,090
consider using them in your infrastructure if you're not already.

365
00:25:47,580 --> 00:25:51,560
So as you can see in the image, when an SSH client

366
00:25:51,640 --> 00:25:54,984
tries to connect to a remote host, it first obtains

367
00:25:55,032 --> 00:25:58,684
a valid certificate from the CA and the

368
00:25:58,722 --> 00:26:02,104
host will typically get this host certificate when it is first

369
00:26:02,162 --> 00:26:06,336
deployed and then be renewed regularly from

370
00:26:06,358 --> 00:26:09,744
the CA, maybe each

371
00:26:09,782 --> 00:26:11,120
month on a timer,

372
00:26:18,200 --> 00:26:21,648
then also once. Then the user

373
00:26:21,744 --> 00:26:25,968
will also ask for a certificate and signed

374
00:26:25,984 --> 00:26:29,430
by the CA. Then when

375
00:26:29,960 --> 00:26:34,024
the client tries to connect to a host, the host asks for certificates from

376
00:26:34,062 --> 00:26:37,524
the client and confirms that it has been signed with the private

377
00:26:37,572 --> 00:26:43,064
key of the CA that it has been configured to trust using

378
00:26:43,102 --> 00:26:46,972
the CA's known public key. And then the client will also do the same

379
00:26:47,026 --> 00:26:50,492
and ask for a certificate from the host and verify that the

380
00:26:50,546 --> 00:26:54,160
host certificate has also been signed by the public

381
00:26:54,230 --> 00:26:57,490
key of the CA that it has been configured to trust.

382
00:26:58,020 --> 00:27:01,500
And then once certificates have been exchanged,

383
00:27:01,580 --> 00:27:04,716
the protocol would then proceed as it would with

384
00:27:04,758 --> 00:27:08,644
public key authentication. Now this brings me

385
00:27:08,762 --> 00:27:12,404
to the first reason why SSH certificates or

386
00:27:12,522 --> 00:27:16,400
using SSH certificate authentication is far superior

387
00:27:16,480 --> 00:27:20,490
to traditional SSH key authentication. And that's because

388
00:27:21,580 --> 00:27:25,348
the way SSH certificate authentication

389
00:27:25,444 --> 00:27:29,752
works immediately eliminates the trust

390
00:27:29,806 --> 00:27:33,470
on first use anti behavior that we talked about.

391
00:27:33,840 --> 00:27:37,196
So youll can have both clients and hosts can be

392
00:27:37,218 --> 00:27:40,328
sure that they are connecting to infrastructure that actually belongs

393
00:27:40,344 --> 00:27:44,156
to their organization. It creates a walled

394
00:27:44,188 --> 00:27:46,560
garden, which is great for organization.

395
00:27:47,700 --> 00:27:51,644
Another great thing about using SSH certificates is that they are easier

396
00:27:51,692 --> 00:27:54,936
to maintain and manage. That's after the initial

397
00:27:54,988 --> 00:27:58,704
setup. Static keys in authorized key files

398
00:27:58,752 --> 00:28:02,416
are no longer needed, and so you don't

399
00:28:02,448 --> 00:28:05,472
need to have scattered keys across your infrastructure.

400
00:28:05,616 --> 00:28:08,820
Instead, peers, clients,

401
00:28:09,240 --> 00:28:12,984
host, and clients learn one another's public keys on

402
00:28:13,022 --> 00:28:16,900
demand when connections are established. By exchanging

403
00:28:16,980 --> 00:28:20,504
certificates. Now, eliminating key approval

404
00:28:20,552 --> 00:28:24,216
and distribution processes has immediate

405
00:28:24,248 --> 00:28:27,772
operational benefits for organizations because

406
00:28:27,826 --> 00:28:31,544
you're no longer wasting up cycles on mundane key management

407
00:28:31,592 --> 00:28:35,484
tax, and you eliminate any ongoing cost associated

408
00:28:35,532 --> 00:28:39,648
with monitoring and maintaining homegrown machinery for

409
00:28:39,734 --> 00:28:43,468
adding, removing, synchronizing, or auditing

410
00:28:43,564 --> 00:28:47,620
static public key files across youll hosts.

411
00:28:48,920 --> 00:28:53,030
Now, also, because certificates allow for inclusion of

412
00:28:53,720 --> 00:28:57,044
metadata, you know exactly who

413
00:28:57,082 --> 00:29:00,356
a certificate belongs to. And then you

414
00:29:00,378 --> 00:29:04,100
can implement more fine granting access controls

415
00:29:04,180 --> 00:29:08,148
and you can have youll visibility. And when you have visibility,

416
00:29:08,244 --> 00:29:11,048
visibility makes way for things like governance,

417
00:29:11,144 --> 00:29:14,780
compliance and reporting.

418
00:29:19,710 --> 00:29:23,462
Now, the third and probably the most important reason to use SSH

419
00:29:23,526 --> 00:29:27,086
certificates is that SSH certificates expire and they

420
00:29:27,108 --> 00:29:31,354
can be revoked. You can define a validity period

421
00:29:31,482 --> 00:29:35,360
using the valid property that I talked about.

422
00:29:37,670 --> 00:29:41,010
That I talked about. So this little detail

423
00:29:41,080 --> 00:29:46,142
is so crucial because it encourages safe security practices

424
00:29:46,206 --> 00:29:49,874
and reduces companies risks, exposure and surface

425
00:29:49,922 --> 00:29:53,990
attack. Because unlike traditional public key authentication

426
00:29:54,490 --> 00:29:58,242
where key management oversight and that's like forgetting

427
00:29:58,306 --> 00:30:02,162
to remove an S employee's public key from a host

428
00:30:02,306 --> 00:30:05,562
results in SSH failing open and

429
00:30:05,696 --> 00:30:08,540
allowing unauthorized access without end.

430
00:30:08,990 --> 00:30:12,634
You can set up SSH certificates to be valid for say

431
00:30:12,752 --> 00:30:17,002
16 hours or longer or even shorter,

432
00:30:17,146 --> 00:30:21,534
depending on the exposure risks of the

433
00:30:21,732 --> 00:30:25,086
host that they will be used to

434
00:30:25,108 --> 00:30:28,910
assess. So even in an incident of a mistake

435
00:30:28,990 --> 00:30:33,678
or TEF or misuse or key filtration

436
00:30:33,854 --> 00:30:38,050
of any form, compromised SSH

437
00:30:38,730 --> 00:30:42,230
credentials or certificates will expire

438
00:30:43,050 --> 00:30:45,510
automatically without intervention.

439
00:30:46,010 --> 00:30:50,006
So before the attackers would

440
00:30:50,028 --> 00:30:53,386
have time to make sense of what they are

441
00:30:53,408 --> 00:30:56,090
doing, their assets would aspire.

442
00:30:57,790 --> 00:31:00,870
And that's what's so great about SSH

443
00:31:00,950 --> 00:31:04,798
certificates. Now,

444
00:31:04,884 --> 00:31:08,414
with all of this that I've shared, I hope that you're starting to

445
00:31:08,452 --> 00:31:11,662
see how SSH certificates can make your

446
00:31:11,716 --> 00:31:15,310
workflow secure,

447
00:31:15,730 --> 00:31:18,580
easier to operate, easier to manage,

448
00:31:19,190 --> 00:31:20,850
easier to automate.

449
00:31:22,070 --> 00:31:25,650
Now the next thing is to get into tooling.

450
00:31:27,510 --> 00:31:30,934
How can you start using SSH certificates? Because I

451
00:31:30,972 --> 00:31:35,186
do hope that from the little I've shared of how SSH certificates

452
00:31:35,298 --> 00:31:38,946
are superior to traditional SSH keys, that you're

453
00:31:38,978 --> 00:31:42,582
convinced to give SSH certificates a

454
00:31:42,636 --> 00:31:46,902
second thought and a deeper look, and try to discover

455
00:31:46,966 --> 00:31:50,090
how you can start adopting them in your infrastructure.

456
00:31:51,310 --> 00:31:54,462
Now there are a couple of open source tools that you can use.

457
00:31:54,596 --> 00:31:58,174
We have SSH keygen, which can

458
00:31:58,212 --> 00:32:01,694
generate root certificates and

459
00:32:01,732 --> 00:32:05,962
sign host certificates. There's also Netflix bless

460
00:32:06,026 --> 00:32:09,342
which is Netflix SSH certificate authority

461
00:32:09,406 --> 00:32:13,410
that runs in AWS Lambda and uses IAM.

462
00:32:14,150 --> 00:32:17,902
Then we have n Sheridan cashier,

463
00:32:18,046 --> 00:32:21,990
which is intercom's SSH. Can you have

464
00:32:22,140 --> 00:32:25,574
Uber palm SSh which lets you

465
00:32:25,612 --> 00:32:29,206
use SSh to authorize pseudo use?

466
00:32:29,388 --> 00:32:33,782
And then we have our very own smallstep labs

467
00:32:33,926 --> 00:32:37,674
step can. Now, I talked

468
00:32:37,712 --> 00:32:40,570
about SSH certificates being short lived.

469
00:32:40,910 --> 00:32:44,474
And in addition to that, I'm not very familiar

470
00:32:44,522 --> 00:32:47,854
with how other tools on dislikes works,

471
00:32:48,052 --> 00:32:51,840
but with small step can

472
00:32:52,370 --> 00:32:56,062
the private key and certificates always go into

473
00:32:56,196 --> 00:32:59,426
the SSH agent and nothing is

474
00:32:59,448 --> 00:33:02,946
stored on Dix. And so once the key and certificates is

475
00:33:02,968 --> 00:33:06,590
in the SSH agent, they can now be used for connections

476
00:33:06,750 --> 00:33:10,374
but theyre cannot be exported easily so it makes

477
00:33:10,412 --> 00:33:13,190
it difficult to steal SSH certificates.

478
00:33:13,690 --> 00:33:17,000
So in addition to SSH keys being easy to manage,

479
00:33:19,610 --> 00:33:23,382
having inclusion inclusivity

480
00:33:23,446 --> 00:33:27,354
for metadata which encourages more visibility and

481
00:33:27,392 --> 00:33:31,162
better audit trail, and not

482
00:33:31,216 --> 00:33:34,560
being short lived and

483
00:33:35,330 --> 00:33:38,320
using able to be revoked now,

484
00:33:39,410 --> 00:33:46,230
they are also much more resistant

485
00:33:46,410 --> 00:33:47,730
to theft.

486
00:33:49,430 --> 00:33:52,962
Now, I have to mention that the caveat of open

487
00:33:53,016 --> 00:33:56,254
source tools is that you have to do some setup

488
00:33:56,302 --> 00:33:59,860
yourself. You might have to probably build

489
00:34:00,890 --> 00:34:04,326
the foundation is there, the support is there, but then

490
00:34:04,348 --> 00:34:08,882
you now have to build out tooling for dashboard,

491
00:34:08,946 --> 00:34:12,058
for visibility, for auditing and

492
00:34:12,144 --> 00:34:13,020
so on.

493
00:34:16,270 --> 00:34:19,980
And that's why I'm using to mention that small step

494
00:34:20,670 --> 00:34:25,162
has a paid SSH product that offers complete lifecycle

495
00:34:25,226 --> 00:34:29,006
management, audit login and full visibility into all of

496
00:34:29,028 --> 00:34:32,526
your certificates. And you can manage and keep track of everything

497
00:34:32,628 --> 00:34:35,550
from one admin panel out of the boss.

498
00:34:36,210 --> 00:34:39,586
You just plug in and be on youll way. So I'll link to

499
00:34:39,608 --> 00:34:43,380
resources to learn more about it at the end of this talk,

500
00:34:46,390 --> 00:34:50,450
just to show you what SSH certificate authentication

501
00:34:50,610 --> 00:34:53,926
enables, let me just blow your mind for

502
00:34:53,948 --> 00:34:57,190
an instant. I really hope that your mind will be blown.

503
00:34:57,690 --> 00:35:01,598
In addition to all these advantages

504
00:35:01,714 --> 00:35:05,738
that I've talked about today associated with using

505
00:35:05,824 --> 00:35:09,734
SSH certificate authentication, SSH certificates

506
00:35:09,782 --> 00:35:13,718
authentication also allows for extensibility.

507
00:35:13,814 --> 00:35:17,982
Rather, you can issue SSH certificates via a

508
00:35:18,036 --> 00:35:21,870
variety of authentication mechanisms to facilitate

509
00:35:23,250 --> 00:35:26,826
better usability, which makes obtaining SSH

510
00:35:26,858 --> 00:35:30,830
certificates simpler and makes

511
00:35:30,900 --> 00:35:35,714
obtaining SSH certificate a more simpler and elegant experience

512
00:35:35,832 --> 00:35:40,520
for your users. So for instance, you can use,

513
00:35:41,930 --> 00:35:46,130
for instance, so do you know that you can use SSH with SSH?

514
00:35:46,290 --> 00:35:49,814
And that's so awesome because just imagine this,

515
00:35:49,932 --> 00:35:53,990
a developer starts their day and they want to ssh into a host.

516
00:35:54,150 --> 00:35:57,786
They type SSh username into a client and they are taken to a

517
00:35:57,808 --> 00:36:01,962
screen requesting them to sign in via your

518
00:36:02,016 --> 00:36:05,706
company's or your organization's identity provider.

519
00:36:05,898 --> 00:36:09,758
And once the developer completes their SSO sign in,

520
00:36:09,844 --> 00:36:13,274
a better token or can OIDC identity

521
00:36:13,322 --> 00:36:17,090
token is returned to the login utility.

522
00:36:17,910 --> 00:36:21,790
Now using this token, the utility

523
00:36:21,870 --> 00:36:25,954
generates a new key pair and requests a signed certificates from the

524
00:36:25,992 --> 00:36:29,926
CA. So then

525
00:36:30,028 --> 00:36:34,070
the developer is then issued an SSH certificate with an expiry

526
00:36:35,610 --> 00:36:38,722
time, long enough for a workday, say 16

527
00:36:38,786 --> 00:36:42,066
hours or 20 hours, and the certificate is stored

528
00:36:42,098 --> 00:36:46,122
in memory and now they can use it to assess SSH hosts as

529
00:36:46,176 --> 00:36:49,514
usual. How cool is that? You bring youll

530
00:36:49,552 --> 00:36:53,226
IDP and we bring the ssh and mash it together and you

531
00:36:53,248 --> 00:36:57,898
have a seamless SSH experience for your developers

532
00:36:57,994 --> 00:36:59,230
and users.

533
00:37:00,690 --> 00:37:04,206
Now this is what small step SSH does,

534
00:37:04,308 --> 00:37:08,900
and by default, small step SSH means

535
00:37:10,070 --> 00:37:14,382
a 16 hours certificate to cover a workday, and subsequent

536
00:37:14,446 --> 00:37:18,110
SSH sessions won't require reauthenticating

537
00:37:18,190 --> 00:37:20,470
until the certificate expires.

538
00:37:21,690 --> 00:37:24,834
Now, with a seamless OICD sign in flow

539
00:37:24,882 --> 00:37:28,758
like this, it's easy to enforce your existing security

540
00:37:28,844 --> 00:37:32,860
policies like multifactor authentication or

541
00:37:34,190 --> 00:37:37,094
using Fido U twelve security keys.

542
00:37:37,222 --> 00:37:40,826
And the cool thing about this is that removing a

543
00:37:40,848 --> 00:37:44,146
user from your identity provider automatically terminates

544
00:37:44,198 --> 00:37:48,014
their SSH access in seconds. I mean, if you ask me,

545
00:37:48,052 --> 00:37:51,434
that's like the coolest thing. So now when a developer

546
00:37:51,482 --> 00:37:55,214
leaves your company and their IDP access

547
00:37:55,332 --> 00:37:58,674
is revoked, they lose all SSH access.

548
00:37:58,792 --> 00:38:02,754
So you no longer have to worry about having rogue or

549
00:38:02,872 --> 00:38:06,386
unidentified SSh keys lying around in

550
00:38:06,408 --> 00:38:10,040
your infrastructure. That's no longer a threat. Yeah,

551
00:38:10,490 --> 00:38:14,162
no more unused keys using around and needing

552
00:38:14,226 --> 00:38:17,750
to somehow get keys off every host,

553
00:38:18,170 --> 00:38:21,160
that's no longer a threat or a problem.

554
00:38:24,590 --> 00:38:28,700
And still talking about small step,

555
00:38:33,810 --> 00:38:39,582
we also have can

556
00:38:39,636 --> 00:38:42,954
integration with a tool called indent and it lets

557
00:38:43,002 --> 00:38:46,990
users request access to company resources

558
00:38:47,490 --> 00:38:50,786
that they need to do their job of Yaslac. And this is just to show

559
00:38:50,808 --> 00:38:54,050
you what's possible. There is so much more that is possible

560
00:38:54,200 --> 00:38:57,010
with using SSH certificates.

561
00:38:57,430 --> 00:39:00,802
So by adding intense on demand

562
00:39:00,866 --> 00:39:05,480
access control to small step, now approvers can

563
00:39:06,170 --> 00:39:10,134
approve and review requests and

564
00:39:10,172 --> 00:39:13,770
initiate certificate generation process right from

565
00:39:13,840 --> 00:39:18,182
Slack. And this is helpful in cases where external

566
00:39:18,246 --> 00:39:21,898
consultants not in your organization need to get access,

567
00:39:22,064 --> 00:39:25,966
or you want users to just be able to request access

568
00:39:26,068 --> 00:39:29,982
to SSH into hosts on demand instead

569
00:39:30,036 --> 00:39:33,550
of mapping host to users from your identity providers.

570
00:39:33,970 --> 00:39:37,934
It's super awesome. And I

571
00:39:37,972 --> 00:39:40,354
mean, do I need to say more?

572
00:39:40,552 --> 00:39:43,874
Honestly, do I need to say more? I don't know about you,

573
00:39:43,912 --> 00:39:48,158
but at this point, if I were listening to myself, I'll probably be sold.

574
00:39:48,334 --> 00:39:51,782
Yeah, like I mentioned at small step,

575
00:39:51,836 --> 00:39:56,230
we're convinced that SSH certificates are the best way to do SSH,

576
00:39:56,570 --> 00:40:00,610
and they are not hard to understand. The initial

577
00:40:00,690 --> 00:40:05,690
setup might be a little bit involving,

578
00:40:06,030 --> 00:40:10,230
but it's well worth the effort. And I believe that SSH certificates

579
00:40:10,310 --> 00:40:13,500
demand more press and broader use.

580
00:40:13,890 --> 00:40:17,742
And so at this point, I really hope that you

581
00:40:17,796 --> 00:40:21,466
consider using SSH certificates in your infrastructure

582
00:40:21,578 --> 00:40:25,342
and in your organization. So you can either use open

583
00:40:25,396 --> 00:40:29,290
source step ca SSH enabled certificate authority,

584
00:40:29,450 --> 00:40:32,642
you just have to knock out a few things on your own, and we even

585
00:40:32,696 --> 00:40:36,146
have a video tutorial that you can follow to

586
00:40:36,168 --> 00:40:40,082
do that and set that up in your home lab, or to test

587
00:40:40,136 --> 00:40:43,942
it out and then for your organization. Or if you want to get

588
00:40:43,996 --> 00:40:47,906
a lot of futures right off the bat, you can check out SSH

589
00:40:48,018 --> 00:40:51,414
pro and take it for a spin via a free

590
00:40:51,452 --> 00:40:55,186
trial. And as I mentioned, here are some links

591
00:40:55,218 --> 00:40:59,030
that you can check out to learn more about how

592
00:40:59,180 --> 00:41:03,170
to start using SSH certificates in your infrastructure

593
00:41:03,250 --> 00:41:06,926
today. And that brings me to the end of this talk. I hope I

594
00:41:06,948 --> 00:41:11,162
have convinced you and not confused you that SSH certificates

595
00:41:11,226 --> 00:41:14,586
are the right way to do SSH authentication.

596
00:41:14,778 --> 00:41:15,760
Thank you,

