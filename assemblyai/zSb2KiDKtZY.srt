1
00:00:34,530 --> 00:00:38,022
Hello and welcome to my talk on environments as a service.

2
00:00:38,156 --> 00:00:41,446
I'm really happy to have you here, and through this talk I

3
00:00:41,468 --> 00:00:44,854
hope I can introduce you both theoretically and

4
00:00:44,892 --> 00:00:48,280
practically into environments as a service and

5
00:00:48,970 --> 00:00:52,334
FMR environment in 30 to 40 minutes.

6
00:00:52,532 --> 00:00:56,222
Environments EAas a service can definitely help increase both

7
00:00:56,276 --> 00:01:01,306
productivity and improve the developer experience solving

8
00:01:01,418 --> 00:01:05,518
current issues in terms of environment management.

9
00:01:05,694 --> 00:01:09,710
Environments as a service is about empowering developers

10
00:01:09,870 --> 00:01:13,778
to create production like environments to be used

11
00:01:13,944 --> 00:01:17,826
for both development and staging purposes.

12
00:01:18,018 --> 00:01:21,654
And the purpose is actually to allow developers to

13
00:01:21,692 --> 00:01:24,360
concentrate on direct,

14
00:01:24,970 --> 00:01:28,682
productive activities, such as coding or

15
00:01:28,736 --> 00:01:32,506
application architecture, or to invest more time

16
00:01:32,608 --> 00:01:34,730
in automated tests.

17
00:01:35,950 --> 00:01:39,674
So let's dive in, shall we? In this

18
00:01:39,712 --> 00:01:43,178
talk, we'll discuss about current challenges

19
00:01:43,274 --> 00:01:46,862
faced by engineering teams in terms of environments that

20
00:01:46,916 --> 00:01:51,006
they're using. Then we'll take a look at

21
00:01:51,108 --> 00:01:54,734
possible solutions and see the benefits they

22
00:01:54,772 --> 00:01:58,834
bring into the environments equation, and we'll also

23
00:01:58,952 --> 00:02:02,498
see how all of this actually works inside

24
00:02:02,584 --> 00:02:06,498
bunny shell, and then we'll

25
00:02:06,514 --> 00:02:10,498
wrap it up. So, in terms of challenges

26
00:02:10,594 --> 00:02:14,354
faced by engineering teams, they are different. For each role,

27
00:02:14,482 --> 00:02:17,486
software engineers face their constraints,

28
00:02:17,618 --> 00:02:21,386
which limit their possibilities or consume time in a

29
00:02:21,408 --> 00:02:24,602
recurrent manner, like working with

30
00:02:24,656 --> 00:02:28,342
simulated dependencies. This means uncovering integration

31
00:02:28,406 --> 00:02:32,094
issues pretty late in the process, which in turn

32
00:02:32,292 --> 00:02:36,110
generates significant rework as a ticket

33
00:02:37,010 --> 00:02:40,250
needs to be raised, then documents

34
00:02:40,330 --> 00:02:44,082
the whole context, and only after that, the entire process

35
00:02:44,216 --> 00:02:47,330
basically rewinds. The ticket reaches the developer,

36
00:02:47,990 --> 00:02:51,970
a fix is produced, a test is remade, but in the meantime,

37
00:02:52,790 --> 00:02:56,118
some time has passed, the developer has lost focus

38
00:02:56,204 --> 00:03:00,194
on this task, and so on and so forth. I'm sure you're familiar

39
00:03:00,242 --> 00:03:04,200
with what I'm talking about. Another issue is that

40
00:03:06,650 --> 00:03:10,982
limited laptop resources imply

41
00:03:11,046 --> 00:03:15,270
juggling with ad hoc partial environments.

42
00:03:15,430 --> 00:03:19,482
So they basically fit into the local machine and

43
00:03:19,616 --> 00:03:23,354
they deliver a subpar performance. Sometimes it's

44
00:03:23,402 --> 00:03:26,430
outright frustrating, to say the least,

45
00:03:26,580 --> 00:03:29,450
and this is a real turn off. Unfortunately,

46
00:03:29,530 --> 00:03:32,880
while being in the zone, in the focus

47
00:03:33,510 --> 00:03:37,918
area of the day, maintaining your environment,

48
00:03:38,014 --> 00:03:41,970
working, often it's left unnoticed.

49
00:03:42,310 --> 00:03:45,730
But it's a lot of effort

50
00:03:45,890 --> 00:03:49,574
put into there, and therefore, time is

51
00:03:49,612 --> 00:03:53,314
actually spent away from a developer's

52
00:03:53,362 --> 00:03:57,198
main activities, direct, productive activities, as I've

53
00:03:57,394 --> 00:03:58,970
referred them earlier,

54
00:04:00,830 --> 00:04:04,374
QA engineers, they face other challenges,

55
00:04:04,502 --> 00:04:08,380
which in turn create bottlenecks and also consume time.

56
00:04:10,290 --> 00:04:12,878
It all boils down to time, basically,

57
00:04:12,964 --> 00:04:16,634
right? It's the most precious resource

58
00:04:16,682 --> 00:04:20,394
that we have. So for QA,

59
00:04:20,442 --> 00:04:24,162
having a small number of environments, often that

60
00:04:24,216 --> 00:04:27,362
small number is actually one. Or in many

61
00:04:27,416 --> 00:04:30,546
teams, it's less than one because they share an

62
00:04:30,568 --> 00:04:33,982
environment. Multiple QA engineers share an environment,

63
00:04:34,126 --> 00:04:38,050
and this greatly limits their exploratory testing

64
00:04:38,130 --> 00:04:41,414
in terms of time and both creativity as

65
00:04:41,452 --> 00:04:45,430
it's unnecessary stress and it obviously

66
00:04:45,500 --> 00:04:49,558
rushes the process of validating or actually testing

67
00:04:49,654 --> 00:04:52,714
changes. And I personally know more than

68
00:04:52,752 --> 00:04:56,758
a few Q engineers who basically shifted

69
00:04:56,854 --> 00:05:00,202
their working schedule only

70
00:05:00,256 --> 00:05:04,910
so they can have an environment to work on uninterrupted

71
00:05:05,250 --> 00:05:09,242
during off time for developers or for other Q engineers.

72
00:05:09,306 --> 00:05:13,234
And that's really a shame because we

73
00:05:13,272 --> 00:05:16,100
really have the tools to fix this today.

74
00:05:17,910 --> 00:05:21,186
Another issue is that testing a

75
00:05:21,208 --> 00:05:25,254
feature together with other related but actually

76
00:05:25,292 --> 00:05:28,546
separate features creates additional complexity.

77
00:05:28,738 --> 00:05:33,350
And while trying to isolate a scenario

78
00:05:33,930 --> 00:05:37,522
or maybe reverse engineer something weird

79
00:05:37,586 --> 00:05:41,846
that happened, you definitely don't need this additional complexity

80
00:05:41,878 --> 00:05:45,514
into your process. And unfortunately this

81
00:05:45,552 --> 00:05:49,034
is the status quo. It's something that has

82
00:05:49,072 --> 00:05:52,560
become the status quo over the years. Actually,

83
00:05:53,010 --> 00:05:57,198
for far too long this status quo was perceived as

84
00:05:57,284 --> 00:06:01,050
the cost of doing business. But it really doesn't

85
00:06:01,130 --> 00:06:04,418
need to be like this. We now have all the

86
00:06:04,424 --> 00:06:08,334
tools available to make things better. We have containerization,

87
00:06:08,462 --> 00:06:12,370
we have container orchestration that really works

88
00:06:12,440 --> 00:06:16,614
at scale. And fortunately we

89
00:06:16,652 --> 00:06:19,862
see that environments as a service, sorry,

90
00:06:19,996 --> 00:06:25,222
is starting to become a thing moving

91
00:06:25,276 --> 00:06:29,162
towards the solution. Self service is actually the only

92
00:06:29,216 --> 00:06:33,430
way to move forward, really. Decoupling the dependency

93
00:06:33,510 --> 00:06:38,102
on developers engineers for pre productive systems and allowing

94
00:06:38,166 --> 00:06:41,870
developers to focus on productive system

95
00:06:42,020 --> 00:06:45,322
is truly a must. And I personally

96
00:06:45,386 --> 00:06:49,630
don't know of any company who wouldn't love to achieve

97
00:06:49,970 --> 00:06:53,586
this status. So on

98
00:06:53,608 --> 00:06:56,290
demand environments and preview environments,

99
00:06:57,350 --> 00:07:01,710
they unlock the ability to test features in isolation

100
00:07:01,870 --> 00:07:06,386
and greatly enhance the collaboration between stakeholders,

101
00:07:06,498 --> 00:07:10,454
the product team and the engineering team, and with other

102
00:07:10,492 --> 00:07:14,342
teams from the companies as well. Support for

103
00:07:14,396 --> 00:07:17,806
trainings and there are many scenarios.

104
00:07:17,858 --> 00:07:21,100
Actually, I'm not going to get into this at this time.

105
00:07:21,950 --> 00:07:25,034
Another very important aspect is

106
00:07:25,072 --> 00:07:28,634
remote development. This allows developers to

107
00:07:28,672 --> 00:07:32,814
start coding on a project within minutes. Obviously once

108
00:07:32,852 --> 00:07:36,686
an environment configuration has been defined, but after that it

109
00:07:36,708 --> 00:07:39,934
can be replicated and it can be

110
00:07:39,972 --> 00:07:43,954
definitely started within minutes. The code will

111
00:07:44,072 --> 00:07:47,746
basically run in a Kubernetes container and the environment will

112
00:07:47,768 --> 00:07:51,134
reflect changes in real time. With debugging

113
00:07:51,182 --> 00:07:54,722
capabilities, the development experience does

114
00:07:54,776 --> 00:07:58,402
not change at all. You can use your favorite

115
00:07:58,466 --> 00:08:02,054
id and the same debugging tools that you're used to,

116
00:08:02,092 --> 00:08:08,138
so everything should be already familiar and

117
00:08:08,224 --> 00:08:12,522
costs. Any viable solution must however,

118
00:08:12,656 --> 00:08:16,554
take costs into consideration, and I'm really

119
00:08:16,592 --> 00:08:19,706
sure that I don't need to go deeper on

120
00:08:19,728 --> 00:08:23,614
this topic. Before seeing the benefits,

121
00:08:23,732 --> 00:08:27,162
I would also like to graphically

122
00:08:27,226 --> 00:08:30,670
present what shortening the feedback loop actually

123
00:08:30,740 --> 00:08:34,322
means. Instead of merging and then deploying the code

124
00:08:34,376 --> 00:08:36,690
into an integration branch,

125
00:08:37,430 --> 00:08:41,630
it means you have real time feedback while developing.

126
00:08:41,790 --> 00:08:45,582
This is what it's all about when it comes to development

127
00:08:45,646 --> 00:08:49,494
environments, and real time feedback also

128
00:08:49,532 --> 00:08:52,806
has a performance component attached to it. So the

129
00:08:52,828 --> 00:08:56,770
performance of the cloud machines is far superior

130
00:08:56,930 --> 00:09:00,300
to even the best of local computing power.

131
00:09:00,910 --> 00:09:04,694
And we've felt that firsthand here at Bunnyshell.

132
00:09:04,742 --> 00:09:08,774
And this is beyond any doubt zooming

133
00:09:08,822 --> 00:09:12,010
in a bit on the process of development.

134
00:09:12,170 --> 00:09:16,910
Let's compare what traditional developers with testing

135
00:09:17,330 --> 00:09:20,526
real services looks like for most of the

136
00:09:20,548 --> 00:09:23,906
companies today. By services I

137
00:09:23,928 --> 00:09:27,566
mean cloud native services or other kinds

138
00:09:27,598 --> 00:09:31,570
of external third party dependencies.

139
00:09:32,070 --> 00:09:36,694
I'm sure that you get it and

140
00:09:36,732 --> 00:09:40,742
this is what it can look like also

141
00:09:40,796 --> 00:09:44,470
today or tomorrow or pretty soon. Either way,

142
00:09:44,540 --> 00:09:48,662
it really depends on you. You can have instant feedback

143
00:09:48,726 --> 00:09:52,374
instead of needing to continuously commit and push,

144
00:09:52,422 --> 00:09:56,534
then wait for a build and deploy. And if it doesn't

145
00:09:56,582 --> 00:10:00,060
work for the first time, as it usually does,

146
00:10:00,450 --> 00:10:03,806
it's a rinse and repeat procedure. I know you

147
00:10:03,828 --> 00:10:07,054
feel like life is going past you when

148
00:10:07,092 --> 00:10:11,214
you wait for a pipeline to finish with fingers being

149
00:10:11,252 --> 00:10:15,054
crossed. And that's what we are referring

150
00:10:15,102 --> 00:10:18,846
to as idle time here at Binichel,

151
00:10:18,958 --> 00:10:22,930
time that's left totally unused.

152
00:10:24,550 --> 00:10:28,438
So the benefits, some of them we've already

153
00:10:28,524 --> 00:10:32,994
touched until now. But mainly there are productivity

154
00:10:33,042 --> 00:10:36,806
increase, which also brings in inherent quality

155
00:10:36,908 --> 00:10:40,902
increase, far less context

156
00:10:41,046 --> 00:10:44,906
switching. And this allows engineers to truly focus

157
00:10:45,088 --> 00:10:49,180
and let me ask you a question. When was it the last time

158
00:10:49,710 --> 00:10:53,482
you were as an engineer in the conf

159
00:10:53,546 --> 00:10:59,226
fourty two or maybe 3 hours of uninterrupted

160
00:10:59,338 --> 00:11:03,346
session of work? And yeah,

161
00:11:03,528 --> 00:11:05,780
that's quite a challenge. Unfortunately, today,

162
00:11:07,030 --> 00:11:10,866
moving forward, processes are streamlined as bottlenecks are

163
00:11:10,888 --> 00:11:14,782
removed along the way. Releases can also flow better

164
00:11:14,936 --> 00:11:18,802
as one single issue will not block multiple

165
00:11:18,866 --> 00:11:22,246
changes going live. The quality of the

166
00:11:22,268 --> 00:11:25,590
reviews grows exponentially when the reviewer can also test

167
00:11:25,660 --> 00:11:29,862
the code. And I don't refer here just to uis.

168
00:11:30,006 --> 00:11:33,254
Interacting with application allows for a faster,

169
00:11:33,382 --> 00:11:37,002
deeper understanding of how a system works

170
00:11:37,136 --> 00:11:40,494
and how the user can also interact with

171
00:11:40,532 --> 00:11:44,938
it. Also, shareholder feedback

172
00:11:45,114 --> 00:11:47,360
can come in much early,

173
00:11:47,970 --> 00:11:51,550
shortening the overall feedback loop.

174
00:11:53,030 --> 00:11:56,978
Self service obviously allows DevOps engineer already

175
00:11:57,064 --> 00:12:01,074
swamped with work to do. It allows them to focus

176
00:12:01,192 --> 00:12:04,514
on what is most important, and by

177
00:12:04,552 --> 00:12:07,110
this I mean the production systems.

178
00:12:08,170 --> 00:12:11,858
Last but definitely not least, onboarding becomes

179
00:12:11,874 --> 00:12:15,494
a bliss for new people joining a team. It really makes

180
00:12:15,532 --> 00:12:19,498
a huge difference to learn an application while it's up and running,

181
00:12:19,584 --> 00:12:22,778
as opposed to figuring out things while

182
00:12:22,864 --> 00:12:26,778
it's still trying to fix your

183
00:12:26,864 --> 00:12:30,880
local setup at the same time, isn't it?

184
00:12:31,250 --> 00:12:34,878
So, enough talk, let's see some action too.

185
00:12:34,964 --> 00:12:39,310
It's time for the demo. So to

186
00:12:39,460 --> 00:12:42,554
demonstrate the value of environment as a service,

187
00:12:42,692 --> 00:12:46,514
I will next deploy an application starting from

188
00:12:46,552 --> 00:12:49,922
a Docker compose file, which many teams already

189
00:12:49,976 --> 00:12:54,142
have today. But you can definitely use kubernetes

190
00:12:54,206 --> 00:12:57,814
manifest or helm chart if you have them, and you

191
00:12:57,852 --> 00:13:01,366
can obviously use combinations of them, you're not restricted to

192
00:13:01,388 --> 00:13:04,310
a single type of component within an environment.

193
00:13:04,730 --> 00:13:08,554
Afterwards I will start a development session to

194
00:13:08,592 --> 00:13:12,246
demonstrate how it actually works from a user's

195
00:13:12,278 --> 00:13:16,060
productive and ultimately I will perform some

196
00:13:16,430 --> 00:13:20,170
debugging while in the remote development setup.

197
00:13:21,330 --> 00:13:25,434
Due to time constraints, we'll be working with a simple application, simple scenarios,

198
00:13:25,482 --> 00:13:29,102
but nevertheless real world

199
00:13:29,236 --> 00:13:32,670
scenarios. So having more components

200
00:13:33,190 --> 00:13:36,546
in an environment or having many more lines of

201
00:13:36,568 --> 00:13:40,340
code doesn't really change the principles demonstrated here.

202
00:13:41,110 --> 00:13:45,054
Enough talk, let's dive into the Bunnyshell

203
00:13:45,182 --> 00:13:50,034
platform. Sorry for that. So I

204
00:13:50,072 --> 00:13:54,006
switched over to Bunnyshell and

205
00:13:54,028 --> 00:13:58,540
I'm going to create an environment. I'm going to name it comfort demo

206
00:14:01,070 --> 00:14:04,438
created. I can create it from Docker compose and chart

207
00:14:04,454 --> 00:14:08,134
kubernetes manifest. As I already said, you can also use terraform

208
00:14:08,182 --> 00:14:12,094
modules, but we'll definitely not go into this demo.

209
00:14:12,212 --> 00:14:15,786
And you can use existing Bonnie shell templates,

210
00:14:15,978 --> 00:14:19,598
but these are not the scope of this demo either.

211
00:14:19,684 --> 00:14:23,570
So I'm going to select GitHub account this is

212
00:14:23,640 --> 00:14:26,946
an account that I have integrated earlier, and I'm going to

213
00:14:26,968 --> 00:14:32,274
use our demo books application on

214
00:14:32,312 --> 00:14:35,634
the master branch. This is a GitHub repository

215
00:14:35,682 --> 00:14:39,160
containing a Docker compose file and

216
00:14:39,610 --> 00:14:43,490
pretty simple setup composed out of a backend

217
00:14:43,650 --> 00:14:47,030
postgres database and react frontend application.

218
00:14:47,180 --> 00:14:50,570
The backend is written in node and

219
00:14:50,720 --> 00:14:54,380
after parsing it Bunnyshell has generated for me

220
00:14:55,070 --> 00:14:58,362
AnamL, which is basically

221
00:14:58,416 --> 00:15:01,234
the definition of the environment in Bunnyshell.

222
00:15:01,302 --> 00:15:04,910
We'll look into it a bit later

223
00:15:04,980 --> 00:15:08,762
down the line. In order to save some time, I'm going to deploy the environment

224
00:15:08,826 --> 00:15:12,618
first. So this is the environment details

225
00:15:12,634 --> 00:15:16,386
screen which I'm on. I'm going to click deploy the environments. Eaas going to

226
00:15:16,408 --> 00:15:19,490
select the Kubernetes cluster, which is the

227
00:15:19,560 --> 00:15:23,026
dev cluster for me. It's a cluster that we have connected to

228
00:15:23,048 --> 00:15:27,258
our organization, but you can also use the Binichelmanage

229
00:15:27,294 --> 00:15:30,214
cluster to try things out or see how it goes.

230
00:15:30,412 --> 00:15:33,730
I'm going to create a custom URL,

231
00:15:33,810 --> 00:15:37,942
a personalized URL for this environment named Conf

232
00:15:37,996 --> 00:15:40,650
fourty two, and I'm going to hit deploy.

233
00:15:41,230 --> 00:15:45,130
What happens now is that the environments has become

234
00:15:45,200 --> 00:15:48,890
queued and as soon as the worker frees up it will

235
00:15:49,040 --> 00:15:52,686
pick up the environment, perform the build and

236
00:15:52,788 --> 00:15:57,934
the deployment, and it

237
00:15:57,972 --> 00:16:01,390
has already started. The environment is already deploying because I already

238
00:16:01,460 --> 00:16:05,374
deployed it earlier and I had the builds

239
00:16:05,422 --> 00:16:08,642
cached. So this is something that definitely helps you

240
00:16:08,696 --> 00:16:12,386
save time in case things are not changed to an

241
00:16:12,408 --> 00:16:16,498
environment or multiple environments. Multiple colleagues

242
00:16:16,594 --> 00:16:20,038
deployed the same, I don't know, master branch for the

243
00:16:20,044 --> 00:16:23,654
front end, for example. This is a pipeline that was

244
00:16:23,692 --> 00:16:27,298
generated for this environment,

245
00:16:27,394 --> 00:16:30,380
and depending on how the environment looks like,

246
00:16:30,910 --> 00:16:33,610
your pipeline might look differently.

247
00:16:34,190 --> 00:16:37,834
As I said, going back to the configuration, let's see what

248
00:16:37,872 --> 00:16:42,640
it's all about. So I have here a back end application

249
00:16:43,170 --> 00:16:46,682
component which is for this repository,

250
00:16:46,826 --> 00:16:50,106
the master branch, and it's located in the backend folder.

251
00:16:50,138 --> 00:16:53,214
It's a Monorepo under Docker compose.

252
00:16:53,262 --> 00:16:57,214
You have, well, Docker compose syntax, probably you're

253
00:16:57,262 --> 00:17:01,342
already familiar with that. And we also have host

254
00:17:01,406 --> 00:17:05,074
exposed here which has

255
00:17:05,112 --> 00:17:08,626
a backend prefix, and then the environment based domain

256
00:17:08,658 --> 00:17:12,374
is interpolated here you'll see how the environment looks

257
00:17:12,412 --> 00:17:15,942
like in a bit. There's also a database which is

258
00:17:15,996 --> 00:17:20,170
already said postgres. It's using the standard postgres image,

259
00:17:20,750 --> 00:17:24,550
exposes some ports, internally exposes

260
00:17:24,710 --> 00:17:27,914
no hosts, sorry, externally. And it

261
00:17:27,952 --> 00:17:31,206
also has a volume, a persistent volume attached persistent

262
00:17:31,238 --> 00:17:35,550
volume which is defined at the bottom, very similar to Docker compose.

263
00:17:36,130 --> 00:17:39,760
There's also a front end application which receives the

264
00:17:40,690 --> 00:17:44,346
backend URL as a build argument.

265
00:17:44,538 --> 00:17:47,680
So this is it.

266
00:17:49,490 --> 00:17:53,040
Let's wait for the pipeline to finish.

267
00:17:53,810 --> 00:17:58,038
And it's still currently

268
00:17:58,124 --> 00:18:02,070
deploying. I'm going to go a bit into the settings

269
00:18:03,930 --> 00:18:07,282
to also show you the availability rules I mentioned, the cost

270
00:18:07,436 --> 00:18:11,114
consciousness of the platform, of any

271
00:18:11,152 --> 00:18:14,762
environment as a service platform. And I can

272
00:18:14,896 --> 00:18:19,034
select here, I don't know, let's say want to

273
00:18:19,072 --> 00:18:23,134
have environments running from 09:00 a.m.

274
00:18:23,172 --> 00:18:26,654
To 06:00 p.m. From Monday to Friday. I can

275
00:18:26,772 --> 00:18:29,520
have this, I'm going to save it actually,

276
00:18:30,450 --> 00:18:34,450
and the environment will follow these rules.

277
00:18:35,030 --> 00:18:38,210
Obviously you can define environments eaas,

278
00:18:38,710 --> 00:18:42,082
you can also define application variables, which are

279
00:18:42,136 --> 00:18:45,922
basically environment variables

280
00:18:45,986 --> 00:18:49,510
at an application layer. And we have some

281
00:18:49,660 --> 00:18:52,520
defined for the back end application.

282
00:18:52,970 --> 00:18:56,774
For example it's the database credentials and also the front

283
00:18:56,812 --> 00:19:00,090
end URL for the cars.

284
00:19:00,670 --> 00:19:04,042
So I'm going to

285
00:19:04,096 --> 00:19:07,894
go a bit into the pipeline and we can see that the deployment

286
00:19:07,942 --> 00:19:11,754
is also almost finished. It's finished

287
00:19:11,802 --> 00:19:15,662
successfully. As a side note, we can see

288
00:19:15,716 --> 00:19:20,062
that we have here

289
00:19:20,116 --> 00:19:23,726
under the component we have the Kubernetes resources and

290
00:19:23,748 --> 00:19:28,154
I can click the deployment and this will show me the.

291
00:19:28,292 --> 00:19:32,574
These are the actual live container

292
00:19:32,622 --> 00:19:36,134
logs. It's the container output for my back end services. I can also

293
00:19:36,172 --> 00:19:39,430
see the Kubernetes events attached to

294
00:19:39,500 --> 00:19:43,382
this deployment and the actual manifest which

295
00:19:43,436 --> 00:19:47,026
was deployed. So let's

296
00:19:47,138 --> 00:19:49,260
see how the application looks like.

297
00:19:50,990 --> 00:19:54,934
There's a small issue with the front end application. Let's debug

298
00:19:54,982 --> 00:19:58,934
it, let's see what's

299
00:19:59,062 --> 00:19:59,980
the cause.

300
00:20:02,210 --> 00:20:05,950
So I'm going to go to the front end deployment

301
00:20:06,610 --> 00:20:09,998
and I can see that the application actually

302
00:20:10,084 --> 00:20:13,474
started now, so it

303
00:20:13,512 --> 00:20:16,100
was a bit lazy to start.

304
00:20:17,350 --> 00:20:25,514
That's fine. So I'm going to add a book conf

305
00:20:25,552 --> 00:20:29,674
fourty two book it called the API stored in the database.

306
00:20:29,802 --> 00:20:33,326
Refresh the page just to prove that we

307
00:20:33,348 --> 00:20:37,360
have persistence. And going back into

308
00:20:38,210 --> 00:20:41,890
Bunny Shell I said that

309
00:20:41,960 --> 00:20:45,394
remote development is the next thing. So let's copy this

310
00:20:45,432 --> 00:20:49,982
command and I'm going to switch over to my webstorm

311
00:20:50,126 --> 00:20:53,700
since this is Javascript application,

312
00:20:54,170 --> 00:20:57,574
but obviously you can

313
00:20:57,612 --> 00:21:00,886
use your own id, any id you prefer to.

314
00:21:00,988 --> 00:21:05,318
So I already have the demo books repository cloned. It's in the

315
00:21:05,484 --> 00:21:09,306
playground demo books path and

316
00:21:09,328 --> 00:21:12,970
I'm going to open a terminal. I can see that

317
00:21:13,040 --> 00:21:16,298
I have here the backend application. I'm going

318
00:21:16,304 --> 00:21:19,614
to go into the folder and run the command here.

319
00:21:19,812 --> 00:21:24,026
Obviously the BNS command requires

320
00:21:24,058 --> 00:21:27,614
you to install our CLI and then authenticate with

321
00:21:27,652 --> 00:21:30,110
it. I have done this prior.

322
00:21:31,030 --> 00:21:34,820
Remote development can be done in one of two ways,

323
00:21:35,670 --> 00:21:38,894
with local files, which is the method I'm demonstrating

324
00:21:38,942 --> 00:21:42,962
now, or without local files, which doesn't fit

325
00:21:43,016 --> 00:21:46,758
into the scope of this demo. So what I

326
00:21:46,764 --> 00:21:50,102
need to provide now is the local path, which is the current

327
00:21:50,156 --> 00:21:53,394
folder which I'm in, and also the remote path

328
00:21:53,442 --> 00:21:57,514
which is the path which I

329
00:21:57,552 --> 00:22:01,146
know from the container. It's the work there. From the container is

330
00:22:01,168 --> 00:22:05,194
the path from the container in which the application

331
00:22:05,312 --> 00:22:08,346
is located. So what happens now is

332
00:22:08,368 --> 00:22:13,294
that Bonnie shell changes my pod definition so

333
00:22:13,332 --> 00:22:16,494
that my local files are synced into

334
00:22:16,532 --> 00:22:19,438
the container. I'm not going to go into too much detail,

335
00:22:19,524 --> 00:22:23,918
but on the surface I can tell you that we're using mutagen

336
00:22:24,094 --> 00:22:27,810
to synchronize the files from local into your container.

337
00:22:29,590 --> 00:22:33,434
The files are synchronized now and the pod definition

338
00:22:33,502 --> 00:22:38,550
is changed and it has succeeded.

339
00:22:39,130 --> 00:22:42,790
Now I'm actually in the container.

340
00:22:44,330 --> 00:22:47,974
So what I can see now is the application

341
00:22:48,092 --> 00:22:51,526
folder structure within the container. Now I

342
00:22:51,548 --> 00:22:56,566
need to start my application and

343
00:22:56,588 --> 00:22:59,662
I'm going to start it by running vm run

344
00:22:59,716 --> 00:23:03,710
start dev. I can obviously see that

345
00:23:03,780 --> 00:23:07,386
from my package JSON file

346
00:23:07,578 --> 00:23:10,986
here. So the application has started,

347
00:23:11,108 --> 00:23:16,974
the server is running. Let's switch back to the browser

348
00:23:17,102 --> 00:23:21,620
and let's open the application,

349
00:23:22,950 --> 00:23:26,374
the back end application directly. So this is the

350
00:23:26,572 --> 00:23:31,030
welcome route. Let's say it displays a very simple welcome

351
00:23:31,100 --> 00:23:34,918
message and I would like to modify something

352
00:23:35,004 --> 00:23:39,420
on this route. I know already

353
00:23:39,870 --> 00:23:43,740
how to perform small change. I'm going to go here and

354
00:23:44,830 --> 00:23:49,022
add that conf 42 and

355
00:23:49,076 --> 00:23:52,606
once I save the file, you can see here in the terminal that

356
00:23:52,788 --> 00:23:56,186
the application was restarted

357
00:23:56,298 --> 00:23:59,070
because the files were resync synchronized.

358
00:23:59,970 --> 00:24:03,342
And sorry for that, I forgot

359
00:24:03,406 --> 00:24:07,140
to switch to the id. So what I did

360
00:24:12,470 --> 00:24:16,338
was to enter the server js file and modify

361
00:24:16,434 --> 00:24:19,718
here the message for welcome I'm going

362
00:24:19,724 --> 00:24:23,174
to hit save again and you can see that the

363
00:24:23,212 --> 00:24:27,414
application was actually reloaded due to the file

364
00:24:27,462 --> 00:24:31,130
sync. I'm going to go back to the browser now

365
00:24:31,280 --> 00:24:34,940
and if I hit refresh here I can see that

366
00:24:35,310 --> 00:24:38,686
conf 42 appeared, so the

367
00:24:38,708 --> 00:24:41,280
sync is actually working.

368
00:24:42,130 --> 00:24:46,766
Any change which I do now in

369
00:24:46,788 --> 00:24:50,966
my id with my local files will get almost instantly

370
00:24:51,018 --> 00:24:54,610
synced in the container and I will be able to

371
00:24:54,760 --> 00:24:58,082
see the live changes. So the last

372
00:24:58,136 --> 00:25:01,870
bit of the demo is the remote

373
00:25:01,950 --> 00:25:05,346
debugging part. And for this I'm going to switch

374
00:25:05,378 --> 00:25:07,880
again to the ide.

375
00:25:09,130 --> 00:25:12,566
There's one more thing I need to do. In order for

376
00:25:12,588 --> 00:25:16,490
the debugger to be able to attach to the running process

377
00:25:16,640 --> 00:25:20,234
I need to run the

378
00:25:20,272 --> 00:25:25,020
same command with sorry port forward.

379
00:25:26,830 --> 00:25:30,062
Okay. And the debugger is running

380
00:25:30,116 --> 00:25:34,090
on the nine two to nine port. And this tells

381
00:25:34,170 --> 00:25:37,840
Binichel essentially that I need to forward my local

382
00:25:39,010 --> 00:25:43,810
nine two to nine port into the container,

383
00:25:45,430 --> 00:25:50,340
same number of the port. So Binichel is

384
00:25:51,990 --> 00:25:56,520
again asking me for my files and

385
00:25:56,890 --> 00:25:59,590
it will ask me for the sync.

386
00:26:01,290 --> 00:26:06,234
It changes the pod definition and

387
00:26:06,272 --> 00:26:09,786
it will quickly check if the files need

388
00:26:09,808 --> 00:26:13,254
to be synced. And this is it. I'm going to run again NPM

389
00:26:13,302 --> 00:26:17,306
run start dev, which by

390
00:26:17,328 --> 00:26:21,290
the way has this inspect flag

391
00:26:21,370 --> 00:26:24,990
which ultimately allows me from my local machine

392
00:26:26,370 --> 00:26:29,630
to attach to the session.

393
00:26:30,710 --> 00:26:34,206
And I also have a breakpoint

394
00:26:34,318 --> 00:26:37,966
here added. What I'm

395
00:26:37,998 --> 00:26:42,450
going to do is go into the browser and hit refresh.

396
00:26:45,210 --> 00:26:48,422
Okay, nothing happened because I forgot to attach the debugger. I need

397
00:26:48,476 --> 00:26:52,834
to run this. I have made a minor

398
00:26:52,882 --> 00:26:57,286
configuration here. I mapped the

399
00:26:57,388 --> 00:27:01,066
local back end folder to the path in the

400
00:27:01,088 --> 00:27:04,570
container from user source app

401
00:27:04,720 --> 00:27:08,514
back end. It's basically the path I've synchronized the files

402
00:27:08,662 --> 00:27:12,286
into. I'm going to show the documentation on how

403
00:27:12,308 --> 00:27:15,600
I did that. It's a three step process, very easy.

404
00:27:16,690 --> 00:27:20,494
And now I'm going to refresh again. And I

405
00:27:20,532 --> 00:27:23,854
refreshed the page in the browser,

406
00:27:23,902 --> 00:27:27,618
the back end page causing a request to be made,

407
00:27:27,784 --> 00:27:31,166
and I can see that I have here the call stack.

408
00:27:31,198 --> 00:27:35,830
It's the standard debugging procedure.

409
00:27:36,490 --> 00:27:39,842
I have access to variables, I'm able to execute

410
00:27:39,906 --> 00:27:43,302
functions, I can step over step into

411
00:27:43,356 --> 00:27:47,338
functions and whatnot, and I can also let

412
00:27:47,424 --> 00:27:50,874
the request finish. So this is

413
00:27:50,912 --> 00:27:54,954
the remote development in

414
00:27:54,992 --> 00:27:58,166
Bunnyshell. With debugging, I'm going to go

415
00:27:58,288 --> 00:28:03,534
quickly to the documentation and also show

416
00:28:03,572 --> 00:28:07,182
you how the port forwarding was set up. We have

417
00:28:07,236 --> 00:28:10,350
a bunch of examples here for node JS.

418
00:28:11,350 --> 00:28:14,674
I started the remote development with the

419
00:28:14,712 --> 00:28:16,850
port nine two nine forwarded.

420
00:28:17,830 --> 00:28:21,474
You already saw that. And from

421
00:28:21,592 --> 00:28:25,154
the configurations from Webstorm I added

422
00:28:25,202 --> 00:28:28,822
an attached to node JS configuration. And then this is what I did.

423
00:28:28,876 --> 00:28:33,190
I mapped the backend folder into the containers

424
00:28:34,490 --> 00:28:38,650
folder. So this was it. And then I hit debug.

425
00:28:40,110 --> 00:28:45,034
So this

426
00:28:45,072 --> 00:28:49,040
was it. I hope you found the demo

427
00:28:49,570 --> 00:28:53,086
clarifying and things are much more clear for

428
00:28:53,108 --> 00:28:57,086
you now, and I hope that you find it easy to follow as

429
00:28:57,108 --> 00:29:00,366
well. I want to say

430
00:29:00,388 --> 00:29:03,710
that environment as a service concept

431
00:29:03,790 --> 00:29:07,598
can truly revolutionize

432
00:29:07,774 --> 00:29:12,158
how engineering teams work and how they interact

433
00:29:12,254 --> 00:29:15,718
with other eaas as well towards delivering a better product

434
00:29:15,804 --> 00:29:20,134
and delivering it faster. And very important,

435
00:29:20,252 --> 00:29:24,182
being more happily while doing so

436
00:29:24,316 --> 00:29:28,390
as an engineer. Just to recap,

437
00:29:29,050 --> 00:29:32,986
self service is crucial in moving forward

438
00:29:33,168 --> 00:29:36,886
for any kind of change. We will bring in how engineering

439
00:29:36,918 --> 00:29:41,626
teams work. And with environment as a service, you can have real

440
00:29:41,728 --> 00:29:45,230
production like environments for development, for staging,

441
00:29:45,730 --> 00:29:49,786
for UAT. I mean getting feedback

442
00:29:49,818 --> 00:29:53,182
from stakeholders in a real time

443
00:29:53,316 --> 00:29:57,650
fashion, and also for end to end testing.

444
00:29:57,990 --> 00:30:01,794
Remember, this is not a replacement for

445
00:30:01,832 --> 00:30:06,182
your current CI, but it definitely can integrate with it and

446
00:30:06,236 --> 00:30:11,046
help you implement end to end testing in

447
00:30:11,068 --> 00:30:14,978
a much more sane way, with completely isolated environments

448
00:30:15,074 --> 00:30:18,922
which only live as long as they're needed

449
00:30:18,976 --> 00:30:22,826
for the duration of that pipeline. For the part of duration of

450
00:30:22,848 --> 00:30:26,650
that pipeline, to be more precise.

451
00:30:27,310 --> 00:30:31,150
And the concept is also cost friendly.

452
00:30:31,970 --> 00:30:35,550
So this was it. I really hope you've enjoyed it

453
00:30:35,620 --> 00:30:39,470
as much as I did, and I'd be really happy to connect

454
00:30:39,540 --> 00:30:42,814
with you and have you share your thoughts with me

455
00:30:42,852 --> 00:30:46,670
on the environment as a service topic. But not only that,

456
00:30:46,820 --> 00:30:50,158
anything engineering related. Have a

457
00:30:50,164 --> 00:30:54,342
great day ahead. Thank you very much for attending and

458
00:30:54,476 --> 00:30:55,430
all the best.

