1
00:00:25,490 --> 00:00:29,430
Hello everyone, welcome to a new session of the deeptype track.

2
00:00:29,500 --> 00:00:34,130
In this conference today I'm going to talk about Archgo

3
00:00:34,290 --> 00:00:38,326
and how we can use it to continuously test the quality

4
00:00:38,428 --> 00:00:41,910
of our architectures. Archgo is a very

5
00:00:41,980 --> 00:00:45,190
simple testing tool strongly inspired in

6
00:00:45,260 --> 00:00:48,786
Arc unit, a testing framework for Java

7
00:00:48,818 --> 00:00:52,426
language. To start, I'm going to introduce

8
00:00:52,458 --> 00:00:55,578
myself. My name is Francisco defines,

9
00:00:55,674 --> 00:00:59,210
but most of the people call me Dino. I am a software

10
00:00:59,290 --> 00:01:03,074
developer and I'm working in Walmart, Chile in the

11
00:01:03,112 --> 00:01:06,574
artificial intelligence and data exploitation

12
00:01:06,702 --> 00:01:10,670
department. I have worked in many industries,

13
00:01:10,830 --> 00:01:14,890
in many business models, playing different roles

14
00:01:14,990 --> 00:01:19,042
and working with different languages as Java,

15
00:01:19,106 --> 00:01:23,042
C, Javascript, Python per Ruby

16
00:01:23,106 --> 00:01:26,774
and others. Since last year I'm working with

17
00:01:26,812 --> 00:01:30,746
Golang and today I consider myself a

18
00:01:30,768 --> 00:01:34,762
gopher because I'm really impressed about its

19
00:01:34,816 --> 00:01:38,362
simplicity. You can find me in social media

20
00:01:38,496 --> 00:01:41,290
with the user fdaimas, in GitHub,

21
00:01:41,370 --> 00:01:44,814
LinkedIn, Twitter, and of course you

22
00:01:44,852 --> 00:01:48,766
got my email. Okay, the first topic that we

23
00:01:48,788 --> 00:01:52,678
are going to talk about is what are the architectural

24
00:01:52,714 --> 00:01:56,814
guidelines and why we should know but them architectural

25
00:01:56,862 --> 00:02:00,914
guidelines in a very brief way are these important

26
00:02:01,032 --> 00:02:04,754
decisions that we take along the development of

27
00:02:04,792 --> 00:02:08,150
a product or a project mostly in the first moment.

28
00:02:08,300 --> 00:02:12,482
But of course we can make changes to these definitions

29
00:02:12,626 --> 00:02:16,614
as the project moves forward. A very common example

30
00:02:16,732 --> 00:02:20,234
of architectural guidelines is when we

31
00:02:20,272 --> 00:02:24,154
have to choose the package model we

32
00:02:24,272 --> 00:02:27,850
want to follow in our code base in the project.

33
00:02:28,000 --> 00:02:31,118
For example, if we have to create

34
00:02:31,284 --> 00:02:35,022
a simple rest service, maybe we can

35
00:02:35,076 --> 00:02:38,638
choose a layered architecture model

36
00:02:38,804 --> 00:02:42,014
because it's a very simple approach. In this

37
00:02:42,052 --> 00:02:45,538
approach we will have some

38
00:02:45,624 --> 00:02:49,090
layers and each layer can have one

39
00:02:49,160 --> 00:02:52,290
or more packages. And not only this.

40
00:02:52,440 --> 00:02:55,814
Also we have rules about

41
00:02:56,012 --> 00:03:00,066
how the packages in one layer can interact

42
00:03:00,258 --> 00:03:03,640
with packages in another layer. For example,

43
00:03:04,170 --> 00:03:07,314
looking at the diagram below,

44
00:03:07,452 --> 00:03:11,670
packages that are contained inside the presentation

45
00:03:11,750 --> 00:03:15,574
layer can only interact with packages

46
00:03:15,702 --> 00:03:19,334
in the same layer or packages in the business logic

47
00:03:19,382 --> 00:03:23,374
layer. Other example is that packages inside the

48
00:03:23,412 --> 00:03:26,618
persistence layer cannot interact

49
00:03:26,794 --> 00:03:30,890
with packages in any other layer. This image

50
00:03:30,970 --> 00:03:35,022
shows us the clean architecture model proposed by

51
00:03:35,076 --> 00:03:38,658
Robert Simarti. If we want to follow

52
00:03:38,744 --> 00:03:42,962
this architecture model, we can implement an

53
00:03:43,096 --> 00:03:46,230
onion architecture packages model in

54
00:03:46,300 --> 00:03:50,118
our code base. But the case is very similar

55
00:03:50,204 --> 00:03:53,698
to the previous one. We have packages

56
00:03:53,874 --> 00:03:58,278
and we have to decide in what layers

57
00:03:58,454 --> 00:04:02,442
those packages can be located and

58
00:04:02,576 --> 00:04:05,786
how these packages can interact with

59
00:04:05,888 --> 00:04:10,850
the other packages. This set of rules and definitions

60
00:04:10,950 --> 00:04:14,874
about packages and their interactions

61
00:04:15,002 --> 00:04:18,010
are part of the architectural guidelines.

62
00:04:18,170 --> 00:04:22,046
Of course, the packages model is not the only important

63
00:04:22,148 --> 00:04:25,922
decisions that we can take. There are many

64
00:04:25,976 --> 00:04:29,442
other agreements, for example, how to

65
00:04:29,496 --> 00:04:33,758
create functions if we want to require

66
00:04:33,934 --> 00:04:37,478
some properties that these functions must

67
00:04:37,564 --> 00:04:41,222
comply with. Or maybe if we want

68
00:04:41,276 --> 00:04:44,230
to have a naming convention,

69
00:04:44,730 --> 00:04:48,618
or if we want to restrict what kind

70
00:04:48,704 --> 00:04:52,154
of items can be placed in certain

71
00:04:52,272 --> 00:04:56,298
packages. Of course, if we want to restrict or allow

72
00:04:56,464 --> 00:04:59,130
some interactions between packages.

73
00:04:59,890 --> 00:05:03,054
Now we are going to look at some issues

74
00:05:03,172 --> 00:05:06,862
related to architectural guidelines. These first

75
00:05:06,916 --> 00:05:11,310
one is defining. Today it's very common to

76
00:05:11,380 --> 00:05:14,270
heard about evolutionary architectures,

77
00:05:14,610 --> 00:05:17,670
the approach proposed by Grepa, Caparsons,

78
00:05:17,770 --> 00:05:20,866
Nielford and Pat Gua. By the way, it's a

79
00:05:20,888 --> 00:05:24,306
very interesting approach. I strongly recommend to read

80
00:05:24,328 --> 00:05:27,878
this book. So if we think

81
00:05:27,964 --> 00:05:31,958
that our architecture can evolve, we must

82
00:05:32,044 --> 00:05:35,270
provide a way to make and

83
00:05:35,340 --> 00:05:38,742
record changes to our guidelines.

84
00:05:38,886 --> 00:05:43,034
It's just common sense. The next one is

85
00:05:43,072 --> 00:05:46,378
about outdated guidelines. If you are thinking

86
00:05:46,464 --> 00:05:50,066
in publishing your architectural guidelines

87
00:05:50,118 --> 00:05:54,170
in systems like confluence or an internal wiki,

88
00:05:54,330 --> 00:05:57,642
you have to take care of an important risk.

89
00:05:57,786 --> 00:06:01,818
Those systems are far from code. In a daily basis

90
00:06:01,914 --> 00:06:05,378
we work with the code base, not with

91
00:06:05,464 --> 00:06:08,914
the confluence system. So there is

92
00:06:08,952 --> 00:06:12,786
a risk that these developers forget to update the

93
00:06:12,808 --> 00:06:16,486
document in confluence. And after

94
00:06:16,588 --> 00:06:20,070
a couple of months we will end with an

95
00:06:20,140 --> 00:06:24,290
architectural guidelines that does not represent

96
00:06:24,450 --> 00:06:28,202
what we are applying in the code base. These next

97
00:06:28,256 --> 00:06:32,090
issue is about software quality degradation.

98
00:06:32,590 --> 00:06:36,838
Even if we apply some powerful techniques

99
00:06:36,934 --> 00:06:40,546
in our teams, like code reviews or pair

100
00:06:40,598 --> 00:06:43,150
programming, we are humans,

101
00:06:43,490 --> 00:06:46,874
so we made mistakes, and it's

102
00:06:46,922 --> 00:06:50,334
fine to make mistakes. For example, if we

103
00:06:50,372 --> 00:06:54,082
have a lot of rules as part of

104
00:06:54,136 --> 00:06:57,346
our architectural guidelines, maybe a

105
00:06:57,368 --> 00:07:00,500
couple of developers forgot to check

106
00:07:00,950 --> 00:07:04,610
some of them in a certain pull request.

107
00:07:05,050 --> 00:07:08,440
And after a couple of months,

108
00:07:08,970 --> 00:07:12,406
our code base does not comply with

109
00:07:12,508 --> 00:07:16,550
our architectural guidelines. But the worst part is

110
00:07:16,620 --> 00:07:20,154
that we are not seeing it, so we

111
00:07:20,192 --> 00:07:23,674
have no way to take care of this

112
00:07:23,712 --> 00:07:26,870
situation. And finally, metrics.

113
00:07:27,030 --> 00:07:30,622
It's always about metrics. If we

114
00:07:30,676 --> 00:07:34,030
want to know if there is a relation

115
00:07:34,450 --> 00:07:37,678
between the compliance level that

116
00:07:37,764 --> 00:07:41,754
our code has against the architectural

117
00:07:41,802 --> 00:07:46,340
guidelines and other metrics like lead time or

118
00:07:47,350 --> 00:07:51,198
change values, or another kind of metrics,

119
00:07:51,374 --> 00:07:55,098
the only way that we have is to measure

120
00:07:55,214 --> 00:07:58,790
the compliance level. There is no

121
00:07:58,860 --> 00:08:02,358
other way. So we need a way to

122
00:08:02,524 --> 00:08:06,502
know if our code complies with our

123
00:08:06,556 --> 00:08:10,106
architectural guidelines. Now we are

124
00:08:10,128 --> 00:08:13,322
ready to know about Archgo and

125
00:08:13,376 --> 00:08:17,414
see how we can use this tool to represent

126
00:08:17,542 --> 00:08:20,990
our architectural guidelines and checks if our

127
00:08:21,060 --> 00:08:24,382
project complies with them. The best

128
00:08:24,436 --> 00:08:28,170
way to understand and introduce

129
00:08:28,250 --> 00:08:32,278
ArG Go is looking at the execution flow.

130
00:08:32,474 --> 00:08:36,558
The process starts when the team members complies

131
00:08:36,654 --> 00:08:40,910
with a set of architectural guidelines and represents

132
00:08:40,990 --> 00:08:44,606
them in a YAML file. This JAML file

133
00:08:44,718 --> 00:08:48,854
must comply with these Archgo schema and

134
00:08:48,972 --> 00:08:52,486
has to be included as part of the code base in

135
00:08:52,508 --> 00:08:56,454
the root directory of the project. Then we

136
00:08:56,492 --> 00:08:59,490
need to download Archgo,

137
00:08:59,650 --> 00:09:03,500
for example using the Goget command. And finally

138
00:09:03,950 --> 00:09:08,426
we just run Archgo in the console and

139
00:09:08,528 --> 00:09:12,414
Argo makes his magic and

140
00:09:12,532 --> 00:09:16,234
do all the verifications and the output

141
00:09:16,282 --> 00:09:19,470
of ArchGo will be succeeded or

142
00:09:19,540 --> 00:09:23,374
rejected. And of course the console output

143
00:09:23,502 --> 00:09:27,662
has all the detailed information. An alternative

144
00:09:27,726 --> 00:09:31,650
way to execute and run Archgo is

145
00:09:31,720 --> 00:09:36,086
passing an optional argument that

146
00:09:36,268 --> 00:09:40,566
generates an HTML report in cases that

147
00:09:40,668 --> 00:09:44,520
we want to publish this report in another system.

148
00:09:44,970 --> 00:09:48,918
Now that we know a typical execution

149
00:09:49,014 --> 00:09:52,522
process of Archgo, let's see what

150
00:09:52,576 --> 00:09:55,098
features are included in this tool.

151
00:09:55,264 --> 00:09:59,034
Archgo contains three features. The first one

152
00:09:59,072 --> 00:10:03,418
is the rules description. As our architectural guidelines

153
00:10:03,514 --> 00:10:06,570
are represented in a jammer file,

154
00:10:06,730 --> 00:10:11,162
Archgo offers a simple way to represented

155
00:10:11,306 --> 00:10:14,740
those rules in a more readable way.

156
00:10:15,510 --> 00:10:19,390
The second feature is the core feature of Archgo,

157
00:10:19,470 --> 00:10:23,170
the rules evaluation. It checks if our

158
00:10:23,240 --> 00:10:26,974
project complies with all of the architectural

159
00:10:27,022 --> 00:10:30,386
guidelines described in this JAML

160
00:10:30,418 --> 00:10:34,760
file. And finally the HTML report.

161
00:10:35,290 --> 00:10:38,954
It creates an HTML report with the

162
00:10:38,992 --> 00:10:41,900
result of all the evaluation process.

163
00:10:42,350 --> 00:10:45,914
So let's go deeper in

164
00:10:46,032 --> 00:10:50,086
the first feature, the rules description at

165
00:10:50,128 --> 00:10:53,710
first time, the rules description feature does not

166
00:10:53,780 --> 00:10:57,534
look very attractive because we think we

167
00:10:57,572 --> 00:11:01,098
are representing our architectural guidelines

168
00:11:01,194 --> 00:11:04,610
in a JAML file, and YAMl format is very

169
00:11:04,680 --> 00:11:07,234
readable and easy to understand.

170
00:11:07,432 --> 00:11:11,282
But the problem with YAML format is that

171
00:11:11,336 --> 00:11:15,086
we have many ways to represent exactly the

172
00:11:15,128 --> 00:11:18,120
same document. As we can see,

173
00:11:18,490 --> 00:11:21,670
those two files represent exactly

174
00:11:21,820 --> 00:11:25,158
the same rules. And of course,

175
00:11:25,244 --> 00:11:28,554
both of these jammer configurations complies with the

176
00:11:28,592 --> 00:11:32,746
same schema. That's the reason why

177
00:11:32,928 --> 00:11:37,082
art go offer a simple way to describe this

178
00:11:37,136 --> 00:11:40,060
rule in a more readable way.

179
00:11:40,530 --> 00:11:44,254
The rules description process starts when we

180
00:11:44,292 --> 00:11:48,570
have created the Jammer file and described

181
00:11:48,650 --> 00:11:52,990
all our architectural guidelines inside this file.

182
00:11:53,350 --> 00:11:56,914
Then we just run Archgo with

183
00:11:56,952 --> 00:12:00,434
the describe option and the output will

184
00:12:00,472 --> 00:12:04,350
be the description, in a very readable

185
00:12:04,430 --> 00:12:08,722
way of all the rules contained in this jammer file.

186
00:12:08,866 --> 00:12:12,502
So this format is very easy

187
00:12:12,556 --> 00:12:16,962
to understand, and we can share this output

188
00:12:17,026 --> 00:12:19,994
with other teams, with other members,

189
00:12:20,112 --> 00:12:23,258
and maybe with other rules, like a product

190
00:12:23,344 --> 00:12:27,290
owner or a business analyst. We can continue

191
00:12:27,440 --> 00:12:31,710
with the core feature of Archgo, the rules evaluation.

192
00:12:32,450 --> 00:12:35,902
The rules evaluation process starts when we have

193
00:12:35,956 --> 00:12:39,930
created the Jammer file and described

194
00:12:40,010 --> 00:12:43,726
all our architectural guidelines inside this file.

195
00:12:43,918 --> 00:12:47,870
Of course, the Jammer file has to be included

196
00:12:48,030 --> 00:12:50,354
as part of our code base.

197
00:12:50,552 --> 00:12:54,050
Archgo will gather all the packages

198
00:12:54,550 --> 00:12:57,766
from our application and base it on.

199
00:12:57,788 --> 00:13:01,222
The rules described in the Jammer file will

200
00:13:01,276 --> 00:13:04,418
resolve which rules will be evaluated.

201
00:13:04,594 --> 00:13:08,490
ArchGo supports five types of rules,

202
00:13:08,830 --> 00:13:11,910
dependency rules, content rules,

203
00:13:12,070 --> 00:13:15,894
function rules, naming rules and cycles

204
00:13:15,942 --> 00:13:20,466
rules. Finally, Archgo will consolidate

205
00:13:20,598 --> 00:13:24,718
all the different evaluation results and

206
00:13:24,804 --> 00:13:28,366
resolve what will be the global result

207
00:13:28,468 --> 00:13:31,710
of the evaluation process that can be

208
00:13:31,860 --> 00:13:35,294
succeeded or rejected. The first rule

209
00:13:35,342 --> 00:13:39,582
type is dependency rules. Those rule

210
00:13:39,726 --> 00:13:44,030
are about the allowed and the restricted

211
00:13:44,110 --> 00:13:47,030
relations between different packages.

212
00:13:47,370 --> 00:13:51,218
For example, the green arrows represented

213
00:13:51,314 --> 00:13:55,142
allowed dependencies. So package a can

214
00:13:55,196 --> 00:13:59,082
depends on package c and the red

215
00:13:59,136 --> 00:14:02,410
arrows represented restricted and

216
00:14:02,480 --> 00:14:06,630
not allowed dependencies. So if any file

217
00:14:06,710 --> 00:14:10,874
in package b depends on anything that's

218
00:14:10,922 --> 00:14:14,974
declared on package d, the evaluation process

219
00:14:15,092 --> 00:14:18,750
will reject this rule. But not only

220
00:14:18,820 --> 00:14:22,074
this. Also, ArchGo offers

221
00:14:22,122 --> 00:14:26,610
a way to allow and restrict dependency

222
00:14:26,950 --> 00:14:29,570
with external packages.

223
00:14:29,910 --> 00:14:33,410
For example, in this case, package d can

224
00:14:33,480 --> 00:14:38,206
depends on goSql driver, mySql package,

225
00:14:38,398 --> 00:14:42,262
but cannot depends in the Fdynas go

226
00:14:42,316 --> 00:14:46,226
mySql package. All of these dependency rules

227
00:14:46,338 --> 00:14:50,186
can be modeled in archgo. As we

228
00:14:50,208 --> 00:14:54,250
can see, it's very simple to represent those

229
00:14:54,320 --> 00:14:58,086
rules in the JAML file, we have to declare a package

230
00:14:58,198 --> 00:15:01,822
using a pattern and these the keywords that

231
00:15:01,876 --> 00:15:04,926
can be should only depends on,

232
00:15:05,108 --> 00:15:08,990
should not depends on, and should only

233
00:15:09,060 --> 00:15:12,298
depends on external. The next type is content

234
00:15:12,404 --> 00:15:16,098
rules. Those rules are about which

235
00:15:16,184 --> 00:15:19,586
content are allowed as part of a

236
00:15:19,608 --> 00:15:23,378
certain package. For example, package b

237
00:15:23,544 --> 00:15:26,914
allows only interface definitions

238
00:15:27,042 --> 00:15:30,578
and package c allows only functions

239
00:15:30,674 --> 00:15:34,514
definitions. So if a developer

240
00:15:34,642 --> 00:15:38,742
create an structs inside packages

241
00:15:38,806 --> 00:15:41,958
b, the evaluation process will fail.

242
00:15:42,134 --> 00:15:45,798
In the case of package a, it accepts

243
00:15:45,974 --> 00:15:50,082
declarations of structures functions

244
00:15:50,246 --> 00:15:54,346
methods, but does not allow interfaces

245
00:15:54,458 --> 00:15:58,378
definitions. All of these cases can be modeled

246
00:15:58,474 --> 00:16:01,310
in archgo. As we can see,

247
00:16:01,460 --> 00:16:04,018
it's very simple to model.

248
00:16:04,184 --> 00:16:08,642
We have two main forms to model these

249
00:16:08,776 --> 00:16:12,286
content rules. We have the should only contain

250
00:16:12,398 --> 00:16:15,602
and these item type that can be functions,

251
00:16:15,666 --> 00:16:19,542
methods, interfaces and structs and these

252
00:16:19,596 --> 00:16:23,174
opposite that is should not contain and the

253
00:16:23,212 --> 00:16:27,046
item type. The next one are the function

254
00:16:27,148 --> 00:16:31,046
rules. Those rules are about some properties

255
00:16:31,158 --> 00:16:34,026
that the functions must comply with.

256
00:16:34,208 --> 00:16:37,850
For example, we can restrict how

257
00:16:37,920 --> 00:16:41,946
many parameters the functions can receive

258
00:16:42,138 --> 00:16:46,666
because we prefer, for example, using structures

259
00:16:46,778 --> 00:16:50,110
to encapsulate those parameters. A similar

260
00:16:50,180 --> 00:16:53,662
case is for the return values. We can

261
00:16:53,716 --> 00:16:57,154
restrict how many return values the

262
00:16:57,192 --> 00:17:00,546
functions can declare, and also

263
00:17:00,728 --> 00:17:04,510
we can define a maximum quantity

264
00:17:04,590 --> 00:17:08,434
of lines of code that the function implementations

265
00:17:08,562 --> 00:17:11,206
has to comply. And finally,

266
00:17:11,388 --> 00:17:15,410
how many functions we accept

267
00:17:15,570 --> 00:17:19,814
inside a single file. All of these properties

268
00:17:19,942 --> 00:17:23,754
can be modeled in Archgo and as we can

269
00:17:23,792 --> 00:17:26,982
see in this example, it's very natural

270
00:17:27,046 --> 00:17:29,638
to represent those rules.

271
00:17:29,734 --> 00:17:33,226
We define a package and all the packages

272
00:17:33,418 --> 00:17:37,434
that complies with this pattern require the functions

273
00:17:37,482 --> 00:17:41,802
to comply with these max quantity of parameters.

274
00:17:41,946 --> 00:17:45,458
The max return values, these max public

275
00:17:45,544 --> 00:17:49,198
functions per file, and the definitions

276
00:17:49,294 --> 00:17:52,942
must comply with these maximum

277
00:17:53,006 --> 00:17:56,486
lines of code. The next rule type is

278
00:17:56,588 --> 00:18:00,434
naming rule. Those rules are about naming

279
00:18:00,482 --> 00:18:03,814
conventions. Example above shows an

280
00:18:03,852 --> 00:18:07,442
interface which is implemented by three

281
00:18:07,516 --> 00:18:11,578
structs. So it's a common sense that

282
00:18:11,744 --> 00:18:15,510
these structs have a naming convention,

283
00:18:15,590 --> 00:18:19,562
a common pattern to comply with, because sometimes

284
00:18:19,696 --> 00:18:23,310
makes sense to comply with a naming rules. More.

285
00:18:23,380 --> 00:18:26,990
Even in Golang, where we

286
00:18:27,060 --> 00:18:30,490
have an implicit interface

287
00:18:30,650 --> 00:18:34,130
implementation, we don't have explicit one,

288
00:18:34,280 --> 00:18:37,586
but in another case, like the one in the

289
00:18:37,608 --> 00:18:41,134
right, it doesn't make sense. We are implementing

290
00:18:41,182 --> 00:18:44,242
two interfaces, so we are free

291
00:18:44,296 --> 00:18:47,414
to use the name that we

292
00:18:47,452 --> 00:18:50,934
want in this structure. For the first case,

293
00:18:51,052 --> 00:18:54,338
we can model this case in Archgo,

294
00:18:54,514 --> 00:18:58,182
and it's very simple too. We have an interface

295
00:18:58,246 --> 00:19:02,186
implementation naming rules attribute, and inside

296
00:19:02,288 --> 00:19:05,674
them we can define what's the pattern for

297
00:19:05,712 --> 00:19:09,882
the interface, and then what's the pattern that

298
00:19:09,936 --> 00:19:13,134
the structs must comply with.

299
00:19:13,332 --> 00:19:16,830
The last one are these cycles rules?

300
00:19:17,170 --> 00:19:20,442
Those rules are about cycles

301
00:19:20,586 --> 00:19:24,718
in the dependency graph, this diagram represents

302
00:19:24,814 --> 00:19:28,002
a cycle between package b,

303
00:19:28,136 --> 00:19:31,554
package c and package d. The truth is

304
00:19:31,592 --> 00:19:35,150
that as Golan compiler does not allow import

305
00:19:35,240 --> 00:19:38,950
cycles, this feature is evaluated and maybe

306
00:19:39,020 --> 00:19:42,230
it will be deprecated in future releases.

307
00:19:42,730 --> 00:19:46,406
If you want to know how to model this rule in the

308
00:19:46,428 --> 00:19:50,026
YAML file, there is an example. In this example

309
00:19:50,128 --> 00:19:53,846
we configure that all the packages

310
00:19:53,958 --> 00:19:57,274
that complies with this pattern should

311
00:19:57,312 --> 00:20:00,918
not contain cycles. Now we have reached

312
00:20:01,014 --> 00:20:04,810
the last feature of Archgo, the HTML

313
00:20:04,890 --> 00:20:08,730
report generation. This feature generates

314
00:20:08,810 --> 00:20:12,666
a very simple verification report that shows

315
00:20:12,788 --> 00:20:15,762
the result of the verification process.

316
00:20:15,896 --> 00:20:19,822
This report is strongly inspired on Pytest

317
00:20:19,886 --> 00:20:23,294
coverage report Pytest is a mutation

318
00:20:23,342 --> 00:20:26,726
testing tool for Java language. This feature is

319
00:20:26,828 --> 00:20:30,774
in work in progress status, so we

320
00:20:30,812 --> 00:20:35,270
will be added more interactions in future releases.

321
00:20:35,850 --> 00:20:39,340
At this moment I'm sure that you are asking yourself,

322
00:20:39,710 --> 00:20:43,338
what about the continuously part in the title of this

323
00:20:43,424 --> 00:20:46,922
session? Well, let's talk about

324
00:20:47,056 --> 00:20:50,970
automation. A generic CI CD pipeline

325
00:20:51,050 --> 00:20:54,762
contains several steps. The process starts

326
00:20:54,826 --> 00:20:58,314
when the developers write the code and push

327
00:20:58,362 --> 00:21:01,338
it to a virtual control repository.

328
00:21:01,514 --> 00:21:05,646
This event triggers some automatic steps

329
00:21:05,838 --> 00:21:09,822
as running these unit test or running the integration

330
00:21:09,886 --> 00:21:13,870
test, and then we can continue with the deployment

331
00:21:13,950 --> 00:21:17,494
part of the pipeline. Looking at this process,

332
00:21:17,692 --> 00:21:21,314
it's natural to think in including architecture

333
00:21:21,362 --> 00:21:25,094
tests as part of the CI CD pipeline for

334
00:21:25,132 --> 00:21:28,354
Golang. Architecture tests are supported

335
00:21:28,402 --> 00:21:31,574
by Archgo. As we've seen before,

336
00:21:31,772 --> 00:21:35,274
running ArcGo is very simple. We just need

337
00:21:35,312 --> 00:21:39,750
to run Archgo command, so include Argo

338
00:21:39,830 --> 00:21:43,086
in different guidelines are very simple too.

339
00:21:43,188 --> 00:21:46,666
Here are examples for GitHub actions

340
00:21:46,778 --> 00:21:49,470
Circleci and bitbacket guidelines.

341
00:21:50,130 --> 00:21:53,966
Of course we can run Archgo

342
00:21:54,078 --> 00:21:58,130
inside a docker container. Do you want to contribute

343
00:21:58,470 --> 00:22:02,478
with Archgo? These is these project repository

344
00:22:02,574 --> 00:22:05,750
URL. So you just need to

345
00:22:05,820 --> 00:22:09,190
download these tool, use it, and create some pull

346
00:22:09,260 --> 00:22:12,754
requests. This is the ideas backlog.

347
00:22:12,882 --> 00:22:15,698
There are many ideas in the backlog.

348
00:22:15,794 --> 00:22:19,494
I'm very interested to know what do you think about them?

349
00:22:19,612 --> 00:22:23,202
And of course, if you have new ideas,

350
00:22:23,266 --> 00:22:26,454
you are welcome. And that's all.

351
00:22:26,572 --> 00:22:29,966
We have reached the end of this session. I have to

352
00:22:30,028 --> 00:22:33,134
thank you for being here and invite you

353
00:22:33,172 --> 00:22:37,230
to participate in the rest of the sessions of this conference.

354
00:22:37,970 --> 00:22:42,506
And finally, if you like what Archgo

355
00:22:42,618 --> 00:22:46,014
offers, please promote the use of this

356
00:22:46,052 --> 00:22:49,502
tool in the community. Thank you very much and

357
00:22:49,556 --> 00:22:51,260
see you another time.

