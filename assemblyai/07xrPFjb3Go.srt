1
00:00:25,570 --> 00:00:28,806
You. Hello everyone,

2
00:00:28,908 --> 00:00:32,840
welcome in the presentation about how to go multicloud with your application.

3
00:00:33,210 --> 00:00:36,818
Today I will show you the framework, open source framework

4
00:00:36,914 --> 00:00:40,978
that enables full deployment of your app using different cloud providers,

5
00:00:41,074 --> 00:00:43,750
which is important. It is not only deployed,

6
00:00:44,650 --> 00:00:48,214
I will show you also how the platform self can enhance your

7
00:00:48,252 --> 00:00:51,406
application. So when this already deployed, how we can

8
00:00:51,428 --> 00:00:55,002
optimize it, how we can improve the current configuration

9
00:00:55,066 --> 00:00:58,490
of it. The platform itself is called melodic,

10
00:00:58,570 --> 00:01:02,106
yet I will today also use the word morphemic which is a natural extension

11
00:01:02,138 --> 00:01:05,770
of melodic as both projects are open source.

12
00:01:05,850 --> 00:01:09,118
Morphemic gives some additional features

13
00:01:09,294 --> 00:01:12,738
to melodic that I will describe later.

14
00:01:12,904 --> 00:01:16,326
I don't want to go too much into the details of how

15
00:01:16,348 --> 00:01:19,474
to use the platform, but to show you the main key features

16
00:01:19,522 --> 00:01:23,446
and how we can benefit in

17
00:01:23,468 --> 00:01:27,538
our application when using melodic. Here you

18
00:01:27,564 --> 00:01:31,194
can see the main dashboard so we

19
00:01:31,232 --> 00:01:34,618
can just get into the

20
00:01:34,704 --> 00:01:38,042
starting deployment. Yet before I want to show you

21
00:01:38,096 --> 00:01:41,582
the credentials that we need to set. As I mentioned before,

22
00:01:41,636 --> 00:01:45,086
the important part of multicloud is that we

23
00:01:45,108 --> 00:01:48,334
can use different cloud providers. You can have

24
00:01:48,372 --> 00:01:52,270
here a list of different credentials.

25
00:01:52,870 --> 00:01:56,302
Here I have one of the most popular

26
00:01:56,366 --> 00:01:59,774
AWS and also the OpenStack which is University

27
00:01:59,822 --> 00:02:02,210
of Oslo cloud provider.

28
00:02:03,830 --> 00:02:07,734
I need to specify all the details here to be able simply to

29
00:02:07,772 --> 00:02:11,750
communicate with this cloud. So for AWS,

30
00:02:12,250 --> 00:02:16,006
which we will use today, we need to have the credentials of our account

31
00:02:16,108 --> 00:02:20,090
that we need to put here. And the same would go for the OpenStack.

32
00:02:20,590 --> 00:02:24,620
And this is pretty much all

33
00:02:25,550 --> 00:02:29,340
for the initial startup. We'll then go to the deployment part

34
00:02:30,450 --> 00:02:33,360
when we can select and start our application.

35
00:02:35,410 --> 00:02:38,830
Here I will check, I will

36
00:02:38,900 --> 00:02:43,150
choose the XMI file

37
00:02:43,230 --> 00:02:45,570
that I will describe in a few seconds.

38
00:02:46,870 --> 00:02:52,562
Let me give me a few seconds. I need to find

39
00:02:52,616 --> 00:02:56,518
it and upload it. And here's the important part. As you can see,

40
00:02:56,604 --> 00:03:00,454
I am importing uploading a file which is

41
00:03:00,492 --> 00:03:04,754
informaticsmi. It is a converted file that has been described

42
00:03:04,802 --> 00:03:08,950
in camel model. Camel model is based on terraform.

43
00:03:11,210 --> 00:03:14,666
It's a total independent language that is

44
00:03:14,768 --> 00:03:18,860
fully cloud agnostic, which is really important that

45
00:03:19,890 --> 00:03:23,390
we can configure our application in this language.

46
00:03:23,730 --> 00:03:27,054
And at this point we are not

47
00:03:27,092 --> 00:03:30,270
thinking about specific cloud provider.

48
00:03:31,330 --> 00:03:35,140
In this file there are many settings that can be set,

49
00:03:35,590 --> 00:03:39,694
many important parts that are later used for improvement

50
00:03:39,742 --> 00:03:44,034
of the application. This is for example, or the prerequisites or

51
00:03:44,072 --> 00:03:47,558
the requirements of the hardware of the machines that will be

52
00:03:47,724 --> 00:03:51,654
set up, but also of the metric system that will

53
00:03:51,692 --> 00:03:52,520
be used.

54
00:03:55,450 --> 00:03:58,854
It can sound a little difficult yet we have a GUI

55
00:03:58,902 --> 00:04:02,342
modeler called camel designer

56
00:04:02,406 --> 00:04:07,366
that enables to use drag

57
00:04:07,398 --> 00:04:13,662
and drop and also other easy

58
00:04:13,716 --> 00:04:17,754
and much much easier and visible images

59
00:04:17,802 --> 00:04:20,894
to do it. Here you can see I

60
00:04:20,932 --> 00:04:23,614
need to put additional credentials.

61
00:04:23,742 --> 00:04:27,442
This is totally requested by the application itself

62
00:04:27,576 --> 00:04:31,154
as it will have an access to the s

63
00:04:31,192 --> 00:04:35,106
free database. So this is not needed by the

64
00:04:35,128 --> 00:04:39,414
melodic. It is just an additional usage for

65
00:04:39,452 --> 00:04:43,750
the application itself. Another variables.

66
00:04:44,410 --> 00:04:48,050
Okay, I don't want to go too much into the details

67
00:04:48,210 --> 00:04:50,950
of this file, how it was created with Camel,

68
00:04:51,290 --> 00:04:55,414
yet it enables to

69
00:04:55,452 --> 00:04:58,854
define many different aspects of the

70
00:04:58,892 --> 00:05:03,246
application, which are important and how it

71
00:05:03,268 --> 00:05:06,670
can improve it later. The next step is

72
00:05:06,740 --> 00:05:11,230
just choosing the credentials that I have earlier

73
00:05:12,290 --> 00:05:17,186
defined can move forward and

74
00:05:17,208 --> 00:05:20,530
then the last part is just pushing the big green button.

75
00:05:20,680 --> 00:05:24,590
As you can see it is quite simple. The starting the deployment

76
00:05:24,670 --> 00:05:28,598
is extremely easy. The main part

77
00:05:28,684 --> 00:05:32,678
is the definitions, all the definitions inside

78
00:05:32,764 --> 00:05:36,086
camel. Yet as I mentioned, it is much easier to

79
00:05:36,108 --> 00:05:39,686
done with camel designer. Here are

80
00:05:39,708 --> 00:05:43,194
the main steps of the deployment that are run

81
00:05:43,312 --> 00:05:46,746
by the melodic. I will go into the details of each

82
00:05:46,768 --> 00:05:50,926
of this box in seconds as I believe this is important to understand

83
00:05:51,028 --> 00:05:54,494
what actually melodic is doing to find

84
00:05:54,532 --> 00:05:58,000
the best solution to also to optimize the application.

85
00:05:58,930 --> 00:06:02,606
But before I want to show you a small diagram about

86
00:06:02,708 --> 00:06:06,066
what application we are actually using. And as

87
00:06:06,088 --> 00:06:09,890
you have seen before, it is called genome. Here will be a small

88
00:06:09,960 --> 00:06:13,186
diagram, maybe a small diagram of the app.

89
00:06:13,368 --> 00:06:17,142
And I want to point out here that genome is not just a

90
00:06:17,196 --> 00:06:21,394
testing application, it is a real case scenario that was developed

91
00:06:21,442 --> 00:06:24,290
with collaboration of University of Belistock.

92
00:06:24,450 --> 00:06:29,174
And the idea there is that there are multiple

93
00:06:29,222 --> 00:06:32,346
large data sets of both genomic and genetic type.

94
00:06:32,528 --> 00:06:36,218
And there is a need to

95
00:06:36,304 --> 00:06:40,170
like. The algorithm is based on feature selection,

96
00:06:40,830 --> 00:06:44,266
based on the binary variable. The algorithm

97
00:06:44,298 --> 00:06:47,854
uses the extensive search of the entire space of tuples. So this

98
00:06:47,892 --> 00:06:51,946
is extremely time consuming. It's extremely resource consuming.

99
00:06:52,138 --> 00:06:55,806
Yet as there are multiple simulations to be performed,

100
00:06:55,838 --> 00:07:00,306
multiple computations, it is quite easy to

101
00:07:00,328 --> 00:07:04,050
be paralleled, to be optimized. So it makes it

102
00:07:04,200 --> 00:07:08,360
a perfect example for this platform.

103
00:07:09,770 --> 00:07:13,222
Here you can see a diagram that I mentioned

104
00:07:13,276 --> 00:07:17,202
before of how it will be of the setup of the initial

105
00:07:17,266 --> 00:07:20,090
setup. So we'll have two components,

106
00:07:20,430 --> 00:07:24,294
component master and multiple workers. The master

107
00:07:24,342 --> 00:07:27,946
is based on Spark master, which is

108
00:07:27,968 --> 00:07:32,334
a tool used for distribution of

109
00:07:32,372 --> 00:07:37,710
many computations of big, large data sets for

110
00:07:37,780 --> 00:07:41,086
big data computations. So we would

111
00:07:41,108 --> 00:07:44,606
have Sparkmaster that schedule jobs

112
00:07:44,798 --> 00:07:49,134
for workers and melodic

113
00:07:49,182 --> 00:07:52,706
is handling this setup. So it will be up to melodic to determine how

114
00:07:52,728 --> 00:07:56,786
many workers are needed and it will be also communicating

115
00:07:56,898 --> 00:07:59,670
with both master and workers,

116
00:08:00,650 --> 00:08:03,686
let us show you. Maybe I will minimize it.

117
00:08:03,788 --> 00:08:07,880
That will be visible during the explanation of

118
00:08:09,130 --> 00:08:12,810
each of the steps that modic is performing.

119
00:08:16,510 --> 00:08:19,578
Okay, as you

120
00:08:19,584 --> 00:08:23,214
can see, we have five steps. It will still take a few

121
00:08:23,252 --> 00:08:27,134
minutes until the deployment is finished. So we

122
00:08:27,172 --> 00:08:30,734
have a few minutes now to discuss it. And the

123
00:08:30,772 --> 00:08:34,038
first one is fetching offers. This is the first moment when the melodic

124
00:08:34,074 --> 00:08:40,594
is communicating with cloud providers. So at this point it

125
00:08:40,632 --> 00:08:44,238
gets the information of what hardware, what machines,

126
00:08:44,414 --> 00:08:48,040
what software, like for example operational system,

127
00:08:49,370 --> 00:08:52,854
what such cloud provider offers. So this is the first step.

128
00:08:52,892 --> 00:08:57,000
We communicate with the cloud. Later. There is an important step

129
00:08:57,550 --> 00:09:00,934
which is called generating constraint problem. Inside camel

130
00:09:00,982 --> 00:09:05,162
you can put many constraints. You don't need to put hard

131
00:09:05,216 --> 00:09:08,298
coded specific values. You for example,

132
00:09:08,384 --> 00:09:12,318
put limits to them, like for example

133
00:09:12,404 --> 00:09:16,702
minimum ram value or maximum ram value

134
00:09:16,836 --> 00:09:20,320
for a component, but also

135
00:09:21,810 --> 00:09:25,202
many other. You can put some other

136
00:09:25,256 --> 00:09:27,634
variables, your custom ones.

137
00:09:27,832 --> 00:09:31,982
And here is like this creating

138
00:09:32,046 --> 00:09:35,734
context problem that later would be solved. So this is some

139
00:09:35,772 --> 00:09:39,174
sort of, let's say preparation step. The main

140
00:09:39,212 --> 00:09:40,950
part is done in reasoning,

141
00:09:43,530 --> 00:09:46,902
where a solver is finding a solution to the

142
00:09:47,036 --> 00:09:50,426
earlier created constraint problem.

143
00:09:50,608 --> 00:09:54,534
So based on your requirements, your constraints,

144
00:09:54,582 --> 00:09:57,180
you put on your application.

145
00:09:58,350 --> 00:10:01,100
Melodic would find best solution here.

146
00:10:01,490 --> 00:10:05,166
So it would find the specific values of those variables. It will find

147
00:10:05,188 --> 00:10:08,878
the specific values of ram, hardware or other

148
00:10:08,964 --> 00:10:12,720
variables defined by you that would meet your needs.

149
00:10:13,090 --> 00:10:15,918
And I mentioned that it's find the best solution.

150
00:10:16,014 --> 00:10:19,426
And I think this is important to say what does it

151
00:10:19,448 --> 00:10:23,102
mean the best? And we of course want to optimize

152
00:10:23,246 --> 00:10:26,486
cost and performance, but this is up

153
00:10:26,508 --> 00:10:30,418
to the user, up to you, how you define

154
00:10:30,594 --> 00:10:34,546
what is called utility function and the utility function simply

155
00:10:34,578 --> 00:10:38,074
give us information of how good the solution is,

156
00:10:38,112 --> 00:10:42,006
or pretty much what we want to optimize.

157
00:10:42,198 --> 00:10:46,380
And this function can be really sophisticated. It is not just

158
00:10:47,310 --> 00:10:50,910
performance to performance to price ratio,

159
00:10:51,490 --> 00:10:55,466
but it can be really complicated. There is also in melodic,

160
00:10:55,498 --> 00:10:59,050
there is also attached an additional tool that enables graphically

161
00:10:59,130 --> 00:11:02,726
create such custom functions. It totally

162
00:11:02,778 --> 00:11:05,970
depends on the applications what really you want to optimize.

163
00:11:08,150 --> 00:11:11,714
Here at the step we are using a

164
00:11:11,752 --> 00:11:15,310
function that is based on both price and

165
00:11:15,480 --> 00:11:19,078
both price and performance. We want to have the

166
00:11:19,084 --> 00:11:23,400
best solution to pay the last possible, but still

167
00:11:24,090 --> 00:11:27,762
to get all the computations done

168
00:11:27,836 --> 00:11:28,970
by the workers.

169
00:11:30,990 --> 00:11:34,634
At this moment we don't have that much data that we wish to.

170
00:11:34,752 --> 00:11:38,154
It's hard for us to say what is the

171
00:11:38,192 --> 00:11:41,866
performance of the current solution, as it is not yet deployed.

172
00:11:42,058 --> 00:11:45,582
So at this moment, any quite simple

173
00:11:45,636 --> 00:11:50,270
one is chosen. We would start with one master component,

174
00:11:51,250 --> 00:11:53,970
with one master node and one worker,

175
00:11:55,030 --> 00:11:58,610
that would be the initial setup most likely,

176
00:12:00,550 --> 00:12:04,274
yeah. And as we can see, the cardinality of worker equals one

177
00:12:04,312 --> 00:12:07,858
and the cardinality of master equals

178
00:12:08,034 --> 00:12:11,782
one as well. Okay, the next

179
00:12:11,836 --> 00:12:15,062
step is deploying. This is the

180
00:12:15,116 --> 00:12:18,266
part where we communicate with

181
00:12:18,368 --> 00:12:22,154
cloud provider to set

182
00:12:22,192 --> 00:12:25,542
up all the nodes to start all the virtual

183
00:12:25,606 --> 00:12:29,420
machines. It is also important

184
00:12:30,530 --> 00:12:34,222
that it is not just saying for example

185
00:12:34,276 --> 00:12:38,522
AWS to start the machines as melodic is also communicating

186
00:12:38,586 --> 00:12:42,158
with those machines. There is a need to for example,

187
00:12:42,244 --> 00:12:45,322
install some software.

188
00:12:45,466 --> 00:12:48,926
So for example, if your application, Java, Java will be installed

189
00:12:48,958 --> 00:12:52,900
there. And also, which is important,

190
00:12:53,830 --> 00:12:57,970
the connection established to gather those metrics inside camel,

191
00:12:58,050 --> 00:13:01,634
as I mentioned before, you can define metric

192
00:13:01,682 --> 00:13:05,186
system. So pretty much you put names

193
00:13:05,218 --> 00:13:09,174
of the metrics that you want and how they are gathered.

194
00:13:09,302 --> 00:13:12,746
And in this case you can use some

195
00:13:12,768 --> 00:13:16,534
default metrics. So it would be simply just expressing

196
00:13:16,582 --> 00:13:20,800
that you want, for example price metric or

197
00:13:21,170 --> 00:13:24,042
ram usage metric or cpu metric,

198
00:13:24,186 --> 00:13:28,110
cpu usage metric. But they can be totally custom ones

199
00:13:28,180 --> 00:13:31,854
like simply sending some data about

200
00:13:31,892 --> 00:13:32,990
those workers.

201
00:13:35,590 --> 00:13:40,050
Okay. And here in genome we have six metrics

202
00:13:41,270 --> 00:13:45,650
that I will later discuss in the different views in Grafana.

203
00:13:46,490 --> 00:13:50,274
And as you can see, the deployed

204
00:13:50,322 --> 00:13:54,006
is finished. So I think this is the moment that I

205
00:13:54,028 --> 00:13:57,080
can navigate to the Grafana tool.

206
00:13:57,950 --> 00:14:01,194
And Grafana is

207
00:14:01,232 --> 00:14:05,046
a monitoring application that enables

208
00:14:05,078 --> 00:14:08,794
us to see the details of the app

209
00:14:08,992 --> 00:14:11,790
that we have deployed, in this case genome.

210
00:14:12,290 --> 00:14:22,462
Let me log in once

211
00:14:22,516 --> 00:14:23,120
more.

212
00:14:29,490 --> 00:14:32,370
Okay. I will navigate to dashboard of genome.

213
00:14:37,770 --> 00:14:41,480
Okay. Here are the details of our app, the genome application.

214
00:14:42,090 --> 00:14:47,206
And as I mentioned before, just a reminder that we

215
00:14:47,228 --> 00:14:50,330
will have multiple computations to be performed by workers.

216
00:14:50,830 --> 00:14:54,982
This will be scheduled by the master

217
00:14:55,046 --> 00:14:58,266
node. The number of simulations at the beginning is as

218
00:14:58,288 --> 00:15:01,694
far as, remember almost 600. So we

219
00:15:01,732 --> 00:15:05,582
start with 576 computations and

220
00:15:05,636 --> 00:15:09,338
which is important, we also put the constraints inside camel,

221
00:15:09,514 --> 00:15:13,518
we put the constraints of the constraints

222
00:15:13,534 --> 00:15:17,250
of time. So we want all those computations to be performed

223
00:15:18,950 --> 00:15:23,826
in 60 minutes. As you can see here is the

224
00:15:23,848 --> 00:15:27,206
time left indication. So we

225
00:15:27,228 --> 00:15:30,822
want all of them to be performed on time. Yet, as I mentioned

226
00:15:30,876 --> 00:15:34,166
before, we also want to optimize the cost.

227
00:15:34,268 --> 00:15:37,974
So we are not just setting up multiple

228
00:15:38,022 --> 00:15:41,994
machines to finish pretty much

229
00:15:42,192 --> 00:15:46,474
every simulation instantly, but we want to have

230
00:15:46,512 --> 00:15:50,494
it done in this time limit with regard of

231
00:15:50,532 --> 00:15:52,590
the cost of the entire setup.

232
00:15:54,610 --> 00:15:57,790
Okay, so here you can see the number of instances.

233
00:15:58,290 --> 00:16:02,080
We start with two, which is one master and

234
00:16:02,390 --> 00:16:05,762
one worker, and 600 simulation that

235
00:16:05,816 --> 00:16:09,666
already started to be performed by one

236
00:16:09,768 --> 00:16:10,610
worker.

237
00:16:12,630 --> 00:16:16,550
Okay, inside camel,

238
00:16:17,210 --> 00:16:21,382
which is now that we can smoothly go to the part of

239
00:16:21,436 --> 00:16:24,886
reconfiguration which is extremely important as

240
00:16:25,068 --> 00:16:28,614
so far you have seen how to deploy an application

241
00:16:28,732 --> 00:16:32,134
in multicloud, which is I think already quite

242
00:16:32,172 --> 00:16:35,722
much yet. What now is being

243
00:16:35,776 --> 00:16:39,334
done is really important because based on those metrics,

244
00:16:39,382 --> 00:16:42,810
we have multiple metrics here indicating

245
00:16:42,970 --> 00:16:46,398
simulations, performance or current

246
00:16:46,484 --> 00:16:50,414
setup. Based on those metrics, melodic can make decision if there

247
00:16:50,452 --> 00:16:54,820
is a need to. Maybe I'll close it

248
00:16:55,270 --> 00:16:59,678
can make a decision if there is a need to reconfigure.

249
00:16:59,854 --> 00:17:03,614
And in this case, as I mentioned before, it would be increasing

250
00:17:03,662 --> 00:17:07,234
or decreasing number of workers. And this decision is made totally

251
00:17:07,282 --> 00:17:10,886
automatically. So as you can remember, from the

252
00:17:10,908 --> 00:17:13,686
moment that I have pushed the bitcoin button,

253
00:17:13,868 --> 00:17:17,138
there is no need to interfere at all. The melodic

254
00:17:17,234 --> 00:17:22,378
makes sure that performance is fine, that the

255
00:17:22,384 --> 00:17:25,818
cost is fine, that everything is at this specific

256
00:17:25,904 --> 00:17:29,786
moment in the best possible reconfiguration. And as

257
00:17:29,808 --> 00:17:35,422
you can see, this is actually what will be done here, as this

258
00:17:35,476 --> 00:17:39,454
red colorful light will indicate if

259
00:17:39,492 --> 00:17:43,722
current constraints are met. So in this case, we have estimated

260
00:17:43,786 --> 00:17:46,994
time and as you can see, the estimated time is

261
00:17:47,032 --> 00:17:50,510
higher than the time left. So at this moment, the current solution

262
00:17:50,590 --> 00:17:53,634
would not make all the computations of time.

263
00:17:53,752 --> 00:17:56,710
So melodic would reconfigure. So melodic,

264
00:17:57,690 --> 00:17:59,350
based on those metrics,

265
00:18:01,370 --> 00:18:05,160
would increase the number of workers to make sure that

266
00:18:05,930 --> 00:18:09,100
the computations are done on time.

267
00:18:10,110 --> 00:18:15,082
And I think I can navigate again

268
00:18:15,136 --> 00:18:17,610
to the view of demolodic.

269
00:18:20,450 --> 00:18:23,598
Oh, it is already done. So the

270
00:18:23,604 --> 00:18:27,918
first reconfiguration has been done and I

271
00:18:27,924 --> 00:18:31,498
will just explain what happened here. Now it's

272
00:18:31,514 --> 00:18:37,970
the second one as this is possible to have multiple reconfiguration.

273
00:18:39,030 --> 00:18:42,658
In this view we can see what is currently happening. And as you

274
00:18:42,664 --> 00:18:46,818
can see, we have reconfiguration process which is free boxes.

275
00:18:46,994 --> 00:18:50,918
Then in

276
00:18:50,924 --> 00:18:54,498
the end we would have a better solution

277
00:18:54,594 --> 00:18:58,246
that better meets our needs and which is important.

278
00:18:58,348 --> 00:19:01,834
I think what is important to say here is that those box are pretty much

279
00:19:01,872 --> 00:19:06,134
the same that you have seen during initial deployment. So reasoning

280
00:19:06,182 --> 00:19:10,374
is what I told you before, that it is finding

281
00:19:10,422 --> 00:19:14,078
values of the variables, finding the best solution based on

282
00:19:14,084 --> 00:19:17,614
the utility function. And the difference here

283
00:19:17,652 --> 00:19:20,174
is that we have much more data than we used to.

284
00:19:20,292 --> 00:19:24,354
So during initial deployment, we didn't know much

285
00:19:24,392 --> 00:19:28,260
about those metrics, values that are also needed to find

286
00:19:28,790 --> 00:19:32,466
the best solution. Here we have all those data. So based on

287
00:19:32,488 --> 00:19:36,246
those metrics, based all those data that we

288
00:19:36,268 --> 00:19:40,374
have, the melodic is improving, melodic is

289
00:19:40,412 --> 00:19:45,094
setting up a better configuration and

290
00:19:45,132 --> 00:19:48,914
deploying is again communication with the cloud provider.

291
00:19:49,042 --> 00:19:53,514
So for example, setting up a new machines or deleting the old ones or

292
00:19:53,712 --> 00:19:57,466
that can be all the front part of

293
00:19:57,568 --> 00:19:59,850
communication with the cloud provider.

294
00:20:02,770 --> 00:20:05,470
I will go back to Grafana.

295
00:20:09,170 --> 00:20:12,674
So I assume we will see an

296
00:20:12,712 --> 00:20:15,300
increase of the worker in a few minutes.

297
00:20:17,590 --> 00:20:20,100
We will see. It takes a little time.

298
00:20:23,750 --> 00:20:27,320
We can see here with the solution that has been found.

299
00:20:27,770 --> 00:20:31,094
We can see the cardinality of the master is one, as it is

300
00:20:31,132 --> 00:20:34,790
also the limit put inside camel. And also

301
00:20:34,860 --> 00:20:38,634
worker cardinality has increased to

302
00:20:38,672 --> 00:20:41,946
two. So the melodic made the decision to start up

303
00:20:41,968 --> 00:20:44,970
a second machine, a second worker.

304
00:20:46,270 --> 00:20:49,626
Okay. And here you can see this is the diagram indicating the

305
00:20:49,648 --> 00:20:53,646
cardinality of the numbers, the cardinality of the

306
00:20:53,668 --> 00:20:57,726
workers. And as you can see, also the

307
00:20:57,908 --> 00:21:01,182
estimated time decreased. So I will

308
00:21:01,236 --> 00:21:04,618
assume that in a few seconds

309
00:21:04,714 --> 00:21:08,190
we will see that the current solution is just on spot,

310
00:21:09,170 --> 00:21:13,342
but I guess also needs a few seconds to

311
00:21:13,396 --> 00:21:16,070
process everything. Ah,

312
00:21:16,220 --> 00:21:19,846
so the estimated time decreased and the

313
00:21:19,868 --> 00:21:23,510
estimated time increased. And now it is lower

314
00:21:23,580 --> 00:21:27,650
than the time left. So at this moment it will be a totally sufficient

315
00:21:27,730 --> 00:21:31,078
solution. Yet have in mind that we don't

316
00:21:31,094 --> 00:21:34,426
have that much time to wait until all the perfect, you can

317
00:21:34,448 --> 00:21:39,642
see green light, as this is currently the best solution and

318
00:21:39,776 --> 00:21:43,546
all the constraints are met. We won't

319
00:21:43,578 --> 00:21:47,374
wait until all the computations are performed. We still have like

320
00:21:47,412 --> 00:21:51,454
500 of them. Yet have in mind that it

321
00:21:51,492 --> 00:21:54,926
is totally possible, and very possible that we'll

322
00:21:54,958 --> 00:21:58,302
have many reconfiguration. For example, if the estimated

323
00:21:58,366 --> 00:22:01,586
time goes, the difference between estimated times and

324
00:22:01,608 --> 00:22:05,178
time left would be too much. It indicates that it's

325
00:22:05,214 --> 00:22:08,118
possible to optimized cost.

326
00:22:08,284 --> 00:22:12,070
So it is very possible that one of the workers

327
00:22:12,970 --> 00:22:16,486
would be stopped, or maybe if some

328
00:22:16,508 --> 00:22:19,974
of the computations would take longer to perform, which is totally

329
00:22:20,022 --> 00:22:23,866
possible, maybe it would be an increase of

330
00:22:23,888 --> 00:22:27,418
the workers. And as I mentioned before, it is

331
00:22:27,424 --> 00:22:31,686
done totally automatically. So you can see I haven't interfered

332
00:22:31,718 --> 00:22:35,120
with the application at all from the moment I started it.

333
00:22:36,850 --> 00:22:40,414
Okay, so this is the main part of melodic. I also

334
00:22:40,452 --> 00:22:43,570
want to go a little bit in the extension of melodic,

335
00:22:44,230 --> 00:22:47,346
which is morphemic. And one

336
00:22:47,368 --> 00:22:50,578
of the additions, there are quite many of them,

337
00:22:50,664 --> 00:22:54,606
but one of the addition is called forecasting

338
00:22:54,638 --> 00:22:58,086
model. And as you can see,

339
00:22:58,268 --> 00:23:02,306
we can see here, as you can see, there are few diagrams

340
00:23:02,338 --> 00:23:06,134
indicating the values of the metrics, yet you can imagine that

341
00:23:06,332 --> 00:23:09,706
we have such, I don't know, we have time left, for example,

342
00:23:09,808 --> 00:23:13,740
or we have simulations to be performed in weeks,

343
00:23:14,590 --> 00:23:18,086
or, I don't know, months, and the platform would handle

344
00:23:18,118 --> 00:23:22,510
it. But yet with forecasting model, we can predict the values

345
00:23:22,930 --> 00:23:26,606
of those metrics. So at

346
00:23:26,628 --> 00:23:30,314
this moment, when I just started, there is still not sufficient

347
00:23:30,362 --> 00:23:34,266
data for forecasting model. To forecast

348
00:23:34,298 --> 00:23:38,366
anything yet, I will go to one

349
00:23:38,388 --> 00:23:42,094
of the deployed, which is also a genome, but with much more data

350
00:23:42,292 --> 00:23:46,562
and a little bit, a little bit bigger

351
00:23:46,706 --> 00:23:49,926
time constraints. So I will show you, for you

352
00:23:49,948 --> 00:23:54,022
to this one that you could have a look

353
00:23:54,076 --> 00:23:56,760
at how at forecasting model,

354
00:23:57,950 --> 00:24:01,690
which is pretty much all those colorful lines.

355
00:24:02,350 --> 00:24:05,658
And as you can see, it has been quite a

356
00:24:05,664 --> 00:24:08,938
bigger example. We started with almost 800,

357
00:24:09,104 --> 00:24:12,666
800 simulations at the beginning and I had to

358
00:24:12,688 --> 00:24:16,174
start it at the beginning of the day as it takes around seven to 8

359
00:24:16,212 --> 00:24:19,694
hours to finish all of them. Yet those few

360
00:24:19,732 --> 00:24:24,446
hours is needed to gather enough data to

361
00:24:24,468 --> 00:24:29,274
get predictions. And the forecasting model is gathering

362
00:24:29,402 --> 00:24:33,406
based on those data is learning to perform

363
00:24:33,508 --> 00:24:37,430
predictions model

364
00:24:37,580 --> 00:24:41,640
what is used here for forecasting is quite many different

365
00:24:42,250 --> 00:24:47,654
machine learning models. We have here some of them that

366
00:24:47,692 --> 00:24:51,734
won few competitions in data series forecasting.

367
00:24:51,862 --> 00:24:54,822
So for example, we have Arima, TFT,

368
00:24:54,886 --> 00:24:59,002
NBITs and a few others like

369
00:24:59,056 --> 00:25:02,366
CNN or profit. Yet, which is important, you can

370
00:25:02,388 --> 00:25:05,994
see a few of them are not very, not very accurate.

371
00:25:06,122 --> 00:25:08,990
It's still, there is the forecasting model is quite complex.

372
00:25:09,490 --> 00:25:12,480
There is some ability to.

373
00:25:13,190 --> 00:25:17,522
There is a model that is also taking into account many

374
00:25:17,576 --> 00:25:21,202
different models. So this is not just one model taken

375
00:25:21,256 --> 00:25:25,262
in account. There is also a model that is

376
00:25:25,336 --> 00:25:29,398
merging them and assembling them to make sure that we always have

377
00:25:29,564 --> 00:25:33,666
the best predictions. But why actually we want to predict

378
00:25:33,778 --> 00:25:37,938
those metric values. And the point is that as

379
00:25:37,964 --> 00:25:41,306
you can see, that based on the predictions, we can

380
00:25:41,328 --> 00:25:44,934
look into the future and we can optimize, we can start a reconfiguration

381
00:25:44,982 --> 00:25:48,140
before. So in this case,

382
00:25:49,230 --> 00:25:53,022
maybe in this case, it's not that visible what

383
00:25:53,076 --> 00:25:57,760
improvement we can get. But for example, imagine a totally different application

384
00:25:58,130 --> 00:25:59,440
where for example,

385
00:26:02,870 --> 00:26:06,402
we have multiple nodes that are

386
00:26:06,536 --> 00:26:09,874
handling requests from the users and

387
00:26:10,072 --> 00:26:14,450
based on those metrics, we can for example, predict when

388
00:26:14,520 --> 00:26:17,990
there will be an increase of the users. So like an easy example

389
00:26:18,060 --> 00:26:22,262
would be that for example, we have more requests after 05:00

390
00:26:22,316 --> 00:26:26,146
p.m. And after a few days, the melodic

391
00:26:26,178 --> 00:26:30,522
or even sooner morphemic would learn that

392
00:26:30,576 --> 00:26:34,362
such an increase happens and would start

393
00:26:34,416 --> 00:26:38,394
reconfiguration even before this increase is

394
00:26:38,432 --> 00:26:42,222
seen. So we would not be adapting the platform for the current

395
00:26:42,276 --> 00:26:46,480
situation, but we would adapt the application

396
00:26:47,170 --> 00:26:51,070
just before it is needed. So based on the predictions of,

397
00:26:51,220 --> 00:26:54,882
for example, increase of the users, your application would be ready.

398
00:26:54,936 --> 00:26:58,574
You would have enough nodes, enough nodes to handle

399
00:26:58,622 --> 00:26:59,970
all the requests,

400
00:27:01,990 --> 00:27:05,220
all the requests that appear after 05:00 p.m.,

401
00:27:06,250 --> 00:27:09,334
okay, so this is the example of

402
00:27:09,372 --> 00:27:12,806
also forecasting model that is an

403
00:27:12,828 --> 00:27:16,486
addition from morphemic. There are

404
00:27:16,508 --> 00:27:20,490
many more. Also a few of them are under development.

405
00:27:21,950 --> 00:27:26,074
For example, also an ability for the platform to

406
00:27:26,112 --> 00:27:30,766
improve also the

407
00:27:30,788 --> 00:27:34,320
architecture of the current solution. So for example,

408
00:27:35,730 --> 00:27:39,758
change node to work to change

409
00:27:39,924 --> 00:27:44,834
node from cpu to gpu usage to

410
00:27:44,872 --> 00:27:48,802
make sure also that we have always the best configuration and

411
00:27:48,856 --> 00:27:52,546
best architecture. To learn more

412
00:27:52,568 --> 00:27:56,246
you can go to the website of morphemic and melodic which

413
00:27:56,268 --> 00:28:01,800
is already under use and

414
00:28:02,170 --> 00:28:05,030
today this will be all for my presentation.

415
00:28:06,170 --> 00:28:10,038
Thank you all and I hope you enjoyed and I could see that

416
00:28:10,124 --> 00:28:13,430
even with such simple be not simple, it's not simple,

417
00:28:13,500 --> 00:28:17,314
but accessible tool as it is open source

418
00:28:17,362 --> 00:28:20,880
and everyone can contribute to it or use it.

419
00:28:23,170 --> 00:28:27,066
With such a tool, how you can improve it improve

420
00:28:27,098 --> 00:28:29,580
your application. Thank you very much.

