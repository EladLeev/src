1
00:00:00,250 --> 00:00:01,630
Are youre an SRE,

2
00:00:03,570 --> 00:00:04,830
a developer,

3
00:00:06,610 --> 00:00:10,014
a quality engineer who wants to tackle the challenge of

4
00:00:10,052 --> 00:00:14,254
improving reliability in your DevOps? You can enable your DevOps for

5
00:00:14,292 --> 00:00:17,614
reliability with chaos native. Create your

6
00:00:17,652 --> 00:01:16,982
free account at Chaos native. Litmus Cloud hi,

7
00:01:17,036 --> 00:01:20,946
welcome to improve your automation to reduce toil.

8
00:01:21,138 --> 00:01:25,094
My name is Mandi Walls. I am a

9
00:01:25,212 --> 00:01:28,514
DevOps advocate at Pagerduty. If you'd

10
00:01:28,562 --> 00:01:32,582
like to get in touch with me at any point I am lnxchk

11
00:01:32,646 --> 00:01:37,034
on Twitter or you can email me. I'm mwalls@pagerduty.com

12
00:01:37,152 --> 00:01:40,882
and you can reach out to Pagerduty at any time on pagerduty,

13
00:01:40,966 --> 00:01:45,530
our Twitch handle. So let's talk about automation,

14
00:01:45,690 --> 00:01:49,546
right? So were going to start with a bit of the basics. Hopefully you've

15
00:01:49,578 --> 00:01:53,522
done a bit of automation before, but maybe you haven't really

16
00:01:53,656 --> 00:01:57,854
thought about what actually you're

17
00:01:57,902 --> 00:02:01,460
doing, like in an abstract way. Right. Were heard the word and

18
00:02:01,990 --> 00:02:05,326
have a kind of a concept of what we're after and the goals

19
00:02:05,358 --> 00:02:08,678
that we have for automation. So we're going to

20
00:02:08,684 --> 00:02:12,374
talk about exactly what that means and how to sort of put

21
00:02:12,412 --> 00:02:16,134
it together in a way that is going to be successful for not just

22
00:02:16,252 --> 00:02:19,330
yourself but for your team and youre larger organization,

23
00:02:19,410 --> 00:02:22,602
right? So when we're thinking about automation for it

24
00:02:22,656 --> 00:02:26,250
practices, right, were going to take some manual processes and

25
00:02:26,320 --> 00:02:29,610
someone on our team had to run them piece by piece,

26
00:02:29,680 --> 00:02:33,066
probably, right. Were going to take that

27
00:02:33,088 --> 00:02:36,110
stuff and were going to ask some kind of machine to do it for us.

28
00:02:36,180 --> 00:02:40,734
We're going to look for tasks that machines don't need

29
00:02:40,772 --> 00:02:44,106
to do any other thinking for things that machines will do very well. They don't

30
00:02:44,138 --> 00:02:47,678
require a lot of nuance, they don't require a lot of creativity,

31
00:02:47,774 --> 00:02:50,642
they don't require a lot of lateral thinking in the moment.

32
00:02:50,776 --> 00:02:54,702
And those are the things we're going to encode so the machine understands

33
00:02:54,766 --> 00:02:58,498
how to manage them. Right? And then we're going to let our humans,

34
00:02:58,674 --> 00:03:02,274
they're going to go do something more interesting and hopefully more valuable

35
00:03:02,322 --> 00:03:06,386
to our organization. Right? Automation is a key component

36
00:03:06,498 --> 00:03:09,842
in the management of complex real time systems that

37
00:03:09,916 --> 00:03:13,674
a lot of us are immersed in, right? The amount of information that

38
00:03:13,792 --> 00:03:16,986
has to be processed and taken into account when

39
00:03:17,008 --> 00:03:20,654
you're making a decision or making a change is

40
00:03:20,772 --> 00:03:24,138
immense, right? Microservices, cloud platforms,

41
00:03:24,314 --> 00:03:28,160
third party and internally developed software, all these things,

42
00:03:28,530 --> 00:03:31,790
they all have their own idiosyncrasies and

43
00:03:31,860 --> 00:03:35,906
behaviors and there's just so much stuff that

44
00:03:36,008 --> 00:03:39,538
one person really can't hope to know. All of

45
00:03:39,544 --> 00:03:43,986
the things about all the things that we work on. So to

46
00:03:44,008 --> 00:03:47,762
get work done and to do it right, teams rely on automation

47
00:03:47,826 --> 00:03:51,858
for their common tasks. And automation is going to help them avoid mistakes.

48
00:03:51,954 --> 00:03:55,174
It's going to increase their reliability, it's going

49
00:03:55,212 --> 00:03:58,610
to increase the repeatability of those tasks.

50
00:03:58,690 --> 00:04:02,502
And overall, we're really. After reducing

51
00:04:02,566 --> 00:04:06,282
toil, we'll talk about what toil actually is in a moment.

52
00:04:06,336 --> 00:04:09,626
Right. We're going to use automation to build and test and deploy our

53
00:04:09,648 --> 00:04:13,706
software. We are going to use it to create and maintain

54
00:04:13,738 --> 00:04:17,040
our infrastructure. Anytime we perform

55
00:04:17,490 --> 00:04:21,086
a task more than once, or we

56
00:04:21,108 --> 00:04:24,740
have a task that more than one person should be able to perform

57
00:04:25,190 --> 00:04:28,750
in exactly the same way, we really should be considering

58
00:04:28,830 --> 00:04:32,690
automation so that we can ensure that those tasks are

59
00:04:32,760 --> 00:04:37,194
completed as expected. Our team members aren't automatons.

60
00:04:37,262 --> 00:04:41,106
Right? They're not robots. So when we want to make sure processes

61
00:04:41,138 --> 00:04:44,406
are always performed the exact same way, we produce our

62
00:04:44,428 --> 00:04:47,846
automation and we create little robots, right? So automation can

63
00:04:47,868 --> 00:04:50,986
take different forms. It might be a library of

64
00:04:51,008 --> 00:04:54,534
scripts and tools. It might be a set of Yaml files

65
00:04:54,582 --> 00:04:58,214
that are ingested by another tool. It might be encoded

66
00:04:58,262 --> 00:05:01,946
into the configurations of even just your build server,

67
00:05:01,978 --> 00:05:05,582
right? These are things that collect knowledge from your

68
00:05:05,636 --> 00:05:09,118
colleagues and store it. In a place where

69
00:05:09,204 --> 00:05:13,394
everyone can use all of the amassed knowledge of your entire team,

70
00:05:13,512 --> 00:05:17,474
you are collecting up expertise, encapsulating it,

71
00:05:17,512 --> 00:05:20,562
and sharing it. So let's talk about what toil means,

72
00:05:20,616 --> 00:05:24,306
right? Toil for it, teams is a

73
00:05:24,328 --> 00:05:26,850
four letter word, literally and figuratively.

74
00:05:26,930 --> 00:05:30,086
Right? It's things that you

75
00:05:30,108 --> 00:05:33,878
have to get done, but nobody really wants to do them. They're not

76
00:05:33,964 --> 00:05:37,654
fun, they're not interesting. Right? Teams want to do interesting things.

77
00:05:37,692 --> 00:05:41,834
They want to do tasks that impact the bottom line, that create value,

78
00:05:42,032 --> 00:05:45,402
that require some kind of expertise, but also

79
00:05:45,456 --> 00:05:48,966
creativity, right? And toil is kind of the opposite

80
00:05:48,998 --> 00:05:52,970
of that. It's the repetitive tactical work that increases

81
00:05:53,050 --> 00:05:56,654
linearly as the size of the environment increases. So think about

82
00:05:56,692 --> 00:06:00,666
things like deploying software to all of the systems,

83
00:06:00,858 --> 00:06:04,750
adding user or system accounts to all the systems,

84
00:06:04,910 --> 00:06:09,006
scaling environments, or testing backups,

85
00:06:09,038 --> 00:06:13,006
if you ever actually do that, right, even in fully

86
00:06:13,038 --> 00:06:17,006
modern systems, the task of regularly building

87
00:06:17,118 --> 00:06:19,430
your short gives environments.

88
00:06:20,490 --> 00:06:23,942
It just becomes a new version of toil, just rerunning those things

89
00:06:23,996 --> 00:06:26,806
over and over. It's not something you want to be doing by hand.

90
00:06:26,908 --> 00:06:30,678
We know this work has to be done. It doesn't particularly

91
00:06:30,854 --> 00:06:34,186
add value in the moment to your customer or

92
00:06:34,208 --> 00:06:37,962
your end user. But leaving it neglected will definitely

93
00:06:38,096 --> 00:06:41,258
impact user experience at some point sooner or later, right?

94
00:06:41,344 --> 00:06:44,574
It might eventually allow a security breach. It might

95
00:06:44,612 --> 00:06:48,250
cause degraded performance. It's kind of like hygiene,

96
00:06:48,330 --> 00:06:51,578
right? Think about brushing your teeth. I know we've

97
00:06:51,594 --> 00:06:54,686
all been stuck at home for a year and a half, but if

98
00:06:54,708 --> 00:06:57,634
you skip a day brushing your teeth, okay,

99
00:06:57,832 --> 00:07:01,442
most people won't notice. But if you quit completely

100
00:07:01,576 --> 00:07:05,186
or you put it off for a long time, people are going to notice and

101
00:07:05,208 --> 00:07:08,694
they're probably going to be concerned for you, right? And that's sort of the same

102
00:07:08,732 --> 00:07:11,894
kind of things with these tools based tasks, right?

103
00:07:11,932 --> 00:07:15,586
They have to be completed. But fortunately,

104
00:07:15,698 --> 00:07:19,462
unlike brushing your teeth, we don't have to do these tasks

105
00:07:19,526 --> 00:07:22,986
with humans, right? We really should be automating them so

106
00:07:23,008 --> 00:07:25,260
that our humans don't have to do them.

107
00:07:26,590 --> 00:07:30,814
So looking at some of the things that we might

108
00:07:30,852 --> 00:07:35,626
have as drivers of automation, right, we might have some complexity,

109
00:07:35,738 --> 00:07:39,086
speed curbing mistakes, reducing toil might be

110
00:07:39,108 --> 00:07:42,494
some of our goals for things we are

111
00:07:42,532 --> 00:07:46,194
targeting for automation manual processes in

112
00:07:46,232 --> 00:07:49,682
general. Sre prone to mistakes. There's plenty of opportunity

113
00:07:49,816 --> 00:07:53,058
for typos to cause havoc, right, when you're trying to work in

114
00:07:53,064 --> 00:07:56,926
large environments, anything from typing commands

115
00:07:56,958 --> 00:08:00,214
in the wrong terminal window, right, to missing options off a

116
00:08:00,252 --> 00:08:04,134
very long command string, to skipping a step when you're copying and

117
00:08:04,172 --> 00:08:08,390
pasting out of a wiki onto another page or onto a documentation or

118
00:08:08,540 --> 00:08:12,358
out of there into the terminal or whatever it is. Modern IT systems

119
00:08:12,454 --> 00:08:15,994
might be comprised of hundreds or even thousands of individual

120
00:08:16,112 --> 00:08:19,782
components, right? So you've got your cloud infrastructure,

121
00:08:19,846 --> 00:08:23,434
you've got containers, you've got hosts, you got networks, you have services for monitoring,

122
00:08:23,482 --> 00:08:27,338
collecting metrics, you have alerting systems like pagerduty,

123
00:08:27,434 --> 00:08:31,306
you have log collection, you have authentication and authorization. Maybe youre

124
00:08:31,338 --> 00:08:34,630
a b testing or beta testing for new features. You have storage and runtimes

125
00:08:34,650 --> 00:08:38,594
and all of this stuff. The number of possible combinations is

126
00:08:38,632 --> 00:08:42,162
nearly infinite. So interacting with all of these, you're just

127
00:08:42,216 --> 00:08:45,426
multiplying how many possible ways things can go wrong.

128
00:08:45,608 --> 00:08:48,902
And any of them can change at any time,

129
00:08:48,956 --> 00:08:52,786
right? Third party services and resources get changed by the vendor

130
00:08:52,898 --> 00:08:56,642
on their own schedule. They don't care what your schedule is, right, requiring updates

131
00:08:56,706 --> 00:09:00,210
and changes. And then you've got youre internal development and that

132
00:09:00,220 --> 00:09:03,882
requires changes too. It's hard to keep up with where all the things

133
00:09:03,936 --> 00:09:08,042
are and what they're supposed to be doing, even for teams that are super

134
00:09:08,096 --> 00:09:11,386
conscientious about documentation, and I know you all are,

135
00:09:11,568 --> 00:09:14,974
my list of service instances might be outdated before I finish it,

136
00:09:15,012 --> 00:09:18,974
right? Especially if my environment uses sophisticated auto scaling. Any work

137
00:09:19,012 --> 00:09:22,234
that I need to perform on the instances needs the most recent

138
00:09:22,282 --> 00:09:25,854
data and also probably some kind of query to

139
00:09:25,892 --> 00:09:29,458
an API instead of a hard coded list of instances. Hopefully we

140
00:09:29,464 --> 00:09:32,974
are all sort of beyond that point where we've got like one big host

141
00:09:33,022 --> 00:09:36,418
file for everything. You might not be it happens, right?

142
00:09:36,584 --> 00:09:40,322
But it's easy to make mistakes when we're using these manual processes,

143
00:09:40,386 --> 00:09:43,522
right? Especially things with lots of steps or complex

144
00:09:43,586 --> 00:09:47,106
commands. So one thing automation really does for manual processes

145
00:09:47,218 --> 00:09:50,534
is that it allows your team to permanently record all

146
00:09:50,572 --> 00:09:53,866
the good options and all the preferences and put them

147
00:09:53,888 --> 00:09:57,034
in a place where you don't have a chance to forget them or

148
00:09:57,072 --> 00:10:00,890
leave them off or whatever it is, right? So you're

149
00:10:01,390 --> 00:10:05,006
getting to a place where all of those good things that

150
00:10:05,028 --> 00:10:08,366
you learned are recorded, right? And then finally we

151
00:10:08,388 --> 00:10:12,880
automate to avoid toil all that repetitive work that we just talked about and

152
00:10:13,650 --> 00:10:17,210
things like patching systems and restarting services or whatever it is,

153
00:10:17,300 --> 00:10:20,226
a team still has to know how to do all these things in order to

154
00:10:20,248 --> 00:10:24,146
automate them. But performing the same tasks over and over isn't the

155
00:10:24,168 --> 00:10:29,766
best use of our team members time and

156
00:10:29,788 --> 00:10:33,494
then thinking about what we actually do use our time for,

157
00:10:33,532 --> 00:10:36,614
right, a couple of myths about automation, right? One of them

158
00:10:36,652 --> 00:10:40,098
is, is it possible to automate yourself out of a job?

159
00:10:40,204 --> 00:10:43,894
And it's a fun myth. And I love this XKCD

160
00:10:43,942 --> 00:10:46,698
cartoon, right, because it kind of links back to what we were talking about with

161
00:10:46,704 --> 00:10:50,378
saving time. But the cartoon is,

162
00:10:50,464 --> 00:10:54,110
I spend a lot of time on this task, so I should write a program

163
00:10:54,180 --> 00:10:57,406
automating it. And you find that in your future, you spend most of your

164
00:10:57,428 --> 00:11:00,910
time refactoring your automation. Hopefully you're not doing that, right?

165
00:11:00,980 --> 00:11:04,618
So when you're thinking about what your job is

166
00:11:04,644 --> 00:11:08,546
going to be after you've automated all of your tasks, right, you're really

167
00:11:08,648 --> 00:11:12,530
automating yourself into a new job. Your team

168
00:11:12,600 --> 00:11:16,370
has automated the tools out of the everyday tasks. You're hopefully

169
00:11:16,450 --> 00:11:19,974
left with the work that requires more creativity, things that

170
00:11:20,012 --> 00:11:23,074
require more long term planning that provides

171
00:11:23,122 --> 00:11:27,586
more strategic value to the organization than deploying thousands

172
00:11:27,618 --> 00:11:31,206
of patches over the course of a month, right? Things like planning

173
00:11:31,238 --> 00:11:34,406
improvements, building more robust disaster recovery

174
00:11:34,438 --> 00:11:38,166
plan, building and shipping more new features for your users.

175
00:11:38,278 --> 00:11:41,914
Smoothing out the tasks required to get basic tasks done

176
00:11:42,032 --> 00:11:45,294
leaves more time for doing all the fun stuff, right? So at some

177
00:11:45,332 --> 00:11:48,926
point, your day to day job will look significantly different

178
00:11:49,028 --> 00:11:52,778
from what it once was, right? Instead of running manual processes,

179
00:11:52,874 --> 00:11:56,766
you'll be maintaining and updating those things periodically and performing

180
00:11:56,878 --> 00:12:00,110
more value tasks on a daily basis.

181
00:12:00,190 --> 00:12:03,922
So the cartoon little bit tongue in cheek, you definitely

182
00:12:03,976 --> 00:12:07,506
don't want to be spending all of youre time maintaining in your automation,

183
00:12:07,618 --> 00:12:10,790
but there's going to be work involved and that

184
00:12:10,860 --> 00:12:14,038
hopefully will be fun and of a higher value than some of the

185
00:12:14,044 --> 00:12:17,682
toil things that you're doing. Another myth is

186
00:12:17,836 --> 00:12:20,982
you don't have to know anything if it's all automated.

187
00:12:21,046 --> 00:12:24,714
And this is an interesting one, right, because there is research in

188
00:12:24,752 --> 00:12:28,330
systems engineering and automation engineering that

189
00:12:28,400 --> 00:12:32,590
indicates having fully automated environments can

190
00:12:32,660 --> 00:12:35,806
hinder skill development for junior engineers.org new

191
00:12:35,828 --> 00:12:39,514
team members to create really useful automation,

192
00:12:39,642 --> 00:12:43,426
someone on the team has to have had at some point

193
00:12:43,608 --> 00:12:47,454
really robust expertise in the systems and processes

194
00:12:47,582 --> 00:12:50,866
being automated. Your team won't be successful if no

195
00:12:50,888 --> 00:12:54,242
one knows what's really going on even with automation, though.

196
00:12:54,296 --> 00:12:57,618
So you have the automation and you might have maybe that the person who wrote

197
00:12:57,634 --> 00:13:01,462
it has left. Automation is part of the lifecycle of

198
00:13:01,516 --> 00:13:05,430
your application and your systems, and it will need to change

199
00:13:05,580 --> 00:13:08,646
as those services change and are updated.

200
00:13:08,838 --> 00:13:12,342
It will probably need to be updated when the operating

201
00:13:12,406 --> 00:13:15,706
system or dependencies are updated. Maintaining the

202
00:13:15,728 --> 00:13:19,002
automation tools for a service is part

203
00:13:19,056 --> 00:13:22,566
of maintaining that service itself. So learning how to maintain

204
00:13:22,598 --> 00:13:26,206
and test the automation and run folks and other tools is a

205
00:13:26,228 --> 00:13:29,614
key way to help your new team members learn

206
00:13:29,652 --> 00:13:32,798
about the services. Does the start stop script need to

207
00:13:32,804 --> 00:13:36,302
be updated? Are logs now going to a different location?

208
00:13:36,446 --> 00:13:40,238
Are updates now being downloaded from a different artifact repository?

209
00:13:40,334 --> 00:13:43,986
These are key pieces of system information that your team will use to

210
00:13:44,008 --> 00:13:47,414
maintain all the tools and things that you help run. And they

211
00:13:47,452 --> 00:13:51,074
are components that will also help new members gain

212
00:13:51,122 --> 00:13:54,626
more expertise into the systems that they're

213
00:13:54,658 --> 00:13:57,960
working on. So keeping this in mind, right.

214
00:13:58,490 --> 00:14:02,346
Making sure you're doing skill development and knowledge sharing with

215
00:14:02,448 --> 00:14:05,770
younger team members, with your junior team members, the new folks on your team,

216
00:14:05,920 --> 00:14:09,286
it can be super important. Absolutely. So let's

217
00:14:09,318 --> 00:14:14,318
talk a little bit about what actually makes good

218
00:14:14,484 --> 00:14:17,520
automation. We've seen it,

219
00:14:17,970 --> 00:14:22,190
but how do we know what it is? Right? So I've borrowed

220
00:14:22,530 --> 00:14:25,806
a set of requirements from Lee Atchison's

221
00:14:25,838 --> 00:14:29,774
book architecting for scale because I things he has really encapsulated

222
00:14:29,822 --> 00:14:33,026
the key points here into a nice bulleted list.

223
00:14:33,128 --> 00:14:36,258
So there's a wide variety of tools

224
00:14:36,274 --> 00:14:39,766
and platforms available to help you automate workflows across

225
00:14:39,868 --> 00:14:43,480
all kinds of options and ecosystems. Right. It's hard to know

226
00:14:44,090 --> 00:14:47,714
which tools might work best in your environment,

227
00:14:47,842 --> 00:14:51,146
but as a baseline, there's a list of requirements here

228
00:14:51,168 --> 00:14:55,066
that might be helpful. Right. So looking at some of these here,

229
00:14:55,168 --> 00:14:58,294
we want our automation to be testable.

230
00:14:58,342 --> 00:15:01,194
We want to be able to test that the automation is correct.

231
00:15:01,312 --> 00:15:04,490
It's going to be out there in our ecosystem, it's doing things on our behalf,

232
00:15:04,570 --> 00:15:08,234
so we want to trust it, right? Maybe were going to apply some TDD

233
00:15:08,282 --> 00:15:12,858
methods for the automation code will help us as well. So relying

234
00:15:13,034 --> 00:15:16,994
on our test suite and were making changes and making updates to

235
00:15:17,112 --> 00:15:20,738
not just the application code but also the automation around it.

236
00:15:20,904 --> 00:15:24,306
And then we want it to be flexible. We want to get

237
00:15:24,408 --> 00:15:28,486
a lot of value out of it over time, right? So we're not relying on

238
00:15:28,588 --> 00:15:32,038
hard coded system lists or other data

239
00:15:32,204 --> 00:15:35,814
when we can add maybe a query or an API call.

240
00:15:35,932 --> 00:15:39,254
So variables or version numbers and service names are going to help

241
00:15:39,292 --> 00:15:43,062
us for upgrades and making sure that we get a long lifecycle

242
00:15:43,126 --> 00:15:46,300
out of this automation that we've invested in, right?

243
00:15:46,670 --> 00:15:50,270
And then we want to put our automation into our version control

244
00:15:50,340 --> 00:15:54,062
systems and practice code reviews. And that will help us

245
00:15:54,196 --> 00:15:57,614
maintain this piece of automation over

246
00:15:57,652 --> 00:16:01,342
time, right? It's far better than having a directory full of

247
00:16:01,476 --> 00:16:04,986
script sh underscore back files for folks

248
00:16:05,018 --> 00:16:08,322
to wade through when they have questions, right? You use your version control,

249
00:16:08,376 --> 00:16:11,698
you use your code reviews and your test suites, and that's going to

250
00:16:11,704 --> 00:16:15,694
help you manage assumptions and catch issues before they become production

251
00:16:15,742 --> 00:16:19,446
problems, right? They also help your new team members, like we were

252
00:16:19,468 --> 00:16:23,282
just talking about, become familiar with the services and the automation

253
00:16:23,346 --> 00:16:27,586
and all the rest of the pieces in the ecosystem. So keep your automation

254
00:16:27,778 --> 00:16:31,766
for related systems the same, right? Make it applicable

255
00:16:31,878 --> 00:16:35,466
to all the other things. This can easily get out of hand if

256
00:16:35,488 --> 00:16:39,194
your application teams arent required to use the same runtimes or other

257
00:16:39,232 --> 00:16:43,418
tools. I totally understand that. But anywhere

258
00:16:43,514 --> 00:16:48,190
you can reuse components, you should do it. Create official libraries,

259
00:16:48,690 --> 00:16:53,066
best case methods for dealing with your most common components.

260
00:16:53,178 --> 00:16:56,658
Make these solutions the easiest way to get work done. Maybe it's a

261
00:16:56,664 --> 00:17:00,098
fast track, maybe you don't need a change ticket or other permissions to

262
00:17:00,184 --> 00:17:03,938
use it if you're using the blessed version, right? And then finally we want

263
00:17:04,024 --> 00:17:07,974
repeatability and audibility, right? Auditability. We want to

264
00:17:08,012 --> 00:17:12,146
know that every time the tool runs it's

265
00:17:12,178 --> 00:17:15,746
going to produce a predictable outcome. And some tools

266
00:17:15,778 --> 00:17:18,898
are far better at this than others and provide easier tracking

267
00:17:18,994 --> 00:17:22,918
for who made a change or who ran a command. But overall,

268
00:17:23,014 --> 00:17:26,150
across the sort of entire marketplace of automation tools,

269
00:17:26,230 --> 00:17:29,466
this has been getting a lot better over the past several years. So hopefully the

270
00:17:29,488 --> 00:17:33,294
tools that you're using and the things that you're looking at or considering are

271
00:17:33,332 --> 00:17:36,800
also providing that kind of feature. So then let's talk about

272
00:17:37,650 --> 00:17:41,680
keeping that in mind, right? All those requirements. Thinking about

273
00:17:42,930 --> 00:17:46,746
the big vocabulary word in automation, and that's

274
00:17:46,778 --> 00:17:51,170
item potency. I've also heard it pronounced idempotency.

275
00:17:51,990 --> 00:17:54,962
I'll go with item potency. It just flows off the tongue a little better,

276
00:17:55,016 --> 00:17:59,014
right? Hopefully youre heard this term before when you're thinking about

277
00:17:59,052 --> 00:18:01,954
automation and automation products. But if not, don't worry,

278
00:18:02,002 --> 00:18:05,234
let's do a quick review. Right, so idempotency

279
00:18:05,282 --> 00:18:08,682
has a fancy mathematical definition, right?

280
00:18:08,736 --> 00:18:12,710
So idempotency is the property of certain operations

281
00:18:12,870 --> 00:18:16,170
whereby they can be applied multiple times

282
00:18:16,320 --> 00:18:20,300
without changing the result beyond the initial application.

283
00:18:20,750 --> 00:18:23,642
It sounds confusing and potentially ominous,

284
00:18:23,786 --> 00:18:27,742
but it's super helpful for thinking about what happens when you

285
00:18:27,796 --> 00:18:30,894
run a piece of automation more than once.

286
00:18:31,092 --> 00:18:34,634
How are you going to handle any messages that it might

287
00:18:34,692 --> 00:18:38,270
generate, right? So what happens when your systems,

288
00:18:38,430 --> 00:18:41,300
you want to add a user but that account is already present?

289
00:18:41,830 --> 00:18:45,966
What happens if you want to rotate logs but they're already rotated?

290
00:18:46,078 --> 00:18:49,746
Does your log rotation create empty files like certain versions of

291
00:18:49,768 --> 00:18:52,678
Mandrake Linux did in 2001,

292
00:18:52,764 --> 00:18:56,498
which I still have nightmares about? If you are installing a software package

293
00:18:56,594 --> 00:19:00,246
and it's already installed, what happens? What if you are

294
00:19:00,348 --> 00:19:03,994
concatenating a new configuration line to the bottom of the file? Does it create

295
00:19:04,032 --> 00:19:07,546
a new file? Does it delete it? Does it just keep pushing more and more

296
00:19:07,568 --> 00:19:11,654
and more copies of that line into the file? What happens, right, for tasks

297
00:19:11,702 --> 00:19:15,310
that you want to automate, youre not going to have a human

298
00:19:15,380 --> 00:19:18,458
there. By definition it's automation.

299
00:19:18,554 --> 00:19:21,806
You're not going to have a human there to read the output and say oh,

300
00:19:21,908 --> 00:19:25,438
this has already been done, I don't have to do it again. Right. You'll want

301
00:19:25,444 --> 00:19:29,362
to add some check to your automation to determine if the change

302
00:19:29,416 --> 00:19:32,546
needs to be made in the first place. Right. If the thing you're trying to

303
00:19:32,568 --> 00:19:35,010
accomplish has already been completed,

304
00:19:36,230 --> 00:19:39,254
job done, you don't have to do it, right? So this is where

305
00:19:39,292 --> 00:19:43,218
automation starts to get pretty complex, right? You don't

306
00:19:43,234 --> 00:19:46,834
want your scripts to bomb out, youre don't want them to return an error.

307
00:19:46,882 --> 00:19:50,234
If the work that they want to have done is

308
00:19:50,272 --> 00:19:53,770
already done. You're already in a successful state, so you should report

309
00:19:53,840 --> 00:19:58,506
that, right? So you also want to make sure that the

310
00:19:58,528 --> 00:20:01,834
state that the system is in matches what you want and do

311
00:20:01,872 --> 00:20:05,374
those things. So some system tools will already have some

312
00:20:05,412 --> 00:20:09,134
of this built in so they won't try and redo work that is

313
00:20:09,172 --> 00:20:13,162
already done and they won't also then drop an error. Other tools

314
00:20:13,226 --> 00:20:16,922
you definitely want to verify because they might not redo the work,

315
00:20:17,076 --> 00:20:20,894
but they'll return an error code, which might mean that your automation fails.

316
00:20:20,942 --> 00:20:24,658
And that's not fun either. Right? So if you're building your own tools, you can

317
00:20:24,664 --> 00:20:27,986
keep this in mind, right. You'll want

318
00:20:28,008 --> 00:20:31,366
to build in some of this input and see yourself. I want to create this

319
00:20:31,388 --> 00:20:34,758
file if it's already here, what kind of process am I going to

320
00:20:34,764 --> 00:20:38,502
take? If it's here but the contents are wrong, what's my next process?

321
00:20:38,636 --> 00:20:41,898
Those kinds of things and how you build that stuff in.

322
00:20:42,064 --> 00:20:45,290
So over time, as you're building up your automation library,

323
00:20:46,190 --> 00:20:49,574
you're going to have more skill around checking things on your systems,

324
00:20:49,622 --> 00:20:53,086
depending on what kind of systems youre running on, and get some

325
00:20:53,108 --> 00:20:57,022
best practices around checking the state

326
00:20:57,076 --> 00:21:01,200
of things and how those things are going to work. So another

327
00:21:01,730 --> 00:21:05,134
fun thing to think about when we're automating

328
00:21:05,262 --> 00:21:08,818
is what stuff do we

329
00:21:08,904 --> 00:21:12,322
bother to automate? Right. You could think about,

330
00:21:12,376 --> 00:21:15,442
oh, I want to automate everything. I just want it to run all by itself

331
00:21:15,496 --> 00:21:19,426
without me. But that's not realistic, right. You want to automate

332
00:21:19,458 --> 00:21:22,854
the tasks you do most often or the

333
00:21:22,892 --> 00:21:26,342
ones that take the most time. Right. That's going to save you the most

334
00:21:26,396 --> 00:21:29,706
effort over the longer term as well as reducing your

335
00:21:29,728 --> 00:21:33,734
overall tools. And another XKCD cartoon, because there's

336
00:21:33,782 --> 00:21:37,578
always an XKCD cartoon for these. Right. This is

337
00:21:37,744 --> 00:21:41,862
kind of, again, a little bit irreverent plot

338
00:21:41,926 --> 00:21:45,982
of how long can you work on making a routine task youre

339
00:21:46,036 --> 00:21:49,294
efficient before you're spending more time than you save. And it

340
00:21:49,332 --> 00:21:53,346
plots it across gives years, right. So looking at how much time do you

341
00:21:53,368 --> 00:21:57,086
shave off the task along the y axis

342
00:21:57,198 --> 00:22:00,206
and across the x axis is how often you do the task.

343
00:22:00,238 --> 00:22:02,900
So if you're being something all the time,

344
00:22:04,950 --> 00:22:08,306
automating that even just a little bit is going to save you a

345
00:22:08,328 --> 00:22:11,366
lot of time. But if you only have a task that you only have to

346
00:22:11,388 --> 00:22:15,014
run in February or whatever, maybe automating that

347
00:22:15,052 --> 00:22:18,726
the time to take to automate that isn't worth it if you aren't going

348
00:22:18,748 --> 00:22:22,506
to save that much time. So something to think. But when you are thinking about

349
00:22:22,528 --> 00:22:25,674
your tasks, right, we're going to keep in mind our

350
00:22:25,712 --> 00:22:29,066
task requirements, we're going to think about our item potency, and we're going to think

351
00:22:29,088 --> 00:22:33,086
about the right tasks to automate at the right time. So looking at

352
00:22:33,188 --> 00:22:36,670
maybe some tasks that we could automate,

353
00:22:37,010 --> 00:22:40,302
thinking about these in a slightly different way.

354
00:22:40,356 --> 00:22:43,934
Right. So in this particular graph is looking

355
00:22:43,972 --> 00:22:47,346
at things specific kinds of tasks, rather than sort

356
00:22:47,368 --> 00:22:51,220
of the abstract view of the last one. We're looking at tasks that

357
00:22:51,670 --> 00:22:55,106
we might need for incident response, right? Because I work at Pagerduty and

358
00:22:55,128 --> 00:22:59,730
we do a lot of incident response. And the x axis here is impact,

359
00:22:59,810 --> 00:23:03,702
right? And it tells me if a change needs to be made

360
00:23:03,756 --> 00:23:06,982
and I'm going to automate it, is it a change that makes

361
00:23:07,036 --> 00:23:10,634
maybe no impact on the running systems, or is it something that has a high

362
00:23:10,672 --> 00:23:13,846
impact? And then across the y axis,

363
00:23:13,878 --> 00:23:17,910
we have things that are simple, maybe a single step, and then more sophisticated

364
00:23:17,990 --> 00:23:21,706
things that might be multistep or multi node or complex workflows or

365
00:23:21,728 --> 00:23:25,374
need a little bit of orchestration, right. So if we're struggling with

366
00:23:25,492 --> 00:23:28,906
what things should be automated, you can make a list of tasks

367
00:23:28,938 --> 00:23:32,802
and sort of plot them out for your team so that you can

368
00:23:32,856 --> 00:23:36,738
kind of tackle the things that are no impact and simple, the things on

369
00:23:36,744 --> 00:23:40,690
the bottom left to give yourself some confidence

370
00:23:41,190 --> 00:23:44,660
in building automation. Then the tasks with

371
00:23:45,110 --> 00:23:49,074
higher impact are things like you're restarting

372
00:23:49,122 --> 00:23:52,278
services, maybe it's a single service or a group of service, or you're performing a

373
00:23:52,284 --> 00:23:55,474
failure or whatever. And then highest impact

374
00:23:55,522 --> 00:23:59,046
tasks can change key pieces of your infrastructure,

375
00:23:59,158 --> 00:24:02,934
changing your firewalls, rolling back or redeploying software

376
00:24:02,982 --> 00:24:06,922
and those kinds of things. So thinking about the

377
00:24:06,976 --> 00:24:10,954
kinds of tasks that one you do most often or take the longest

378
00:24:11,002 --> 00:24:14,526
time and you can save the most time off of,

379
00:24:14,628 --> 00:24:18,974
plus the tasks that are where

380
00:24:19,012 --> 00:24:23,418
your level of comfort is in the kind of complexity and impact

381
00:24:23,514 --> 00:24:27,106
the tasks themselves will have for you. So how comfortable your

382
00:24:27,128 --> 00:24:31,630
team is with any of these things being automation definitely varies,

383
00:24:31,710 --> 00:24:35,154
right? There's definitely places, different teams that are like,

384
00:24:35,352 --> 00:24:38,550
we don't want to automate anything. We're super afraid we're not

385
00:24:38,700 --> 00:24:42,038
skilled in this. We're thinking like, it's going

386
00:24:42,044 --> 00:24:45,394
to go crazy, like the brooms in fantasia

387
00:24:45,442 --> 00:24:48,726
or whatever, right? So you might have a lot of

388
00:24:48,748 --> 00:24:52,554
things that actually sre pretty complicated, right? You might

389
00:24:52,592 --> 00:24:56,486
have a service that compiles all of its libraries into memory,

390
00:24:56,518 --> 00:24:59,434
and you can't really do a cold start, restart fast.

391
00:24:59,552 --> 00:25:02,986
So might be something that goes to the bottom of the list. And we'll

392
00:25:03,018 --> 00:25:06,334
think about automating that after we gain a bit of confidence in

393
00:25:06,372 --> 00:25:10,206
youre overall automation skills and

394
00:25:10,388 --> 00:25:14,082
then looking at building up our

395
00:25:14,136 --> 00:25:17,346
library. The way youre humans interact with all

396
00:25:17,368 --> 00:25:20,942
this automation is a bit of maturity

397
00:25:21,006 --> 00:25:24,578
scale as well, right? How we look

398
00:25:24,664 --> 00:25:27,830
at automation evolves over time.

399
00:25:27,900 --> 00:25:31,426
Right. As our team gets more comfortable with specific types

400
00:25:31,458 --> 00:25:35,602
of automation and you get better at creating it, the human interaction

401
00:25:35,666 --> 00:25:39,366
really should decrease, right? And the automation runs more on its own.

402
00:25:39,468 --> 00:25:42,842
Youre building confidence. You're building trust in the processes that you have.

403
00:25:42,976 --> 00:25:46,278
So you start out with what we call automation opportunities.

404
00:25:46,374 --> 00:25:49,578
Really a fancy way of saying things haven't been automated yet.

405
00:25:49,664 --> 00:25:53,386
Everything's really still manual, right? What tasks exist

406
00:25:53,418 --> 00:25:57,150
in your environment that could be automated but haven't?

407
00:25:57,570 --> 00:26:00,926
Make your plot and figure out your good targets for that.

408
00:26:01,028 --> 00:26:04,922
Then we look at human initiated automation. These are our common

409
00:26:04,996 --> 00:26:09,026
scripts and other tools that our team members can run on demand when

410
00:26:09,048 --> 00:26:12,414
they want something done or need to complete a task in can unscheduled manner.

411
00:26:12,462 --> 00:26:15,938
Right? Your basic scripts and pieces

412
00:26:16,034 --> 00:26:19,110
in your library directory. Super helpful, right?

413
00:26:19,260 --> 00:26:22,726
Automation with oversight is automation that

414
00:26:22,748 --> 00:26:26,066
starts running on its own in response to some environmental

415
00:26:26,098 --> 00:26:29,386
trigger. This might be simple things like your cron jobs or

416
00:26:29,408 --> 00:26:32,986
youre rotate your logs, or more interesting things like

417
00:26:33,088 --> 00:26:36,054
restarting a service when it stops responding to queries.

418
00:26:36,182 --> 00:26:40,054
Depending on your environment, you might have auto scaling

419
00:26:40,102 --> 00:26:43,646
in this sort of thing that you don't quite trust it yet, so you

420
00:26:43,668 --> 00:26:47,466
do keep an eye on it, but it kicks itself off automatically.

421
00:26:47,578 --> 00:26:50,702
It might still require some humans making SRE it runs okay.

422
00:26:50,756 --> 00:26:54,174
You might have a little alert that pops up and says hey, script a

423
00:26:54,212 --> 00:26:57,634
is running, please check me out or whatever. So while it might start

424
00:26:57,672 --> 00:27:01,086
on its own, it might also let folks know that it's

425
00:27:01,118 --> 00:27:04,226
doing a thing. And if folks aren't comfortable with it yet, they can check it

426
00:27:04,248 --> 00:27:08,818
out. But eventually you get to automation with fallback and the automation runs

427
00:27:08,914 --> 00:27:12,486
and only requires humans to look at it

428
00:27:12,508 --> 00:27:16,658
if something goes wrong, if it finds an error or an unexplored

429
00:27:16,674 --> 00:27:20,434
edge case, that it has its own escalation

430
00:27:20,482 --> 00:27:23,834
functionality to let humans know that it wasn't able to finish its

431
00:27:23,872 --> 00:27:27,114
task or fix what it was supposed to do. But if all goes well,

432
00:27:27,232 --> 00:27:31,006
the automation doesn't necessarily need to report, right? You'll see

433
00:27:31,028 --> 00:27:34,414
a significant reduction in overall toil at

434
00:27:34,452 --> 00:27:37,694
this point, right? So when you have built up

435
00:27:37,732 --> 00:27:41,118
all of this trust in your library of

436
00:27:41,204 --> 00:27:44,890
automation and components and scripts like that, and eventually

437
00:27:45,050 --> 00:27:48,786
you might get to the monitor and evaluate phase and

438
00:27:48,808 --> 00:27:51,874
you might get to this phase with certain tasks and not others, right?

439
00:27:51,992 --> 00:27:55,346
When things get done, edge cases

440
00:27:55,378 --> 00:27:59,734
are managed and instead of tasks creating tickets.org

441
00:27:59,772 --> 00:28:03,446
alerts, they might just create metrics rather

442
00:28:03,548 --> 00:28:07,654
than a report saying hey Brian in April cleared n

443
00:28:07,692 --> 00:28:11,530
requests for x task. This week youre might have a metric instead

444
00:28:11,600 --> 00:28:15,226
that says x task was completed n times this week by

445
00:28:15,248 --> 00:28:18,906
the automation, and then you're still sort of managing it as part of

446
00:28:18,928 --> 00:28:22,906
your environment, but your automation is taking care of all the work and you

447
00:28:22,928 --> 00:28:26,398
don't have to do that, right? So not all of your automation tasks, not all

448
00:28:26,404 --> 00:28:29,278
of your systems will get to this point. They won't all go through all the

449
00:28:29,284 --> 00:28:33,086
phases. You might already have some stuff that you totally trust, right? But some

450
00:28:33,108 --> 00:28:36,530
youre complex time tasks might only ever get to

451
00:28:36,680 --> 00:28:40,494
automation with fallback due to the nature of your complex systems. That's totally

452
00:28:40,542 --> 00:28:44,322
fine. And the important part is to be thinking

453
00:28:44,376 --> 00:28:47,766
about where you're headed, the things that you need to do and the things you

454
00:28:47,788 --> 00:28:51,046
need to accomplish with your automation so that

455
00:28:51,228 --> 00:28:55,142
youre sort of constantly evolving and improving and making

456
00:28:55,196 --> 00:28:58,262
sure that the automation that you're producing is

457
00:28:58,316 --> 00:29:01,766
actually helping your teams get better and reduce

458
00:29:01,798 --> 00:29:05,466
their overall tools. So let's talk about just to sort

459
00:29:05,488 --> 00:29:09,334
of wrap up a tool called rundeck. And I won't

460
00:29:09,382 --> 00:29:12,826
do a full demo, but we'd love to show you all the wonderful

461
00:29:12,858 --> 00:29:17,374
things that Rundeck does if you'd like to see them. But Rundeck is

462
00:29:17,412 --> 00:29:20,842
an automation tool. It's an automation platform, right. It's a software

463
00:29:20,906 --> 00:29:24,130
solution really specifically built for

464
00:29:24,200 --> 00:29:27,310
the kind of automation that production teams,

465
00:29:27,390 --> 00:29:31,362
teams that are working on services that are

466
00:29:31,496 --> 00:29:34,978
customer facing, user facing, and the tasks that need to

467
00:29:34,984 --> 00:29:38,418
get done there. Right. Rundeck, you can combine

468
00:29:38,434 --> 00:29:41,974
it with pagerduty, right, for auto remediation of issues before

469
00:29:42,012 --> 00:29:45,494
they become incidents and accessible tooling for responders during

470
00:29:45,532 --> 00:29:49,154
incidents. And we love that because we're driving down our meantime

471
00:29:49,202 --> 00:29:52,746
to resolve and those kinds of things that the

472
00:29:52,768 --> 00:29:56,646
ability to automate some of those tasks, whether it's something simple like just gathering

473
00:29:56,678 --> 00:29:59,130
up the logs or doing a restart,

474
00:30:00,930 --> 00:30:05,402
can create a lot of improvements when we're dealing with incident response.

475
00:30:05,546 --> 00:30:09,114
But Rundeck itself really provides more of a generalized

476
00:30:09,162 --> 00:30:12,362
platform for your team to securely

477
00:30:12,426 --> 00:30:16,274
perform kinds of tasks in production and then

478
00:30:16,472 --> 00:30:20,706
delegate things to other teams. So what you really have is a

479
00:30:20,728 --> 00:30:24,242
way to encapsulate expertise. You have the folks that are

480
00:30:24,296 --> 00:30:27,746
the subject matter experts and they can write little bits

481
00:30:27,778 --> 00:30:31,046
of automation and different steps. And the

482
00:30:31,068 --> 00:30:34,502
best practice for restarting this thing, or here's how we

483
00:30:34,556 --> 00:30:37,494
do our patches and updates on this platform,

484
00:30:37,612 --> 00:30:41,354
and here's how you rotate the logs for this particular

485
00:30:41,472 --> 00:30:45,226
runtime or whatever it is, and you

486
00:30:45,248 --> 00:30:49,062
take that piece of knowledge and you stick it into your Rundeck server,

487
00:30:49,126 --> 00:30:52,606
and then you make it available to anyone who might need it, and you

488
00:30:52,628 --> 00:30:56,234
can hook it into your authorization authentication

489
00:30:56,282 --> 00:31:00,862
servers and off it goes, right. So they

490
00:31:00,916 --> 00:31:04,580
can build up these complex workflows and

491
00:31:05,270 --> 00:31:09,026
allow anybody else to manage things. So if you're coming at it from the

492
00:31:09,048 --> 00:31:13,138
perspective of say, an SRE team, you create all the

493
00:31:13,304 --> 00:31:16,914
tasks and tools and little bits of things that people

494
00:31:16,952 --> 00:31:19,942
ask you to do all the time. And there's tickets coming in and they're like,

495
00:31:19,996 --> 00:31:22,946
can you rebuild this dev environment for me? And blah, blah,

496
00:31:22,978 --> 00:31:26,614
blah. And what you can do then is take

497
00:31:26,652 --> 00:31:29,862
all this stuff that you've learned and put it into Rundeck and say, hey,

498
00:31:29,916 --> 00:31:33,474
yeah, here Brian, go run this task.

499
00:31:33,522 --> 00:31:36,778
You now have permissions to run this task in the dev environment and that's going

500
00:31:36,784 --> 00:31:39,338
to redeploy the thing that you needed and you don't have to ask us for

501
00:31:39,344 --> 00:31:42,960
it anymore. So your automation is

502
00:31:43,730 --> 00:31:47,358
less and running on its own all the time. It's going to

503
00:31:47,364 --> 00:31:53,178
be human initiated automation,

504
00:31:53,274 --> 00:31:56,446
but the humans that are initiating it, SRE folks

505
00:31:56,478 --> 00:32:00,014
that don't necessarily need to have all that same expertise that say your SRE

506
00:32:00,062 --> 00:32:03,442
team does. So it can help you deal with that kind of

507
00:32:03,576 --> 00:32:07,574
everyday tools and requests and things like that

508
00:32:07,692 --> 00:32:10,790
that come in. And the way that ends up working is

509
00:32:10,940 --> 00:32:14,854
you have your users who maybe need a thing done right now

510
00:32:14,972 --> 00:32:18,934
because they're blocked on something and they can just go

511
00:32:18,972 --> 00:32:22,426
to the Rundeck server, request the task and off it

512
00:32:22,448 --> 00:32:26,218
goes. Because someone has already prepared the automation, tested it,

513
00:32:26,304 --> 00:32:29,754
and then provided it for them in a secure way. They don't ever

514
00:32:29,792 --> 00:32:33,286
have to touch any of the nodes

515
00:32:33,318 --> 00:32:36,366
that might be out there living in the real world that you don't want them

516
00:32:36,388 --> 00:32:40,094
to touch. You have to stay away from them. And then one of the good

517
00:32:40,132 --> 00:32:44,114
things about these kinds of platforms is that you get

518
00:32:44,232 --> 00:32:47,406
reports back, right. One of the hard things about writing

519
00:32:47,438 --> 00:32:51,550
your own automation and putting those platforms back is like producing

520
00:32:51,630 --> 00:32:55,202
the kinds of detailed information for

521
00:32:55,336 --> 00:32:58,738
sort of the unskilled users, or not necessarily unskilled,

522
00:32:58,754 --> 00:33:01,942
but not necessarily knowledgeable in the tasks that you know about,

523
00:33:01,996 --> 00:33:05,366
right. They have other main primary tasks that they do,

524
00:33:05,468 --> 00:33:09,974
and you're giving them a bit of abstraction for things

525
00:33:10,012 --> 00:33:12,938
that they know what they cant the outcome to be, but they don't know all

526
00:33:12,944 --> 00:33:16,138
the details, but some nice green text on a

527
00:33:16,144 --> 00:33:19,994
screen, they can tell, hey, the thing did okay, and if they hit some

528
00:33:20,032 --> 00:33:23,358
red text and it didn't go okay, then they can reach out to youre.

529
00:33:23,444 --> 00:33:27,182
But you're really giving them a way

530
00:33:27,236 --> 00:33:31,006
to act like you do when you interact with

531
00:33:31,028 --> 00:33:34,514
the system. They're doing the same things that you would do without having

532
00:33:34,552 --> 00:33:38,286
to distract you from the work that you're doing on a regular basis.

533
00:33:38,398 --> 00:33:41,662
And then one of the other really key pieces

534
00:33:41,726 --> 00:33:45,262
for automation is a lot of organizations

535
00:33:45,326 --> 00:33:48,674
are when they have hesitancy around automating tasks,

536
00:33:48,722 --> 00:33:52,278
it's because they're like, you have to tell us exactly who did what,

537
00:33:52,364 --> 00:33:56,066
when they did it and what happened. And when you're

538
00:33:56,098 --> 00:33:59,530
building your own automation, you can cobble together

539
00:33:59,600 --> 00:34:03,340
some things and maybe have some log files and youre

540
00:34:03,790 --> 00:34:07,098
send status over to other components and

541
00:34:07,104 --> 00:34:10,574
things like that. But providing it again to the folks that

542
00:34:10,612 --> 00:34:14,766
might be youre auditors or doing compliance reports or

543
00:34:14,868 --> 00:34:18,382
those kinds of abstractions that really

544
00:34:18,436 --> 00:34:22,080
aren't necessarily down to

545
00:34:22,450 --> 00:34:25,954
digging your cron tabs or whatever, but want to see what kinds of things

546
00:34:25,992 --> 00:34:29,666
were run, then you can provide them with an audit log.

547
00:34:29,768 --> 00:34:33,474
And looking at automation platforms and automation tools that

548
00:34:33,512 --> 00:34:36,742
provide you with that is another good way to help your team

549
00:34:36,796 --> 00:34:40,486
build confidence around the automation that you're providing, the things that

550
00:34:40,508 --> 00:34:44,326
you're writing, and over time, trusting all

551
00:34:44,348 --> 00:34:47,494
of that stuff in a much more sophisticated way so

552
00:34:47,532 --> 00:34:50,906
that they're more likely to cant to automate more stuff in the

553
00:34:50,928 --> 00:34:53,990
future. So the next set of tools,

554
00:34:54,070 --> 00:34:57,750
tasks that you have, they're more comfortable

555
00:34:57,830 --> 00:35:01,066
with producing automation for them. So there's lots of things to sort of

556
00:35:01,088 --> 00:35:04,862
keep in mind as youre building your own automation, as you're looking

557
00:35:04,916 --> 00:35:09,130
at tools to help you with your automation, thinking about your item potency,

558
00:35:09,210 --> 00:35:12,586
thinking about your flexibility and testability and all those

559
00:35:12,628 --> 00:35:16,162
great things, and then finally thinking about how

560
00:35:16,216 --> 00:35:19,506
your automation impacts how

561
00:35:19,528 --> 00:35:23,106
your team interacts with other teams, how your automation is

562
00:35:23,128 --> 00:35:27,154
going to impact the perception of youre team, maybe from

563
00:35:27,192 --> 00:35:30,594
other places like, oh, those folks will produce

564
00:35:30,642 --> 00:35:34,162
lots of tasks for us and give us automation

565
00:35:34,226 --> 00:35:36,774
so that we can do it ourselves and we don't have to wait for them,

566
00:35:36,812 --> 00:35:40,950
right? So you're seen as the folks are super responsive because you're

567
00:35:41,030 --> 00:35:44,070
asking people to do the work themselves via the automation.

568
00:35:44,150 --> 00:35:47,914
So lots of things to think about. If your team isn't super familiar with

569
00:35:47,952 --> 00:35:51,174
automation, hasn't really gone on that jaunt

570
00:35:51,222 --> 00:35:54,606
yet. Some things for them to maybe take a look at and think

571
00:35:54,628 --> 00:35:58,574
about. We have some resources. There's lots of stuff

572
00:35:58,692 --> 00:36:02,318
on the Rundeck website about the approaches to

573
00:36:02,324 --> 00:36:04,500
automation and things like that. We have an entire,

574
00:36:05,350 --> 00:36:09,022
we call them ops guides. It's kind of a white paper. It's at autoremediation

575
00:36:09,086 --> 00:36:12,578
pagerduty.com for sort

576
00:36:12,584 --> 00:36:16,434
of a written format of the things discussed in this talk and to

577
00:36:16,472 --> 00:36:20,210
give youre some ideas on how to plot your journey

578
00:36:20,290 --> 00:36:24,182
into automation. If you've just been kind of doing it catch as catch can

579
00:36:24,316 --> 00:36:28,118
and thinking about it as more of a direct

580
00:36:28,204 --> 00:36:32,486
part of the job that you want to do as an

581
00:36:32,508 --> 00:36:36,258
SRE or as platform engineering or whatever kinds

582
00:36:36,274 --> 00:36:39,990
of tasks that you might be doing. So hopefully this was helpful.

583
00:36:40,610 --> 00:36:44,682
We're happy to answer any questions will be on the discord.

584
00:36:44,826 --> 00:36:47,854
And like I said earlier, if you'd like to reach out to me at any

585
00:36:47,892 --> 00:36:51,406
time, I'm at lNxchk. I hope you enjoy the rest

586
00:36:51,428 --> 00:36:53,210
of the conference and thanks for listening.

