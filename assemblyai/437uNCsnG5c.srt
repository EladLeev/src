1
00:00:00,410 --> 00:00:06,174
Jamaica real

2
00:00:06,212 --> 00:00:10,618
time feedback into the behavior of your distributed systems and observing

3
00:00:10,714 --> 00:00:14,538
changes exceptions errors in real time allows

4
00:00:14,554 --> 00:00:17,914
you to not only experiment with confidence, but respond

5
00:00:18,042 --> 00:00:20,480
instantly to get things working again.

6
00:00:24,610 --> 00:00:47,402
Code hello

7
00:00:47,456 --> 00:00:50,634
everyone, and thanks for joining my talk here at conf fourty two.

8
00:00:50,752 --> 00:00:53,934
In this talk I'll be explaining how you can create a web

9
00:00:53,972 --> 00:00:58,026
application of the future using typescript and graphQl. So let's

10
00:00:58,058 --> 00:01:02,222
dive into the presentation. So, web application of the future using

11
00:01:02,276 --> 00:01:05,854
GraphQL and typescript. So when you're watching this talk, I hope you

12
00:01:05,892 --> 00:01:09,026
already have been using any of these languages. And if not,

13
00:01:09,048 --> 00:01:13,170
it's perfectly fine, because I will be explaining what both languages are

14
00:01:13,240 --> 00:01:16,678
and how you can use them inside your project to create a web application

15
00:01:16,764 --> 00:01:20,310
of the future. So who is the talk actually

16
00:01:20,380 --> 00:01:23,862
for? Of course it's for all of you. But I made some special use

17
00:01:23,916 --> 00:01:27,814
cases. So when I like

18
00:01:27,852 --> 00:01:31,466
to open this talk, I always like to see what people think could

19
00:01:31,488 --> 00:01:34,666
be a date. So December 7 is coming up,

20
00:01:34,768 --> 00:01:38,506
December 7 is an example of a date, and this would be

21
00:01:38,528 --> 00:01:42,502
the calendar date of course. But then you also have this dried fruit,

22
00:01:42,566 --> 00:01:45,646
which they also call a date. So a date is not

23
00:01:45,668 --> 00:01:49,598
only a calendar day, it's also a dried fruit. But then

24
00:01:49,604 --> 00:01:53,594
you can do more stuff like writing the word date using this dried fruit.

25
00:01:53,642 --> 00:01:56,740
So that's a third example of what could be a date.

26
00:01:57,430 --> 00:02:00,946
And of course then you have this scenic scene from

27
00:02:00,968 --> 00:02:05,054
the Disney movies, which is also a date of course, like a metaphorical

28
00:02:05,102 --> 00:02:08,786
date. So these are already four examples of what

29
00:02:08,808 --> 00:02:11,942
a date could be. And if you would go to JavaScript, you can find even

30
00:02:11,996 --> 00:02:15,542
more examples of what a date could be. So a date could be a date

31
00:02:15,596 --> 00:02:19,562
object definition a date could be a string that

32
00:02:19,616 --> 00:02:23,526
defines a calendar. Date could also be a timestamp. So this timestamp

33
00:02:23,558 --> 00:02:26,618
would be December 7, and date can

34
00:02:26,624 --> 00:02:28,700
be much more. Date could also be an object.

35
00:02:30,510 --> 00:02:33,870
And this is why you of course need to use a type system,

36
00:02:34,020 --> 00:02:38,138
and especially when using JavaScript. So JavaScript is a very versatile language,

37
00:02:38,234 --> 00:02:41,742
but means it's also error prone. So if you ever saw something

38
00:02:41,796 --> 00:02:45,694
happening in your console, in your developer tools, any error because something

39
00:02:45,732 --> 00:02:49,294
was undefined or string could be fined or maybe function doesn't

40
00:02:49,342 --> 00:02:52,930
exist. This is all because typescript doesn't have a type system.

41
00:02:53,080 --> 00:02:56,410
If you would have a type system, you would be able to catch these errors

42
00:02:56,430 --> 00:03:00,294
whenever you're building your code, instead of when someone is using your code

43
00:03:00,492 --> 00:03:04,358
in example to open your application. So a

44
00:03:04,364 --> 00:03:07,974
little bit about myself. So my name is Roy, I'm from

45
00:03:08,012 --> 00:03:11,926
Amsterdam and you can find me on Twitter using the handle edcad. And I

46
00:03:11,948 --> 00:03:15,114
work for a company called Stepzen, and at Stepzen we make it easy to build

47
00:03:15,152 --> 00:03:18,634
graphql APIs. So maybe later on in the talk, if there still is

48
00:03:18,672 --> 00:03:22,234
time, I will show a short demo with

49
00:03:22,272 --> 00:03:26,154
using a GraphQL API and then transforming the GraphQL

50
00:03:26,202 --> 00:03:29,440
API into typescript types that you can then use in your application.

51
00:03:29,970 --> 00:03:33,226
Besides this, I also work with my own company hack team to arrange.

52
00:03:33,258 --> 00:03:36,542
I do trainings and workshops and cool stuff like GraphQl typescript

53
00:03:36,606 --> 00:03:40,034
react, and also I write books about all these different

54
00:03:40,232 --> 00:03:43,620
programming libraries which you can find online.

55
00:03:45,990 --> 00:03:48,910
So first, what you already know about typescript.

56
00:03:48,990 --> 00:03:52,594
In the beginning I said, it's perfectly fine if you don't know typescript or graphql,

57
00:03:52,642 --> 00:03:55,926
or maybe both. So let's give me a short introduction about

58
00:03:55,948 --> 00:03:59,560
typescript and what it is and how to use it inside your application.

59
00:04:00,410 --> 00:04:04,342
So typescript is what we call a type superset of JavaScript.

60
00:04:04,486 --> 00:04:08,234
And the first time I heard about a type superset I also needed to Google

61
00:04:08,272 --> 00:04:11,466
this because I had literally no clue what they meant. So I asked

62
00:04:11,488 --> 00:04:15,374
the Internet and a superset is a programming language that

63
00:04:15,412 --> 00:04:19,262
contains all the features of a given language, meaning that

64
00:04:19,316 --> 00:04:23,630
if you have typescript, it contains everything that JavaScript also contains,

65
00:04:24,130 --> 00:04:27,562
but it has been expanded or enhanced to include additional

66
00:04:27,626 --> 00:04:30,814
features. And in the case of typescript, it includes static

67
00:04:30,862 --> 00:04:34,354
type checking, meaning that you also have a type system next

68
00:04:34,392 --> 00:04:37,846
to using all the features that JavaScript already has and that you

69
00:04:37,868 --> 00:04:41,062
already have been using for years and years, or maybe just months,

70
00:04:41,116 --> 00:04:44,438
because maybe you're a new programmer, could be both. So it

71
00:04:44,444 --> 00:04:47,702
type superset, and also

72
00:04:47,756 --> 00:04:51,494
it's important to know that typescript compiles to plain javascript,

73
00:04:51,622 --> 00:04:54,934
because maybe, you know, maybe you don't. Your browser cannot

74
00:04:54,982 --> 00:04:59,114
read javascript, cannot read typescript. Your browser needs to

75
00:04:59,152 --> 00:05:02,026
read javascript, otherwise it cannot render your website.

76
00:05:02,208 --> 00:05:05,646
So typescript compiles to plain JavaScript. So if

77
00:05:05,668 --> 00:05:09,006
you would have this code block which we see on the left, you can see

78
00:05:09,028 --> 00:05:13,078
we have a typescript fruit with two fields, name and variety,

79
00:05:13,274 --> 00:05:16,974
and then we have a function, and this function will loop

80
00:05:17,022 --> 00:05:20,686
over an existing array of type fruit

81
00:05:20,798 --> 00:05:24,974
and then creates a new array that only has the

82
00:05:25,032 --> 00:05:26,600
name of the fruit in there.

83
00:05:31,690 --> 00:05:35,222
So this is how we do it in typescript. But your browser cannot read

84
00:05:35,356 --> 00:05:38,934
or actually not parse this code. So what you do, you need to compile it

85
00:05:38,972 --> 00:05:42,346
to JavaScript in order to make it readable for the browser and

86
00:05:42,368 --> 00:05:45,850
the typescript compiler does this for you if you're using react, view,

87
00:05:45,920 --> 00:05:49,306
angular or whatever. They also compile this to JavaScript for you so

88
00:05:49,328 --> 00:05:52,506
it's readable in the browser. And if you're not

89
00:05:52,528 --> 00:05:55,206
familiar with typescript, if you go on the left side you can see the type

90
00:05:55,248 --> 00:05:58,746
fruits. It is a type definition, you can see the fields. So we're defining

91
00:05:58,778 --> 00:06:02,206
something as a string, and then if you go to the function, you can

92
00:06:02,228 --> 00:06:05,518
see we also assign a type to the input of

93
00:06:05,524 --> 00:06:08,930
the function. So this way typescript will know what comes in the function

94
00:06:09,000 --> 00:06:12,722
and it can also determine the output. So typescript in example will already

95
00:06:12,776 --> 00:06:16,118
know that item name is a string, so it will know the return

96
00:06:16,204 --> 00:06:19,590
of this function will be an array of strings.

97
00:06:21,370 --> 00:06:24,466
And also it uses the latest ECMAScript features.

98
00:06:24,578 --> 00:06:27,866
So we know typescript is a type superset, meaning it has all the

99
00:06:27,888 --> 00:06:31,274
features that JavaScript has, and meaning it also

100
00:06:31,312 --> 00:06:35,450
uses the latest ECMAScript features that you can find on ECMAScript.

101
00:06:36,910 --> 00:06:40,694
And if you look at the typescript library

102
00:06:40,742 --> 00:06:44,602
on NPM, you can see it's very active, it has tons of weekly downloads,

103
00:06:44,666 --> 00:06:48,000
and the versions are updating almost every week.

104
00:06:49,410 --> 00:06:52,830
And now we know typescript has types. Maybe you can guess

105
00:06:52,900 --> 00:06:56,434
what else has types. Of course you know this talks about

106
00:06:56,472 --> 00:07:00,386
typescript and GraphQL, so you could have guessed that typescript and

107
00:07:00,408 --> 00:07:03,666
GraphQl both have types, and these type systems can play

108
00:07:03,688 --> 00:07:07,346
along nicely, as I will show you later. But first I'd like to know what

109
00:07:07,368 --> 00:07:10,754
you already know about Graphql, because maybe you're already familiar

110
00:07:10,802 --> 00:07:14,594
with typescript, but you haven't used graphql before. Or maybe you're using GraphQl

111
00:07:14,642 --> 00:07:17,814
but haven't heard of typescript or the other way around. Of course,

112
00:07:17,932 --> 00:07:21,174
although both technologies have been around for almost ten years.

113
00:07:21,212 --> 00:07:24,314
So I'm pretty sure that most of you have heard about it, but maybe you

114
00:07:24,352 --> 00:07:27,974
didn't have the pleasure of using any of these inside your projects.

115
00:07:28,102 --> 00:07:31,638
So what you already know about GraphQL. So GraphQl

116
00:07:31,654 --> 00:07:35,518
is what they call a query language for APIs. So GraphQL is

117
00:07:35,524 --> 00:07:39,086
not a framework, it's not specifically tied to JavaScript, it can

118
00:07:39,108 --> 00:07:43,466
be used with any programming language, and it's most of all a query language.

119
00:07:43,658 --> 00:07:47,214
And how you implement that query language is up to the implementation

120
00:07:47,262 --> 00:07:50,382
that you use. So you can use node js for it. You can use typescript,

121
00:07:50,446 --> 00:07:53,934
you can use Python, PhP, go scala,

122
00:07:53,982 --> 00:07:57,314
Java, whatever you like. And this query language will look something

123
00:07:57,352 --> 00:08:00,326
like the following. So if you look on the left side you can see a

124
00:08:00,348 --> 00:08:05,110
query called GitHub queries. And this is a query I'm running inside

125
00:08:05,180 --> 00:08:09,014
my code inside a graphical playground. And GraphQl playground

126
00:08:09,062 --> 00:08:11,450
is a way to work with GraphQL APIs.

127
00:08:15,470 --> 00:08:19,382
In this playground you can see I'm running a query. So there are multiple operation

128
00:08:19,446 --> 00:08:23,294
types. In GraphQl you have query mutation and subscription. So there are

129
00:08:23,332 --> 00:08:27,150
three. And this scenario is a query. And a query is

130
00:08:27,300 --> 00:08:30,942
mostly relatable to a get request for rest

131
00:08:30,996 --> 00:08:34,846
APIs. You can say my query is called GitHub queries and my

132
00:08:34,868 --> 00:08:38,194
query name is GitHub underscore user. And in here you can see

133
00:08:38,232 --> 00:08:41,330
I'm getting GitHub information for a specific user.

134
00:08:41,830 --> 00:08:44,702
And on the right side you can see the return of the request.

135
00:08:44,766 --> 00:08:48,242
So this includes all the fields that are requested such as bio,

136
00:08:48,306 --> 00:08:51,030
followers, id and login.

137
00:08:52,010 --> 00:08:55,334
So how graphql works, you get only the data you ask for and only

138
00:08:55,372 --> 00:08:58,726
this data. So you already know that it might look a bit

139
00:08:58,748 --> 00:09:02,726
like this song from the Spice Girls. Tell graphql what you want tell Graphql

140
00:09:02,758 --> 00:09:06,106
what you really really want and you will get exactly what you ask for

141
00:09:06,208 --> 00:09:09,034
because that's the way the query language from GraphQl works.

142
00:09:09,232 --> 00:09:12,486
And of course there's much more in the query language for GraphQl

143
00:09:12,518 --> 00:09:15,998
that you could learn. So I would really advise you to go on Google if

144
00:09:16,004 --> 00:09:19,802
you're not familiar with GraphQl yet. Search for my name search for GraphQL

145
00:09:19,866 --> 00:09:21,440
and you will find more videos.

146
00:09:23,490 --> 00:09:27,374
And another characteristic of GraphQL is it offers a single endpoint for multiple

147
00:09:27,422 --> 00:09:31,026
resources, so you only have to query one endpoint and nothing more.

148
00:09:31,128 --> 00:09:34,510
And this endpoint can return multiple entries. So multiple resources.

149
00:09:34,590 --> 00:09:38,502
So maybe you get information for multiple data sources at once using

150
00:09:38,556 --> 00:09:42,742
one single endpoint. Whereas with rest you probably have different rest

151
00:09:42,796 --> 00:09:46,486
API endpoints for different tables in your database. So maybe you have

152
00:09:46,508 --> 00:09:50,234
product information and then you have reviews for the product. Typically you

153
00:09:50,272 --> 00:09:54,038
store this in a separate database table, meaning that in rest APIs

154
00:09:54,134 --> 00:09:56,970
it will also have a separate rest API endpoint.

155
00:09:57,790 --> 00:10:01,094
In graphql everything comes in one single endpoint.

156
00:10:01,222 --> 00:10:04,654
So what you see over here is I took the twitter rest API because

157
00:10:04,692 --> 00:10:08,618
Twitter doesn't have a graphql API, it only has rest. And I graphql

158
00:10:08,634 --> 00:10:12,446
this using stepsamp. So with stepzen can example you could import the

159
00:10:12,468 --> 00:10:15,934
twitter rest API endpoints and then turn it into GraphQl.

160
00:10:16,062 --> 00:10:19,474
That way you can just create a GraphQl API without having to

161
00:10:19,512 --> 00:10:23,534
need any prior knowledge about building GraphQl APIs and still get the pleasure

162
00:10:23,582 --> 00:10:27,346
of using GraphQl in a query language format, as you'll see here.

163
00:10:27,528 --> 00:10:31,462
So what I've done, I've graphql, the twitter search API. And with the twitter search

164
00:10:31,516 --> 00:10:34,850
API you can search for tweets that contain a keyword.

165
00:10:35,010 --> 00:10:38,418
So I searched for tweets that contain the keyword Einstein.

166
00:10:38,594 --> 00:10:41,446
And as you can see on the text on the right side, it actually contains

167
00:10:41,478 --> 00:10:44,758
the word Einstein. But what it doesn't do. So the twitter

168
00:10:44,774 --> 00:10:48,678
rest API, it doesn't return the name of the author.

169
00:10:48,854 --> 00:10:52,106
So the person that tweeted it, or maybe the bot, you never know.

170
00:10:52,208 --> 00:10:55,950
So usually it's a person tweeting, luckily. So it doesn't show

171
00:10:56,020 --> 00:10:59,486
the name of the tweet author. So what

172
00:10:59,508 --> 00:11:02,046
I would needed to do is I need to send a second request to the

173
00:11:02,068 --> 00:11:05,070
Twitter rest API to get the name of this author.

174
00:11:05,830 --> 00:11:09,394
But as I have GraphQl, this API, I can get everything on one

175
00:11:09,432 --> 00:11:12,574
single request. So this nested relationship with author

176
00:11:12,702 --> 00:11:16,258
can be loaded all in as one single request, instead of having to do

177
00:11:16,344 --> 00:11:18,950
two different requests to the tritarest API.

178
00:11:20,970 --> 00:11:24,226
And most of all, to get back to the original topic

179
00:11:24,258 --> 00:11:27,846
of this talk, it's based on the type system. So just as

180
00:11:27,868 --> 00:11:30,760
typescript, GraphQL is also using a type system,

181
00:11:31,950 --> 00:11:35,094
it looks a bit like this. So if you would go to a graphql

182
00:11:35,142 --> 00:11:38,746
playground, and this is a way to work with Graphql APIs and

183
00:11:38,768 --> 00:11:42,338
you saw it before, and here I'm doing this search again. So a Twitter

184
00:11:42,374 --> 00:11:45,838
search, I define a query and then on the right side you

185
00:11:45,844 --> 00:11:49,946
can see a documentation part. So this is actually the self documenting

186
00:11:50,138 --> 00:11:53,978
feature that GraphQL has. So GraphQl has a GraphQl schema

187
00:11:53,994 --> 00:11:57,086
as its top, and this defines all the type definitions,

188
00:11:57,118 --> 00:12:00,690
all the queries, and then it's being used by playgrounds like this

189
00:12:00,840 --> 00:12:03,810
to give you a way to introspect the GraphQL API.

190
00:12:06,230 --> 00:12:09,454
So let's compare these two type systems. So we know typescript

191
00:12:09,502 --> 00:12:13,926
as a type system and also graphql as a type system, and they

192
00:12:13,948 --> 00:12:17,046
aren't that different. If you look on

193
00:12:17,068 --> 00:12:20,234
the left side you can see typescript, and on the right side

194
00:12:20,272 --> 00:12:25,146
you can see Javascript, you can see GraphQl as

195
00:12:25,168 --> 00:12:29,466
you can see the way to define them. So both are called type product.

196
00:12:29,648 --> 00:12:33,242
You can see they have ids, title, thumbnail, price categories,

197
00:12:33,306 --> 00:12:36,080
reviews, and the same for the GraphQL type.

198
00:12:37,010 --> 00:12:40,682
And both have basic types or scholar types. So in typescript

199
00:12:40,746 --> 00:12:44,446
we call these basic types, everyday types. So these are the build in

200
00:12:44,468 --> 00:12:48,786
types, things like numbers, string. There are a couple more.

201
00:12:48,968 --> 00:12:53,118
And in graphql we have basic scalar types. So these are integer,

202
00:12:53,214 --> 00:12:57,374
string, float. And you can already see there are multiple ways to define

203
00:12:57,502 --> 00:13:00,786
numbers. In GraphQl we have integer and float.

204
00:13:00,818 --> 00:13:03,906
So integer is if you don't have any decimals, and float

205
00:13:03,938 --> 00:13:06,440
is if you have any decimals or a price in example,

206
00:13:06,890 --> 00:13:10,842
whereas in typescript everything is a number. So a number can be both

207
00:13:10,896 --> 00:13:13,580
an integer or a float. Doesn't really matter,

208
00:13:16,110 --> 00:13:19,366
and they also have relationships to other types. So in case you want to relate

209
00:13:19,398 --> 00:13:22,746
the categories type to a list of categories or

210
00:13:22,768 --> 00:13:25,680
an array of categories, you can do this in a similar way,

211
00:13:26,530 --> 00:13:29,822
you can note the square brackets. And in typescript there are actually

212
00:13:29,876 --> 00:13:33,154
multiple ways to define an array. I chose for this way because

213
00:13:33,192 --> 00:13:36,340
it's mostly related to the graphql way of doing so.

214
00:13:37,910 --> 00:13:41,230
And then the biggest difference actually is that in typescript

215
00:13:41,310 --> 00:13:42,610
everything is default,

216
00:13:43,990 --> 00:13:47,682
everything is required by default, whereas in graphQl everything

217
00:13:47,736 --> 00:13:50,950
is optional by default. Because with GraphQL we want to give people

218
00:13:51,020 --> 00:13:54,982
options. So maybe you want to reuse the same query, the same type

219
00:13:55,036 --> 00:13:58,726
for different clients, different screens. Whereas with typescript we try to

220
00:13:58,748 --> 00:14:02,874
make everything as types as possible. So that's why everything is required by

221
00:14:02,912 --> 00:14:06,570
default in typescript and optional by default in GraphQL.

222
00:14:09,710 --> 00:14:13,834
So how to actually combine the two type systems? So in typescript

223
00:14:13,882 --> 00:14:17,866
we saw we have types and they're quite similar to types in GraphQL.

224
00:14:17,978 --> 00:14:21,758
But you can imagine if you have a GraphQL API, you don't want to

225
00:14:21,764 --> 00:14:25,186
be manually typing the typescript types inside your

226
00:14:25,208 --> 00:14:29,106
applications. So for this we'll be using

227
00:14:29,128 --> 00:14:32,606
a library called GraphQL code generator. And GraphQL

228
00:14:32,638 --> 00:14:37,042
code generator is an open source library that helps you to generate typescript

229
00:14:37,106 --> 00:14:39,590
types based on your GraphQL API.

230
00:14:41,530 --> 00:14:44,854
It's a CLI and I actually like CLI first

231
00:14:44,892 --> 00:14:48,594
project, first products. So it steps in example, we created a CLI

232
00:14:48,642 --> 00:14:52,294
first tool to generate graphQl APIs. And with GraphQl code generator

233
00:14:52,342 --> 00:14:55,894
you have a CLI first tool to generate typescript types

234
00:14:55,942 --> 00:14:59,786
based on GraphQL APIs. And it takes a schema as a

235
00:14:59,808 --> 00:15:03,870
source of truth, meaning that your GraphQL API will always contain

236
00:15:05,250 --> 00:15:08,942
will of type system, whereas typescript will make a copy of the type

237
00:15:08,996 --> 00:15:12,586
system. Of course, translated to typescript that you can use

238
00:15:12,628 --> 00:15:16,034
inside your projects. And both

239
00:15:16,072 --> 00:15:19,138
the type definitions are quite similar. We already saw this. So we

240
00:15:19,144 --> 00:15:20,180
have type product,

241
00:15:23,510 --> 00:15:26,918
so we have type product. We have id, title, price,

242
00:15:27,004 --> 00:15:30,854
thumbnail categories, reviews, and they're quite similarly defined for

243
00:15:30,892 --> 00:15:34,726
both technologies. Once we

244
00:15:34,748 --> 00:15:38,306
take the GraphQl schema as a sort of truth. We can use graphQl

245
00:15:38,338 --> 00:15:42,074
code generator to generate these typescript types automatically instead

246
00:15:42,112 --> 00:15:45,338
of having to define them manually. So C has swapped them over. So you can

247
00:15:45,344 --> 00:15:48,860
see Graphql is now on the left and typescript is on the right.

248
00:15:49,550 --> 00:15:53,638
And we're going to be using this GraphQl schema to generate typescript types

249
00:15:53,654 --> 00:15:57,274
for our project. Because of this way, like I said, you have no duplication

250
00:15:57,322 --> 00:16:00,766
of code. You can also get to something which I

251
00:16:00,788 --> 00:16:04,874
like to call the holy grail of full stack app development.

252
00:16:05,002 --> 00:16:08,514
It is to get end to end type safety, meaning that your

253
00:16:08,552 --> 00:16:11,842
API is types, your project is types, meaning nothing

254
00:16:11,896 --> 00:16:15,410
can go wrong in between, because these projects are linked to each other

255
00:16:15,480 --> 00:16:19,158
and the data flows are consistent. So if you have an ID

256
00:16:19,324 --> 00:16:23,014
in your graphql API which is of type integer, it will always

257
00:16:23,052 --> 00:16:26,902
be of type number in typescript. And if you create the connection between

258
00:16:26,956 --> 00:16:31,206
the two, you will know for sure that these types won't

259
00:16:31,238 --> 00:16:34,662
be giving any issues later on. The same for title will always be a string,

260
00:16:34,726 --> 00:16:38,118
thumbnail, price categories. Everything should be type safe.

261
00:16:38,134 --> 00:16:41,546
If we do it like this, it looks a bit

262
00:16:41,568 --> 00:16:45,306
like this. So you basically would map in typescript,

263
00:16:45,338 --> 00:16:48,554
you would create a new type called scalars. So these are the basic scalars,

264
00:16:48,602 --> 00:16:51,994
the built in types for graphql. So Id string,

265
00:16:52,042 --> 00:16:55,454
boolean, integer, and float. And you would map these to the

266
00:16:55,492 --> 00:16:59,058
type you have in typescript for a product. And if you would do

267
00:16:59,064 --> 00:17:03,074
this manually, you can imagine if you add new types to your schema, it will

268
00:17:03,112 --> 00:17:06,466
get quite messy because every time you need to update your typescript code as

269
00:17:06,488 --> 00:17:09,546
well. Well, maybe someone else is making changes to your API

270
00:17:09,598 --> 00:17:12,646
that you don't even know about. So what we want to do, we want to

271
00:17:12,668 --> 00:17:16,706
auto generate these to make sure that we don't have any mismatches

272
00:17:16,738 --> 00:17:20,362
in our types. And we always keep the typescript code up to date

273
00:17:20,416 --> 00:17:22,890
based on what we have in the GraphQL API.

274
00:17:25,390 --> 00:17:28,966
So we're going to be mapping the basic typescript types to the scholar

275
00:17:28,998 --> 00:17:32,314
types we have in GraphQL, and then we're also

276
00:17:32,352 --> 00:17:35,486
going to be keeping the relationship to the non scholar types. So any

277
00:17:35,508 --> 00:17:38,926
of the relationships we have in GraphqL, we just copy them over to

278
00:17:38,948 --> 00:17:42,174
typescript. Or actually we're going to be generating them over to

279
00:17:42,212 --> 00:17:46,050
typescript without any additional work from our side.

280
00:17:46,120 --> 00:17:50,062
The only thing we need to do is run the graphQL code, generate CLI,

281
00:17:50,126 --> 00:17:53,986
and this will generate these types for us automatically. So let's try

282
00:17:54,008 --> 00:17:57,438
it out. I actually have skipped the next js part from

283
00:17:57,464 --> 00:18:00,338
this. We're just going to be using GraphQL code generator.

284
00:18:00,434 --> 00:18:03,858
We're going to be using a GraphQL API and then we're

285
00:18:03,874 --> 00:18:07,474
going to be generating typescript types using graphQL code

286
00:18:07,532 --> 00:18:08,250
generator.

287
00:18:14,590 --> 00:18:18,620
So let me head over to

288
00:18:19,390 --> 00:18:23,034
chrome where I have a cool graphql API

289
00:18:23,082 --> 00:18:26,990
set ready for you. So in here you can see a graphical playground.

290
00:18:28,050 --> 00:18:31,726
We have our GraphQl schema. You can

291
00:18:31,748 --> 00:18:34,866
see we have multiple queries, we have queries to get an article, to get a

292
00:18:34,888 --> 00:18:38,382
list of articles. And this is actually a graphQl

293
00:18:38,446 --> 00:18:41,774
version of the practical dev rest API

294
00:18:41,822 --> 00:18:44,914
because they

295
00:18:44,952 --> 00:18:48,690
also don't have a graphql API, they have a rest API.

296
00:18:49,030 --> 00:18:52,274
So as you can see these are the latest articles you can find on practical

297
00:18:52,322 --> 00:18:55,026
dev. So if you would head over to practical dev you will find these articles

298
00:18:55,058 --> 00:18:59,498
as well. And in example we can get a list including the id

299
00:18:59,664 --> 00:19:02,650
and then we can just display them here using graphQl,

300
00:19:03,150 --> 00:19:06,460
tiny bit smaller. So this is a complete list.

301
00:19:07,390 --> 00:19:10,874
We can use cool stuff like pagination. So maybe say we

302
00:19:10,912 --> 00:19:14,734
want to have page one, we say per page is maybe just

303
00:19:14,772 --> 00:19:19,006
one result just to see if everything works. Gives us the first go

304
00:19:19,028 --> 00:19:22,430
to page ten. We can see, we see in the 10th article.

305
00:19:23,250 --> 00:19:27,106
So this should be the last one if we're doing this as

306
00:19:27,128 --> 00:19:30,434
you can see. What's so bad about four week sprints? Well,

307
00:19:30,632 --> 00:19:34,370
I don't really like to work in sprints. I really like to work Kanban

308
00:19:35,270 --> 00:19:38,646
preferably, but never mind, not the topic. So this

309
00:19:38,668 --> 00:19:42,054
is our GraphQl API and what we want to do, we want to use this

310
00:19:42,092 --> 00:19:45,862
Graphql API inside a project. So I have something

311
00:19:45,916 --> 00:19:48,940
set up in vs code. Let me just clear this.

312
00:19:49,550 --> 00:19:53,254
So I'm using if you go to package json.

313
00:19:53,382 --> 00:19:56,650
So I've installed graphql code generator, it's CLI.

314
00:19:57,390 --> 00:20:01,514
I've installed a typescript dependency, I installed GraphQL

315
00:20:01,642 --> 00:20:04,986
and then I also installed graphQL code gen typescript react

316
00:20:05,018 --> 00:20:08,286
Apollo library and there's also

317
00:20:08,388 --> 00:20:12,030
plugins for view, Apollo for Oracle,

318
00:20:12,530 --> 00:20:15,794
for a couple of other GraphQL client libraries as well.

319
00:20:15,992 --> 00:20:21,326
And we're going to be using this to actually generate typescript

320
00:20:21,358 --> 00:20:24,830
types based on a GraphQL API. So this is our graphql API.

321
00:20:24,990 --> 00:20:28,766
I have a documents page in which I

322
00:20:28,808 --> 00:20:32,680
just going to put this graphql query. Let's put this query in there.

323
00:20:36,730 --> 00:20:39,818
Just name it query. And now the

324
00:20:39,824 --> 00:20:43,654
only thing I would need to run is run mpmx mpx graphql

325
00:20:43,702 --> 00:20:47,658
codegen take the config I have here in codegen jaml which

326
00:20:47,744 --> 00:20:50,090
has my graphql API.

327
00:20:50,430 --> 00:20:54,158
It has a place where my operations are stored and then it has a

328
00:20:54,164 --> 00:20:55,950
connection with all the different plugins.

329
00:20:57,650 --> 00:21:02,110
If I run this graphql code generator will start working and start generating

330
00:21:02,550 --> 00:21:06,226
typescript type definitions based on my

331
00:21:06,248 --> 00:21:07,650
graphQl schema.

332
00:21:09,750 --> 00:21:13,106
So depending on the speed of your Internet it might take a while because what

333
00:21:13,128 --> 00:21:16,710
it does, it first introspects my graphQl API,

334
00:21:17,210 --> 00:21:21,030
then it takes the graphQl schema, then it parses the operation

335
00:21:21,850 --> 00:21:26,018
I have in this file and it creates the typescript types

336
00:21:26,114 --> 00:21:30,026
based on both the schema and my graphQl documents which

337
00:21:30,048 --> 00:21:33,542
is this file. And then if all successful

338
00:21:33,606 --> 00:21:37,050
it will generate this file called GraphQl tsX.

339
00:21:37,470 --> 00:21:42,060
And in here you can find all the type definitions so

340
00:21:42,990 --> 00:21:46,734
you can see the mapping of the basics, color types which

341
00:21:46,772 --> 00:21:50,478
all looks good. You can see the type article which is

342
00:21:50,484 --> 00:21:54,386
all the fields that the practical dev rest API has that we

343
00:21:54,408 --> 00:21:58,594
graphicalized. So if we go back to graphql and

344
00:21:58,632 --> 00:22:02,482
we could go for query, we press article body

345
00:22:02,536 --> 00:22:06,210
HTML is a string canonical URL Id last comment

346
00:22:06,290 --> 00:22:10,850
organization. You can see the role there. So id description

347
00:22:10,930 --> 00:22:13,942
title and also the relationships are there.

348
00:22:13,996 --> 00:22:17,142
So if we find user an example is also there.

349
00:22:17,196 --> 00:22:20,634
Type user and type user will also exist here.

350
00:22:20,752 --> 00:22:24,218
If you click on it you can see what it looks like. Also if we

351
00:22:24,304 --> 00:22:28,234
click on it here, should be able

352
00:22:28,272 --> 00:22:31,694
to see what it looks like and then figure out if all the types are

353
00:22:31,732 --> 00:22:35,440
matching. I'm not sure what's going on here,

354
00:22:36,450 --> 00:22:39,758
but if we go up you can also see

355
00:22:39,924 --> 00:22:43,822
that it has created hooks based on my

356
00:22:43,876 --> 00:22:47,810
query. If you look here you can see use query, use lazy query,

357
00:22:48,710 --> 00:22:52,174
you can immediately spot a mistake. It says unnamed

358
00:22:52,222 --> 00:22:55,814
query. So let me just go back to my operations file and make

359
00:22:55,852 --> 00:23:01,462
this a based query. Let's do get

360
00:23:01,516 --> 00:23:07,126
articles, save this and

361
00:23:07,228 --> 00:23:10,650
what we're then going to do, we're going to regenerate this file.

362
00:23:11,310 --> 00:23:14,714
So now instead of the unnamed query I should have a named query there which

363
00:23:14,752 --> 00:23:17,450
makes my hooks look a bit nicer.

364
00:23:18,830 --> 00:23:23,226
Like I said, depending on your Internet speed it

365
00:23:23,248 --> 00:23:26,154
might not be that fast because it needs to send a request to the GraphQl

366
00:23:26,202 --> 00:23:29,374
API introspect all the information you have there,

367
00:23:29,492 --> 00:23:33,670
generate the typescript types and of course also take this operations

368
00:23:33,770 --> 00:23:37,486
GraphQl file into account. So once this reparses

369
00:23:37,518 --> 00:23:41,214
it will generate a new graphQl Tsx file with my updated file,

370
00:23:41,262 --> 00:23:44,866
updated typescript definitions and then of course if I

371
00:23:44,888 --> 00:23:48,278
start adding new types here. So instead of ID title I can

372
00:23:48,284 --> 00:23:51,510
maybe also add description in here, the body,

373
00:23:51,580 --> 00:23:55,126
HTML and whatever types I have inside my

374
00:23:55,148 --> 00:23:59,250
graphql API. Because we have two things. We have the graphql schema

375
00:23:59,330 --> 00:24:02,406
and then we have the actual queries that we like to run and the queries

376
00:24:02,438 --> 00:24:06,426
that we like to run. They are there because of course in your application

377
00:24:06,528 --> 00:24:10,166
you also will be running queries. You can see this is named

378
00:24:10,198 --> 00:24:13,774
now, so this is the type return and then you can see the

379
00:24:13,812 --> 00:24:17,262
hooks being created here for me as well. So no longer

380
00:24:17,316 --> 00:24:20,766
do you have to insert Apollo client inside your app. Instead you

381
00:24:20,788 --> 00:24:24,538
can just use these auto generated hooks for Apollo client that

382
00:24:24,564 --> 00:24:28,930
were generated by our graphQl code generator library.

383
00:24:29,510 --> 00:24:32,578
And there's more you can do of course. Well, if we

384
00:24:32,584 --> 00:24:35,874
go back you can see if I add a new file, a new line.

385
00:24:35,992 --> 00:24:40,066
So this description, because maybe my backend developer added

386
00:24:40,098 --> 00:24:44,006
this description to my rest API, meaning that all

387
00:24:44,028 --> 00:24:47,526
the things I have here, they should be updated, they should also include the

388
00:24:47,548 --> 00:24:51,530
description. Now if I rerun this graphql code generator,

389
00:24:55,070 --> 00:24:57,786
so this is pretty much how it would work. So every time you add more

390
00:24:57,808 --> 00:25:01,514
queries, you add stuff to your schema, you make a change somewhere. You can just

391
00:25:01,552 --> 00:25:05,194
rerun the graphQl code generator, and as it's based on the CLI,

392
00:25:05,242 --> 00:25:08,942
you can just implement it to work with any of your existing build

393
00:25:08,996 --> 00:25:11,520
pipelines or wherever you like to set up your code.

394
00:25:16,110 --> 00:25:19,246
So that was the demo. I hope you liked it and I

395
00:25:19,268 --> 00:25:22,922
hope you maybe are thinking right now, should I start converting

396
00:25:22,986 --> 00:25:26,586
everything to typescript right away? And I can imagine you're feeling

397
00:25:26,618 --> 00:25:30,574
this because, well, typescript is pretty awesome. And if you're still using JavaScript,

398
00:25:30,622 --> 00:25:34,146
you're probably missing out on all the cool things that typescript is doing for

399
00:25:34,168 --> 00:25:34,740
people.

400
00:25:37,950 --> 00:25:41,194
But then a little heads up, I actually start doing

401
00:25:41,232 --> 00:25:45,354
this once. So I started to implement typescript for my projects and I just renamed

402
00:25:45,402 --> 00:25:49,866
all the files. This is what happened. So everything imploded.

403
00:25:49,898 --> 00:25:53,146
My Javascript code base looked like this seconds after adding

404
00:25:53,178 --> 00:25:56,398
typescript to the project. And this is of course something you want

405
00:25:56,404 --> 00:25:58,882
to prevent. You don't want to do this, you want to make sure that your

406
00:25:58,936 --> 00:26:02,606
code is working. So if you want to migrate to typescript,

407
00:26:02,718 --> 00:26:06,850
I would really recommend you to do it gradually.

408
00:26:09,270 --> 00:26:12,834
Start migrating some files to typescript. Keep the rest in javascript

409
00:26:12,882 --> 00:26:16,406
until you know for sure that things will be type safe. And I

410
00:26:16,428 --> 00:26:19,914
can assure you it will be going faster than you think, especially if you're using

411
00:26:20,032 --> 00:26:23,046
GraphQL already. It's easy to generate the types,

412
00:26:23,078 --> 00:26:27,162
meaning that it's easy for you, relatively, saying of course,

413
00:26:27,216 --> 00:26:30,970
because, well, in software development really nothing is easy.

414
00:26:31,120 --> 00:26:34,966
But let's say it's straightforward to generate the typescript type definitions

415
00:26:34,998 --> 00:26:36,730
for your graphqL API.

416
00:26:38,190 --> 00:26:41,658
But most of hope, what I really hope that

417
00:26:41,664 --> 00:26:45,234
you took away from this talk is that you're interested in start using

418
00:26:45,272 --> 00:26:48,978
a type system for your application, your API, whatever you're building.

419
00:26:49,144 --> 00:26:52,258
So thanks for watching this talk, and if you enjoyed, make sure to connect with

420
00:26:52,264 --> 00:26:55,362
me on Twitter using the handle at get hack team. So thank you,

421
00:26:55,416 --> 00:26:56,818
and I hope to see you around next.

