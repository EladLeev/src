1
00:00:30,770 --> 00:00:34,582
Hi, this is bridging the gap, leveraging incidents to align platform and product

2
00:00:34,636 --> 00:00:38,386
engineering, and the stock will cover the following how to survive

3
00:00:38,418 --> 00:00:42,230
at 02:00 a.m. On call apocalypse. Explain how severe incidents happen.

4
00:00:42,300 --> 00:00:45,974
How to make the most out of an incident. The gaps in your testing talk

5
00:00:46,012 --> 00:00:49,366
about a metric you should be tracking and you're probably not. How product management or

6
00:00:49,388 --> 00:00:52,430
product engineer think in very, very similar ways.

7
00:00:52,580 --> 00:00:55,982
Even more tips and conclusions. Let's start.

8
00:00:56,116 --> 00:00:59,178
So this is going to be a choose your own adventure. And let's

9
00:00:59,194 --> 00:01:02,286
start here with a story about how to survive at 02:00 a.m..

10
00:01:02,308 --> 00:01:05,562
Apocalypse. So it's 02:00 a.m. And your pager's

11
00:01:05,626 --> 00:01:08,818
app starts buzzing. Do you revert the code?

12
00:01:08,984 --> 00:01:12,098
You won't even check what contains or how it broke your app. You're just going

13
00:01:12,104 --> 00:01:15,298
to go and revert and pray that it fixed the issue? Or do

14
00:01:15,304 --> 00:01:19,266
you go and investigate the issue further? Let's assume that you chose a

15
00:01:19,368 --> 00:01:23,142
you're going to revert the code and let's hope that it fixes your issues.

16
00:01:23,276 --> 00:01:27,234
Nah, it didn't. Of course, this was clearly not the culprit,

17
00:01:27,282 --> 00:01:30,746
so youll should go back. And now let's try and look deeper into the

18
00:01:30,768 --> 00:01:33,882
issue. So you look deeper into the issue and success.

19
00:01:34,016 --> 00:01:37,994
You define an issue and you quickly deploy a fix. It was probably

20
00:01:38,032 --> 00:01:41,738
just a typo or something really simple that you can caught up quickly.

21
00:01:41,824 --> 00:01:45,486
So yeah, you're happy. Now do you just go back to

22
00:01:45,508 --> 00:01:49,146
bed? I mean, your shift is almost over. In 30 minutes it'll be someone else's

23
00:01:49,178 --> 00:01:52,766
problem, so no need to worry. Or do you try something else?

24
00:01:52,868 --> 00:01:56,210
Let's assume that you were lazy and you just went back to bed.

25
00:01:56,360 --> 00:01:59,474
Who cares? Someone else will deal with it if

26
00:01:59,512 --> 00:02:03,634
it races again. Unfortunately, this was terrible. Your site

27
00:02:03,752 --> 00:02:07,438
has gone down again. The engineer just went ahead and reverted your

28
00:02:07,464 --> 00:02:10,786
fix, which in turn caused an ether bigger outage.

29
00:02:10,898 --> 00:02:14,274
And teachers receive a call from an angry customer demanding

30
00:02:14,322 --> 00:02:18,360
explanation. The end. And this is a terrible ending. This is definitely

31
00:02:18,730 --> 00:02:22,442
a failure. For your company and your team and even yourself.

32
00:02:22,576 --> 00:02:26,186
There is definitely something else that you have done. So how about we

33
00:02:26,208 --> 00:02:29,514
try something different? And the goal of this talk is

34
00:02:29,552 --> 00:02:33,022
to share with you all what that something else is.

35
00:02:33,156 --> 00:02:36,702
But before jumping into that, let's have another story.

36
00:02:36,836 --> 00:02:40,426
It's time for meltdown. Swiss cheese and the anatomy of severe

37
00:02:40,458 --> 00:02:43,746
incidents. So, severe incidents and cheese have

38
00:02:43,768 --> 00:02:46,882
a lot of things in common. We're the product

39
00:02:46,936 --> 00:02:49,982
of letting something simple go unchecked.

40
00:02:50,126 --> 00:02:53,442
Bacteria cause cheese, and bugs create

41
00:02:53,496 --> 00:02:56,966
incidents. You can also not predict well the holes will be,

42
00:02:57,068 --> 00:03:01,234
they'll appear at random and because of that randomness,

43
00:03:01,362 --> 00:03:04,966
holes will align in very unexpected ways, which in

44
00:03:04,988 --> 00:03:08,102
turn will make even bigger holes. This is extremely common.

45
00:03:08,236 --> 00:03:11,482
And this is so common that there is even a model

46
00:03:11,616 --> 00:03:15,306
named behind this. It's called the James recent sweet cheese model.

47
00:03:15,488 --> 00:03:19,770
And as you can see, even with three very good layers,

48
00:03:20,110 --> 00:03:23,210
issues can get through. If the holes just align

49
00:03:23,550 --> 00:03:27,582
right away. It's almost as if there was nothing in between

50
00:03:27,636 --> 00:03:31,098
them. And this is a very common phenomenon. So it's

51
00:03:31,114 --> 00:03:34,458
something that you need to keep always can eye on. So what

52
00:03:34,484 --> 00:03:37,906
can you do about these comes you can acknowledge that they will happen.

53
00:03:38,008 --> 00:03:42,260
I mean distributed systems are hard so happen.

54
00:03:42,630 --> 00:03:46,210
Youll can try to increase monitoring and alerting like yeah,

55
00:03:46,280 --> 00:03:50,146
data helps spot these issues. You can

56
00:03:50,168 --> 00:03:53,526
try to invest in tools to detect anomalies. Like this

57
00:03:53,548 --> 00:03:57,126
is very common. Like most platforms now have anomaly detection built in.

58
00:03:57,228 --> 00:04:00,326
Or you can ask developers to instrument their apps again,

59
00:04:00,428 --> 00:04:03,850
make it a developer's problem, don't have to worry about it,

60
00:04:03,920 --> 00:04:06,842
and they will learn a lot if they do that well,

61
00:04:06,976 --> 00:04:10,426
unfortunately this is not enough. Like yes, bugs happen,

62
00:04:10,528 --> 00:04:14,574
but we should strive to reduce them as much as we can.

63
00:04:14,692 --> 00:04:18,014
Increasing, monitoring and alerting, it's great, but again, if you choose

64
00:04:18,052 --> 00:04:21,646
the wrong metric, you'll end up fixing the wrong thing. Like we

65
00:04:21,668 --> 00:04:25,618
saw on that first example. Like if you assume that something small is the issue,

66
00:04:25,704 --> 00:04:29,662
it's not necessarily bad. Investing in tools to detect anomalies,

67
00:04:29,726 --> 00:04:33,074
this is great, but unfortunately in our business, anomalies happen

68
00:04:33,112 --> 00:04:37,330
all the time for all reasons. The network is not reliable. Solar happen

69
00:04:37,400 --> 00:04:40,794
or data centers can have a power fluctuation.

70
00:04:40,942 --> 00:04:44,274
All those things will create anomalies on your code. And if you're

71
00:04:44,322 --> 00:04:47,750
not careful, you can end up addressing it in the wrong way. And finally,

72
00:04:47,820 --> 00:04:50,966
asking developers to instrument their apps without any guidance,

73
00:04:51,158 --> 00:04:55,146
it's going to eng up being extremely expensive. And also

74
00:04:55,248 --> 00:04:58,842
you're contributing to that problem that people might be looking in the wrong place.

75
00:04:58,896 --> 00:05:02,606
Sometimes they're going to blame issues on the wrong metric, and that's definitely not what

76
00:05:02,628 --> 00:05:05,806
we want. So you should never let a good crisis go to

77
00:05:05,828 --> 00:05:08,878
waste. Incidents are great as a

78
00:05:08,884 --> 00:05:12,350
wake up call to invest in modernizing your code base,

79
00:05:12,420 --> 00:05:15,886
improving your infrastructure, adapting better tools.

80
00:05:15,998 --> 00:05:19,566
And that's because incidents expose our weak spots,

81
00:05:19,678 --> 00:05:23,122
incidents that show where these issues are scheming from

82
00:05:23,176 --> 00:05:26,306
and identify the areas that need further investment.

83
00:05:26,498 --> 00:05:30,710
It's important though to beware of survivorship bias.

84
00:05:31,850 --> 00:05:35,794
Adding armor to the least hit areas of an aircraft is more effective

85
00:05:35,842 --> 00:05:39,526
than reinforcing non mission critical areas. So when

86
00:05:39,548 --> 00:05:43,146
you're thinking about your issues, try to

87
00:05:43,168 --> 00:05:46,342
also look into the things that are not failing,

88
00:05:46,406 --> 00:05:49,606
because some of them can be the critical thing. Those can be the load

89
00:05:49,638 --> 00:05:53,514
bearing parts of your system. So it's important that you look at this holistically,

90
00:05:53,562 --> 00:05:57,194
right? Basically. And yes, a severe incident will energize

91
00:05:57,242 --> 00:06:01,146
your step to spring into action. But unfortunately, we cannot just solve

92
00:06:01,178 --> 00:06:05,166
the problems with the same mindset that the

93
00:06:05,188 --> 00:06:08,834
mindset that created decisions. On the third place, we need to do something else.

94
00:06:08,872 --> 00:06:12,178
We need to look at this with different lens. So now

95
00:06:12,184 --> 00:06:15,922
I'm going to reveal the secret of the font pyramid. Tests are not

96
00:06:15,976 --> 00:06:19,942
enough. Imagine this scenario. You have 800

97
00:06:19,996 --> 00:06:23,410
tests for the user model, 80 tests for the endpoint,

98
00:06:23,490 --> 00:06:26,966
40 tests for the react component, and even eight end

99
00:06:26,988 --> 00:06:30,394
to end tests with playwright and cypress. Things can still

100
00:06:30,432 --> 00:06:33,580
go bad. And I've seen situations like this happen.

101
00:06:35,230 --> 00:06:38,230
Someone deletes an important SV bucket,

102
00:06:38,390 --> 00:06:42,566
someone accidentally uploads bottom

103
00:06:42,688 --> 00:06:46,426
color that matches the background. There's a route

104
00:06:46,458 --> 00:06:49,680
misconfiguration, like these simple issues happen.

105
00:06:50,130 --> 00:06:53,954
DNS, BPS issues, these things are

106
00:06:53,992 --> 00:06:57,842
extremely common. And it's really hard to catch these

107
00:06:57,976 --> 00:07:01,090
issues if you rely on testing alone,

108
00:07:01,510 --> 00:07:04,846
because as we saw previously,

109
00:07:05,038 --> 00:07:08,502
holes align very easily. So with this

110
00:07:08,556 --> 00:07:11,846
level of testings, it's not enough to catch all the

111
00:07:11,868 --> 00:07:14,982
issues that you're looking at. So now,

112
00:07:15,036 --> 00:07:18,922
without further ado, I want to reveal what that something else is. That thing

113
00:07:18,976 --> 00:07:22,634
that can really help youll feel more

114
00:07:22,672 --> 00:07:23,980
confident in your call.

115
00:07:25,310 --> 00:07:29,062
That's something else. That's called implementing business value proxy metrics,

116
00:07:29,126 --> 00:07:33,214
bpms for short. I haven't found a better name

117
00:07:33,252 --> 00:07:36,234
for this metric,

118
00:07:36,282 --> 00:07:39,934
so I just came up with this, and it

119
00:07:39,972 --> 00:07:43,230
sounds fancy, but it's not complicated at all.

120
00:07:43,380 --> 00:07:46,100
Let me go for an example that will clarify everything.

121
00:07:46,950 --> 00:07:50,226
So let's assume on the first example, you want to make sure

122
00:07:50,248 --> 00:07:53,858
that your login is working correctly. This is a metric that

123
00:07:53,864 --> 00:07:56,686
you can generate, and it's extremely simple to generate.

124
00:07:56,798 --> 00:08:00,566
You just say, like, okay, given all the login people that go

125
00:08:00,588 --> 00:08:04,210
to the login page, how many get to the dashboard?

126
00:08:04,370 --> 00:08:07,414
Meaning that that dashboard had to go to this

127
00:08:07,532 --> 00:08:11,514
sign up process, login process. And to

128
00:08:11,552 --> 00:08:15,606
generate a number, you generate a heuristic and saying like, hey, in normal

129
00:08:15,638 --> 00:08:19,420
situations, let's say 70% of people

130
00:08:20,270 --> 00:08:23,922
are able to do that. That's your metric, that's your PPM.

131
00:08:24,086 --> 00:08:27,774
That's something that you can track. And whenever that number comes way up or way

132
00:08:27,812 --> 00:08:31,006
down, there is something happening on your system, something that you

133
00:08:31,028 --> 00:08:34,162
need to look into on the positive side, yeah,

134
00:08:34,216 --> 00:08:38,018
if people are

135
00:08:38,104 --> 00:08:41,154
logging in more and this turn out to be

136
00:08:41,192 --> 00:08:45,446
like 80 or 90, like okay, maybe your effort of simplifying the

137
00:08:45,548 --> 00:08:49,640
login process is paying off or your auto login is working

138
00:08:50,730 --> 00:08:54,706
versus the opposite. Like okay, maybe this metric

139
00:08:54,738 --> 00:08:57,782
is tipping. Like did someone delete a button,

140
00:08:57,836 --> 00:09:01,510
did someone did something wrong? Or even worse,

141
00:09:02,030 --> 00:09:04,746
how about the login is not working at all and people are just laying on

142
00:09:04,768 --> 00:09:08,394
the dashboard page because it's unauthenticated. All these three

143
00:09:08,432 --> 00:09:11,870
scenarios are really easy to detect with a BPM.

144
00:09:13,010 --> 00:09:16,574
So yeah, alerts on BPM are great.

145
00:09:16,692 --> 00:09:20,286
They allow youll to move fast with confidence. This is something that you

146
00:09:20,308 --> 00:09:24,418
can just page on and this will be a better

147
00:09:24,584 --> 00:09:28,190
proxy than just looking at these individual metrics.

148
00:09:28,350 --> 00:09:32,286
But there's a catch. Like as the VPN

149
00:09:32,318 --> 00:09:36,280
says, you need to understand what is business value?

150
00:09:37,850 --> 00:09:41,654
Let's go to a definition. I really like

151
00:09:41,692 --> 00:09:43,830
this definition by Coda Hale.

152
00:09:44,730 --> 00:09:48,418
Business value is anything which makes people more likely

153
00:09:48,434 --> 00:09:52,074
to give us money. A temple like you build a product,

154
00:09:52,272 --> 00:09:55,980
people are using it, people are paying for it. That is business value.

155
00:09:57,310 --> 00:10:01,114
And it's really important to remember that the

156
00:10:01,152 --> 00:10:04,830
moment that your code generates business value is when it runs,

157
00:10:05,170 --> 00:10:08,542
not when we're writing it, not when we're testing it, not when

158
00:10:08,596 --> 00:10:12,358
people in QA are checking on it. Until it reaches

159
00:10:12,474 --> 00:10:15,700
our customers and our customers are successful with our product,

160
00:10:16,150 --> 00:10:18,530
that's when the business's value gets generated.

161
00:10:21,270 --> 00:10:24,546
This is very clear at this

162
00:10:24,568 --> 00:10:27,766
point. I hope it's clear at this point that

163
00:10:27,948 --> 00:10:31,190
platform engineering should care about the business as much as

164
00:10:31,260 --> 00:10:35,506
product management does. We need to be BFS,

165
00:10:35,698 --> 00:10:38,806
business focused friends. Hurrah. Okay,

166
00:10:38,908 --> 00:10:42,458
I know I'm getting again with these acronyms, but these are simple to

167
00:10:42,464 --> 00:10:48,090
understand. And this is way to understand RA is

168
00:10:48,160 --> 00:10:52,330
to just map them to bpms. So retention.

169
00:10:52,490 --> 00:10:55,840
Retention is simply the number of logins per hour.

170
00:10:56,850 --> 00:11:00,126
Easy activation, the number of sign ups per hour,

171
00:11:00,228 --> 00:11:03,730
which is great. Like how many people that landed on your page actually

172
00:11:03,880 --> 00:11:07,470
sign up for your product revenue,

173
00:11:07,630 --> 00:11:10,738
how many subscriptions you've had per day, and then a

174
00:11:10,744 --> 00:11:14,338
referral. Like how many marketing page views happen.

175
00:11:14,424 --> 00:11:17,778
Or if you have landing page, like how many people ended

176
00:11:17,794 --> 00:11:21,986
up on those landing pages. Bpms are just objective

177
00:11:22,018 --> 00:11:26,070
measures on how well your system is performing business wise.

178
00:11:27,050 --> 00:11:30,842
As youll can see, it's a one to one relationship. But this is great.

179
00:11:30,976 --> 00:11:34,682
This definitely allows us to build a lot of alignment between

180
00:11:34,736 --> 00:11:37,866
different parts of our business. And not

181
00:11:37,888 --> 00:11:40,810
only that, product development is shifting.

182
00:11:41,710 --> 00:11:44,540
As you can see at the beginning here on the left,

183
00:11:46,430 --> 00:11:49,374
product development was focused a lot of an experience.

184
00:11:49,492 --> 00:11:53,282
Like, I'm a user and I want to be able to do this and

185
00:11:53,416 --> 00:11:57,682
hopefully we'll get some benefit out of it. That is

186
00:11:57,816 --> 00:12:01,762
good. Definitely we're always going to be building futures, but thinking

187
00:12:01,816 --> 00:12:05,106
about that, it's limiting because sometimes you need

188
00:12:05,128 --> 00:12:09,302
to have more than one future, more than one experience to be able to

189
00:12:09,436 --> 00:12:13,154
achieve an outcome. So people are slowly shifting

190
00:12:13,202 --> 00:12:16,886
into this capability model, which we say like,

191
00:12:16,908 --> 00:12:20,954
hey, we want users to be able to do this on our product and

192
00:12:20,992 --> 00:12:24,634
we want this ability, this capability to give us

193
00:12:24,672 --> 00:12:28,042
this business outcome. And this is great.

194
00:12:28,096 --> 00:12:31,866
This is a much better level of sophistication because now we can say like,

195
00:12:31,888 --> 00:12:35,470
hey, this business outcome is actually measurable. Well,

196
00:12:35,540 --> 00:12:38,798
we know that this is working because we have the signal. As before,

197
00:12:38,884 --> 00:12:41,774
we were just guessing if the future was working or not.

198
00:12:41,892 --> 00:12:45,106
We can actually now see what's going on and

199
00:12:45,208 --> 00:12:47,940
try to get some objectives on that.

200
00:12:48,470 --> 00:12:52,962
And nowadays product

201
00:12:53,016 --> 00:12:56,482
development is going a step farther, which is going to measure things.

202
00:12:56,616 --> 00:13:00,322
We want to say like, hey, this is the signal that we need to measure

203
00:13:00,466 --> 00:13:03,846
with this data. And then we're going to experiment on it. We're going to do

204
00:13:03,868 --> 00:13:08,726
a b test, we're going to do all this process

205
00:13:08,828 --> 00:13:12,154
to make sure that what we built is actually being used

206
00:13:12,192 --> 00:13:15,958
in the way that we intended and that the outcomes that we're expecting

207
00:13:16,134 --> 00:13:19,958
happen. So thinking this way is a great

208
00:13:20,144 --> 00:13:23,822
way to achieve the results that we're looking for.

209
00:13:23,956 --> 00:13:27,086
And it's very similar to the way we're thinking on the platform

210
00:13:27,188 --> 00:13:31,306
side. Business value proxy

211
00:13:31,338 --> 00:13:36,446
metrics is not just a signal that a feature is creating the algorithms

212
00:13:36,478 --> 00:13:40,100
that we want. It is, but it's also doing more than that.

213
00:13:41,030 --> 00:13:44,878
Good business. Valid proxy metrics are showing what is critical.

214
00:13:44,974 --> 00:13:48,306
What is mission critical to a business. What are the things that if they're

215
00:13:48,338 --> 00:13:50,360
not working, you should be worried about?

216
00:13:52,890 --> 00:13:56,066
This is a screenshot of dashboard that we call mission

217
00:13:56,098 --> 00:13:59,346
control. This very simple board allows

218
00:13:59,378 --> 00:14:03,050
us to see when things are debating from our expectations.

219
00:14:03,630 --> 00:14:07,078
So look at that large orange spike. It's clear that there's

220
00:14:07,094 --> 00:14:08,620
something going on there.

221
00:14:11,090 --> 00:14:14,990
With login, we can be like, hey, did someone

222
00:14:15,140 --> 00:14:18,778
change something recently? Did we activate a feature flag recently?

223
00:14:18,874 --> 00:14:22,862
We can correlate this data with these

224
00:14:22,916 --> 00:14:26,114
changes, and just keeping an eye on these numbers will

225
00:14:26,232 --> 00:14:29,810
always allow us to go faster with confidence.

226
00:14:30,550 --> 00:14:33,954
We know that as long as this is leveraging within our standard

227
00:14:34,072 --> 00:14:37,606
range, we don't have to worry about what's bridging or not.

228
00:14:37,788 --> 00:14:41,222
But whenever something breaks, this is a great way to make

229
00:14:41,276 --> 00:14:44,626
actionable items. So now let's

230
00:14:44,658 --> 00:14:48,122
go back to our story. Let's assume that you're back

231
00:14:48,176 --> 00:14:50,330
at a 02:00 a.m.. Apocalypse.

232
00:14:51,230 --> 00:14:54,586
And here's just something else. Instead of

233
00:14:54,608 --> 00:14:58,700
going back to sleep or jumping right to it, just start checking mission control.

234
00:14:59,550 --> 00:15:03,002
If everything looks okay, you can meet the alert and wait until

235
00:15:03,056 --> 00:15:06,106
business hours to deal with it. Can you go back to sleep?

236
00:15:06,218 --> 00:15:09,680
You know that things on the system are looking okay,

237
00:15:10,050 --> 00:15:13,198
but if for whatever reason, one of your vpms is looking

238
00:15:13,284 --> 00:15:16,526
off, you can quickly look and try to correlate with

239
00:15:16,548 --> 00:15:20,260
alert signals. And once you do get out the fix,

240
00:15:21,670 --> 00:15:26,066
as long as there's a BPM, you can rest and

241
00:15:26,168 --> 00:15:30,006
go back to sleep because yeah, the bpms will detect if anything else

242
00:15:30,028 --> 00:15:33,810
is wrong. Also, I really encourage

243
00:15:33,970 --> 00:15:37,366
you during incident to think about like, hey, is there a VPN for

244
00:15:37,388 --> 00:15:41,660
this or not? Because if not, this is a great opportunity to do this one.

245
00:15:43,310 --> 00:15:46,422
And here are a couple more tips on how to use incidents.

246
00:15:46,486 --> 00:15:47,690
Call up to action.

247
00:15:49,950 --> 00:15:54,042
Make sure that you're using some sort of incident management software to capture

248
00:15:54,106 --> 00:15:57,566
your learnings. It's a great way to spread the

249
00:15:57,588 --> 00:16:00,634
knowledge. And also during a crisis,

250
00:16:00,682 --> 00:16:03,806
it's a great way to collaborate. People are able to jump in

251
00:16:03,828 --> 00:16:07,442
and out of an incident and just gain by the context by looking

252
00:16:07,496 --> 00:16:09,170
at those records.

253
00:16:10,630 --> 00:16:14,366
Just utilize the learnings to create BPM backed

254
00:16:14,398 --> 00:16:18,180
alerts. So yeah, every time that you have a serious incident that

255
00:16:18,630 --> 00:16:22,754
feels bad during your retrospective, look into like, hey, what are the bpms

256
00:16:22,802 --> 00:16:25,640
that I can use to make sure that this won't happen again?

257
00:16:26,650 --> 00:16:30,138
Bpms are very similar

258
00:16:30,224 --> 00:16:33,866
to key performance indicators. So if youll company has some

259
00:16:33,888 --> 00:16:36,614
sort of process like okrs B, two moms,

260
00:16:36,662 --> 00:16:40,734
or any other framework, bpms can guide you and create

261
00:16:40,772 --> 00:16:44,634
those conversations. Like what are the metrics that we want to change and prove?

262
00:16:44,762 --> 00:16:48,510
Bpms are almost one to one with KPIs,

263
00:16:50,370 --> 00:16:54,458
don't forget to share youll perspectives with broad and other departments.

264
00:16:54,634 --> 00:16:57,906
Again, the most successful way to introduce bpms is to

265
00:16:57,928 --> 00:17:01,940
have alignment with the rest of your company and talk about what's important for everyone.

266
00:17:03,430 --> 00:17:06,942
And remember, the same tools that we use

267
00:17:07,016 --> 00:17:09,638
to fix things on the infrastructure side,

268
00:17:09,724 --> 00:17:13,446
SRE side, platform side, whatever you want to call it,

269
00:17:13,628 --> 00:17:17,298
they can be used for business metrics. We can use UDA Loop to

270
00:17:17,484 --> 00:17:21,180
address business metric issues. So yeah,

271
00:17:21,550 --> 00:17:25,420
it's great to introduce this and share them with the rest of the company.

272
00:17:26,270 --> 00:17:29,734
And finally, when doing can introspective,

273
00:17:29,782 --> 00:17:33,822
don't forget that finding the root cause is not enough. You should try to

274
00:17:33,876 --> 00:17:35,870
also implement preventive measures,

275
00:17:36,770 --> 00:17:40,286
BPMS tests, dashboards. They're just

276
00:17:40,308 --> 00:17:43,790
as important as bug fixes. So please introduce them,

277
00:17:43,860 --> 00:17:47,040
and your whole company will be happier because of that.

278
00:17:48,450 --> 00:17:51,886
All right, this is the talk. Thank you so much. If you have

279
00:17:51,908 --> 00:17:55,138
any questions, you can reach out to me on master

280
00:17:55,274 --> 00:17:58,098
or I'm at Algons everywhere else, Twitter,

281
00:17:58,194 --> 00:18:01,798
whatever people are using these days, you can probably find me in there.

282
00:18:01,884 --> 00:18:02,420
Thank you so much.

