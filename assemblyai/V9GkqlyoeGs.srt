1
00:00:00,410 --> 00:00:06,174
Jamaica real

2
00:00:06,212 --> 00:00:09,934
time feedback into the behavior of your distributed systems and

3
00:00:09,972 --> 00:00:13,614
observing changes exceptions errors in real

4
00:00:13,652 --> 00:00:16,746
time allows you to not only experiment with confidence,

5
00:00:16,858 --> 00:00:20,480
but respond instantly to get things working again.

6
00:00:24,610 --> 00:00:25,360
Close.

7
00:00:47,310 --> 00:00:51,150
Let's start from some easy example

8
00:00:51,300 --> 00:00:54,762
which is not documented in typescript

9
00:00:54,826 --> 00:00:58,142
documentation, but I have found it

10
00:00:58,196 --> 00:01:01,374
very useful. So currently you

11
00:01:01,412 --> 00:01:04,818
all know that we have lowercase built in type

12
00:01:04,904 --> 00:01:09,006
which will just lowercase your string.

13
00:01:09,118 --> 00:01:15,018
For instance. Let's try it. Type test equals

14
00:01:15,214 --> 00:01:16,710
lowercase.

15
00:01:18,730 --> 00:01:25,062
For instance a so

16
00:01:25,116 --> 00:01:29,990
test is equal lowercase

17
00:01:30,070 --> 00:01:34,982
a so previously, if you provide lowercase

18
00:01:35,046 --> 00:01:38,154
string, it will

19
00:01:38,192 --> 00:01:41,280
do nothing. Because string is very general type,

20
00:01:41,730 --> 00:01:46,986
it's hard to imagine how we can lowercase

21
00:01:47,178 --> 00:01:50,160
any string previously. However,

22
00:01:50,850 --> 00:01:55,266
after typescript 4.8 you

23
00:01:55,288 --> 00:01:59,966
are able to use lowercase with regular

24
00:02:00,078 --> 00:02:03,634
with common type with

25
00:02:03,672 --> 00:02:07,014
general type string and you will get an

26
00:02:07,052 --> 00:02:10,354
error if the string will be uppercased.

27
00:02:10,482 --> 00:02:14,120
For instance, we have our string STR

28
00:02:14,650 --> 00:02:18,606
variable which should be only lowercased.

29
00:02:18,738 --> 00:02:23,146
Here we have okay, here we have an error because

30
00:02:23,328 --> 00:02:27,642
of how it works. Now as

31
00:02:27,696 --> 00:02:31,114
for second one also undocumented

32
00:02:31,162 --> 00:02:35,722
feature. At least I didn't find in documentation explanation

33
00:02:35,786 --> 00:02:38,942
of this behavior. However, you can find some

34
00:02:38,996 --> 00:02:43,410
explanation here in this stack overflow answer and

35
00:02:43,560 --> 00:02:47,394
in my article in

36
00:02:47,432 --> 00:02:52,370
my blog undocumented features. You can find my blog here catchtscom

37
00:02:54,470 --> 00:02:59,430
okay, so what about inference prioritization?

38
00:03:00,490 --> 00:03:04,226
Just imagine that we have some props, select props

39
00:03:04,418 --> 00:03:08,922
which expect value generic which

40
00:03:08,976 --> 00:03:11,834
will be used for value and for options.

41
00:03:11,952 --> 00:03:16,070
And then we have just, I don't know, any react

42
00:03:16,150 --> 00:03:20,066
component select which will safer

43
00:03:20,198 --> 00:03:24,350
provided value. So here you see I have provided

44
00:03:26,610 --> 00:03:30,670
generic constraint that value should extend string

45
00:03:31,330 --> 00:03:34,850
and our props will be select

46
00:03:34,920 --> 00:03:36,580
props with this value.

47
00:03:38,310 --> 00:03:41,620
Current constraint is that if options,

48
00:03:42,870 --> 00:03:46,294
sorry, that value should be one of options.

49
00:03:46,412 --> 00:03:49,894
So for instance, if options are red and

50
00:03:49,932 --> 00:03:53,942
yellow, value accordingly should be either red or

51
00:03:53,996 --> 00:03:57,554
yellow. So this is

52
00:03:57,612 --> 00:04:01,994
okay. However, what about this?

53
00:04:02,192 --> 00:04:06,090
It is obvious that this component

54
00:04:06,510 --> 00:04:10,170
that these props are wrong because value should be either red

55
00:04:10,240 --> 00:04:13,600
or yellow and in this case it is green. Why?

56
00:04:14,770 --> 00:04:18,142
So currently it just should

57
00:04:18,196 --> 00:04:24,402
work as it is because value is just an

58
00:04:24,456 --> 00:04:29,090
inference of your props. So if you provided

59
00:04:30,230 --> 00:04:33,940
a value green, then it is perfectly fine.

60
00:04:35,530 --> 00:04:39,110
So as you might have noticed, value is

61
00:04:39,180 --> 00:04:41,720
red or yellow or green.

62
00:04:43,610 --> 00:04:47,426
If you want to make sure that value should be

63
00:04:47,468 --> 00:04:51,500
only red or yellow, you should just add this small

64
00:04:52,750 --> 00:04:56,380
sync boom. This means.

65
00:04:57,710 --> 00:05:02,122
This means that prioritization of inference

66
00:05:02,186 --> 00:05:06,286
of value is lower. It means that first of all we

67
00:05:06,308 --> 00:05:10,638
will infer a value for options property and

68
00:05:10,724 --> 00:05:14,660
only then we will infer for value.

69
00:05:15,430 --> 00:05:19,122
So once we have inferred red and yellow for

70
00:05:19,176 --> 00:05:22,674
options property typescript now

71
00:05:22,872 --> 00:05:27,350
is aware that value should be either red or yellow.

72
00:05:28,970 --> 00:05:30,440
Apart from that,

73
00:05:32,410 --> 00:05:37,754
using intersection with empty object also

74
00:05:37,792 --> 00:05:41,210
is interesting because it means

75
00:05:41,280 --> 00:05:45,020
that it is non nullable value.

76
00:05:46,190 --> 00:05:50,686
It was provided in I

77
00:05:50,708 --> 00:05:55,680
don't remember typescript 4.8 or 4.9,

78
00:05:56,450 --> 00:06:00,286
sorry, don't remember exactly, but they even

79
00:06:00,388 --> 00:06:04,170
replaced non nullable built in utility

80
00:06:04,250 --> 00:06:08,542
type with this with intersection

81
00:06:08,606 --> 00:06:12,340
of generic ta and empty object. So now,

82
00:06:13,750 --> 00:06:17,302
as you see, null is highlighted as

83
00:06:17,356 --> 00:06:21,206
never, and if I will provide two it

84
00:06:21,228 --> 00:06:24,806
is okay. For instance, ari it

85
00:06:24,828 --> 00:06:29,254
is okay. So it

86
00:06:29,292 --> 00:06:33,442
was very interesting for me to see that this small tree

87
00:06:33,506 --> 00:06:38,950
can be used for both cases and furthermore,

88
00:06:39,890 --> 00:06:43,502
least it, at least this behavior is not documented and

89
00:06:43,556 --> 00:06:47,470
it is, I would say, very unknown

90
00:06:47,810 --> 00:06:51,098
feature, but very useful.

91
00:06:51,274 --> 00:06:54,670
So let's go to our next section.

92
00:06:54,750 --> 00:07:01,074
Useful patterns how

93
00:07:01,112 --> 00:07:05,034
to say I would say it is very popular

94
00:07:05,102 --> 00:07:08,502
question on stack overflow this

95
00:07:08,556 --> 00:07:12,374
example imagine that we have some object, I don't know,

96
00:07:12,412 --> 00:07:15,862
some dictionary doesn't matter. And we

97
00:07:15,916 --> 00:07:20,374
want to create a function which expects

98
00:07:20,502 --> 00:07:23,722
this object and property which

99
00:07:23,776 --> 00:07:27,130
corresponds, for instance to strings.

100
00:07:28,670 --> 00:07:32,382
What I mean, I mean, if we have this object where a and

101
00:07:32,436 --> 00:07:35,390
c properties are strings,

102
00:07:35,730 --> 00:07:40,238
then our function should expect only

103
00:07:40,324 --> 00:07:43,938
a or c properties, like we are

104
00:07:44,024 --> 00:07:48,882
not allowed to provide b property. So here

105
00:07:48,936 --> 00:07:51,570
we should get an error,

106
00:07:52,870 --> 00:07:56,230
but this string property is not implemented yet,

107
00:07:56,300 --> 00:07:59,558
so there is no inference here at all for now.

108
00:07:59,724 --> 00:08:03,330
So let's create our utility

109
00:08:03,410 --> 00:08:07,122
types to accomplish this task.

110
00:08:07,186 --> 00:08:11,494
So first of all, I have created values this

111
00:08:11,532 --> 00:08:14,922
utility type. It is very popular utility type

112
00:08:14,976 --> 00:08:18,422
and it just returns us union

113
00:08:18,486 --> 00:08:22,430
of all values. What does it mean? Type test

114
00:08:22,580 --> 00:08:26,990
equals values type

115
00:08:27,060 --> 00:08:31,550
of object oops.

116
00:08:34,230 --> 00:08:37,570
So it is string and number because union of

117
00:08:37,640 --> 00:08:41,634
all values. If I add it as const, I will

118
00:08:41,672 --> 00:08:45,182
get a 42 and c. Yes,

119
00:08:45,336 --> 00:08:49,762
just union of all values. Nothing complicated,

120
00:08:49,826 --> 00:08:53,014
I would say. As for this

121
00:08:53,052 --> 00:08:57,802
one, filter property by object

122
00:08:57,856 --> 00:09:01,130
and type. This is also,

123
00:09:01,280 --> 00:09:05,254
I would say, popular utility type. It iterates

124
00:09:05,382 --> 00:09:09,066
through object and checks whether object

125
00:09:09,168 --> 00:09:13,002
value extends some type. For instance,

126
00:09:13,066 --> 00:09:16,960
in our case we are expecting here that

127
00:09:19,410 --> 00:09:23,230
if object property extends

128
00:09:23,310 --> 00:09:26,066
number, we will return this object property.

129
00:09:26,168 --> 00:09:29,474
Otherwise we will get never.

130
00:09:29,672 --> 00:09:33,826
So we just filtered object

131
00:09:33,928 --> 00:09:37,574
properties by type.

132
00:09:37,772 --> 00:09:41,094
For instance here

133
00:09:41,132 --> 00:09:44,806
I get b only because I have provided a

134
00:09:44,828 --> 00:09:47,670
number. If I will provide a string,

135
00:09:49,150 --> 00:09:53,530
I will get a and c. So pretty straightforward.

136
00:09:55,230 --> 00:09:59,178
More explanation you can find, as I said on my

137
00:09:59,344 --> 00:10:03,034
blog. So let's

138
00:10:03,082 --> 00:10:05,520
try to implement our function.

139
00:10:07,090 --> 00:10:12,110
So here I have provided two generic

140
00:10:12,950 --> 00:10:16,706
two generics for type inference. First, one is

141
00:10:16,808 --> 00:10:20,306
object, which should be

142
00:10:20,328 --> 00:10:24,590
a subtype of record where each property is allowed

143
00:10:24,670 --> 00:10:27,830
object, key, string, number, symbol and value

144
00:10:27,900 --> 00:10:32,022
is unknown because it doesn't matter for us which

145
00:10:32,076 --> 00:10:35,750
value should have this object. And as for key,

146
00:10:35,900 --> 00:10:39,466
it is like our most interesting

147
00:10:39,568 --> 00:10:43,462
part. We are calling filter

148
00:10:43,526 --> 00:10:47,654
property by I provided object and string.

149
00:10:47,702 --> 00:10:51,770
It means that I want to filter object keys

150
00:10:51,930 --> 00:10:56,782
by string. Now this

151
00:10:56,836 --> 00:11:00,574
intersection is very important because without it

152
00:11:00,612 --> 00:11:02,000
it will not work.

153
00:11:03,990 --> 00:11:07,954
As you see, I have an error here. It says to

154
00:11:07,992 --> 00:11:11,300
typescript that hey, this object

155
00:11:12,390 --> 00:11:16,040
which is provided by you has

156
00:11:17,770 --> 00:11:21,234
a key which corresponds

157
00:11:21,282 --> 00:11:24,454
to string. This string and this

158
00:11:24,492 --> 00:11:28,300
string should be like the same type.

159
00:11:28,990 --> 00:11:32,682
It means that if I will call this

160
00:11:32,736 --> 00:11:36,810
object with key, it allows me to use

161
00:11:36,880 --> 00:11:40,670
any string prototype method charcoal add

162
00:11:40,740 --> 00:11:42,400
includes index off.

163
00:11:45,890 --> 00:11:49,902
So as you see, it works for outer world and

164
00:11:49,956 --> 00:11:53,150
for inner sorry, not world but scope

165
00:11:53,230 --> 00:11:56,734
for function outer scope. So you are allowed

166
00:11:56,782 --> 00:12:00,562
here to provide only allowed key and for

167
00:12:00,616 --> 00:12:04,126
inner scope of function. For instance,

168
00:12:04,318 --> 00:12:06,600
if I provide here a number,

169
00:12:08,970 --> 00:12:14,086
so we want a

170
00:12:14,108 --> 00:12:18,642
number. C is not allowed anymore because

171
00:12:18,796 --> 00:12:22,490
it should be only b because we have only one number property,

172
00:12:22,560 --> 00:12:25,958
it is b, so it is allowed

173
00:12:26,054 --> 00:12:29,770
us to use b. And here we are allowed to use

174
00:12:29,840 --> 00:12:33,738
two exponential to fix to local string.

175
00:12:33,834 --> 00:12:36,510
So all number prototype methods.

176
00:12:39,010 --> 00:12:43,426
Okay, let's go to another

177
00:12:43,528 --> 00:12:46,820
example. Believe me,

178
00:12:47,270 --> 00:12:51,022
people are asking on stack overflow

179
00:12:51,166 --> 00:12:54,954
once per week why Ri

180
00:12:55,022 --> 00:12:58,754
prototype includes doesn't work with tuples,

181
00:12:58,882 --> 00:13:05,526
I mean with immutable arras I

182
00:13:05,548 --> 00:13:09,594
will not provide you with explanation why you can

183
00:13:09,632 --> 00:13:11,930
easily find it. It is very popular.

184
00:13:13,550 --> 00:13:17,660
I want to provide you with solution which

185
00:13:18,430 --> 00:13:21,598
without type assertion, I mean without

186
00:13:21,764 --> 00:13:27,130
using s assertion.

187
00:13:27,290 --> 00:13:31,082
So currently if for instance you have some immutable

188
00:13:31,146 --> 00:13:35,202
array and you want to check

189
00:13:35,256 --> 00:13:38,866
whether it is includes d, you will get an

190
00:13:38,888 --> 00:13:42,740
error. So how we can

191
00:13:44,230 --> 00:13:48,470
fix it? How we can write our code more safer

192
00:13:49,450 --> 00:13:53,126
we can carry it so we can make a

193
00:13:53,148 --> 00:13:55,720
function which returns a function.

194
00:13:57,390 --> 00:14:00,458
So what does it mean? I have created a

195
00:14:00,464 --> 00:14:04,730
function with tuple. I have provided

196
00:14:05,950 --> 00:14:09,238
generic parameter list which extends

197
00:14:09,414 --> 00:14:13,134
an array of strings. And here I have just

198
00:14:13,172 --> 00:14:17,054
provided this type. I have used this

199
00:14:17,172 --> 00:14:20,350
rest operator for type inference.

200
00:14:21,890 --> 00:14:25,570
So currently nothing complicated.

201
00:14:26,550 --> 00:14:30,130
As for the second one function, second one function which is

202
00:14:30,200 --> 00:14:33,906
returned function by this remember here

203
00:14:33,928 --> 00:14:36,930
we have two functions, is a type guard,

204
00:14:37,090 --> 00:14:41,126
what does it mean? It means that it

205
00:14:41,228 --> 00:14:44,790
expects us one argument which is prop

206
00:14:45,530 --> 00:14:49,414
sorry, which is string, and if it returns

207
00:14:49,462 --> 00:14:52,682
true, it means that prop is a part

208
00:14:52,736 --> 00:14:55,740
of the list, is the element from the list.

209
00:14:56,350 --> 00:15:00,370
Just want to remind you what this syntax

210
00:15:00,470 --> 00:15:03,742
means. If we have a

211
00:15:03,796 --> 00:15:07,822
tuple type with square bracket notation where we

212
00:15:07,876 --> 00:15:11,774
just use general type number, it will

213
00:15:11,812 --> 00:15:15,518
return us a union of all type elements.

214
00:15:15,614 --> 00:15:19,522
What I mean, I will just provide you with small example, just to

215
00:15:19,576 --> 00:15:22,306
have an overview what we are doing here.

216
00:15:22,488 --> 00:15:26,470
So type here

217
00:15:26,620 --> 00:15:30,454
and one, two. So this is

218
00:15:30,492 --> 00:15:35,330
our type. Our type is tuple, which consists

219
00:15:35,410 --> 00:15:37,560
of three elements, one, two, three.

220
00:15:39,150 --> 00:15:43,162
If I use square bracket notation and we'll type

221
00:15:43,216 --> 00:15:47,642
a number, it will return us a union of

222
00:15:47,696 --> 00:15:49,740
all elements. Okay,

223
00:15:51,170 --> 00:15:54,814
so now when we understand what's going

224
00:15:54,852 --> 00:16:00,330
on here and here, we can use our utility

225
00:16:00,410 --> 00:16:04,770
function. First of all, I have created includes

226
00:16:05,190 --> 00:16:08,914
function. Please be aware that includes is

227
00:16:08,952 --> 00:16:12,514
a function, because vistauple returns us a

228
00:16:12,552 --> 00:16:16,098
function. It means that includes

229
00:16:16,194 --> 00:16:20,470
checks whether prop is one

230
00:16:20,540 --> 00:16:24,630
of tuple elements, in our case abc.

231
00:16:26,250 --> 00:16:29,622
So here you were not allowed

232
00:16:29,686 --> 00:16:33,942
to use like any other string except

233
00:16:34,006 --> 00:16:37,782
abc. Here we are allowed to use any string

234
00:16:37,846 --> 00:16:41,166
because prop is actually a string. So it might be

235
00:16:41,188 --> 00:16:44,718
any string. And here, after we apply

236
00:16:44,804 --> 00:16:48,362
if condition, sorry, condition statement

237
00:16:48,506 --> 00:16:52,720
str will be a, c and b.

238
00:16:54,870 --> 00:16:58,514
Okay, let's proceed. Let's go

239
00:16:58,552 --> 00:17:02,930
to our next section. It is safer typescript.

240
00:17:03,750 --> 00:17:08,120
It is very easy

241
00:17:08,810 --> 00:17:13,414
sync and you need to be aware that using

242
00:17:13,612 --> 00:17:17,206
interfaces in typescript is

243
00:17:17,388 --> 00:17:21,386
more safer than using types. There are

244
00:17:21,408 --> 00:17:24,842
a lot of discussion you can find in Internet that I

245
00:17:24,896 --> 00:17:28,470
prefer to use types, I prefer to use interface.

246
00:17:28,550 --> 00:17:32,366
Somebody prefer to use anything else? I would

247
00:17:32,388 --> 00:17:35,598
say in typescript it is not a matter

248
00:17:35,684 --> 00:17:39,502
of preference whether you want to use interface or

249
00:17:39,556 --> 00:17:43,506
type. It's a matter of, I would say

250
00:17:43,608 --> 00:17:50,226
safety or what

251
00:17:50,248 --> 00:17:53,458
I want to say it shouldn't be a preference. It should be a

252
00:17:53,464 --> 00:17:58,066
rule that if you have some object with some predefined

253
00:17:58,178 --> 00:18:02,274
properties, like here we have an interface animal tag

254
00:18:02,322 --> 00:18:05,960
name, we can use generic type here.

255
00:18:07,470 --> 00:18:11,660
In this case, it's important that

256
00:18:12,430 --> 00:18:16,586
we are using an interface and not type. We should use

257
00:18:16,688 --> 00:18:20,054
type for aliases, for some

258
00:18:20,192 --> 00:18:22,750
making fun utility types,

259
00:18:23,570 --> 00:18:27,982
some iteration, but not for declaring just

260
00:18:28,116 --> 00:18:29,680
a shape of object.

261
00:18:31,250 --> 00:18:35,298
Why? Just imagine that you have

262
00:18:35,464 --> 00:18:39,570
a type animal

263
00:18:41,750 --> 00:18:45,446
and you have some function handle record,

264
00:18:45,548 --> 00:18:49,400
for instance, which expect us an object

265
00:18:51,770 --> 00:18:55,398
where key is a string and value is unknown and

266
00:18:55,564 --> 00:18:59,046
this object will be mutated. So imagine

267
00:18:59,078 --> 00:19:03,420
you have some generic function which mutates your object.

268
00:19:04,910 --> 00:19:08,150
I don't want to say that mutating objects in typescript

269
00:19:08,230 --> 00:19:11,582
is very cool idea. However we might

270
00:19:11,636 --> 00:19:15,040
have it. So if you have this function and

271
00:19:16,450 --> 00:19:20,480
it is perfectly fine that you are mutating object here

272
00:19:21,570 --> 00:19:25,314
you can assign any value like 23 or,

273
00:19:25,352 --> 00:19:28,706
I don't know, some array of numbers and it is

274
00:19:28,728 --> 00:19:31,460
okay, typescript perfectly fine with it.

275
00:19:32,950 --> 00:19:36,182
Furthermore, you have an object

276
00:19:36,316 --> 00:19:40,022
which is an animal, and you are passing this object

277
00:19:40,076 --> 00:19:44,150
to this function and this object

278
00:19:44,220 --> 00:19:47,834
will be mutated. Just ask

279
00:19:47,872 --> 00:19:51,814
yourself, is it okay that I can mutate

280
00:19:51,862 --> 00:19:54,986
any object in my application.

281
00:19:55,168 --> 00:19:58,554
For instance, okay, I know you are not mutating your object,

282
00:19:58,672 --> 00:20:02,160
but maybe your colleague mutating it.

283
00:20:02,850 --> 00:20:07,342
Or maybe when you leave your project and one

284
00:20:07,396 --> 00:20:11,134
year later somebody will

285
00:20:11,172 --> 00:20:14,734
join your team who likes mutating objects,

286
00:20:14,782 --> 00:20:18,722
and they will probably mutate it and

287
00:20:18,776 --> 00:20:21,630
it is not okay, that animal is mutated.

288
00:20:21,710 --> 00:20:25,134
So if you use here

289
00:20:25,192 --> 00:20:26,310
an interface,

290
00:20:28,890 --> 00:20:32,374
typescript will disallow you mutating of this

291
00:20:32,412 --> 00:20:36,280
object. Because when you write interface, you write

292
00:20:36,890 --> 00:20:40,198
sealed. Okay, sealed.

293
00:20:40,294 --> 00:20:44,490
It is not typescript keyword, but typescript

294
00:20:44,830 --> 00:20:48,186
treats it in this way that this

295
00:20:48,288 --> 00:20:52,122
object can be extended, can't be changed.

296
00:20:52,186 --> 00:20:54,030
It is like interface.

297
00:20:55,810 --> 00:20:59,566
I would say this is very important because I

298
00:20:59,588 --> 00:21:03,570
have seen a lot of examples with mutating when people are using

299
00:21:03,640 --> 00:21:07,582
types, and believe me, it leads to some runtime

300
00:21:07,646 --> 00:21:11,826
errors or production bugs. So it

301
00:21:11,848 --> 00:21:16,022
is very easy to remember and very important

302
00:21:16,156 --> 00:21:17,320
to use.

303
00:21:19,450 --> 00:21:22,680
And what's also important,

304
00:21:23,050 --> 00:21:27,314
why this happens? Because interfaces are not indexed

305
00:21:27,362 --> 00:21:30,506
by the default. This is the difference between

306
00:21:30,608 --> 00:21:34,714
interfaces and types. Types are indexed, interfaces are

307
00:21:34,752 --> 00:21:37,580
not. Okay,

308
00:21:38,190 --> 00:21:42,602
let's proceed with our next section. It is recursive

309
00:21:42,666 --> 00:21:43,950
data structures.

310
00:21:47,170 --> 00:21:49,390
In previous typescript versions,

311
00:21:50,770 --> 00:21:55,090
you were not allowed to compute typescript

312
00:21:56,870 --> 00:22:01,026
range of numbers. You were allowed to create

313
00:22:01,208 --> 00:22:04,430
range for four t elements,

314
00:22:04,590 --> 00:22:07,460
something like that. Currently,

315
00:22:07,910 --> 00:22:12,142
after optimization of tail recursion

316
00:22:12,206 --> 00:22:15,878
in a typescript, you are allowed to create up to

317
00:22:16,044 --> 00:22:20,840
1000 numbers.

318
00:22:21,610 --> 00:22:25,354
It should be. Let's try nine.

319
00:22:25,392 --> 00:22:26,300
Nine, nine,

320
00:22:34,720 --> 00:22:36,060
small improvement.

321
00:22:38,400 --> 00:22:42,796
So as you see, you have a number range of

322
00:22:42,898 --> 00:22:46,752
100 digits. Why 100?

323
00:22:46,806 --> 00:22:48,530
Because we start from zero.

324
00:22:50,500 --> 00:22:53,824
Sorry, no,

325
00:22:53,862 --> 00:22:56,130
100, but almost 1000.

326
00:22:57,960 --> 00:23:01,284
Okay, this was just for testing. I will explain

327
00:23:01,402 --> 00:23:02,470
how it works.

328
00:23:06,120 --> 00:23:09,940
Sorry. Here we have a recursive utility

329
00:23:10,020 --> 00:23:14,164
type which expects us two arguments. One n corresponds

330
00:23:14,212 --> 00:23:18,312
to our count of numbers, and second

331
00:23:18,366 --> 00:23:23,380
one is result like our

332
00:23:23,470 --> 00:23:25,310
array of numbers.

333
00:23:27,200 --> 00:23:31,032
When we call it, we are checking whether our lens

334
00:23:31,096 --> 00:23:36,124
of our result length of this tuple extends

335
00:23:36,172 --> 00:23:39,360
our expected lens to be created.

336
00:23:39,700 --> 00:23:43,936
If yes, we will just return a union of all elements in

337
00:23:44,038 --> 00:23:48,176
array. Otherwise we will run compute

338
00:23:48,208 --> 00:23:52,352
digit range this utility type with same argument

339
00:23:52,416 --> 00:23:56,672
n and with extended

340
00:23:56,736 --> 00:23:59,960
result. So every time we will add to

341
00:24:00,030 --> 00:24:03,864
result results length. So it

342
00:24:03,902 --> 00:24:05,720
starts from empty array.

343
00:24:07,020 --> 00:24:10,392
Imagine that n is five. Let's start our

344
00:24:10,446 --> 00:24:13,336
first iteration. Result length is zero,

345
00:24:13,438 --> 00:24:16,572
extends n false. We will go here,

346
00:24:16,706 --> 00:24:19,916
and here we will add result,

347
00:24:20,018 --> 00:24:24,784
it is empty array, it will just get

348
00:24:24,822 --> 00:24:28,930
rid of it. And second, one result length is zero.

349
00:24:29,540 --> 00:24:33,132
However, it will be an array

350
00:24:33,196 --> 00:24:36,404
of one element. So next iteration will

351
00:24:36,442 --> 00:24:40,036
be result length will be one. This is how

352
00:24:40,058 --> 00:24:43,590
we increment. Okay,

353
00:24:45,480 --> 00:24:49,400
also very popular question, how to

354
00:24:49,470 --> 00:24:52,810
create repeated string which

355
00:24:53,420 --> 00:24:57,124
matches some pattern. For instance,

356
00:24:57,252 --> 00:25:00,760
we are not allowed to use reg x patterns in

357
00:25:00,830 --> 00:25:03,340
typescript template literals,

358
00:25:05,120 --> 00:25:08,716
however, and also we are not allowed to

359
00:25:08,738 --> 00:25:12,188
create some infinity string type

360
00:25:12,274 --> 00:25:14,320
with some repeated pattern.

361
00:25:15,620 --> 00:25:19,136
It would be nice to have it in typescript, but currently we

362
00:25:19,158 --> 00:25:20,130
don't have it.

363
00:25:23,540 --> 00:25:27,508
How we can make it works.

364
00:25:27,674 --> 00:25:31,700
For instance, we have some type coordinates.

365
00:25:33,320 --> 00:25:36,720
This type corresponds to number which are separated

366
00:25:36,800 --> 00:25:40,452
by comma, and the coordinate string

367
00:25:40,516 --> 00:25:44,152
is separated but by semicolon. I mean, this is

368
00:25:44,206 --> 00:25:45,290
our example,

369
00:25:54,880 --> 00:25:58,060
this is our type of coordinates. But what

370
00:25:58,130 --> 00:26:01,870
if I want to make it longer?

371
00:26:04,340 --> 00:26:08,290
You will get an and here, for instance, I expect

372
00:26:10,820 --> 00:26:14,668
this we are getting an error

373
00:26:14,764 --> 00:26:20,096
because it's obvious what

374
00:26:20,118 --> 00:26:24,244
we can do. We can recursively, we can

375
00:26:24,362 --> 00:26:28,660
apply this utility type like apply this algorithm.

376
00:26:29,980 --> 00:26:34,232
I don't know what is better to say algorithm or

377
00:26:34,366 --> 00:26:38,948
pattern. And we can recursively

378
00:26:39,124 --> 00:26:42,780
create up to 50 or

379
00:26:42,850 --> 00:26:46,572
100, I don't remember exactly up to 100

380
00:26:46,706 --> 00:26:50,440
unions of different sizes

381
00:26:50,520 --> 00:26:56,770
of coordinates. What I mean please.

382
00:26:57,300 --> 00:27:03,200
Here I have created compute coordinates with ten iterations,

383
00:27:06,280 --> 00:27:09,280
sorry, no iterations, but with ten elements.

384
00:27:09,440 --> 00:27:12,576
So this type allows

385
00:27:12,608 --> 00:27:16,550
me to use coordinate where I have only two numbers,

386
00:27:17,000 --> 00:27:21,496
then when I have four numbers, then when I have

387
00:27:21,678 --> 00:27:25,092
six numbers. So as you might have noticed,

388
00:27:25,156 --> 00:27:28,724
I don't have three numbers, five numbers, because it doesn't

389
00:27:28,772 --> 00:27:32,236
make sense because our coordinates should

390
00:27:32,258 --> 00:27:35,644
be atomic, so it should

391
00:27:35,682 --> 00:27:39,816
consist of two numbers which are separated by comma.

392
00:27:40,008 --> 00:27:43,150
How does it work? Works very similar,

393
00:27:44,500 --> 00:27:48,432
but it only differs how

394
00:27:48,486 --> 00:27:52,208
I compute the value which is pushed to our

395
00:27:52,294 --> 00:27:55,992
tuple. Here I'm using concat previous

396
00:27:56,156 --> 00:27:59,940
it just types last element of my

397
00:28:00,010 --> 00:28:03,652
result and concatenates it with new

398
00:28:03,706 --> 00:28:08,580
coordinates. So this is how each iteration coordinates

399
00:28:10,460 --> 00:28:12,890
made one coordinate more.

400
00:28:15,660 --> 00:28:19,480
Here you can find links to

401
00:28:19,550 --> 00:28:23,244
articles with more explanation because I understand that it

402
00:28:23,282 --> 00:28:29,004
might be hard to

403
00:28:29,042 --> 00:28:31,870
understand how it works only from this video.

404
00:28:32,880 --> 00:28:37,084
For instance, I prefer reading articles

405
00:28:37,132 --> 00:28:40,960
rather than watching video, but some people may prefer

406
00:28:41,300 --> 00:28:45,392
watch video. Okay, so once

407
00:28:45,446 --> 00:28:49,044
we have finished with this pattern, I believe we

408
00:28:49,082 --> 00:28:51,940
can proceed to hex validation.

409
00:28:53,720 --> 00:28:57,728
I will show you what I will do at the beginning,

410
00:28:57,824 --> 00:29:00,650
so you will be aware what I am talking about.

411
00:29:01,340 --> 00:29:05,048
I'm talking about a function which expects us

412
00:29:05,214 --> 00:29:08,756
some object where key is a caller

413
00:29:08,788 --> 00:29:12,284
name, but in this case it doesn't matter whether it is color name

414
00:29:12,322 --> 00:29:13,950
or not. No,

415
00:29:21,120 --> 00:29:24,664
and value should be a valid hex

416
00:29:24,792 --> 00:29:27,888
value. Valid hex value can

417
00:29:28,054 --> 00:29:32,464
consist of either three chars or

418
00:29:32,582 --> 00:29:34,080
six chars.

419
00:29:35,140 --> 00:29:39,428
Furthermore, these charts should

420
00:29:39,514 --> 00:29:43,910
match some pattern. Because you are not allowed to provide just

421
00:29:44,520 --> 00:29:48,116
six x, it will

422
00:29:48,138 --> 00:29:51,924
be an error. So let's

423
00:29:51,972 --> 00:29:54,730
start typing this function step by step.

424
00:29:57,660 --> 00:30:01,056
So first of all, I want to compute a range

425
00:30:01,108 --> 00:30:05,052
of numbers from zero to nine,

426
00:30:05,186 --> 00:30:08,652
which are this number. Please keep in mind that these

427
00:30:08,706 --> 00:30:13,516
numbers are only allowed in

428
00:30:13,538 --> 00:30:17,136
our hacks, but it also all number which you can

429
00:30:17,158 --> 00:30:20,320
use. You are not allowed to use more than that.

430
00:30:20,470 --> 00:30:24,924
So currently, as you might have noticed, I just wrapped

431
00:30:24,972 --> 00:30:28,020
this range in a template literal string,

432
00:30:28,600 --> 00:30:32,308
so each number is a string. Also,

433
00:30:32,474 --> 00:30:37,936
I'm allowed to use charts from a to f ABCDef,

434
00:30:38,128 --> 00:30:41,524
only six charts and they might be

435
00:30:41,562 --> 00:30:46,312
lowercased or uppercase it. So I just used

436
00:30:46,366 --> 00:30:49,560
the built in utility type I uppercase.

437
00:30:50,960 --> 00:30:54,124
So I have a union of my charts, lowercase it

438
00:30:54,162 --> 00:30:57,692
and uppercase it. And this is

439
00:30:57,746 --> 00:31:00,430
my final hex value.

440
00:31:00,880 --> 00:31:07,196
I mean not hex value, I mean all charts

441
00:31:07,308 --> 00:31:10,624
or all digits which are allowed to use

442
00:31:10,662 --> 00:31:13,968
in our hex string. It is from zero to nine

443
00:31:14,054 --> 00:31:17,552
and from a to f, uppercase and lowercase.

444
00:31:17,696 --> 00:31:22,916
So imagine that you

445
00:31:22,938 --> 00:31:26,320
need to write a function in Javascript

446
00:31:26,400 --> 00:31:28,070
which will validate it.

447
00:31:30,540 --> 00:31:35,348
Please forget for a moment. For bit validation

448
00:31:35,524 --> 00:31:38,804
for some bit manipulations, let's just stick

449
00:31:38,852 --> 00:31:41,710
with raw string. So currently,

450
00:31:42,480 --> 00:31:46,732
since our hex value can

451
00:31:46,786 --> 00:31:49,580
be either three of six elements,

452
00:31:50,640 --> 00:31:54,444
what we need, we need to check whether string is

453
00:31:54,482 --> 00:31:57,120
whether string lens is allowed.

454
00:31:57,700 --> 00:32:01,420
In order to do that, we need a utility

455
00:32:01,500 --> 00:32:05,328
type which will return us

456
00:32:05,414 --> 00:32:08,916
a string glance. This is

457
00:32:09,018 --> 00:32:13,060
why I have created this simple utility type

458
00:32:13,130 --> 00:32:17,392
recursive utility type which iterates

459
00:32:17,536 --> 00:32:20,680
through each char and every time

460
00:32:20,830 --> 00:32:24,216
adds this chart to

461
00:32:24,318 --> 00:32:27,896
accumulator. So at the end we have a

462
00:32:27,918 --> 00:32:31,408
tuple which lens

463
00:32:31,524 --> 00:32:35,212
is equal to string lens. So in our

464
00:32:35,266 --> 00:32:39,228
case this will be three or

465
00:32:39,314 --> 00:32:42,990
four. Okay,

466
00:32:44,900 --> 00:32:48,770
the next step we should validate whether

467
00:32:49,140 --> 00:32:51,810
it is three or six.

468
00:32:53,060 --> 00:32:56,332
Let's write very

469
00:32:56,486 --> 00:33:00,144
simple validate lens utility type which expects

470
00:33:00,192 --> 00:33:04,048
us our string and our expected lens.

471
00:33:04,224 --> 00:33:08,740
And here we are checking whether string lens of provided strings

472
00:33:09,340 --> 00:33:12,500
extends lens. We will return string.

473
00:33:12,580 --> 00:33:16,056
Please keep in mind that always when in this case

474
00:33:16,158 --> 00:33:19,080
when it is OC,

475
00:33:20,860 --> 00:33:24,664
we are returning string. Not truer or false,

476
00:33:24,712 --> 00:33:28,316
just string. It is important to

477
00:33:28,338 --> 00:33:32,860
be in mind, otherwise we are returning never.

478
00:33:33,010 --> 00:33:36,860
So here if string is ABC

479
00:33:36,940 --> 00:33:40,770
and expected lens is two, we will get a never.

480
00:33:41,380 --> 00:33:45,328
And here we are getting ABC because expected lens is

481
00:33:45,414 --> 00:33:47,780
three and we have three charts.

482
00:33:48,920 --> 00:33:52,710
Okay, I hope it's easy to understand.

483
00:33:55,880 --> 00:33:59,700
Let's proceed. Here we have validate

484
00:33:59,780 --> 00:34:03,800
hacks what this utility types

485
00:34:04,140 --> 00:34:08,100
do. It iterates through string

486
00:34:08,180 --> 00:34:10,170
like through each char.

487
00:34:11,040 --> 00:34:15,612
Here how we are getting each

488
00:34:15,666 --> 00:34:19,340
char, and here we have a rest charge. So every time we pick

489
00:34:19,410 --> 00:34:23,180
one char and then

490
00:34:23,250 --> 00:34:28,492
we are checking whether this char extends

491
00:34:28,556 --> 00:34:32,336
our hex value extends our allowed hex value

492
00:34:32,438 --> 00:34:35,264
from zero to nine and from a to f,

493
00:34:35,302 --> 00:34:38,950
uppercase it and lowercase if yes,

494
00:34:40,040 --> 00:34:43,300
we will add this

495
00:34:43,370 --> 00:34:48,420
allowed char to our cache here.

496
00:34:48,570 --> 00:34:50,950
Otherwise it will be never.

497
00:34:53,160 --> 00:34:56,388
So here you can check how it works.

498
00:34:56,474 --> 00:35:00,176
ABC each char is allowed

499
00:35:00,288 --> 00:35:02,940
so it returns are ABC.

500
00:35:03,440 --> 00:35:07,896
Second one, HR is not allowed because it's

501
00:35:07,928 --> 00:35:11,070
just not allowed. Okay,

502
00:35:11,440 --> 00:35:14,690
what are we doing next? It is very important to

503
00:35:15,460 --> 00:35:19,040
understand how it works because currently what we are doing,

504
00:35:19,110 --> 00:35:22,544
we are just using all our

505
00:35:22,742 --> 00:35:26,028
validators and we are making

506
00:35:26,134 --> 00:35:30,116
intersection of them. Why we are making intersection because

507
00:35:30,218 --> 00:35:34,228
each validator returns us

508
00:35:34,314 --> 00:35:38,420
either string, provided string

509
00:35:38,780 --> 00:35:43,080
or never. So in case if it returns

510
00:35:44,300 --> 00:35:48,420
string like provided string

511
00:35:48,500 --> 00:35:52,572
and intersection of equal strings will

512
00:35:52,626 --> 00:35:54,760
just produce this string.

513
00:35:54,920 --> 00:35:59,150
Otherwise it will produce never.

514
00:36:00,000 --> 00:36:03,150
So you can have, I don't know,

515
00:36:03,540 --> 00:36:07,516
20 validators where each validator returns

516
00:36:07,548 --> 00:36:11,504
you a string, either string or never, and just apply these

517
00:36:11,542 --> 00:36:13,490
validators like that.

518
00:36:13,860 --> 00:36:17,430
Validate something else.

519
00:36:18,280 --> 00:36:21,892
It will be easy to read, easy to understand, no more

520
00:36:21,946 --> 00:36:26,224
cryptic types. So here imagine

521
00:36:26,272 --> 00:36:30,164
you don't know typescript validate hex validate

522
00:36:30,212 --> 00:36:34,250
lens. At least we are aware that here

523
00:36:34,860 --> 00:36:38,180
we are doing hex validation and lens validation.

524
00:36:38,260 --> 00:36:42,264
Here I am using union because string lens

525
00:36:42,392 --> 00:36:44,190
might be six or three.

526
00:36:46,240 --> 00:36:50,232
Second one is just adding this fancy

527
00:36:50,376 --> 00:36:53,870
hash symbol to each property,

528
00:36:54,820 --> 00:36:57,570
and then this is how this function works.

529
00:36:59,060 --> 00:37:02,316
I use type inference or on function arguments.

530
00:37:02,348 --> 00:37:05,760
So I have created three generics.

531
00:37:07,800 --> 00:37:11,460
One generic for key object key,

532
00:37:11,530 --> 00:37:15,636
second one for object value, and third one is

533
00:37:15,658 --> 00:37:18,764
our color map. So color map

534
00:37:18,832 --> 00:37:21,690
should correspond to this object.

535
00:37:22,860 --> 00:37:27,080
And this is wrapped into my validator

536
00:37:27,900 --> 00:37:31,050
and this is how it works.

537
00:37:32,480 --> 00:37:35,836
So here you see that if I

538
00:37:35,858 --> 00:37:38,510
use invalid hex value,

539
00:37:38,960 --> 00:37:42,924
it will return me an error. Otherwise it works

540
00:37:43,042 --> 00:37:46,204
as expected. So one

541
00:37:46,242 --> 00:37:49,470
more thing that we need to use

542
00:37:50,160 --> 00:37:53,944
extra function for type inference.

543
00:37:53,992 --> 00:37:57,670
We are not allowed to use just alone object.

544
00:38:00,200 --> 00:38:03,764
We need to use this function despite the

545
00:38:03,802 --> 00:38:07,792
fact that this function do nothing. So it just returns

546
00:38:07,856 --> 00:38:09,220
us dictionary.

547
00:38:11,880 --> 00:38:15,172
That's it. Thank you

548
00:38:15,226 --> 00:38:18,000
very much for your attention. See ya,

