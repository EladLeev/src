1
00:00:25,410 --> 00:00:28,806
You. Hello. My name

2
00:00:28,828 --> 00:00:32,198
is Yehonathan Sharvit and I'm really glad to be here

3
00:00:32,284 --> 00:00:36,466
at Conf 42 for my talk about data oriented

4
00:00:36,498 --> 00:00:39,702
programming in Java. The purpose of this talk

5
00:00:39,836 --> 00:00:43,746
is to give you a couple of insights that hopefully

6
00:00:43,858 --> 00:00:47,414
are going to help you to liberate yourself at least

7
00:00:47,452 --> 00:00:51,338
a bit from the complexity of of objects.

8
00:00:51,434 --> 00:00:54,926
A couple of words about myself. I have been a

9
00:00:54,948 --> 00:00:59,022
developer since 2001, first in C,

10
00:00:59,076 --> 00:01:03,006
C, then in Java, and also

11
00:01:03,108 --> 00:01:07,110
JavaScript, Ruby and closure,

12
00:01:07,210 --> 00:01:10,846
and I'm the author of a book named

13
00:01:10,958 --> 00:01:14,690
data oriented programming and in this talk

14
00:01:14,760 --> 00:01:18,438
I'm going to share a couple of insights from the book

15
00:01:18,524 --> 00:01:21,554
and how to apply the principles of data oriented

16
00:01:21,602 --> 00:01:25,062
programming in Java. If you find my talk

17
00:01:25,116 --> 00:01:29,138
interesting, you might want to purchase the book and I'll give you a

18
00:01:29,164 --> 00:01:32,410
coupon for a discount at the end of the talk.

19
00:01:32,480 --> 00:01:36,186
And you can follow me either on Twitter or on my

20
00:01:36,208 --> 00:01:39,974
blog at blog clips tech so what

21
00:01:40,032 --> 00:01:43,774
is dataoriented programming? Programming is

22
00:01:43,892 --> 00:01:47,370
a programming paradigm aimed at reducing

23
00:01:47,530 --> 00:01:51,278
the system complexity by treating data as

24
00:01:51,364 --> 00:01:55,598
a first class citizen. What do we mean by complexity?

25
00:01:55,694 --> 00:01:59,646
If you look for complexity in the dictionary

26
00:01:59,758 --> 00:02:03,182
or in Wikipedia, you will find first the definition

27
00:02:03,246 --> 00:02:06,386
of computational complexity,

28
00:02:06,498 --> 00:02:10,114
which is the amount of resources, machine resources

29
00:02:10,162 --> 00:02:14,370
like cpu or memory that are required

30
00:02:14,450 --> 00:02:18,598
to run a program. But there is another meaning of complexity,

31
00:02:18,694 --> 00:02:22,426
which is the system complexity. And the system complexity is the

32
00:02:22,448 --> 00:02:26,394
amount of human brain resources required to

33
00:02:26,432 --> 00:02:30,186
understand a system. So computational complexity is the

34
00:02:30,208 --> 00:02:34,014
time it takes to run a program, and system complexity is the

35
00:02:34,052 --> 00:02:37,086
time it takes to understand a program.

36
00:02:37,188 --> 00:02:40,330
And data. Data dataoriented programming

37
00:02:40,410 --> 00:02:44,578
the system complexity. In other words, when a system

38
00:02:44,664 --> 00:02:48,638
is written according to data oriented programming principles,

39
00:02:48,734 --> 00:02:51,906
the system is easier to understand,

40
00:02:52,088 --> 00:02:55,450
to maintain, or to add new features.

41
00:02:55,550 --> 00:02:59,510
So let's ask ourselves, ourselves, what usually

42
00:02:59,580 --> 00:03:02,934
makes a system complex? In my book, and in this talk,

43
00:03:02,972 --> 00:03:06,454
we are going to take a classic example. Imagine you

44
00:03:06,492 --> 00:03:09,914
need to design and implement a

45
00:03:09,952 --> 00:03:13,658
library management system. Disciplined object

46
00:03:13,744 --> 00:03:17,194
dataoriented developer so the first thing

47
00:03:17,232 --> 00:03:21,082
you do is to think about the design, the classes,

48
00:03:21,146 --> 00:03:24,190
the objects, and the relationships between

49
00:03:24,340 --> 00:03:27,774
the classes of your system. And you

50
00:03:27,812 --> 00:03:31,166
might come up with a design like the

51
00:03:31,188 --> 00:03:34,974
one on the screen where the entities, the main

52
00:03:35,012 --> 00:03:39,130
classes are library. And the library has a catalog

53
00:03:39,290 --> 00:03:42,794
and user management. And in the catalog

54
00:03:42,842 --> 00:03:46,518
we have books and authors and book

55
00:03:46,604 --> 00:03:49,846
as book items. And in the user side

56
00:03:49,948 --> 00:03:53,762
we have different kinds of users. We have librarians

57
00:03:53,826 --> 00:03:57,794
that can add books to the library, and we have members

58
00:03:57,932 --> 00:04:02,522
that can borrow books from the library, and members have

59
00:04:02,656 --> 00:04:06,630
book lendings, and book lendings belong to book items.

60
00:04:06,710 --> 00:04:10,474
And you will probably come up with a design similar to the one

61
00:04:10,512 --> 00:04:14,138
that is on the screen right now. If you are an experienced

62
00:04:14,234 --> 00:04:17,518
Java developer, you are going probably to use a

63
00:04:17,524 --> 00:04:21,070
couple of smart design patterns that might make

64
00:04:21,140 --> 00:04:23,502
the design a bit simpler,

65
00:04:23,646 --> 00:04:27,074
smarter, whatever. But my point here is

66
00:04:27,112 --> 00:04:30,626
that the system here is complex in the sense that

67
00:04:30,648 --> 00:04:34,002
it's hard to understand. And if you take

68
00:04:34,056 --> 00:04:37,462
further look at this UML diagram, you might find

69
00:04:37,516 --> 00:04:41,138
that the sources of the complexity

70
00:04:41,234 --> 00:04:45,030
of the system is that we have nodes in the system

71
00:04:45,100 --> 00:04:48,858
in the graph with many edges. Look at the library and class,

72
00:04:48,944 --> 00:04:54,394
it is connected to 123456

73
00:04:54,512 --> 00:04:58,330
classes. It's a big number, six in terms of

74
00:04:58,400 --> 00:05:01,978
relationships between nodes. Another thing that makes the system complex

75
00:05:02,074 --> 00:05:05,818
is that we have many kinds of arrows

76
00:05:05,914 --> 00:05:09,738
of relationships between classes. We have association

77
00:05:09,914 --> 00:05:13,682
like for example between book

78
00:05:13,736 --> 00:05:17,870
and author. We have composition between catalog and book, we have inheritance

79
00:05:17,950 --> 00:05:22,062
between librarian and user, and also between member and user.

80
00:05:22,126 --> 00:05:25,922
And we have usage relationship between, let's say librarian

81
00:05:25,986 --> 00:05:29,414
and book item. So it's a burden on

82
00:05:29,452 --> 00:05:32,850
our mind. And this is what I mean by a complex

83
00:05:32,930 --> 00:05:36,422
system. It takes time and energy and

84
00:05:36,476 --> 00:05:40,218
efforts to understand a classic object

85
00:05:40,384 --> 00:05:46,666
oriented system. So the first thing that dataoriented

86
00:05:46,688 --> 00:05:50,362
programming is to separate between code and data.

87
00:05:50,496 --> 00:05:54,538
Usually in object oriented programming and in Java,

88
00:05:54,634 --> 00:05:58,538
we tend to encapsulate data inside classes

89
00:05:58,634 --> 00:06:02,314
and to mix together data and behavior inside

90
00:06:02,452 --> 00:06:06,286
classes that provides methods that manipulate

91
00:06:06,318 --> 00:06:10,466
or modify the state of the object. And look at what

92
00:06:10,568 --> 00:06:14,146
happens if we simply split each class

93
00:06:14,248 --> 00:06:18,358
of our system into two classes, where one class is

94
00:06:18,444 --> 00:06:22,434
responsible for the code, the behavior, and the other class is responsible

95
00:06:22,482 --> 00:06:26,274
for the data. For example, we take the library class that mixes

96
00:06:26,322 --> 00:06:30,038
data and code together, and we split it to a library code class

97
00:06:30,124 --> 00:06:33,690
and a library data class. And the same we take the catalog class

98
00:06:33,760 --> 00:06:37,194
and we split it between catalog code and catalog data, and so

99
00:06:37,232 --> 00:06:40,510
forth and so forth. And what happens in terms of system

100
00:06:40,580 --> 00:06:44,602
complexity is that instead of one systems

101
00:06:44,666 --> 00:06:49,050
with many relationships between the code, we get two disjoint

102
00:06:49,130 --> 00:06:53,278
systems with much simpler relationships

103
00:06:53,374 --> 00:06:56,594
between the nodes or the classes of the system.

104
00:06:56,712 --> 00:07:00,050
And this is really a great benefits

105
00:07:00,200 --> 00:07:03,582
for our mind. It makes the system much easier

106
00:07:03,646 --> 00:07:07,678
to understand, to resign about, and to maintain.

107
00:07:07,774 --> 00:07:11,478
And the reason is that we have separation of concern. We have code

108
00:07:11,564 --> 00:07:15,650
on one hand and data on the other hand, and also we have constraints

109
00:07:15,730 --> 00:07:19,062
on the code diagram on the left. All the method in our

110
00:07:19,116 --> 00:07:22,358
classes on the left are going to be stateless, and we're

111
00:07:22,374 --> 00:07:25,962
going to see in a moment. And the relationship between code

112
00:07:26,016 --> 00:07:28,742
classes is only usage relationships.

113
00:07:28,806 --> 00:07:32,606
And the same on the data diagram we have another set

114
00:07:32,708 --> 00:07:36,382
of constraints, which is that the Orna relationships between

115
00:07:36,436 --> 00:07:40,586
data classes are either association or composition.

116
00:07:40,698 --> 00:07:44,542
So putting constraints on our diagram tend

117
00:07:44,606 --> 00:07:48,142
to make the overall system less complex,

118
00:07:48,286 --> 00:07:51,954
easier to understand. So instead of the

119
00:07:51,992 --> 00:07:55,414
big mess or the complex system that we

120
00:07:55,452 --> 00:07:59,494
add on the left where code is mixed with data, we get a

121
00:07:59,532 --> 00:08:04,210
simpler system made of two disjoint systems.

122
00:08:04,290 --> 00:08:08,202
And this is huge benefit for our brain. Let's see now

123
00:08:08,256 --> 00:08:12,054
practically how we do that in Java,

124
00:08:12,102 --> 00:08:15,226
how we separate between code and data in

125
00:08:15,248 --> 00:08:19,046
Java, actually it's quite simple. We put data on classes

126
00:08:19,238 --> 00:08:22,762
that have only members, of course, getters and

127
00:08:22,816 --> 00:08:26,590
setters, for example. And also data will have a first name

128
00:08:26,660 --> 00:08:29,914
and a last name. That's it. No methods beyond

129
00:08:30,042 --> 00:08:33,246
setters and getters. And for the code we have classes

130
00:08:33,278 --> 00:08:36,590
like author code with only static methods,

131
00:08:36,670 --> 00:08:40,146
no state, no data. The data that is to

132
00:08:40,168 --> 00:08:44,142
be processed by the method is passed as an explicit

133
00:08:44,206 --> 00:08:48,246
argument to the method. So for example, if we have

134
00:08:48,428 --> 00:08:52,514
a data object representing Isaac Asimov

135
00:08:52,562 --> 00:08:56,454
and we want to calculate the full name of

136
00:08:56,492 --> 00:09:00,854
this author, instead of what you are probably used to Asimov

137
00:09:00,982 --> 00:09:04,502
full name, we call author codeful name, which is a static

138
00:09:04,566 --> 00:09:07,606
method, and we pass to it as an argument.

139
00:09:07,718 --> 00:09:11,214
The object with the data that we want to process and it

140
00:09:11,252 --> 00:09:14,590
returns a stream is like Asimov. So that's how

141
00:09:14,660 --> 00:09:18,606
we separate between code and data. In Java we

142
00:09:18,628 --> 00:09:22,750
have data classes with member only and code classes with

143
00:09:22,820 --> 00:09:26,414
tactic methods only. So that's the first benefit that

144
00:09:26,452 --> 00:09:30,178
we gain from data oriented programming. It makes the system

145
00:09:30,344 --> 00:09:33,954
easier to understand. Now we are going to move forward and

146
00:09:33,992 --> 00:09:37,574
see how we can make the code easier to understand.

147
00:09:37,692 --> 00:09:41,190
And for that we are going to ask ourselves what usually makes

148
00:09:41,260 --> 00:09:45,126
code hard to understand? The first thing that makes code hard

149
00:09:45,148 --> 00:09:49,146
to understand in Java is that when

150
00:09:49,168 --> 00:09:52,374
we pass an object or an argument

151
00:09:52,502 --> 00:09:56,362
to a method, we have to ask ourselves whether

152
00:09:56,416 --> 00:09:59,418
the object is passed by reference or by value.

153
00:09:59,504 --> 00:10:03,646
And it's difficult to answer clearly to

154
00:10:03,668 --> 00:10:07,562
this question. And usually the answer that we get in Java

155
00:10:07,626 --> 00:10:11,226
tutorials is that in Java object references

156
00:10:11,338 --> 00:10:14,718
are passed by value, which is really confusing.

157
00:10:14,814 --> 00:10:17,954
Object references are passed by value.

158
00:10:18,072 --> 00:10:21,714
And to show you an example of

159
00:10:21,752 --> 00:10:25,698
this complexity, let's take again our example

160
00:10:25,784 --> 00:10:29,302
with Isaac Asimov as a data object and

161
00:10:29,356 --> 00:10:33,350
see what kind of complexity we have usually

162
00:10:33,420 --> 00:10:37,446
in object dataoriented programming. Let's say that we have

163
00:10:37,468 --> 00:10:41,594
a method in our author code class, a static method that

164
00:10:41,712 --> 00:10:45,126
transform the last name of an author

165
00:10:45,238 --> 00:10:48,534
into uppercase. So here how we call this method,

166
00:10:48,582 --> 00:10:51,910
we have Asimov, and the method returns another

167
00:10:52,080 --> 00:10:55,290
data object where Asimov is uppercase.

168
00:10:55,370 --> 00:10:58,842
So the last name of Asimov number two is Asimov uppercase.

169
00:10:58,906 --> 00:11:02,790
Now the question is what happened to the first Asimov? Did the method

170
00:11:02,890 --> 00:11:06,546
mutated the data object or not? And by looking at

171
00:11:06,568 --> 00:11:10,034
the code you cannot really know. It depends on

172
00:11:10,072 --> 00:11:14,142
the implementation of this static method to upper

173
00:11:14,206 --> 00:11:17,758
last name. If the implementation mutates the object,

174
00:11:17,864 --> 00:11:21,878
the object that it receives, the response, the last

175
00:11:21,964 --> 00:11:25,446
name of the first Asimov is going to be uppercase. And if it's not the

176
00:11:25,468 --> 00:11:28,854
case it's going to be lowercase as it was passed.

177
00:11:28,902 --> 00:11:34,666
And the reason for this confusion is that when we pass an

178
00:11:34,688 --> 00:11:39,078
object to a method, we pass a reference to the object and the method

179
00:11:39,254 --> 00:11:42,726
now has access to the object. And if the method

180
00:11:42,758 --> 00:11:45,586
called the setters of the object that we passed,

181
00:11:45,638 --> 00:11:49,214
then it's going to mutate our object. And the way we

182
00:11:49,252 --> 00:11:53,006
usually protect ourselves, or one way to protect ourselves is to

183
00:11:53,028 --> 00:11:56,534
copy the object before passing it to the method. We call it defensive

184
00:11:56,602 --> 00:12:00,546
copy. And this is one thing that makes the code hard to understand or

185
00:12:00,568 --> 00:12:04,334
to write. Every time we call a method we need to ask ourselves

186
00:12:04,462 --> 00:12:07,922
is the method going to change my data or not? And it's

187
00:12:07,986 --> 00:12:11,366
another cause of complexity. Another thing is in

188
00:12:11,388 --> 00:12:15,126
a multistreaded system, in a multithreaded Java program,

189
00:12:15,228 --> 00:12:19,478
we need to be careful when we pass object

190
00:12:19,564 --> 00:12:23,450
references to method. And let's take a look at this simple

191
00:12:23,520 --> 00:12:27,162
example. Let's say we have a member data and the member could be either

192
00:12:27,216 --> 00:12:30,570
blocked or not blocked. And when a member is blocked,

193
00:12:30,910 --> 00:12:34,234
the member shouldn't be allowed to borrow books anymore.

194
00:12:34,282 --> 00:12:38,286
So a naive implementation of the borrow function in the member code could

195
00:12:38,308 --> 00:12:41,774
be let's check if the member is blocked here by calling

196
00:12:41,812 --> 00:12:45,326
the is blocked method of the data object of

197
00:12:45,348 --> 00:12:49,026
the data member object. And if the member is not blocked then we are

198
00:12:49,048 --> 00:12:52,546
going to allow the member to borrow the book here to

199
00:12:52,568 --> 00:12:56,242
print to the console. The book is yours. Can you see why this code is

200
00:12:56,296 --> 00:12:59,554
problematic? Can you see why this code is not

201
00:12:59,592 --> 00:13:02,950
treats safe? And the reason is that between

202
00:13:03,100 --> 00:13:06,774
the line that checks if the member is blocked and the line

203
00:13:06,892 --> 00:13:10,934
that does the book borrowing, there could be a context switch

204
00:13:10,982 --> 00:13:14,410
and in another thread the member could become blocked.

205
00:13:14,750 --> 00:13:18,170
And that's definitely a source of complexity.

206
00:13:18,590 --> 00:13:22,458
And how do we protect from that? By adding locking mechanism.

207
00:13:22,554 --> 00:13:25,966
And when we add lock mechanisms to our code,

208
00:13:26,068 --> 00:13:30,350
it definitely makes the code hard to understand and

209
00:13:30,420 --> 00:13:34,354
we might get into deadlocks. And we need to think carefully how to

210
00:13:34,472 --> 00:13:38,206
leverage the lock mechanism so that we make sure we don't have any deadlock

211
00:13:38,238 --> 00:13:42,094
and also lock mechanisms also have a negative impact

212
00:13:42,142 --> 00:13:46,066
on the performance. So for that dataoriented programming,

213
00:13:46,088 --> 00:13:49,494
very simple solution, do not mutate data. If you

214
00:13:49,532 --> 00:13:53,510
treat the data as a value, it will never change. And if

215
00:13:53,580 --> 00:13:57,062
data is not going to change, we won't have any problem.

216
00:13:57,196 --> 00:14:00,634
When we pass data to a method, no matter if

217
00:14:00,672 --> 00:14:04,006
we are in a single threaded environment or in a multi threaded

218
00:14:04,038 --> 00:14:08,122
environment, we have the guarantee that the

219
00:14:08,176 --> 00:14:11,770
data is not going to change. And that's a huge

220
00:14:11,840 --> 00:14:15,178
benefit in terms of complexity, simplicity.

221
00:14:15,274 --> 00:14:18,542
It makes the code, the code much,

222
00:14:18,596 --> 00:14:22,126
much easier to understand. You can look around and you

223
00:14:22,148 --> 00:14:25,474
will find many great articles that explain what are

224
00:14:25,512 --> 00:14:29,074
the benefits of immutable data in Java. And the

225
00:14:29,112 --> 00:14:32,722
more important ones are that when you deal with immutable data,

226
00:14:32,776 --> 00:14:36,418
you are inherently threat safe and you have no side effects.

227
00:14:36,514 --> 00:14:40,194
Now the question is how to represent

228
00:14:40,242 --> 00:14:43,574
immutable data in Java. And we have at least

229
00:14:43,612 --> 00:14:47,246
two options here. And as you probably have noticed,

230
00:14:47,378 --> 00:14:51,094
any problem in Java could be solved with Java annotations.

231
00:14:51,222 --> 00:14:54,982
And this is how the project Lumbook proposes

232
00:14:55,046 --> 00:14:59,562
to represent immutable data, simply by adding a

233
00:14:59,696 --> 00:15:03,600
value annotation to a class. And when we add

234
00:15:04,050 --> 00:15:08,186
value annotation to a class, what we get from Project Lamb book is auto

235
00:15:08,218 --> 00:15:12,234
generation of public constructor, immutable private fields,

236
00:15:12,362 --> 00:15:15,998
getters, setters, two string hash code and equal.

237
00:15:16,094 --> 00:15:20,238
And we are guaranteed that the member fields

238
00:15:20,254 --> 00:15:24,702
are not going to change because they are marked as immutable

239
00:15:24,846 --> 00:15:28,098
by the code that is auto generated.

240
00:15:28,194 --> 00:15:32,034
Another option that came up recently in Java

241
00:15:32,082 --> 00:15:35,734
and actually is available only in Java 14. So it might

242
00:15:35,772 --> 00:15:39,382
take a couple of months or years until it's

243
00:15:39,446 --> 00:15:42,954
adopted in production. But I think that's an interesting one,

244
00:15:43,072 --> 00:15:47,014
is that since Java 14 you have data classes

245
00:15:47,062 --> 00:15:50,694
or data record with native implementation

246
00:15:50,822 --> 00:15:54,126
in the JVM. And I think that's great

247
00:15:54,228 --> 00:15:57,790
because you don't need to rely on third party libraries and

248
00:15:57,860 --> 00:16:01,790
auto generation of code. You have a native implementation of,

249
00:16:01,860 --> 00:16:05,534
again, constructor, immutable private field, getter setters,

250
00:16:05,582 --> 00:16:09,646
two string hash code and equal, and the guarantee that the data cannot

251
00:16:09,758 --> 00:16:13,058
change. And if you apply this

252
00:16:13,144 --> 00:16:16,866
second principles from data oriented programming about dealing

253
00:16:16,898 --> 00:16:20,614
with immutable data only, the benefits that you gain is

254
00:16:20,652 --> 00:16:24,566
that no mutations, no surprises, no need to

255
00:16:24,668 --> 00:16:27,938
defense copy against possible mutation

256
00:16:28,034 --> 00:16:31,762
or possible and

257
00:16:31,836 --> 00:16:35,766
invalid state of your data. And the code is inherently threat

258
00:16:35,798 --> 00:16:39,638
safe, no race conditions, you don't need locks,

259
00:16:39,734 --> 00:16:44,186
any lock mechanism, and the code is definitely easier

260
00:16:44,298 --> 00:16:47,774
to understand, to maintain, to resell about,

261
00:16:47,892 --> 00:16:51,146
and it makes our systems simpler.

262
00:16:51,258 --> 00:16:55,198
So before we wrap up this presentation,

263
00:16:55,374 --> 00:16:58,754
let me mention other topics that I'm addressing in the

264
00:16:58,792 --> 00:17:02,354
book, and that makes the

265
00:17:02,392 --> 00:17:05,502
systems that we build in Java even simpler.

266
00:17:05,566 --> 00:17:09,586
In the book you will learn how to leverage efficient

267
00:17:09,698 --> 00:17:13,842
immutable collections, or sometimes we call them efficient persistent

268
00:17:13,906 --> 00:17:17,334
collections, so that even when you have a huge collection of

269
00:17:17,372 --> 00:17:20,666
data, you can create new

270
00:17:20,688 --> 00:17:24,314
version of it without having to deeply copy all

271
00:17:24,352 --> 00:17:27,786
the data before you create a new version of it

272
00:17:27,808 --> 00:17:31,694
with a slight modification, you will learn how to represent more and

273
00:17:31,732 --> 00:17:35,354
more data using maps,

274
00:17:35,482 --> 00:17:39,146
and it will teach you how to manipulate

275
00:17:39,178 --> 00:17:42,886
data with general purpose functions like map, filter,

276
00:17:43,018 --> 00:17:46,766
reduce, group by merge, et cetera,

277
00:17:46,798 --> 00:17:50,402
et cetera. You will learn how to achieve polymorphism without

278
00:17:50,536 --> 00:17:54,030
inheritance, without the big class hierarchy.

279
00:17:54,110 --> 00:17:57,766
There are other ways to achieve polymorphism. You will learn also in the

280
00:17:57,788 --> 00:18:02,006
book how to manage the application state when you represent the whole state

281
00:18:02,108 --> 00:18:06,354
of the system as immutable data, and to get highly scalable concurrent

282
00:18:06,402 --> 00:18:10,070
systems with optimistic locking instead of locking

283
00:18:10,150 --> 00:18:13,594
mechanism like mutexes. You will learn also how

284
00:18:13,632 --> 00:18:17,050
to get a flexible access to your database to give you

285
00:18:17,120 --> 00:18:20,558
a lot of freedom and flexibility when retrieving and

286
00:18:20,564 --> 00:18:24,234
manipulating data that you fetch from the database

287
00:18:24,282 --> 00:18:28,046
and that you want to send over the wire, let's say

288
00:18:28,148 --> 00:18:31,918
using JSON serialization. So that's the book.

289
00:18:32,004 --> 00:18:35,822
And let me leave you with this diagram

290
00:18:35,886 --> 00:18:39,890
with this mind map that summarizes the main principles of

291
00:18:39,960 --> 00:18:43,714
data dataoriented programming separate between code

292
00:18:43,752 --> 00:18:47,846
and data. The code is written with static methods only.

293
00:18:47,948 --> 00:18:51,574
It's on the green here. Never or

294
00:18:51,612 --> 00:18:54,774
avoid as most as you can instant methods and

295
00:18:54,812 --> 00:18:58,410
the data is represented with immutable data,

296
00:18:58,480 --> 00:19:02,474
either with records that are available in Java since

297
00:19:02,512 --> 00:19:05,846
Java 14, or with third party libraries

298
00:19:05,878 --> 00:19:10,370
like Project Lombok that provides smart Java

299
00:19:10,390 --> 00:19:14,046
annotation like valued that generates all the code that

300
00:19:14,068 --> 00:19:17,914
is necessary to make sure that your data classes are immutable.

301
00:19:18,042 --> 00:19:21,280
So I hope that I motivated you to

302
00:19:22,130 --> 00:19:26,162
take a deeper look at data oriented programming and how you can

303
00:19:26,216 --> 00:19:29,746
apply it in Java to make and I'm quite sure that it

304
00:19:29,768 --> 00:19:32,542
will make your system less complex.

305
00:19:32,686 --> 00:19:36,242
And now come the question, what are you going to do with

306
00:19:36,296 --> 00:19:40,182
all the free brain cells that are going to be available when

307
00:19:40,236 --> 00:19:44,166
you move from classic object dataoriented programming

308
00:19:44,348 --> 00:19:47,758
dataoriented programming please take a look at the book. You can scan

309
00:19:47,794 --> 00:19:52,266
the QR code to be redirected to the book@manning.com

310
00:19:52,368 --> 00:19:55,910
and you can enjoy a 50% discount

311
00:19:55,990 --> 00:19:59,146
with the coupon that appears here on

312
00:19:59,168 --> 00:20:02,330
the screen. If you are listening from a podcast,

313
00:20:03,550 --> 00:20:06,990
the coupon is ML Sharvit two,

314
00:20:07,060 --> 00:20:11,150
Mlsharvit two,

315
00:20:11,300 --> 00:20:15,534
and if you Google data in the programming. You will get a link to

316
00:20:15,732 --> 00:20:19,166
the web page of the book. It was a really pleasure to be

317
00:20:19,188 --> 00:20:24,494
here at Conf 42. Thank you for having me. Enjoy the

318
00:20:24,532 --> 00:20:28,166
insight coming from data oriented programming and apply

319
00:20:28,348 --> 00:20:30,850
them with fun to your Java programs.

