1
00:00:20,410 --> 00:00:25,150
Hi, welcome to this comparison of data Space and shuttlers.

2
00:00:26,410 --> 00:00:29,718
They are both platforms for

3
00:00:29,804 --> 00:00:32,950
development and deployment of cloud

4
00:00:33,020 --> 00:00:36,870
applications, and they both support rust.

5
00:00:37,470 --> 00:00:41,638
You can also see the content of these slides

6
00:00:41,814 --> 00:00:45,260
on GitHub pages, or you can clone it

7
00:00:45,710 --> 00:00:49,354
from GitHub or you can download the pdfs. If you

8
00:00:49,392 --> 00:00:52,926
clone it and you follow a few steps in the source of

9
00:00:52,948 --> 00:00:56,938
ReaDMe, you can also view them offline

10
00:00:57,114 --> 00:01:00,430
and at your pace. Standard disclaimers apply.

11
00:01:00,580 --> 00:01:03,890
The main ones are that this is not those complete

12
00:01:03,960 --> 00:01:07,554
introduction to either platform. You do not

13
00:01:07,592 --> 00:01:11,394
need any deep knowledge of rust for

14
00:01:11,432 --> 00:01:14,290
this, and surprise,

15
00:01:15,430 --> 00:01:18,726
these platforms are new and they are work

16
00:01:18,748 --> 00:01:22,566
in progress, so there are good things coming,

17
00:01:22,748 --> 00:01:25,462
and if this gets outdated, please let me know.

18
00:01:25,596 --> 00:01:29,114
Some of the features and limits are not draft specific, but they

19
00:01:29,152 --> 00:01:32,806
do affect how the applications are deployed

20
00:01:32,838 --> 00:01:36,860
and for what purpose. Hence I'm including them here.

21
00:01:37,310 --> 00:01:40,874
You can also look at the source code of my four applications,

22
00:01:41,002 --> 00:01:44,522
two for each platform I used three rust

23
00:01:44,586 --> 00:01:47,600
framework web frameworks for them.

24
00:01:47,970 --> 00:01:52,910
They're trivial applications and useful.

25
00:01:54,470 --> 00:01:57,810
One for each platform show the system

26
00:01:57,880 --> 00:02:01,890
information like directory listing quotas

27
00:02:02,550 --> 00:02:06,214
or the available space on the

28
00:02:06,412 --> 00:02:08,710
mounted drives,

29
00:02:09,450 --> 00:02:13,574
and one on shuttlers shows those

30
00:02:13,612 --> 00:02:17,394
headers as data used to

31
00:02:17,452 --> 00:02:21,014
document that. Neither of the platforms shows IP

32
00:02:21,062 --> 00:02:24,890
addresses coming from the client. On data

33
00:02:24,960 --> 00:02:28,362
space you can see transient web

34
00:02:28,416 --> 00:02:31,946
dev server. It's a tiny one that

35
00:02:31,968 --> 00:02:36,042
it uses its data space's file limit

36
00:02:36,186 --> 00:02:40,362
of up to 500 or so megabytes

37
00:02:40,506 --> 00:02:44,802
and I will be sharing my bookmarks and

38
00:02:44,856 --> 00:02:49,090
highlights for Firefox on data

39
00:02:49,160 --> 00:02:53,198
Space shuttlers and rust,

40
00:02:53,374 --> 00:02:57,266
so feel free to use them. Even though it's

41
00:02:57,298 --> 00:03:00,534
a transient file share,

42
00:03:00,652 --> 00:03:04,946
it will be synchronized from my Firefox, so if data restarts

43
00:03:04,978 --> 00:03:08,550
it for any reason, it will get synchronized

44
00:03:08,630 --> 00:03:12,454
there soon. And I've documented

45
00:03:12,502 --> 00:03:15,994
steps on how you can read and synchronize those

46
00:03:16,032 --> 00:03:20,374
bookmarks into your Firefox. Spoiler alert. I love them both.

47
00:03:20,512 --> 00:03:23,738
Before we get into the qualities

48
00:03:23,834 --> 00:03:27,438
and limits of each platform, let's have a

49
00:03:27,444 --> 00:03:31,786
quick look at the source code and some configuration.

50
00:03:31,978 --> 00:03:35,182
Data space uses Space file,

51
00:03:35,326 --> 00:03:39,540
which is YaML file with

52
00:03:41,190 --> 00:03:44,462
simple entries. It's very well documented,

53
00:03:44,606 --> 00:03:48,246
and if all you need is default, or if

54
00:03:48,268 --> 00:03:52,690
you don't need any private routing or special features,

55
00:03:52,850 --> 00:03:56,486
it's very easy. However, rust support

56
00:03:56,588 --> 00:03:59,194
is quite new at data space,

57
00:03:59,392 --> 00:04:03,302
and occasionally rust applications

58
00:04:03,366 --> 00:04:07,670
don't work if you build them with standard target

59
00:04:07,750 --> 00:04:10,990
that uses Glipc. Because of that,

60
00:04:11,060 --> 00:04:14,910
I suggest that in the interim you use the

61
00:04:14,980 --> 00:04:19,626
mucil target, which is a lightweight, Linux statically

62
00:04:19,658 --> 00:04:23,650
compelled target that doesn't use glipsy at all

63
00:04:23,720 --> 00:04:27,006
it has its own implementation of STD library

64
00:04:27,118 --> 00:04:30,610
and that works very well on data

65
00:04:30,680 --> 00:04:35,022
space. You use whatever crates you

66
00:04:35,096 --> 00:04:38,918
want or you need in your application and there

67
00:04:38,924 --> 00:04:42,806
are no specific crates from data

68
00:04:42,988 --> 00:04:46,390
needed other than the unofficial data

69
00:04:46,460 --> 00:04:49,862
space SDK. The configuration

70
00:04:50,006 --> 00:04:53,242
gets done in your application

71
00:04:53,376 --> 00:04:56,662
where you need to read the port environment

72
00:04:56,726 --> 00:05:00,570
variable and use that as the web port

73
00:05:00,720 --> 00:05:04,014
of your application. Or actually it's not the

74
00:05:04,052 --> 00:05:07,502
application, it's the micro, which you can have up to five of them

75
00:05:07,556 --> 00:05:11,770
in the same application. We'll get to that soon. In shuttlers

76
00:05:11,930 --> 00:05:15,598
there is no mandatory configuration file other than

77
00:05:15,684 --> 00:05:18,702
that there is a file called Shuttle Toml,

78
00:05:18,766 --> 00:05:22,482
but all it does for now is that you can

79
00:05:22,536 --> 00:05:26,450
specify the application name in it, but it's optional and you can specify

80
00:05:26,530 --> 00:05:30,646
that in the CLI as

81
00:05:30,668 --> 00:05:32,360
you deploy the application. Anyway,

82
00:05:33,050 --> 00:05:36,534
configuration is done or those

83
00:05:36,572 --> 00:05:39,910
integration with Shuttle is done through custom crates

84
00:05:39,990 --> 00:05:43,658
provided by Shuttle and you can see them here. For example,

85
00:05:43,744 --> 00:05:47,254
this is a cargo tunnel for a web app that uses

86
00:05:47,302 --> 00:05:51,138
XM and shuttlers provides two XM crates, shuttlers exum

87
00:05:51,174 --> 00:05:55,294
and shuttle runtime. Then let's look

88
00:05:55,332 --> 00:05:59,950
how it is used and here you see an attribute

89
00:06:00,690 --> 00:06:03,780
procedural macro shuttle runtime main,

90
00:06:04,630 --> 00:06:09,634
which you apply to the function that serves your

91
00:06:09,672 --> 00:06:13,618
application and in this instance the result type

92
00:06:13,704 --> 00:06:17,970
is custom to shuttlers XM

93
00:06:18,410 --> 00:06:23,026
that is very well documented with examples

94
00:06:23,138 --> 00:06:26,710
or tutorials and it works well

95
00:06:26,860 --> 00:06:30,474
out of the box. However, since we are looking

96
00:06:30,512 --> 00:06:34,266
at the source code, you may want to remember

97
00:06:34,368 --> 00:06:38,154
that if you are using advanced features of

98
00:06:38,192 --> 00:06:41,562
those frameworks supported by Shuttle,

99
00:06:41,706 --> 00:06:46,174
it does get complicated because you

100
00:06:46,212 --> 00:06:49,690
may use features like retrieving

101
00:06:49,770 --> 00:06:53,790
or handling and setting non default headers,

102
00:06:53,950 --> 00:06:58,210
or your own MIME types, or anything

103
00:06:58,360 --> 00:07:02,034
that is non default is not trivial with

104
00:07:02,072 --> 00:07:05,306
shuttlers. You may find tutorials

105
00:07:05,358 --> 00:07:08,406
on the web on how

106
00:07:08,428 --> 00:07:13,734
to implement it with exum or the

107
00:07:13,772 --> 00:07:17,506
other frameworks for sure. But if you then want

108
00:07:17,548 --> 00:07:20,922
to connect it with Shuttle, you may need to do more

109
00:07:20,976 --> 00:07:25,382
exploration and you may want to be combining

110
00:07:25,446 --> 00:07:28,518
and experimenting, but that's

111
00:07:28,614 --> 00:07:32,270
part of our passion. Here's an example

112
00:07:32,340 --> 00:07:35,946
of cargo tumble for Actix web deployed on shuttle

113
00:07:35,978 --> 00:07:39,178
and again you have two special crates,

114
00:07:39,274 --> 00:07:41,690
shuttlers web and shuttle runtime,

115
00:07:41,850 --> 00:07:46,034
and here's how it is used. In the source code you

116
00:07:46,072 --> 00:07:50,580
apply a procedural attribute, macro shuttle runtime main and

117
00:07:51,030 --> 00:07:54,810
the async function actics web returns

118
00:07:54,910 --> 00:07:59,240
custom type shuttlers web both platforms share

119
00:07:59,850 --> 00:08:04,018
these features. They are deployed on the Linux machines,

120
00:08:04,194 --> 00:08:07,394
but you can locally develop on Linux, Mac OS

121
00:08:07,442 --> 00:08:12,710
and Windows. We don't have SU

122
00:08:12,780 --> 00:08:16,774
or sudo access and we cannot customize at docker

123
00:08:16,822 --> 00:08:20,394
level. Neither of them provides

124
00:08:20,442 --> 00:08:24,154
access to the client ip address. So you cannot

125
00:08:24,202 --> 00:08:28,382
do IP dependent logic rate

126
00:08:28,436 --> 00:08:32,350
limiting or geo IP handling.

127
00:08:32,710 --> 00:08:36,562
With data space you can, and actually

128
00:08:36,696 --> 00:08:39,810
most likely with shuttlers. Two,

129
00:08:39,960 --> 00:08:43,570
you can use special headers, for example,

130
00:08:43,640 --> 00:08:47,266
from Cloudflare DNS, and both platforms

131
00:08:47,298 --> 00:08:50,658
are active on discord. The community is helpful.

132
00:08:50,834 --> 00:08:54,690
Here are data space features. The applications

133
00:08:54,770 --> 00:08:58,214
can be private, accessible to you, the developer

134
00:08:58,262 --> 00:09:01,942
only, or public. That's one of the main differences

135
00:09:02,006 --> 00:09:04,650
between data and shuttlers,

136
00:09:05,150 --> 00:09:09,162
as shuttlers doesn't have private applications on

137
00:09:09,216 --> 00:09:12,954
data. You can access those private applications if you authenticate

138
00:09:13,002 --> 00:09:16,890
in the browser and most likely with C URL

139
00:09:16,970 --> 00:09:20,862
or other tools too. On data, you can also

140
00:09:20,916 --> 00:09:23,730
publish test versions,

141
00:09:24,310 --> 00:09:27,826
deploy test versions that are not published, and they stay

142
00:09:27,928 --> 00:09:31,714
private until you publish them. Data doesn't have

143
00:09:31,752 --> 00:09:35,570
access to your password for authentication that goes through AWS.

144
00:09:36,010 --> 00:09:39,958
The other big feature is mesh design. Your application

145
00:09:40,044 --> 00:09:43,234
can be a mesh of up to five computes,

146
00:09:43,362 --> 00:09:47,566
each with its own limits and file

147
00:09:47,618 --> 00:09:50,410
system. They can communicate between themselves,

148
00:09:50,560 --> 00:09:54,266
even though some of them or

149
00:09:54,368 --> 00:09:57,942
most of them can be private and not directly accessible

150
00:09:58,086 --> 00:10:02,606
from outside. You can also have routing public routing that

151
00:10:02,788 --> 00:10:06,446
specify which compute which micro to

152
00:10:06,468 --> 00:10:09,562
use for which URL patterns.

153
00:10:09,706 --> 00:10:13,362
That way you can integrate with third

154
00:10:13,416 --> 00:10:16,562
party applications. And those

155
00:10:16,616 --> 00:10:20,290
don't have to be in rust because data space also

156
00:10:20,440 --> 00:10:24,258
supports several other languages. That's the other feature. It's a

157
00:10:24,264 --> 00:10:27,906
mesh of languages or frameworks. The disadvantage

158
00:10:28,018 --> 00:10:31,640
is that rust support is quite new and

159
00:10:32,330 --> 00:10:36,402
it's still work in progress. Rust applications don't get special handling,

160
00:10:36,546 --> 00:10:39,402
which gives you some freedom. For example,

161
00:10:39,456 --> 00:10:42,794
you can choose your rust version or

162
00:10:42,832 --> 00:10:45,994
any framework, or you can use nightly rust if you like.

163
00:10:46,112 --> 00:10:49,498
Rust bindings for data API are

164
00:10:49,584 --> 00:10:53,550
only unofficial at the moment, but the HTTP

165
00:10:54,530 --> 00:10:58,074
rESt API itself is well documented.

166
00:10:58,202 --> 00:11:02,982
You don't need any special rest crates or macros for your code from Detaspace.

167
00:11:03,146 --> 00:11:07,198
It doesn't favor SQL

168
00:11:07,374 --> 00:11:10,814
rdbms like postgres, SQL,

169
00:11:10,862 --> 00:11:14,222
or MySQL, unless you have a pool manager,

170
00:11:14,366 --> 00:11:17,830
and data space doesn't provide any of such

171
00:11:17,900 --> 00:11:21,750
databases. Yes, you probably want

172
00:11:21,900 --> 00:11:25,814
mutual target at the moment, and big

173
00:11:25,852 --> 00:11:29,446
limitation may be that it doesn't

174
00:11:29,478 --> 00:11:33,286
support background or long tasks. Discord boards implementation

175
00:11:33,318 --> 00:11:36,938
of discord boards and websockets data space

176
00:11:37,024 --> 00:11:40,406
provides storage, both NoSQL,

177
00:11:40,518 --> 00:11:44,362
called database and object

178
00:11:44,496 --> 00:11:46,880
or file storage, called data store.

179
00:11:47,570 --> 00:11:51,418
They are their proprietary APIs,

180
00:11:51,594 --> 00:11:55,330
well documented but not

181
00:11:55,400 --> 00:11:59,054
available outside of their platform. You can use them locally,

182
00:11:59,182 --> 00:12:03,198
though of course, and they may not be so fully proprietary

183
00:12:03,294 --> 00:12:06,950
because data is pretty open source.

184
00:12:07,450 --> 00:12:11,154
Data isolation is very good, and you can clone

185
00:12:11,202 --> 00:12:14,342
someone's application have it with your

186
00:12:14,396 --> 00:12:19,126
data isolated and your instance is completely independent.

187
00:12:19,238 --> 00:12:23,050
Even if the original instance owner

188
00:12:23,470 --> 00:12:26,618
publishes new versions, your application

189
00:12:26,704 --> 00:12:29,866
is not affected unless you choose to receive the new

190
00:12:29,888 --> 00:12:33,914
versions. Data supports cron like schedule actions

191
00:12:34,042 --> 00:12:38,990
with granularity down to 1 minute, and it promotes

192
00:12:39,810 --> 00:12:43,162
personal or private instances.

193
00:12:43,306 --> 00:12:47,198
For example, the subdomains are anonymized with a random

194
00:12:47,294 --> 00:12:50,994
postfix, and forking instances is very

195
00:12:51,032 --> 00:12:54,690
easy. You don't need developer skills for that. There is

196
00:12:54,760 --> 00:12:58,326
the marketplace where you can share your

197
00:12:58,508 --> 00:13:01,810
applications and when you can see what others are sharing

198
00:13:01,890 --> 00:13:06,280
and then you can experiment with them. And there's a plan

199
00:13:07,550 --> 00:13:10,858
to offer paid applications that would

200
00:13:11,024 --> 00:13:14,326
generate revenue for the developer. Let's look at shuttlers.

201
00:13:14,438 --> 00:13:18,154
Shuttlers specializes in rust and

202
00:13:18,272 --> 00:13:23,194
it's top class edit. The tutorials

203
00:13:23,242 --> 00:13:27,230
are well written. It also documents how to

204
00:13:27,380 --> 00:13:30,542
connect the middleware, some security and

205
00:13:30,596 --> 00:13:33,300
cryptography features too.

206
00:13:34,470 --> 00:13:38,402
The applications deployed on shuttlers are suitable for background on

207
00:13:38,456 --> 00:13:42,850
or long tasks. It provides much richer storage

208
00:13:43,190 --> 00:13:47,286
as there are four SQL options,

209
00:13:47,388 --> 00:13:51,538
postgres, MySQL and MariaDB as dedicated

210
00:13:51,634 --> 00:13:55,234
instances. And postgres also has a shared server

211
00:13:55,362 --> 00:13:59,850
from Shuttle or Turzar which is a distributed

212
00:14:00,350 --> 00:14:03,850
Sqlite fork that is not hosted by

213
00:14:04,000 --> 00:14:07,370
Shuttle. Hopefully it will be so one day

214
00:14:07,440 --> 00:14:11,374
or there would be an option for that, but for now you would

215
00:14:11,412 --> 00:14:15,082
need to get free or commercial hosting

216
00:14:15,146 --> 00:14:18,826
from Turuso and it also has a dedicated

217
00:14:18,938 --> 00:14:22,750
crate from Shuttle. It offers now SQL

218
00:14:24,070 --> 00:14:27,410
MongoDB shared by Shuttle or

219
00:14:27,480 --> 00:14:31,102
proprietary key value database called shuttlers persist.

220
00:14:31,246 --> 00:14:33,966
The data is well isolated.

221
00:14:34,158 --> 00:14:37,414
A small disadvantage or limitation of shuttlers is

222
00:14:37,452 --> 00:14:41,810
that because they provide their specialized crates,

223
00:14:41,970 --> 00:14:46,278
those are pinned at some versions and they require specific

224
00:14:46,364 --> 00:14:49,834
versions or potentially a

225
00:14:49,872 --> 00:14:53,590
limited range of versions of dependent

226
00:14:53,670 --> 00:14:57,366
crates. Those MySQL and other SQL

227
00:14:57,398 --> 00:15:00,906
crates or MongoDB crate and the same with

228
00:15:00,928 --> 00:15:04,462
Turzo. It's pinned to fixed version and the rest

229
00:15:04,516 --> 00:15:08,234
itself is pinned to fixed,

230
00:15:08,362 --> 00:15:11,040
but a fairly recent version too.

231
00:15:11,650 --> 00:15:16,498
Shuttle does have much longer build times because they

232
00:15:16,664 --> 00:15:20,946
provide attribute macros and those

233
00:15:21,048 --> 00:15:24,670
use Serdi for syntax

234
00:15:24,830 --> 00:15:28,370
passing and handling, which is complex.

235
00:15:28,530 --> 00:15:32,166
It can take long to build and it

236
00:15:32,188 --> 00:15:35,990
can involve from around 300

237
00:15:36,060 --> 00:15:39,594
or even up to 600 dependencies in your

238
00:15:39,632 --> 00:15:44,460
project. But if you're building it locally then any

239
00:15:45,230 --> 00:15:48,870
successive builds are incremental by default,

240
00:15:48,950 --> 00:15:51,870
so then it is much faster.

241
00:15:52,450 --> 00:15:56,078
It doesn't have TMP folder only

242
00:15:56,244 --> 00:16:00,154
dev SHM for memory sharing

243
00:16:00,282 --> 00:16:03,954
or temporary file system. So if

244
00:16:03,992 --> 00:16:07,646
you have an application that uses temporary file

245
00:16:07,678 --> 00:16:10,786
system you may want to choose one or

246
00:16:10,808 --> 00:16:14,002
you may want to customize it to you. If it

247
00:16:14,056 --> 00:16:17,506
depends on TMP, it doesn't promote

248
00:16:17,698 --> 00:16:21,346
targeting or sharing clones of applications if you'd

249
00:16:21,378 --> 00:16:25,318
like to share your application so that others

250
00:16:25,404 --> 00:16:29,218
get their own instance of it on shuttlers you

251
00:16:29,244 --> 00:16:33,318
need to do so on GitHub or some other source sharing

252
00:16:33,494 --> 00:16:37,094
service and they will need to go through the steps to deploy

253
00:16:37,142 --> 00:16:40,894
it, which is not rocket science, but they

254
00:16:40,932 --> 00:16:44,458
need some more skill developer skills than with forking

255
00:16:44,554 --> 00:16:48,558
an application. On data space. There is

256
00:16:48,644 --> 00:16:52,914
a limitation of, I believe, up to five applications per

257
00:16:52,952 --> 00:16:56,498
user for free, but these limits are not enforced yet.

258
00:16:56,584 --> 00:17:00,206
And if you contribute to shuttlers,

259
00:17:00,318 --> 00:17:03,694
or if you create useful

260
00:17:03,742 --> 00:17:07,094
applications that help people, shuttlers may

261
00:17:07,132 --> 00:17:10,630
reward you as a hero and their

262
00:17:10,780 --> 00:17:14,360
hosting and services will be free for you for life.

263
00:17:14,970 --> 00:17:18,858
For commercial purposes you can or

264
00:17:18,944 --> 00:17:22,502
they are planning that you can use your own AWS

265
00:17:22,566 --> 00:17:26,860
account. Here are some quantitative and other differences so

266
00:17:28,510 --> 00:17:32,240
these don't come out of design and

267
00:17:32,690 --> 00:17:36,654
hence they are more likely to be more

268
00:17:36,692 --> 00:17:40,426
flexible than the qualitative differences earlier.

269
00:17:40,538 --> 00:17:43,410
The biggest ones are memory limits,

270
00:17:44,710 --> 00:17:47,906
which are not very clear, but on data space you can have

271
00:17:47,928 --> 00:17:51,310
250 megabytes per each micro

272
00:17:51,470 --> 00:17:54,818
per execution, and on shuttlers you can have

273
00:17:54,904 --> 00:17:58,402
usually up to 6gb per container.

274
00:17:58,546 --> 00:18:02,466
There is no timer to limitation on shuttlers or it's

275
00:18:02,498 --> 00:18:06,034
not specified, and on data space it's 20 seconds.

276
00:18:06,162 --> 00:18:10,042
And there are differences between the temporary file system

277
00:18:10,176 --> 00:18:13,530
size, but those will hardly

278
00:18:13,870 --> 00:18:18,170
make a difference for mainstream applications.

279
00:18:19,150 --> 00:18:23,338
If your application is parallelized

280
00:18:23,514 --> 00:18:27,182
more than a usual async web

281
00:18:27,316 --> 00:18:30,874
application, you may want to look more at the limits

282
00:18:30,922 --> 00:18:34,846
on processes or threads. On shuttlers it's only four threads

283
00:18:34,958 --> 00:18:39,410
per project, on data space it's 1024

284
00:18:39,480 --> 00:18:42,866
per micro and if you need to

285
00:18:42,888 --> 00:18:46,722
handle more than five to five megabytes

286
00:18:46,866 --> 00:18:50,646
HTTP payload, then at the moment you

287
00:18:50,748 --> 00:18:55,746
need shuttlers. Those storage limit

288
00:18:55,778 --> 00:18:59,274
on shuttlers is 10gb on free

289
00:18:59,312 --> 00:19:03,110
tire, but it's not enforced yet and it's not specified

290
00:19:03,190 --> 00:19:06,806
on data space, and they both use AWS

291
00:19:06,998 --> 00:19:11,214
with at least data space. Also planning for

292
00:19:11,332 --> 00:19:15,070
using GCP or other clouds choosing between

293
00:19:15,140 --> 00:19:19,630
them there are some minor criteria

294
00:19:21,170 --> 00:19:25,330
or trivial ones if you need a temporary

295
00:19:25,910 --> 00:19:28,590
file system on TMP,

296
00:19:28,750 --> 00:19:32,542
or the quantitative differences

297
00:19:32,686 --> 00:19:36,626
if those matter to you, and if they

298
00:19:36,648 --> 00:19:39,574
are not likely to be changed by the platform,

299
00:19:39,692 --> 00:19:43,494
then you may choose one or the other, but you may still ask

300
00:19:43,532 --> 00:19:47,800
around because they are work in progress. If you

301
00:19:48,190 --> 00:19:52,170
need your applications to be private with

302
00:19:52,320 --> 00:19:55,786
single user only, then at the moment you probably want a

303
00:19:55,808 --> 00:19:59,354
data space, but then you still need to want to

304
00:19:59,392 --> 00:20:02,862
consider the storage. You may want this option if

305
00:20:02,916 --> 00:20:07,230
you are open to using their database or data

306
00:20:07,300 --> 00:20:11,802
store. If you need more than two authenticated users,

307
00:20:11,946 --> 00:20:15,650
then you can use either one because none of them

308
00:20:15,720 --> 00:20:19,646
supports it out of the box. If you need to mesh

309
00:20:19,838 --> 00:20:23,634
various components into an application, or if any part

310
00:20:23,672 --> 00:20:27,462
of the application is not in rust, then you want data

311
00:20:27,516 --> 00:20:30,690
space. You could potentially

312
00:20:30,770 --> 00:20:34,694
implement a mesh of rust components in

313
00:20:34,732 --> 00:20:37,754
shuttlers with some routing or

314
00:20:37,792 --> 00:20:41,606
proxy, and that could be feasible

315
00:20:41,798 --> 00:20:45,958
if those components use the same web framework

316
00:20:46,134 --> 00:20:51,290
for Rust, but especially with shuttlers

317
00:20:51,650 --> 00:20:55,710
special crates. It could get complicated very soon,

318
00:20:55,860 --> 00:21:00,510
very early. If you want first class support

319
00:21:00,580 --> 00:21:04,686
for rust then shuttlers are

320
00:21:04,788 --> 00:21:08,018
leading and also

321
00:21:08,184 --> 00:21:11,774
they offer background or long tasks and discord

322
00:21:11,822 --> 00:21:15,854
bots. And at the moment if you'd like cron

323
00:21:15,902 --> 00:21:19,766
like schedule actions, then you go with the taskbase. Stability and

324
00:21:19,788 --> 00:21:23,110
ergonomics is better

325
00:21:23,180 --> 00:21:27,506
with shuttlers because of their attribute macros

326
00:21:27,618 --> 00:21:31,500
and their support for Rust as their only

327
00:21:31,870 --> 00:21:35,686
programming language. But if you don't want any special crates

328
00:21:35,718 --> 00:21:39,466
or macros, then you may want to go with data space as

329
00:21:39,488 --> 00:21:42,910
well as if you need to use a custom version,

330
00:21:43,410 --> 00:21:47,946
a special version or a special channel of rust

331
00:21:48,058 --> 00:21:51,166
with those storage. If you do not want to

332
00:21:51,188 --> 00:21:54,478
use a third party SQL

333
00:21:54,654 --> 00:21:57,010
or NonSQl,

334
00:21:57,910 --> 00:22:01,570
and if you do not want to adapt or

335
00:22:01,640 --> 00:22:04,846
to use database or data store,

336
00:22:04,968 --> 00:22:08,214
then you want shuttlers. Otherwise you

337
00:22:08,252 --> 00:22:12,054
get perfect storage with data.

338
00:22:12,172 --> 00:22:15,670
Those commercial plan for large

339
00:22:15,820 --> 00:22:19,110
deployments going over the storage quotas

340
00:22:19,470 --> 00:22:23,194
is not mentioned by data space yet, and it's only

341
00:22:23,232 --> 00:22:27,478
planned by shuttle. The free sharing of applications

342
00:22:27,574 --> 00:22:31,802
on the platform's website itself exists

343
00:22:31,866 --> 00:22:35,134
only in data as well as the

344
00:22:35,332 --> 00:22:38,560
commercial models well, which don't exist yet,

345
00:22:39,570 --> 00:22:43,306
but they are planning paid marketplace

346
00:22:43,418 --> 00:22:47,214
thank you for listening. I hope you will

347
00:22:47,252 --> 00:22:50,606
look at both data space and shuttle rs and

348
00:22:50,708 --> 00:22:54,366
enjoy them. Develop good applications, share them either on the

349
00:22:54,388 --> 00:22:58,754
platform itself or on those git. Love rust.

350
00:22:58,882 --> 00:22:59,300
Take care.

