1
00:01:45,930 --> 00:01:49,406
Hi and thank you so much for joining me today. We'll be

2
00:01:49,428 --> 00:01:52,590
talking a little bit about problems with Kubernetes access

3
00:01:52,660 --> 00:01:57,482
today and how you can say goodbye to manual Kubernetes user access onboarding

4
00:01:57,626 --> 00:02:00,670
using solutions like Opensource teleport.

5
00:02:02,130 --> 00:02:05,494
So this is what a terminal looked like at

6
00:02:05,532 --> 00:02:09,266
a job I has. Many, many years ago we had this file

7
00:02:09,298 --> 00:02:12,646
sitting there called secrets text. What do you think will

8
00:02:12,668 --> 00:02:16,520
happen if we run this command? Catsecrets text,

9
00:02:17,950 --> 00:02:21,322
we get some secrets. So these were access

10
00:02:21,376 --> 00:02:25,578
credentials for accessing various cloud infrastructure at my,

11
00:02:25,664 --> 00:02:29,082
again, old job. And so

12
00:02:29,216 --> 00:02:32,458
what happened was a lot of people on the team ended

13
00:02:32,474 --> 00:02:36,062
up saving credentials like this to their local

14
00:02:36,116 --> 00:02:39,674
machines, because the way of us accessing

15
00:02:39,722 --> 00:02:43,294
the infrastructure that we had was just so terrible and would

16
00:02:43,332 --> 00:02:47,234
take forever and was filled with pain points. The way it worked was

17
00:02:47,272 --> 00:02:50,642
that the way it was supposed to be has that we

18
00:02:50,696 --> 00:02:54,354
had a credentials vault that you would go every

19
00:02:54,392 --> 00:02:58,006
time you needed to access a resource. You'd go into the vault, search for the

20
00:02:58,028 --> 00:03:01,366
resource name, open up that file, and then

21
00:03:01,388 --> 00:03:05,254
just copy and paste those certificates or those access keys or

22
00:03:05,292 --> 00:03:08,882
whatever back into the terminal and then access the resource.

23
00:03:09,026 --> 00:03:12,262
The problem with this was that those were so many resources

24
00:03:12,326 --> 00:03:15,210
with ambiguous names. There was no naming conventions.

25
00:03:16,030 --> 00:03:19,702
Old credentials weren't always deleted, so sometimes they were deprecated

26
00:03:19,766 --> 00:03:23,162
and it just took forever and was just such a hassle.

27
00:03:23,306 --> 00:03:27,806
So what a lot of engineers did has the

28
00:03:27,828 --> 00:03:31,086
most frequent resources that we had to access. We ended up

29
00:03:31,108 --> 00:03:34,802
just copying and pasting those keys locally and just saving

30
00:03:34,856 --> 00:03:38,706
them in files like this. Now, obviously, this is terrible security

31
00:03:38,808 --> 00:03:42,622
posture, just absolutely abysmal.

32
00:03:42,766 --> 00:03:46,454
But the reason for it is, and the lesson we can learn, is that

33
00:03:46,652 --> 00:03:50,914
the most secure thing also has to be the simplest thing. Otherwise engineers

34
00:03:50,962 --> 00:03:54,242
are going to find workarounds. If you're sacrificing engineer

35
00:03:54,306 --> 00:03:57,802
productivity for security, you're going to have problems

36
00:03:57,856 --> 00:04:00,410
like this in very, very many cases.

37
00:04:02,350 --> 00:04:06,090
And this is a huge problem because when employees leave

38
00:04:06,160 --> 00:04:10,182
as well, they still may have access to these locally stored passwords.

39
00:04:10,326 --> 00:04:13,982
From a survey done by beyond identity in 2021,

40
00:04:14,116 --> 00:04:17,662
they found that one in four employees surveyed still have access

41
00:04:17,716 --> 00:04:20,686
to old passwords, just like we saw in the last example.

42
00:04:20,868 --> 00:04:24,206
And 41.7% of employees admitted to

43
00:04:24,228 --> 00:04:27,794
having shared workplace passwords. So this is, again, just like we

44
00:04:27,832 --> 00:04:31,634
saw. There was shared resources that people had all

45
00:04:31,672 --> 00:04:35,266
the credentials for. And then when they leave, they might still hang on

46
00:04:35,288 --> 00:04:38,694
to those credentials, still allowing them to access resources that they should

47
00:04:38,732 --> 00:04:40,550
not have access to anymore,

48
00:04:42,330 --> 00:04:46,214
which eventually will lead to a security breach and we found

49
00:04:46,252 --> 00:04:49,494
that every security breach has two things in common,

50
00:04:49,692 --> 00:04:53,066
a human error for the initial infiltration. So this could be something

51
00:04:53,088 --> 00:04:56,650
like keeping a sticky note on your computer, or an attempt to pivot

52
00:04:57,070 --> 00:05:00,750
and an attempt to pivot to maximize the blast radius.

53
00:05:02,370 --> 00:05:06,346
So human error. So this is from a Git guardian

54
00:05:06,378 --> 00:05:09,774
survey in 2021. They found over 6

55
00:05:09,892 --> 00:05:12,746
million leaked secrets in GitHub,

56
00:05:12,938 --> 00:05:15,378
and this is a two times increase since 2020.

57
00:05:15,384 --> 00:05:18,910
And the types of secrets leaked here are not surprising.

58
00:05:19,070 --> 00:05:23,038
It's a lot of cloud infrastructure access keys, like AWS

59
00:05:23,134 --> 00:05:27,158
IAM tokens or Azure API keys, Google Cloud

60
00:05:27,244 --> 00:05:30,934
keys, scaleway tokens. And these numbers are

61
00:05:30,972 --> 00:05:35,270
only going to increase as compliance scale up their infrastructure.

62
00:05:36,570 --> 00:05:39,782
And you might say, okay, well, but we're not open source.

63
00:05:39,926 --> 00:05:43,622
Well, too bad, because 85% of those corporate leaks

64
00:05:43,686 --> 00:05:47,078
came from developers personal repos. When they were doing development,

65
00:05:47,174 --> 00:05:51,438
they would fork the company's private repo into their own public personal

66
00:05:51,524 --> 00:05:54,414
ones. They would make the code changes,

67
00:05:54,532 --> 00:05:58,734
they would not delete the repo, and then they'd merge it in.

68
00:05:58,932 --> 00:06:02,026
The other 15% came from public corporate repos.

69
00:06:02,138 --> 00:06:06,062
And this is Gitguardian's findings, and they're only finding that they're accessing

70
00:06:06,126 --> 00:06:07,810
these types of mistakes.

71
00:06:09,830 --> 00:06:12,846
The next step, of course, is to maximize the blast radius.

72
00:06:12,958 --> 00:06:16,606
For example, say you get into a slack workspace, like a recent

73
00:06:16,718 --> 00:06:19,960
high profile hack happened a couple months ago,

74
00:06:20,490 --> 00:06:24,210
then from there you can get access to a server, you get into a server,

75
00:06:24,290 --> 00:06:28,234
you can elevate your privileges using some kind of privilege escalation attack.

76
00:06:28,432 --> 00:06:32,220
From there, do what you do, maybe get some customer data,

77
00:06:32,670 --> 00:06:35,610
get some internal compliance files,

78
00:06:36,110 --> 00:06:39,242
and then profit from those.

79
00:06:39,296 --> 00:06:43,066
Your mileage may vary. You might end up on a beach somewhere,

80
00:06:43,178 --> 00:06:45,630
or somewhere a little bit less pleasant.

81
00:06:47,890 --> 00:06:51,294
And so what does that mean kind of for a cloud world today?

82
00:06:51,492 --> 00:06:54,686
Well, according to the Container research report published by

83
00:06:54,708 --> 00:06:58,226
Datadog in 2022, their scope was

84
00:06:58,248 --> 00:07:01,758
around 1.5 billion containers and tens of thousands

85
00:07:01,774 --> 00:07:05,366
of companies. So this is a pretty large survey of those companies with

86
00:07:05,388 --> 00:07:08,966
all those containers. They found that Kubernetes usage is

87
00:07:08,988 --> 00:07:12,050
actually rising in this container ecosystem.

88
00:07:12,130 --> 00:07:16,182
So more and more people are using Kubernetes. They found that

89
00:07:16,236 --> 00:07:20,170
over 50% now of these companies all are using

90
00:07:20,320 --> 00:07:22,780
kubernetes to manage their container access.

91
00:07:24,270 --> 00:07:27,526
All those Kubernetes clusters configured

92
00:07:27,638 --> 00:07:31,630
by humans who make mistakes.

93
00:07:33,010 --> 00:07:36,510
So Kubernetes configuration is a huge problem

94
00:07:36,580 --> 00:07:39,550
today and a huge hurdle for many development teams.

95
00:07:40,690 --> 00:07:44,446
This survey also found that 40% of these clusters

96
00:07:44,558 --> 00:07:48,338
are still using lax privileges. So what this means is that

97
00:07:48,424 --> 00:07:52,290
these user accounts are configured with privileges, such as

98
00:07:52,360 --> 00:07:56,194
being able to list all the secrets, create workloads

99
00:07:56,322 --> 00:07:59,922
or certificates themselves, or even do privilege escalation

100
00:07:59,986 --> 00:08:03,602
token requests so they can actually elevate their own privileges

101
00:08:03,746 --> 00:08:06,280
behind what their RBAC rules are supposed to be,

102
00:08:06,650 --> 00:08:10,666
and have access to a myriad of

103
00:08:10,688 --> 00:08:13,420
services that they otherwise should not be allowed to.

104
00:08:15,310 --> 00:08:19,030
And this kind of is the Kubernetes iceberg

105
00:08:19,110 --> 00:08:22,682
has, I like to call it. So on the very tip of the iceberg,

106
00:08:22,826 --> 00:08:26,042
you have making it work, right? Making Kubernetes

107
00:08:26,106 --> 00:08:29,674
work, configuring one cluster, all of your networking,

108
00:08:29,722 --> 00:08:33,646
all of your microservices together, allowing users to access it,

109
00:08:33,828 --> 00:08:37,694
making sure it doesn't go down. And this can be extremely

110
00:08:37,742 --> 00:08:40,990
hard on its own. Kubernetes is a complex beast.

111
00:08:41,150 --> 00:08:45,140
Configuring this to work with, even a couple of engineers can be very difficult.

112
00:08:45,910 --> 00:08:49,346
Then under the surface, however, okay, well, now that it's

113
00:08:49,378 --> 00:08:53,142
working, let's make it work securely. And then now things

114
00:08:53,196 --> 00:08:57,298
start getting even more difficult. When you're dealing with RBAC rules,

115
00:08:57,474 --> 00:09:01,100
you want to use identity based access, say passwordless even.

116
00:09:01,470 --> 00:09:05,002
You want to make sure all of your networking rules are not only work,

117
00:09:05,056 --> 00:09:08,586
but they're secure from outside attack at

118
00:09:08,608 --> 00:09:12,274
the very bottom of the iceberg, way under the water, in the very depths

119
00:09:12,342 --> 00:09:15,946
you have. Let's make it work now at scale,

120
00:09:16,138 --> 00:09:19,774
we made it work for a team of two or three engineers. What about

121
00:09:19,892 --> 00:09:23,294
40? What about 100? You don't have one cluster,

122
00:09:23,342 --> 00:09:27,310
you have thousands at scale in production,

123
00:09:27,390 --> 00:09:30,980
and you need it to be secure and consistently available.

124
00:09:32,150 --> 00:09:35,250
This is when things become extremely tricky.

125
00:09:36,490 --> 00:09:40,022
And the fact of the matter is that kubernetes is not

126
00:09:40,076 --> 00:09:44,306
safe by default. You have to have airtight configurations,

127
00:09:44,418 --> 00:09:48,970
otherwise bad actors are going to take advantage of your configuration.

128
00:09:51,790 --> 00:09:55,674
And this is absolutely key. A good

129
00:09:55,712 --> 00:09:59,066
configuration is the difference between engineers being

130
00:09:59,088 --> 00:10:01,418
able to use your product securely,

131
00:10:01,594 --> 00:10:05,614
or outside actors being able to highlight those vulnerabilities and

132
00:10:05,652 --> 00:10:09,278
actually exploit them and get into your systems. So the types of

133
00:10:09,284 --> 00:10:12,958
configuration, this is an example. Kate configuration file

134
00:10:12,974 --> 00:10:16,658
for deployment. And you have to consider

135
00:10:16,744 --> 00:10:19,966
ETCD security. You have to consider secret management,

136
00:10:20,078 --> 00:10:23,090
safe networking policies, pod to pod communication,

137
00:10:23,510 --> 00:10:26,994
application level security. What does an individual pod

138
00:10:27,042 --> 00:10:30,950
look like? RBAc policies for users. Audit, logging. Make sure

139
00:10:31,020 --> 00:10:35,378
all that activity is being logged and monitored. Cluster onboarding,

140
00:10:35,554 --> 00:10:39,142
adding new clusters, scaling up, scaling down, ephemeral cluster control,

141
00:10:39,276 --> 00:10:43,462
all of this, there's so many places where it can go wrong for a manual

142
00:10:43,526 --> 00:10:46,986
configuration, and you just get more and more and more and more

143
00:10:47,008 --> 00:10:49,786
of these files until they just all add up and there's going to be a

144
00:10:49,808 --> 00:10:52,974
problem somewhere. So what can we do

145
00:10:53,012 --> 00:10:56,814
about that? Well, luckily there are solutions available

146
00:10:56,932 --> 00:10:59,920
like open source teleport, kubernetes access.

147
00:11:01,570 --> 00:11:06,100
And what teleport is, is it's a secure control accessing platform.

148
00:11:06,550 --> 00:11:10,258
So it helps you manage all of your infrastructure access in a single place,

149
00:11:10,344 --> 00:11:13,886
including your Kubernetes access. And it operates

150
00:11:13,918 --> 00:11:17,314
on kind of these four pillars of access. In order to have secure

151
00:11:17,362 --> 00:11:19,906
access, you need authentication,

152
00:11:20,098 --> 00:11:23,378
authorization, connectivity and audit.

153
00:11:23,474 --> 00:11:27,078
And this is what teleport provides. So the

154
00:11:27,084 --> 00:11:30,486
first step is authentication. So authentication,

155
00:11:30,678 --> 00:11:34,582
what teleport does is rather than using any long livedemo

156
00:11:34,726 --> 00:11:37,210
credentials, no SSH keys,

157
00:11:38,110 --> 00:11:42,086
no passwords, no long lived certificates,

158
00:11:42,198 --> 00:11:46,106
what we do instead is teleport acts as its own certificate authority

159
00:11:46,218 --> 00:11:49,454
and it actually generates an identity in the form of a short

160
00:11:49,492 --> 00:11:52,886
lived x 509 certificate for the user and ties

161
00:11:52,938 --> 00:11:56,094
that identity to a role managed by teleport mapped

162
00:11:56,142 --> 00:12:00,034
to the identity from their SSO. So say you log

163
00:12:00,072 --> 00:12:03,714
in with Okta or GitHub, teleport will

164
00:12:03,752 --> 00:12:07,666
actually use that identity and issue a short lived certificate

165
00:12:07,778 --> 00:12:11,602
per user, per session. For kubernetes

166
00:12:11,666 --> 00:12:15,670
access, the next step is authorization.

167
00:12:16,810 --> 00:12:20,470
So what teleport also does is it will automatically approve or deny

168
00:12:20,550 --> 00:12:23,942
these access requests to a range of resources. So you have servers,

169
00:12:24,006 --> 00:12:27,286
databases, kubernetes, clusters, microservices and various

170
00:12:27,318 --> 00:12:30,566
CI CD systems. So it'll always make sure that

171
00:12:30,608 --> 00:12:34,462
your users are accessing only what they are allowed to based

172
00:12:34,516 --> 00:12:38,506
on their RBAC problems. You also have connectivity.

173
00:12:38,618 --> 00:12:42,414
So teleport also acts as its own proxy, which means that

174
00:12:42,452 --> 00:12:46,398
it establishes a connection between the user and the requested resource

175
00:12:46,494 --> 00:12:50,174
using a reverse proxy tunnel from the teleport server to the resource.

176
00:12:50,302 --> 00:12:53,780
So all of that traffic, every command being run,

177
00:12:54,630 --> 00:12:58,418
every user session, is being passed through the teleport proxy,

178
00:12:58,514 --> 00:13:01,702
making it secure and fully encrypted using

179
00:13:01,756 --> 00:13:06,146
TLS. The next step is audit.

180
00:13:06,338 --> 00:13:10,198
This is a huge thing from a diagnostic and compliance

181
00:13:10,374 --> 00:13:14,220
standpoint. You need to make sure that your clusters are

182
00:13:15,390 --> 00:13:18,614
being accessed by only who's allowed to be accessing

183
00:13:18,662 --> 00:13:22,142
them and monitoring their activity in case something goes wrong.

184
00:13:22,276 --> 00:13:25,594
And with teleport, all of your audit logs

185
00:13:25,642 --> 00:13:29,178
are mapped to a central location and can be managed

186
00:13:29,194 --> 00:13:32,814
from there. No matter what region your cluster is running in or

187
00:13:32,852 --> 00:13:36,274
no matter how many you have, all of those audit logs get streamed into

188
00:13:36,312 --> 00:13:39,970
the same location, making them easy to manage and monitor.

189
00:13:42,550 --> 00:13:46,006
So here's kind of the high level architecture of it. So this

190
00:13:46,028 --> 00:13:49,810
is an example of if you're hosting your teleport

191
00:13:49,970 --> 00:13:53,174
in your teleport instance, in the AWS cloud,

192
00:13:53,372 --> 00:13:56,040
along with a Kubernetes cluster there as well.

193
00:13:56,650 --> 00:14:00,074
So you have this teleport cube agent running

194
00:14:00,112 --> 00:14:03,274
on your Kubernetes cluster. And what this will do

195
00:14:03,312 --> 00:14:06,822
is it'll communicate with teleport. Your teleport cluster

196
00:14:06,886 --> 00:14:10,106
will then communicate with the user. So if a user wants

197
00:14:10,128 --> 00:14:13,758
to access the Kubernetes cluster, they'll log in

198
00:14:13,764 --> 00:14:17,850
with their SSO, in this cases GitHub, that'll confirm their identity.

199
00:14:18,010 --> 00:14:21,738
Then what teleport will say is, okay, well what is their authorization

200
00:14:21,834 --> 00:14:25,694
level then? What are they allowed to access? And once they're there, what permissions

201
00:14:25,742 --> 00:14:29,342
do they have? Teleport will then communicate with the Kubernetes

202
00:14:29,406 --> 00:14:33,010
cluster, authenticate with the Kubernetes cluster and

203
00:14:33,080 --> 00:14:36,350
grab that kubeconfig. It'll pass that Kubeconfig

204
00:14:36,430 --> 00:14:39,846
to the user and the user will be able to run Kubectl commands from

205
00:14:39,868 --> 00:14:43,606
their local machine just as if they were in the cloud itself. And again,

206
00:14:43,708 --> 00:14:47,640
all of this traffic is being passed through the teleport proxy service.

207
00:14:48,990 --> 00:14:52,374
Here's an example using machine id. So machine

208
00:14:52,422 --> 00:14:56,460
id is teleport's automated way to do access control.

209
00:14:56,830 --> 00:15:00,550
So rather than say like a user accessing teleport,

210
00:15:00,630 --> 00:15:04,346
in this case we have this worker node and this can be in a CI

211
00:15:04,378 --> 00:15:09,086
CD workflow. And rather than having a shared credential for

212
00:15:09,108 --> 00:15:12,314
this worker node, what you do actually is machine

213
00:15:12,362 --> 00:15:16,370
id will run in the background and actually fetch and get a credential

214
00:15:17,110 --> 00:15:21,202
every 20 minutes or completely configurable from

215
00:15:21,256 --> 00:15:24,622
teleport and it'll have its own identity.

216
00:15:24,766 --> 00:15:28,374
So if you have a bunch of different worker nodes and have trouble keeping track

217
00:15:28,412 --> 00:15:32,258
of them all, teleport is a great solution. Every worker

218
00:15:32,274 --> 00:15:35,702
node and every microservice, every process will have its own

219
00:15:35,756 --> 00:15:39,818
identity just the same way as a human would, allowing you to keep control

220
00:15:39,904 --> 00:15:43,878
of your complete CI CD automation infrastructure

221
00:15:43,974 --> 00:15:48,522
and also allow you to easily manage and scale this

222
00:15:48,576 --> 00:15:51,200
logging and this access control.

223
00:15:54,290 --> 00:15:57,470
So let's take a look at teleport in action.

224
00:15:58,850 --> 00:16:02,478
So now I'm going to give you a little demo on how teleport works.

225
00:16:02,644 --> 00:16:05,874
So over here on the right, we have hours web console and this is just

226
00:16:05,912 --> 00:16:10,034
the public address of our teleport cluster. So when we log

227
00:16:10,072 --> 00:16:13,170
in, we're going to authenticate using GitHub as an SSO.

228
00:16:15,270 --> 00:16:18,882
We log in through GitHub and now we see all of our servers

229
00:16:18,946 --> 00:16:23,138
that we have access to. So we can see all of our SSh

230
00:16:23,234 --> 00:16:26,642
nodes here we have our applications and our Kubernetes

231
00:16:26,706 --> 00:16:31,370
clusters and we also have our databases and

232
00:16:31,440 --> 00:16:35,066
our Windows DevOps. So we're going to see how

233
00:16:35,088 --> 00:16:38,470
to log into a Kubernetes cluster using teleport.

234
00:16:38,630 --> 00:16:42,654
So over here on the left we have my local machine. So first

235
00:16:42,692 --> 00:16:46,398
thing what we're going to do is we're going to tsh login to

236
00:16:46,484 --> 00:16:50,378
our cluster using GitHub as the authorization with the user Dumas

237
00:16:50,474 --> 00:16:53,954
K, that's me. And the address

238
00:16:54,072 --> 00:16:57,906
of the teleport host. So this

239
00:16:57,928 --> 00:17:01,646
will log us into the teleport cluster. Now we're logged

240
00:17:01,678 --> 00:17:05,294
in, we have that short lived certificate and now teleport knows

241
00:17:05,342 --> 00:17:09,670
who I am. All of this activity is being mapped to my identity.

242
00:17:10,490 --> 00:17:13,986
So next we're going to actually see what Kubernetes resources

243
00:17:14,018 --> 00:17:17,766
do we have access to. Perfect. So we have our

244
00:17:17,788 --> 00:17:21,990
Kate's, those here, this is the one that we're going to log into. And TsH

245
00:17:22,070 --> 00:17:26,454
is just a little command line tool that allows the user to access teleport resources

246
00:17:26,502 --> 00:17:30,006
and interact with the cluster. So next we're going to do a

247
00:17:30,048 --> 00:17:33,598
Tsh cube login to

248
00:17:33,684 --> 00:17:36,766
our host. And because I'm already logged in

249
00:17:36,788 --> 00:17:40,046
with teleport, this is all you need to do.

250
00:17:40,228 --> 00:17:44,386
I have the role access which allows me to access

251
00:17:44,568 --> 00:17:48,354
this Kubernetes cluster. And so now what teleport actually did

252
00:17:48,392 --> 00:17:52,066
is it gave us that kubeconfig. So from here we can

253
00:17:52,088 --> 00:17:54,290
run all of our Kubectl commands.

254
00:17:55,030 --> 00:17:58,694
So we actually are in this cluster right now and

255
00:17:58,812 --> 00:18:02,354
can create pods, can delete,

256
00:18:02,402 --> 00:18:05,766
can list, can do all of our different deployments, whatever we want

257
00:18:05,788 --> 00:18:09,146
to do. And if we go in here now we can

258
00:18:09,168 --> 00:18:12,806
actually see in the audit log these commands

259
00:18:12,838 --> 00:18:16,186
being run. We see that I logged in, we see

260
00:18:16,208 --> 00:18:19,754
the certificate was issued, we see the SSO login and

261
00:18:19,792 --> 00:18:23,366
we see that my request to the Kubernetes cluster,

262
00:18:23,398 --> 00:18:27,262
Kate's host and if we go into details we can actually see those

263
00:18:27,316 --> 00:18:30,686
commands and all of that session data that was run. We can see that

264
00:18:30,708 --> 00:18:34,578
the verb get the resource pods and all of

265
00:18:34,664 --> 00:18:37,010
those other session data resources.

266
00:18:38,870 --> 00:18:42,146
And you can see that I had access to this because we can look in

267
00:18:42,168 --> 00:18:45,618
our users. So here we have Dumez K,

268
00:18:45,704 --> 00:18:49,334
that's me. The type is a GitHub because it's mapped to my GitHub account.

269
00:18:49,452 --> 00:18:52,838
And we can see the roles that I currently have. This access

270
00:18:52,924 --> 00:18:56,882
role is the one that actually allowed me to access this Kubernetes

271
00:18:56,946 --> 00:19:00,250
cluster. So if we go into roles we can actually view

272
00:19:00,320 --> 00:19:04,042
this. So here's what a teleport role looks

273
00:19:04,096 --> 00:19:08,010
like. This is an RBAC role that maps to various other

274
00:19:08,160 --> 00:19:11,518
RBaC roles in database access,

275
00:19:11,684 --> 00:19:14,814
SSH, kubernetes, clusters or

276
00:19:14,852 --> 00:19:18,442
even Windows RDP boxes. So you can see my databases,

277
00:19:18,586 --> 00:19:21,914
my database users, I have access to those join sessions,

278
00:19:21,962 --> 00:19:25,426
I'm allowed. So we have Kate's here, that's Kubernetes and

279
00:19:25,448 --> 00:19:29,566
the different Kubernetes labels. So we can see that I'm in the internal

280
00:19:29,598 --> 00:19:34,898
Kubernetes user group and I can log in using

281
00:19:34,984 --> 00:19:38,406
this user group. And so this

282
00:19:38,428 --> 00:19:41,826
is how we map a teleport

283
00:19:41,858 --> 00:19:45,542
role to a Kubernetes RBaC role. We have that I'm access

284
00:19:45,596 --> 00:19:48,940
assistant masters because this is an admin role that I am in.

285
00:19:50,910 --> 00:19:54,406
And the neat thing about teleport is that you can actually revoke these user

286
00:19:54,438 --> 00:19:58,794
sessions. You can see these active sessions here and

287
00:19:58,832 --> 00:20:02,880
you can see the various audit logs, all my commands that I'm running here.

288
00:20:03,810 --> 00:20:07,054
And that's kind of teleport in a nutshell and how it works and how

289
00:20:07,092 --> 00:20:10,122
you can use it to securely access your Kubernetes

290
00:20:10,186 --> 00:20:14,382
resources. You can share different Kubernetes user groups

291
00:20:14,446 --> 00:20:17,646
between teleport roles securely because of this audit

292
00:20:17,678 --> 00:20:21,106
logging feature and because all of these sessions are

293
00:20:21,128 --> 00:20:25,070
mapped to an individual's identity, even if they are sharing

294
00:20:25,230 --> 00:20:28,406
Kubernetes RBAC roles, for instance, they all map back to

295
00:20:28,428 --> 00:20:32,482
a teleport RBAC role which maps back to your identity.

296
00:20:32,626 --> 00:20:35,990
So every activity that you do, every command that you run

297
00:20:36,060 --> 00:20:39,846
and all your session is mapped to the individual rather than the shared

298
00:20:39,878 --> 00:20:41,980
user group. Great.

299
00:20:42,990 --> 00:20:46,614
So what's next for teleport? Well, in teleport eleven,

300
00:20:46,662 --> 00:20:49,906
which we just released, we added support for GitHub actions.

301
00:20:50,038 --> 00:20:53,806
So this means that you can interact with teleport protected resources such

302
00:20:53,828 --> 00:20:57,390
as SSH kubernetes and your databases

303
00:20:57,810 --> 00:21:01,614
directly from GitHub actions workflows without using any

304
00:21:01,652 --> 00:21:05,614
long lived credentials. So you actually don't need to store any sensitive

305
00:21:05,662 --> 00:21:07,810
values in your GitHub repo.

306
00:21:08,630 --> 00:21:12,030
We also added Kate support for automatic service discovery.

307
00:21:12,110 --> 00:21:15,606
So this means that based on Kubernetes labels, teleport can

308
00:21:15,628 --> 00:21:19,798
actually pick up and onboard clusters and pods to

309
00:21:19,884 --> 00:21:23,906
the teleport management system. And this way there's

310
00:21:23,938 --> 00:21:27,702
no need to manually add these clusters and pods to

311
00:21:27,756 --> 00:21:31,926
teleport yourself. It's easy to scale up and down Kate's

312
00:21:31,958 --> 00:21:35,386
resources using teleport. So thank

313
00:21:35,408 --> 00:21:38,266
you so much for watching and I hope you learned a little bit about some

314
00:21:38,288 --> 00:21:41,582
of the pitfalls of Kubernetes access management and

315
00:21:41,636 --> 00:21:45,134
ways around them. So check us out

316
00:21:45,172 --> 00:21:48,526
on our website@gotelport.com or come

317
00:21:48,548 --> 00:21:52,414
say hi in our community slack at teleport, slack.com.

318
00:21:52,532 --> 00:21:56,014
We'll also be at an in person conference somewhere near you,

319
00:21:56,052 --> 00:21:59,726
I'm sure, very soon. So if you're around, come say hi. We'll be

320
00:21:59,748 --> 00:22:02,926
at reinvent pretty soon in Vegas. So thank you

321
00:22:02,948 --> 00:22:05,380
so much again and have great day.

