1
00:00:20,650 --> 00:00:24,174
Hello everyone. Hope you all are doing well. So let's begin

2
00:00:24,212 --> 00:00:27,686
the session of stack by first introducing myself. My name is

3
00:00:27,708 --> 00:00:31,250
Raid Asan and I am Pakistan's youngest rsecurity expert,

4
00:00:31,330 --> 00:00:35,106
and I've also spoken at many conferences and events like Black Hat,

5
00:00:35,138 --> 00:00:39,106
JISEC, and rsecurity summits held by government congresses

6
00:00:39,138 --> 00:00:43,158
as well. I'm also a threat researcher and a security researcher,

7
00:00:43,334 --> 00:00:47,002
along with being a certified purple teamer, which means that I can perform

8
00:00:47,056 --> 00:00:50,726
red team as well as blue team operations together towards protecting

9
00:00:50,758 --> 00:00:53,938
an enterprise rsecurity infrastructure. And I'm

10
00:00:53,974 --> 00:00:57,534
also available on LinkedIn for connections. So feel free to ask me

11
00:00:57,572 --> 00:01:00,746
any questions or any doubts that you have in a session

12
00:01:00,778 --> 00:01:04,474
or want to learn more about it. So yeah, feel free to connect and let's

13
00:01:04,522 --> 00:01:07,986
jump right into the session of stegnography. So in

14
00:01:08,008 --> 00:01:11,662
today's session we are going to have a look at a live demonstration

15
00:01:11,806 --> 00:01:16,178
of how adversaries are able to intercept your request of

16
00:01:16,264 --> 00:01:20,354
steganography. Like basically, steganography is the art of embedding

17
00:01:20,482 --> 00:01:24,342
data behind media files and people like

18
00:01:24,396 --> 00:01:27,606
why do people use it? Basically, IoT is to keep your

19
00:01:27,628 --> 00:01:30,966
confidential data safe from any unauthorized third party

20
00:01:30,998 --> 00:01:34,454
access. Now suppose you are sending a confidential

21
00:01:34,502 --> 00:01:38,074
data that is containing some bank details or username or

22
00:01:38,112 --> 00:01:42,006
passwords of any server that is pretty much confidential,

23
00:01:42,118 --> 00:01:45,262
and you don't want any unauthorized third party to gain access

24
00:01:45,316 --> 00:01:48,606
to it. So what you do is this is just one of

25
00:01:48,628 --> 00:01:52,026
the methods of encryption, or not encryption.

26
00:01:52,058 --> 00:01:55,854
Basically, it's just one of the ways of keeping your confidential

27
00:01:55,902 --> 00:01:59,086
data safe during transit or when it's in dynamic

28
00:01:59,118 --> 00:02:02,862
motion. So what you do is that you download

29
00:02:02,926 --> 00:02:06,578
any source, or you have any image, or any media file,

30
00:02:06,594 --> 00:02:10,166
or any audio file, and behind that image or any

31
00:02:10,188 --> 00:02:13,446
media file, you store your confidential data.

32
00:02:13,628 --> 00:02:17,174
And if you talk in terms of accurate terms, it means

33
00:02:17,212 --> 00:02:21,014
that you are embedding your data behind that media file.

34
00:02:21,142 --> 00:02:24,426
And what embedding does is that even if

35
00:02:24,448 --> 00:02:28,202
it's leaked to an unauthorized third party, they will open it and

36
00:02:28,256 --> 00:02:30,960
the data won't be seen, only the image will be seen.

37
00:02:31,410 --> 00:02:34,958
But if the adversary has both of the images or both of

38
00:02:34,964 --> 00:02:38,960
the media files that was original and as well as

39
00:02:40,210 --> 00:02:43,454
that was embedded with the data, there will be a difference between

40
00:02:43,492 --> 00:02:46,722
file sizes. The one with the embedded data will

41
00:02:46,776 --> 00:02:50,334
have a larger file size, and the one with not, which was originally

42
00:02:50,382 --> 00:02:54,334
downloaded or was from an original source won't

43
00:02:54,382 --> 00:02:57,830
contain any varying between sizes.

44
00:02:58,410 --> 00:03:01,846
So let's see it in action of how adversaries do

45
00:03:01,868 --> 00:03:05,222
this. Here I have the Kali Linux machine and on this

46
00:03:05,276 --> 00:03:09,270
side we have our target, which we are going to hack.

47
00:03:10,090 --> 00:03:13,818
Now what we are going to do is that we are going to access,

48
00:03:13,984 --> 00:03:17,402
first of all we are going to scan it if it's working

49
00:03:17,456 --> 00:03:20,566
or not, and if it has a web server

50
00:03:20,598 --> 00:03:24,430
application running behind it. And as we can see it has a port

51
00:03:24,500 --> 00:03:28,254
80 open, that is the HTTP port. And by this

52
00:03:28,292 --> 00:03:31,086
we know that there is a web server running behind it.

53
00:03:31,188 --> 00:03:34,850
So we are going to access it on our browser.

54
00:03:37,190 --> 00:03:41,460
And this is for demonstration purposes. So I'm going to show you.

55
00:03:41,830 --> 00:03:45,662
This was a directory that a hacker is busting

56
00:03:45,726 --> 00:03:50,370
on the web server. For directory busting you can use go Buster OwAsp

57
00:03:50,450 --> 00:03:53,586
directory buster or the normal, the ordinary

58
00:03:53,618 --> 00:03:57,510
directory buster tool that is pre installed on your Kali Linux machine.

59
00:03:58,810 --> 00:04:02,690
And here you can see I have the image TxT and I have the secret

60
00:04:02,770 --> 00:04:06,618
TCM this file as well. So for now we are interested

61
00:04:06,704 --> 00:04:10,686
in the image and here you can see it's a normal image of

62
00:04:10,708 --> 00:04:14,350
a Lamborghini car. So we are going to

63
00:04:14,500 --> 00:04:18,350
save it in our directory of steganography hacking

64
00:04:20,130 --> 00:04:24,450
and we are going to verify it if it's of correct formatting.

65
00:04:28,150 --> 00:04:31,778
Yes, it shows that it's JpeG format image data

66
00:04:31,944 --> 00:04:35,650
and it's not malfunctioned or mal,

67
00:04:37,450 --> 00:04:41,346
the headers are not misplaced and everything is accurate

68
00:04:41,378 --> 00:04:45,330
over here. So we are going to also have a look at the secret

69
00:04:45,410 --> 00:04:49,194
TXT over here and it says please

70
00:04:49,232 --> 00:04:53,030
don't share the credentials for my file. It's a secret data TxT

71
00:04:53,110 --> 00:04:56,762
and password 1234. Now we know that

72
00:04:56,816 --> 00:05:00,166
there wasn't any data TXT over here, the file

73
00:05:00,198 --> 00:05:03,760
wasn't listed and nor the password over here. Like any,

74
00:05:04,690 --> 00:05:08,734
every credential was stored in the secret TXT. So this gives

75
00:05:08,772 --> 00:05:11,934
us a hint that it can be in either of the two

76
00:05:11,972 --> 00:05:15,042
files, it can be in the Jpeg file or it can be in the web

77
00:05:15,096 --> 00:05:18,946
file. So most people prefer keeping their data

78
00:05:19,048 --> 00:05:22,226
or embedding their data behind image files. So we are

79
00:05:22,248 --> 00:05:25,966
going to see if there is any embedded

80
00:05:25,998 --> 00:05:30,126
data behind this image. And what tool I'm going to use is staghide

81
00:05:30,318 --> 00:05:33,446
steg hide is something, is a tool that

82
00:05:33,468 --> 00:05:37,286
you can install on your Kali Linux machine or any hacking platform that

83
00:05:37,308 --> 00:05:41,866
you are using. And what it does is that it

84
00:05:41,888 --> 00:05:45,802
gives you some functions that you can perform. For example, you can extract data

85
00:05:45,936 --> 00:05:49,606
as well as you can embed data into images or any media file.

86
00:05:49,638 --> 00:05:53,374
You are focusing into embedding your data and

87
00:05:53,412 --> 00:05:56,602
sending Iot to your receiver or your colleague, et cetera.

88
00:05:56,746 --> 00:06:00,970
So we are going to use this tool called stackhide. We have the image

89
00:06:01,050 --> 00:06:04,862
jpg with us and we are going to extract

90
00:06:04,926 --> 00:06:09,214
it from the source file of image gpg.

91
00:06:09,342 --> 00:06:12,786
And as we know data txt from

92
00:06:12,808 --> 00:06:16,146
the secret txt file which was posted on a web server,

93
00:06:16,178 --> 00:06:19,462
we know that there is a data txt or

94
00:06:19,596 --> 00:06:23,494
there can be this file with this password that

95
00:06:23,532 --> 00:06:24,680
we need to track.

96
00:06:26,890 --> 00:06:30,778
Now I'm going to exfiltrate this data

97
00:06:30,864 --> 00:06:35,078
txt from this source file and it requires a passphrase.

98
00:06:35,254 --> 00:06:38,346
And here we have a passphrase over

99
00:06:38,368 --> 00:06:41,614
here, password 1234. We can test it

100
00:06:41,652 --> 00:06:43,520
out if it's working over here.

101
00:06:44,930 --> 00:06:47,946
And yes it did. Here it's showing

102
00:06:47,978 --> 00:06:51,150
that wrote extracted data to data txt.

103
00:06:52,050 --> 00:06:55,746
Now here you can see we have data txt with us and we are

104
00:06:55,768 --> 00:06:59,566
going to see what content IoT has for us. It shows that the username

105
00:06:59,598 --> 00:07:02,914
is trunks and the password is user hint s

106
00:07:02,952 --> 00:07:06,694
is in dollar symbol. Now what IoT does is

107
00:07:06,732 --> 00:07:10,338
that it has exfiltrated the data from that image file

108
00:07:10,434 --> 00:07:14,066
and given me the access to the credentials

109
00:07:14,098 --> 00:07:18,066
that was stored in that particular file. By cracking

110
00:07:18,098 --> 00:07:21,766
that file's password, which was just hosted

111
00:07:21,878 --> 00:07:26,330
on the web server in clear text. So there was no complex cracking

112
00:07:26,830 --> 00:07:30,586
methods of password cracking like John the ripper or any password cracking

113
00:07:30,618 --> 00:07:33,870
tool that you might use. So it was just a simple task.

114
00:07:34,370 --> 00:07:38,350
Now this username and password can

115
00:07:38,420 --> 00:07:42,160
be connected over ssh with the victim as well. But for

116
00:07:42,530 --> 00:07:46,146
clarity, I'm going to access it directly on the victim's machine over here

117
00:07:46,248 --> 00:07:50,754
so that you get a better understanding of how hackers do this.

118
00:07:50,952 --> 00:07:55,278
Username is trunks and the password we are going to use is

119
00:07:55,464 --> 00:07:58,546
user with the dollar symbol.

120
00:07:58,578 --> 00:08:02,760
And as you can see, I have successfully gained access over the user account.

121
00:08:03,690 --> 00:08:10,502
Now for verifying, I can show you the id mih

122
00:08:10,566 --> 00:08:13,930
trunks. Now, a hacker doesn't want to stop

123
00:08:14,000 --> 00:08:17,526
here. What he aims is that he needs to escalate

124
00:08:17,558 --> 00:08:21,034
his privileges. And from my perspective, my best

125
00:08:21,072 --> 00:08:25,066
practice is to see the bash history or the commanding

126
00:08:25,098 --> 00:08:29,278
history that the victim might have typed on his or her system

127
00:08:29,444 --> 00:08:32,666
or the server they are working on, because history might contain

128
00:08:32,698 --> 00:08:36,034
some juicy information. For example, you might have written your username or

129
00:08:36,072 --> 00:08:39,682
password, you might have logged in into some of the websites or

130
00:08:39,736 --> 00:08:42,414
any other system you might have connected to using RDP,

131
00:08:42,462 --> 00:08:45,974
Ssh, FTP, any other protocol you're connecting. And that

132
00:08:46,012 --> 00:08:49,686
can show the hacker, the adversary, what usernames and

133
00:08:49,708 --> 00:08:53,782
password you might have used. So we are going to access the

134
00:08:53,836 --> 00:08:57,720
bash history over here. Can bash history

135
00:09:00,350 --> 00:09:04,374
here we can see a Perl programming

136
00:09:04,422 --> 00:09:07,900
language command over here that shows

137
00:09:08,270 --> 00:09:11,866
the user has created a user called Tom

138
00:09:12,048 --> 00:09:15,278
which has been assigned the root privileges and it

139
00:09:15,284 --> 00:09:18,698
is stored in the etc password directory. And the password

140
00:09:18,794 --> 00:09:22,910
is password at the red 973 which is again encrypted.

141
00:09:23,410 --> 00:09:27,278
So we are going to see if that user really exists which has been assigned

142
00:09:27,294 --> 00:09:30,862
the root privileges. Now it's asking for the password

143
00:09:30,926 --> 00:09:34,706
of the user tom. So we are going to use the password at

144
00:09:34,728 --> 00:09:38,406
the rate 973 in order to

145
00:09:38,428 --> 00:09:42,306
see if Iot really works. So I think I have written

146
00:09:42,338 --> 00:09:46,680
the password wrong. Password at the rate 973.

147
00:09:47,130 --> 00:09:50,218
Yes, so we are successfully inside

148
00:09:50,304 --> 00:09:54,410
the root privileging machine. Like I have escalated my

149
00:09:54,480 --> 00:09:58,442
privileges from user to root, and I am able to perform any

150
00:09:58,576 --> 00:10:01,040
administrator task on this Linux system.

151
00:10:02,210 --> 00:10:05,966
For example, I can verify who am I and the id is

152
00:10:05,988 --> 00:10:10,160
zero, which means I'm the administrator and we can

153
00:10:12,210 --> 00:10:15,954
txt for where you got root. So we have

154
00:10:15,992 --> 00:10:19,490
successfully escalated our privileges and I have shown you

155
00:10:19,640 --> 00:10:23,730
a way, or the method of how hackers use

156
00:10:23,800 --> 00:10:27,126
stack height like tools in order to extract data

157
00:10:27,228 --> 00:10:31,094
that you might have embedded behind your media files for

158
00:10:31,132 --> 00:10:34,754
confidentiality purposes. And in this way the confidentiality

159
00:10:34,802 --> 00:10:38,402
and the integrity and the availability of the data has been broken,

160
00:10:38,546 --> 00:10:41,850
like the complete CIA tried has been broken by the adversary

161
00:10:42,270 --> 00:10:45,526
by just using the steganography cracking

162
00:10:45,558 --> 00:10:48,950
technique. And you also know the tool that's called the staghide.

163
00:10:49,030 --> 00:10:52,782
You can also learn more about it for educational purposes of how

164
00:10:52,916 --> 00:10:57,040
hackers and adversaries use these tools in order to extract data

165
00:10:57,410 --> 00:11:00,750
and also store data in multiple formats of files. For example,

166
00:11:00,820 --> 00:11:05,058
in our case we had a JPEG file, but people

167
00:11:05,144 --> 00:11:09,010
can also store it in audio files, in video

168
00:11:09,080 --> 00:11:12,820
files, or any document, so that they like

169
00:11:13,990 --> 00:11:17,410
the format of embedding data behind images

170
00:11:17,490 --> 00:11:21,186
is a traditional method. Every hacker, whoever sees

171
00:11:21,218 --> 00:11:24,866
these images will surely go in depth

172
00:11:24,978 --> 00:11:28,242
of it, will scan it, will analyze it in depth.

173
00:11:28,306 --> 00:11:32,246
We'll use these kinds of tools like Steghyde, to see if any embedded

174
00:11:32,278 --> 00:11:35,706
data is there behind the file, behind the image file. But if

175
00:11:35,728 --> 00:11:39,494
you're using documents or audio files or any video files,

176
00:11:39,622 --> 00:11:43,670
that might iot be like the hacker might not go into

177
00:11:43,760 --> 00:11:47,280
in depth analyzation most of the times.

178
00:11:48,050 --> 00:11:51,118
So this was it for today's session of mine, and I hope you have a

179
00:11:51,124 --> 00:11:54,394
great day ahead. And you got to learn some new techniques and insights

180
00:11:54,442 --> 00:11:58,698
on how hackers use stenography techniques in order to exfiltrate

181
00:11:58,714 --> 00:12:01,934
your confidential data and gain access to your system. So once again,

182
00:12:01,972 --> 00:12:04,526
thank you very much for joining my session, and I hope you have a great

183
00:12:04,548 --> 00:12:04,780
day ahead.

