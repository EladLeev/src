1
00:00:27,090 --> 00:00:30,422
Hey there, I am Rishi and I'll be talking incremental

2
00:00:30,476 --> 00:00:33,960
incremental static regeneration, ISG and ISR layer zero.

3
00:00:34,330 --> 00:00:38,102
More about myself I am a solutions engineer at Layer Zero

4
00:00:38,156 --> 00:00:42,214
by limelight and I'm also a storyblock ambassador, so feel

5
00:00:42,252 --> 00:00:45,400
free to reach out to me in case you're trying any of them.

6
00:00:45,930 --> 00:00:48,760
Now let's look at what you can expect from this talk.

7
00:00:49,530 --> 00:00:53,086
I'll be covering what is ISD, the benefits of

8
00:00:53,108 --> 00:00:56,442
ISG, the drawbacks and how you can implement

9
00:00:56,506 --> 00:00:58,880
ISG with Nox, JS and layer Zero.

10
00:00:59,650 --> 00:01:03,502
But first, what is Layer Zero? Layer Zero

11
00:01:03,556 --> 00:01:07,266
is an all in one Jamstack platform thats you can use to develop,

12
00:01:07,368 --> 00:01:11,278
deploy, preview and monitor your front end. Our jam

13
00:01:11,374 --> 00:01:14,994
is to bring large and complex websites that serves up to

14
00:01:15,032 --> 00:01:17,670
millions of pages into subsecond loads.

15
00:01:18,570 --> 00:01:23,062
Now let's look at what is ISG first

16
00:01:23,116 --> 00:01:25,190
introduced by next JS developers.

17
00:01:25,690 --> 00:01:29,426
Incremental static generation helps you create pages after

18
00:01:29,468 --> 00:01:33,286
you have built your site, and it's

19
00:01:33,318 --> 00:01:36,586
kind of best of both the worlds because you only create pages that

20
00:01:36,608 --> 00:01:40,474
you need but still get that static performance on your dynamically

21
00:01:40,522 --> 00:01:44,414
built pages. But the issues that came with next

22
00:01:44,452 --> 00:01:48,446
JS ISR is it is

23
00:01:48,468 --> 00:01:51,120
dependent on the platform you're hosting your app,

24
00:01:51,890 --> 00:01:55,970
and it also requires an integration within the framework.

25
00:01:57,430 --> 00:02:01,460
Some platforms still support ISG only with NextJs,

26
00:02:03,510 --> 00:02:07,014
but with Layer Zero's general approach you can do ISG with any

27
00:02:07,052 --> 00:02:07,830
framework.

28
00:02:10,650 --> 00:02:14,486
Now let's look at an example of ISG. This is an

29
00:02:14,508 --> 00:02:18,606
official example for next JS, named as static tweet,

30
00:02:18,738 --> 00:02:22,780
in which you can create pages based on Tweet ID.

31
00:02:24,590 --> 00:02:28,054
With fallback true, you can choose to show a loading

32
00:02:28,102 --> 00:02:31,726
placeholder while the data is being fetched. For the

33
00:02:31,748 --> 00:02:35,200
first time a user visits an unbuilt page,

34
00:02:37,810 --> 00:02:42,270
but in the background that page after is rendered

35
00:02:42,690 --> 00:02:46,146
is cached and the data response for that particular

36
00:02:46,248 --> 00:02:49,934
page is also cached so that the next time a user visits

37
00:02:49,982 --> 00:02:53,780
the same page, they get to see that static build of the page.

38
00:02:58,600 --> 00:03:02,360
The other way to do IST is by fallback blocking,

39
00:03:02,940 --> 00:03:07,044
which is the preferred method in which if a user visits

40
00:03:07,092 --> 00:03:11,076
an unbuilt page, the request is first server

41
00:03:11,108 --> 00:03:14,652
side rendered. In this case the data

42
00:03:14,706 --> 00:03:18,044
is fetched on the server and then the build page is sent

43
00:03:18,082 --> 00:03:21,208
to the client, but the first user

44
00:03:21,224 --> 00:03:25,136
is bound to see some loading before the

45
00:03:25,158 --> 00:03:26,720
request gets fulfilled.

46
00:03:29,380 --> 00:03:32,624
But the next visits would still get that static super

47
00:03:32,662 --> 00:03:36,496
fast response. Now let's look

48
00:03:36,518 --> 00:03:40,228
at some benefits. With ISD you

49
00:03:40,234 --> 00:03:43,590
can create pages on demand, and that's pretty much ISD right?

50
00:03:44,840 --> 00:03:48,260
But with that you don't need to redeploy your website

51
00:03:48,330 --> 00:03:52,932
anymore. And now you don't need to pre render your pages

52
00:03:53,076 --> 00:03:55,480
because you can create pages on demand.

53
00:03:58,220 --> 00:04:01,592
With layer zero you can choose to keep cache or

54
00:04:01,646 --> 00:04:04,060
invalidate that between deployments.

55
00:04:05,280 --> 00:04:09,016
Or if you want to invalidate a specific page, use layer

56
00:04:09,048 --> 00:04:12,904
zeros console or the rest API to invalidate

57
00:04:12,952 --> 00:04:15,600
cache based on regular expressions.

58
00:04:18,660 --> 00:04:20,960
Now let's look at some drawbacks.

59
00:04:24,420 --> 00:04:27,856
The first user is bound to see a fallback, whether it's

60
00:04:27,888 --> 00:04:31,476
in term of a placeholder or it's being waiting for

61
00:04:31,498 --> 00:04:35,044
a request to get fulfilled. And some

62
00:04:35,082 --> 00:04:36,950
users might run into stale data.

63
00:04:40,260 --> 00:04:43,604
And with ISG you can

64
00:04:43,642 --> 00:04:47,296
break immutability. It's kind of dependent on the platform you are hosting

65
00:04:47,328 --> 00:04:50,740
your app onto. With layer zero you can choose into opt

66
00:04:50,810 --> 00:04:55,080
but of preserving the cache between deployments.

67
00:04:57,740 --> 00:05:01,544
So let's look at implementing incremental static generation with

68
00:05:01,582 --> 00:05:04,868
nastiers and layer zero. So first let's

69
00:05:04,884 --> 00:05:08,536
see that live in action. This is example we

70
00:05:08,558 --> 00:05:12,216
have prepared for next year. We chose with static tweet

71
00:05:12,328 --> 00:05:17,116
and I prefer medium so I built it within a medium example and

72
00:05:17,138 --> 00:05:20,956
now let's pick up a random medium handle. Let's copy

73
00:05:20,988 --> 00:05:24,336
this and we just need the user handle in here.

74
00:05:24,518 --> 00:05:28,512
So let me pick up this interrupt right

75
00:05:28,646 --> 00:05:32,020
and I'll hit this.

76
00:05:32,170 --> 00:05:36,004
And this does two things. First, it fetches the

77
00:05:36,042 --> 00:05:39,860
data JSON for this page which contains the data

78
00:05:40,010 --> 00:05:43,716
title items, the blogs and renders

79
00:05:43,748 --> 00:05:47,272
the page. Another thing is that

80
00:05:47,326 --> 00:05:51,076
it requests the same page again so that it's

81
00:05:51,108 --> 00:05:55,016
cached on the edge. And the next visits see those see the

82
00:05:55,038 --> 00:05:58,184
same page super fast. And to demonstrate

83
00:05:58,232 --> 00:06:01,688
that I'll reload the page and let's look at some timing.

84
00:06:01,864 --> 00:06:05,964
So the timing of this pages was 29 milliseconds and

85
00:06:06,002 --> 00:06:09,424
this is a whole lot faster. And in the preview you see that

86
00:06:09,462 --> 00:06:13,120
this page is server side render and sent statically

87
00:06:14,180 --> 00:06:17,756
that you have looked at ISD. With nux live in action,

88
00:06:17,948 --> 00:06:19,600
it's time for the steps.

89
00:06:21,380 --> 00:06:25,412
So the first step is to set up API routes with Nux and

90
00:06:25,466 --> 00:06:28,836
you can do it by using their server middleware property in

91
00:06:28,858 --> 00:06:32,276
nuxtjs config. You can link it to a

92
00:06:32,378 --> 00:06:36,280
custom Express server and use that for data fetching.

93
00:06:38,780 --> 00:06:42,180
The NextJs step is to set up dynamic pages in nuxtjs

94
00:06:42,340 --> 00:06:45,908
and that can be done by just saying pages blog,

95
00:06:46,084 --> 00:06:48,570
underscore, slug view and you're done.

96
00:06:49,340 --> 00:06:53,004
For data fetching I use async data which will

97
00:06:53,042 --> 00:06:57,272
either block the client side navigation or will server side render the request.

98
00:06:57,416 --> 00:07:01,090
So that the users only see the page when it's built.

99
00:07:02,900 --> 00:07:06,044
With layer zero deployment you get access to can environment

100
00:07:06,092 --> 00:07:10,304
variable known as API URL, which you can use to

101
00:07:10,342 --> 00:07:16,576
server side fetch the data the

102
00:07:16,598 --> 00:07:20,784
next step, and the most critical one in here, is to

103
00:07:20,822 --> 00:07:23,600
fetch the same page again when it's mounted.

104
00:07:25,220 --> 00:07:29,236
This ensures that the page is built on the edge and is ready to

105
00:07:29,258 --> 00:07:31,860
be served staticlike for the future visits.

106
00:07:34,920 --> 00:07:38,340
And the last step is to configure layer zeros Edge Js.

107
00:07:39,960 --> 00:07:43,784
So for example, you're visiting blog Shishir gen that

108
00:07:43,822 --> 00:07:47,496
falls under blog's dynamic username and it

109
00:07:47,518 --> 00:07:51,116
will be cached on the edge for an error and

110
00:07:51,138 --> 00:07:53,950
the data on the page will be revalidated per second.

111
00:07:55,600 --> 00:08:00,604
While it will not be cached on the browser and

112
00:08:00,642 --> 00:08:02,940
it will be served from a static folder,

113
00:08:04,740 --> 00:08:08,336
and in case it's not there on the edge, it renders it with

114
00:08:08,358 --> 00:08:11,808
the app. So for the first time it renders it with

115
00:08:11,814 --> 00:08:16,876
the app, but in case you're

116
00:08:16,908 --> 00:08:20,070
visiting for the next time it will serve it from the starting.

117
00:08:21,640 --> 00:08:25,300
And what do I mean by render with the app is that layer zero

118
00:08:25,370 --> 00:08:28,936
will go with nuxtjs and say please render this page for

119
00:08:28,958 --> 00:08:31,480
me so that I can save this for future requests.

120
00:08:33,100 --> 00:08:36,884
You can follow the same procedure by caching and evaluating

121
00:08:36,932 --> 00:08:39,080
the data for the API routes.

122
00:08:42,650 --> 00:08:45,926
This is the link for the example and you might want

123
00:08:45,948 --> 00:08:47,240
to take a look at that.

124
00:08:50,030 --> 00:08:53,386
I'm so excited to inform you that nasty beta is out and they

125
00:08:53,408 --> 00:08:57,810
will be soon, including incremental static creation with Naxas.

126
00:09:00,150 --> 00:09:01,200
Thank you for having me.

