1
00:01:41,970 --> 00:01:43,760
Let's start with a story.

2
00:01:45,250 --> 00:01:48,906
One of my first coding jobs was at a company called Gocardless.

3
00:01:49,098 --> 00:01:53,194
I'd been there for a few months when we had a major incident. Our API

4
00:01:53,242 --> 00:01:56,650
had slowed to accrual. I was pretty curious,

5
00:01:56,730 --> 00:02:00,254
so I jumped into the incident channel. One,

6
00:02:00,292 --> 00:02:03,280
endpoint in particular was consistently timing out.

7
00:02:03,650 --> 00:02:06,982
So we disabled it to get the system back up and running

8
00:02:07,036 --> 00:02:10,726
again. And it worked. Step one

9
00:02:10,828 --> 00:02:14,774
complete. Now we had to understand what

10
00:02:14,812 --> 00:02:18,634
had actually happened. There weren't any recent changes that

11
00:02:18,672 --> 00:02:22,246
looked suspicious, so youre attention shifted

12
00:02:22,278 --> 00:02:25,514
to the database. It turned out the

13
00:02:25,552 --> 00:02:28,954
query plan for this particular query had changed from

14
00:02:28,992 --> 00:02:33,022
something that was expensive but manageable to something that was

15
00:02:33,076 --> 00:02:36,746
not at all manageable. We made a subtle

16
00:02:36,778 --> 00:02:40,138
change to the query, which got the database to revert

17
00:02:40,234 --> 00:02:43,698
to the good old query plan and everything was back up

18
00:02:43,704 --> 00:02:45,780
and running. We'd fixed it.

19
00:02:47,030 --> 00:02:50,706
Well, I say we. I watched quietly from

20
00:02:50,728 --> 00:02:54,222
the sidelines, furiously taking notes. After the incident

21
00:02:54,286 --> 00:02:57,400
was over, I turned to a senior engineer in my team,

22
00:02:58,570 --> 00:03:02,120
Daniel, what is a query plan?

23
00:03:03,450 --> 00:03:07,398
We'll come back to that in a second. First of

24
00:03:07,404 --> 00:03:10,930
all, hi, I'm Lisa Colin Curtis.

25
00:03:11,090 --> 00:03:14,362
Last year I joined incident IO as employee number two.

26
00:03:14,496 --> 00:03:18,298
We build incident management tooling for your whole organization. And so of

27
00:03:18,304 --> 00:03:21,694
course, incidents and incident response are very close to my

28
00:03:21,732 --> 00:03:25,582
heart. And really this is a talk about

29
00:03:25,636 --> 00:03:29,274
why I've accelerated

30
00:03:29,322 --> 00:03:31,920
my career by running towards the fire.

31
00:03:32,950 --> 00:03:36,606
When I joined Gocardless, I was pretty junior

32
00:03:36,798 --> 00:03:40,034
and I progressed quite fast. I made

33
00:03:40,072 --> 00:03:42,690
senior a lot faster than I'd expected.

34
00:03:43,590 --> 00:03:47,270
I started reflecting on how that happened. Of course,

35
00:03:47,420 --> 00:03:51,394
like anything, it was a number of factors, but one pattern

36
00:03:51,442 --> 00:03:55,602
really stood out to me. The big changes in my understanding

37
00:03:55,746 --> 00:03:59,020
and my ability to solve larger, more complex problems

38
00:03:59,470 --> 00:04:02,780
came as a result of incidents that I'd been involved in.

39
00:04:03,630 --> 00:04:07,334
I was introduced to new technologies, learned new skills,

40
00:04:07,462 --> 00:04:10,640
and met people who became some of my closest friends.

41
00:04:11,410 --> 00:04:14,750
And every time I'd come out as a better engineer.

42
00:04:15,170 --> 00:04:17,950
And this is why I love incidents.

43
00:04:20,680 --> 00:04:24,944
Incidents broaden your horizons. As engineers,

44
00:04:25,072 --> 00:04:28,596
we inhabit a world full of black boxes, whether that's

45
00:04:28,628 --> 00:04:32,376
a programming language, a framework, or a database. We learn how

46
00:04:32,398 --> 00:04:36,164
to use the interface to get it to do whatever it is we need,

47
00:04:36,302 --> 00:04:40,364
and we move on. If we tried to understand how

48
00:04:40,402 --> 00:04:43,564
everything worked down to the individual chips on each

49
00:04:43,602 --> 00:04:46,184
machine, we'd never get to ship,

50
00:04:46,312 --> 00:04:48,030
well, anything.

51
00:04:49,540 --> 00:04:53,888
Incidents force you to open the black boxes around you, peek inside

52
00:04:54,054 --> 00:04:56,690
and learn just enough to solve the problem.

53
00:04:58,740 --> 00:05:02,176
After the incident, I read up on query plans

54
00:05:02,368 --> 00:05:05,924
and this proved very useful. It was not our

55
00:05:05,962 --> 00:05:09,616
last query plan. Related incident we did have can enormous

56
00:05:09,648 --> 00:05:12,230
postgres instance. After all,

57
00:05:12,760 --> 00:05:16,704
it was also useful for building new things. I was suddenly

58
00:05:16,752 --> 00:05:20,676
able to write code that scaled well the first time. Rather than relying

59
00:05:20,708 --> 00:05:23,560
on frankly, trial and error in production,

60
00:05:24,460 --> 00:05:28,548
incidents give you great signal about which of these black boxes are worth opening,

61
00:05:28,724 --> 00:05:32,430
and a real world example that you can use as a starting point.

62
00:05:35,520 --> 00:05:38,780
Incidents teach you to build systems that fail gracefully.

63
00:05:39,600 --> 00:05:43,676
One of the key follow ups from the API incidents was to add statement timeouts

64
00:05:43,708 --> 00:05:47,404
on all of our database calls. This meant

65
00:05:47,452 --> 00:05:50,704
that if we issued a bad query, postgres would try

66
00:05:50,742 --> 00:05:53,510
for a few seconds and then give up.

67
00:05:54,360 --> 00:05:58,112
That might sound counterintuitive, deliberately cancelling

68
00:05:58,176 --> 00:06:02,308
queries? Someone's going to be sad, but if my option

69
00:06:02,394 --> 00:06:06,068
is to do that, or to get rid of the whole API,

70
00:06:06,244 --> 00:06:09,880
of course I'd choose to degrade just a handful of queries.

71
00:06:11,180 --> 00:06:14,100
This is an excellent example of resilient engineering.

72
00:06:14,260 --> 00:06:17,480
Youre system can now handle unexpected failures.

73
00:06:17,980 --> 00:06:20,808
We don't need to know what will issue a bad query,

74
00:06:20,984 --> 00:06:23,390
just that it's likely that something will.

75
00:06:24,480 --> 00:06:27,736
It's possible to read about these ideas in a book. There are plenty

76
00:06:27,768 --> 00:06:31,504
of great modes, but in my experience, nothing compares to

77
00:06:31,542 --> 00:06:35,772
seeing it in action. During the incident,

78
00:06:35,916 --> 00:06:39,324
I learnt a whole set of tools that I could employ to reduce the blast

79
00:06:39,372 --> 00:06:42,924
radius of these kinds of failures, not just the statement

80
00:06:42,972 --> 00:06:46,596
timeouts which we implemented, but all the other options that

81
00:06:46,618 --> 00:06:49,620
the incident response team discussed and discarded.

82
00:06:51,960 --> 00:06:54,570
Incidents are a chance for blue sky thinking.

83
00:06:55,660 --> 00:06:59,064
A doctor never wants to amputate somebody's arm when they

84
00:06:59,102 --> 00:07:02,440
choose to. It's because the alternative is even worse.

85
00:07:03,340 --> 00:07:07,016
In an incidents, nothing is off the table when you're already in

86
00:07:07,038 --> 00:07:10,396
a bad place. Sometimes you have to make one thing worse to

87
00:07:10,418 --> 00:07:13,596
mitigate the wider problem, and that's what

88
00:07:13,618 --> 00:07:16,860
we did during our API incident. We disabled an entire

89
00:07:16,930 --> 00:07:20,512
endpoint, which feels like a thing that you'd never do,

90
00:07:20,646 --> 00:07:23,740
but in context was absolutely the correct choice,

91
00:07:23,900 --> 00:07:27,104
and if given it another time, I'd make the same

92
00:07:27,142 --> 00:07:30,336
choice again. Incidents give

93
00:07:30,358 --> 00:07:34,340
you a rare opportunity to think outside of your normal constraints.

94
00:07:34,680 --> 00:07:38,230
A degraded service is far better than a completely absent one.

95
00:07:40,890 --> 00:07:44,230
Incidents teach you to make systems easier to debug.

96
00:07:44,970 --> 00:07:48,774
Observability isn't straightforward. If you needed proof,

97
00:07:48,902 --> 00:07:52,780
I've certainly shipped plenty of useless log lines and metrics at my time.

98
00:07:53,630 --> 00:07:57,206
To build genuinely observable systems, you need to have empathy

99
00:07:57,238 --> 00:08:01,006
for your future self or teammate who'll be debugging the issue if

100
00:08:01,028 --> 00:08:05,022
they're unlucky at 02:00 in the morning. And that empathy is again,

101
00:08:05,076 --> 00:08:08,606
hard to learn in abstract. The people I've met who

102
00:08:08,628 --> 00:08:12,498
do this really well are leaning on their experience of debugging issues,

103
00:08:12,664 --> 00:08:15,938
their pattern matching on the things they've seen before,

104
00:08:16,104 --> 00:08:20,030
and that allows them to identify useful places for logs and metrics,

105
00:08:20,110 --> 00:08:23,906
and useful metadata to include incidents

106
00:08:23,938 --> 00:08:27,474
are a great shortcut to get this kind of experience and build a repository

107
00:08:27,522 --> 00:08:30,150
of patterns that you can recognize going forwards.

108
00:08:32,570 --> 00:08:36,210
Incidents build your network. They provide a

109
00:08:36,220 --> 00:08:39,802
great opportunity to meet people outside your team and forge strong

110
00:08:39,856 --> 00:08:43,626
relationships along the way. As psychologists have

111
00:08:43,648 --> 00:08:46,854
known for a while, there's something about going through a stressful

112
00:08:46,902 --> 00:08:51,070
situation with someone that forges a connection more quickly than normal.

113
00:08:52,530 --> 00:08:55,886
Kate was one of the account managers of a partner who was

114
00:08:55,908 --> 00:08:58,350
really badly affected by our API incidents.

115
00:08:59,330 --> 00:09:01,700
She turned out to be a great person to know.

116
00:09:02,710 --> 00:09:06,174
She managed a number of our biggest partners, so she had unique

117
00:09:06,222 --> 00:09:09,700
insights into what they wanted and how we could serve them better.

118
00:09:10,710 --> 00:09:14,294
Before the incident, I'm embarrassed to say I didn't even know

119
00:09:14,332 --> 00:09:17,826
her name and I was on the product team in charge

120
00:09:17,858 --> 00:09:19,830
of serving partners.

121
00:09:21,210 --> 00:09:24,578
Incidents are great for building relationships in the wider.org

122
00:09:24,754 --> 00:09:28,522
most of the non engineering folks I met at Gocardless, whether from

123
00:09:28,576 --> 00:09:32,090
finance, risk or support or marketing, were during

124
00:09:32,160 --> 00:09:35,562
incidents and those relationships proved really

125
00:09:35,616 --> 00:09:38,698
valuable. They gave me a mental map of the rest of

126
00:09:38,704 --> 00:09:42,366
the and meant that I had a friendly face that I could talk to when

127
00:09:42,388 --> 00:09:46,346
I needed advice. As I became more senior,

128
00:09:46,458 --> 00:09:50,586
that network became even more important as I was responsible for larger

129
00:09:50,618 --> 00:09:56,778
projects which had wider implications on the company can

130
00:09:56,804 --> 00:10:00,754
incidents are a chance to learn from the best when

131
00:10:00,792 --> 00:10:04,760
things go wrong when things go really, really wrong,

132
00:10:05,290 --> 00:10:09,000
people from all over the company get pulled in to help fix it.

133
00:10:09,530 --> 00:10:11,880
But they're not just any people,

134
00:10:12,890 --> 00:10:16,120
they're the people with the most context, the most experience,

135
00:10:16,590 --> 00:10:20,426
the most skill that everybody trusts to fix the

136
00:10:20,448 --> 00:10:23,994
hardest problems. Getting to spend

137
00:10:24,032 --> 00:10:27,274
time with these folks is rare. They're likely to be some of the busiest people

138
00:10:27,312 --> 00:10:31,022
in the company. Incidents provide a unique opportunity

139
00:10:31,156 --> 00:10:34,526
to learn from them and see firsthand how they approach a

140
00:10:34,548 --> 00:10:35,600
challenging problem.

141
00:10:38,130 --> 00:10:42,106
For me, the API incident gave me opportunities to learn much faster

142
00:10:42,138 --> 00:10:45,954
than I otherwise would have. Who knows how long it might have been before

143
00:10:45,992 --> 00:10:49,780
I'd realized that I really did need to know what a query plan was,

144
00:10:50,470 --> 00:10:53,380
probably until my own code broke. In the same way,

145
00:10:54,950 --> 00:10:58,386
incidents have unusually high information density compared with

146
00:10:58,408 --> 00:11:01,526
day to day work, and they enable you to piggyback on the

147
00:11:01,548 --> 00:11:05,686
experience of others at Gocardless, I was lucky.

148
00:11:05,798 --> 00:11:09,850
Their culture and processes meant that I could see incidents channels and follow

149
00:11:09,920 --> 00:11:13,690
along, allowing me the opportunity to accelerate.

150
00:11:14,350 --> 00:11:18,246
But that's not always the case. Some teams

151
00:11:18,278 --> 00:11:22,800
run incidents in private channels by default, operating an invite only policy.

152
00:11:23,570 --> 00:11:27,674
That means that junior members who want to observe rather than participate

153
00:11:27,802 --> 00:11:30,160
might not even be aware that they're happening.

154
00:11:31,810 --> 00:11:35,038
Sometimes people are excluded for other reasons.

155
00:11:35,214 --> 00:11:38,498
It's not culturally encouraged to get involved. There's an

156
00:11:38,504 --> 00:11:42,034
in group who handle all the incidents, and everyone else should just get

157
00:11:42,072 --> 00:11:44,870
out of their way. Joining that in group,

158
00:11:44,940 --> 00:11:48,630
even as a new senior can become almost impossible.

159
00:11:51,290 --> 00:11:54,914
So let's look at what we can do to build a culture where everyone can

160
00:11:54,972 --> 00:11:58,250
learn from incidents by making them accessible.

161
00:12:00,030 --> 00:12:02,970
First, declare lots of incidents.

162
00:12:03,470 --> 00:12:06,746
This is the single most impactful change you can make to your

163
00:12:06,768 --> 00:12:10,186
incidents process. If you only declare incidents when

164
00:12:10,208 --> 00:12:14,080
things get really bad, you won't get a chance to practice your incident process

165
00:12:14,850 --> 00:12:18,174
by lowering the bar for what counts as an incident. When the really

166
00:12:18,212 --> 00:12:22,610
bad ones do come around, the response is a well oiled machine.

167
00:12:22,950 --> 00:12:25,890
Everybody knows the tools, everybody knows the terminology,

168
00:12:26,310 --> 00:12:30,194
and everybody can act as best that they are able to

169
00:12:30,232 --> 00:12:33,886
try and fix the severe issue. It also helps

170
00:12:33,918 --> 00:12:37,846
with learning. When problems are handled as incidents, it makes them more

171
00:12:37,868 --> 00:12:41,414
accessible to everyone around you. Now,

172
00:12:41,452 --> 00:12:45,274
maybe it goes without saying, but if you want to encourage that, the first

173
00:12:45,312 --> 00:12:48,666
step is to stop counting incidents. If youre count your

174
00:12:48,688 --> 00:12:52,758
incidents and consider more incidents to be bad, that's a clear incentive

175
00:12:52,854 --> 00:12:56,090
against people declaring low severity incidents.

176
00:12:58,210 --> 00:13:01,310
Second, encourage everyone to participate.

177
00:13:02,210 --> 00:13:05,566
Incidents are great learning opportunities and they should be

178
00:13:05,588 --> 00:13:09,006
accessible to everybody. Incident channels should be

179
00:13:09,028 --> 00:13:13,250
public by default and engagement encouraged for team members at all levels.

180
00:13:13,990 --> 00:13:17,154
Of course, there can be too much of a good thing.

181
00:13:17,352 --> 00:13:21,106
Having 20 people descend into a minor incident channel may not

182
00:13:21,128 --> 00:13:24,558
be the outcome that you're hoping for, but most incidents can

183
00:13:24,584 --> 00:13:28,280
comfortably accommodate two or three junior responders tagging along.

184
00:13:29,370 --> 00:13:32,230
This doesn't have to come at the cost of a good response.

185
00:13:32,570 --> 00:13:35,910
You can get this experience in a low risk environment

186
00:13:36,410 --> 00:13:39,606
either by asking questions to someone who's not actively responding

187
00:13:39,638 --> 00:13:42,746
to the incident or doing what I did and saving them

188
00:13:42,768 --> 00:13:46,186
up for after it's resolved. There are

189
00:13:46,208 --> 00:13:50,182
also lots of other ways to gather learnings. Reading debrief documents

190
00:13:50,246 --> 00:13:53,742
or attending post incident reviews are both great ways of getting value

191
00:13:53,796 --> 00:13:57,114
from your team's incidents. You could even compile

192
00:13:57,162 --> 00:14:00,394
a list of the best incidents debriefs to share with new joiners.

193
00:14:00,522 --> 00:14:03,140
They're a great way to get started in a new company.

194
00:14:05,590 --> 00:14:09,106
Get into the habit of showing youre working in

195
00:14:09,128 --> 00:14:13,058
an incident. Youre should put as much information as you can into the incident channel?

196
00:14:13,224 --> 00:14:17,110
What command did you run? What theory have you disproved?

197
00:14:17,850 --> 00:14:21,398
If you're debugging on your own, I admit this can feel a

198
00:14:21,404 --> 00:14:24,486
little bit strange. I've been sat at 10:00 p.m.

199
00:14:24,508 --> 00:14:28,826
In an incident channel having a frankly delightful conversation with myself.

200
00:14:29,008 --> 00:14:32,566
But it's worth it, I promise. It's useful

201
00:14:32,598 --> 00:14:35,946
for your response, as it means you don't have to rely on your memory to

202
00:14:35,968 --> 00:14:39,606
know exactly what you've already tried and when. And it makes handing

203
00:14:39,638 --> 00:14:43,006
over much easier if actually you need to go to a meeting and

204
00:14:43,028 --> 00:14:46,666
somebody else needs to take over. But it's also beneficial

205
00:14:46,698 --> 00:14:50,206
for the rest of the team. By writing everything down,

206
00:14:50,308 --> 00:14:54,114
you're enabling everybody else to learn from your experience how

207
00:14:54,152 --> 00:14:57,826
you approach the problems. What are the things that you tried? Where did you

208
00:14:57,848 --> 00:15:02,242
look to find that bit of information? Just because it's obvious to you,

209
00:15:02,376 --> 00:15:04,600
it doesn't mean it's obvious to everybody.

210
00:15:06,170 --> 00:15:10,054
That means we should be using public slack channels wherever possible so that

211
00:15:10,092 --> 00:15:13,666
everyone can see and having a central location where folks

212
00:15:13,698 --> 00:15:17,034
can go to find incidents that they might be interested in.

213
00:15:17,232 --> 00:15:20,842
I'm a bit biased here, but using an incident management platform

214
00:15:20,976 --> 00:15:24,140
such as incident IO really does help with this one.

215
00:15:25,470 --> 00:15:28,830
And finally, watch out for anybody playing the hero.

216
00:15:29,970 --> 00:15:33,786
Often a single engineer takes on a lot of the incidents response burden,

217
00:15:33,898 --> 00:15:37,310
fixing things before anybody even knows that they're broken.

218
00:15:38,130 --> 00:15:42,160
Maybe that used to be you, maybe it still is.

219
00:15:43,350 --> 00:15:46,802
This doesn't end well for the hero. They'll stop getting as much credit

220
00:15:46,856 --> 00:15:50,446
as they expect for fixing things as it becomes normalized and they're

221
00:15:50,478 --> 00:15:54,018
at risk of burning out. But it also causes problems for

222
00:15:54,024 --> 00:15:57,254
the rest of the team. Without meaning to,

223
00:15:57,372 --> 00:16:01,254
the hero is taking away all of these learning opportunities from everyone else

224
00:16:01,372 --> 00:16:05,078
by fixing things quietly in the corner. And that teams,

225
00:16:05,164 --> 00:16:07,914
no one else is ever going to be able to do what they do as

226
00:16:07,952 --> 00:16:11,050
effectively because no one's had any practice.

227
00:16:11,550 --> 00:16:14,726
While that's perhaps can effective job preservation tactic,

228
00:16:14,838 --> 00:16:17,660
it's not going to result in a high performing team.

229
00:16:19,070 --> 00:16:22,282
If you think you get a lot of recognition for resolving incidents,

230
00:16:22,426 --> 00:16:26,062
imagine how much you can get. If you can level up your entire team

231
00:16:26,116 --> 00:16:27,680
so that they can do the same.

232
00:16:29,490 --> 00:16:33,242
So that's all we've got time for. Thanks so much for listening.

233
00:16:33,386 --> 00:16:36,558
If you're interested in incidents in general, we've got a slack community

234
00:16:36,644 --> 00:16:39,806
at incident IO slash community and I'd love to chat to you

235
00:16:39,828 --> 00:16:43,586
there or on Twitter. You can find me at Henge and I'll

236
00:16:43,618 --> 00:16:47,570
also be on the comp 42 discord server enjoy the rest of the conference.

