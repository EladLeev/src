1
00:00:25,970 --> 00:00:29,394
Hello and welcome to this talk on build cloud infrastructure

2
00:00:29,442 --> 00:00:33,234
using Python. My name is Sohan Maheshwar. I'm a dev advocate

3
00:00:33,282 --> 00:00:36,582
with AWS, and I'm here to talk to you about this very

4
00:00:36,636 --> 00:00:39,942
cool new cloud concept called infrastructure as

5
00:00:39,996 --> 00:00:43,702
code. So today, like I said, we will be talking about infrastructure as

6
00:00:43,756 --> 00:00:47,682
code. We will talk a little bit about AWS CDK,

7
00:00:47,826 --> 00:00:51,310
we will talk about how it works, and also on getting

8
00:00:51,380 --> 00:00:55,054
started. Now, this talk is aimed at a beginner to

9
00:00:55,092 --> 00:00:58,142
intermediate level. So if you don't know too much about

10
00:00:58,276 --> 00:01:01,934
cloud or cloud infrastructure, or even Python for that matter,

11
00:01:02,052 --> 00:01:05,278
this is a good talk for you, right? So let's get started.

12
00:01:05,364 --> 00:01:07,714
Now, a couple of years ago, or maybe it was a few years ago,

13
00:01:07,752 --> 00:01:11,438
what is time even right now? Our CTO, that is AWS's

14
00:01:11,454 --> 00:01:15,086
CTO, Dr. Ferna Fogels, said this at our annual conference

15
00:01:15,118 --> 00:01:18,878
at reinvent, and he said, so what does the future look like? All the

16
00:01:18,904 --> 00:01:22,086
code you ever write is business logic. Now, for those of you

17
00:01:22,108 --> 00:01:25,554
all in the crowd who do coding on a regular basis,

18
00:01:25,602 --> 00:01:28,662
you will know that you end up writing a lot of code to

19
00:01:28,716 --> 00:01:32,202
actually scaffold the business logic that your

20
00:01:32,256 --> 00:01:35,658
company typically needs. But we are slowly moving past that.

21
00:01:35,744 --> 00:01:39,450
If you really look at how coding has evolved, especially when you're building

22
00:01:39,520 --> 00:01:43,406
applications, we've gone from building huge monoliths, which is

23
00:01:43,508 --> 00:01:46,666
this massive application with so many interdependencies,

24
00:01:46,778 --> 00:01:50,670
to a list of microservices. And this is how

25
00:01:50,740 --> 00:01:54,434
modern applications look like they have a lot of bits. So you have your

26
00:01:54,472 --> 00:01:58,642
database, which is talking to your data lake, which is talking to your

27
00:01:58,696 --> 00:02:02,206
serverless app, which is talking to your data warehouse,

28
00:02:02,318 --> 00:02:05,826
queuing service, notification service, and all of that. This is

29
00:02:05,848 --> 00:02:08,854
how typically a modern application looks. Now,

30
00:02:08,892 --> 00:02:12,534
to create all of this, how do you actually do it?

31
00:02:12,732 --> 00:02:16,646
How do you actually create a serverless function or a database or a

32
00:02:16,668 --> 00:02:20,698
queuing system? And that's where really infrastructure AWS code

33
00:02:20,784 --> 00:02:25,190
comes in. How do you create these pieces of cloud infrastructure

34
00:02:25,270 --> 00:02:28,714
using code? The lowest level of actually doing this is to

35
00:02:28,752 --> 00:02:32,410
create this infrastructure by hand. This is typically, you have

36
00:02:32,480 --> 00:02:35,918
one awesome person in your team, and this person's doing all of this using

37
00:02:36,004 --> 00:02:39,306
a console. So if they're using aws, maybe the AWS console,

38
00:02:39,338 --> 00:02:42,838
and they're like coding, and they're doing all of this by hand, and they're creating

39
00:02:42,874 --> 00:02:45,970
your organization's infrastructure. Now, this is not

40
00:02:46,040 --> 00:02:49,602
recommended at all, because this is very manual, it's time

41
00:02:49,656 --> 00:02:53,026
consuming, it's hard to audit. I mean, even the

42
00:02:53,048 --> 00:02:56,546
best of employees can make a mistake once in a while,

43
00:02:56,648 --> 00:02:59,874
so it can be error prone. And most importantly,

44
00:02:59,922 --> 00:03:03,206
it's not reproducible. This is literally the equivalent of saying,

45
00:03:03,228 --> 00:03:06,614
hey, ask Alice, she knows what to do, because one

46
00:03:06,652 --> 00:03:10,198
person's doing all of this and then they have to teach another person, or there's

47
00:03:10,214 --> 00:03:14,054
a wiki, but it's not reproducible and it's not programmable.

48
00:03:14,182 --> 00:03:17,654
A layer above that is something that organizations

49
00:03:17,702 --> 00:03:20,986
have been using for a fair amount of time. And this in

50
00:03:21,008 --> 00:03:24,250
a way is infrastructure as code, but it is imperative

51
00:03:24,330 --> 00:03:27,806
infrastructure as code. So you have your employees who create,

52
00:03:27,908 --> 00:03:31,802
say, something like a deploy script, a typical shell script,

53
00:03:31,866 --> 00:03:35,698
which has things like, if your resource is equal to this,

54
00:03:35,784 --> 00:03:39,906
do this, else. If so, there's a lot of boilerplate code for

55
00:03:39,928 --> 00:03:44,638
this, but it is in a way automating how you create cloud infrastructure

56
00:03:44,814 --> 00:03:48,134
with imperative infrastructure as code. What if

57
00:03:48,172 --> 00:03:51,746
something fails and we need to retry it? Now this is a straight up script,

58
00:03:51,778 --> 00:03:55,222
so if something fails and something happens,

59
00:03:55,356 --> 00:03:58,870
that's it. You can't do much. Also, what if two people

60
00:03:58,940 --> 00:04:02,918
try to run the same script at once? And the larger the organization,

61
00:04:03,014 --> 00:04:06,714
the more the chances of this actually happening. So this could

62
00:04:06,752 --> 00:04:10,698
lead to things like race conditions where two things are trying to create

63
00:04:10,784 --> 00:04:13,946
cloud infrastructure at the same time, and of course could

64
00:04:13,968 --> 00:04:16,746
lead to a lot of errors and could lead to a lot of downtime,

65
00:04:16,778 --> 00:04:20,222
and we don't want that. So the level above this was something called

66
00:04:20,276 --> 00:04:23,614
declarative infrastructure as code, and a lot of

67
00:04:23,652 --> 00:04:26,962
organizations even now use this, and of course, I highly recommend

68
00:04:27,016 --> 00:04:30,686
it. So what happens is you write infrastructure

69
00:04:30,718 --> 00:04:34,402
as code in something like a TXT file, and you use services like

70
00:04:34,456 --> 00:04:37,698
AWS Cloudformation or hashicops terraform.

71
00:04:37,794 --> 00:04:41,266
Now this speaks to something like the AWS SDK,

72
00:04:41,378 --> 00:04:45,218
which then goes ahead and creates your organization's infrastructure.

73
00:04:45,314 --> 00:04:48,674
Let me give you a real world example. So suppose you're programming

74
00:04:48,722 --> 00:04:51,926
a robot to get you coffee at 09:00 a.m. On a Monday

75
00:04:51,958 --> 00:04:55,462
morning. Now this is very declarative, so you have to declare

76
00:04:55,526 --> 00:04:58,874
each and every step that the robot has to do. So you have to say,

77
00:04:58,912 --> 00:05:02,282
robot, walk ten steps down the hallway, take the first

78
00:05:02,336 --> 00:05:05,582
left, find the coffee machine, add milk to it.

79
00:05:05,636 --> 00:05:08,958
I like milk in my coffee. Add coffee powder, put a

80
00:05:08,964 --> 00:05:12,714
cup on the mug and bring it back. So you're actually defining

81
00:05:12,762 --> 00:05:16,354
each and every step. You're being declarative about every step that

82
00:05:16,392 --> 00:05:20,094
that robot has to do. That is what declarative infrastructure

83
00:05:20,142 --> 00:05:23,694
as code is. So typically that TXT file contains

84
00:05:23,742 --> 00:05:27,202
YamL or JSON code where you define literally

85
00:05:27,266 --> 00:05:30,258
every single thing about your infrastructure.

86
00:05:30,354 --> 00:05:33,862
So as an example, if you're creating an virtual private cloud

87
00:05:33,916 --> 00:05:37,330
or a VPC, so you say, I want to create a VPC,

88
00:05:37,410 --> 00:05:40,606
these are my subnets, these are my nat gateways, these are my cider

89
00:05:40,658 --> 00:05:44,186
blocks, these are my availability zones. Don't worry if you don't know what any of

90
00:05:44,208 --> 00:05:47,958
that stuff is. I barely do. But essentially you're defining

91
00:05:48,054 --> 00:05:51,614
every single thing in that virtual private cloud. A lot of

92
00:05:51,652 --> 00:05:55,646
organizations use this because like I said, it's very different from

93
00:05:55,668 --> 00:05:58,362
that level zero. So this is reproducible,

94
00:05:58,506 --> 00:06:02,830
it's not as prone to error, it's not time consuming,

95
00:06:03,890 --> 00:06:07,790
and people can work on it at the same time. So this is infrastructure

96
00:06:07,870 --> 00:06:11,586
as code, essentially, at its very logic. So you're coding in

97
00:06:11,688 --> 00:06:15,426
YamL or JSON, two ways to represent data, and you can

98
00:06:15,448 --> 00:06:18,082
maybe store this file on say an s three bucket,

99
00:06:18,226 --> 00:06:21,894
and you create infrastructure stacks using a

100
00:06:21,932 --> 00:06:25,426
service like AWS cloud formation. So you're saying, okay, create a virtual private

101
00:06:25,458 --> 00:06:28,790
cloud, create a database, create a lambda function,

102
00:06:28,940 --> 00:06:33,462
and all of this is being created using cloudformation. And your company's infrastructure

103
00:06:33,526 --> 00:06:37,066
is ready. Now, this is all well and good, but a couple

104
00:06:37,088 --> 00:06:41,098
of years earlier AWS introduced something which turned it a

105
00:06:41,104 --> 00:06:44,654
little and called it infrastructure is code, where you could do

106
00:06:44,692 --> 00:06:48,126
all of this using your favorite programming language, which in

107
00:06:48,148 --> 00:06:51,358
this case I assume is actually Python. So today we're going

108
00:06:51,364 --> 00:06:54,842
to tell you how you can build cloud infrastructure using Python.

109
00:06:54,906 --> 00:06:58,034
And honestly, I like giving this talk because I know a lot of people who

110
00:06:58,072 --> 00:07:01,474
code node js, Python, et cetera, but they're not sure that you can

111
00:07:01,512 --> 00:07:04,878
actually write code to create cloud infrastructure.

112
00:07:04,974 --> 00:07:09,026
And it usually blows their mind. They're like oh man, that's so cool. Because honestly

113
00:07:09,058 --> 00:07:12,866
I find writing cloud infrastructure using Yaml or JSON

114
00:07:12,898 --> 00:07:16,694
fairly tedious. It's a lot of lines of code, but I know Python or

115
00:07:16,732 --> 00:07:20,118
JavaScript programming and I can get started straight away. So that

116
00:07:20,204 --> 00:07:23,606
onboarding to creating cloud infrastructure is so much easier.

117
00:07:23,718 --> 00:07:26,806
There is no context switch. You can use the same id that you're

118
00:07:26,838 --> 00:07:30,042
using, you can use the same CI CD pipelines that your company

119
00:07:30,096 --> 00:07:33,706
uses. And of course it's completely customizable, it's shareable,

120
00:07:33,818 --> 00:07:37,614
and you can use constructs from programming like for loops and

121
00:07:37,652 --> 00:07:41,150
if else statements and conditions to actually build cloud

122
00:07:41,220 --> 00:07:45,318
infrastructure. How cool is that? So let's take a look at CDK,

123
00:07:45,354 --> 00:07:49,170
and infrastructure is code. So how it works in CDK is

124
00:07:49,240 --> 00:07:53,234
you would write a simple program. So let's call it app Py and that

125
00:07:53,272 --> 00:07:56,514
app Py interacts with cloud development

126
00:07:56,562 --> 00:08:00,230
kit, which then creates your infrastructure stacks using

127
00:08:00,300 --> 00:08:04,210
cloudformation. Provisioning that another layer of abstraction

128
00:08:04,290 --> 00:08:07,686
from writing verbose cloudformation code.

129
00:08:07,788 --> 00:08:10,806
Now you might think, hey, is only Python supported?

130
00:08:10,998 --> 00:08:14,874
I'm a person who writes in multiple languages. No, CDK is supported in

131
00:08:14,912 --> 00:08:18,522
typeScript, in Java, in C sharp, in what else?

132
00:08:18,576 --> 00:08:21,702
JavaScript, Python of course, and Golang

133
00:08:21,766 --> 00:08:25,514
support, which is coming soon, or if I'm not mistaken, is in preview

134
00:08:25,562 --> 00:08:29,194
mode right now. Do check it out. So what really is CDK?

135
00:08:29,242 --> 00:08:33,034
Well, it's an open source multi language software development

136
00:08:33,082 --> 00:08:35,598
framework for modeling cloud infrastructure.

137
00:08:35,694 --> 00:08:39,502
And like I said, you're basically creating cloud infrastructure

138
00:08:39,566 --> 00:08:43,006
using your favorite programming language. The great thing about this is it's

139
00:08:43,038 --> 00:08:46,646
completely reusable. So say you enter a new company and you're like

140
00:08:46,668 --> 00:08:50,806
hey, no one's actually done all of this. So you

141
00:08:50,828 --> 00:08:53,282
write a program in Python to create a database,

142
00:08:53,346 --> 00:08:57,222
and like a serverless function, you can actually give

143
00:08:57,276 --> 00:09:01,066
that same construct to someone else to create the same thing

144
00:09:01,168 --> 00:09:04,442
and reproduce it with all the defaults that you have actually built

145
00:09:04,496 --> 00:09:08,154
in. So I think that's pretty cool. The main three components of

146
00:09:08,192 --> 00:09:12,214
CDK are its core framework, which you see on the left. These are basically

147
00:09:12,272 --> 00:09:16,046
the resources that you can create. Now a bunch of resources together

148
00:09:16,148 --> 00:09:19,626
creates an infrastructure stack and a bunch of stacks

149
00:09:19,658 --> 00:09:23,374
together create an app that you will be building. There is also

150
00:09:23,412 --> 00:09:26,386
an extensive construct library. So as you would know,

151
00:09:26,408 --> 00:09:30,546
AWS has so many different services, 200 plus, and each

152
00:09:30,568 --> 00:09:34,030
of these has its, or most of these have their own construct

153
00:09:34,110 --> 00:09:38,018
libraries that either you can create or have already been created

154
00:09:38,114 --> 00:09:42,530
so that you can reuse. And lastly of course there is the AWS CDK

155
00:09:42,610 --> 00:09:46,246
CLI or command line interface, which is the interface you

156
00:09:46,268 --> 00:09:50,086
use to create all of this. Just to give you an example of how it

157
00:09:50,108 --> 00:09:54,266
makes your life easier, if I have to create a virtual private cloud with

158
00:09:54,368 --> 00:09:58,458
all those things that I told you about earlier, I'd have to write 270

159
00:09:58,544 --> 00:10:01,450
lines of cloud formation Yaml code.

160
00:10:01,520 --> 00:10:05,306
Honestly, that's quite a bit. I have to specify Nat gateway and subnet

161
00:10:05,338 --> 00:10:08,794
and availability zone and ciders and all of that with cloud formation.

162
00:10:08,842 --> 00:10:11,774
Take a wild guess as to how many lines of code you'll have to write.

163
00:10:11,892 --> 00:10:15,246
One, literally just one line of code. So I can just

164
00:10:15,268 --> 00:10:18,734
write something like VPC equals to EC two VPC

165
00:10:18,782 --> 00:10:22,126
and just give it a name and it actually creates a virtual private

166
00:10:22,158 --> 00:10:26,306
cloud for me with all of those settings enabled. Literally I

167
00:10:26,328 --> 00:10:29,734
can just do it with one line of code. If for instance I say,

168
00:10:29,772 --> 00:10:33,126
hey, maybe there's something in the defaults that I actually want

169
00:10:33,148 --> 00:10:36,646
to change up. I can just add that as a parameter. And then with two

170
00:10:36,668 --> 00:10:40,230
lines of code, I've created the same thing. So that's 270

171
00:10:40,300 --> 00:10:43,466
lines of Yaml code that I typically don't have to write.

172
00:10:43,568 --> 00:10:46,890
So let's take a look at how the deployment workflow actually

173
00:10:46,960 --> 00:10:50,826
is. So this is it. You typically start in the CLI with

174
00:10:50,848 --> 00:10:55,114
something like an CDK in it. And you should know what this does. It initializes

175
00:10:55,162 --> 00:10:58,542
a new project in CDK. You can also start with

176
00:10:58,596 --> 00:11:01,934
some sample apps, which it

177
00:11:01,972 --> 00:11:05,466
has a project navigation structure, it has the default.

178
00:11:05,498 --> 00:11:08,706
So it's just easier to do that. Once you've done that, you can do a

179
00:11:08,728 --> 00:11:12,974
pip install if there are any dependencies for your project. This uses

180
00:11:13,022 --> 00:11:16,226
the CDK CLI. Of course, once you've written

181
00:11:16,338 --> 00:11:19,814
your code to build cloud infrastructure, just three

182
00:11:19,852 --> 00:11:23,954
more steps to actually push that out to cloud. First one is CDksynth,

183
00:11:24,002 --> 00:11:26,770
which creates these templates and assets. Essentially,

184
00:11:26,850 --> 00:11:30,454
CdKsynth is creating it into a cloud formation code.

185
00:11:30,572 --> 00:11:33,802
You can do a CDK diff if you want to actually see

186
00:11:33,856 --> 00:11:37,238
what has changed. This is similar to a diff in say git

187
00:11:37,334 --> 00:11:41,094
where it actually says okay, you've added these new pieces of infrastructure,

188
00:11:41,142 --> 00:11:44,766
or you've removed these pieces of infrastructure, and finally you just

189
00:11:44,788 --> 00:11:48,174
do a deploy. And what this done is what this does is it just

190
00:11:48,212 --> 00:11:51,386
pushes all of the changes to the cloud. So say for instance,

191
00:11:51,418 --> 00:11:54,958
you create a simple serverless function to store data in a

192
00:11:54,964 --> 00:11:58,498
database. When you do synth, it'll create all of this. And then when you

193
00:11:58,504 --> 00:12:02,098
do a diff, it says okay, created database, created serverless function.

194
00:12:02,184 --> 00:12:05,774
And when you do deploy, it's actually pushed to your cloud provider

195
00:12:05,822 --> 00:12:09,154
so you can actually see what's happening. There we go. Now,

196
00:12:09,192 --> 00:12:12,726
I've spoken a lot about how this works in theory, et cetera, but I know

197
00:12:12,748 --> 00:12:15,426
you want to see a demo to see if I'm actually telling the truth.

198
00:12:15,458 --> 00:12:18,550
Is it really that easy? Well, it is. So let me quickly

199
00:12:18,620 --> 00:12:22,106
show you a demo. The prerequisites for this are fairly simple. Of course.

200
00:12:22,128 --> 00:12:25,702
You need Python, you need the AWS ClI and an AWS

201
00:12:25,766 --> 00:12:29,046
account and user. If you're not customer of AWS

202
00:12:29,078 --> 00:12:32,746
right now, there is a very, very generous free tier. Granted you have to

203
00:12:32,768 --> 00:12:36,650
enter a credit card, but you won't be charged. It's just for verification purpose.

204
00:12:36,730 --> 00:12:40,206
And the free tier limits are actually very extensive. So anything you

205
00:12:40,228 --> 00:12:43,614
want to do for testing or for just simple MVP, or just to

206
00:12:43,652 --> 00:12:46,914
play around with it, please go ahead and do so. But of course do check

207
00:12:46,952 --> 00:12:50,846
the billing page if you want clarity on what to do. Installing the AWS

208
00:12:50,878 --> 00:12:54,258
CDK toolkit is simple. Just do an NPM install or a

209
00:12:54,264 --> 00:12:58,066
Pip install. And just to make sure it's working, just do a CDK

210
00:12:58,258 --> 00:13:02,246
version in your CLI. So we're going to do something very simple

211
00:13:02,348 --> 00:13:05,110
and create a simple virtual private cloud.

212
00:13:05,180 --> 00:13:08,866
The same example that I was talking about. So far I've prerecorded

213
00:13:08,898 --> 00:13:12,266
this demo because creating the cloud formation takes maybe four

214
00:13:12,288 --> 00:13:16,422
to five minutes. So didn't want to waste your time looking at cloud formation scripts

215
00:13:16,486 --> 00:13:19,802
running. So let's go ahead and get

216
00:13:19,856 --> 00:13:23,390
started now. Hopefully you can see my screen. Yeah, there you go.

217
00:13:23,460 --> 00:13:27,230
So I'm just going to create a simple folder called CDK test and

218
00:13:27,380 --> 00:13:30,160
get into it. That's done.

219
00:13:31,330 --> 00:13:35,082
All right, so like I said earlier, we can start with CDK

220
00:13:35,146 --> 00:13:38,914
in it. And there are a bunch of sample apps that you can

221
00:13:38,952 --> 00:13:42,738
start with, right?

222
00:13:42,904 --> 00:13:46,158
So I said CDK init and I gave sample apps.

223
00:13:46,174 --> 00:13:49,510
So it gives you something with the project structure that you can start with.

224
00:13:49,580 --> 00:13:52,774
And you can specify the language with which you want to get

225
00:13:52,812 --> 00:13:55,782
started with. In this case python. So that's what's happening right now.

226
00:13:55,836 --> 00:13:57,830
It's creating a virtual environment.

227
00:13:59,470 --> 00:14:02,794
And all done now because

228
00:14:02,832 --> 00:14:05,946
I'm using Mac or if you're using Linux, you want to

229
00:14:06,048 --> 00:14:09,466
get into the virtual environment. So that's what I'm just doing right now,

230
00:14:09,648 --> 00:14:12,750
just activating it so that now I can actually run this

231
00:14:12,820 --> 00:14:16,574
python code. Okay, now that's done. Now this

232
00:14:16,612 --> 00:14:19,774
is the folder structure of what's created. As you can see,

233
00:14:19,812 --> 00:14:24,078
there is an app py and there is also a requirements TXT

234
00:14:24,174 --> 00:14:27,460
which has the dependencies of this project.

235
00:14:27,830 --> 00:14:31,186
So I'm going to do a pip install and first install the

236
00:14:31,208 --> 00:14:33,380
dependencies of this project.

237
00:14:36,710 --> 00:14:40,098
Just looking at requirements TXT, installing a whole bunch

238
00:14:40,114 --> 00:14:43,154
of packages and voila,

239
00:14:43,202 --> 00:14:47,074
it's done. So let me just open this. I'm opening it up in visual studio

240
00:14:47,122 --> 00:14:51,154
code. And there you go. This is the sample

241
00:14:51,202 --> 00:14:55,066
app. Again, if you're not getting what's happening here, it's completely fine. You can

242
00:14:55,088 --> 00:14:58,138
just delete all of it because it's a sample app, but you can take a

243
00:14:58,144 --> 00:15:01,406
look at the project structure. So this is

244
00:15:01,508 --> 00:15:05,278
app Py, right? Let me just do that app

245
00:15:05,364 --> 00:15:09,710
py where this is a starting point of your app when you're using CDK.

246
00:15:10,050 --> 00:15:13,582
So let's see here. And you can see something that says

247
00:15:13,636 --> 00:15:16,946
app synth and you see a region and a specification as

248
00:15:16,968 --> 00:15:20,434
well. You'll also see

249
00:15:20,472 --> 00:15:24,174
some boilerplate code, which we're going to delete all of them because we're

250
00:15:24,222 --> 00:15:28,070
starting from scratch right now. So like I said, we're building

251
00:15:28,140 --> 00:15:32,066
a very simple virtual private cloud. If you're using visual

252
00:15:32,098 --> 00:15:35,320
studio code, it does autocomplete. So that's another option.

253
00:15:36,410 --> 00:15:40,022
For each module that you want to install, or each

254
00:15:40,076 --> 00:15:43,734
construct that you want to install within your CDK

255
00:15:43,782 --> 00:15:46,938
app, you need to install it into your project first.

256
00:15:47,024 --> 00:15:50,858
This just makes sure that your project folder doesn't have all the AWS services

257
00:15:50,944 --> 00:15:54,286
installed. So if I have to create a virtual private cloud, I need

258
00:15:54,308 --> 00:15:57,566
the EC two construct. Or if I have to create can s

259
00:15:57,588 --> 00:16:01,610
three bucket, I need the s three construct. I can do that very easily

260
00:16:01,690 --> 00:16:05,038
by just going and doing a pip install followed

261
00:16:05,054 --> 00:16:07,170
by AWS.

262
00:16:07,590 --> 00:16:11,746
AWS two. So this is the construct for

263
00:16:11,848 --> 00:16:15,074
EC two specifically. So now that I've installed that

264
00:16:15,112 --> 00:16:19,218
construct, I can actually import it into my app py.

265
00:16:19,314 --> 00:16:23,014
Sorry, into my CDK test, underscore stack py. Literally just

266
00:16:23,052 --> 00:16:27,042
written one line of code that you see here. I've imported this module

267
00:16:27,106 --> 00:16:30,442
as EC two, so now I can reference EC two

268
00:16:30,496 --> 00:16:34,218
in my project. Let's go. Like I

269
00:16:34,224 --> 00:16:38,902
said, creating a VPC is literally one line of code. So I'm just saying VPC

270
00:16:38,966 --> 00:16:42,346
equal to EC two, VPC. As you can see,

271
00:16:42,368 --> 00:16:45,454
there's autocomplete with visual studio code as well.

272
00:16:45,572 --> 00:16:49,418
And you can literally give it any name. So I'm just calling it my VPC

273
00:16:49,594 --> 00:16:53,354
and done. Like I said, if there are other attributes

274
00:16:53,402 --> 00:16:56,930
you want to specify, you can do that too. Now,

275
00:16:57,080 --> 00:17:00,674
if I do a CDK diff, you will actually see the difference before and after

276
00:17:00,712 --> 00:17:04,100
I added that one line of code. There you go.

277
00:17:04,790 --> 00:17:08,434
Yeah, you can see VPC is added. There's a subnet right there,

278
00:17:08,472 --> 00:17:11,618
there's a root table, there's a nat gateway,

279
00:17:11,794 --> 00:17:14,534
whole bunch of other things. So all of this has been added with that one

280
00:17:14,572 --> 00:17:17,474
line of code. And now when I do CDK synth,

281
00:17:17,522 --> 00:17:21,014
it actually converts that one line of code into a cloud

282
00:17:21,052 --> 00:17:24,694
formation template, which you can push. As you can see, I've fast forwarded

283
00:17:24,742 --> 00:17:27,626
a little because this takes a couple of minutes, but that would have been your

284
00:17:27,648 --> 00:17:30,918
cloud formation code that you would have had to write if it weren't

285
00:17:30,934 --> 00:17:33,806
for CDK and if it weren't for that one line of code.

286
00:17:33,988 --> 00:17:36,160
Isn't that pretty cool? I think it's pretty cool.

287
00:17:36,930 --> 00:17:40,254
Okay, now I'm just going to do

288
00:17:40,292 --> 00:17:44,318
something called a bootstrap here. I essentially want to take

289
00:17:44,404 --> 00:17:47,954
this CDK app that I've built and push it out

290
00:17:47,992 --> 00:17:51,614
to the cloud. It has to typically read from an s three bucket.

291
00:17:51,662 --> 00:17:55,026
So that's how CDK works. Remember I mentioned that before? You can do it two

292
00:17:55,048 --> 00:17:59,202
ways. You can push this to s three, or you can use the CDK bootstrap

293
00:17:59,266 --> 00:18:02,486
command, which actually bootstraps this line of

294
00:18:02,508 --> 00:18:05,938
code into a temporary s three bucket. So it's creating

295
00:18:05,954 --> 00:18:09,206
a bootstrap environment. And now I can do a

296
00:18:09,228 --> 00:18:12,614
CDK deploy. So I just do a CDK deploy

297
00:18:12,742 --> 00:18:16,266
and all of my resources that have mentioned in that app will be

298
00:18:16,288 --> 00:18:19,818
created. You can see it says creating cloud formation chain set

299
00:18:19,904 --> 00:18:23,754
right here. This takes a minute or two because cloudformation

300
00:18:23,802 --> 00:18:27,326
has to create all these resources. And yeah, it's creating, you can see

301
00:18:27,348 --> 00:18:30,766
it's creating the VPC, it's creating some metadata. If you

302
00:18:30,788 --> 00:18:34,734
go to your AWS console, once it's done and just open

303
00:18:34,772 --> 00:18:38,674
up cloudformation, you will actually see this in process. You can actually see

304
00:18:38,712 --> 00:18:42,162
each of the events that are being created. So as you can see, it says

305
00:18:42,216 --> 00:18:45,666
create in progress. Can toggle the view nested button and

306
00:18:45,688 --> 00:18:48,726
see all of the events that are being created with that one line of code.

307
00:18:48,828 --> 00:18:51,960
Again, pretty cool. So as you can see, it's done.

308
00:18:52,890 --> 00:18:56,182
If you want to see for yourself if it's actually done, you can open.

309
00:18:56,316 --> 00:18:59,750
It says create complete. So you can open VPC on AWS

310
00:18:59,830 --> 00:19:03,194
and you will see that a virtual private cloud has been created just

311
00:19:03,232 --> 00:19:05,260
for you with that one line of code.

312
00:19:06,590 --> 00:19:09,660
Yay. Yeah, there it is.

313
00:19:10,270 --> 00:19:13,226
I mean, some of this stuff still blows my mind that you can do all

314
00:19:13,248 --> 00:19:16,414
of this with just that one line of Python code. Now of course,

315
00:19:16,452 --> 00:19:19,706
this was a very hello world type demo. Like I mentioned, this was a session

316
00:19:19,738 --> 00:19:23,518
for people who are new to this topic. But imagine entire

317
00:19:23,604 --> 00:19:26,914
applications in the infrastructure for each of these

318
00:19:26,952 --> 00:19:30,962
applications in lines of Python code. Now that means you can run your

319
00:19:31,016 --> 00:19:35,678
CI CD pipelines, you can share it with your teams people. It's very reproducible

320
00:19:35,854 --> 00:19:39,634
with creating applications. You do not have to reinvent

321
00:19:39,682 --> 00:19:43,042
the wheel. You can use something called CDK constructs.

322
00:19:43,106 --> 00:19:46,566
So let's take a look. Like I mentioned earlier, there is

323
00:19:46,588 --> 00:19:49,750
a library of constructs in AWS.

324
00:19:49,830 --> 00:19:52,566
For instance, for serves there's lambda API,

325
00:19:52,598 --> 00:19:55,974
gateway, dynamodb. If you want containers, there's ecs,

326
00:19:56,022 --> 00:20:00,102
Fargate. All of these pieces of infrastructure can be represented

327
00:20:00,166 --> 00:20:03,902
in code using CDK. And the good news is there are already

328
00:20:03,956 --> 00:20:07,614
constructs readily available with best practices built in so

329
00:20:07,652 --> 00:20:11,226
you don't have to create them from scratch. There are three types

330
00:20:11,258 --> 00:20:14,834
of construct levels. The base one is called an l

331
00:20:14,872 --> 00:20:18,546
one construct is a cloud formation resource, essentially. So this is

332
00:20:18,568 --> 00:20:22,078
a cloud formation resource that's automatically generated.

333
00:20:22,254 --> 00:20:26,002
Essentially it's using straight up, it's a one to one mapping

334
00:20:26,066 --> 00:20:29,334
class right between CDK and an

335
00:20:29,372 --> 00:20:32,674
AWS resource. So that's that. The level above

336
00:20:32,722 --> 00:20:35,778
that is what is called an AWS construct.

337
00:20:35,874 --> 00:20:38,934
Now these are slightly higher level service constructs like

338
00:20:38,972 --> 00:20:41,850
the one I just showed you in the demo. So if you want to create

339
00:20:41,920 --> 00:20:45,382
an s three bucket, you say new s three bucket and it's created.

340
00:20:45,446 --> 00:20:49,098
So there is a layer of abstraction above. These constructs are

341
00:20:49,104 --> 00:20:52,634
much simpler than a cloud formation resource and they require

342
00:20:52,682 --> 00:20:55,758
very little input, as you just saw. And finally,

343
00:20:55,844 --> 00:20:59,806
a layer three plus, which is purpose built constructs. Now like I

344
00:20:59,828 --> 00:21:03,466
said, these are very opinionated abstractions. So for instance,

345
00:21:03,578 --> 00:21:07,430
if I was building like a fairly complex load balancer,

346
00:21:07,530 --> 00:21:10,674
maybe I don't have to start from scratch. And maybe AWS tells you

347
00:21:10,712 --> 00:21:13,906
that these are the best practices that you want. So then you

348
00:21:13,928 --> 00:21:17,634
can use an l three construct to say okay, I'm just going to take

349
00:21:17,672 --> 00:21:21,062
these best practices and just create one. So let me give you an example.

350
00:21:21,196 --> 00:21:25,254
This is typically what an l one construct looks like where you're saying

351
00:21:25,372 --> 00:21:28,946
CFN bucket. So a cloud formation bucket, you're giving the name, the bucket

352
00:21:28,978 --> 00:21:32,682
name and all of that. And these are generating mappings from

353
00:21:32,736 --> 00:21:36,618
CDK to cloudformation. So if you can see in this demo,

354
00:21:36,784 --> 00:21:40,218
the type of bucket is here and you're mentioning that

355
00:21:40,304 --> 00:21:44,190
here as well. Also you're calling the name my bucket which is

356
00:21:44,260 --> 00:21:48,126
right here. So each of these things are one to one mappings of a

357
00:21:48,148 --> 00:21:51,354
CDK construct to a cloud formation template.

358
00:21:51,482 --> 00:21:55,322
Typically though, we will use l two constructs, which is what we just used.

359
00:21:55,396 --> 00:21:58,382
In this case we said new ec two VPC.

360
00:21:58,526 --> 00:22:01,586
It gives you all of these things ready to use. It's ready

361
00:22:01,608 --> 00:22:05,118
to use. All those ips are split default values.

362
00:22:05,214 --> 00:22:08,706
Good to go. This is fairly commonly used, especially when you're starting out

363
00:22:08,728 --> 00:22:11,974
as well. So do check it out. L two constructs can

364
00:22:12,012 --> 00:22:15,762
also be in this sort of case where you're building a slightly more complicated

365
00:22:15,826 --> 00:22:20,010
app. In this case you're building an app, something that gets an object

366
00:22:20,160 --> 00:22:23,866
from s three using lambda and then stores it into

367
00:22:23,968 --> 00:22:27,450
dynamodb. Now instead of creating each of these by hand or

368
00:22:27,520 --> 00:22:30,954
using cloud formation, you can actually write this code here

369
00:22:30,992 --> 00:22:33,866
to do all of it. So you can see there's a new table being created

370
00:22:33,898 --> 00:22:37,870
here. There's a new lambda function being created here and you're granting read

371
00:22:37,940 --> 00:22:41,806
and write properties. And of course you're able to read from

372
00:22:41,828 --> 00:22:45,874
an s three bucket right here. Again, just with what like 1015

373
00:22:45,912 --> 00:22:50,110
lines of code, I was able to create a fairly intermediate level of complexity

374
00:22:50,190 --> 00:22:53,730
app using Cdk and using an l two construct

375
00:22:54,150 --> 00:22:57,954
and finally an l three construct. Like I mentioned, this is purpose

376
00:22:58,002 --> 00:23:01,926
build. So in this example we are actually building a

377
00:23:01,948 --> 00:23:04,978
VPC with all of this subnets, nat gateways,

378
00:23:05,154 --> 00:23:08,962
root tables, all of that. This comes with a built in load balancer,

379
00:23:09,026 --> 00:23:12,714
so that if there is too much load, it's automatically balanced. And it comes

380
00:23:12,752 --> 00:23:16,118
with a Fargate service for serves, containerization,

381
00:23:16,294 --> 00:23:20,506
AWS well as an ECS task definition. Now you might think if

382
00:23:20,528 --> 00:23:25,054
I have to build this on cloud formation, it's going to take me 829

383
00:23:25,092 --> 00:23:29,018
lines of yaml code. Quite tedious, can be prone to error,

384
00:23:29,114 --> 00:23:32,782
but with an existing l three pattern, I'm actually able to

385
00:23:32,836 --> 00:23:36,426
create this using just four lines of code. So Amazon's launched

386
00:23:36,458 --> 00:23:40,242
few patterns, and the one you see here, you can just reference it from

387
00:23:40,296 --> 00:23:43,410
a particular registry and it creates all of it for you.

388
00:23:43,480 --> 00:23:46,018
Again, I think that is so cool, if I have to say so myself.

389
00:23:46,104 --> 00:23:49,286
So that is what an l three construct really is.

390
00:23:49,388 --> 00:23:53,026
The great thing about CDK, in my opinion, is that it's

391
00:23:53,058 --> 00:23:56,726
a very vibrant ecosystem and you can also create your

392
00:23:56,748 --> 00:23:59,814
own constructs or reuse constructs from people that

393
00:23:59,852 --> 00:24:03,046
are experts who have already created it. So there is CDK patterns,

394
00:24:03,078 --> 00:24:06,778
for example, that have pretty much every example or use case you

395
00:24:06,784 --> 00:24:10,534
can think of. So check it out. In fact, CDK day is a yearly

396
00:24:10,582 --> 00:24:14,138
or maybe bi yearly conference. It just happened I think a

397
00:24:14,144 --> 00:24:17,166
couple of weeks ago. Very vibrant community, so try and

398
00:24:17,188 --> 00:24:20,366
be a part of it as well and I'm sure you'll learn a lot.

399
00:24:20,468 --> 00:24:23,918
I've spoken a lot about CDK, but just to reiterate, there are a lot

400
00:24:23,924 --> 00:24:27,394
of benefits to using CDK. One, I feel not too

401
00:24:27,432 --> 00:24:31,026
many people know about it and they're very, very interested once I tell them

402
00:24:31,048 --> 00:24:34,786
about it. Especially the fact that you can use logic like if

403
00:24:34,808 --> 00:24:38,466
statements for loops, conditionals when defining infrastructure.

404
00:24:38,578 --> 00:24:41,814
And I think that's this great new paradigm that I think will

405
00:24:41,852 --> 00:24:45,986
be very common in the near future. You can also use object oriented

406
00:24:46,018 --> 00:24:49,546
techniques to model how your infrastructure should look. And of course

407
00:24:49,568 --> 00:24:53,270
you can reuse your current infrastructure as library.

408
00:24:53,430 --> 00:24:57,382
Most importantly, you can reuse your existing code review workflow.

409
00:24:57,446 --> 00:25:01,046
Typically that involves like a team lead, like some branching, some CI

410
00:25:01,078 --> 00:25:05,370
CD pipelines, and you can incorporate your cloud infrastructure

411
00:25:05,450 --> 00:25:08,846
into this workflow as well. And of course you can use it

412
00:25:08,868 --> 00:25:12,686
in the ide that you are already using with code completion. Anyway, I hope

413
00:25:12,708 --> 00:25:16,346
you learned something new today. If you are an intermediate user

414
00:25:16,378 --> 00:25:19,534
of CDK and you knew all of this stuff, then check out the next steps.

415
00:25:19,582 --> 00:25:22,898
There is a CDK workshop. There are a lot of samples you can check out.

416
00:25:22,984 --> 00:25:26,686
You can also contribute to the community. We'd love to hear or we'd

417
00:25:26,718 --> 00:25:29,906
love to have contributions from you. So yeah, do check it out.

418
00:25:29,928 --> 00:25:33,286
I think it's fascinating and I'd love to hear what you're building.

419
00:25:33,388 --> 00:25:35,894
If you have any questions, if you have any doubts or you just want to

420
00:25:35,932 --> 00:25:39,138
share what you've built, hit me up on Twitter, LinkedIn, twitch.

421
00:25:39,234 --> 00:25:42,646
I also run a YouTube show called the Emerging Tech show where I try

422
00:25:42,668 --> 00:25:45,794
to talk about emerging tech topics in a very non serious

423
00:25:45,842 --> 00:25:49,314
manner. I just did season one, so do check it out and I'm recording season

424
00:25:49,362 --> 00:25:53,214
two. Any way, hope you learned something new today and hope

425
00:25:53,252 --> 00:25:56,462
you're having fun at this conference. I'm having a great time so far.

426
00:25:56,596 --> 00:25:59,100
Enjoy the rest of the conference. Thanks for listening and see you soon.

