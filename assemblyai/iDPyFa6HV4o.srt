1
00:00:27,090 --> 00:00:30,914
Hi everyone, welcome to my talk that is called testy,

2
00:00:30,962 --> 00:00:34,918
a minimal testing tool designed for teaching a

3
00:00:34,924 --> 00:00:39,026
little bit about me my name is Nahuel Garbezza. I'm a software engineer from Buenos

4
00:00:39,058 --> 00:00:42,562
Aires, Argentina. I'd like to make high quality software.

5
00:00:42,626 --> 00:00:45,894
I work at a company called Tempines and I'm also

6
00:00:45,932 --> 00:00:49,946
a teacher. I teach object oriented programming and test driven development.

7
00:00:50,018 --> 00:00:53,950
It well I'm going to share you

8
00:00:54,020 --> 00:00:58,014
a tool. So first of all I wanted to share

9
00:00:58,052 --> 00:01:01,760
you how the tool was born in the first place.

10
00:01:03,090 --> 00:01:06,802
I had a challenge three years ago. I was about

11
00:01:06,856 --> 00:01:10,322
to teach object oriented programming using JavaScript. I've been using

12
00:01:10,376 --> 00:01:13,906
a small talk for the last six or seven years and this was the

13
00:01:13,928 --> 00:01:17,830
first time that I add Javascript to the syllabus.

14
00:01:18,730 --> 00:01:23,350
The topics were object oriented design and test driven development mostly.

15
00:01:23,770 --> 00:01:27,720
And one thing that I always do

16
00:01:28,510 --> 00:01:31,900
in all the courses that I do

17
00:01:32,510 --> 00:01:36,634
is to make sure that I have the right tools, to make sure

18
00:01:36,672 --> 00:01:40,574
that the concepts that I'm presenting are

19
00:01:40,692 --> 00:01:44,254
easily adopted and I don't have too much

20
00:01:44,292 --> 00:01:48,254
complexity on the tools that I'm using. So that was the

21
00:01:48,292 --> 00:01:52,126
whole mindset. So this

22
00:01:52,148 --> 00:01:55,570
is how a tool like this was born.

23
00:01:57,110 --> 00:02:00,178
One day in a class three years ago

24
00:02:00,264 --> 00:02:04,098
I ran out of exercises and I thought well,

25
00:02:04,264 --> 00:02:07,960
what can be my next exercise to practice with my students?

26
00:02:08,570 --> 00:02:12,390
And I has inspired

27
00:02:14,330 --> 00:02:18,106
in a Ken Beck's idea. I started to

28
00:02:18,128 --> 00:02:21,418
implement our testing tool with my students in

29
00:02:21,424 --> 00:02:26,060
the class with like a mopar programming idea.

30
00:02:27,150 --> 00:02:30,640
I didn't know exactly what the result would look like,

31
00:02:31,170 --> 00:02:33,470
but we started from the very beginning,

32
00:02:35,570 --> 00:02:38,954
which is the assert. So the most important part of a testing

33
00:02:39,002 --> 00:02:40,960
tool is the assert function.

34
00:02:42,530 --> 00:02:46,110
I even made fun of that and I was tweeting

35
00:02:46,190 --> 00:02:50,002
oh, I'm building a new testing framework. And that was

36
00:02:50,056 --> 00:02:53,454
just an assert function that you can see from the tweet.

37
00:02:53,582 --> 00:02:57,174
It's just a function that takes two values compare, and if those are

38
00:02:57,212 --> 00:03:01,030
equal it responds okay. If not it responds failure.

39
00:03:02,410 --> 00:03:05,606
That was like the walking skeleton for the

40
00:03:05,628 --> 00:03:09,050
tool. That was the seed.

41
00:03:10,750 --> 00:03:14,570
All the next functionality was built on top of that small

42
00:03:14,720 --> 00:03:18,218
function. We use that

43
00:03:18,304 --> 00:03:22,074
for do some sort of automated testing

44
00:03:22,122 --> 00:03:25,726
with our students. Of course this is very limited, but this is how

45
00:03:25,748 --> 00:03:26,640
we started.

46
00:03:30,210 --> 00:03:32,720
Then I continued developing this tool.

47
00:03:33,350 --> 00:03:37,166
We started using it on our classes like any other testing

48
00:03:37,198 --> 00:03:39,090
tool that you might imagine.

49
00:03:41,430 --> 00:03:45,560
When I was starting to do that along the course

50
00:03:46,010 --> 00:03:48,770
I started to build a vision,

51
00:03:48,850 --> 00:03:52,294
why do we need another testing tool? What do

52
00:03:52,332 --> 00:03:54,680
I want for this tool?

53
00:03:56,170 --> 00:03:59,466
I knew from the very beginning that I wanted to build something

54
00:03:59,568 --> 00:04:00,220
simple,

55
00:04:03,470 --> 00:04:07,062
like a source of inspiration is this article called the science

56
00:04:07,126 --> 00:04:10,846
principles behind a small talk that I truly recommend you to

57
00:04:10,868 --> 00:04:14,942
read it. If you haven't read it yet, it's a

58
00:04:15,076 --> 00:04:18,734
great piece of our computer science and

59
00:04:18,772 --> 00:04:20,320
software engineer history.

60
00:04:21,730 --> 00:04:25,134
If you don't know about the small talk, you should read it too. I truly

61
00:04:25,182 --> 00:04:28,850
recommend all the history to truly understand object

62
00:04:28,920 --> 00:04:32,260
oriented programming and simplicity in general.

63
00:04:32,630 --> 00:04:36,146
Most of the ideas that I try to reflect

64
00:04:36,178 --> 00:04:38,310
in this tool are from that article.

65
00:04:40,730 --> 00:04:43,190
What do I mean by simplicity?

66
00:04:44,650 --> 00:04:48,170
I can identify three aspects that can make

67
00:04:48,240 --> 00:04:51,260
my software simple and this tool in particular.

68
00:04:52,430 --> 00:04:56,150
This is a testing tool that doesn't have dependencies

69
00:04:56,230 --> 00:05:00,326
at all, which if you compare

70
00:05:00,358 --> 00:05:03,418
it to other testing tools like jest.

71
00:05:03,594 --> 00:05:07,294
If you install jest from the very beginning, you will have more

72
00:05:07,332 --> 00:05:11,258
than 300 dependencies and 42 megabytes on your node

73
00:05:11,274 --> 00:05:15,106
modules. I didn't want that for my students

74
00:05:15,208 --> 00:05:19,362
because we needed to use the tool for

75
00:05:19,496 --> 00:05:22,610
very simple exercises and cocatas.

76
00:05:23,910 --> 00:05:27,942
I even wanted for this tool to be able

77
00:05:27,996 --> 00:05:31,878
to be installed in places where the Internet connection is not good.

78
00:05:32,044 --> 00:05:35,254
So that's why the tool is just a few

79
00:05:35,292 --> 00:05:38,440
kilobytes and no dependencies at all.

80
00:05:38,910 --> 00:05:42,890
It should be fast, it should be easy to install and configure.

81
00:05:43,790 --> 00:05:47,242
That was the spirit. Another thing that I wanted

82
00:05:47,296 --> 00:05:51,930
for this tool is that all the code should be understandable.

83
00:05:52,090 --> 00:05:55,454
There should be no dark magic behind

84
00:05:55,652 --> 00:06:00,990
this tool, which sometimes

85
00:06:01,060 --> 00:06:04,610
we see in frameworks and libraries that we are

86
00:06:04,680 --> 00:06:07,746
even afraid to go and take a

87
00:06:07,768 --> 00:06:11,186
look at the code because we don't understand it. It's too

88
00:06:11,368 --> 00:06:15,006
complex. One decision that I made

89
00:06:15,128 --> 00:06:19,122
from the very beginning is to not use metaboramming unless

90
00:06:19,186 --> 00:06:22,726
it's strictly necessary. So if we look at

91
00:06:22,748 --> 00:06:26,178
the code today, there's no metaboramming usage.

92
00:06:26,354 --> 00:06:28,380
There's no need to do that.

93
00:06:30,590 --> 00:06:34,380
I wanted for students to take a look at the code,

94
00:06:35,710 --> 00:06:39,420
understand it, and even modify it if they

95
00:06:39,970 --> 00:06:43,040
have the knowledge to do that.

96
00:06:43,890 --> 00:06:47,758
Another thing that I wanted for this tool

97
00:06:47,844 --> 00:06:51,402
is to not have too many features,

98
00:06:51,466 --> 00:06:54,500
just have the set of features that I wanted.

99
00:06:55,270 --> 00:06:58,914
And it's not the idea to do

100
00:06:58,952 --> 00:07:03,090
a copy of all our testing tool. We are started

101
00:07:03,160 --> 00:07:06,886
from the very beginning like I showed you before, from an assert function, and then

102
00:07:06,908 --> 00:07:10,120
we build all the features on top of that.

103
00:07:13,050 --> 00:07:16,710
As I mentioned earlier, my inspiration was Ken Beck

104
00:07:18,670 --> 00:07:22,074
in the tester and development by example book, which is one of my

105
00:07:22,112 --> 00:07:25,594
favorite books and I recommend it to

106
00:07:25,632 --> 00:07:29,526
read. Kent starts implementing

107
00:07:29,558 --> 00:07:33,630
a testing tool using TDD. So it's like

108
00:07:33,780 --> 00:07:37,918
implementing and testing the wrong tool in the same process,

109
00:07:38,084 --> 00:07:41,626
which is very mind blowing because it's

110
00:07:41,818 --> 00:07:45,138
how you can test something that you already don't have.

111
00:07:45,304 --> 00:07:49,570
But if you read the book, it's brilliant.

112
00:07:50,070 --> 00:07:53,794
I tried to do the same on

113
00:07:53,832 --> 00:07:56,982
this tool. Every feature that

114
00:07:57,036 --> 00:08:00,898
was added has implemented using test driven development.

115
00:08:00,994 --> 00:08:04,834
That's why the tool today has a very high percentage

116
00:08:04,882 --> 00:08:08,620
of test coverage is beyond 95%.

117
00:08:09,870 --> 00:08:14,234
That's the spirit. So the

118
00:08:14,272 --> 00:08:17,514
tool was initially built three years

119
00:08:17,552 --> 00:08:20,746
ago, but I have been developing it to add in more

120
00:08:20,768 --> 00:08:24,640
features, correct bug and try to make it

121
00:08:25,170 --> 00:08:30,302
usable for my students. I basically got

122
00:08:30,356 --> 00:08:33,746
feedback from them and from even myself using the

123
00:08:33,768 --> 00:08:37,314
tool and build improvements on top

124
00:08:37,352 --> 00:08:41,026
of that. So today you

125
00:08:41,048 --> 00:08:45,102
can check the code in GitHub and it's downloadable using

126
00:08:45,176 --> 00:08:48,614
NPM. The current version is 5.1.

127
00:08:48,652 --> 00:08:52,662
I'm planning to make a new release soon, so stay

128
00:08:52,716 --> 00:08:57,990
tuned. And it's

129
00:08:58,990 --> 00:09:02,954
very important for me to have

130
00:09:02,992 --> 00:09:07,258
this project built in a way that everyone

131
00:09:07,344 --> 00:09:11,882
can contribute. So the opensource

132
00:09:11,946 --> 00:09:15,040
aspect of it is very important to me.

133
00:09:16,530 --> 00:09:20,858
That's why I try to do my best writing

134
00:09:20,954 --> 00:09:24,740
documentation about how to use the tool

135
00:09:25,110 --> 00:09:27,860
and how to contribute if you want to.

136
00:09:29,030 --> 00:09:32,690
Also there are documentation in English and Spanish because

137
00:09:32,840 --> 00:09:36,390
my course is in Argentina and it's all in Spanish.

138
00:09:38,410 --> 00:09:42,002
I also added issue templates, PR templates.

139
00:09:42,066 --> 00:09:45,080
If someone wants to report an issue,

140
00:09:45,930 --> 00:09:49,100
they will come across this template to fill.

141
00:09:50,830 --> 00:09:54,282
Every change that is added to the tool is documented in a change

142
00:09:54,336 --> 00:09:58,646
log. The project also used semantic

143
00:09:58,678 --> 00:10:01,946
versioning to know which release are breaking and

144
00:10:01,968 --> 00:10:05,950
which ones are for new features and which others are just back fixes.

145
00:10:09,090 --> 00:10:12,754
And that's very important because for me it was the first project where

146
00:10:12,792 --> 00:10:15,220
I started getting contribution from people.

147
00:10:16,710 --> 00:10:20,578
I am very thankful to 13 people that have

148
00:10:20,664 --> 00:10:23,620
contributed as of today to this project.

149
00:10:25,130 --> 00:10:28,802
I think that making this for to build documentation

150
00:10:28,866 --> 00:10:32,566
and write nice backlog with issues

151
00:10:32,668 --> 00:10:36,630
and especially good first issues that are

152
00:10:36,700 --> 00:10:40,426
tagged in the project help people to contribute on

153
00:10:40,448 --> 00:10:43,900
the project. I'm really grateful for that.

154
00:10:44,830 --> 00:10:48,540
That's all the open source spirit of that.

155
00:10:52,050 --> 00:10:56,622
One thing regarding that aspect of contributors that

156
00:10:56,676 --> 00:11:00,702
I recommend if you're building an opensource project is this all

157
00:11:00,756 --> 00:11:04,034
contributors bot, which is very

158
00:11:04,072 --> 00:11:07,634
good tool to recognize contributions. It makes you

159
00:11:07,672 --> 00:11:11,394
a section on the readme where you can displace all

160
00:11:11,432 --> 00:11:15,254
contributors faces and profiles. And it's a way

161
00:11:15,292 --> 00:11:18,790
to build a community that right now is small,

162
00:11:18,860 --> 00:11:22,280
but maybe one day it could be large.

163
00:11:25,850 --> 00:11:29,994
Regarding tool itself, I wanted

164
00:11:30,112 --> 00:11:33,754
for this tool to have assertions, which is the most

165
00:11:33,792 --> 00:11:37,786
important thing, and also a

166
00:11:37,808 --> 00:11:41,326
way to describe different tests and also a way to

167
00:11:41,348 --> 00:11:44,974
group test in test suites. That's the only thing

168
00:11:45,012 --> 00:11:48,702
that I wanted, I didn't want something more complex than

169
00:11:48,756 --> 00:11:52,480
that. The assertions are

170
00:11:53,250 --> 00:11:56,546
written in a fluent interface style that we are going to see

171
00:11:56,568 --> 00:12:00,466
in the demo later on. The idea is

172
00:12:00,488 --> 00:12:03,634
that you can check for object equality for inclusion in

173
00:12:03,672 --> 00:12:07,766
array exception racing, and some common

174
00:12:07,868 --> 00:12:11,542
scenarios that we face

175
00:12:11,676 --> 00:12:12,950
during testing.

176
00:12:16,170 --> 00:12:20,314
All the output from the tool is written in a console with

177
00:12:20,352 --> 00:12:23,574
color outputs where you can see errors,

178
00:12:23,622 --> 00:12:27,562
failures and things that were okay. It's also

179
00:12:27,616 --> 00:12:31,134
multilanguage because I wanted the output to be

180
00:12:31,332 --> 00:12:35,070
in other language as well right now, English and Spanish, but it's

181
00:12:37,010 --> 00:12:40,618
configurable to extend more languages

182
00:12:40,714 --> 00:12:44,266
in the future. And there's

183
00:12:44,298 --> 00:12:47,806
a feature for marking test suspending as many other testing

184
00:12:47,838 --> 00:12:51,794
tools have this idea of marking like a work in progress type

185
00:12:51,832 --> 00:12:55,138
of test. These two

186
00:12:55,224 --> 00:12:59,154
configuration parameters are the fail fast mode and random

187
00:12:59,202 --> 00:13:02,822
order that are the first one is to making sure

188
00:13:02,876 --> 00:13:06,278
that all the process stops at

189
00:13:06,284 --> 00:13:09,734
the very first failure if it's enabled. And instead of

190
00:13:09,772 --> 00:13:13,014
running all the test and report all the potential failures

191
00:13:13,142 --> 00:13:16,506
and the random order which is setting that I recommend it

192
00:13:16,528 --> 00:13:20,418
to enable by default is this idea of writing

193
00:13:20,614 --> 00:13:23,694
running the test in different order every time in

194
00:13:23,732 --> 00:13:26,906
random order. And that makes sure that your tests

195
00:13:26,938 --> 00:13:32,366
are independent, which is a very good sign

196
00:13:32,468 --> 00:13:35,458
and it's a good practice for your test to be independent. So if you want

197
00:13:35,464 --> 00:13:39,074
to enforce that, you can enable the random order setting and all the

198
00:13:39,112 --> 00:13:42,546
tests will run each time in a different

199
00:13:42,648 --> 00:13:46,722
order. So far those

200
00:13:46,776 --> 00:13:50,194
were all features that every testing tool may have.

201
00:13:50,232 --> 00:13:53,794
So there is no difference between using jest

202
00:13:53,842 --> 00:13:56,840
or using mocha or using this tool.

203
00:13:57,210 --> 00:14:00,882
But there are two things that I haven't

204
00:14:00,946 --> 00:14:03,370
identified in other testing tools,

205
00:14:04,590 --> 00:14:08,378
and I wanted for this tool because I think they

206
00:14:08,384 --> 00:14:12,410
are beneficial for students. That's why I

207
00:14:12,480 --> 00:14:15,854
mark them as unique. Maybe there are other testing tool tools that

208
00:14:15,892 --> 00:14:18,240
do that, but I'm not aware of that.

209
00:14:20,050 --> 00:14:23,634
The first one is that if somehow you

210
00:14:23,672 --> 00:14:27,010
run a test and the test doesn't run any assertions,

211
00:14:27,430 --> 00:14:30,754
that is an invalid scenario. That shouldn't happen.

212
00:14:30,872 --> 00:14:33,678
You should have at least one assertion.

213
00:14:33,854 --> 00:14:37,300
So if that happens,

214
00:14:37,670 --> 00:14:41,334
usually most tests in tools will report the test as success

215
00:14:41,452 --> 00:14:45,794
because there are no failures. That's the usual interpretation.

216
00:14:45,922 --> 00:14:48,700
But for this tool I try to make something different.

217
00:14:49,550 --> 00:14:51,690
In that case I raise an error.

218
00:14:52,750 --> 00:14:56,454
The error message says the test doesn't have any assertion,

219
00:14:56,502 --> 00:15:00,170
that is an invalid scenario. So if

220
00:15:00,240 --> 00:15:03,726
students make that mistake while they are learning

221
00:15:03,828 --> 00:15:07,822
to test or to make TDD, they can have the feedback and

222
00:15:07,876 --> 00:15:12,080
say, oh, I need to write an assertion for this test.

223
00:15:12,630 --> 00:15:15,780
That's one thing that I wanted for this tool,

224
00:15:16,950 --> 00:15:20,322
another feature that I added because I also

225
00:15:20,376 --> 00:15:24,340
saw that problem and see

226
00:15:24,890 --> 00:15:28,450
how can I make this tool to report feedback,

227
00:15:28,530 --> 00:15:31,622
proper feedback to the student is this idea of

228
00:15:31,756 --> 00:15:35,062
comparing undefined with undefined using

229
00:15:35,116 --> 00:15:38,486
an equal comparison, I'm going to

230
00:15:38,508 --> 00:15:40,970
show you why is there a problem in the demo,

231
00:15:41,120 --> 00:15:44,362
but the current

232
00:15:44,416 --> 00:15:48,186
behavior in the tool is that if you compare undefined with undefined, it will give

233
00:15:48,208 --> 00:15:52,110
you an error because it's like an undetermination scenario.

234
00:15:52,530 --> 00:15:55,918
In case you really want to test if a

235
00:15:55,924 --> 00:15:59,694
value is undefined, there's a special assertion for that which is

236
00:15:59,732 --> 00:16:04,066
undefined that is also built in in the tool that

237
00:16:04,088 --> 00:16:05,460
you can use for that.

238
00:16:07,270 --> 00:16:11,390
And going back a little bit on the simplicity

239
00:16:11,470 --> 00:16:15,862
aspect, I wanted to talk

240
00:16:15,916 --> 00:16:19,250
about how to control the complexity,

241
00:16:19,330 --> 00:16:22,802
because once you keep adding features and keep adding

242
00:16:22,866 --> 00:16:26,450
code, eventually tool might become complex.

243
00:16:26,530 --> 00:16:30,262
So can you control that somehow?

244
00:16:30,406 --> 00:16:33,980
Well, I don't have the right answer for that.

245
00:16:34,750 --> 00:16:37,926
What I do is to look for different things. Look for patterns

246
00:16:37,958 --> 00:16:42,154
in the code, look for some quality metrics

247
00:16:42,202 --> 00:16:45,630
like code complexity,

248
00:16:45,970 --> 00:16:50,670
or lines of code, or technical depth ratio.

249
00:16:51,090 --> 00:16:54,722
But one visual hint that helped me to control

250
00:16:54,776 --> 00:16:59,358
the complexity is this idea of module

251
00:16:59,534 --> 00:17:03,454
chart. So in this chart I'm displaying all the modules

252
00:17:03,502 --> 00:17:07,400
that are in the tool. As you can see, there are less than 20

253
00:17:07,770 --> 00:17:09,958
the dependencies between each other.

254
00:17:10,124 --> 00:17:13,766
So if I implement something and generate the

255
00:17:13,788 --> 00:17:17,862
graph for that, and it's too complex to understand, that means

256
00:17:17,916 --> 00:17:22,122
that I'm adding complexity. So I try to make this

257
00:17:22,176 --> 00:17:23,740
chart as simple as possible.

258
00:17:25,390 --> 00:17:29,034
This is just to have an idea of like a visual idea of how

259
00:17:29,072 --> 00:17:33,086
complex your software is. You can also detect, use it

260
00:17:33,108 --> 00:17:37,582
for detecting circular dependencies, which is

261
00:17:37,636 --> 00:17:41,210
usually a sign of something that is complex

262
00:17:41,290 --> 00:17:44,080
and might be written in a different way.

263
00:17:45,430 --> 00:17:48,690
By the way, the tool is called match, and I recommend

264
00:17:48,760 --> 00:17:52,334
it because it's interesting to see your software

265
00:17:52,382 --> 00:17:55,460
in a different way than just lines of code.

266
00:17:56,230 --> 00:18:00,278
All right, that's enough talking. I'm going to

267
00:18:00,444 --> 00:18:04,294
show you a little bit of demo about how the tool works and what

268
00:18:04,332 --> 00:18:07,746
you can do with it. So I'm switching

269
00:18:07,938 --> 00:18:11,494
to my ide. First of all,

270
00:18:11,532 --> 00:18:16,086
I have my testing tool checked

271
00:18:16,118 --> 00:18:19,546
out here. And as I mentioned before, the test

272
00:18:19,648 --> 00:18:23,466
tool is tested in itself. So all testing tools

273
00:18:23,498 --> 00:18:27,360
are written in testy. So what I'm going to do is to run my test.

274
00:18:27,730 --> 00:18:31,562
And if I run my test, I got 213

275
00:18:31,626 --> 00:18:35,634
tests passed. That's the number

276
00:18:35,672 --> 00:18:39,598
of tests that I have right now. This is the summary.

277
00:18:39,694 --> 00:18:43,634
You can see how many tests were passed. If there are failures, we will

278
00:18:43,672 --> 00:18:47,480
see them here and at the very beginning you will see

279
00:18:48,010 --> 00:18:51,698
like a starting message with all the configuration values.

280
00:18:51,794 --> 00:18:55,446
In this case, I'm not doing a fail fast thing and I'm running the

281
00:18:55,468 --> 00:18:58,200
test in random order.

282
00:19:00,330 --> 00:19:04,502
So I'm going to show you

283
00:19:04,636 --> 00:19:09,270
an example that I made for this forest conference.

284
00:19:10,370 --> 00:19:13,966
It's how to

285
00:19:13,988 --> 00:19:18,570
write test using this tool. So writing

286
00:19:18,650 --> 00:19:22,222
test is as easy as calling a test

287
00:19:22,276 --> 00:19:26,910
function that gets imported from our testing

288
00:19:27,510 --> 00:19:31,230
module, the test receive

289
00:19:31,390 --> 00:19:35,362
name and a function that is the test body, pretty much

290
00:19:35,416 --> 00:19:38,886
similar to other testing tools. If you use jest or if

291
00:19:38,908 --> 00:19:42,918
you use mocha, it's exactly the same name and a function

292
00:19:43,004 --> 00:19:46,870
representing the body. And tests are grouped inside

293
00:19:46,940 --> 00:19:50,890
test suite. So that's inside the function

294
00:19:50,960 --> 00:19:54,154
that is all the suite body. And you can

295
00:19:54,192 --> 00:19:57,610
write many tests in a test suite. As you can imagine,

296
00:20:01,570 --> 00:20:05,454
as I mentioned before, the test should

297
00:20:05,492 --> 00:20:09,054
have at least one assertion. And here I'm making a test very

298
00:20:09,092 --> 00:20:12,782
very simple, which is creating a cat and a dog

299
00:20:12,916 --> 00:20:16,562
with both have a name. So this is the code

300
00:20:16,616 --> 00:20:20,338
for cat and dog. Those are pretty simple, they have the same property

301
00:20:20,424 --> 00:20:24,180
called name. And I am asserting that the

302
00:20:25,110 --> 00:20:28,594
name of the cat is equal to the name of the dog.

303
00:20:28,792 --> 00:20:32,674
So I am expecting this test to run so I can do Npm

304
00:20:32,722 --> 00:20:35,894
test and pass the name of

305
00:20:35,932 --> 00:20:37,990
this file.

306
00:20:39,870 --> 00:20:44,186
And in this case it just runs the file that

307
00:20:44,208 --> 00:20:47,660
I specified, just like other testing tool tools do.

308
00:20:49,710 --> 00:20:53,934
Let's see some things

309
00:20:54,052 --> 00:20:57,614
that the tool provides. Let's say that I

310
00:20:57,652 --> 00:21:01,854
forget to write this assert I

311
00:21:01,892 --> 00:21:07,506
run my test. So if I run my test I

312
00:21:07,528 --> 00:21:10,930
got an error and the error says this test

313
00:21:11,000 --> 00:21:14,846
doesn't have any assertion. And this is the feedback

314
00:21:14,878 --> 00:21:18,086
that students find very helpful when writing test.

315
00:21:18,268 --> 00:21:22,374
So that is one of the unique features that I try

316
00:21:22,412 --> 00:21:26,600
to build for this tool.

317
00:21:27,210 --> 00:21:30,554
And the other unique feature that I mentioned before is

318
00:21:30,592 --> 00:21:34,234
this idea of undetermination if both things are

319
00:21:34,272 --> 00:21:38,218
undefined. So I guess you might experience

320
00:21:38,304 --> 00:21:41,754
this issue at some point in your career as a JavaScript

321
00:21:41,802 --> 00:21:44,430
developer where you misspell a feature,

322
00:21:45,810 --> 00:21:49,166
sorry, a property, right?

323
00:21:49,348 --> 00:21:53,182
You have a typo and this

324
00:21:53,316 --> 00:21:56,210
doesn't fail in JavaScript, these returns undefined.

325
00:21:57,750 --> 00:22:00,100
If I end up with something like this,

326
00:22:01,110 --> 00:22:04,958
most of the testing tool tools will report this as a success because

327
00:22:05,144 --> 00:22:08,790
this will be undefined and this will be undefined

328
00:22:09,690 --> 00:22:12,930
and the equality is undefined versus undefined.

329
00:22:13,010 --> 00:22:16,280
It's okay. Well, this tool doesn't do that.

330
00:22:17,050 --> 00:22:21,114
This reports a failure and the failure says that

331
00:22:21,312 --> 00:22:25,238
there is an equality. But equality is an undetermination

332
00:22:25,334 --> 00:22:28,746
because both parts are undefined and this

333
00:22:28,768 --> 00:22:32,494
is to prevent false positives because this test

334
00:22:32,612 --> 00:22:35,982
is definitely a false positive because

335
00:22:36,036 --> 00:22:40,014
I'm not testing that names are equal. In fact, names can be different

336
00:22:40,212 --> 00:22:43,730
and the test in regular testing tool tools will pass,

337
00:22:43,880 --> 00:22:47,886
right? That's why I implemented

338
00:22:47,918 --> 00:22:51,502
this tool, because it's a problem that I see when people start writing

339
00:22:51,566 --> 00:22:55,494
tests. It can be confusing to have this

340
00:22:55,612 --> 00:22:59,720
type of false positive. Regarding the

341
00:23:01,290 --> 00:23:03,590
fluent interface of assertions,

342
00:23:04,170 --> 00:23:07,866
the basic structure is that you have an object that

343
00:23:07,888 --> 00:23:11,946
is called assert, where you specify that a particular

344
00:23:12,048 --> 00:23:15,254
substrict matches a particular expectation,

345
00:23:15,382 --> 00:23:18,618
and you can use something

346
00:23:18,704 --> 00:23:22,270
like cert, an array

347
00:23:23,810 --> 00:23:27,374
is empty, something like this,

348
00:23:27,492 --> 00:23:30,640
or include certain value.

349
00:23:32,210 --> 00:23:35,442
It has always the same structure, but you also

350
00:23:35,496 --> 00:23:38,962
have some shorter ways to do that,

351
00:23:39,016 --> 00:23:42,894
like the one that is right below. So the assert

352
00:23:42,942 --> 00:23:46,674
are equal. It's an equivalent way of saying assert

353
00:23:46,722 --> 00:23:49,750
that something is equal to another thing.

354
00:23:49,900 --> 00:23:53,894
Those are equivalent and those are all documented. You can

355
00:23:53,932 --> 00:23:57,670
check for is null. You can also check for is undefined.

356
00:23:58,490 --> 00:24:02,378
There are check for raising an exception, for instance. That's another

357
00:24:02,544 --> 00:24:06,380
useful test. Those are all

358
00:24:06,910 --> 00:24:10,454
generated using the assert object that you also get imported

359
00:24:10,502 --> 00:24:14,154
from the testing module. So you just

360
00:24:14,192 --> 00:24:15,950
need to import the module,

361
00:24:17,890 --> 00:24:21,866
grab the assertion the assert object to make assertion suite

362
00:24:21,898 --> 00:24:25,306
and test, and I will show you how these pending

363
00:24:25,338 --> 00:24:27,780
and failed things work.

364
00:24:28,790 --> 00:24:32,830
Let's say that wanted to mark this test at work in progress

365
00:24:32,910 --> 00:24:36,614
because I didn't have time to fix that. So I can use this

366
00:24:36,652 --> 00:24:39,720
pending due to a particular reason.

367
00:24:40,490 --> 00:24:44,258
So if I run that, you will see that in yellow.

368
00:24:44,434 --> 00:24:49,306
This is something that most testing tool tools do.

369
00:24:49,408 --> 00:24:52,598
It's a way to mark test has it's

370
00:24:52,614 --> 00:24:56,586
not a success, it's not an error, it's just pending and it

371
00:24:56,688 --> 00:25:00,758
gets reported as pending. You can

372
00:25:00,784 --> 00:25:04,638
also explicitly fail a test

373
00:25:04,804 --> 00:25:08,346
if you reach to a certain point where you know the test should fail.

374
00:25:08,458 --> 00:25:12,378
You can say fail with and give an error message here.

375
00:25:12,484 --> 00:25:14,980
And this, as you might expect,

376
00:25:15,350 --> 00:25:19,214
it will return a failure. So in summary,

377
00:25:19,342 --> 00:25:22,978
you have five different states

378
00:25:23,064 --> 00:25:26,626
for a test. It can be success, it can be failure.

379
00:25:26,738 --> 00:25:29,894
If an assertion failed or the

380
00:25:29,932 --> 00:25:33,894
fail was called explicitly, it can be error. If something is

381
00:25:33,932 --> 00:25:37,186
invalid, or if an expected exception was raised

382
00:25:37,298 --> 00:25:41,066
in the middle of the test execution, it can

383
00:25:41,088 --> 00:25:44,426
be pending. And there's also

384
00:25:44,608 --> 00:25:48,202
another state

385
00:25:48,256 --> 00:25:51,434
that is called skipped that happens

386
00:25:51,472 --> 00:25:55,214
when you have the fail fast. So let's say that you run ten

387
00:25:55,252 --> 00:25:59,150
tests and the second one failed. So the remaining eight

388
00:25:59,220 --> 00:26:02,800
tests are skipped. They are not executed at all.

389
00:26:04,870 --> 00:26:09,026
That's pretty much the summary of the

390
00:26:09,048 --> 00:26:13,506
tool. There are more features, but this

391
00:26:13,528 --> 00:26:17,062
is like the overview. I wanted

392
00:26:17,116 --> 00:26:21,014
to thank you for watching this

393
00:26:21,052 --> 00:26:25,654
talk. If you are interested in the tool, you can visit the

394
00:26:25,692 --> 00:26:29,410
repo in GitHub. There's plenty of documentation

395
00:26:29,490 --> 00:26:33,398
and issues. I would recommend you for

396
00:26:33,484 --> 00:26:38,710
small projects like calling katas or like

397
00:26:38,780 --> 00:26:42,554
exercises. If you are teachers and you want to use this tool for teaching,

398
00:26:42,682 --> 00:26:45,120
I would love your feedback on that.

399
00:26:45,810 --> 00:26:48,606
If you are interested in what I'm doing,

400
00:26:48,788 --> 00:26:51,866
you can follow me on Twitter and GitHub.

401
00:26:52,058 --> 00:26:53,500
That's it. Thank you so much.

