1
00:00:41,010 --> 00:00:45,634
Hi everyone, my name is Josh Stella. I'm the CEO CTO

2
00:00:45,682 --> 00:00:49,462
of Fug. Fug is a company that secures cloud

3
00:00:49,516 --> 00:00:53,022
infrastructure structure toand checks it for compliance. For the last ten

4
00:00:53,076 --> 00:00:56,366
years, I've been living purely cloud security,

5
00:00:56,468 --> 00:00:59,802
both at Fugue as a co founder, also at AWS,

6
00:00:59,866 --> 00:01:03,690
where I was a principal solutions architect focused on national

7
00:01:03,770 --> 00:01:07,406
security. So that's a little of my background. Oh, I'm primarily

8
00:01:07,438 --> 00:01:10,706
a software developer and software architect prior to being a

9
00:01:10,728 --> 00:01:14,350
founder. Okay, today we're going to be talking about locking

10
00:01:14,430 --> 00:01:17,894
down the security of IAM. I'm going to pull my

11
00:01:17,932 --> 00:01:21,446
slides up here. Locking down the security of IAM in the

12
00:01:21,468 --> 00:01:25,106
AWS cloud. The focus today is purely on the AWS

13
00:01:25,138 --> 00:01:28,946
cloud. If you are new to IAM, this is actually

14
00:01:28,988 --> 00:01:32,902
going to be a pretty good introduction because we need to establish

15
00:01:32,966 --> 00:01:36,406
a mental model, an understand of what IAM

16
00:01:36,518 --> 00:01:39,862
is and how you use it if you're more experienced.

17
00:01:39,926 --> 00:01:43,306
I will be getting down into some details and hopefully

18
00:01:43,418 --> 00:01:47,514
this will be a really useful session. Okay. It's mostly

19
00:01:47,562 --> 00:01:50,666
going to be interactive session. Our whole agenda.

20
00:01:50,698 --> 00:01:54,066
I have five slides. Most of this is going to be hands on at the

21
00:01:54,088 --> 00:01:57,140
whiteboard, hands on at the console. Okay.

22
00:01:58,150 --> 00:02:01,442
But I do have five slides and they're really. But why

23
00:02:01,496 --> 00:02:04,962
cloud security is different than traditional data center

24
00:02:05,016 --> 00:02:09,090
security. We're going to do that deep dive into securing

25
00:02:09,170 --> 00:02:12,726
IAM, and there will be, of course, Q A.

26
00:02:12,828 --> 00:02:16,066
All right, so why cloud security is different? For lots

27
00:02:16,098 --> 00:02:19,654
of reasons. I'm going to really focus on a couple of these as they relate

28
00:02:19,702 --> 00:02:22,810
to this topic we're discussing today.

29
00:02:22,960 --> 00:02:26,166
So the way hackers approach

30
00:02:26,278 --> 00:02:29,526
kind of the attack surface of the Internet has changed

31
00:02:29,558 --> 00:02:32,726
over time. In the old days, sort of the Hollywood version

32
00:02:32,758 --> 00:02:36,058
of hacking, which, by the way, does still happen. The hackers

33
00:02:36,154 --> 00:02:39,854
pick but an organization and then find a way in, right? So they

34
00:02:39,892 --> 00:02:43,650
identify the target and they search for vulnerabilities, or create

35
00:02:43,720 --> 00:02:47,042
vulnerabilities through things like social engineering. This does still

36
00:02:47,096 --> 00:02:50,354
happen. Some famous examples of this are

37
00:02:50,472 --> 00:02:54,158
the north korean breach of Sony's network, Sony motion

38
00:02:54,174 --> 00:02:57,238
Pictures. They made a movie they didn't like and so they went after them.

39
00:02:57,324 --> 00:03:00,614
But far more often, it is what we're calling

40
00:03:00,652 --> 00:03:05,154
here the cloud exploit strategy, which is the hackers are using automation

41
00:03:05,282 --> 00:03:09,414
to just look at every single object they can reach via

42
00:03:09,462 --> 00:03:13,274
the Internet and looking for misconfigurations very often on

43
00:03:13,312 --> 00:03:17,238
cloud, looking for things like IAM and s. Three misconfigurations,

44
00:03:17,334 --> 00:03:20,630
IAM being the permissions that are granted, but also bucket policies.

45
00:03:20,710 --> 00:03:24,282
There's a lot of things they're looking for. And then their automated

46
00:03:24,346 --> 00:03:27,806
tools essentially give them a shopping list that they

47
00:03:27,828 --> 00:03:31,150
can then use to go pick, but who to attack from.

48
00:03:31,220 --> 00:03:34,734
And some of the really high profile big attacks, like the capital

49
00:03:34,782 --> 00:03:37,934
one breach, that's how that was done. She didn't target capital

50
00:03:37,982 --> 00:03:41,442
one. Her automations discovered that. Now, John Breeden here

51
00:03:41,496 --> 00:03:45,070
is saying that within a few hours of deployment,

52
00:03:45,150 --> 00:03:49,254
these assets are being scanned by hackers and bad guys.

53
00:03:49,452 --> 00:03:53,010
We think that is an extremely rosy estimate.

54
00:03:53,090 --> 00:03:56,710
It is more like five to seven minutes. So what that means is

55
00:03:56,860 --> 00:04:00,166
when you put an object, a resource, a cloud resource,

56
00:04:00,278 --> 00:04:03,754
out onto the public cloud within a few minutes,

57
00:04:03,872 --> 00:04:07,194
it has been examined by hackers who

58
00:04:07,232 --> 00:04:11,158
intend to discover its vulnerabilities. And if it has vulnerabilities,

59
00:04:11,254 --> 00:04:15,262
they've probably found them. So a whole lot of these breaches probably

60
00:04:15,316 --> 00:04:19,118
go unknown and unpublished, or unpublished toand unknown in some of

61
00:04:19,124 --> 00:04:23,006
the notable breaches we've seen in recent years. The only reason

62
00:04:23,108 --> 00:04:26,850
the victims found out about the breach at all is because

63
00:04:27,000 --> 00:04:30,002
the hacker bragged about it on social media or something like this,

64
00:04:30,056 --> 00:04:33,022
even months after the actual breach occurred.

65
00:04:33,086 --> 00:04:37,014
So it's a brave new world. All right, so the

66
00:04:37,052 --> 00:04:40,502
main attack surface in the cloud is

67
00:04:40,556 --> 00:04:44,438
not the operating system of servers that you have hosted in the

68
00:04:44,444 --> 00:04:48,006
cloud. It's not the configuration of your applications or the

69
00:04:48,028 --> 00:04:51,242
security of the applications that's much more relevant to the data center.

70
00:04:51,296 --> 00:04:54,202
You still need to do it in the cloud, but you have this new attack

71
00:04:54,256 --> 00:04:58,150
surface in cloud, which is the vast majority of hacks,

72
00:04:58,230 --> 00:05:01,966
which is the misconfiguration of the cloud resources themselves.

73
00:05:02,148 --> 00:05:05,370
And very often in the press, these things are portrayed

74
00:05:05,450 --> 00:05:08,666
in overly simplified ways. I've been interviewed

75
00:05:08,698 --> 00:05:12,558
with some frequency by journalists trying to get their head around how

76
00:05:12,644 --> 00:05:15,954
a bunch of data was exfiltrated out of s three. And they

77
00:05:15,992 --> 00:05:19,426
always go into it thinking, well, the s three bucket was left just open to

78
00:05:19,448 --> 00:05:23,502
the wide world. Very often it wasn't. There was some combination,

79
00:05:23,646 --> 00:05:25,454
usually using IAM,

80
00:05:25,582 --> 00:05:28,866
misconfigurations. CTO, get to the s three data.

81
00:05:28,968 --> 00:05:32,626
Okay? So at Fugue, we cover all these different compliance standards

82
00:05:32,658 --> 00:05:36,214
for you more than anyone else, ISO, toand, NIST and

83
00:05:36,252 --> 00:05:40,474
HIPAA, GDPR, CIs, et cetera, et cetera. And what we've learned is

84
00:05:40,592 --> 00:05:43,862
that those compliance standards, even in their most conservative

85
00:05:43,926 --> 00:05:47,098
interpretation, which is how we do it at very. I mentioned I

86
00:05:47,104 --> 00:05:50,374
have a national security background. We are exceptionally paranoid

87
00:05:50,422 --> 00:05:53,414
in our interpretations. In a good way. We're going to look for everything.

88
00:05:53,552 --> 00:05:57,326
But even when you do that, a lot of the techniques that the

89
00:05:57,348 --> 00:06:00,746
hackers are using are not caught by those compliance standards.

90
00:06:00,858 --> 00:06:04,170
A lot of stuff is, and you want to use those, but a lot of

91
00:06:04,180 --> 00:06:08,142
things aren't. So even if you're sitting there thinking, well, I know IAM

92
00:06:08,206 --> 00:06:12,398
is secure because I've examined it against the best practices

93
00:06:12,494 --> 00:06:16,498
and I've used the AWS IAM analyzer. IAM analyzer.

94
00:06:16,594 --> 00:06:20,002
You probably still have highly vulnerable IAM configurations.

95
00:06:20,066 --> 00:06:24,066
It's hard not to. And they're usually missed by security tools,

96
00:06:24,098 --> 00:06:28,118
okay. Because they're not recognized as vulnerabilities. One example,

97
00:06:28,204 --> 00:06:31,686
and I'll come back to this, is there is one action

98
00:06:31,798 --> 00:06:35,894
in EC two. It's not even can IAM that allows an EC

99
00:06:35,942 --> 00:06:39,526
two instance to change which IAM policy applies

100
00:06:39,558 --> 00:06:42,858
to itself. A lot of people have this turned on by accident.

101
00:06:42,954 --> 00:06:46,094
That is a massive breach potential to it,

102
00:06:46,132 --> 00:06:49,706
okay? Same thing with things like s three list in these IAM permissions,

103
00:06:49,818 --> 00:06:53,418
really, really dangerous in production environments, really dangerous,

104
00:06:53,514 --> 00:06:56,974
but probably looks fine to your security tooling.

105
00:06:57,022 --> 00:07:01,166
So what this means is, well, also they're only apparent in the full context

106
00:07:01,278 --> 00:07:04,786
of an environment. You can't just scan an Infrastructure's code file and

107
00:07:04,808 --> 00:07:09,150
say, we're good. You have to look at when that terraform or cloudformation

108
00:07:09,310 --> 00:07:13,398
script runs and does a deployment or whatever you're using, you're doing it

109
00:07:13,404 --> 00:07:16,834
manually. The same thing is true. You have to look at it once it lands

110
00:07:16,882 --> 00:07:20,586
in these overall misconfiguration of the account, the know

111
00:07:20,608 --> 00:07:23,786
the whole combination, because that's what the hackers are

112
00:07:23,808 --> 00:07:27,354
going for. And the primary network that they're using

113
00:07:27,472 --> 00:07:31,302
is not the TCP IP network, it's the IAM network.

114
00:07:31,366 --> 00:07:35,006
And I'm going to explain what I mean by that later. But IAM forms a

115
00:07:35,028 --> 00:07:39,006
network in the cloud, okay? Because of all these issues,

116
00:07:39,108 --> 00:07:42,554
these things are really easy to overlook, and that makes them incredibly

117
00:07:42,602 --> 00:07:45,754
common. And here it says, increasingly exploited in major

118
00:07:45,812 --> 00:07:49,314
breaches. I am not aware of any major breaches that were

119
00:07:49,352 --> 00:07:53,054
not carried out through misconfiguration of cloud resources.

120
00:07:53,102 --> 00:07:55,842
You look at some of them, I have a whole talk, I give on thinking

121
00:07:55,896 --> 00:07:59,106
like a hacker and walking through details of breaches. But when you look at,

122
00:07:59,128 --> 00:08:02,370
like, for example, the Uber breaches or the Imperva breach,

123
00:08:02,450 --> 00:08:04,886
and sorry, I'm naming names because you have to be able to go, look,

124
00:08:04,908 --> 00:08:08,198
these things know Imperva is a great company. These make a great product. They had

125
00:08:08,204 --> 00:08:11,674
a great response to their breach where their CTO went and put a blog post

126
00:08:11,712 --> 00:08:16,294
up saying exactly what happened. And guess what? It was poorly managed configuration

127
00:08:16,342 --> 00:08:20,390
of IAM keys almost always is. So IAM is central

128
00:08:20,470 --> 00:08:23,730
to getting cloud safe. All right, now that's

129
00:08:23,750 --> 00:08:27,150
the slides we're going to go to actually digging in.

130
00:08:27,220 --> 00:08:31,086
All right, let's do that. So we're going to start. You might feel like this

131
00:08:31,108 --> 00:08:34,574
is kind of remedial, but I think it's actually going to be quite useful.

132
00:08:34,702 --> 00:08:38,162
I'm going to start with just the AWS documentation on

133
00:08:38,216 --> 00:08:41,970
understanding how IAM works I mentioned earlier. I believe

134
00:08:42,040 --> 00:08:45,394
it is just absolutely essential for you to have a

135
00:08:45,432 --> 00:08:49,314
functional mental model, a way to really understand what's going

136
00:08:49,352 --> 00:08:52,150
on in IAM and in cloud security in general.

137
00:08:52,220 --> 00:08:55,814
And to do that, well, we'll start with understanding how IAM works,

138
00:08:55,852 --> 00:08:58,074
and then we're going to go to the whiteboard and iam going to show you

139
00:08:58,112 --> 00:09:01,258
a simplified form of this.

140
00:09:01,424 --> 00:09:04,602
All right. This diagram, to me is not super

141
00:09:04,656 --> 00:09:08,282
helpful. It's literally correct. But that's not really

142
00:09:08,416 --> 00:09:12,094
useful to forming a mental model on how to think about it. It does show

143
00:09:12,132 --> 00:09:15,642
us a number of things, like principles, firing off requests,

144
00:09:15,706 --> 00:09:18,654
needing to get authorized, and of course,

145
00:09:18,692 --> 00:09:21,898
authenticated and authorized CTO perform actions on resources.

146
00:09:21,994 --> 00:09:25,406
But this diagram is just really, really muddy and it's easy to

147
00:09:25,428 --> 00:09:28,738
get confused with it if youll don't already know what they're talking about. But I

148
00:09:28,744 --> 00:09:32,162
do want CTO talk some about the terms here because we're going to use these

149
00:09:32,296 --> 00:09:35,678
as we go to the whiteboard. So the first term we're

150
00:09:35,694 --> 00:09:39,074
going to focus on is principal. So iam a

151
00:09:39,112 --> 00:09:42,426
principal toand in AWS, a principal

152
00:09:42,558 --> 00:09:46,082
is an actor. If any of you used to do uml, it's an actor.

153
00:09:46,146 --> 00:09:49,606
Okay? That can be a human, it can be an application, it can be

154
00:09:49,628 --> 00:09:53,402
a component of infrastructure. All right. That principle are the only

155
00:09:53,456 --> 00:09:56,678
things that can create requests. There's an asterisk

156
00:09:56,694 --> 00:09:59,994
on that, but don't worry about it. Simple mental model. Right. Something we can work

157
00:10:00,032 --> 00:10:03,454
with. So you got principals who do actions. They do them by

158
00:10:03,492 --> 00:10:07,102
sending requests. Okay, so a request is what it sounds

159
00:10:07,156 --> 00:10:10,702
like. I'm going to skip over those things because it's just

160
00:10:10,756 --> 00:10:13,230
authentication and authorization, in that order.

161
00:10:13,300 --> 00:10:16,642
Yeah, the authorization is where you're going to find

162
00:10:16,696 --> 00:10:20,686
out if you can perform an action. So you've got a principal performing

163
00:10:20,718 --> 00:10:24,190
an action on, typically a resource,

164
00:10:24,270 --> 00:10:28,034
which is an object. Okay, let's switch to the whiteboard. I lost my whiteboard.

165
00:10:28,082 --> 00:10:31,094
Let me get it back and let's switch to it.

166
00:10:31,132 --> 00:10:35,126
Okay, cool. My whiteboard's working. Excellent. All right. You never know when

167
00:10:35,148 --> 00:10:38,874
you've got these fancy, complex setups. Okay? So let's just

168
00:10:38,912 --> 00:10:42,710
get some of what we just discussed onto this whiteboard.

169
00:10:42,790 --> 00:10:47,542
So we have principles and we have actions that's

170
00:10:47,606 --> 00:10:51,882
doing things in the cloud, and we have resources.

171
00:10:52,026 --> 00:10:55,278
Okay, there's a reason I'm putting this on the whiteboard, because a

172
00:10:55,284 --> 00:10:59,694
lot of the complexities in designing secure IAm are

173
00:10:59,812 --> 00:11:03,386
not constrained to just the policy understanding. They're really

174
00:11:03,508 --> 00:11:06,946
cases by the interactions of these things.

175
00:11:07,128 --> 00:11:10,818
And there are lots of scenarios that you can get into where

176
00:11:10,904 --> 00:11:14,734
you can overly compliance things, or worse, you can make them overly

177
00:11:14,782 --> 00:11:18,342
permissive and therefore dangerous. So we're going to talk through really

178
00:11:18,396 --> 00:11:22,006
two scenarios today. The first one is where the

179
00:11:22,028 --> 00:11:25,622
principal is a human, okay? And this is what most people

180
00:11:25,676 --> 00:11:29,290
think about. It's kind of a hunchback human. Sorry about that. I'll call him Josh,

181
00:11:30,030 --> 00:11:33,190
since he's got a bum shoulder.

182
00:11:33,270 --> 00:11:37,818
I don't have a bum, just, anyway. So human

183
00:11:37,904 --> 00:11:41,386
actors are who most people immediately think about

184
00:11:41,408 --> 00:11:45,686
when they think about IAM, identity and access management. They're thinking about know

185
00:11:45,728 --> 00:11:49,342
active directory users with their authorizations. Right.

186
00:11:49,396 --> 00:11:52,442
And that is one type, and we are going to cover that. But we're also

187
00:11:52,516 --> 00:11:55,918
going to cover applications as principles,

188
00:11:56,014 --> 00:11:59,154
or components as principles, resources as

189
00:11:59,192 --> 00:12:03,022
principles. So for example, we can have an EC two instance

190
00:12:03,166 --> 00:12:06,734
or a container or a lambda. I always get it backwards.

191
00:12:06,782 --> 00:12:09,286
Let's see if I get it backwards this time. I hope not. Might have.

192
00:12:09,388 --> 00:12:12,946
Anyway, you can have an EC two instance acting

193
00:12:13,058 --> 00:12:16,406
as a principle to do things like read out

194
00:12:16,428 --> 00:12:19,522
of s three. And the way you define that is through IAM.

195
00:12:19,666 --> 00:12:23,234
So this is how IAm becomes a network. And the same with.

196
00:12:23,372 --> 00:12:27,050
Same with our lambda function. Okay, so what are

197
00:12:27,120 --> 00:12:30,486
actors? We have a kind of high level fuzzy idea of

198
00:12:30,528 --> 00:12:34,030
that. Well, when you think about the cloud, what you really

199
00:12:34,100 --> 00:12:37,614
have are APIs that you can use CTO,

200
00:12:37,652 --> 00:12:40,910
manipulate infrastructure to create it, or at least

201
00:12:40,980 --> 00:12:43,918
configure it and modify it over time,

202
00:12:44,084 --> 00:12:47,554
et cetera. So creating an EC two instance would

203
00:12:47,592 --> 00:12:51,426
be an example of an action. All the verbs you

204
00:12:51,448 --> 00:12:54,642
can do in the cloud, read from s three, get object

205
00:12:54,696 --> 00:12:57,986
from s three, list s three buckets. So your actions, and there's

206
00:12:58,018 --> 00:13:01,746
a lot of them. For the purpose of IAM, understanding IAM,

207
00:13:01,858 --> 00:13:05,366
I think it's best to not overly focus on

208
00:13:05,468 --> 00:13:09,386
which service things are in, but to just understand that

209
00:13:09,488 --> 00:13:12,826
for any given function that you want to perform in the

210
00:13:12,848 --> 00:13:16,426
AWS cloud, there are a list of actions that

211
00:13:16,448 --> 00:13:20,234
that principle needs access to, and very often those are

212
00:13:20,272 --> 00:13:23,310
not constrained to a single AWS service.

213
00:13:23,460 --> 00:13:26,910
So it's best to think of actions as just a big long

214
00:13:26,980 --> 00:13:31,114
list out of which you're extracting the ones that are the minimum

215
00:13:31,162 --> 00:13:34,850
needed to perform the function, the business function you're trying to do.

216
00:13:34,920 --> 00:13:38,290
There's a feedback loop in architecture here, too, which I'll talk about a little bit.

217
00:13:38,360 --> 00:13:40,770
But actions, let's say like getobject,

218
00:13:42,470 --> 00:13:46,950
create instance list

219
00:13:47,020 --> 00:13:50,422
buckets. Now you can go on the web

220
00:13:50,476 --> 00:13:53,682
and search for AWS actions, and there are thousands

221
00:13:53,746 --> 00:13:56,854
of these things. And that's actually really good design because

222
00:13:56,892 --> 00:14:00,422
it gives you the ability to really scope your permissions down.

223
00:14:00,476 --> 00:14:03,930
But what it does do is put a lot of burden on you to really

224
00:14:04,000 --> 00:14:08,214
understand the actions. And there's a lot of these. That's where things like the analyzer

225
00:14:08,262 --> 00:14:11,194
can be helpful, but it can also give you a false sense of security,

226
00:14:11,312 --> 00:14:14,782
because if you've architected your system in a dangerous way.

227
00:14:14,836 --> 00:14:18,094
So for example, your Ec two instance needs to list s three

228
00:14:18,132 --> 00:14:21,566
buckets. Don't do that, by the way. Put it in a database, separate the

229
00:14:21,588 --> 00:14:25,214
actors. These tools aren't going to find that. So you really

230
00:14:25,252 --> 00:14:29,426
have to understand what the attack vectors are. And then resources are

231
00:14:29,528 --> 00:14:32,882
named things in the cloud. Like there's a service s three,

232
00:14:32,936 --> 00:14:36,534
right? But you have an individual s three bucket. What did I get up to?

233
00:14:36,572 --> 00:14:41,350
Let's call it Baz. Or you have a container

234
00:14:41,770 --> 00:14:45,350
or an RDS instance, a database instance.

235
00:14:46,810 --> 00:14:50,586
Call it my data. What do we call our container? We'll call

236
00:14:50,608 --> 00:14:54,166
it whale. All right, so we've

237
00:14:54,198 --> 00:14:57,386
got our principles, we've got our actions, and we've got

238
00:14:57,408 --> 00:15:00,454
our resources. Let's think about this from the perspective,

239
00:15:00,582 --> 00:15:04,174
first of Josh here, of this guy.

240
00:15:04,372 --> 00:15:08,286
If I'm a user, a human user, I mentioned I'm a developer, so I

241
00:15:08,308 --> 00:15:12,138
need to do things like create instances. Create Ec, two instances.

242
00:15:12,234 --> 00:15:15,778
Okay? So I want to be able to call create

243
00:15:15,864 --> 00:15:19,282
instance. However, there is a

244
00:15:19,336 --> 00:15:23,314
default AWS policy for

245
00:15:23,432 --> 00:15:26,550
all of these actions, and it is deny.

246
00:15:27,770 --> 00:15:31,302
And there are really two walls of

247
00:15:31,356 --> 00:15:34,742
denial. There's the wall of denial between any

248
00:15:34,796 --> 00:15:38,470
principle and any actors. So your default is you get none,

249
00:15:38,550 --> 00:15:41,914
right, good design. And the Other is between the

250
00:15:41,952 --> 00:15:45,434
actions toand the resources. So there's a wall over here

251
00:15:45,472 --> 00:15:49,446
too. And so the mental model for IAM

252
00:15:49,638 --> 00:15:53,066
is poking holes in these walls. Okay, youll need

253
00:15:53,088 --> 00:15:56,606
to get from the left to the right on the diagram, and you need

254
00:15:56,628 --> 00:16:00,974
to do that by poking holes in the walls. And that's what in IAM policy

255
00:16:01,092 --> 00:16:05,438
are allows, or I call them allowances. I think that's the correct English

256
00:16:05,614 --> 00:16:08,498
to poke through the walls of denial. Now,

257
00:16:08,584 --> 00:16:12,082
any deny you can get. So for example,

258
00:16:12,216 --> 00:16:15,842
let's use a different example. Let's use the, well, let's do a list

259
00:16:15,896 --> 00:16:19,510
bucket, all right? Which is different than list buckets

260
00:16:20,010 --> 00:16:23,426
because in list bucket I'm listing the controls

261
00:16:23,458 --> 00:16:26,966
of one s three bucket. In list buckets, I'm looking at what are all

262
00:16:26,988 --> 00:16:30,466
my s three buckets. So let's talk about list bucket

263
00:16:30,498 --> 00:16:33,894
for a second. So this guy got blocked. If I need to poke a hole

264
00:16:33,942 --> 00:16:36,966
through here for list bucket, I want to poke

265
00:16:36,998 --> 00:16:40,574
a hole through here for list bucket. Right. So I can

266
00:16:40,612 --> 00:16:44,106
do that with Iam. I can grant the action

267
00:16:44,218 --> 00:16:47,886
to Josh using a policy to be able

268
00:16:47,908 --> 00:16:51,422
to list bucket by default. You also

269
00:16:51,476 --> 00:16:55,362
then have to say which buckets may Josh list. And very often people

270
00:16:55,416 --> 00:16:58,642
just put star in there, which is actually often wise for

271
00:16:58,696 --> 00:17:02,066
many use cases. We'll get into some complexity of

272
00:17:02,168 --> 00:17:05,934
things like attribute based access control for scoping. But you can also,

273
00:17:05,992 --> 00:17:10,242
in your IAM policy, just enumerate a list of buckets

274
00:17:10,306 --> 00:17:13,366
Josh is allowed to list, and that's reasonable to do too.

275
00:17:13,468 --> 00:17:17,334
So if Baz is one of those, then the

276
00:17:17,372 --> 00:17:20,666
request, which is the thing that caused this whole chain of events to

277
00:17:20,688 --> 00:17:24,794
take place, will work because it got allowances all the way through and

278
00:17:24,912 --> 00:17:27,594
from Baz, will be returned CTO.

279
00:17:27,632 --> 00:17:31,034
Josh, a list of the contents of the bucket.

280
00:17:31,082 --> 00:17:34,590
Right. Seems pretty clear. Okay. So as you're doing

281
00:17:34,660 --> 00:17:38,622
this, your goal has to be to have these

282
00:17:38,676 --> 00:17:42,478
minimum number of these actions. Okay. And even

283
00:17:42,564 --> 00:17:45,360
in the AWS documentation, they will tell you,

284
00:17:45,730 --> 00:17:49,090
be as constrained as you can, least permissive. Right.

285
00:17:49,160 --> 00:17:52,546
Well, let's take a look at that. I mean, that's great to say, but this

286
00:17:52,568 --> 00:17:56,466
is one of the places where people really get burned with

287
00:17:56,568 --> 00:18:00,246
Iam, and it's really easy to do. And every time somebody

288
00:18:00,348 --> 00:18:04,194
gets burned and ends up in the news due to IAM exploits,

289
00:18:04,242 --> 00:18:08,178
I feel bad for them because there is a lot to know and do when

290
00:18:08,204 --> 00:18:12,566
you're dealing with IAM. Okay, I'm on the screen here for the IAM

291
00:18:12,678 --> 00:18:16,826
service and I went to policies. Policies are where you're going to be

292
00:18:16,928 --> 00:18:20,374
effectively defining the allowances

293
00:18:20,422 --> 00:18:24,334
and the denials. Right. Toand you get a whole bunch of

294
00:18:24,372 --> 00:18:28,794
these that are called AWS managed. That means AWS

295
00:18:28,922 --> 00:18:33,006
put them in your account already because the AWS services

296
00:18:33,108 --> 00:18:36,414
themselves need them in some way, shape or form because AWS

297
00:18:36,462 --> 00:18:39,890
services talk to AWS services using policy too.

298
00:18:40,040 --> 00:18:44,190
All right, so let's take a look at one of these policies.

299
00:18:44,350 --> 00:18:48,518
All right, here we've got, you can see here at the top effect

300
00:18:48,604 --> 00:18:52,086
is allow. Remember, everything's a deny. And then here's the

301
00:18:52,108 --> 00:18:56,038
list of actions. Access analyzer, service role policy.

302
00:18:56,124 --> 00:18:59,994
Okay, so this is a policy that's intended to be used by an

303
00:19:00,032 --> 00:19:03,834
access analyzer tool that AWS has. So, what it

304
00:19:03,872 --> 00:19:07,654
needs are these very specific EC two collection

305
00:19:07,702 --> 00:19:12,090
here. These are describe calls. Those are similar to lists in other places.

306
00:19:12,170 --> 00:19:16,058
So describing the addresses the VPC endpoints

307
00:19:16,154 --> 00:19:19,630
describe vpcs. So, vpcs are actually

308
00:19:19,700 --> 00:19:22,894
inside the EC two service. Just a weird thing, a side effect

309
00:19:22,932 --> 00:19:26,206
of how AWS evolved. And then we see some for IAM.

310
00:19:26,318 --> 00:19:29,586
Remember I said at the beginning, usually to perform

311
00:19:29,768 --> 00:19:33,602
a necessary function, a business function, you're going to have more than

312
00:19:33,656 --> 00:19:36,746
one service in your list of actions.

313
00:19:36,878 --> 00:19:40,886
Okay, so here we've got some EC two, we've got some IAM, which is

314
00:19:40,908 --> 00:19:45,030
just getting roles and listing roles. And then we've got kms,

315
00:19:45,370 --> 00:19:48,818
right? For our keys, we've got lambda,

316
00:19:48,914 --> 00:19:52,458
because Lambda is an alternative to EC two. I mean, fugue is

317
00:19:52,464 --> 00:19:56,090
almost completely built out of lambdas, but lambdas are

318
00:19:56,240 --> 00:19:59,514
computational actors. They're principles in here. So we got

319
00:19:59,552 --> 00:20:04,042
that. And you also have a bunch of stuff for organizations, which describes,

320
00:20:04,186 --> 00:20:07,594
obviously, how the topology of your organization, its permissions,

321
00:20:07,642 --> 00:20:11,150
and so on, map out. And a bunch of stuff in s three.

322
00:20:11,300 --> 00:20:14,770
Okay, so you can see here it's a fairly long list

323
00:20:14,840 --> 00:20:18,526
of actions, but you notice in resources,

324
00:20:18,638 --> 00:20:22,178
right, well, resource in this case is any. All right?

325
00:20:22,264 --> 00:20:26,002
So that means any resource that these actions apply

326
00:20:26,056 --> 00:20:29,686
to, it's not scoping down the list of resources here, it's saying any of

327
00:20:29,708 --> 00:20:33,126
them, but these actions are the only ones that can

328
00:20:33,148 --> 00:20:36,806
be called on them. I want you to notice here that this star

329
00:20:36,908 --> 00:20:40,666
is the only star in this policy. Star means any.

330
00:20:40,768 --> 00:20:44,698
Okay? And as you go up here, you're just not seeing big,

331
00:20:44,784 --> 00:20:48,602
broad star cases, and you shouldn't use them yourself.

332
00:20:48,736 --> 00:20:52,794
Iam looking at an AWS managed policy, because these generally,

333
00:20:52,842 --> 00:20:55,786
or often anyway, contain a lot of best practices.

334
00:20:55,898 --> 00:20:59,294
And you really do need, if you want secure iam to

335
00:20:59,332 --> 00:21:03,118
fully understand which actors are truly necessary for

336
00:21:03,124 --> 00:21:06,946
the business function. And limit to that. And I'm going CTO. Explain why here,

337
00:21:07,048 --> 00:21:10,546
now. Okay, well, that sounds simple enough.

338
00:21:10,648 --> 00:21:14,658
Just list the actions you need. Well, why do people very

339
00:21:14,744 --> 00:21:19,298
commonly make the error to be overly permissive?

340
00:21:19,394 --> 00:21:23,462
Let's take a look at this is a policy I'm building for

341
00:21:23,596 --> 00:21:27,058
interacting with EC two. So remember, we're talking about Joshua

342
00:21:27,074 --> 00:21:30,306
user. I needed the create instance. So that's

343
00:21:30,338 --> 00:21:34,058
probably here in write somewhere, right? Well, I selected all of write

344
00:21:34,144 --> 00:21:37,322
which would be write star. And I just said don't do star.

345
00:21:37,456 --> 00:21:40,606
There are 289 write actions in

346
00:21:40,628 --> 00:21:45,054
EC two alone. So somewhere will

347
00:21:45,092 --> 00:21:48,960
be create instance, I hope, right? You would think

348
00:21:49,410 --> 00:21:51,790
create Internet gateway, create image.

349
00:21:53,090 --> 00:21:55,582
See, I don't remember the name of it off the top of my head.

350
00:21:55,716 --> 00:21:59,106
So somewhere in here are the permissions I might need

351
00:21:59,208 --> 00:22:03,026
to use the actions that are needed to meaningfully create an EC two

352
00:22:03,048 --> 00:22:06,626
instance. It's not just going to be about creating the instance, whatever they've called it,

353
00:22:06,648 --> 00:22:10,114
I'll go find it later. It's also probably about like creating an EBS volume

354
00:22:10,162 --> 00:22:13,586
and attaching it and some other objects that other resources.

355
00:22:13,698 --> 00:22:17,714
An EC two instance, practically configured, is a

356
00:22:17,772 --> 00:22:20,986
collection of resources. Really? Okay. So when

357
00:22:21,008 --> 00:22:25,238
you're designing these policies for your users, my strong recommendation,

358
00:22:25,334 --> 00:22:29,450
and that of AWS as well, is to use roles,

359
00:22:30,210 --> 00:22:34,106
not map what are called inline policies directly to josh

360
00:22:34,138 --> 00:22:37,598
these user, but instead create a role like

361
00:22:37,684 --> 00:22:41,210
developer or team a developer

362
00:22:41,290 --> 00:22:45,834
and have in one place that list of permissions of allowances

363
00:22:45,962 --> 00:22:49,486
that are really needed for that developer role. And then if you decide

364
00:22:49,518 --> 00:22:53,346
to change that or evolve it, you can do that in one place and the

365
00:22:53,368 --> 00:22:56,466
managing will be preserved. Another thing

366
00:22:56,488 --> 00:22:59,606
I see that is usually an error in

367
00:22:59,628 --> 00:23:03,234
securing IAM is just proliferating iam policies.

368
00:23:03,282 --> 00:23:07,218
I mean, a lot of folks, I think, look at the fact that AWS sticks

369
00:23:07,234 --> 00:23:10,714
like 700 of these things in your account already and

370
00:23:10,752 --> 00:23:14,842
think, well, no harm in that. I could have another 700 or 1000.

371
00:23:14,976 --> 00:23:18,250
Gets really hard to keep track of. So doing this

372
00:23:18,400 --> 00:23:21,998
is star, okay, that's star. Now you could have star for everything.

373
00:23:22,084 --> 00:23:25,102
Ec two star, right? But we're not doing that.

374
00:23:25,156 --> 00:23:29,006
We're doing here. Ec two, write star. Still do not

375
00:23:29,028 --> 00:23:32,202
do this. Enumerate the specific actions.

376
00:23:32,346 --> 00:23:35,934
I'll give you a couple of reasons why. The reason why people do it

377
00:23:35,972 --> 00:23:38,850
is they look at this 289 and they go,

378
00:23:39,000 --> 00:23:41,858
this is going to be a lot of work. It is. It's going to be

379
00:23:41,864 --> 00:23:45,522
a fair amount of work. And you really need to develop the expertise toand follow

380
00:23:45,576 --> 00:23:49,458
best practices as they're available from places like AWS.

381
00:23:49,554 --> 00:23:53,414
I'm going to argue that not all AWS managed policies are actually all

382
00:23:53,452 --> 00:23:57,318
that securely designed, but it's work you have to do. And there are tools that

383
00:23:57,324 --> 00:24:00,810
will help you. We can help you. There are tools in AWS like the access

384
00:24:00,880 --> 00:24:04,410
analyzer and other things that can help you, but you really do need to develop

385
00:24:04,480 --> 00:24:05,900
your own chops. Now,

386
00:24:08,030 --> 00:24:11,434
missiveness that you do not want to use. Star. Like maybe for

387
00:24:11,472 --> 00:24:14,890
example, the, oh yeah, ec two has a whole

388
00:24:14,960 --> 00:24:18,318
lot of describe calls, too, 124 of those. That's not

389
00:24:18,324 --> 00:24:21,966
a good example. How about read? How many are in read? Okay, 23 toand read.

390
00:24:22,068 --> 00:24:25,918
So that's kind of a reasonable number, maybe. I think to myself,

391
00:24:26,004 --> 00:24:29,098
well, that's fine, I'll just do read star.

392
00:24:29,204 --> 00:24:32,862
Well, what happens when AWS adds a new action

393
00:24:33,006 --> 00:24:36,290
into read? It gets inherited. Right? So I mentioned

394
00:24:36,360 --> 00:24:39,446
earlier, there is a particularly dangerous. Here, I'll show you a

395
00:24:39,468 --> 00:24:42,946
diagram of this. This is fugue. We automatically

396
00:24:42,978 --> 00:24:46,502
do these diagrams so you can kind of go spelunking around your cloud

397
00:24:46,556 --> 00:24:50,006
infrastructure to understand what's going on with it. But here I've got can EC

398
00:24:50,038 --> 00:24:53,770
two instance right here, and it has this

399
00:24:53,840 --> 00:24:57,194
IAM instance profile. Okay, we're getting into our second

400
00:24:57,232 --> 00:24:59,978
use case. Instead of Josh as the principal here,

401
00:25:00,064 --> 00:25:03,766
it's this EC two instance. That's the principal. And what we've done here

402
00:25:03,808 --> 00:25:07,694
is we've given it a mapping to an IAM policy to

403
00:25:07,732 --> 00:25:11,694
allow it to go read and write from s three, and hence the policy name

404
00:25:11,732 --> 00:25:15,166
s three, read write. So it gets a policy, just like a

405
00:25:15,188 --> 00:25:18,914
user through a role would get a policy. And that's a lot

406
00:25:18,952 --> 00:25:22,402
of what goes on in AWS hacking is

407
00:25:22,456 --> 00:25:25,862
people being overly permissive, or just having

408
00:25:25,996 --> 00:25:29,462
the wrong configuration, or even the wrong application design,

409
00:25:29,596 --> 00:25:32,966
which causes the policies that are

410
00:25:32,988 --> 00:25:36,566
running in the actual environment to create huge,

411
00:25:36,668 --> 00:25:39,850
exploitative, lateral movement data

412
00:25:39,920 --> 00:25:43,722
exfiltration, illegitimate crypto mining, all that stuff is done

413
00:25:43,776 --> 00:25:47,126
through these IAM configurations. Very often they're

414
00:25:47,158 --> 00:25:50,762
not getting them from users. Sometimes they do. Very often they're getting them from

415
00:25:50,816 --> 00:25:54,622
running infrastructure that has a policy. And so in this case,

416
00:25:54,676 --> 00:25:58,526
we've got s three read write. That probably means that

417
00:25:58,548 --> 00:26:02,222
EC two instance has the ability to do things like list

418
00:26:02,276 --> 00:26:05,710
all these s three buckets over here and their contents.

419
00:26:05,790 --> 00:26:09,250
So that'd probably be pretty attractive to a hacker.

420
00:26:10,070 --> 00:26:13,394
Right? So, other point I was making though is, if I've given this

421
00:26:13,432 --> 00:26:17,234
like s three list star,

422
00:26:17,352 --> 00:26:21,206
right? Can s three read star? When new actions come

423
00:26:21,228 --> 00:26:24,278
out on the services, iam going to inherit those because of the star. And the

424
00:26:24,284 --> 00:26:28,182
one I wanted to point out that I spoke about earlier is there is one

425
00:26:28,236 --> 00:26:32,502
permission in EC two that allows you to remap which IAM

426
00:26:32,566 --> 00:26:36,246
instance profile you have, so you can create an EC

427
00:26:36,278 --> 00:26:39,802
two instance, give it a nice safe IAM profile, but for one

428
00:26:39,856 --> 00:26:43,098
error, which is the ability to perform the action,

429
00:26:43,194 --> 00:26:46,762
which is kind of buried, that allows you to switch which IAM

430
00:26:46,826 --> 00:26:50,238
profile these EC two instance has. So you can think of

431
00:26:50,244 --> 00:26:53,098
it as lateral movement or permission escalation.

432
00:26:53,194 --> 00:26:56,666
But if that's in there, then hackers are going to have a field day.

433
00:26:56,708 --> 00:27:00,018
Now, that didn't always exist in EC two. In fact, when I

434
00:27:00,024 --> 00:27:03,314
was at AWS, the beginning part, there was no feature like that.

435
00:27:03,352 --> 00:27:07,202
There was no action like that. So if I had created a policy

436
00:27:07,336 --> 00:27:11,014
in whatever it was seven, eight years ago where I

437
00:27:11,052 --> 00:27:14,086
had, I believe it's in the rights. So if I

438
00:27:14,108 --> 00:27:17,366
had given it right star, for example, and these were a much shorter list

439
00:27:17,388 --> 00:27:21,126
of rights back then, I might not know, it might have been actually safe

440
00:27:21,158 --> 00:27:25,014
for my use case then. But as that feature was added to EC

441
00:27:25,062 --> 00:27:27,340
two, I might not even notice that.

442
00:27:27,870 --> 00:27:31,546
How many services are there now? Hundreds. And the release notes are

443
00:27:31,568 --> 00:27:35,066
great and everything, but it's hard to keep up. Well, all of those EC

444
00:27:35,098 --> 00:27:39,002
two instances that had my once safe policy have now inherited

445
00:27:39,066 --> 00:27:42,366
an incredibly dangerous action because I put a star in there.

446
00:27:42,388 --> 00:27:46,494
So a couple of reasons to not use star. So that's

447
00:27:46,542 --> 00:27:49,950
really how we get into trouble with IAM,

448
00:27:50,030 --> 00:27:53,394
is through over permissiveness and also through things

449
00:27:53,432 --> 00:27:56,100
like losing track of the number,

450
00:27:56,710 --> 00:28:00,166
all the different IAM policies and resources that you've got in

451
00:28:00,188 --> 00:28:03,494
them. I'm going to go back to my whiteboard here if I can. Okay,

452
00:28:03,532 --> 00:28:06,902
so let's whiteboard a little more, because if you remember in that

453
00:28:06,956 --> 00:28:10,434
example IAM policy, we had a very concretely

454
00:28:10,482 --> 00:28:14,442
enumerated list of actors. The AWS example that I showed you for the access

455
00:28:14,496 --> 00:28:17,798
analyzer, but then for resources, it said all, you don't

456
00:28:17,814 --> 00:28:21,622
have to do that. So in that IAM policy, you can list resources.

457
00:28:21,686 --> 00:28:24,622
You could say, like, if you wanted s three in this case,

458
00:28:24,676 --> 00:28:28,714
list bucket permissions, but you only wanted Josh to be able to list bucket permissions

459
00:28:28,762 --> 00:28:32,094
on Baz. Well, you could put that in the IAM policy instead

460
00:28:32,132 --> 00:28:35,534
of saying resources star, you would spell, but Baz there using its

461
00:28:35,572 --> 00:28:38,866
arm, okay, now, a lot of folks do this,

462
00:28:38,968 --> 00:28:43,054
and you'll end up sometimes with policies that have a long list of resources

463
00:28:43,182 --> 00:28:47,078
in that resource field, and they feel like, well, IAM getting this right,

464
00:28:47,244 --> 00:28:50,678
that can get challenging at scale. A lot of our customers have

465
00:28:50,764 --> 00:28:54,390
hundreds of thousands or more cloud resources.

466
00:28:55,450 --> 00:28:58,546
We manage millions of cloud resources for our customers.

467
00:28:58,668 --> 00:29:02,646
And when you see these really large deployments and you imagine, can every named

468
00:29:02,678 --> 00:29:06,262
resource be encoded, hard coded

469
00:29:06,326 --> 00:29:10,134
into these IAM policies toand kept track of? Because there's constant

470
00:29:10,182 --> 00:29:13,846
churn in the environment and the answer is often no, that becomes very

471
00:29:13,888 --> 00:29:17,946
challenging. Just to wrap up here, and we're doing kind of an abbreviated

472
00:29:17,978 --> 00:29:21,422
form of this. There's lots to talk about in IAM, but let's talk about something

473
00:29:21,476 --> 00:29:24,082
called attribute based access control.

474
00:29:24,216 --> 00:29:28,258
Attribute based access control is where, instead of having to list

475
00:29:28,344 --> 00:29:32,002
in the resources part of the policy, every resource that

476
00:29:32,056 --> 00:29:35,506
principle may act upon, it's based on tags. And so you

477
00:29:35,528 --> 00:29:38,982
can tag resources. If I'm on team a,

478
00:29:39,116 --> 00:29:42,502
I build application a for my business, and there's a team

479
00:29:42,556 --> 00:29:46,274
B-C-D-E-F et cetera. As long as those resources

480
00:29:46,322 --> 00:29:49,990
that are relevant to team a are being tagged in some way, CTO team a,

481
00:29:50,060 --> 00:29:53,526
I can then create new resources with those tags,

482
00:29:53,558 --> 00:29:56,842
and suddenly team a will have access to them. Okay, well, that sounds

483
00:29:56,896 --> 00:30:00,102
really great. Right, so let's give the tags, we'll make them blue.

484
00:30:00,166 --> 00:30:03,994
So I've got these tags over here that know which resources.

485
00:30:04,042 --> 00:30:07,790
So blue is a and I don't know. We'll do rainbow

486
00:30:08,210 --> 00:30:11,600
is b. And so if Josh is on team

487
00:30:12,050 --> 00:30:15,342
know we're on a here, we can only see the

488
00:30:15,396 --> 00:30:18,306
team a stuff and operate on the team a stuff. Okay, well,

489
00:30:18,328 --> 00:30:22,386
that makes sense, right? Here's the catch. If you do this, youll need

490
00:30:22,408 --> 00:30:25,458
to really restrict access to writing tags, okay?

491
00:30:25,544 --> 00:30:28,674
And even reading tags, maybe now that carries

492
00:30:28,722 --> 00:30:32,562
its own set of architectural burdens. Put another way, if I'm limiting

493
00:30:32,626 --> 00:30:36,278
resource access based on tagging and many different

494
00:30:36,364 --> 00:30:40,026
products and functions in cloud use tags, and I

495
00:30:40,048 --> 00:30:43,274
have to block tags access to writing them,

496
00:30:43,312 --> 00:30:46,634
particularly because then any hacker who gets in who has

497
00:30:46,672 --> 00:30:50,566
right tag permissions can open up whatever resources

498
00:30:50,678 --> 00:30:53,822
they might want into different groups. Now,

499
00:30:53,876 --> 00:30:57,246
obviously, you might say, well, isn't that going to be limited? If a

500
00:30:57,268 --> 00:31:01,786
hacker gets in and has a team a set of policies and permissions,

501
00:31:01,978 --> 00:31:05,154
will they be able to even see Team B stuff to retag it? No,

502
00:31:05,192 --> 00:31:08,882
that is fair. But there are scenarios where a hacker gets

503
00:31:08,936 --> 00:31:12,994
a more permissive set of roles and can retag things such that

504
00:31:13,032 --> 00:31:16,626
they are appearing in places that you don't want to restrict. So you

505
00:31:16,648 --> 00:31:20,994
really need to be careful about you're now including tag

506
00:31:21,042 --> 00:31:24,326
management as part of your security boundaries. That said, with that

507
00:31:24,348 --> 00:31:27,302
caveat, I think it's a really smart way to go for a lot of things.

508
00:31:27,356 --> 00:31:30,470
Maybe not the only thing to do, certainly not the only thing to do,

509
00:31:30,540 --> 00:31:33,610
but in a lot of use cases, it's really smart. Okay,

510
00:31:33,680 --> 00:31:37,274
one other thing I want to talk about are these are so

511
00:31:37,312 --> 00:31:40,058
IAM is thought of as like the method of security,

512
00:31:40,144 --> 00:31:43,870
and it's critically important to it by many folks. But really,

513
00:31:44,020 --> 00:31:47,242
it's a citizen among other citizens

514
00:31:47,306 --> 00:31:51,562
who have policy expressions in AWS. And remember, I said at the beginning

515
00:31:51,706 --> 00:31:54,866
that any request by a principal, if it

516
00:31:54,888 --> 00:31:58,350
hits any, denies, the whole request is denied.

517
00:31:58,430 --> 00:32:01,586
Well, IAm isn't the only place we can put allowances and

518
00:32:01,608 --> 00:32:05,374
denials. In fact, it interacts with things like s three bucket

519
00:32:05,422 --> 00:32:08,726
policies. Toand I recommend every s three bucket have

520
00:32:08,748 --> 00:32:12,214
a bucket policy. So, for instance, there would be, oh,

521
00:32:12,252 --> 00:32:15,590
let's go back. CTo the browser and my diagram,

522
00:32:16,010 --> 00:32:20,758
for instance, would be that this VPC,

523
00:32:20,934 --> 00:32:24,246
this EC two instance, because it's in this VPC virtual

524
00:32:24,278 --> 00:32:28,074
private cloud network, is allowed to read write CTO,

525
00:32:28,192 --> 00:32:31,366
this important records bucket. But I don't

526
00:32:31,398 --> 00:32:35,626
want this EC two instance which has the same role

527
00:32:35,738 --> 00:32:39,278
as this one down here. Just, it only can speak CTo

528
00:32:39,364 --> 00:32:42,506
this other s three bucket. Okay. And they can't see each other's

529
00:32:42,538 --> 00:32:45,650
s three buckets. Well, there's a couple of ways to do that,

530
00:32:45,720 --> 00:32:49,598
right? One is you could put the resource, you could have two different IAM policies

531
00:32:49,694 --> 00:32:53,026
with different resources enumerated, or those two s

532
00:32:53,048 --> 00:32:56,618
three buckets cloud have their own what are called s three bucket

533
00:32:56,654 --> 00:33:00,546
policies. So these are resource policies, not principal

534
00:33:00,658 --> 00:33:04,134
connected policies, if that makes sense. So we've been talking so far about these

535
00:33:04,172 --> 00:33:07,634
IAm policies that get attacks to the principles

536
00:33:07,682 --> 00:33:11,786
column over here on the left. Now we're going to talk just briefly because

537
00:33:11,808 --> 00:33:15,766
it's not IAm. The name on the tin here is IAm. But it's

538
00:33:15,798 --> 00:33:19,098
important to understand you have options. You don't have

539
00:33:19,104 --> 00:33:23,210
to solve everything through IAM. You have other places you can put policies and so

540
00:33:23,280 --> 00:33:26,802
on. This resource right here, this Baz,

541
00:33:26,886 --> 00:33:30,286
I can have what's called a resources policy. And the way I would do

542
00:33:30,308 --> 00:33:33,986
the pattern I was just describing where the one EC two instance that's in the

543
00:33:34,008 --> 00:33:37,362
correct VPC can get there is in that bucket policy.

544
00:33:37,496 --> 00:33:41,106
I can restrict access based on the

545
00:33:41,128 --> 00:33:45,074
VPC endpoint, which is this guy right here. And that's how

546
00:33:45,192 --> 00:33:48,726
this EC two instance is going to come out through this endpoint. To talk to

547
00:33:48,748 --> 00:33:52,966
this bucket, you can put in the bucket policy only allow

548
00:33:53,148 --> 00:33:56,258
requests coming from that VPC endpoint.

549
00:33:56,354 --> 00:33:59,466
So now if you've got two EC two instances that both think

550
00:33:59,488 --> 00:34:02,374
they have permission to all the s three buckets,

551
00:34:02,502 --> 00:34:06,742
you're okay, because your bucket policies have introduced another layer

552
00:34:06,806 --> 00:34:10,554
of denial. So you can say, no, you're not getting

553
00:34:10,592 --> 00:34:13,786
to me, I'm not the right s three bucket. I'm not the s three bucket

554
00:34:13,818 --> 00:34:17,722
you're looking for. So there are a lot of ways to strategize

555
00:34:17,866 --> 00:34:21,806
and to design your IAM policies and

556
00:34:21,828 --> 00:34:25,898
your practices with IAM understand there is no one right way.

557
00:34:26,004 --> 00:34:29,710
There are some general right things like being least permissive

558
00:34:29,790 --> 00:34:32,654
that you want to do, but there's no one right strategy.

559
00:34:32,782 --> 00:34:36,674
And you really have to think of IAM in these context of all

560
00:34:36,712 --> 00:34:40,678
the other AWS services and how you intend to use them together.

561
00:34:40,844 --> 00:34:44,006
So if you were looking for a silver bullet here, I can't give you

562
00:34:44,028 --> 00:34:47,494
one, but I can at least tell you some best practices and

563
00:34:47,532 --> 00:34:51,034
some ways to really get your head around the problem. The most

564
00:34:51,072 --> 00:34:54,634
common error I see moving my whiteboard here with IAM and with

565
00:34:54,672 --> 00:34:58,134
cloud resource configuration in general, but it's particularly true of IAM.

566
00:34:58,262 --> 00:35:02,318
The biggest problem that I tend to see is people never

567
00:35:02,404 --> 00:35:05,806
develop a mental model. They never develop a way to understand the

568
00:35:05,828 --> 00:35:09,370
problem. Instead they look at examples alone.

569
00:35:09,450 --> 00:35:12,686
Examples are great, but you can't imitate somebody else. You have

570
00:35:12,708 --> 00:35:16,658
to understand this stuff to do it well and make decisions. There are a million

571
00:35:16,744 --> 00:35:20,526
ways to do security well in AWS.

572
00:35:20,638 --> 00:35:23,762
I'll give you one example of this. Here's my email address and

573
00:35:23,816 --> 00:35:27,218
my twitter handle. I'm not a big Twitter guy, but reach out to me if

574
00:35:27,224 --> 00:35:30,294
you want to talk about this stuff. I'll leave that up. The example I was

575
00:35:30,332 --> 00:35:34,722
going to use of different ways to very capably

576
00:35:34,786 --> 00:35:38,230
accomplish secure systems in the cloud is to talk a little bit about

577
00:35:38,300 --> 00:35:41,994
how we've done it. And we've had two major iterations of

578
00:35:42,032 --> 00:35:45,322
our software at Fuge. The first one we started working on back

579
00:35:45,376 --> 00:35:48,854
before Lambda existed, and it used EC two as a runtime

580
00:35:48,902 --> 00:35:52,366
environment. That itself, that decision itself had lots of

581
00:35:52,388 --> 00:35:55,578
implications for how we would make things secure.

582
00:35:55,674 --> 00:35:59,662
When we did version two of the product, we switched to basically only

583
00:35:59,716 --> 00:36:03,546
lambdas. And we have obviously a database and other components,

584
00:36:03,578 --> 00:36:06,770
but for computation, mostly lambdas. And that had

585
00:36:06,840 --> 00:36:10,254
created a very different scenario in terms of how we would deal with IAM.

586
00:36:10,382 --> 00:36:14,750
It caused us to automate a lot more of our role creation

587
00:36:14,830 --> 00:36:17,842
for all those lambdas, because you don't want a lot of

588
00:36:17,896 --> 00:36:21,474
sharing, you want to limit that blast radius. And so that caused engineering

589
00:36:21,522 --> 00:36:25,126
work, right? So depending on the decisions you make in how

590
00:36:25,148 --> 00:36:28,646
you're architecting on the cloud, it's using to affect how you're going to do it

591
00:36:28,668 --> 00:36:32,466
securely, and it's going to affect how you're going to use IAM

592
00:36:32,578 --> 00:36:36,326
and think about those features. Okay, well, that's what

593
00:36:36,348 --> 00:36:39,766
I've got today. I hope you enjoyed it. I'm around to take questions. AWS,

594
00:36:39,788 --> 00:36:43,102
we're were talking and you've got my contact info now so

595
00:36:43,156 --> 00:36:46,890
thanks for attending, and good luck

596
00:36:47,050 --> 00:36:50,778
on your secure AWS. You've got the mental model, you got the piece parts.

597
00:36:50,874 --> 00:36:51,420
You can do it.

