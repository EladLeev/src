1
00:01:28,290 --> 00:01:31,778
Hi, and welcome to an introduction to Ansible for network engineers.

2
00:01:31,874 --> 00:01:35,686
My name is Jason Belk and I am a senior technical advocate at

3
00:01:35,708 --> 00:01:38,790
Cisco Systems in the learning and certifications organization.

4
00:01:39,370 --> 00:01:42,686
First, what is ansible? Well, Ansible is a free and

5
00:01:42,708 --> 00:01:46,170
open source command line tool that does runbook style automation.

6
00:01:46,250 --> 00:01:50,394
It's owned by Red Hat and it's been broadly

7
00:01:50,442 --> 00:01:54,366
used in the industry, especially in the cloud compute and storage

8
00:01:54,398 --> 00:01:58,126
space, for over ten years. So when Ansible runs,

9
00:01:58,158 --> 00:02:01,682
it gathers all the resources it needs and then goes

10
00:02:01,736 --> 00:02:05,278
out and talks to all the differences, network devices,

11
00:02:05,374 --> 00:02:08,982
cloud resources, whatever you're doing. So it doesn't store any state in

12
00:02:09,036 --> 00:02:12,966
any type of database. It basically loads in variables and different components that

13
00:02:12,988 --> 00:02:16,770
you've set up ahead of time and then goes out and makes the configuration

14
00:02:16,850 --> 00:02:20,578
or read actions that you're looking to do. So it

15
00:02:20,604 --> 00:02:24,554
works for all different types of infrastructure resources, not just for network devices, but as

16
00:02:24,592 --> 00:02:27,974
well. You might even have existing licenses if you're in a larger

17
00:02:28,022 --> 00:02:31,958
company in your compute, storage, other parts of your it teams,

18
00:02:31,974 --> 00:02:35,006
they're probably already using this in different ways, and so you might be able to

19
00:02:35,028 --> 00:02:38,270
leverage some of that as well. But why should you care?

20
00:02:38,340 --> 00:02:41,866
As a network engineer, for me, I know when I was getting started in network

21
00:02:41,898 --> 00:02:45,326
automation, there's just so many things to learn at once.

22
00:02:45,508 --> 00:02:48,706
And for Ansible there are a number of things you do need

23
00:02:48,728 --> 00:02:52,306
to learn. But I think the power of it is that the

24
00:02:52,328 --> 00:02:55,698
playbooks and the way that it's written are easy to read,

25
00:02:55,784 --> 00:02:59,526
easy to share with others. So it makes collaboration easy, and it makes reusing other

26
00:02:59,548 --> 00:03:03,414
people's playbooks for getting started very easy as well. You can take your

27
00:03:03,532 --> 00:03:06,374
existing lines of configuration that you're going to make for a change,

28
00:03:06,492 --> 00:03:10,054
or your list of verification commands you're going to send in your next change request

29
00:03:10,102 --> 00:03:13,930
and integrate that into Ansible. So that way you can start

30
00:03:14,080 --> 00:03:17,222
having automation trickle into your existing workflows.

31
00:03:17,286 --> 00:03:20,714
And as your confidence increases in the tool and

32
00:03:20,752 --> 00:03:24,314
your ability to use the tool, you can then start having more

33
00:03:24,352 --> 00:03:27,578
and more of your things that you're doing manually, just made just for one device,

34
00:03:27,594 --> 00:03:31,386
and you go into the next device with Ansible, you can scale

35
00:03:31,418 --> 00:03:35,178
that out to many devices it has built in scaling and threading.

36
00:03:35,274 --> 00:03:38,542
And so if you're going to maybe make a change window for 30 different devices,

37
00:03:38,606 --> 00:03:41,954
you could have Ansible talk to all those 30 devices at the same time,

38
00:03:41,992 --> 00:03:45,730
more or less send this verification commands before your change.

39
00:03:45,800 --> 00:03:49,526
You could still do the change manually, then you have it automatically send the

40
00:03:49,548 --> 00:03:52,966
verification commands and save those all to a file. And eventually once you build

41
00:03:52,988 --> 00:03:56,534
up your confidence, you can use the powerful configuration templating engine

42
00:03:56,572 --> 00:03:59,914
of ginger two that's included in ansible to

43
00:03:59,952 --> 00:04:03,306
then also abstract away and start templatizing your

44
00:04:03,328 --> 00:04:07,690
configuration for all those changes that you do on a common basis.

45
00:04:08,430 --> 00:04:12,422
So what are the basic building blocks of Ansible? You have an inventory

46
00:04:12,486 --> 00:04:15,806
file for listing off your devices. You have modules that are in

47
00:04:15,828 --> 00:04:19,102
a playbook. The playbook has these modules that are

48
00:04:19,156 --> 00:04:22,862
basically the workhorse, the functions that are actually talking to your different

49
00:04:22,916 --> 00:04:27,354
devices, that you define your inventory. And then finally you have an application configuration

50
00:04:27,402 --> 00:04:31,074
file that just defines the default values that you'd want to have within the

51
00:04:31,112 --> 00:04:34,466
application. And that's something you don't touch very often, but we'll talk about, just so

52
00:04:34,488 --> 00:04:37,982
you know it's there. So first, the Ansible inventory.

53
00:04:38,046 --> 00:04:41,510
It can be either in an INI format, you can see on the top there

54
00:04:41,660 --> 00:04:44,882
where it uses brackets to define groupings such as a device group of iOS

55
00:04:44,946 --> 00:04:48,694
XE. And then you also have the yaml format of a different

56
00:04:48,732 --> 00:04:52,662
inventory file below where it uses indentation base and colons

57
00:04:52,726 --> 00:04:56,774
to define the structure of that. And Ini Yaml,

58
00:04:56,822 --> 00:04:58,666
there are things that you should look up and see examples of your own,

59
00:04:58,688 --> 00:05:02,646
but they're relatively intuitive to work with. And this Ansible inventory

60
00:05:02,678 --> 00:05:05,774
file devices, what you call your device, it doesn't have to be the same thing

61
00:05:05,812 --> 00:05:09,086
of the actual device name, but it makes sense to do that just to be

62
00:05:09,108 --> 00:05:12,718
consistent. So you have your login credentials. I mean, in a production area you

63
00:05:12,724 --> 00:05:16,126
wouldn't have plain text credentials, but just for demo purposes, we're doing that to

64
00:05:16,148 --> 00:05:19,378
keep it simple. And then you have your IP address,

65
00:05:19,464 --> 00:05:22,334
device types, things like that. So ansible knows how to connect to the devices.

66
00:05:22,382 --> 00:05:26,226
All that is basically started and hidden away in the Ansible inventory file and

67
00:05:26,248 --> 00:05:29,442
you don't touch it very often. So that way when you're working with a playbook,

68
00:05:29,506 --> 00:05:32,806
all those details are not in the playbook. It'll be

69
00:05:32,828 --> 00:05:36,360
hidden from you, but it'll be assumed that Ansible will be loading in.

70
00:05:37,050 --> 00:05:40,806
So what is a playbook? An ansible playbook

71
00:05:40,918 --> 00:05:44,714
is basically a sequence of a series of tasks where

72
00:05:44,832 --> 00:05:48,934
it goes to the first task, let's say it's configuring SNMP.

73
00:05:48,982 --> 00:05:52,186
So it sends a series of lines of configuration to the

74
00:05:52,208 --> 00:05:55,726
one or many hosts that you've defined in your inventory file that you've associated when

75
00:05:55,748 --> 00:05:59,642
you're running it. So when you run Ansible you say, hey, Ansible playbook,

76
00:05:59,786 --> 00:06:03,726
bring in this particular inventory file. I want to work on this device or group

77
00:06:03,748 --> 00:06:07,186
of devices, and then it will go down your list of tasks and say

78
00:06:07,208 --> 00:06:10,622
the first task is configuring the SNMP, it'll go to each device,

79
00:06:10,686 --> 00:06:14,862
see if the configuration is present. If it's not present, it'll push the configuration,

80
00:06:15,006 --> 00:06:18,182
and if it's already present then it won't push the configuration. It basically

81
00:06:18,236 --> 00:06:21,446
does a simple diff to check to see if the configuration you're working with

82
00:06:21,468 --> 00:06:25,586
is already in the device, and then following

83
00:06:25,618 --> 00:06:29,326
tasks might be sending verification commands. Maybe you can use the Webex

84
00:06:29,378 --> 00:06:33,418
teams or slacks modules to be able to have ansible talk

85
00:06:33,504 --> 00:06:37,066
through the APIs to then maybe have those

86
00:06:37,088 --> 00:06:40,298
verification commands that you're sending to the device, the output saved and

87
00:06:40,304 --> 00:06:43,578
then stored and then pushed out to your different operations chat.

88
00:06:43,674 --> 00:06:47,662
So you could have really easy integration across

89
00:06:47,716 --> 00:06:51,834
a broad range of things. And the ansible modules

90
00:06:51,882 --> 00:06:55,270
are what I was referring to before. So these sequence of tasks in the playbook

91
00:06:55,370 --> 00:06:58,562
have these functions that are called modules, and there's over

92
00:06:58,616 --> 00:07:02,626
750 of them available. So there's broad ones as

93
00:07:02,648 --> 00:07:05,330
well as purpose built ones for specific situations.

94
00:07:05,990 --> 00:07:09,686
Ones we'll be using in our demos later today will be focused on working with

95
00:07:09,708 --> 00:07:13,926
iOS devices, and so they'll be making configuration changes to iOS devices as

96
00:07:13,948 --> 00:07:17,538
well as we'll be working with the ginger two templating language.

97
00:07:17,714 --> 00:07:21,158
But you can work with Webex teams, you can work with ServiceNow. There's a lot

98
00:07:21,164 --> 00:07:24,874
of different pre built modules that you can just pull

99
00:07:24,912 --> 00:07:28,330
it in, swap out a few of the parameters that you read on the docs,

100
00:07:29,390 --> 00:07:33,018
the inputs, the parameters, and then you're off and running. So there's

101
00:07:33,034 --> 00:07:36,714
just a huge amount of power in being able to have a level of abstraction

102
00:07:36,762 --> 00:07:40,510
on commonly used it processing tools in these modules.

103
00:07:41,970 --> 00:07:45,854
Finally, the ansible application config, also called Ansible CFG

104
00:07:45,902 --> 00:07:49,618
file. This is either in your current working directory wherever you're running ansible, or in

105
00:07:49,624 --> 00:07:53,086
your ansible folder if you're on a Linux

106
00:07:53,118 --> 00:07:56,466
system and you don't touch this very often, but it's good

107
00:07:56,488 --> 00:08:00,594
to know about. So it has in an ini format you say we

108
00:08:00,632 --> 00:08:03,606
want to have. Here's the default place we're looking for the inventory file, or maybe

109
00:08:03,628 --> 00:08:06,866
here's some custom libraries where we're going to pull in custom modules

110
00:08:06,898 --> 00:08:10,578
because you can customize ansible and so it's good to know about that's

111
00:08:10,594 --> 00:08:13,946
where those things would be stored. You can turn off host key checking if you

112
00:08:13,968 --> 00:08:17,526
don't want to have that verification for your lab and just your testing. So that's

113
00:08:17,558 --> 00:08:21,340
basically where all those different components live. And now putting it all together

114
00:08:21,790 --> 00:08:25,946
with ansible templates and variables. So now we've

115
00:08:25,978 --> 00:08:29,434
talked about playbooks, modules, the inventory and Ansible

116
00:08:29,482 --> 00:08:33,066
config file. One of the other huge, really important

117
00:08:33,188 --> 00:08:36,814
things about Ansible is working with templates and variables.

118
00:08:36,862 --> 00:08:40,558
This is really where the huge productivity increases, just skyrocket

119
00:08:40,574 --> 00:08:44,606
for network engineers. You're able to take existing network configuration,

120
00:08:44,718 --> 00:08:48,386
let's just say you copy it from the running config and then you swap out

121
00:08:48,408 --> 00:08:51,558
some of the key values for variables. So you can see on

122
00:08:51,564 --> 00:08:55,074
the right hand side there, it has some markup there for, for loop.

123
00:08:55,202 --> 00:08:58,706
And you can start very basic, you don't need to start with looping,

124
00:08:58,738 --> 00:09:02,074
but basically genja two is a templating language used within a web

125
00:09:02,112 --> 00:09:06,022
programming. Ansible is able to leverage that language

126
00:09:06,166 --> 00:09:09,546
to then give you more complex logic if you want to

127
00:09:09,568 --> 00:09:12,826
use it for say, looping over a list of interfaces. Because if you look at

128
00:09:12,848 --> 00:09:16,286
a list of interfaces, you see particular syntax that's repeated over

129
00:09:16,308 --> 00:09:20,286
and over again. And the only parts that change are, let's say

130
00:09:20,308 --> 00:09:23,450
the interface name, the IP address, the subnet description,

131
00:09:23,530 --> 00:09:28,222
and you can have those particular values stored in a variable file serialized

132
00:09:28,286 --> 00:09:32,034
in YAML. And then you have a template that says, hey, this is the

133
00:09:32,072 --> 00:09:35,374
form that it's going to look like every time. And then my Yaml file defines

134
00:09:35,422 --> 00:09:38,694
the thing that I'm going to feed into that template. And ansible is able to

135
00:09:38,732 --> 00:09:42,722
associate those variable files with particular devices.

136
00:09:42,786 --> 00:09:46,630
So you can have different variables for different devices socially. Router one

137
00:09:46,700 --> 00:09:50,214
has these particular set of IP addresses. Router two has these particular

138
00:09:50,252 --> 00:09:54,166
set of IP addresses. San Jose region has these particular sets

139
00:09:54,198 --> 00:09:57,914
of variables. And then Ansible is then as you set it up and tell

140
00:09:57,952 --> 00:10:01,194
where the groupings are, what devices you're working with, you're able to then feed those

141
00:10:01,232 --> 00:10:04,938
into your template files, and then it renders the configuration that you can then push

142
00:10:04,954 --> 00:10:08,302
to your network devices. So it helps a lot with abstraction and saving

143
00:10:08,356 --> 00:10:11,806
you time in your configuration management. And the

144
00:10:11,828 --> 00:10:15,722
last major part I'll talk about here with Ansible is facts. So ansible facts

145
00:10:15,786 --> 00:10:19,358
are something that it automation does where when it connects

146
00:10:19,374 --> 00:10:22,434
to a network device, unless you tell it not to, which you can to save

147
00:10:22,472 --> 00:10:26,014
some time. But Ansible facts parse through the run config,

148
00:10:26,062 --> 00:10:29,538
parse through other operational data from the different devices that

149
00:10:29,544 --> 00:10:32,854
you're working with. This is not just for iOS devices, it's across the board and

150
00:10:32,892 --> 00:10:36,486
it has standard naming connecting for variables that it stores in memory at

151
00:10:36,508 --> 00:10:40,098
runtime. So when you're running the Ansible playbook, you can refer to these variables

152
00:10:40,114 --> 00:10:43,386
and make logical decisions off of them, or just print them out and store them

153
00:10:43,408 --> 00:10:46,662
to a file for report. So interesting things like the OS

154
00:10:46,726 --> 00:10:50,230
version, if you're doing OS upgrades or some type of security audit,

155
00:10:50,390 --> 00:10:54,426
these allow you to get access to that information and refer to them specifically

156
00:10:54,458 --> 00:10:57,742
as variables that then you can make logical decisions off of

157
00:10:57,796 --> 00:11:01,502
while you're running your playbooks. And now let's look at our first

158
00:11:01,556 --> 00:11:04,980
demo we have here using the vs code

159
00:11:05,990 --> 00:11:09,218
text editor, viewing a YAMl file that is a

160
00:11:09,224 --> 00:11:13,358
playbook called Basically Playbook iOS XC configure interface

161
00:11:13,534 --> 00:11:17,010
using the cLI config yAML.

162
00:11:17,670 --> 00:11:21,830
And we're going to work with the Routers Devices group. And if you remember

163
00:11:21,900 --> 00:11:25,266
that routers device group is going to refer to our inventory file.

164
00:11:25,298 --> 00:11:28,922
In this case, our inventory file is Inv

165
00:11:29,056 --> 00:11:32,140
Yaml. We're using the YAML format and it has

166
00:11:32,590 --> 00:11:36,454
just one device, sandbox iosxe recommended

167
00:11:36,502 --> 00:11:40,202
one, cisco.com. And it's in a device group

168
00:11:40,256 --> 00:11:43,946
of routers. Based on the indentation, that's the way the YAML

169
00:11:43,978 --> 00:11:47,578
format tells us the groupings of the devices.

170
00:11:47,754 --> 00:11:51,662
So we have one device in a device group called routers with

171
00:11:51,716 --> 00:11:55,182
one iOS XE device. And looking back on

172
00:11:55,236 --> 00:11:58,386
line three, you can see our hosts is routers. And so that's referring to our

173
00:11:58,408 --> 00:12:01,922
inventory file. And our credentials are started in a

174
00:12:01,976 --> 00:12:06,318
relevant variables file based on our group of devices named routers.

175
00:12:06,494 --> 00:12:10,454
So our first task is going to use the CLi config module to

176
00:12:10,492 --> 00:12:13,798
look up a ginger two template, and that ginger two template is going to be

177
00:12:13,804 --> 00:12:17,186
called interface template J two, it's going to load

178
00:12:17,218 --> 00:12:20,938
in that template, load in the associated variables for

179
00:12:21,104 --> 00:12:24,730
the loopbacks we want to render and then push it to our devices.

180
00:12:25,070 --> 00:12:29,210
And now let's take a look at those ginger two templates and YAML files.

181
00:12:29,630 --> 00:12:32,714
And right here I'm using a productivity tool.

182
00:12:32,752 --> 00:12:36,046
It's not part of Ansible itself, but built by one of the people who work

183
00:12:36,068 --> 00:12:39,402
at Red Hat with Ansible called the template design for automation

184
00:12:39,466 --> 00:12:43,134
or TD four a for short. So I took the contents of

185
00:12:43,172 --> 00:12:46,342
the YAML variables file and the Ginger two template file

186
00:12:46,426 --> 00:12:49,554
and put them into this web tool. So on the left hand

187
00:12:49,592 --> 00:12:53,442
column we can see the yAML variables of the different loopbacks 100 through

188
00:12:53,496 --> 00:12:57,326
104 with the different nested variables

189
00:12:57,358 --> 00:13:00,498
of the description, the IPV four address, and the subnet.

190
00:13:00,674 --> 00:13:04,466
Basically, when we run ansible, it would load in that variable data associated

191
00:13:04,498 --> 00:13:08,066
for the device. We want to configure each of those loopbacks,

192
00:13:08,098 --> 00:13:11,826
the descriptions, the addresses, and then feed it into that middle column of the ginger

193
00:13:11,858 --> 00:13:15,270
two template. So that would be in a separate file in our ansible directory.

194
00:13:15,430 --> 00:13:19,254
And so when we run ansible, it would feed in the loopback, names, the descriptions,

195
00:13:19,302 --> 00:13:23,162
IPV four addresses into that for loop and then render

196
00:13:23,226 --> 00:13:26,590
out our configuration. So if I click render,

197
00:13:27,250 --> 00:13:31,214
we can see what that configuration would look like and

198
00:13:31,252 --> 00:13:35,618
we can see it has the interface 100 through 104

199
00:13:35,704 --> 00:13:39,406
with the associated descriptions and IP addresses.

200
00:13:39,518 --> 00:13:42,994
The indentation is a little off in this image because I need basically to fit

201
00:13:43,032 --> 00:13:46,962
this window in the screen we have here, but the indentation would be correct

202
00:13:47,016 --> 00:13:50,466
for what the iOS platform is looking for. And now let's

203
00:13:50,498 --> 00:13:53,714
actually run our playbook and see those configuration lines

204
00:13:53,762 --> 00:13:57,474
sent to the device. And now we're going to execute the ansible

205
00:13:57,522 --> 00:14:00,946
playbook that is going to configure those loopback interfaces.

206
00:14:01,058 --> 00:14:04,314
So I'll do an LS command to show you the files we have here.

207
00:14:04,352 --> 00:14:07,750
We have our inventory file and then directory for all of our playbooks.

208
00:14:07,910 --> 00:14:11,526
If we look at our playbooks, we are going to be using the playbook

209
00:14:11,638 --> 00:14:15,390
iOS XC configure interfaces ClI config mod Yaml

210
00:14:15,810 --> 00:14:19,534
and now if I just paste in, we have ansible playbook as

211
00:14:19,572 --> 00:14:22,718
the command we're using, and we're telling to use that particular YAML file. I'm just

212
00:14:22,724 --> 00:14:26,942
going to add an additional b so we can have a little more verbose

213
00:14:27,006 --> 00:14:30,210
output. Now it's executing that first play,

214
00:14:30,280 --> 00:14:33,538
that first task where it's going to load in those ginger templates, load in the

215
00:14:33,544 --> 00:14:38,002
variables, and then send the configuration commands to the device. Now Ansible

216
00:14:38,066 --> 00:14:41,506
has said we have successfully sent the following

217
00:14:41,538 --> 00:14:45,586
lines of configuration to our one device. We have our interface loopback

218
00:14:45,618 --> 00:14:49,362
100 through 104 with the associated descriptions

219
00:14:49,426 --> 00:14:52,758
and IP addresses. You saw that happen just in the blink of an eye.

220
00:14:52,854 --> 00:14:56,454
And if we were working with multiple devices, it would have sent the associated

221
00:14:56,502 --> 00:15:00,218
commands with the loaded variables for each of those devices as well.

222
00:15:00,384 --> 00:15:03,466
If there are any errors, it would have told us, or if the configuration is

223
00:15:03,488 --> 00:15:07,278
already present, like if I send this again, it should tell us that

224
00:15:07,364 --> 00:15:11,040
these configuration lines are already present and it won't need to send anything.

225
00:15:11,410 --> 00:15:14,738
And we can see there, see, changed equals false. So ansible is

226
00:15:14,744 --> 00:15:18,514
checked. Oh, we've already configured this so we don't need to send anything actually at

227
00:15:18,552 --> 00:15:22,798
all. And that is our first demo configuration,

228
00:15:22,974 --> 00:15:26,926
an iOS Xe device with junior two templates for loopbacks

229
00:15:26,958 --> 00:15:30,310
100 through 104. And now let's move on to our second demo.

230
00:15:30,380 --> 00:15:34,150
Build reports with Ansible. We're going to be using the ansible facts

231
00:15:34,490 --> 00:15:37,554
and let's take a look at the ansible playbook

232
00:15:37,602 --> 00:15:41,670
to get started we have here a playbook

233
00:15:43,130 --> 00:15:47,370
define play one working on the same routers, just that one iOS device

234
00:15:47,790 --> 00:15:51,018
and on the first task it's going to connect to the device and use the

235
00:15:51,024 --> 00:15:54,442
iOS fax module to gather the fax store that into a variable.

236
00:15:54,506 --> 00:15:58,090
It'll print one of the variables out the Ansible hostname

237
00:15:58,170 --> 00:16:01,374
and the OS version to the screen. It will then

238
00:16:01,412 --> 00:16:04,954
print the raw output and then make sure an outputs directory

239
00:16:05,002 --> 00:16:08,606
exists because in ansible you can work with the Linux file system. So it creates

240
00:16:08,638 --> 00:16:11,986
a directory called outputs and then it uses a template called

241
00:16:12,008 --> 00:16:15,678
the fax template j two to basically take the variables

242
00:16:15,694 --> 00:16:18,998
that we've stored from those facts and then dump them into a template. So we

243
00:16:19,004 --> 00:16:22,806
can see the fax template here where it has

244
00:16:22,988 --> 00:16:27,122
some text at the top saying this is our Cisco sandbox

245
00:16:27,186 --> 00:16:30,326
device output and the curly brackets say we have these different

246
00:16:30,348 --> 00:16:33,926
variables of ansible. Net host name, the model, the iOS type version,

247
00:16:33,958 --> 00:16:37,754
serial number all printed out, the top fed in from our fax at

248
00:16:37,792 --> 00:16:41,126
runtime and then some interfaces and for each of the interfaces it's going to loop

249
00:16:41,158 --> 00:16:44,954
over take some of the different dictionary keys,

250
00:16:45,082 --> 00:16:48,922
get the values out of them and then put that into our template and render

251
00:16:48,986 --> 00:16:51,578
that to a report file.

252
00:16:51,754 --> 00:16:55,234
So now that we've seen those facts, let's take a

253
00:16:55,272 --> 00:16:59,390
look at the terminal and run our playbook.

254
00:16:59,550 --> 00:17:02,286
So we are using ansible playbook,

255
00:17:02,478 --> 00:17:06,626
playbooks iOS XC get facts with template and V

256
00:17:06,648 --> 00:17:09,974
will give us the verbose output and

257
00:17:10,012 --> 00:17:13,510
we should see actually the loopbacks that we created from the previous task.

258
00:17:14,170 --> 00:17:17,414
So first it's going to log into the network device, do the show

259
00:17:17,452 --> 00:17:20,594
run show version, parse all that output, store it into the variables.

260
00:17:20,642 --> 00:17:24,058
It's printing those variables to the screen. We're not going

261
00:17:24,064 --> 00:17:27,498
to necessarily look at all the different terminal outputs because you kind of get a

262
00:17:27,504 --> 00:17:30,534
feel for what's going on there. And the yellow shows us that it was successful

263
00:17:30,582 --> 00:17:34,122
and it made a change and it's created that file that we were talking about

264
00:17:34,176 --> 00:17:37,342
for that report. Let's take a look at the report. Pulling open

265
00:17:37,396 --> 00:17:40,766
our vs code again, not just looking at the template now, but we

266
00:17:40,788 --> 00:17:44,950
can see that we have an outputs directory and within that outputs

267
00:17:44,970 --> 00:17:48,260
directory we have a new file and that file is our report

268
00:17:48,630 --> 00:17:51,922
and that report has our device name, device type,

269
00:17:51,976 --> 00:17:55,586
OS version, and that loop created a different set

270
00:17:55,608 --> 00:17:59,314
of information for all of the facts that we had gotten for the interfaces for

271
00:17:59,352 --> 00:18:02,898
starting gigabit Ethernet, one going all the way down to gigabit

272
00:18:02,914 --> 00:18:06,806
Ethernet 100 through 104. You can see there are some other whipbacks on there from

273
00:18:06,908 --> 00:18:10,798
previous iterations of other people's demos. So with just a few lines

274
00:18:10,834 --> 00:18:14,954
on a playbook using the built in ansible facts and some Gingertooth templates, we've made

275
00:18:15,152 --> 00:18:18,186
a report with a list of all the interfaces and all the

276
00:18:18,208 --> 00:18:21,882
basic information. And now let's take a look at the third

277
00:18:21,936 --> 00:18:25,822
demo. Pre and post checks with Ansible first

278
00:18:25,876 --> 00:18:28,800
let's take a look at the playbook and what we're working with.

279
00:18:29,170 --> 00:18:33,358
So with Ansible you can do some complex stuff.

280
00:18:33,524 --> 00:18:36,318
I'm not going to go through every nitty gritty detail on what this playbook is

281
00:18:36,324 --> 00:18:39,986
going to accomplish, but the high level of what we're doing here is that

282
00:18:40,008 --> 00:18:43,746
we're including the same change that we had before of adding those loopbacks 100 through

283
00:18:43,768 --> 00:18:47,266
104, and we're also adding pre and post checks. So the

284
00:18:47,288 --> 00:18:50,806
pre checks are going to be show IP and interface brief, show interfaces and

285
00:18:50,828 --> 00:18:54,200
show ip routes. So we have three show commands that we're going to send.

286
00:18:55,450 --> 00:18:58,818
We're going to create a directory called outputs if it's

287
00:18:58,834 --> 00:19:02,806
not already there, and create a subdirectory per device name for pre

288
00:19:02,828 --> 00:19:06,026
change, another directory for post change, another directory for the diffs between

289
00:19:06,048 --> 00:19:10,154
the two. And so it's going to run through the change,

290
00:19:10,352 --> 00:19:14,266
create the directories, do the pre checks, make the change, and then

291
00:19:14,448 --> 00:19:18,046
dump the outputs into the files based on the name of the device and

292
00:19:18,068 --> 00:19:21,646
then do a diff between the two when it does the post change. So we

293
00:19:21,668 --> 00:19:25,098
have a ginger two template that's going to basically format those show command results

294
00:19:25,114 --> 00:19:28,078
for us a little bit. So it takes the results, says what was the command

295
00:19:28,094 --> 00:19:30,786
that was sent? And then just dumps the output for us.

296
00:19:30,968 --> 00:19:34,658
So let's go ahead and pull up our terminal and

297
00:19:34,744 --> 00:19:38,610
we can run through. So I've actually run another playbook to clean up

298
00:19:38,760 --> 00:19:42,342
our demo device to remove the interfaces because we want to have that

299
00:19:42,396 --> 00:19:45,734
change of adding the interfaces be part of that diff as well. So I basically

300
00:19:45,772 --> 00:19:49,838
ran another playbook before called the good Citizen script that removes

301
00:19:49,874 --> 00:19:53,418
the loopbacks that we were just using. So now we can re add them with

302
00:19:53,424 --> 00:19:57,034
our pre and post checks. So ansible playbook playbooks pre post

303
00:19:57,072 --> 00:20:00,780
checks yaml with verbosity on high.

304
00:20:01,230 --> 00:20:04,702
So we're going to first grab our date timestamp so

305
00:20:04,756 --> 00:20:08,090
we have a unique file name. We're going to create a directory

306
00:20:08,170 --> 00:20:11,630
per device name. In this case we have the sandbox iOS Xe recommended one.

307
00:20:11,700 --> 00:20:15,026
Cisco.com is sending the pre checks of our three different

308
00:20:15,048 --> 00:20:19,630
show commands. It's taking the output of those different commands,

309
00:20:19,710 --> 00:20:23,394
dumping them into a files into the directory for the pre change

310
00:20:23,512 --> 00:20:27,138
directory that's timestamped for when that change occurred. It's going

311
00:20:27,144 --> 00:20:30,982
to actually now send those three loopbacks 100 through 104 making

312
00:20:31,036 --> 00:20:35,074
that configuration change and now we're sequentially going to the next series of tasks

313
00:20:35,122 --> 00:20:39,270
of getting a new date timestamp for our post change verification

314
00:20:40,010 --> 00:20:42,982
we're now going to send the same set of commands,

315
00:20:43,126 --> 00:20:46,554
put them through that ginger two template and then dump them into a file into

316
00:20:46,592 --> 00:20:49,962
the post change directory. It's going to use that same ginger two template of

317
00:20:50,016 --> 00:20:53,814
saying hey, here's the command, here's the output for each of the different commands

318
00:20:53,862 --> 00:20:57,534
for our device and then it's going to do a Linux diff between

319
00:20:57,572 --> 00:21:00,942
the two. So it's going to take the pre change output and the post change

320
00:21:00,996 --> 00:21:04,538
output and then do a diff between the two and save that to our file.

321
00:21:04,634 --> 00:21:07,010
So now let's take a look at that output.

322
00:21:09,910 --> 00:21:13,246
Let's see we have our outputs on the left here and we have a directory

323
00:21:13,278 --> 00:21:17,454
that was created based on the device name. So we have a pre change output.

324
00:21:17,502 --> 00:21:20,882
So the command that was sent was show IP interface brief

325
00:21:20,946 --> 00:21:24,518
here's the outputs saved to our file. We have show interfaces that

326
00:21:24,524 --> 00:21:28,280
was sent and the show interfaces output. We scroll down a bit more

327
00:21:28,650 --> 00:21:31,878
from all the show interfaces output and then we have our last command that was

328
00:21:31,884 --> 00:21:35,340
sent was show IP route and we have our show IP route information

329
00:21:35,710 --> 00:21:38,906
that was all in the pre change directory for that device and we have the

330
00:21:38,928 --> 00:21:42,350
post change directory for show IP interface brief

331
00:21:42,850 --> 00:21:46,922
command output now we have the new interface

332
00:21:46,986 --> 00:21:50,970
loopback interfaces. We have show interfaces with the show interface output

333
00:21:51,130 --> 00:21:55,194
as well as the third command set show IP route

334
00:21:55,242 --> 00:21:58,010
so pretty similar there. And now let's look at the diff. So it takes the

335
00:21:58,020 --> 00:22:00,786
pre and post change and then does a Linux diff between the two. So the

336
00:22:00,808 --> 00:22:04,190
little arrows on the first line can tell us based on the Linux

337
00:22:04,270 --> 00:22:07,870
diff syntax which file was change.

338
00:22:07,950 --> 00:22:11,122
And we can see just in these first lines the Linux diff tells us immediately

339
00:22:11,186 --> 00:22:14,242
these loopbacks 100 through 104 were added to our device.

340
00:22:14,306 --> 00:22:17,446
So we definitely have a change between our pre and post. And in

341
00:22:17,468 --> 00:22:21,194
terms of operationally we see our loopback 100 is up. So that was now

342
00:22:21,232 --> 00:22:24,918
added because we did our show interfaces

343
00:22:25,094 --> 00:22:27,498
and same thing for loopbacks 100 through 104,

344
00:22:27,504 --> 00:22:31,178
and we can go down to our last part for

345
00:22:31,264 --> 00:22:34,666
the show IP interfaces to see that loopbacks 100 through 104

346
00:22:34,688 --> 00:22:37,918
are also present in our div. So this just gives a huge amount of

347
00:22:37,924 --> 00:22:41,386
power to be able to automation have all of our pre and post checks defined.

348
00:22:41,418 --> 00:22:45,258
You can change those different show commands, you could have them defined in a variable

349
00:22:45,354 --> 00:22:48,514
file on their own. I feel like just

350
00:22:48,632 --> 00:22:52,078
the sky is the limit in terms of what you can do and just modifying

351
00:22:52,094 --> 00:22:55,026
it for your particular environment. All this code is going to be freely available on

352
00:22:55,048 --> 00:22:59,070
GitHub. This is just a demo that we have here at Cisco learning inserts

353
00:22:59,150 --> 00:23:02,786
just to show the power of what ansible is available. And Cisco's learning certifications

354
00:23:02,818 --> 00:23:06,226
also has a lot of neat resources for you to help your network automation journey

355
00:23:06,258 --> 00:23:09,558
that are free and paid resources to help you in your certifications. And we

356
00:23:09,564 --> 00:23:13,606
have a new certification recently for the

357
00:23:13,628 --> 00:23:17,080
Devnet expert that you might want to check out, but also probably start

358
00:23:17,530 --> 00:23:20,874
lower up the food chain for some of our other applications on automation

359
00:23:20,922 --> 00:23:23,930
as well. Well, thanks a lot and I hope you really enjoyed this session.

