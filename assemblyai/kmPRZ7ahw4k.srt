1
00:01:44,830 --> 00:01:48,574
Welcome everyone, and thanks for watching my talk. I'm Peleg

2
00:01:48,622 --> 00:01:51,390
and today we're going to talk about two amazing topics,

3
00:01:51,470 --> 00:01:55,006
configuration and security. This talk's

4
00:01:55,038 --> 00:01:58,914
title configuration, the weak link in the security chain, isn't just

5
00:01:58,952 --> 00:02:02,674
a catchy phase. It encapsulates a critical challenge in

6
00:02:02,712 --> 00:02:06,366
today's cybersecurity landscape and in the realm

7
00:02:06,398 --> 00:02:09,926
of Devsec oss, configuration often go unnoticed,

8
00:02:10,038 --> 00:02:13,930
yet it hold immense power in the security

9
00:02:14,080 --> 00:02:17,834
and functionality of our system. Throughout this

10
00:02:17,872 --> 00:02:22,122
talk, we will delve into why and how configurations

11
00:02:22,186 --> 00:02:26,110
can become a weak link if not managed properly.

12
00:02:26,690 --> 00:02:30,826
So before we'll dive into configuration, let me introduce

13
00:02:30,858 --> 00:02:35,150
myself. My name is Pelk Bharat. I've been a software developer

14
00:02:35,230 --> 00:02:39,346
more than eight years, mainly focused on cybersecurity and

15
00:02:39,448 --> 00:02:43,182
networks, and in the past three years I've

16
00:02:43,246 --> 00:02:47,346
been leading configu trying to make misconfigurations

17
00:02:47,458 --> 00:02:50,854
caused by poor configuration management a thing of the

18
00:02:50,892 --> 00:02:54,534
past. Let's start by outlining what

19
00:02:54,572 --> 00:02:58,234
we will explore in these talk. First, we will take

20
00:02:58,272 --> 00:03:01,722
a deep dive into application configuration. Then we will

21
00:03:01,776 --> 00:03:05,750
take a closer look at permissions over configuration

22
00:03:05,830 --> 00:03:09,146
and these challenges they present. Permission can

23
00:03:09,168 --> 00:03:12,266
be a tricky landscape to navigate,

24
00:03:12,458 --> 00:03:15,982
and we will see how missteps here

25
00:03:16,116 --> 00:03:19,230
can lead to significant security vulnerabilities.

26
00:03:19,970 --> 00:03:23,282
Next, we will discuss the risk associated with

27
00:03:23,336 --> 00:03:27,170
unencrypted file in the era where

28
00:03:27,240 --> 00:03:30,580
data breaches are all too common.

29
00:03:31,030 --> 00:03:35,090
Understanding the need for encryption and

30
00:03:35,240 --> 00:03:38,660
why it's so important. Now more than ever,

31
00:03:39,110 --> 00:03:42,866
we will see and talk about monitoring

32
00:03:42,898 --> 00:03:46,630
configuration and automation and

33
00:03:46,780 --> 00:03:49,930
why both are key areas.

34
00:03:50,510 --> 00:03:54,234
And finally, we'll wrap up with some best

35
00:03:54,272 --> 00:03:58,534
practices and a possible solution for secure configuration

36
00:03:58,582 --> 00:04:03,006
strategy. These will equip you with

37
00:04:03,188 --> 00:04:07,280
actionable insight that you can take back to your team.

38
00:04:07,810 --> 00:04:11,918
Our exploration begin with our software Bible, the twelve

39
00:04:12,004 --> 00:04:15,650
factory guide. And I know some folks here

40
00:04:15,720 --> 00:04:19,058
will find these guide a bit old school, but it does a

41
00:04:19,064 --> 00:04:22,754
good job of explaining the basic. And in particular we will

42
00:04:22,792 --> 00:04:26,790
focus on the config section and talk about application configuration

43
00:04:27,450 --> 00:04:31,318
and every software is a combination of

44
00:04:31,404 --> 00:04:35,046
code that specifies these logic and kind

45
00:04:35,068 --> 00:04:39,142
of static and configurations that define the behavior

46
00:04:39,206 --> 00:04:42,010
of the software between the different environments.

47
00:04:42,590 --> 00:04:46,554
You can think of configuration as a bench of

48
00:04:46,592 --> 00:04:50,022
setting that tell our software how to act.

49
00:04:50,176 --> 00:04:53,710
It's like giving specific instruction to a

50
00:04:53,780 --> 00:04:57,118
video game so that it know how to start

51
00:04:57,204 --> 00:05:00,890
and what level difficulty

52
00:05:00,970 --> 00:05:04,206
to use. As we develop software,

53
00:05:04,318 --> 00:05:07,682
we keep configurations separate from the code and store

54
00:05:07,736 --> 00:05:11,294
them in separate locations or dedicated files

55
00:05:11,342 --> 00:05:14,762
for that. These include configuration

56
00:05:14,846 --> 00:05:18,898
like environment variables, secrets to keep data safe,

57
00:05:18,994 --> 00:05:23,046
feature flex to maybe turn certain function on off

58
00:05:23,228 --> 00:05:27,750
and other implementation of application configuration.

59
00:05:28,190 --> 00:05:31,850
Before we dive deeper, let's define configurations management.

60
00:05:32,430 --> 00:05:36,010
Think of it as the blueprint of your dev operations.

61
00:05:36,590 --> 00:05:40,334
It's the process of systematically handling changes to

62
00:05:40,372 --> 00:05:44,720
a system in a way that maintain integrity over time.

63
00:05:45,250 --> 00:05:48,970
In Devsecops, configurations management plays a pivotal

64
00:05:49,050 --> 00:05:52,546
role. It's like a conductor of an

65
00:05:52,568 --> 00:05:56,290
orchestra, ensuring every instrument, or in our case,

66
00:05:56,360 --> 00:06:00,050
every piece of configuration, works in harmony.

67
00:06:00,630 --> 00:06:04,306
Without it, you risk descending into

68
00:06:04,408 --> 00:06:07,590
chaotic, uncoordinated efforts that

69
00:06:07,660 --> 00:06:10,870
compromise both security and functionality.

70
00:06:11,530 --> 00:06:15,250
Why is it so important? Well, configurations management

71
00:06:15,330 --> 00:06:19,206
allows us to keep track of all of our aspects

72
00:06:19,238 --> 00:06:23,020
of our software. It plays a crucial role in security.

73
00:06:23,550 --> 00:06:26,826
A wellmanaged configuration process means

74
00:06:27,008 --> 00:06:30,430
we have tight control over our environments,

75
00:06:30,770 --> 00:06:34,890
making it harder for unauthorized changes or breaches

76
00:06:35,050 --> 00:06:38,702
to occur. It's like having a

77
00:06:38,756 --> 00:06:42,610
wellguard fortress with a clear record

78
00:06:42,680 --> 00:06:46,594
of who has a key and why. So as

79
00:06:46,632 --> 00:06:49,758
we delve into the nuances of configuration management,

80
00:06:49,934 --> 00:06:53,998
remember, it's not just a technical necessity,

81
00:06:54,174 --> 00:06:58,214
it's the backbone of efficient and secure software development and

82
00:06:58,252 --> 00:07:01,590
operations in the world of devsecops.

83
00:07:02,090 --> 00:07:06,146
Now let's take a closer look at one of these most intricate aspects

84
00:07:06,178 --> 00:07:09,210
of configuration management permissions.

85
00:07:09,950 --> 00:07:14,214
Imagine you were in a maze and each turn represent

86
00:07:14,262 --> 00:07:17,642
a different repository or folder in your

87
00:07:17,696 --> 00:07:20,810
system. This is what managing permissions

88
00:07:20,970 --> 00:07:24,030
in a fragment environment feels like.

89
00:07:24,180 --> 00:07:28,266
Firstly, let's talk about fragment storage. In many organizations,

90
00:07:28,378 --> 00:07:31,626
configuration are scattered across versus repositories,

91
00:07:31,738 --> 00:07:35,566
folders and third parties, tools like secret

92
00:07:35,598 --> 00:07:39,054
managers, featureflow solutions, infrastructure tools,

93
00:07:39,102 --> 00:07:42,674
cloud vendors, and many more. It's like having

94
00:07:42,712 --> 00:07:47,010
your clothes spread out in different wardrobes

95
00:07:47,170 --> 00:07:50,806
in different rooms. To get dressed, you need to

96
00:07:50,828 --> 00:07:54,034
know which wardrobe has your shirt,

97
00:07:54,162 --> 00:07:57,266
which one has your pants, and so on.

98
00:07:57,388 --> 00:08:00,762
Similarly, in configurations, you need to know where

99
00:08:00,896 --> 00:08:04,634
each piece of the puzzle lies, which can

100
00:08:04,672 --> 00:08:08,620
be a daunting task. In addition to the fragmentation issue,

101
00:08:09,310 --> 00:08:12,698
the binary nature of permissions add another layer

102
00:08:12,714 --> 00:08:15,482
of complexity. In most systems,

103
00:08:15,546 --> 00:08:18,990
permissions worked in a yes or no fashion.

104
00:08:19,490 --> 00:08:22,974
Imagine if entering a room in your

105
00:08:23,012 --> 00:08:26,194
house required a special key, but each

106
00:08:26,232 --> 00:08:30,078
key either unlock all the room or none.

107
00:08:30,254 --> 00:08:33,170
This is the challenge we face in configurations.

108
00:08:33,510 --> 00:08:37,778
Either you have full access to all of your configuration files

109
00:08:37,954 --> 00:08:42,050
or you have none. It's like using a sleg hammer

110
00:08:42,130 --> 00:08:45,958
when a scalpel is needed. This lead us

111
00:08:46,124 --> 00:08:50,054
to two significant issue over permissions

112
00:08:50,182 --> 00:08:53,882
and under permissions over permissions are like

113
00:08:53,936 --> 00:08:57,258
giving someone the master key to your entire

114
00:08:57,344 --> 00:09:01,482
house. When they only need to water

115
00:09:01,536 --> 00:09:05,200
the plants, they have access to everything,

116
00:09:05,970 --> 00:09:09,374
which is a massive security risk. On the other

117
00:09:09,412 --> 00:09:13,266
end, under permissions are like giving someone a key

118
00:09:13,368 --> 00:09:18,030
that opens none of the doors they need. This can hinder productivity

119
00:09:18,110 --> 00:09:21,842
and efficiency, as team member may not have an

120
00:09:21,896 --> 00:09:25,938
access to the configuration necessary for their work.

121
00:09:26,104 --> 00:09:29,430
Let's take a real world example to understand the implications.

122
00:09:29,770 --> 00:09:33,830
Think about scenario where a junior developer accidentally gets

123
00:09:33,900 --> 00:09:37,006
access to a critical production database

124
00:09:37,138 --> 00:09:40,438
due to over permission. Conversely,

125
00:09:40,614 --> 00:09:44,842
consider a situation where a senior developer doesn't have access

126
00:09:44,976 --> 00:09:48,294
to a specific configuration file needed to fix a critical

127
00:09:48,342 --> 00:09:51,902
bug. The delay caused by underpermission could mean

128
00:09:51,956 --> 00:09:55,470
significant downtime and potential revenue loss.

129
00:09:55,810 --> 00:09:59,054
To sum it up, managing permissions in

130
00:09:59,092 --> 00:10:02,578
a fragment environment is like trying to

131
00:10:02,584 --> 00:10:06,718
navigate through a maze with a blindfold.

132
00:10:06,894 --> 00:10:10,462
As we move forward, we will discuss how to effectively

133
00:10:10,606 --> 00:10:14,158
manage these permissions and turn this challenging

134
00:10:14,254 --> 00:10:17,510
maze into a well organized library.

135
00:10:18,090 --> 00:10:22,386
Let's shift our focus to another critical issue in configurations management,

136
00:10:22,578 --> 00:10:26,674
the dangers of storing sensitive data in unencrypted

137
00:10:26,722 --> 00:10:30,374
files or raw text. To illustrate,

138
00:10:30,422 --> 00:10:33,846
let's talk about one of the data breaches that Facebook suffered

139
00:10:33,878 --> 00:10:37,446
from here, hundreds of millions of user

140
00:10:37,478 --> 00:10:41,274
records were stored on servers without any encryption.

141
00:10:41,402 --> 00:10:45,258
These wasn't just an oops. Moment, it was a monumental

142
00:10:45,354 --> 00:10:47,760
oversight in data security.

143
00:10:48,850 --> 00:10:53,230
Imagine every like every message, every photo

144
00:10:53,570 --> 00:10:56,500
laid bare for the world to see.

145
00:10:56,870 --> 00:11:00,718
It's a digital nightmare, both for user

146
00:11:00,814 --> 00:11:04,242
and for the company. So how does this happen?

147
00:11:04,376 --> 00:11:07,826
Often, it's not out of malice, but rather lapse

148
00:11:07,858 --> 00:11:11,986
in security practices. Developers, in the rush of their daily tasks,

149
00:11:12,098 --> 00:11:15,986
may store configuration or sensitive data in clear text files

150
00:11:16,098 --> 00:11:19,766
for their convenience. It's like leaving your keys

151
00:11:19,878 --> 00:11:23,930
in the car because you're just stepping out for a minute.

152
00:11:24,350 --> 00:11:28,234
But all it takes is a minute for a breach to

153
00:11:28,272 --> 00:11:32,778
anchor. What's more concerning in the casual sharing

154
00:11:32,874 --> 00:11:36,094
of these unencrypted files, developers may

155
00:11:36,132 --> 00:11:40,400
ping each other with configurations on slack or email,

156
00:11:40,770 --> 00:11:45,282
not realizing they are passing sensitive information through

157
00:11:45,416 --> 00:11:48,674
insecure channels. These brings us to the

158
00:11:48,712 --> 00:11:53,550
question, how do we prevent such accidental exposure?

159
00:11:53,710 --> 00:11:57,870
It starts with a culture of security. Just like locker

160
00:11:57,950 --> 00:12:01,718
doors or windows, encrypting sensitive data

161
00:12:01,884 --> 00:12:05,094
should be a reflex, an automatic part

162
00:12:05,132 --> 00:12:08,902
of the process. Tools like

163
00:12:08,956 --> 00:12:12,902
Hashcorp Vault or AWS secret manager are like digital

164
00:12:12,966 --> 00:12:16,620
locks, offering an added layer of security

165
00:12:17,230 --> 00:12:19,020
to your sensitive information.

166
00:12:19,810 --> 00:12:23,150
Education and awareness are also key.

167
00:12:23,300 --> 00:12:27,034
DevOps need to educate about the risks of unencrypted

168
00:12:27,082 --> 00:12:31,200
files and the best practices for handling sensitive data.

169
00:12:31,650 --> 00:12:35,282
Finally, implementing strict policies and

170
00:12:35,336 --> 00:12:38,482
using tools for automated encryption can help,

171
00:12:38,536 --> 00:12:42,206
too. It's an extra step, but it's crucial for safety.

172
00:12:42,318 --> 00:12:45,814
In our world, encryption is not just a best

173
00:12:45,852 --> 00:12:49,366
practice, it's a necessity of safeguard not just

174
00:12:49,468 --> 00:12:53,590
data, but also the trust and privacy of our users.

175
00:12:53,930 --> 00:12:57,198
Now let's dive into another aspects

176
00:12:57,314 --> 00:13:00,774
of configuration management, the challenge of monitoring

177
00:13:00,822 --> 00:13:04,342
the changes. In many organizations, the monitoring

178
00:13:04,406 --> 00:13:08,262
of configuration changes is fragment two across versus

179
00:13:08,326 --> 00:13:11,566
platform and tools. It's like having different parts of the

180
00:13:11,588 --> 00:13:15,626
story told by different people in different languages. You get bits

181
00:13:15,658 --> 00:13:18,750
and pieces, but never the full picture.

182
00:13:19,090 --> 00:13:22,914
This fragmentation makes incredibly difficult

183
00:13:23,112 --> 00:13:26,898
to have a comprehensive view of

184
00:13:26,984 --> 00:13:31,010
what's happened in real time. And speaking

185
00:13:31,080 --> 00:13:34,702
of real time, the lack of real time alerts is like having

186
00:13:34,776 --> 00:13:38,486
smoke alarm that only goes off after the fire is

187
00:13:38,508 --> 00:13:41,986
spread. Already in the word of configuration,

188
00:13:42,098 --> 00:13:46,280
delays in detecting changes can lead to significant issues,

189
00:13:47,070 --> 00:13:50,730
from system downtimes to security breaches.

190
00:13:51,070 --> 00:13:54,794
It's not just about spotting these changes, it's about

191
00:13:54,912 --> 00:13:58,182
understanding its impact instantly.

192
00:13:58,326 --> 00:14:01,914
This brings us to the concept of proactive versus

193
00:14:02,042 --> 00:14:05,870
reactive approaches. Most monitor systems are

194
00:14:05,940 --> 00:14:09,694
reactive. They alert you after the fact. It's like

195
00:14:09,732 --> 00:14:13,362
treating a disease instead of preventing it in the first

196
00:14:13,416 --> 00:14:17,410
place. In ideal world, we want our monitoring system

197
00:14:17,480 --> 00:14:21,346
to be proactive to alert us of potential issues

198
00:14:21,448 --> 00:14:24,934
before they become an actual problems. A good

199
00:14:24,972 --> 00:14:28,774
example to consider here is the use of

200
00:14:28,812 --> 00:14:32,722
advantage monitoring tools like datadog or splunk.

201
00:14:32,866 --> 00:14:37,358
They don't just record what's happening, they analyze patterns,

202
00:14:37,554 --> 00:14:41,420
predict potential issues, and alert you in real time.

203
00:14:41,950 --> 00:14:45,898
It's a shift from a passive surveillance systems

204
00:14:46,064 --> 00:14:48,858
to an active defense mechanism. However,

205
00:14:48,944 --> 00:14:52,990
implementing such systems is not without its challenges.

206
00:14:53,330 --> 00:14:57,482
It requires a deep understanding of the configurations,

207
00:14:57,626 --> 00:15:01,470
the interdependencies, and the potential risks.

208
00:15:01,810 --> 00:15:05,986
In summary, effective monitoring of configuration changes

209
00:15:06,168 --> 00:15:09,934
is not just a lecture, it's necessity. In today's

210
00:15:09,982 --> 00:15:13,198
face security conscious

211
00:15:13,294 --> 00:15:16,466
world, it requires the right tools,

212
00:15:16,578 --> 00:15:21,110
the right strategies and a proactive mindset.

213
00:15:21,530 --> 00:15:25,350
As we navigate in a complex world of devsecops,

214
00:15:25,690 --> 00:15:28,954
let's remind that our goal is not just

215
00:15:28,992 --> 00:15:32,790
to monitor, but to anticipate

216
00:15:32,950 --> 00:15:36,870
and protect. Let's turn our attention to a crucial aspect

217
00:15:36,950 --> 00:15:40,458
that often gets overlooked in configuration management,

218
00:15:40,634 --> 00:15:44,810
the automation gap. Imagine try to build a skyscraper

219
00:15:44,970 --> 00:15:48,030
with just hammers and aims.

220
00:15:48,370 --> 00:15:51,690
That's what it's like to manage modern configuration manually.

221
00:15:51,850 --> 00:15:53,810
It's not just inefficient,

222
00:15:54,390 --> 00:15:58,190
it's nearly impossible, given the complexity

223
00:15:58,270 --> 00:16:01,090
and the scale of today's systems.

224
00:16:01,430 --> 00:16:05,154
First, let's talk about manual processes versus automation

225
00:16:05,202 --> 00:16:09,078
efficiency. In the manual world,

226
00:16:09,244 --> 00:16:12,598
every change, every update requires human

227
00:16:12,764 --> 00:16:16,054
intervention. Manual processes are

228
00:16:16,092 --> 00:16:19,926
prune to errors. They are time consuming,

229
00:16:20,038 --> 00:16:23,340
and let's be honest, they are a bit boring too.

230
00:16:23,790 --> 00:16:26,522
Automation, on the other hand, is fast,

231
00:16:26,656 --> 00:16:30,190
efficient and reduce the chances of a human

232
00:16:30,260 --> 00:16:33,518
error. The role of automation tools cannot be

233
00:16:33,604 --> 00:16:37,246
understated here. Tools like ansible terraform and

234
00:16:37,268 --> 00:16:41,294
puppet are superheroes of the devsecops world and

235
00:16:41,332 --> 00:16:45,186
help us to automate the infrastructure processes. They automate the

236
00:16:45,208 --> 00:16:48,706
tedious, repetitive tasks, allowing teams to

237
00:16:48,728 --> 00:16:52,290
focus on more complex strategic initiatives.

238
00:16:52,790 --> 00:16:56,178
But with great power comes great responsibility.

239
00:16:56,354 --> 00:16:59,734
Automation is powerful, yes, but it's not about

240
00:16:59,852 --> 00:17:03,474
setting it and forgetting it. It's about finding

241
00:17:03,522 --> 00:17:06,878
the right balance. You are not replacing humans,

242
00:17:07,074 --> 00:17:10,522
you are augmenting them. People still

243
00:17:10,576 --> 00:17:13,590
need to set these parameters, the rules,

244
00:17:13,750 --> 00:17:16,342
the checks. In conclusion,

245
00:17:16,486 --> 00:17:20,334
bridging the automation gap in configuration management is not

246
00:17:20,372 --> 00:17:24,346
just about adopting new tools. It's about changing mindset

247
00:17:24,458 --> 00:17:28,506
from doing everything manually to embracing the power of automation.

248
00:17:28,698 --> 00:17:32,754
It's about being smarter, faster and more secure in

249
00:17:32,792 --> 00:17:37,394
how we manage our configuration as we move forward in

250
00:17:37,432 --> 00:17:41,710
the ever involves landscape of DevOps.

251
00:17:41,790 --> 00:17:45,662
Let's remember that automation is not just about tools.

252
00:17:45,806 --> 00:17:49,490
It's strategic ally in our quest for efficiency

253
00:17:49,570 --> 00:17:53,640
and security. And now for the interesting part.

254
00:17:54,010 --> 00:17:57,454
Now let's discuss how to fortify our configuration

255
00:17:57,522 --> 00:18:00,986
chain. Securing the chain is akin to fortifying a

256
00:18:01,008 --> 00:18:04,890
castle. It's not just about building

257
00:18:04,960 --> 00:18:08,394
high walls, it's about having multiple layers of

258
00:18:08,432 --> 00:18:12,430
defense, each serving a specific purpose.

259
00:18:13,090 --> 00:18:16,522
Firstly, let's consider the layered security approach.

260
00:18:16,666 --> 00:18:20,874
This means having different security measures at each stage of the configuration

261
00:18:20,922 --> 00:18:23,822
process. It's like having guards at the gates,

262
00:18:23,966 --> 00:18:27,006
surveillance cameras around the perimeter,

263
00:18:27,198 --> 00:18:31,390
and a safe for your most precious

264
00:18:31,470 --> 00:18:35,006
values. Each layer addresses different security aspects,

265
00:18:35,118 --> 00:18:39,560
from access control and encryption to monitoring and alert system.

266
00:18:40,330 --> 00:18:43,766
The goal is to create a system where if

267
00:18:43,868 --> 00:18:47,110
one layer fails, the other till protect the castle.

268
00:18:47,550 --> 00:18:51,434
Integrating security into configuration management is not

269
00:18:51,472 --> 00:18:54,826
just an add on, it's a fundamental part of the

270
00:18:54,848 --> 00:18:58,634
process. These integration means considering security implications in

271
00:18:58,672 --> 00:19:02,734
every decision, from the design phase to deployment and

272
00:19:02,772 --> 00:19:06,510
maintain and maintenance. It's about asking

273
00:19:06,580 --> 00:19:10,574
the right questions. How will this change impact security?

274
00:19:10,772 --> 00:19:14,606
Are there any potential vulnerabilities? What's the worst

275
00:19:14,718 --> 00:19:18,974
that could happen? One crucial aspect often overlooked

276
00:19:19,022 --> 00:19:21,170
in human elements,

277
00:19:21,990 --> 00:19:25,414
securing configuration is not just about technology.

278
00:19:25,612 --> 00:19:29,574
It's about people. Training and awareness are

279
00:19:29,612 --> 00:19:33,026
key. Everyone from developers to executives

280
00:19:33,138 --> 00:19:36,040
need to understand these role in maintaining security.

281
00:19:36,650 --> 00:19:40,954
It's about creating a culture where security is

282
00:19:40,992 --> 00:19:44,890
not an afterthought, but a fundamental part

283
00:19:45,040 --> 00:19:49,014
of everything we do. Finally, let's talk about continuous

284
00:19:49,062 --> 00:19:53,054
improvement and adaptation. The digital landscape is

285
00:19:53,092 --> 00:19:56,602
constantly evolving, with new threats

286
00:19:56,746 --> 00:19:59,934
emerging every day. Securing your

287
00:19:59,972 --> 00:20:03,390
configuration chain is not a onetime task,

288
00:20:03,550 --> 00:20:06,910
it's an ongoing journey. Regular audits,

289
00:20:07,070 --> 00:20:11,698
staying updated with the latest security trends and

290
00:20:11,864 --> 00:20:15,054
being willing to adapt are crucial.

291
00:20:15,182 --> 00:20:18,366
In summary, securing the configuration chain is multi

292
00:20:18,398 --> 00:20:22,114
faced in Denver. It requires

293
00:20:22,162 --> 00:20:25,910
a blend of technology, processes, and people

294
00:20:26,060 --> 00:20:29,706
all working in harmony. Now that we understand these

295
00:20:29,728 --> 00:20:33,740
security challenges and the importance of managing configuration property,

296
00:20:34,270 --> 00:20:38,394
let me briefly introduce configure, an open source tool that

297
00:20:38,432 --> 00:20:42,286
was designed to address a lot of the issues I brought up.

298
00:20:42,468 --> 00:20:46,154
Configure provides a structured approach of managing configurations

299
00:20:46,282 --> 00:20:49,258
across different environments, system and technologies.

300
00:20:49,434 --> 00:20:53,390
It's built to provide a common, flexible and extendable

301
00:20:53,550 --> 00:20:57,390
process for storing, mutating and orchestrating

302
00:20:57,470 --> 00:21:00,850
configuration data across all the different environments and

303
00:21:00,920 --> 00:21:04,942
systems. Configu takes an approach of configuration

304
00:21:05,006 --> 00:21:09,218
and code that ensures streamlined,

305
00:21:09,314 --> 00:21:12,774
efficient and secured configuration management for your

306
00:21:12,812 --> 00:21:16,706
application. To gain better understanding of how configure

307
00:21:16,738 --> 00:21:20,346
works, I will show how we solve these issues

308
00:21:20,448 --> 00:21:24,140
using configure. Let's go back to our permission issues.

309
00:21:24,590 --> 00:21:28,070
Effective permission management is about ensuring

310
00:21:28,150 --> 00:21:31,422
that each user in your organization has

311
00:21:31,476 --> 00:21:35,966
access to just the right resource, no more, no less.

312
00:21:36,148 --> 00:21:39,582
In configuration, not everyone needs access to every

313
00:21:39,636 --> 00:21:43,774
piece of data. In our old example, our junior developer

314
00:21:43,902 --> 00:21:47,870
doesn't need access to our production service. By limiting

315
00:21:47,950 --> 00:21:51,886
access to necessary resources, you reduce

316
00:21:51,918 --> 00:21:55,990
the risk of data breaches and other security incidents.

317
00:21:56,410 --> 00:21:59,602
There are many approaches to implement permission systems,

318
00:21:59,666 --> 00:22:03,634
but in this talk I will focus on two RBAC role

319
00:22:03,682 --> 00:22:07,782
based access control and ABAC attribute based

320
00:22:07,836 --> 00:22:11,530
access control. Think of ArbAC as the

321
00:22:11,600 --> 00:22:15,754
generic way most systems use like

322
00:22:15,872 --> 00:22:20,338
permissions to your GitHub. For example, for your repository,

323
00:22:20,534 --> 00:22:24,526
you can give to an individual or a

324
00:22:24,548 --> 00:22:28,314
certain group some permission over the repo.

325
00:22:28,442 --> 00:22:32,090
For example, I can give my developers or

326
00:22:32,180 --> 00:22:35,954
one of the teams permission to any repo or any

327
00:22:35,992 --> 00:22:39,842
microservice. On the other hand, ABAC is more like

328
00:22:39,896 --> 00:22:43,650
Google Drive. I can give specific permission

329
00:22:43,990 --> 00:22:48,290
for only one of my files. Each of these approaches

330
00:22:48,450 --> 00:22:52,230
has its own advantages and disadvantages,

331
00:22:52,810 --> 00:22:56,680
and when we think of our configuration management needs,

332
00:22:57,310 --> 00:23:01,180
we understand that alone, these are not good enough.

333
00:23:02,430 --> 00:23:05,850
That's why at configu we implement these combination of

334
00:23:05,920 --> 00:23:09,650
both so we can give the ability

335
00:23:09,750 --> 00:23:13,710
to easily manage environments using the RBAC layer

336
00:23:14,210 --> 00:23:18,122
and at the same time give permission to specific config,

337
00:23:18,186 --> 00:23:22,386
for example, my log level in production to

338
00:23:22,408 --> 00:23:26,254
one of my developers. Effective permission management

339
00:23:26,382 --> 00:23:29,730
is about striking the right balance between

340
00:23:29,880 --> 00:23:33,214
accessibility and security. It's a delicate

341
00:23:33,262 --> 00:23:36,550
dense you need to ensure that your team

342
00:23:36,620 --> 00:23:40,630
has the access they need to be productive,

343
00:23:40,970 --> 00:23:44,226
but not so much that it puts

344
00:23:44,258 --> 00:23:48,774
your system at risks. By implementing smart strategies

345
00:23:48,902 --> 00:23:51,478
and leveraging the right tools,

346
00:23:51,654 --> 00:23:55,910
you can turn this challenging task into a streamlined

347
00:23:55,990 --> 00:23:59,846
and secure process. Let's focus again ensuring the

348
00:23:59,888 --> 00:24:04,030
safe of sensitive data. Data is a valuable commodity,

349
00:24:04,450 --> 00:24:07,902
and unencrypted data is like

350
00:24:08,036 --> 00:24:10,800
leaving money on the table in a crowd place.

351
00:24:11,490 --> 00:24:15,022
It's an open invitation for cybercriminals.

352
00:24:15,166 --> 00:24:18,674
So what tools and practices are essential for

353
00:24:18,712 --> 00:24:22,718
securing handling of this data? Think of encryption tools

354
00:24:22,734 --> 00:24:27,106
like hashcore vault or AWS secret manager as

355
00:24:27,208 --> 00:24:30,594
your digital locksmiths. They convert

356
00:24:30,642 --> 00:24:34,070
sensitive information into a coded language

357
00:24:34,650 --> 00:24:37,820
understandable only by those who have the key.

358
00:24:38,190 --> 00:24:41,510
It's crucial to implement these tools

359
00:24:41,670 --> 00:24:44,570
not just as a one time measure,

360
00:24:45,230 --> 00:24:48,570
but as an integral part of your

361
00:24:48,640 --> 00:24:52,362
ongoing data management practices. And these tools

362
00:24:52,426 --> 00:24:55,930
alone aren't enough. We need to think about preventing

363
00:24:56,010 --> 00:24:59,674
unintentional data explosion. We can use secret

364
00:24:59,722 --> 00:25:02,978
managers, but then sending each other configurations as a

365
00:25:02,984 --> 00:25:06,274
clear text using slack issues the

366
00:25:06,312 --> 00:25:10,274
point and increase the risk as we believe

367
00:25:10,392 --> 00:25:13,620
that our secrets are safe. But no, they are not.

368
00:25:14,810 --> 00:25:18,870
This is where configure can help. We use configu for collaborating around

369
00:25:18,940 --> 00:25:22,982
configuration to make sure we always have

370
00:25:23,036 --> 00:25:26,438
the most updated version, but without keeping a

371
00:25:26,444 --> 00:25:29,962
local version as simple or a raw text,

372
00:25:30,096 --> 00:25:34,054
configure's open source software can manage and orchestrate everywhere

373
00:25:34,102 --> 00:25:37,030
you and your team are storing configuration,

374
00:25:37,110 --> 00:25:40,554
including secret managers, and create unified management

375
00:25:40,602 --> 00:25:44,590
layer, which enables collaboration and automations.

376
00:25:44,930 --> 00:25:48,634
As a conclusion, ensuring data encryption is not just a technical

377
00:25:48,682 --> 00:25:52,734
requirement, it's a fundamental responsibility. As guardian

378
00:25:52,782 --> 00:25:56,498
of data in the digital age, it's our duty to

379
00:25:56,504 --> 00:25:59,806
ensure that every piece of sensitive information is locked

380
00:25:59,838 --> 00:26:02,914
away safely, accessible only to

381
00:26:02,952 --> 00:26:06,534
those who need it and have the right for

382
00:26:06,572 --> 00:26:10,390
it. By implementing robust encryption practices,

383
00:26:10,810 --> 00:26:14,854
we not only protect data, but also build trust.

384
00:26:15,052 --> 00:26:18,854
Now let's turn our automation back to the monitoring

385
00:26:18,902 --> 00:26:22,518
aspect. The need for comprehensive monitoring tools

386
00:26:22,614 --> 00:26:26,486
in today's complex it or DevOps landscapes cannot

387
00:26:26,518 --> 00:26:30,266
be underestimated. They provide visibility

388
00:26:30,378 --> 00:26:33,710
into your system, help you understand how different

389
00:26:33,780 --> 00:26:38,430
components interact, and alert you to potential issues

390
00:26:38,580 --> 00:26:42,414
before they escalate. As we use tools like

391
00:26:42,452 --> 00:26:46,386
datadog, splunk, or promotes to monitor our code and get

392
00:26:46,408 --> 00:26:50,114
visibility of it, we need tool that will allow us to

393
00:26:50,152 --> 00:26:53,346
keep an eye on every configuration we have,

394
00:26:53,528 --> 00:26:57,060
ensuring that we're always a step ahead of any problem.

395
00:26:57,830 --> 00:27:01,400
Using config, we're getting exactly that

396
00:27:01,850 --> 00:27:05,702
as it connects all the different store under

397
00:27:05,756 --> 00:27:09,066
a single unified interface and give us a

398
00:27:09,088 --> 00:27:12,842
way to track and monitoring all configuration changes in one

399
00:27:12,896 --> 00:27:16,250
place, with no jumping between several tools.

400
00:27:16,590 --> 00:27:19,986
By doing so, you not only ensure

401
00:27:20,118 --> 00:27:22,942
the smooth operation of your system,

402
00:27:23,076 --> 00:27:27,386
but also safeguard your organization against unforeseen challenges.

403
00:27:27,578 --> 00:27:30,270
Last, let's back into the automation part.

404
00:27:30,420 --> 00:27:34,222
Imagine a symphony orchestra where each instrument

405
00:27:34,286 --> 00:27:38,114
plays a vital role. Now imagine a conductor who could

406
00:27:38,152 --> 00:27:41,922
orchestrate this symphony with precision and

407
00:27:41,976 --> 00:27:45,702
harmony. In our world, automation is that

408
00:27:45,756 --> 00:27:48,930
conductor bringing together various elements

409
00:27:49,010 --> 00:27:52,626
of configurations management into streamlined performance.

410
00:27:52,818 --> 00:27:56,534
Tools like Ansible, terraform and puppet are the masters of

411
00:27:56,572 --> 00:28:00,262
efficiency in the infrastructure world. They take

412
00:28:00,316 --> 00:28:03,318
on repetitive, time consuming tasks,

413
00:28:03,414 --> 00:28:08,090
allowing DevOps teams to focus on more strategic, high value activities.

414
00:28:08,510 --> 00:28:12,430
It's like having a team of skilled assistants

415
00:28:12,850 --> 00:28:16,970
who tirelessly work 24/7 ensuring

416
00:28:17,050 --> 00:28:20,542
everything is in the perfect order. These same

417
00:28:20,596 --> 00:28:24,750
need exists in application configuration world, and using Configu,

418
00:28:24,830 --> 00:28:28,674
you can automate the entire configurations process from the developer to

419
00:28:28,712 --> 00:28:32,398
production. It deploys configurations, manage updates,

420
00:28:32,494 --> 00:28:36,678
and ensure consistency across environments, all without

421
00:28:36,844 --> 00:28:40,514
human intervention. Automation in configurations

422
00:28:40,562 --> 00:28:43,766
management is about harnessing the power of

423
00:28:43,788 --> 00:28:47,054
technology to perform tasks more efficiency accurately

424
00:28:47,202 --> 00:28:50,394
and security and securely sorry than

425
00:28:50,512 --> 00:28:53,866
we ever could manually. As we step into an

426
00:28:53,888 --> 00:28:57,462
era where speed and agility are paramount,

427
00:28:57,606 --> 00:29:01,338
automation stands out as a key enabler,

428
00:29:01,514 --> 00:29:05,450
allowing us to scale our operation, reduce the errors,

429
00:29:05,530 --> 00:29:10,010
and focus our human talent on automation

430
00:29:10,170 --> 00:29:14,274
and strategic thinking. Remember, securing our

431
00:29:14,312 --> 00:29:17,954
configurations is a continuous journey of

432
00:29:17,992 --> 00:29:21,442
improvement. It's not a destination you reach,

433
00:29:21,576 --> 00:29:25,602
but a path to walk every day. The digital

434
00:29:25,666 --> 00:29:28,902
landscape is ever chain like

435
00:29:29,036 --> 00:29:32,310
the shifting sands of a desert.

436
00:29:32,650 --> 00:29:35,570
New challenges and threats emerge,

437
00:29:35,650 --> 00:29:39,686
constantly requiring us to adapt,

438
00:29:39,798 --> 00:29:43,626
learn, and grow. It's an ongoing process

439
00:29:43,808 --> 00:29:46,998
of tuning, tweaking, and transforming

440
00:29:47,094 --> 00:29:51,370
our practices to stay ahead of potential risks.

441
00:29:51,870 --> 00:29:55,530
Let's take the insight from today and turn them into

442
00:29:55,600 --> 00:29:59,706
an actions. Let's secure not just our code

443
00:29:59,808 --> 00:30:03,490
or infrastructure, but also our application configurations.

444
00:30:04,310 --> 00:30:08,098
If you want to learn more about configu and see how our team

445
00:30:08,184 --> 00:30:11,854
implemented it, you're more than welcome to visit our open source

446
00:30:11,902 --> 00:30:14,994
project on GitHub or try our

447
00:30:15,032 --> 00:30:18,674
SaaS platform. Thank you for watching my talk and

448
00:30:18,712 --> 00:30:22,820
feel free to reach out and ask any question or thought.

449
00:30:23,350 --> 00:30:23,774
Bye.

