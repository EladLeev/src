1
00:00:27,090 --> 00:00:30,406
Hey everyone, my name is Gal. And today I want

2
00:00:30,428 --> 00:00:33,846
to convince you all that platform engineering is all about product.

3
00:00:33,948 --> 00:00:37,794
And that product is an important part of building a successful

4
00:00:37,842 --> 00:00:42,038
internal developer's platform. Now before I do that,

5
00:00:42,124 --> 00:00:45,282
I want to take you all down a stroll down memory lane.

6
00:00:45,426 --> 00:00:49,126
We all know the stories about throwing over the fence, but I just want

7
00:00:49,148 --> 00:00:52,414
us to remember what organizations used to look like back in the

8
00:00:52,452 --> 00:00:55,866
90s or in the early two thousand s. And these organizations

9
00:00:55,978 --> 00:00:59,498
were made of two groups. Well, a lot of other group built two groups

10
00:00:59,514 --> 00:01:03,146
that I want to focus on today, which are the dev group and the Ops

11
00:01:03,178 --> 00:01:06,838
group. The dev group was basically in charge of building features

12
00:01:06,874 --> 00:01:10,546
and they wanted to build as many features as they could as fast as they

13
00:01:10,568 --> 00:01:13,970
could. And the Ops group was in charge of making the system

14
00:01:14,040 --> 00:01:17,222
run. In production. They were tasked with the

15
00:01:17,276 --> 00:01:21,174
system being up, being stable, being reliable. And these

16
00:01:21,212 --> 00:01:24,806
two groups were siloed. And the silos basically

17
00:01:24,908 --> 00:01:28,226
caused a lot of miscommunication between them which slowed

18
00:01:28,258 --> 00:01:32,214
down the business and hurt it. So somewhere

19
00:01:32,262 --> 00:01:35,482
around 2008 we all came down and said,

20
00:01:35,536 --> 00:01:38,906
okay, let's think of a new cultural shift and we'll call

21
00:01:38,928 --> 00:01:42,806
it DevOps. Now these cultural shifts sound brilliant. We're going

22
00:01:42,848 --> 00:01:46,638
to break down the silos between the two organizations. We're either going to

23
00:01:46,644 --> 00:01:50,014
have one organization or two organizations that are functioning very well

24
00:01:50,052 --> 00:01:54,022
in harmony together. The developers are going two own production

25
00:01:54,106 --> 00:01:57,854
and you are going to be able to deliver software manifester,

26
00:01:57,902 --> 00:02:01,650
more reliable and a better way. But the problem

27
00:02:01,720 --> 00:02:05,166
is that it's not as easy has it seemed. It turns

28
00:02:05,198 --> 00:02:09,618
out that only around 3% of the organizations were able to achieve

29
00:02:09,714 --> 00:02:13,782
the DevOps ideal, where every developer if he builds something,

30
00:02:13,836 --> 00:02:17,882
he can run it, he can operate it. Basically the

31
00:02:17,936 --> 00:02:21,370
other organizations fell down into two or

32
00:02:21,440 --> 00:02:24,230
maybe a few more, but two main patterns.

33
00:02:24,390 --> 00:02:28,522
One is where they just added another DevOps team which

34
00:02:28,576 --> 00:02:32,014
tried to make connections between the

35
00:02:32,052 --> 00:02:35,710
dev and the Ops team and basically just created a third silo.

36
00:02:36,050 --> 00:02:39,566
Another type of organizations let go of

37
00:02:39,588 --> 00:02:43,022
Ops entirely. Said our developers are

38
00:02:43,076 --> 00:02:45,902
able to run Ops themselves, where in fact they couldn't,

39
00:02:45,966 --> 00:02:49,810
that they just disregarded the art and the

40
00:02:49,960 --> 00:02:53,346
effort that is needed to run production. And the

41
00:02:53,368 --> 00:02:56,594
result was that there were kind of a shadow Ops operation going

42
00:02:56,632 --> 00:03:00,278
on. The senior developers are doing the Ops. No one is exactly

43
00:03:00,444 --> 00:03:03,846
sure what is going on and only a few knows how

44
00:03:03,868 --> 00:03:07,750
to operate production, which actually caused even more skills.

45
00:03:08,090 --> 00:03:11,194
Basically what we ended up with in either case

46
00:03:11,312 --> 00:03:15,030
is again two groups of people. One are the devs

47
00:03:15,110 --> 00:03:18,490
and one are the Ops. But instead of the Ops we just call them

48
00:03:18,560 --> 00:03:22,542
DevOps now. And the skills continued because

49
00:03:22,676 --> 00:03:26,190
not everyone can adopt this complex cultural shift.

50
00:03:26,610 --> 00:03:29,834
Then ten years later, somewhere around 2018,

51
00:03:29,882 --> 00:03:32,590
it was probably before that we all said, okay,

52
00:03:32,660 --> 00:03:36,626
Google developed something pretty cool back in the early two

53
00:03:36,648 --> 00:03:40,290
thousand s and they called it an SRE. So maybe instead

54
00:03:40,360 --> 00:03:44,274
of DevOps, we can do SRE. Let's take our DevOps group

55
00:03:44,392 --> 00:03:48,134
and embrace the practices that Google created and

56
00:03:48,172 --> 00:03:51,846
now let's do SRE within our company and that will break down the silos and

57
00:03:51,868 --> 00:03:55,734
make us work more effectively. And you

58
00:03:55,772 --> 00:03:59,734
guessed it, basically being Google isn't that easy.

59
00:03:59,932 --> 00:04:03,802
For most companies that try to adopt the SRE mentality, they don't follow

60
00:04:03,856 --> 00:04:07,354
all the rules and all the methodologies that come with it, and they end

61
00:04:07,392 --> 00:04:11,146
up with two groups, one dev and one users to be

62
00:04:11,168 --> 00:04:14,986
called Ops. Then it was called DevOps and now it's called SRE that are siloed

63
00:04:15,018 --> 00:04:18,282
from each other. The devs are focused on building features, the SRE

64
00:04:18,346 --> 00:04:22,302
are focused on holding production, and we're not

65
00:04:22,356 --> 00:04:26,126
getting to deliver value faster, we're not getting two building features

66
00:04:26,158 --> 00:04:29,346
faster, we're not getting to help our business in the

67
00:04:29,368 --> 00:04:32,642
way that we want them. Fast forward five years

68
00:04:32,696 --> 00:04:36,310
later, now we're all saying, let's do platform engineers.

69
00:04:36,810 --> 00:04:40,518
Now before we dive into that, let's talk a bit about what platform

70
00:04:40,604 --> 00:04:44,038
engineering is right, what platform engineering is offering us.

71
00:04:44,204 --> 00:04:47,882
Platform engineering is basically saying, okay, let's build

72
00:04:47,936 --> 00:04:51,590
an internal developer platform that will help our developers

73
00:04:51,670 --> 00:04:55,734
move faster. It will simplify the workflows

74
00:04:55,782 --> 00:04:59,738
and give them paved draws, some golden paths so

75
00:04:59,824 --> 00:05:03,678
they can focus on bringing value into our business.

76
00:05:03,844 --> 00:05:07,790
We will have a group that are the platform

77
00:05:07,860 --> 00:05:11,774
engineers who will build this platform, and the rest of the engineers will use

78
00:05:11,812 --> 00:05:15,380
this platform in order to create value for our business.

79
00:05:15,750 --> 00:05:19,170
And now my question that is going to

80
00:05:19,320 --> 00:05:22,786
follow this entire presentation is, how do we

81
00:05:22,808 --> 00:05:26,002
avoid this? How in two years

82
00:05:26,056 --> 00:05:30,150
from now, we don't end up with a bunch of organizations who look exactly

83
00:05:30,300 --> 00:05:33,494
like this. And this is what I'm going to try to

84
00:05:33,532 --> 00:05:35,350
answer in this session.

85
00:05:36,490 --> 00:05:40,078
Let me just give a brief introduction of myself. Hi everyone, I'm Gal

86
00:05:40,114 --> 00:05:43,734
Bashan. I'm the head of engineering at Epsagon, which was recently acquired

87
00:05:43,782 --> 00:05:47,350
by Cisco. Before that, I did a lot of cool cybersecurity

88
00:05:47,430 --> 00:05:50,954
stuff at the IDF. I love building and that's my Twitter

89
00:05:51,002 --> 00:05:53,920
handle if anyone wants to give me a shout out.

90
00:05:55,490 --> 00:05:59,182
So has I said before, our goal here is

91
00:05:59,236 --> 00:06:02,518
enablement. We want our platform, our internal

92
00:06:02,554 --> 00:06:06,002
developer platform, to enable our developers. And what does that

93
00:06:06,056 --> 00:06:09,646
mean? Basically, every developer

94
00:06:09,678 --> 00:06:12,946
is different. We have the senior developers who can tweak the

95
00:06:12,968 --> 00:06:16,370
helm charts and can do all the configuration that is needed,

96
00:06:16,440 --> 00:06:20,226
and that is good. But we also have the junior developers who don't

97
00:06:20,258 --> 00:06:22,930
care if the application is running on SBS or eks,

98
00:06:23,090 --> 00:06:26,214
and the platform that we build needs

99
00:06:26,252 --> 00:06:29,594
to enable both of them. So the goal here is to

100
00:06:29,632 --> 00:06:33,622
create some common use cases or some golden pitfalls or some useful

101
00:06:33,686 --> 00:06:36,826
tools that will help the majority of

102
00:06:36,848 --> 00:06:40,322
our developers develop faster, operate faster,

103
00:06:40,486 --> 00:06:42,720
and bring value in a better way.

104
00:06:43,410 --> 00:06:47,102
So usually we measure our IDP by

105
00:06:47,156 --> 00:06:50,910
three main aspects. Does it help our developers build

106
00:06:50,980 --> 00:06:54,478
in a more secure fashion? Does it help our developers

107
00:06:54,574 --> 00:06:57,182
build in a more cost effective fashion?

108
00:06:57,326 --> 00:07:01,620
And does our developers have a better developer experience?

109
00:07:02,310 --> 00:07:05,358
Now the first two are pretty self explanatory.

110
00:07:05,534 --> 00:07:09,926
If by using the platform I'm getting automatic security

111
00:07:10,028 --> 00:07:13,202
features and the code that I write is easily more secure

112
00:07:13,266 --> 00:07:16,614
and I don't need a lot of boilerplate to bake security in,

113
00:07:16,732 --> 00:07:21,098
then the platform is probably helping me get security makes in.

114
00:07:21,264 --> 00:07:25,210
If the platform is optimized the instance size two,

115
00:07:25,360 --> 00:07:28,602
the requirements of my application, it's probably saving

116
00:07:28,656 --> 00:07:31,626
me some money and it's helping me with costs.

117
00:07:31,818 --> 00:07:36,030
Developer experience is something that's a bit harder to measure.

118
00:07:36,770 --> 00:07:40,334
A lot of people try to measure developer experience by cycle time.

119
00:07:40,372 --> 00:07:43,618
How long does it take from when I start working on

120
00:07:43,624 --> 00:07:46,530
an issue until it is in the air and in production?

121
00:07:46,870 --> 00:07:50,638
Another way is to measure

122
00:07:50,734 --> 00:07:54,066
MTTR. Meantime, to resolve how long does

123
00:07:54,088 --> 00:07:57,938
it take me from the second that I found a problem within my system

124
00:07:58,024 --> 00:08:01,666
until it is resolved? We can also have a look at other metrics

125
00:08:01,698 --> 00:08:04,918
like how often does the pr get merging? Or how often a

126
00:08:05,004 --> 00:08:08,646
release is triggered. But really, if you want to know if you

127
00:08:08,668 --> 00:08:12,758
have a good developer experience in your company, you should look at your attrition.

128
00:08:12,934 --> 00:08:16,266
How many of the developers want to stay within your company?

129
00:08:16,368 --> 00:08:19,818
For how long a developer plays within your company? Of course, there are a

130
00:08:19,824 --> 00:08:23,166
lot of other factors that affect attrition, but if you have a

131
00:08:23,188 --> 00:08:26,654
good developer experience for your developers, you won't have

132
00:08:26,692 --> 00:08:30,542
high attrition rates. So now that we know

133
00:08:30,596 --> 00:08:34,306
what we're aiming for, why we want to build this IDP, I want

134
00:08:34,328 --> 00:08:37,634
to talk about a few of the important

135
00:08:37,752 --> 00:08:40,370
aspects of how to build this IDP,

136
00:08:41,830 --> 00:08:44,580
and I want to start out with a story.

137
00:08:44,950 --> 00:08:48,166
This is a story that we've had in Epsigon. Basically,

138
00:08:48,348 --> 00:08:52,150
it was way before we had platform engineering installed.

139
00:08:52,730 --> 00:08:56,326
We had a senior developer with some spare time and

140
00:08:56,348 --> 00:08:59,926
he wanted to build a tool that will help developers in our

141
00:08:59,948 --> 00:09:03,610
company. Now, Epsagon was a company that was building

142
00:09:03,680 --> 00:09:07,366
a lot with serverless technologies. So our entire backend

143
00:09:07,398 --> 00:09:10,838
was based on Lambda, and we had a lot of kinesis streams. And if you're

144
00:09:10,854 --> 00:09:14,574
not familiar with kinesis, then, and I know the data engineers here

145
00:09:14,612 --> 00:09:18,682
will be angry with me, but Kinesis is basically managed Kafka.

146
00:09:18,826 --> 00:09:23,246
It's a streaming service by Amazon that helps you connect

147
00:09:23,348 --> 00:09:27,362
different asynchronous services using streams which is similar

148
00:09:27,416 --> 00:09:30,914
two the Kafka streams that you're probably familiar with.

149
00:09:31,112 --> 00:09:33,822
And we were working a lot with Kafka because we were streaming.

150
00:09:33,886 --> 00:09:37,078
Our solution was can observability solution, and we were streaming a

151
00:09:37,084 --> 00:09:40,226
lot of traces that our customers were sending.

152
00:09:40,418 --> 00:09:43,894
And what these developers thought is

153
00:09:43,932 --> 00:09:47,334
that our team could benefit from

154
00:09:47,372 --> 00:09:50,954
the ability to stream those traces not

155
00:09:50,992 --> 00:09:54,426
in the clouds, not into lambda, but directly to our

156
00:09:54,448 --> 00:09:57,862
local machines in smaller quantities using sampling,

157
00:09:57,926 --> 00:10:01,742
but just so we can debug what's going on in the cloud. So he

158
00:10:01,796 --> 00:10:05,486
actually went out and wrote this tool and solved it.

159
00:10:05,668 --> 00:10:09,006
But after a month or two, we noticed that no one

160
00:10:09,028 --> 00:10:12,286
really used it. And the problem is

161
00:10:12,308 --> 00:10:15,874
that it wasn't adopted because this wasn't a real problem.

162
00:10:15,992 --> 00:10:19,506
It turns out that our developers were perfectly fine

163
00:10:19,608 --> 00:10:22,782
with just debugging on lambda or creating

164
00:10:22,846 --> 00:10:26,146
this code, like to get traces into your

165
00:10:26,168 --> 00:10:29,654
local computer. From the kinesis was relatively simple. It was like ten

166
00:10:29,692 --> 00:10:32,806
lines of code. So just because a

167
00:10:32,828 --> 00:10:35,906
solution is there and it is cool, it doesn't

168
00:10:35,938 --> 00:10:39,100
mean that this is a pain point that our developers really had.

169
00:10:39,470 --> 00:10:42,806
So this leads us to our first takeaway.

170
00:10:42,918 --> 00:10:46,710
The platform has to solve a problem that your developers

171
00:10:46,790 --> 00:10:50,126
has. Just because we can solve something doesn't mean that

172
00:10:50,148 --> 00:10:53,902
we should solve something. So what

173
00:10:53,956 --> 00:10:57,950
problems can our developers have? They can have actually a

174
00:10:58,020 --> 00:11:01,614
lot of problems in a lot of different areas. They can

175
00:11:01,652 --> 00:11:05,540
be wasting a lot of time on infra, they can be working.

176
00:11:07,030 --> 00:11:10,622
A lot of the time can go into just building helm charts,

177
00:11:10,686 --> 00:11:14,754
or configuring every single one of their pods or

178
00:11:14,792 --> 00:11:18,622
their instances. And if we can provide them with some templates,

179
00:11:18,686 --> 00:11:21,842
we can save time. There can be a lot of boilerplate

180
00:11:21,906 --> 00:11:25,266
code. Maybe in order to set up a service, they have to do a copy

181
00:11:25,298 --> 00:11:28,910
paste from a bunch of different services. And if we create a tool that helps

182
00:11:28,930 --> 00:11:32,138
them create a service that will save them a lot of time, they can

183
00:11:32,144 --> 00:11:38,262
be struggling with security. Maybe we should makes in some automatic KMS

184
00:11:38,406 --> 00:11:41,866
solutions, like key management solutions, just so they

185
00:11:41,888 --> 00:11:44,654
can use it more effectively and not have to look it up every time they

186
00:11:44,692 --> 00:11:47,818
need it. Maybe they're missing observability alerts

187
00:11:47,834 --> 00:11:52,458
for their service. They want automatically two be automatically alerted

188
00:11:52,634 --> 00:11:55,966
on red metrics instead of having to set up for each

189
00:11:55,988 --> 00:11:59,182
of their individual services. Maybe it's code ownership.

190
00:11:59,246 --> 00:12:02,846
They don't know who is in charge of this library. It can be cognitive load.

191
00:12:02,878 --> 00:12:06,098
They can be in charge of two many things. It can be quality. Maybe it's

192
00:12:06,114 --> 00:12:09,522
hard to write tests. There are a lot of different aspects.

193
00:12:09,666 --> 00:12:12,200
So how should we know where to focus?

194
00:12:12,810 --> 00:12:16,674
And the second takeaway is that our developers

195
00:12:16,802 --> 00:12:21,174
knows what problems they have. While the problem range

196
00:12:21,222 --> 00:12:25,322
is very big, our developers know what troubles them in

197
00:12:25,376 --> 00:12:28,890
their day two day. And if we just go and ask them, we'll know

198
00:12:28,960 --> 00:12:32,000
where to start and where we should start looking.

199
00:12:33,170 --> 00:12:36,942
So we should interview our developers. We should use

200
00:12:36,996 --> 00:12:40,814
those interviews to collect data. We should sit in retros and see what

201
00:12:40,852 --> 00:12:44,554
comes up. We should look at the recent

202
00:12:44,602 --> 00:12:47,838
bugs that we have and understand what were the latest root causes.

203
00:12:47,934 --> 00:12:51,394
And we should use all this data in order to

204
00:12:51,432 --> 00:12:55,246
choose what problems do we want to solve first? And again,

205
00:12:55,368 --> 00:12:59,350
don't start with the solutions. Start with the problems that you want to solve

206
00:13:01,210 --> 00:13:04,598
next. Even if we found the right problems

207
00:13:04,684 --> 00:13:05,670
to solve,

208
00:13:07,790 --> 00:13:11,290
it is easy sometimes to just

209
00:13:11,360 --> 00:13:15,606
focus on building a cool technology and somehow

210
00:13:15,638 --> 00:13:18,986
solve this problem instead of just solving this problem in an

211
00:13:19,008 --> 00:13:22,122
effective way. The problem is,

212
00:13:22,176 --> 00:13:25,374
if we're not focused on the need of the user, we end up

213
00:13:25,412 --> 00:13:29,470
doing probably one of three things. We just build every

214
00:13:29,540 --> 00:13:32,894
specific thing that our developers want from us. And this

215
00:13:32,932 --> 00:13:36,418
is not a very efficient way to build a platform, right? Because if we

216
00:13:36,424 --> 00:13:40,354
satisfy the needs of one user, we're probably not satisfying the needs

217
00:13:40,392 --> 00:13:43,666
of another 99 users. The second thing is that

218
00:13:43,688 --> 00:13:46,706
we just find a cool technology that we want to mess with, and then we

219
00:13:46,728 --> 00:13:50,326
spend six months trying to make this technology solve our

220
00:13:50,348 --> 00:13:54,214
pain. This is something that we often do as developers, just try

221
00:13:54,252 --> 00:13:58,054
to insert a cool technology that we want two use into our

222
00:13:58,092 --> 00:14:02,266
problem space. And the third thing that we may end

223
00:14:02,288 --> 00:14:05,482
up doing is come up with a solution that is good for

224
00:14:05,536 --> 00:14:09,686
us. Because I'm a developer and I can imagine

225
00:14:09,718 --> 00:14:13,470
myself having the problem that the developer that I interview is having.

226
00:14:13,620 --> 00:14:17,182
I can just imagine, okay, this is the solution that would work

227
00:14:17,236 --> 00:14:20,654
for me and build it, but it actually may

228
00:14:20,692 --> 00:14:24,394
not be the solution that works for the developer or that can be convenient

229
00:14:24,442 --> 00:14:28,462
for him. Before I go ahead and build a solution, I have to validate

230
00:14:28,526 --> 00:14:32,162
that the solution is also good for the user. In my case,

231
00:14:32,216 --> 00:14:35,278
the other developer in my company that I'm building it for.

232
00:14:35,464 --> 00:14:39,062
So the takeaway here is that when you're building

233
00:14:39,116 --> 00:14:43,640
the solution, you should focus on value. Don't go to impressive technology.

234
00:14:44,330 --> 00:14:47,478
Don't go. Two, what would be easy for you?

235
00:14:47,564 --> 00:14:51,222
Ask the user or the developer in your company what would be valuable

236
00:14:51,286 --> 00:14:53,900
for them and then build that.

237
00:14:56,350 --> 00:15:00,378
The next thing I want to tell you is a story that I've had

238
00:15:00,544 --> 00:15:03,946
back in my army days, and because some of it is restricted,

239
00:15:03,978 --> 00:15:07,086
I'm going to change the product domain a bit, but you'll get

240
00:15:07,108 --> 00:15:10,910
the big picture. So in my

241
00:15:11,060 --> 00:15:14,234
army unit, we were focused on the bagels,

242
00:15:14,282 --> 00:15:18,382
let's say product domain. We were working with many vendors that provided

243
00:15:18,446 --> 00:15:21,694
different bagels. Some of them were coated, some of them had salmon,

244
00:15:21,742 --> 00:15:24,910
some of them were round, some of them were half, some of them were full.

245
00:15:25,080 --> 00:15:29,458
And we wanted to take data from all of those different vendors.

246
00:15:29,634 --> 00:15:33,366
And we built system using this data, manipulating this

247
00:15:33,388 --> 00:15:37,720
data, storing this data that were

248
00:15:38,330 --> 00:15:42,150
our own. So we work with a lot of proprietary bagel formats,

249
00:15:42,310 --> 00:15:45,750
but we had to store it in a central location

250
00:15:45,830 --> 00:15:50,018
or for several products that shared those different vendors.

251
00:15:50,214 --> 00:15:54,394
So we came up with the solution of let's

252
00:15:54,442 --> 00:15:58,302
write a very generic bagel library that

253
00:15:58,356 --> 00:16:02,142
every project can later on use. So we went

254
00:16:02,196 --> 00:16:06,146
down and understood the specs of the bagel and what is like the

255
00:16:06,168 --> 00:16:10,034
dictionary definition of a bagel and how we should

256
00:16:10,072 --> 00:16:13,790
treat a bagel and how we should abstract the cucumbers

257
00:16:13,870 --> 00:16:17,398
in the bagel. We spent around

258
00:16:17,564 --> 00:16:20,630
six months creating this library,

259
00:16:21,050 --> 00:16:24,950
and the developer of course, was from one project and it has a perfect

260
00:16:25,020 --> 00:16:26,520
fit for this project.

261
00:16:28,650 --> 00:16:32,170
After those six months, we released this library and we asked

262
00:16:32,240 --> 00:16:36,278
the other projects, hey, do you want to use this library?

263
00:16:36,374 --> 00:16:39,818
And they gave it a go. And after two weeks they understand

264
00:16:39,984 --> 00:16:43,162
that it is just not usable for them. It is too complex,

265
00:16:43,226 --> 00:16:46,270
there are too many options, it is too generic and

266
00:16:46,340 --> 00:16:50,254
they are just not able to use it. And this library was

267
00:16:50,292 --> 00:16:53,890
basically neglected. So the takeaway here

268
00:16:53,960 --> 00:16:57,410
is that agile is still valid.

269
00:16:57,750 --> 00:17:01,620
Even when we're building a platform and not a user facing product.

270
00:17:02,070 --> 00:17:05,522
We should always iterate quickly, we should

271
00:17:05,576 --> 00:17:08,966
always give the user a taste of what

272
00:17:08,988 --> 00:17:13,126
is getting. We should always build an MVP and let

273
00:17:13,148 --> 00:17:17,170
the user try it before building the next has. So prioritization

274
00:17:17,250 --> 00:17:20,738
is important. We need to understand where we're starting, what is

275
00:17:20,764 --> 00:17:24,378
the most important pain point that we want to solve from the pain points that

276
00:17:24,384 --> 00:17:28,086
we identified and what is the easiest solution from the solutions

277
00:17:28,118 --> 00:17:31,926
that we identified and then execute

278
00:17:31,958 --> 00:17:35,546
the MVP of it. Give it to the customer, which is an internal developer

279
00:17:35,578 --> 00:17:38,954
in this case, but it's still a customer then get his feedback

280
00:17:39,002 --> 00:17:43,038
and understand only if you're on the right track to proceed to the next step.

281
00:17:43,204 --> 00:17:46,686
So just because it is an internal platform and not an

282
00:17:46,708 --> 00:17:50,514
external product is not an excuse to go in the lab, sit for

283
00:17:50,552 --> 00:17:54,174
six months, build out this gigantic

284
00:17:54,302 --> 00:17:57,894
group Goldberg machine and then just launch it

285
00:17:57,932 --> 00:18:01,590
into the internal developers of our company and have it fail.

286
00:18:03,770 --> 00:18:07,894
So let's recap what we've talked about so far. So we've talked about

287
00:18:07,932 --> 00:18:12,054
the fact that in order to build a good IDP, we need to first validate

288
00:18:12,102 --> 00:18:15,322
the problems that our developers have. We need to understand what problems

289
00:18:15,376 --> 00:18:19,354
they have and how we can solve them. Then we need to validate those

290
00:18:19,392 --> 00:18:22,926
solutions that we have in mind. We need to understand that the vision that

291
00:18:22,948 --> 00:18:26,510
we have for a solution is valuable for our internal developers.

292
00:18:27,010 --> 00:18:30,746
After that, we need to iteratively bring those solutions

293
00:18:30,778 --> 00:18:34,490
to those developers as fast as we can and validate

294
00:18:34,570 --> 00:18:37,890
that we're on the right track. We still have to use agile in order

295
00:18:37,960 --> 00:18:41,426
to make sure that we're not building something that is

296
00:18:41,448 --> 00:18:44,898
not usable. Another thing we didn't touch about is we have

297
00:18:44,904 --> 00:18:48,150
to go to market. We have to convince developers to use this.

298
00:18:48,220 --> 00:18:51,766
We have to make sure that they understand that it will give them value

299
00:18:51,868 --> 00:18:54,870
and help them be a better developer.

300
00:18:55,290 --> 00:18:59,014
Now this job description sounds kind of familiar.

301
00:18:59,142 --> 00:19:02,986
And it is familiar because it exists. This is the job description of

302
00:19:03,008 --> 00:19:06,854
a product manager. We have to look at our developer

303
00:19:06,902 --> 00:19:08,620
platform as a product.

304
00:19:10,610 --> 00:19:14,542
And because it is a product, we should have a product manager that

305
00:19:14,596 --> 00:19:18,094
leads it and makes sure that it is valuable and

306
00:19:18,212 --> 00:19:22,094
for our internal users. Now when

307
00:19:22,132 --> 00:19:25,170
you're going to pitch this idea to your head of product,

308
00:19:25,320 --> 00:19:29,140
you are probably going to hear one of those four things.

309
00:19:29,750 --> 00:19:33,758
First of all, I can bring on another product manager

310
00:19:33,854 --> 00:19:37,394
because it's expensive. It's another headcount. I don't have the budget

311
00:19:37,442 --> 00:19:41,094
for another headcount. Then you should go

312
00:19:41,132 --> 00:19:44,950
to your manager and ask him what is more expensive,

313
00:19:45,370 --> 00:19:48,766
hiring one product manager or spending

314
00:19:48,818 --> 00:19:52,666
an entire platform engineering team building something that no

315
00:19:52,688 --> 00:19:56,282
one will want to use because we didn't validate that.

316
00:19:56,336 --> 00:20:00,060
What they're building is actually useful internally in the company.

317
00:20:01,070 --> 00:20:04,778
Another thing that you may hear is that it's

318
00:20:04,794 --> 00:20:08,622
an internal tool so engineering managers can manage it. There's no need

319
00:20:08,756 --> 00:20:12,030
for product managers. Product managers are only dealing with

320
00:20:12,100 --> 00:20:17,186
outside facing customers. Now in

321
00:20:17,208 --> 00:20:20,798
my book, that's just disrespectful to PM skills.

322
00:20:20,974 --> 00:20:24,654
PPM should be able to talk to users, but user

323
00:20:24,702 --> 00:20:28,182
doesn't mean outside of the company, it just means someone that uses a product

324
00:20:28,316 --> 00:20:31,654
and understand the needs. And this is a very

325
00:20:31,692 --> 00:20:35,506
hard skill just to interview someone and do it effectively

326
00:20:35,538 --> 00:20:38,454
in a way that you understand what you can do in order to solve this

327
00:20:38,492 --> 00:20:41,882
problem. And if you're just saying that any engineering manager can do it without

328
00:20:41,936 --> 00:20:45,366
training, I think that's kind of disrespectful for product managers.

329
00:20:45,478 --> 00:20:49,242
Also, engineering managers has a lot to makes care of. They have to

330
00:20:49,296 --> 00:20:54,778
take care of the development of their people, both personal and professional.

331
00:20:54,874 --> 00:20:58,558
They have to think about project manager like the execution part of

332
00:20:58,564 --> 00:21:02,590
the job, just throwing the additional product management

333
00:21:03,670 --> 00:21:06,930
responsibility on them. This is kind of irresponsible.

334
00:21:07,750 --> 00:21:11,134
Another thing I hear pretty often is that developers

335
00:21:11,182 --> 00:21:13,646
know what they want. Look, you're a developer,

336
00:21:13,838 --> 00:21:17,318
you use platforms. So why can't you

337
00:21:17,324 --> 00:21:21,222
just build the platforms that developers want today?

338
00:21:21,276 --> 00:21:25,426
The answer is why do elasticsearch have product managers

339
00:21:25,538 --> 00:21:28,646
like elasticsearch? We all know it. It's a product that

340
00:21:28,668 --> 00:21:32,986
is used by developers. So if developers know what developers want,

341
00:21:33,088 --> 00:21:36,826
why does elasticsearch need product managers? Again, it touches back

342
00:21:36,848 --> 00:21:40,074
to the fact that just because I'm a developer and I know what I

343
00:21:40,112 --> 00:21:43,374
want, it doesn't mean that I know what every developers want.

344
00:21:43,492 --> 00:21:46,986
And a good PM can talk to a lot of developers,

345
00:21:47,178 --> 00:21:50,542
synthesize the real need and understand what we should

346
00:21:50,596 --> 00:21:54,438
build. And the last, most annoying

347
00:21:54,474 --> 00:21:57,794
excuse is that the platform usage is

348
00:21:57,832 --> 00:22:01,186
mandatory, so we don't need a PM for it because everyone is

349
00:22:01,208 --> 00:22:04,606
going to use it anyway. If that is your company's

350
00:22:04,638 --> 00:22:07,954
approach, then you are going to have a bad time because no one

351
00:22:07,992 --> 00:22:11,350
wants to use an internal tool that is very, very hard to use.

352
00:22:11,500 --> 00:22:14,486
The platform team will have a bad time because no one will want to use

353
00:22:14,508 --> 00:22:18,234
the product. The developer team will have a bad time because the platform will

354
00:22:18,272 --> 00:22:21,690
actually slow them down because it's not very useful or handy.

355
00:22:22,670 --> 00:22:26,282
So mandating usage of the platform is usually

356
00:22:26,336 --> 00:22:29,734
a very bad idea. You should have the PM

357
00:22:29,782 --> 00:22:33,638
and the platform team make the platform so useful that

358
00:22:33,664 --> 00:22:36,000
developers actually want to use it.

359
00:22:39,410 --> 00:22:43,374
The takeaway is here is that your internal developer platform

360
00:22:43,492 --> 00:22:47,266
is a product. It should have a PM and

361
00:22:47,288 --> 00:22:50,882
the PM should make sure that the platform team is building

362
00:22:50,936 --> 00:22:54,402
something that the rest of the developers in the company wants to use.

363
00:22:54,536 --> 00:22:58,246
Otherwise you're just going to end up with two

364
00:22:58,268 --> 00:23:01,366
organizations. One of them is Dev, one of them is

365
00:23:01,388 --> 00:23:06,758
the platform engineering. They're going to be siloed and the

366
00:23:06,764 --> 00:23:10,198
platform engineering organization is not going to be a valuable addition

367
00:23:10,294 --> 00:23:13,818
to your company. This product manager has to

368
00:23:13,824 --> 00:23:17,018
be measured against the success criteria that we talked about in

369
00:23:17,024 --> 00:23:21,194
the beginning, does the platform help the developers build a more secure

370
00:23:21,242 --> 00:23:25,214
application? Is it more cost effective? Is the developer experience

371
00:23:25,332 --> 00:23:28,730
better? Those are the things that this VM

372
00:23:28,810 --> 00:23:30,240
should be measured against.

373
00:23:34,420 --> 00:23:38,004
To sum it up, we need to build an IDP that

374
00:23:38,042 --> 00:23:41,572
enables developer we have two come with a problem first

375
00:23:41,626 --> 00:23:45,204
mindset. We need to solve a problem, not just

376
00:23:45,242 --> 00:23:48,484
build a cool solution. If we want to know what problem to

377
00:23:48,522 --> 00:23:52,244
solve, we should just ask our developers. They know what problems they're facing

378
00:23:52,292 --> 00:23:55,784
and they know what area we're lagging in the

379
00:23:55,822 --> 00:23:59,192
most. When we're building the solution, we need to make sure

380
00:23:59,246 --> 00:24:02,444
that we're building a solution that is valuable, not just that is

381
00:24:02,482 --> 00:24:05,310
cool or complex or using the most advanced technology.

382
00:24:05,920 --> 00:24:09,116
When we're building this solution, we should iterate fast, we should

383
00:24:09,138 --> 00:24:12,796
use agile methodologies and we should double check all the

384
00:24:12,818 --> 00:24:15,824
time that we are on the right track. And finally,

385
00:24:16,022 --> 00:24:19,276
all of this should be led by a product manager

386
00:24:19,308 --> 00:24:22,816
that knows what he's doing and has a clear vision of where he wants to

387
00:24:22,838 --> 00:24:26,684
take this platform forward. Otherwise we'll just end up with a fancy

388
00:24:26,732 --> 00:24:28,080
group Goldberg machine.

389
00:24:30,100 --> 00:24:33,696
That's it everyone. If you have any questions you can find me on Twitter or

390
00:24:33,718 --> 00:24:37,464
just mail me. I hope that this was in informative and I hope

391
00:24:37,502 --> 00:24:41,912
that you'll all go back to building a useful platform for

392
00:24:41,966 --> 00:24:44,310
your developers in your company. Thank you.

