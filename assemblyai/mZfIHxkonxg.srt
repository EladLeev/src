1
00:00:36,050 --> 00:00:39,414
Hello everybody, thank you very much for your interest. I'm really

2
00:00:39,452 --> 00:00:42,646
happy to be here, even if it's only virtual. My name is

3
00:00:42,668 --> 00:00:46,294
Nikolaus Rath, work for Google in one of the London office.

4
00:00:46,412 --> 00:00:50,334
I'm a tech lead for one of the SRE teams and

5
00:00:50,372 --> 00:00:53,914
we are supporting a number of products related to Google's

6
00:00:53,962 --> 00:00:58,058
advertising business. I will be talking about a transition

7
00:00:58,154 --> 00:01:01,934
that our team has undergone over the last one two

8
00:01:01,972 --> 00:01:05,838
years, which we call the transition from a service ownership

9
00:01:05,934 --> 00:01:09,074
to product ownership. If this doesn't tell you

10
00:01:09,112 --> 00:01:12,546
anything, don't worry, that is kind of the idea. Hopefully at the end of my

11
00:01:12,568 --> 00:01:14,740
presentation you'll know what I mean.

12
00:01:16,250 --> 00:01:19,346
My presentation is going to have three main parts.

13
00:01:19,458 --> 00:01:23,522
I'll start by describing how we have operated

14
00:01:23,586 --> 00:01:27,586
in the past as a team and what challenges resulted

15
00:01:27,618 --> 00:01:30,898
from that. In the second part I'll describe the changes that

16
00:01:30,924 --> 00:01:34,486
we made to address these challenges, and in the third part I'll

17
00:01:34,518 --> 00:01:37,466
describe the status quo. What was the effect of these changes?

18
00:01:37,568 --> 00:01:39,420
Is there anything left to do?

19
00:01:40,350 --> 00:01:43,582
Before I go there though, let me tell you a little bit more

20
00:01:43,716 --> 00:01:47,610
about my team. Google has a lot of sres

21
00:01:47,770 --> 00:01:51,082
and a lot of SRE teams and there's therefore considerable

22
00:01:51,146 --> 00:01:54,978
differences between the teams. That is difference

23
00:01:55,064 --> 00:01:58,674
in workload, difference in scope, difference in the

24
00:01:58,712 --> 00:02:02,482
way we operate. Please be aware, this is just

25
00:02:02,536 --> 00:02:06,114
one teams among many. As a matter of fact, some of the teams even

26
00:02:06,152 --> 00:02:09,062
have their own logos to distinguish themselves from others.

27
00:02:09,196 --> 00:02:12,866
I'd really like to show you ours. I'm not allowed

28
00:02:12,898 --> 00:02:15,618
though, so you have to do with this pixelated version.

29
00:02:15,714 --> 00:02:18,846
But if you do know your way around the Internet,

30
00:02:18,898 --> 00:02:22,534
I think you can probably find it. I believe it is available somewhere.

31
00:02:22,662 --> 00:02:26,170
In any case, my team, we are 40

32
00:02:26,240 --> 00:02:29,946
people in total, distributed across two locations, one in

33
00:02:29,968 --> 00:02:33,420
London and one at the US west coast to cover

34
00:02:33,870 --> 00:02:37,614
pager around the clock. And we have two

35
00:02:37,652 --> 00:02:41,162
on call rotations that does not refer to the two different sites.

36
00:02:41,226 --> 00:02:44,622
But it teams that at any given point in time we have at least two

37
00:02:44,676 --> 00:02:47,906
people on call. The reason for that is simply the number

38
00:02:47,928 --> 00:02:51,940
of services that we have, like one person on call is not enough.

39
00:02:52,390 --> 00:02:55,958
My team is also a very long standing one. It was founded more than a

40
00:02:55,964 --> 00:02:59,426
decade ago and over time our scope

41
00:02:59,618 --> 00:03:03,110
increased a lot. Originally we were responsible just

42
00:03:03,180 --> 00:03:07,560
for Adwords when it was created. Now we are responsible for

43
00:03:08,890 --> 00:03:12,842
not all of them, but the majority of Google's advertiser and publisher front

44
00:03:12,896 --> 00:03:16,966
ends should probably explain what that means. If you're not familiar with the advertising

45
00:03:16,998 --> 00:03:21,082
business, basically a publisher is someone like the New York Times. You have a website,

46
00:03:21,216 --> 00:03:25,134
you have lots of users, and you'd like to make money off your website by

47
00:03:25,172 --> 00:03:28,286
showing ads. That is what a publisher does.

48
00:03:28,468 --> 00:03:33,054
Advertiser is the person like Coca Cola, who wants to show ads on

49
00:03:33,092 --> 00:03:36,674
some others webpage. So the advertiser pays the publisher money for

50
00:03:36,712 --> 00:03:40,114
showing ads there. And both of these kind of

51
00:03:40,152 --> 00:03:43,954
customers have interfaces where

52
00:03:43,992 --> 00:03:47,586
they basically sell the ad inventory, the places where

53
00:03:47,608 --> 00:03:51,286
ads can be put, and where they purchase this inventory to show their

54
00:03:51,308 --> 00:03:54,758
ads there. And these are the products that we support.

55
00:03:54,924 --> 00:03:58,178
This is different from what we call ads rending, which is

56
00:03:58,204 --> 00:04:02,570
about actually showing the ad to the user. It has very different constraints.

57
00:04:03,230 --> 00:04:06,986
Our workload is a little unusual. Even within Google.

58
00:04:07,168 --> 00:04:10,620
We spend about 30% of our time on

59
00:04:11,170 --> 00:04:15,082
interrupt work. That is, handling incidents, handling on callbacks.

60
00:04:15,226 --> 00:04:18,570
Then we spend 20% of our time on service maintenance.

61
00:04:18,650 --> 00:04:22,266
This is basically non urgent, routine operations like scaling

62
00:04:22,298 --> 00:04:26,254
the service up, moving it to a different data center. But the vast majority

63
00:04:26,302 --> 00:04:29,362
of our time, about 50%, is really spent on project work.

64
00:04:29,416 --> 00:04:33,202
And this is software engineering work, where we spend

65
00:04:33,256 --> 00:04:36,754
our time building software to further reduce the time

66
00:04:36,792 --> 00:04:40,680
that we spend on interrupt work and service maintenance. And as you can tell,

67
00:04:42,170 --> 00:04:46,438
we are already in a pretty good position there, but you can always do a

68
00:04:46,444 --> 00:04:50,602
little better. This is probably also the right time.

69
00:04:50,656 --> 00:04:54,042
To clarify, I'll often

70
00:04:54,176 --> 00:04:57,930
refer to problems and difficulties that we face

71
00:04:58,080 --> 00:05:02,842
and things like that, but this is basically complaining

72
00:05:02,986 --> 00:05:06,334
at a high level. Like our products all

73
00:05:06,372 --> 00:05:10,298
in all are pretty reliable, have always been pretty reliable,

74
00:05:10,394 --> 00:05:14,042
and people have mostly been happy with it. So this is not

75
00:05:14,116 --> 00:05:17,714
addressing an urgent need that threatened like the reliability of our products.

76
00:05:17,832 --> 00:05:21,634
But it is a relatively high level optimization where

77
00:05:21,672 --> 00:05:25,390
the goal is to spend our time more efficiently.

78
00:05:25,550 --> 00:05:29,094
If things had actually been burning, I don't think we would have been

79
00:05:29,132 --> 00:05:32,534
able to introduce the measures that I'm talking about simply because they

80
00:05:32,572 --> 00:05:36,550
take a lot of time and dedication and don't pay off immediately.

81
00:05:37,950 --> 00:05:41,402
All that being said, let me head into the first part

82
00:05:41,456 --> 00:05:45,354
of my presentation and describe to you how

83
00:05:45,392 --> 00:05:49,706
we operated in the past as a team and what problems.

84
00:05:49,888 --> 00:05:53,402
SRe room where we discovered the room for further

85
00:05:53,466 --> 00:05:54,350
optimization.

86
00:05:56,370 --> 00:05:59,550
Our engagement model in the past was pretty simple.

87
00:05:59,700 --> 00:06:03,278
So SRE support is something that is provided for specific

88
00:06:03,364 --> 00:06:07,106
services. And when I say service, then I mean the same

89
00:06:07,128 --> 00:06:11,154
thing that someone else may call a binary, or an executable, or even a

90
00:06:11,192 --> 00:06:14,674
container. So it is a little piece of software that

91
00:06:14,712 --> 00:06:18,966
runs somewhere that provides some functionality, but it's not something

92
00:06:19,148 --> 00:06:22,278
that is user visible. It is something that is

93
00:06:22,364 --> 00:06:25,910
kind of defined by the implementation architecture of your product.

94
00:06:26,060 --> 00:06:29,986
So product is the other big concept that I want to distinguish.

95
00:06:30,098 --> 00:06:33,706
Product is the thing that the user sees. Like Google Ads is

96
00:06:33,728 --> 00:06:37,126
a product, Google search is a product, but all these individual pieces

97
00:06:37,158 --> 00:06:40,460
of software that provide the function is what we call services.

98
00:06:40,990 --> 00:06:44,334
So these services are the unit at which SRE support

99
00:06:44,452 --> 00:06:47,838
used to be provided. A service is either fully SRE supported or

100
00:06:47,844 --> 00:06:51,738
it's not SRE supported. And support in this case meant

101
00:06:51,834 --> 00:06:55,582
that SRE is handling all pages that SRE is responsible

102
00:06:55,646 --> 00:06:59,966
for the SLO, both reactive. So incident response

103
00:06:59,998 --> 00:07:03,442
and proactive, meaning make sure incidents don't happen in the first place.

104
00:07:03,576 --> 00:07:07,078
And SRE takes care of all the operations work,

105
00:07:07,244 --> 00:07:11,670
meaning scaling the service up, making sure it runs with the required redundancy,

106
00:07:13,370 --> 00:07:16,758
reviewing SLO compliance, all these kind of things.

107
00:07:16,924 --> 00:07:20,490
And I think the best way to summarize really this engagement model is with this

108
00:07:20,560 --> 00:07:24,582
hypothetical quote which goes SRE

109
00:07:24,646 --> 00:07:28,518
support means that we don't have to worry about Ops work anymore.

110
00:07:28,694 --> 00:07:31,886
Said by some hypothetical developer. As I

111
00:07:31,908 --> 00:07:35,406
said, no, I don't think anyone has ever expressed it like that explicitly, but I

112
00:07:35,428 --> 00:07:39,200
think it very well describes the feeling around this model of support.

113
00:07:41,490 --> 00:07:45,466
However, things change over time. I think I mentioned before,

114
00:07:45,588 --> 00:07:48,994
when the team was founded, we were responsible for a single project,

115
00:07:49,112 --> 00:07:52,834
Google Ads, which is now. Well, now it's called Google Ads. Back then it was

116
00:07:52,872 --> 00:07:56,454
adwords, and all services that provided adwords were

117
00:07:56,492 --> 00:08:00,614
SRe supported. But then Google started to launch more

118
00:08:00,652 --> 00:08:04,230
services like Google Ad manager or Google

119
00:08:04,300 --> 00:08:07,350
AdSense. And these also needed SRE support.

120
00:08:07,420 --> 00:08:10,914
So the number of services increased. And then all these products

121
00:08:10,972 --> 00:08:14,294
over time, of course, also gained more features and more users.

122
00:08:14,422 --> 00:08:18,234
Which teams more and more services, because the easiest way to make the

123
00:08:18,272 --> 00:08:21,706
product scale better for a higher number of users is to split it

124
00:08:21,728 --> 00:08:25,674
into smaller services. The easiest way to start a new feature is to package

125
00:08:25,722 --> 00:08:29,486
it in a new service. So as an SRE team, we kind

126
00:08:29,508 --> 00:08:33,022
of scaled up as necessary. This means

127
00:08:33,156 --> 00:08:36,526
we increase our automation, making sure that we can do lots

128
00:08:36,558 --> 00:08:39,954
of operations on all services at the same time. And we made our

129
00:08:39,992 --> 00:08:43,540
services more uniform. And I think at this point,

130
00:08:43,910 --> 00:08:47,906
the degree of automation and uniformity that we have across all

131
00:08:47,928 --> 00:08:51,494
the things that we support is really quite impressive. I want to give a few

132
00:08:51,532 --> 00:08:55,094
examples. In the past, we often spent several days moving

133
00:08:55,132 --> 00:08:58,406
a service from one data center to another, making sure that all

134
00:08:58,428 --> 00:09:01,898
dependencies are brought up and brought down in the right order. These days,

135
00:09:01,984 --> 00:09:05,530
it's a matter of a few minutes, like you commit a simple

136
00:09:05,600 --> 00:09:08,790
change that says, this shiva should be run elsewhere, and then automation

137
00:09:08,870 --> 00:09:12,426
takes care of scheduling all the things in

138
00:09:12,448 --> 00:09:16,110
the right order, even if there's been exceptions in between.

139
00:09:16,180 --> 00:09:19,258
So it's not just scripts that go from beginning to end, but it's

140
00:09:19,274 --> 00:09:22,742
basically a state machine that figures out how do we go to the desired

141
00:09:22,826 --> 00:09:25,380
state, no matter where we currently are.

142
00:09:26,870 --> 00:09:31,486
Every individual binary also includes

143
00:09:31,598 --> 00:09:35,426
an HTTP server that provides monitoring metrics out

144
00:09:35,448 --> 00:09:39,030
of the box. If you link a new library into your binary,

145
00:09:39,530 --> 00:09:42,786
it automatically exports its own set of metrics. In addition

146
00:09:42,818 --> 00:09:45,986
to the one that the binary already has. There's a monitoring

147
00:09:46,018 --> 00:09:49,414
system that picks up as soon as you bring up a service and starts recording

148
00:09:49,462 --> 00:09:53,210
these metrics continuously. And there's even an alerting system

149
00:09:53,280 --> 00:09:56,970
that then infers basic alerts based on the SLO for a service

150
00:09:57,120 --> 00:10:00,586
and applies them to the monitoring metrics. So this is

151
00:10:00,608 --> 00:10:03,390
really quite impressive, at least in my opinion.

152
00:10:04,130 --> 00:10:07,934
But still, even with all this automation, the cost that

153
00:10:07,972 --> 00:10:11,758
we have per service is never zero. So that means there is a

154
00:10:11,764 --> 00:10:15,474
limit in the number of services that we support, and we reach this

155
00:10:15,512 --> 00:10:19,806
limit. So at that point, or already earlier,

156
00:10:19,838 --> 00:10:23,186
because we anticipated we reach it, SRE support is

157
00:10:23,208 --> 00:10:26,678
no longer awarded to every single service that is part

158
00:10:26,684 --> 00:10:30,422
of a product, but is awarded to the most important services, the one that provide

159
00:10:30,476 --> 00:10:32,070
a critical functionality.

160
00:10:34,170 --> 00:10:37,494
But this is where kind of the difficulties start,

161
00:10:37,612 --> 00:10:41,194
because the importance of a service cannot be

162
00:10:41,232 --> 00:10:44,666
determined automatically. Like there needs to be a human

163
00:10:44,768 --> 00:10:48,330
who makes a judgment call. How important is this piece of

164
00:10:48,400 --> 00:10:51,886
functionality for the product as a whole? And this also tends to

165
00:10:51,908 --> 00:10:55,950
change over time. Less important services kind of become more important because

166
00:10:56,020 --> 00:11:00,026
user habits change, or just because the feature develops

167
00:11:00,058 --> 00:11:03,040
over time becomes more important.

168
00:11:03,810 --> 00:11:07,810
And what also often happens is that you have interdependencies.

169
00:11:08,230 --> 00:11:11,426
So formally, less important service is suddenly a

170
00:11:11,448 --> 00:11:15,098
dependency of a more important service. So they really should have the same importance.

171
00:11:15,294 --> 00:11:19,542
So what this means is this service

172
00:11:19,596 --> 00:11:23,910
importance means periodic human review. And it also teams that

173
00:11:24,060 --> 00:11:27,254
really we would like to make changes in which

174
00:11:27,292 --> 00:11:31,014
services receive SRE support and which ones don't.

175
00:11:31,142 --> 00:11:35,306
But this is really expensive. At least historically, awarding SRE supported

176
00:11:35,408 --> 00:11:38,666
what we call onboarding means. We go through this

177
00:11:38,768 --> 00:11:42,526
long production readiness review where we evaluate compliance with

178
00:11:42,548 --> 00:11:46,266
all our best practices and bring the service into compliance.

179
00:11:46,458 --> 00:11:50,266
And dropping SRE support, what we call offboarding,

180
00:11:50,378 --> 00:11:53,630
is a little easier. Technically, you still have to adjust the permissions,

181
00:11:53,970 --> 00:11:57,282
but it is socially quite expensive because

182
00:11:57,336 --> 00:12:00,514
it boils down to telling a specific developer team, look,

183
00:12:00,552 --> 00:12:04,178
your service isn't that important anymore in the big scheme of

184
00:12:04,184 --> 00:12:07,526
things. So that is not an easy message to get across, and it

185
00:12:07,548 --> 00:12:10,902
requires very careful handling and lots of buy in from

186
00:12:11,036 --> 00:12:14,326
lots of stakeholders. It's not something you just do regularly as

187
00:12:14,348 --> 00:12:16,680
a routine operation several times a year.

188
00:12:17,310 --> 00:12:20,566
So this is one part that has been really challenging.

189
00:12:20,678 --> 00:12:24,810
The second one is really that all our binaries

190
00:12:25,150 --> 00:12:29,002
have very homogeneous controlled surfaces, but obviously they

191
00:12:29,056 --> 00:12:34,026
are not the same. We treat them as homogeneous,

192
00:12:34,058 --> 00:12:37,546
but they sre not. They provide very different functionality.

193
00:12:37,738 --> 00:12:41,274
Service a failing may result in a tooltip not being displayed.

194
00:12:41,322 --> 00:12:44,642
Service B failing may mean that the entire page

195
00:12:44,696 --> 00:12:48,594
can't be loaded. And what this means is that

196
00:12:48,632 --> 00:12:51,714
SRes no longer know what each

197
00:12:51,752 --> 00:12:55,582
service is really good for, like the user impact

198
00:12:55,726 --> 00:12:59,046
of something not working. We can tell it doesn't work, but we can't tell what

199
00:12:59,068 --> 00:13:02,646
does it mean for a user. And we also don't have a good

200
00:13:02,668 --> 00:13:06,326
way to find out. As SREs, we have way

201
00:13:06,348 --> 00:13:09,990
too many services to keep this knowledge

202
00:13:10,490 --> 00:13:14,434
as a back end developer as a developer,

203
00:13:14,482 --> 00:13:18,466
you don't really know how the RPCs

204
00:13:18,498 --> 00:13:22,126
are used by the front end, and as a front end developer you know

205
00:13:22,148 --> 00:13:26,362
what a user sees, but you don't really know how a particular RPC chain

206
00:13:26,426 --> 00:13:29,966
fans out once you've handed it over to the backend. So there's really

207
00:13:29,988 --> 00:13:33,250
no one who's in a good position to maintain that knowledge.

208
00:13:35,430 --> 00:13:38,594
So you may wonder, okay, these are all challenges, but why

209
00:13:38,632 --> 00:13:42,226
is that important in practice? So let me

210
00:13:42,328 --> 00:13:44,530
give you two illustrations.

211
00:13:45,430 --> 00:13:49,206
The first one is hypothetically, here we have the scenario that

212
00:13:49,228 --> 00:13:51,880
Google Ads is down. It's not working,

213
00:13:52,410 --> 00:13:55,926
but interesting enough. No SRE is doing

214
00:13:55,948 --> 00:13:59,666
anything about it because it so happens that all SRE supported

215
00:13:59,698 --> 00:14:02,918
binaries, all SRE supported services are within SLO.

216
00:14:03,094 --> 00:14:06,262
This could happen. It wouldn't actually happen that SRE

217
00:14:06,326 --> 00:14:09,514
doesn't do anything like we don't work by the letter. We would still

218
00:14:09,632 --> 00:14:13,194
get involved and try to fix the problem. But formally,

219
00:14:13,242 --> 00:14:16,734
like on paper, our responsibility is

220
00:14:16,772 --> 00:14:20,254
not Google Ads as a whole, but it is, or used to be,

221
00:14:20,292 --> 00:14:23,970
not Google Ads as a whole, but it is a subset of services that

222
00:14:24,040 --> 00:14:26,530
provide the most important functionality.

223
00:14:27,830 --> 00:14:30,942
Less hypothetically, the following scenario,

224
00:14:31,006 --> 00:14:34,834
we get paged because SLO is at risk and a specific issue

225
00:14:34,872 --> 00:14:38,834
that we are dealing with is that at service Paul Wilson recode

226
00:14:38,882 --> 00:14:42,486
status error ratio is 0.5, which is

227
00:14:42,508 --> 00:14:46,166
bigger than 0.5. I guess we have a rounding error here

228
00:14:46,268 --> 00:14:49,814
for over 15 minutes and some more blah blah.

229
00:14:49,942 --> 00:14:52,874
Now you may assume that I know exactly what that means.

230
00:14:52,992 --> 00:14:56,586
The truth is I don't. But most of

231
00:14:56,608 --> 00:15:00,330
the time I can still debug this issue.

232
00:15:00,400 --> 00:15:04,106
I can still mitigate this issue, I can even find a root cause and assign

233
00:15:04,138 --> 00:15:08,046
a bug to the right developer. But at no point in time did I

234
00:15:08,068 --> 00:15:10,590
ever know what this actually meant for the user.

235
00:15:13,110 --> 00:15:17,330
So what I'm trying to say with all this is really that supporting services

236
00:15:17,480 --> 00:15:20,706
means supporting components of a

237
00:15:20,728 --> 00:15:24,526
product, components that are defined not by features,

238
00:15:24,558 --> 00:15:28,120
but by implementation choices that the user doesn't actually see.

239
00:15:29,290 --> 00:15:32,850
And the consequence of this model is that eventually

240
00:15:32,930 --> 00:15:37,126
the overall product reliability is determined by

241
00:15:37,148 --> 00:15:40,954
the unsupported services. The services that don't receive SRE support, they become

242
00:15:40,992 --> 00:15:44,218
the bottleneck. So SRE efforts would give a

243
00:15:44,224 --> 00:15:47,660
much higher return when we invested them into those other services.

244
00:15:48,590 --> 00:15:52,154
But that's not easy. First of all, we are ill equipped to even identify those

245
00:15:52,192 --> 00:15:55,886
services because we don't have an overview over the whole product. We are focused on

246
00:15:55,908 --> 00:15:59,374
the subset of things that we are formally responsible for,

247
00:15:59,572 --> 00:16:03,322
and even if we find another service that urgently needs our attention,

248
00:16:03,466 --> 00:16:07,422
we are kind of ill equipped to shift focus on there because we require

249
00:16:07,486 --> 00:16:11,106
this expensive onboarding procedure of the new service. And then we

250
00:16:11,128 --> 00:16:14,974
need to find another service to offboard, which is typically

251
00:16:15,022 --> 00:16:18,354
even more difficult. So we have kind of a catch 22.

252
00:16:18,392 --> 00:16:21,782
We can either spend our time on the services that are already

253
00:16:21,836 --> 00:16:25,526
supported, but that's not where the real problems are, or we

254
00:16:25,548 --> 00:16:28,938
could spend a lot of time onboarding an offboarding service, which of

255
00:16:28,944 --> 00:16:31,660
course is not an end goal in itself either.

256
00:16:32,190 --> 00:16:35,914
Furthermore, it gets really difficult to

257
00:16:35,952 --> 00:16:39,926
translate issues with a service into the resulting

258
00:16:39,958 --> 00:16:43,146
user experience. That is the example that I just gave you with this weird error

259
00:16:43,178 --> 00:16:46,622
message. Translating this into something understandable is a

260
00:16:46,676 --> 00:16:50,538
nontrivial effort it really takes. Typically when we have an incident,

261
00:16:50,634 --> 00:16:54,494
we spend at least as much time to figure

262
00:16:54,532 --> 00:16:57,940
out the user impact than we spend time fixing the issue.

263
00:16:58,390 --> 00:17:02,642
And finally, it also becomes really difficult to keep

264
00:17:02,776 --> 00:17:05,780
slos correlated with the user experience,

265
00:17:06,490 --> 00:17:10,200
with the user happiness. Why is that? First of all,

266
00:17:11,210 --> 00:17:14,934
operations may be retried. So just because there's an SLO miss

267
00:17:14,972 --> 00:17:18,358
somewhere down the stack, it doesn't mean that the user actually sees

268
00:17:18,374 --> 00:17:21,718
an error, because maybe that request got retried successfully,

269
00:17:21,894 --> 00:17:26,374
but also the other way around. If there's

270
00:17:26,502 --> 00:17:30,566
a problem all the way down the stack

271
00:17:30,758 --> 00:17:34,366
and it kind of propagates upwards. And now as a consequence of

272
00:17:34,388 --> 00:17:38,414
that, every dependency upwards also reports an error. This may look

273
00:17:38,452 --> 00:17:42,586
like a single error to the user, while on our end it looks

274
00:17:42,628 --> 00:17:45,250
like basically the whole system is collapsing.

275
00:17:46,710 --> 00:17:50,386
So it's really difficult to

276
00:17:50,408 --> 00:17:54,514
be confident that if the user is unhappy, our SLO is violated, and that

277
00:17:54,552 --> 00:17:58,146
a violation of our SLO really corresponds to a decrease

278
00:17:58,178 --> 00:17:59,350
in user happiness.

279
00:18:01,770 --> 00:18:05,298
So these were the issues. You're supporting lots

280
00:18:05,314 --> 00:18:08,806
of services, but we don't really have an overview of the

281
00:18:08,828 --> 00:18:12,226
product as a whole and therefore we can't

282
00:18:12,258 --> 00:18:16,186
really tell where's our attention most needed and

283
00:18:16,288 --> 00:18:20,814
what is the effect of problems on the user. So we decided to change that,

284
00:18:21,012 --> 00:18:24,458
and the change is actually pretty simple. To summarize,

285
00:18:24,554 --> 00:18:28,446
we changed our engagement model so that SRE is

286
00:18:28,468 --> 00:18:31,950
no longer supporting these services, aka binaries,

287
00:18:32,310 --> 00:18:35,566
continuous executables. But SRE

288
00:18:35,678 --> 00:18:40,290
supports products. Things like Google Ads

289
00:18:41,430 --> 00:18:46,166
and individual services are

290
00:18:46,188 --> 00:18:49,734
not the responsibility of SRE. But SRE is

291
00:18:49,772 --> 00:18:53,014
responsible that developers are able to

292
00:18:53,052 --> 00:18:56,326
run their services in an efficient manner and in

293
00:18:56,348 --> 00:18:59,446
a reliable manner, whether this is by providing tooling

294
00:18:59,478 --> 00:19:02,634
or providing guidance. But it's not running all

295
00:19:02,672 --> 00:19:05,802
the services and our

296
00:19:05,856 --> 00:19:09,574
attention is focused anywhere

297
00:19:09,622 --> 00:19:13,134
within the product, depending on where we see the most need

298
00:19:13,252 --> 00:19:17,054
at a given time. So in the long term we want to completely abolish this

299
00:19:17,092 --> 00:19:20,494
concept of onboarded supported service and not

300
00:19:20,532 --> 00:19:24,100
supported service. What is supported is the product as a whole.

301
00:19:27,670 --> 00:19:31,330
If you recall the quote that I gave earlier, it was SRE support

302
00:19:31,400 --> 00:19:34,130
means that we don't have to worry about Ops work anymore.

303
00:19:35,030 --> 00:19:38,614
This was the old engagement model. I think this new model is

304
00:19:38,652 --> 00:19:42,450
much better captured by a different quote, and that is that SRE

305
00:19:42,530 --> 00:19:46,262
support means that the product is operated efficiently and works

306
00:19:46,316 --> 00:19:50,118
well for its users. And I think from the difference of these two statements,

307
00:19:50,214 --> 00:19:54,138
you can tell that this is first and foremost a cultural change

308
00:19:54,224 --> 00:19:57,500
and a philosophical change. It's not so much a technical one.

309
00:19:57,950 --> 00:20:01,502
So this probably all sounds well and good, but how did we go about

310
00:20:01,556 --> 00:20:05,662
implementing it in practice? Well, let me tell you about

311
00:20:05,716 --> 00:20:08,778
we did, and it was basically three steps.

312
00:20:08,874 --> 00:20:11,994
The first one was to get a better understanding

313
00:20:12,042 --> 00:20:16,062
of how our product worked for the user. And for that we relied

314
00:20:16,126 --> 00:20:20,286
on this thing called CuI, which stands for critical user interaction.

315
00:20:20,398 --> 00:20:23,954
And a Cui is an interaction of a user with the product,

316
00:20:24,072 --> 00:20:27,258
and that interaction may succeed or fail. And it's

317
00:20:27,294 --> 00:20:30,710
measured was close to the user as possible. That generally means

318
00:20:30,780 --> 00:20:34,406
it's measured in the browser in some JavaScript code, and then

319
00:20:34,428 --> 00:20:37,926
the success or failure shows SRE sent back to the

320
00:20:37,948 --> 00:20:41,606
server where it is locked. So a Cy is associated

321
00:20:41,638 --> 00:20:45,306
with the availability and reliability of a product feature and not

322
00:20:45,328 --> 00:20:49,402
a service, and that feature may be provided by multiple services working

323
00:20:49,456 --> 00:20:52,974
in concert with these cuis being

324
00:20:53,012 --> 00:20:57,002
defined and measured. We then rewrite

325
00:20:57,066 --> 00:21:01,290
our slos so that they apply to cuis,

326
00:21:01,370 --> 00:21:05,082
so to product features rather than services. And this is

327
00:21:05,156 --> 00:21:08,142
what gives us this official change of SRE responsibility.

328
00:21:08,286 --> 00:21:11,986
So it is no longer our job to make sure that individual services stay

329
00:21:12,008 --> 00:21:15,350
within SLO, but our job is that product

330
00:21:15,420 --> 00:21:17,670
features stay within SLO.

331
00:21:20,890 --> 00:21:24,150
Now, with SRE being responsible for the product,

332
00:21:24,220 --> 00:21:27,480
the next question is of course, ok, so who runs the services?

333
00:21:27,950 --> 00:21:31,820
I already mentioned that before, we want developers to do that.

334
00:21:32,910 --> 00:21:36,714
So step two is all

335
00:21:36,752 --> 00:21:40,346
services are owned by developers. Now at this point I

336
00:21:40,368 --> 00:21:43,930
should probably point out Google has lots of SRE teams.

337
00:21:44,510 --> 00:21:47,982
This change is not a Google wide. This change is something

338
00:21:48,116 --> 00:21:51,726
that we apply to the services in our remedy and

339
00:21:51,748 --> 00:21:54,770
are still in some cases in the process of applying.

340
00:21:56,150 --> 00:22:00,222
So SRE no longer runs services, but SRE ensures

341
00:22:00,286 --> 00:22:03,694
that following our best practices is the easiest way for developers

342
00:22:03,742 --> 00:22:07,650
to run a service and SRE

343
00:22:07,730 --> 00:22:11,602
gets involved if the cuis are at risk. So if a feature

344
00:22:11,666 --> 00:22:15,414
doesn't work, rather than if a service doesn't work, and we

345
00:22:15,452 --> 00:22:18,982
are available as an escalation point.

346
00:22:19,116 --> 00:22:22,234
So if a developer is handling an incident and they think okay,

347
00:22:22,272 --> 00:22:24,742
this is a big thing that really needs SRE engagement,

348
00:22:24,886 --> 00:22:28,646
then they are expected and very welcome to pagers.

349
00:22:28,678 --> 00:22:31,966
But we are not the first line of defense. We sre the second line of

350
00:22:31,988 --> 00:22:35,550
defense. To give a different analogy,

351
00:22:36,290 --> 00:22:39,502
I think SRE takes

352
00:22:39,556 --> 00:22:43,626
the role of a production doctor. So the doctor

353
00:22:43,818 --> 00:22:47,422
can tell if the patient is sick and they can typically

354
00:22:47,486 --> 00:22:51,342
also make the patient healthy again. And doctor

355
00:22:51,406 --> 00:22:54,562
tells the patient okay, here's what you need to do to avoid getting

356
00:22:54,616 --> 00:22:58,534
sick. Here's good practices for hygiene. And this is also

357
00:22:58,572 --> 00:23:01,666
what we do as SRE. We can tell when production

358
00:23:01,698 --> 00:23:05,394
is unhealthy. We can typically fix it, and we can tell developers

359
00:23:05,442 --> 00:23:08,774
what they need to do to keep their

360
00:23:08,812 --> 00:23:12,134
systems healthy. But we cannot do this ourselves.

361
00:23:12,262 --> 00:23:15,482
Like the doctor can't make sure that the patient stays happy,

362
00:23:15,536 --> 00:23:18,950
they need to follow the recommendations from their doctor.

363
00:23:19,030 --> 00:23:22,554
And this is also how we see the role of SRE. We give the guidance,

364
00:23:22,602 --> 00:23:26,186
we provide the tools, but implementing it is not something that's

365
00:23:26,218 --> 00:23:29,120
feasible for SRE to do for every individual service.

366
00:23:29,570 --> 00:23:32,878
Instead, SRE engagement with specific

367
00:23:32,964 --> 00:23:36,706
services are now always time limited. So they are scoped to either fix a

368
00:23:36,728 --> 00:23:40,834
particular reliability issue or they are scoped to teach particular

369
00:23:40,952 --> 00:23:44,594
operations related skills so that developers in the future can

370
00:23:44,632 --> 00:23:47,160
take care of a particular issue themselves.

371
00:23:48,490 --> 00:23:52,406
This leaves us with one more issue. We now have a measure of how

372
00:23:52,428 --> 00:23:56,914
well the product works. We have defined when SRE gets engaged,

373
00:23:57,042 --> 00:24:00,154
and we have established that components are run primarily by

374
00:24:00,192 --> 00:24:03,738
developers. But how do we know what to look at?

375
00:24:03,824 --> 00:24:07,690
Well being Sre this is where we finally kind of started

376
00:24:07,760 --> 00:24:11,770
to address this with technical solutions.

377
00:24:12,110 --> 00:24:16,430
So you're probably familiar with the concept of architecture diagrams,

378
00:24:16,930 --> 00:24:21,040
where you have nodes for individual services and

379
00:24:21,410 --> 00:24:25,166
arrows that tell you what talks to what. The problem that

380
00:24:25,188 --> 00:24:28,770
we had with these diagrams is that they were effectively useless because they were

381
00:24:28,840 --> 00:24:32,962
way too big, like there SrE so many services, and really everything seems

382
00:24:33,016 --> 00:24:36,566
to talk to almost anything else at any given point in time. So they

383
00:24:36,588 --> 00:24:40,262
wouldn't help you very much. So what we decided is we need

384
00:24:40,316 --> 00:24:44,114
a better way to generate these diagrams,

385
00:24:44,162 --> 00:24:48,510
and we wanted to generate them dynamically from RPC traces

386
00:24:48,690 --> 00:24:53,546
for cuis, so that

387
00:24:53,568 --> 00:24:57,290
we could tell for a given CuI for a given feature

388
00:24:59,630 --> 00:25:02,714
which services are involved in serving that feature. That was

389
00:25:02,752 --> 00:25:06,174
our first development project, and the second one is that we

390
00:25:06,212 --> 00:25:09,822
looked at our source control system. We said, look, we have this great

391
00:25:09,876 --> 00:25:13,570
feature of a CI that runs all the tests and ensures that

392
00:25:13,720 --> 00:25:17,870
the proposed changes are good and ready for commit.

393
00:25:18,030 --> 00:25:21,570
Why don't we have something similar for our production setup?

394
00:25:22,150 --> 00:25:25,422
So the idea is here that we have some CI

395
00:25:25,486 --> 00:25:28,806
for the production setup that continuously checks everything that

396
00:25:28,828 --> 00:25:32,374
runs in production against our best practices. And then

397
00:25:32,412 --> 00:25:36,070
we have dashboards that really highlight the production set

398
00:25:36,140 --> 00:25:39,526
overall and indicate us, okay, here's the services that are addressed.

399
00:25:39,558 --> 00:25:42,620
This is where we should spend our time on.

400
00:25:44,910 --> 00:25:48,538
Which brings me to the present. Where did all of

401
00:25:48,544 --> 00:25:51,846
this lead? And oops,

402
00:25:51,878 --> 00:25:55,214
that was one too far. And the thing that I

403
00:25:55,252 --> 00:25:58,970
want to emphasize most is that the changes have been welcomed.

404
00:25:59,130 --> 00:26:03,890
This is the thing that is both the most important one, this being primarily

405
00:26:06,630 --> 00:26:10,018
a social change rather than a technical one, and is also the

406
00:26:10,024 --> 00:26:13,922
one that we were most worried about, like, is everyone going to share

407
00:26:13,976 --> 00:26:17,574
our opinion? But luckily we were able

408
00:26:17,612 --> 00:26:21,430
to convince pretty much everyone that this new

409
00:26:21,500 --> 00:26:25,126
model of engaging is a better use of

410
00:26:25,228 --> 00:26:28,966
everyone's time. Of course, people in the dev.org,

411
00:26:29,078 --> 00:26:32,906
the further down you go from a higher level leadership, are a

412
00:26:32,928 --> 00:26:37,094
little worried that they'll have more to do. But there was pretty much universal

413
00:26:37,142 --> 00:26:40,666
buy in. But let

414
00:26:40,688 --> 00:26:44,398
me go into a little more detail of where we are. So we have

415
00:26:44,564 --> 00:26:48,238
defined cuis for many of our projects. We have

416
00:26:48,324 --> 00:26:51,040
redefined our slos for them,

417
00:26:51,890 --> 00:26:55,650
for some of our products as well, and we're in the process of

418
00:26:55,720 --> 00:26:58,500
extending coverage to all the things that we support.

419
00:26:58,870 --> 00:27:02,638
We also have these architecture diagrams available. They are computed

420
00:27:02,734 --> 00:27:05,090
on demand for particular cuis.

421
00:27:05,450 --> 00:27:09,602
We concluded several model engagements that included

422
00:27:09,666 --> 00:27:12,866
both teaching about production best practices

423
00:27:12,978 --> 00:27:17,574
and what we call reliability deep dives. And this really enabled us to

424
00:27:17,692 --> 00:27:21,674
take a look at individual issues in much more depth than we have been

425
00:27:21,712 --> 00:27:24,854
able to do before. We also defined

426
00:27:24,902 --> 00:27:28,634
and wrote up what we call a production curriculum. It is basically the set

427
00:27:28,672 --> 00:27:32,474
of production skills that we think developers need to have and

428
00:27:32,512 --> 00:27:36,186
should have at their disposal to run their services reliably. Something that's

429
00:27:36,218 --> 00:27:40,174
not in there is the thing where SRE steps in, and we're currently in

430
00:27:40,212 --> 00:27:44,100
process of creating training materials for that. And finally,

431
00:27:45,110 --> 00:27:48,994
we put in place all the infrastructure for this production CI. So our

432
00:27:49,032 --> 00:27:52,930
services are now continuously monitored for compliance with

433
00:27:53,000 --> 00:27:56,354
all the best practices. And the

434
00:27:56,392 --> 00:27:59,506
UI at the moment is still a little bit rough. Like we can use it

435
00:27:59,608 --> 00:28:02,726
to retrieve data, but we need to make it a lot more neater so that

436
00:28:02,748 --> 00:28:05,910
we can bring it to developer leadership and show them. Okay,

437
00:28:05,980 --> 00:28:09,514
here's an overview of your product. Here is where we are going to spend our

438
00:28:09,552 --> 00:28:12,860
time now, because there's things that needs looking into.

439
00:28:18,670 --> 00:28:22,442
Let me come back to the example that I had earlier. This was this

440
00:28:22,496 --> 00:28:26,926
hypothetical, or actually not so hypothetical page that we get in

441
00:28:26,948 --> 00:28:29,898
the past we had ad service Paul Wilson recodes that, blah,

442
00:28:29,914 --> 00:28:33,486
blah, blah, blah, blah. This was an alert for a particular service.

443
00:28:33,588 --> 00:28:37,566
What we now have with the introduction of cuis is the following.

444
00:28:37,678 --> 00:28:41,198
Some publishers are not able to preview video ads

445
00:28:41,294 --> 00:28:45,266
error budget will be exhausted in 78 minutes. So at this

446
00:28:45,288 --> 00:28:49,382
point we can basically read off what the user impact is because

447
00:28:49,436 --> 00:28:52,870
our alerting is now based on the user impact.

448
00:28:53,290 --> 00:28:56,466
Note that this does not completely replace the old alerts.

449
00:28:56,578 --> 00:29:00,650
The new alerts and the cuis define when SRE gets involved.

450
00:29:01,070 --> 00:29:04,666
And once we are involved, we'll of course also look at per service metrics to

451
00:29:04,688 --> 00:29:08,454
determine, well, where exactly is the root cause and how do we mitigate

452
00:29:08,502 --> 00:29:11,946
it. Also like to show you

453
00:29:11,968 --> 00:29:16,982
an example of an architecture like

454
00:29:17,056 --> 00:29:20,718
the service names here are fictitious, but it doesn't matter

455
00:29:20,804 --> 00:29:24,318
for the point I'm trying to make. So on the left,

456
00:29:24,404 --> 00:29:28,478
in kind of this turkish shade, you see two cuis. Basically it's

457
00:29:28,574 --> 00:29:32,130
loading one page of the application, loading another page of the application,

458
00:29:32,280 --> 00:29:35,960
and the arrows indicate which services

459
00:29:36,490 --> 00:29:40,386
are involved in completing this CUI.

460
00:29:40,578 --> 00:29:44,054
You'll see that there's in some cases errors that go back and

461
00:29:44,092 --> 00:29:47,846
forth. That truly means that, for example, the myrepper data on

462
00:29:47,868 --> 00:29:51,514
the top service gets called by my data API, but then called

463
00:29:51,552 --> 00:29:54,570
back into that service as well. Sometimes that can't be avoided.

464
00:29:54,990 --> 00:29:59,322
And everything that is kind of in those oval circles is services

465
00:29:59,456 --> 00:30:03,086
that are within our remit. And if you click on those, you would get

466
00:30:03,108 --> 00:30:06,590
a per service summary of what does this service

467
00:30:06,660 --> 00:30:10,286
look like? Is there any current issues? Then there's the kind

468
00:30:10,308 --> 00:30:14,014
of other kind of rectangular boxes where you have arrows. These are

469
00:30:14,052 --> 00:30:17,854
services within Google that are supported by other SRE teams. So this is automatically

470
00:30:17,902 --> 00:30:22,174
narrowed down to services that actually are our responsibility

471
00:30:22,302 --> 00:30:25,446
and to services that are involved in serving a particular

472
00:30:25,548 --> 00:30:29,480
CUI. Most important, however, is you can actually

473
00:30:29,850 --> 00:30:33,666
select multiple cuis. Suppose they were both failing and then compute

474
00:30:33,698 --> 00:30:39,174
the intersection and only show the intersection of

475
00:30:39,212 --> 00:30:43,074
services that are involved. And this enabled us to really quickly narrow

476
00:30:43,122 --> 00:30:46,962
down and drill down to the service that is most likely

477
00:30:47,106 --> 00:30:48,360
causing the issues.

478
00:30:50,930 --> 00:30:54,714
A few more things are planned, so we still need to extend CUI

479
00:30:54,762 --> 00:30:57,966
coverage to all our products. Some are completely covered at the

480
00:30:57,988 --> 00:31:01,774
moment, some are partially covered, some still need

481
00:31:01,812 --> 00:31:05,234
work. And the second big thing that we still

482
00:31:05,272 --> 00:31:08,914
need to do is completely phase out this legacy status of the

483
00:31:08,952 --> 00:31:12,786
supported services. Remember, we promised to do all operations work

484
00:31:12,808 --> 00:31:16,740
for some SRE supported services and we have not

485
00:31:18,390 --> 00:31:21,766
yet stopped doing that for the services for which we were already doing

486
00:31:21,788 --> 00:31:25,094
that. Basically, we wanted to be very sure that

487
00:31:25,212 --> 00:31:28,562
everyone is on board with a change, that everything is working exactly as planned,

488
00:31:28,626 --> 00:31:32,330
and this will be the next big step. One thing that we need to do

489
00:31:32,400 --> 00:31:36,154
before we do that is kind of fix a small bug or

490
00:31:36,192 --> 00:31:39,350
fix a small missing feature in our monitoring and alerting setup.

491
00:31:39,430 --> 00:31:43,066
Currently we simply don't have enough granularity to route alerts

492
00:31:43,098 --> 00:31:47,326
like we cannot distinguish is a feature completely broken or are

493
00:31:47,348 --> 00:31:50,766
just a few users affected. And this is another thing

494
00:31:50,788 --> 00:31:53,826
we want to address before we then finally start to

495
00:31:53,928 --> 00:31:57,854
phase out this SRE as a full service. So let me summarize

496
00:31:57,902 --> 00:32:02,302
my talk. In my team, we've developed

497
00:32:02,366 --> 00:32:06,550
a lot of automation and we have standardized all the services

498
00:32:06,620 --> 00:32:09,986
that we support to a very high degree, and this enabled

499
00:32:10,018 --> 00:32:13,730
us to scale our support to really hundreds and hundreds

500
00:32:13,810 --> 00:32:17,190
of different services. However, the price

501
00:32:17,260 --> 00:32:20,602
that we paid for this was a disconnect of

502
00:32:20,656 --> 00:32:24,154
SRE from the user experience. So while

503
00:32:24,192 --> 00:32:28,474
we could identify issues with these individual services

504
00:32:28,672 --> 00:32:32,366
and mitigate them and even root cause them, we had a lot

505
00:32:32,388 --> 00:32:35,614
of trouble to explain what was

506
00:32:35,652 --> 00:32:39,040
the user impact from these issues, like what did the user experience.

507
00:32:39,890 --> 00:32:43,486
Furthermore, products being built from more services than

508
00:32:43,508 --> 00:32:47,362
we can support eventually leads to an inefficient use of our

509
00:32:47,416 --> 00:32:50,786
time, because we spend a lot of time looking at

510
00:32:50,808 --> 00:32:54,866
the same services, while the real bottleneck for the products reliability is

511
00:32:54,888 --> 00:32:56,920
in the services that we currently don't support.

512
00:32:58,010 --> 00:33:02,194
And we address these issues by changing our engagement

513
00:33:02,242 --> 00:33:06,230
model and rescoping our support from individual services

514
00:33:06,380 --> 00:33:08,460
to products as a whole.

515
00:33:09,630 --> 00:33:13,514
And we put developers in charge of running their

516
00:33:13,552 --> 00:33:17,514
services with SRE being responsible not

517
00:33:17,552 --> 00:33:21,174
to run the services individually, but to make sure that

518
00:33:21,232 --> 00:33:24,542
developers are empowered to do that on their own.

519
00:33:24,596 --> 00:33:28,014
Following SRE best practices that SRE's job

520
00:33:28,052 --> 00:33:31,406
is to make sure that following best practices and running the

521
00:33:31,428 --> 00:33:34,740
service reliably is basically the easiest way to run a service,

522
00:33:36,070 --> 00:33:40,194
and overall the changes have been a success.

523
00:33:40,392 --> 00:33:44,014
We are still implementing some parts of it, but the majority

524
00:33:44,062 --> 00:33:47,654
is there and we now have a much

525
00:33:47,692 --> 00:33:51,766
better understanding of our products from the

526
00:33:51,788 --> 00:33:55,526
user's point of view. We can immediately tell what is

527
00:33:55,548 --> 00:33:59,146
broken for the user and we therefore have a lot more confidence that we

528
00:33:59,168 --> 00:34:02,874
are able to maintain user happiness. And we also

529
00:34:02,912 --> 00:34:06,426
gained a much better understanding of product health as a

530
00:34:06,448 --> 00:34:10,254
whole, which has enabled us to focus our

531
00:34:10,292 --> 00:34:13,518
efforts flexibly on the services

532
00:34:13,684 --> 00:34:17,194
that most need our attention, and therefore to make more efficient

533
00:34:17,242 --> 00:34:18,480
use of our time.

534
00:34:20,530 --> 00:34:24,174
This brings me to the end of my presentation. Normally I'd ask for

535
00:34:24,212 --> 00:34:26,830
questions. This being a recording,

536
00:34:27,750 --> 00:34:30,930
of course, makes that impossible. Still,

537
00:34:31,080 --> 00:34:35,058
if there is questions, you're welcome to send them by email.

538
00:34:35,224 --> 00:34:38,646
I won't promise that I'll respond to all of them because, well, I don't know

539
00:34:38,668 --> 00:34:42,326
how many questions there are and depending on the kind

540
00:34:42,348 --> 00:34:46,134
of question, I may have to get approval to make sure that I can share

541
00:34:46,172 --> 00:34:49,778
something externally, which just may not always be worth the effort.

542
00:34:49,874 --> 00:34:53,654
But please do feel welcome and I will try

543
00:34:53,692 --> 00:34:57,010
to do what I can. I hope this presentation

544
00:34:57,090 --> 00:35:00,526
was interesting and worth your time. Thank you very much

545
00:35:00,548 --> 00:35:01,130
for your attention.

