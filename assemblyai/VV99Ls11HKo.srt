1
00:02:15,000 --> 00:02:18,644
Hi everyone, in this talk I'm going to talk about how join

2
00:02:18,682 --> 00:02:22,276
join operational works DevOps team.

3
00:02:22,298 --> 00:02:26,528
You join a new team such as manual recovery operations,

4
00:02:26,704 --> 00:02:30,004
triaging alerts, arresting incidents and so

5
00:02:30,042 --> 00:02:34,176
on. Sustainable shooting is essential,

6
00:02:34,368 --> 00:02:37,868
especially for SRE guy is, but it's difficult

7
00:02:37,954 --> 00:02:41,980
for new members because you don't understand how your systems work

8
00:02:42,050 --> 00:02:45,624
enough yet. This talk will give you some tips

9
00:02:45,672 --> 00:02:49,140
on quickly catching up your service specific knowledge

10
00:02:49,320 --> 00:02:53,250
and contributing to your team from early on.

11
00:02:54,340 --> 00:02:58,704
I'm Kazki, a senior backend engineer at ODFI in

12
00:02:58,742 --> 00:03:02,684
Autify. The responsibility of our backend engineer

13
00:03:02,732 --> 00:03:06,272
role includes infrastructure development and

14
00:03:06,326 --> 00:03:10,020
operations like instant handling, being in on call

15
00:03:10,090 --> 00:03:13,556
rotations, etc. Autify is a

16
00:03:13,578 --> 00:03:17,032
startup company which provides an AIB based software test

17
00:03:17,086 --> 00:03:20,424
automation platform. We have two products,

18
00:03:20,542 --> 00:03:23,960
autify for web and autify for mobile.

19
00:03:24,940 --> 00:03:28,784
I'm involved in the development and operations of the autify

20
00:03:28,852 --> 00:03:32,572
for web service. The idea in this talk is based

21
00:03:32,626 --> 00:03:35,100
on my experience at OTFi.

22
00:03:36,000 --> 00:03:39,408
First, I would like to discuss what makes us difficult

23
00:03:39,494 --> 00:03:43,212
to join services operations troubleshooting

24
00:03:43,276 --> 00:03:47,410
is one of the critical activities for anyone who operations web services.

25
00:03:48,420 --> 00:03:52,052
It's often viewed as an innate skill that some

26
00:03:52,106 --> 00:03:54,900
people have and others don't.

27
00:03:55,720 --> 00:04:00,100
However, the book cycle reliability engineer

28
00:04:00,760 --> 00:04:04,490
shows a general model of troubleshooting process.

29
00:04:05,180 --> 00:04:08,504
It's beneficial to analyze what makes it difficult to

30
00:04:08,542 --> 00:04:12,200
join service operations, so let me explain briefly.

31
00:04:13,420 --> 00:04:17,564
First troubleshooting start with a problem report for

32
00:04:17,602 --> 00:04:20,972
example, metrics, alerts, application,

33
00:04:21,106 --> 00:04:24,312
exception, customer inquiries,

34
00:04:24,456 --> 00:04:27,724
et cetera. After then

35
00:04:27,922 --> 00:04:32,708
we can look at system directory and logs such as cybermetrics,

36
00:04:32,824 --> 00:04:35,170
LR logs and so on.

37
00:04:36,180 --> 00:04:40,160
Through this exercise we can understand the current state

38
00:04:40,230 --> 00:04:45,040
of the system and identify possible causes.

39
00:04:45,940 --> 00:04:49,680
When we find potential solutions, we can actively

40
00:04:49,760 --> 00:04:53,396
trace a system that is chances the system in

41
00:04:53,418 --> 00:04:57,080
a controlled way and observed the results.

42
00:04:58,140 --> 00:05:01,320
This is a general process of troubleshooting,

43
00:05:01,900 --> 00:05:05,720
but when you join a new team, there are some challenges

44
00:05:06,860 --> 00:05:10,776
regarding the Toria waste. Let's say you get analyzed.

45
00:05:10,808 --> 00:05:14,270
The cpu utilization is over 90%.

46
00:05:15,520 --> 00:05:18,956
Once receiving the problem report youre need

47
00:05:18,978 --> 00:05:22,880
to consider whether you have to take action immediately after

48
00:05:22,950 --> 00:05:25,490
answering the following questions in your mind.

49
00:05:26,100 --> 00:05:29,920
Is this all as the first time your team has which

50
00:05:29,990 --> 00:05:33,844
workflow is the server used for? Do users use

51
00:05:33,882 --> 00:05:37,590
the services or only for internal use?

52
00:05:38,600 --> 00:05:42,390
Is it a known issues for the team? However,

53
00:05:43,240 --> 00:05:47,220
you will not have enough knowledge to answer these questions.

54
00:05:47,370 --> 00:05:51,144
Yet. When youre just joined the

55
00:05:51,182 --> 00:05:54,232
book practical monitoring mentioned in the

56
00:05:54,286 --> 00:05:58,344
context of alerts, they said generally

57
00:05:58,472 --> 00:06:01,512
there are two different alerts.

58
00:06:01,656 --> 00:06:05,390
The first one is alert meant to wake someone up.

59
00:06:05,760 --> 00:06:08,872
This kind of alerts requires action to be taken

60
00:06:08,946 --> 00:06:13,250
immediately or else the system will go down.

61
00:06:14,020 --> 00:06:18,320
For example, when all web servers are unavailable,

62
00:06:18,660 --> 00:06:21,120
we should take action immediately.

63
00:06:22,600 --> 00:06:26,310
The second one is alerts metadata for youre information.

64
00:06:27,080 --> 00:06:30,352
It doesn't require any immediate action,

65
00:06:30,496 --> 00:06:33,780
but someone ought to be informed that is occurred.

66
00:06:34,300 --> 00:06:38,228
For example, when an overnight backup job failed,

67
00:06:38,404 --> 00:06:42,104
it ought to be informed to software engineer so that

68
00:06:42,142 --> 00:06:46,088
they recognize they may need to take action the next business

69
00:06:46,174 --> 00:06:49,708
day. Contextual judgment is

70
00:06:49,794 --> 00:06:52,604
one challenge to doing operational work.

71
00:06:52,802 --> 00:06:56,700
It highly depends on knowing its failure patterns.

72
00:06:57,200 --> 00:07:01,148
After a few months of watching various alerts

73
00:07:01,244 --> 00:07:04,720
you may guess a hunger weight, but it will take

74
00:07:04,790 --> 00:07:08,476
time. Also, in the examine

75
00:07:08,508 --> 00:07:12,150
and diagnose and later phase there are problems.

76
00:07:13,480 --> 00:07:17,200
Even if you configure suburb

77
00:07:17,280 --> 00:07:20,964
of problem reports, you need knowledge of how

78
00:07:21,002 --> 00:07:24,496
the system is built, how it should operate

79
00:07:24,608 --> 00:07:26,440
and its failure modes.

80
00:07:27,260 --> 00:07:31,092
Basically, the exercise depends upon two factors.

81
00:07:31,236 --> 00:07:35,364
The first one is an understanding of how to troubleshooting

82
00:07:35,412 --> 00:07:38,920
dynamically. The second one is a Sli

83
00:07:39,000 --> 00:07:42,956
knowledge of the system. For example,

84
00:07:43,058 --> 00:07:46,360
let's say you get the problem report that queuing

85
00:07:46,520 --> 00:07:49,840
processing has stopped and the number

86
00:07:49,910 --> 00:07:52,720
of waiting events has increased.

87
00:07:53,780 --> 00:07:57,010
To solve this case, you need to know such information,

88
00:07:57,940 --> 00:08:01,040
what events the queuing system handles.

89
00:08:01,560 --> 00:08:04,260
Are there any known possible causes?

90
00:08:06,120 --> 00:08:10,310
Have we influenced the retroactive mechanism? So again,

91
00:08:11,000 --> 00:08:14,570
lack of service knowledge becomes an issue here.

92
00:08:15,420 --> 00:08:18,760
So far I introduced the troubleshooting process and

93
00:08:18,830 --> 00:08:22,216
mentioned that the lack of service understanding can be a

94
00:08:22,238 --> 00:08:24,970
challenge within that process.

95
00:08:26,320 --> 00:08:29,832
Next, I'm going to explain three pieces of advice

96
00:08:29,896 --> 00:08:33,230
to start participating in service operation work.

97
00:08:33,840 --> 00:08:37,880
Firstly, I would advise you to look at problem reports

98
00:08:38,040 --> 00:08:41,648
even if you were not sure about them. When you see problem

99
00:08:41,734 --> 00:08:45,744
reports that you're not youre about, click link to

100
00:08:45,782 --> 00:08:49,660
them. It doesn't matter if you can to directly

101
00:08:49,740 --> 00:08:52,470
contribute to solving the problem,

102
00:08:53,160 --> 00:08:57,424
lets yourself be yourself and keep looking at incoming

103
00:08:57,472 --> 00:09:01,076
reports in a casual manner. It's a

104
00:09:01,098 --> 00:09:05,252
good idea to set a time box, in other words a time limit,

105
00:09:05,396 --> 00:09:08,712
for example 30 minutes, as too much

106
00:09:08,766 --> 00:09:12,824
time may interfere with your main work. The more you

107
00:09:12,862 --> 00:09:16,808
jump into problem reports, the more knowledge you gain about problem

108
00:09:16,894 --> 00:09:20,780
patents. The next piece of advice is to leave

109
00:09:20,850 --> 00:09:22,700
what you will learn in documents.

110
00:09:24,080 --> 00:09:27,676
After going to detail about alerts, let's create a

111
00:09:27,698 --> 00:09:30,670
blank page in an internal documentation system.

112
00:09:31,840 --> 00:09:35,456
In the case of OTwi, we use notion as a

113
00:09:35,478 --> 00:09:39,344
knowledge sharing system and use Datadoc as

114
00:09:39,382 --> 00:09:41,650
an observability platform.

115
00:09:42,440 --> 00:09:46,244
So I create a blank page in notion or sometimes create

116
00:09:46,282 --> 00:09:49,060
a new investigation note in datadoc,

117
00:09:50,120 --> 00:09:53,300
then leave what youre learned in the document.

118
00:09:53,820 --> 00:09:57,160
For example, when you have learned about the system

119
00:09:57,230 --> 00:10:00,888
architectures related to the problem, write them

120
00:10:01,054 --> 00:10:04,996
down briefly. It's also recommended to note

121
00:10:05,028 --> 00:10:08,456
any similar cases youre find that have occurred

122
00:10:08,488 --> 00:10:12,124
in the past. This will help you visualize your

123
00:10:12,162 --> 00:10:15,660
learning. Keep participating in operations

124
00:10:16,240 --> 00:10:17,980
trust is essential.

125
00:10:18,900 --> 00:10:21,952
Making your learning visible lets to

126
00:10:22,006 --> 00:10:25,376
letting your peers know how much you understand about how

127
00:10:25,398 --> 00:10:29,040
your system works and how diagnose atypical system

128
00:10:29,110 --> 00:10:33,200
behaviors. In the book 97 things every

129
00:10:33,270 --> 00:10:36,804
SLI should know, Lori Hoxtain, who is an

130
00:10:36,842 --> 00:10:40,448
engineer of Netflix, recommends watching experts

131
00:10:40,464 --> 00:10:43,716
in action. He said, in general,

132
00:10:43,818 --> 00:10:48,244
the best way to facilitate skill transfer is to watch experts

133
00:10:48,292 --> 00:10:52,970
in action. Ideally, you're working alongside them,

134
00:10:53,420 --> 00:10:56,820
watch them solve youre problems and document

135
00:10:56,900 --> 00:10:59,820
how they mitigate it to operational supplies.

136
00:11:00,720 --> 00:11:04,140
I love this idea. In my case,

137
00:11:04,290 --> 00:11:08,124
autofide workstation is remote, so if

138
00:11:08,162 --> 00:11:11,010
I don't know how my peer investigates the problem,

139
00:11:11,380 --> 00:11:14,736
I ask them on slack after it's been

140
00:11:14,918 --> 00:11:18,160
recorded and write a new document.

141
00:11:18,580 --> 00:11:22,496
The third piece of advice is to write lamb

142
00:11:22,528 --> 00:11:26,068
book. This may be a well known concept, but let

143
00:11:26,074 --> 00:11:29,792
me explain it briefly. It's a detailed

144
00:11:29,856 --> 00:11:33,392
how to guide for completing a commonly repeated

145
00:11:33,456 --> 00:11:37,690
task or procedure within a company's IT operations process.

146
00:11:38,780 --> 00:11:42,280
It guides an operator by step by step instructions.

147
00:11:42,700 --> 00:11:45,320
It's sometimes known as a playbook.

148
00:11:46,220 --> 00:11:50,092
The might for your team is that land runbooks are a

149
00:11:50,146 --> 00:11:53,932
shared waste of knowledge and expertise that

150
00:11:53,986 --> 00:11:57,592
would otherwise be kept solely in the hands of subject

151
00:11:57,656 --> 00:12:01,056
matter experts. A subject matter expert is

152
00:12:01,078 --> 00:12:05,280
a person who is an authority in a particular area or topic.

153
00:12:06,980 --> 00:12:10,592
Once you put it on, you will be able to take over

154
00:12:10,646 --> 00:12:14,132
its population. At this point, you can

155
00:12:14,186 --> 00:12:17,060
start participating in service operations.

156
00:12:18,200 --> 00:12:22,052
Writing Lambrooks will mitigate common system ant

157
00:12:22,106 --> 00:12:25,960
pattern called only brand knows

158
00:12:26,460 --> 00:12:30,360
the book operations ant patterns DevOps defines this

159
00:12:30,430 --> 00:12:34,564
ant pattern. The book said, unless purposeful

160
00:12:34,612 --> 00:12:38,704
action is taken, information tends to coalesce

161
00:12:38,852 --> 00:12:42,652
around key individuals. It makes those

162
00:12:42,706 --> 00:12:46,172
individuals incredibly valued but also

163
00:12:46,226 --> 00:12:50,064
equally burdened. Your documentation work will

164
00:12:50,102 --> 00:12:53,504
reduce the burden of experts by showing their knowledge and

165
00:12:53,542 --> 00:12:56,460
expertise. Besides,

166
00:12:56,620 --> 00:13:00,332
this is only possible because of you. The book software

167
00:13:00,396 --> 00:13:04,484
engineer at Google said like this, the first time you

168
00:13:04,522 --> 00:13:08,932
learn something is the best time to see whether the

169
00:13:08,986 --> 00:13:12,404
existing documentation and training materials can be

170
00:13:12,442 --> 00:13:16,132
improved. You are the best person to write

171
00:13:16,186 --> 00:13:20,730
a new lamb book if your team doesn't have a document about it.

172
00:13:21,340 --> 00:13:24,744
A good ram book answers these questions.

173
00:13:24,942 --> 00:13:29,052
Specifically, I would recommend you answer the

174
00:13:29,106 --> 00:13:32,060
third and fourth questions in your document.

175
00:13:33,280 --> 00:13:36,556
Regarding the third question, what dependencies does

176
00:13:36,578 --> 00:13:40,800
it have? Modern system are distributed system

177
00:13:40,950 --> 00:13:44,512
and in some cases external services are

178
00:13:44,566 --> 00:13:48,192
involved. In one case, this information is

179
00:13:48,246 --> 00:13:51,040
beneficial to understand the system architecture.

180
00:13:51,720 --> 00:13:55,492
The fourth question what

181
00:13:55,546 --> 00:13:59,252
does the infrastructure for it look like is also

182
00:13:59,306 --> 00:14:02,740
a good question to understand the system architecture.

183
00:14:03,820 --> 00:14:07,652
Writing these parts is a great opportunity to organize

184
00:14:07,716 --> 00:14:11,450
your learning and form reusable knowledge for the team.

185
00:14:12,060 --> 00:14:15,560
You may feel uncomfortable writing books because

186
00:14:15,630 --> 00:14:19,720
you don't feel you can write perfect, useful documentation

187
00:14:19,800 --> 00:14:23,400
for the team. However, the book seeking

188
00:14:23,480 --> 00:14:26,590
Sli mentioned this concern. Like this

189
00:14:27,120 --> 00:14:30,732
city first draft, an imperfect document

190
00:14:30,796 --> 00:14:34,560
is infinitely more useful than a perfect one that

191
00:14:34,630 --> 00:14:38,336
does not yet exist. You don't need to

192
00:14:38,358 --> 00:14:42,372
finalize the documentation perfectly. I would recommend you

193
00:14:42,426 --> 00:14:45,684
to be the first writer. Finally,

194
00:14:45,802 --> 00:14:49,204
let's recap three tips. First, let's look at

195
00:14:49,242 --> 00:14:52,310
problem reports, even if you are not sure about them.

196
00:14:52,680 --> 00:14:56,020
Second, leave what you will learn in the document.

197
00:14:56,920 --> 00:15:00,630
Thirdly, write one books youre for your team.

198
00:15:01,240 --> 00:15:04,928
The books and blogs mentioned in this presentation

199
00:15:05,024 --> 00:15:08,840
are listed on this guide. I hope this presentation

200
00:15:08,920 --> 00:15:12,044
will help you quite. Thank you for listening to my

201
00:15:12,082 --> 00:15:12,440
presentation.

