1
00:00:27,010 --> 00:00:30,646
Hello everyone, let's talk about Azure Cloud for

2
00:00:30,668 --> 00:00:33,350
the web front end developers.

3
00:00:33,850 --> 00:00:37,634
Microsoft's global mission is to empower

4
00:00:37,762 --> 00:00:40,934
every person and every organization on the planet to

5
00:00:40,972 --> 00:00:45,158
achieve more. And the same is absolutely applicable to

6
00:00:45,244 --> 00:00:49,078
what Azure cloud brings to web front end

7
00:00:49,164 --> 00:00:52,606
developers achieve more with less app my

8
00:00:52,628 --> 00:00:56,462
name is Maxim Salnikov. I work as a developer engagement lead at

9
00:00:56,516 --> 00:01:00,094
Microsoft Norway and let's stay connected on

10
00:01:00,132 --> 00:01:03,282
Twitter webmaxru. I fit mainly about

11
00:01:03,336 --> 00:01:07,090
web technologies, web frontend end to be precise, and about cloud

12
00:01:07,160 --> 00:01:10,898
technologies. I spent 20 plus years

13
00:01:11,064 --> 00:01:13,940
in web development myself.

14
00:01:14,630 --> 00:01:19,030
I'm big fan of the developer communities and technical

15
00:01:19,370 --> 00:01:22,726
conferences and you'll often find me on

16
00:01:22,748 --> 00:01:26,598
the stage, virtual or real, speaking about

17
00:01:26,684 --> 00:01:29,926
cloud and web. And also I do lots

18
00:01:29,958 --> 00:01:33,126
of training and blogging.

19
00:01:33,318 --> 00:01:36,826
Also what I do another side of

20
00:01:36,848 --> 00:01:40,970
my personality, I'm a hobby music producer and hobby

21
00:01:41,050 --> 00:01:44,430
DJ. Why do I ever talk about this

22
00:01:44,500 --> 00:01:48,090
side of my personality here at this technical session?

23
00:01:48,170 --> 00:01:52,174
Because this is very connected to the project I want to

24
00:01:52,292 --> 00:01:56,658
have as a demo for today. So as

25
00:01:56,824 --> 00:02:01,538
DJ and music producer I

26
00:02:01,544 --> 00:02:05,106
was missing one particular tool, counter of

27
00:02:05,288 --> 00:02:08,914
BPM bits per minute for the audio

28
00:02:08,962 --> 00:02:12,566
stream. When for example I produce some music on the fly and

29
00:02:12,588 --> 00:02:16,774
I want to mix this with some existing track, I want to have

30
00:02:16,812 --> 00:02:20,218
at least rough understanding of how fast this

31
00:02:20,304 --> 00:02:23,594
music I produce and it counts in bits per

32
00:02:23,632 --> 00:02:27,194
minute in this area. So I couldn't find

33
00:02:27,232 --> 00:02:30,140
this tool and I created the one for myself.

34
00:02:30,750 --> 00:02:34,010
And this one is purely based on

35
00:02:34,160 --> 00:02:37,834
web technology. So it works in any modern browser,

36
00:02:37,882 --> 00:02:41,582
on any operating system. There is no back

37
00:02:41,636 --> 00:02:45,054
end for core functionality. So it analyzes audio

38
00:02:45,102 --> 00:02:48,514
stream right in the browser. This is where I'm super

39
00:02:48,552 --> 00:02:52,574
excited by power of current web frontend

40
00:02:52,622 --> 00:02:56,146
technologies web APIs and what modern browsers

41
00:02:56,258 --> 00:02:59,842
can do. So it captures audio stream, it applies

42
00:02:59,906 --> 00:03:02,834
some filters and then it calculates peaks.

43
00:03:02,882 --> 00:03:05,906
So this is how we get BPM

44
00:03:06,018 --> 00:03:10,022
of the current track. And this is a progressive web

45
00:03:10,076 --> 00:03:13,478
application so you can install it if you wish.

46
00:03:13,574 --> 00:03:17,306
If you wish you can use it just as a website or

47
00:03:17,488 --> 00:03:20,450
you can install it as an application on your device.

48
00:03:20,630 --> 00:03:24,174
And of course it works offline because

49
00:03:24,212 --> 00:03:27,706
it analyzes everything straight on the particular device.

50
00:03:27,818 --> 00:03:31,278
And I even gave a name to this tool. I call this

51
00:03:31,364 --> 00:03:35,522
BPM techno created this simple logotype and

52
00:03:35,576 --> 00:03:38,850
I'm super happy with its

53
00:03:38,920 --> 00:03:42,082
functionality. So I run it on my local

54
00:03:42,136 --> 00:03:46,802
machine, localhost 3000. I do some home streaming

55
00:03:46,866 --> 00:03:51,254
and producing and I decided actually

56
00:03:51,372 --> 00:03:55,462
what's next? What's next for my tool? It works very good for me

57
00:03:55,516 --> 00:03:58,822
and no doubt this will work very good for the global

58
00:03:58,886 --> 00:04:02,746
dj and music producers community. So I want to share what I

59
00:04:02,768 --> 00:04:07,194
created with everyone on our planet who does

60
00:04:07,392 --> 00:04:09,820
similar activities like me.

61
00:04:10,350 --> 00:04:14,154
Plus I have some extra features

62
00:04:14,202 --> 00:04:18,238
on the roadmap. What I want to add to this

63
00:04:18,404 --> 00:04:21,870
tool, maybe some simple

64
00:04:21,940 --> 00:04:25,282
user account so you can track your

65
00:04:25,336 --> 00:04:28,260
stats on what kind of music do you play,

66
00:04:29,590 --> 00:04:33,650
how fast is your favorite music. So just these

67
00:04:33,720 --> 00:04:37,758
nice additions. At the same time I

68
00:04:37,864 --> 00:04:41,270
want to stay focused on what I can do,

69
00:04:41,340 --> 00:04:45,174
what I can do very well and what I love to do. This is front

70
00:04:45,212 --> 00:04:48,566
end web development. So it's Javascript frameworks,

71
00:04:48,598 --> 00:04:52,698
it's HTML CSS and all things around

72
00:04:52,784 --> 00:04:56,714
that. So to achieve my

73
00:04:56,752 --> 00:05:00,054
goals from this what's next? Statement I definitely need some

74
00:05:00,112 --> 00:05:03,610
help from the cloud providers and I decided

75
00:05:03,770 --> 00:05:07,950
to create kind of wish list from me

76
00:05:08,020 --> 00:05:11,402
as an individual web frontend developer

77
00:05:11,466 --> 00:05:14,994
to the cloud provider. And I believe the points I

78
00:05:15,032 --> 00:05:18,178
will mention now are very relevant to

79
00:05:18,344 --> 00:05:22,014
many, many web frontend developers and teams

80
00:05:22,062 --> 00:05:25,986
from small companies, medium companies and for enterprises.

81
00:05:26,098 --> 00:05:29,334
Well, the requirements are pretty much the same.

82
00:05:29,532 --> 00:05:33,510
What are these requirements? First, hosting itself.

83
00:05:33,660 --> 00:05:36,962
No doubts. It should be the fastest, it should be super reliable,

84
00:05:37,026 --> 00:05:40,634
it should just work 24/7 then if

85
00:05:40,672 --> 00:05:44,166
you talk about global community djs

86
00:05:44,198 --> 00:05:48,202
and music producers and consumers of your web frontend application

87
00:05:48,336 --> 00:05:52,062
I believe are everywhere on the planet and it makes total sense

88
00:05:52,116 --> 00:05:55,758
to have this application, my application, your application,

89
00:05:55,844 --> 00:05:58,842
hosted as close as possible to these folks.

90
00:05:58,906 --> 00:06:02,806
So we need to propagate

91
00:06:02,858 --> 00:06:06,622
this application to multiple servers in multiple countries,

92
00:06:06,686 --> 00:06:09,666
multiple continents. And that's really good idea.

93
00:06:09,848 --> 00:06:13,970
Then it's not a secret that modern web frontend applications

94
00:06:15,050 --> 00:06:18,662
are not simplest these days, right? Many of them

95
00:06:18,716 --> 00:06:22,406
are single page applications and now there is a trend to

96
00:06:22,428 --> 00:06:28,142
do server site rendering. It requires some extra configuration,

97
00:06:28,226 --> 00:06:31,578
some extra possibilities from the web server and

98
00:06:31,664 --> 00:06:35,958
it should be supported by my dream hoster

99
00:06:36,054 --> 00:06:39,750
company. Next custom domains

100
00:06:39,830 --> 00:06:43,162
definitely you want to provide custom domain for your tool.

101
00:06:43,216 --> 00:06:45,166
I registered domain for myself.

102
00:06:45,268 --> 00:06:48,894
Bpmtech no, in norwegian top

103
00:06:48,932 --> 00:06:52,702
level domain zone. This is absolutely a must

104
00:06:52,756 --> 00:06:56,462
have and the same must have is serving

105
00:06:56,526 --> 00:07:00,018
under HTTPs and it's nice to get

106
00:07:00,104 --> 00:07:03,634
free SSL certificate if

107
00:07:03,672 --> 00:07:05,410
we talk about deployment.

108
00:07:07,290 --> 00:07:11,238
Modern web front end applications are something

109
00:07:11,324 --> 00:07:15,206
that you update quite often,

110
00:07:15,308 --> 00:07:18,806
right? So many companies have daily

111
00:07:18,838 --> 00:07:22,700
deployments or even multiple times per day. This is how

112
00:07:24,510 --> 00:07:28,246
modern flow works, right? And I as a web frontend

113
00:07:28,278 --> 00:07:31,450
developer would like to spend less efforts

114
00:07:31,530 --> 00:07:36,314
on these parts. Maybe later I will learn deeper

115
00:07:36,362 --> 00:07:39,934
about DevOps, about deployments, but not

116
00:07:39,972 --> 00:07:44,030
now. Now I want to focus myself on web frontend development

117
00:07:44,190 --> 00:07:48,190
and also I want to get staging environments

118
00:07:48,270 --> 00:07:53,374
for the case before publishing

119
00:07:53,422 --> 00:07:56,706
a new version to my, let's say main domain.

120
00:07:56,818 --> 00:07:59,240
I want to test it,

121
00:08:00,170 --> 00:08:04,114
maybe to apply some end to end testing integration tests

122
00:08:04,242 --> 00:08:08,022
or maybe just to show my friends and gather their opinions on

123
00:08:08,156 --> 00:08:11,546
this or that new feature. So I

124
00:08:11,568 --> 00:08:15,418
want to have this staging environment or test environment, you name it,

125
00:08:15,584 --> 00:08:19,130
without any effort from my side. So I want to stay currently

126
00:08:19,200 --> 00:08:22,654
as a web frontend developer, not DevOps engineer. At the same time

127
00:08:22,692 --> 00:08:26,640
I want to get all these features. Then I

128
00:08:27,490 --> 00:08:31,146
told you that I have some simple roadmap

129
00:08:31,258 --> 00:08:34,674
for this application. In particular I want

130
00:08:34,712 --> 00:08:39,358
to create couple of API endpoints for example for letting

131
00:08:39,454 --> 00:08:43,570
people possibility to vote was this

132
00:08:43,640 --> 00:08:48,518
detection good or not? Just simple down

133
00:08:48,604 --> 00:08:52,518
and I want to gather this data in

134
00:08:52,524 --> 00:08:56,438
the database somewhere. And also if we talk about

135
00:08:56,524 --> 00:08:59,370
gathering stats for a particular user,

136
00:09:01,310 --> 00:09:04,870
we start the discussion from any kind of authentication,

137
00:09:04,950 --> 00:09:08,586
right? So providing user account where

138
00:09:08,608 --> 00:09:11,070
you can log in and check your stats.

139
00:09:12,530 --> 00:09:16,000
I can definitely implement it myself using

140
00:09:16,850 --> 00:09:21,310
OpenID, connect and other authentication

141
00:09:21,890 --> 00:09:25,682
mechanics. But if I can get help from

142
00:09:25,816 --> 00:09:29,170
hoster from the cloud, this is always better,

143
00:09:29,240 --> 00:09:33,390
right? Like less efforts needed to implement at least authentication

144
00:09:33,470 --> 00:09:37,074
flow. I don't want to create this login

145
00:09:37,122 --> 00:09:41,062
screen, reset, password screen, et cetera and all code,

146
00:09:41,196 --> 00:09:46,226
all the logic behind it. I'm completely fine with authentication

147
00:09:46,338 --> 00:09:49,930
via third party providers, for example GitHub or Twitter or something

148
00:09:50,000 --> 00:09:53,562
like this. And after

149
00:09:53,616 --> 00:09:56,822
all, if we talk about testing

150
00:09:56,886 --> 00:10:00,150
API endpoints and especially testing authentication,

151
00:10:00,310 --> 00:10:06,790
it's sometimes quite challenging to recreate

152
00:10:06,870 --> 00:10:10,142
the environment on my local machine. But I want to

153
00:10:10,196 --> 00:10:14,322
develop, I want to build my application at home using

154
00:10:14,376 --> 00:10:17,634
my local machine, maybe even without Internet connection. So I

155
00:10:17,672 --> 00:10:21,422
need some tools to help me with mimicking

156
00:10:21,486 --> 00:10:25,542
this environment if we talk about some

157
00:10:25,596 --> 00:10:28,806
extra features. Last but not least,

158
00:10:28,988 --> 00:10:32,230
I myself talk about my

159
00:10:32,300 --> 00:10:36,166
hobby project. So I invest some spare time

160
00:10:36,348 --> 00:10:39,470
into this. I invest some evenings

161
00:10:39,570 --> 00:10:42,938
to build this tool, but I don't want to invest dollars,

162
00:10:43,024 --> 00:10:46,374
right? At least now I don't have any plans

163
00:10:46,422 --> 00:10:49,546
to commercialize this and do. I don't want

164
00:10:49,568 --> 00:10:53,146
to spend too much money on that project. So I registered

165
00:10:53,178 --> 00:10:57,518
domain and maybe this is my only investment so far. That means

166
00:10:57,684 --> 00:11:01,182
I need a good free tier from the

167
00:11:01,236 --> 00:11:04,340
cloud provider for my web frontend application.

168
00:11:05,510 --> 00:11:09,022
And you know folks, such cloud provider exists.

169
00:11:09,166 --> 00:11:12,654
It's delivered by Azure

170
00:11:12,702 --> 00:11:16,594
cloud and called static web apps. I'm proud

171
00:11:16,642 --> 00:11:20,566
to take some part in building

172
00:11:20,668 --> 00:11:23,894
this service for web frontend developers so I

173
00:11:23,932 --> 00:11:28,138
provided my feedback. I took part in

174
00:11:28,304 --> 00:11:31,434
architecting some of the pieces of this

175
00:11:31,552 --> 00:11:34,762
service so I started with this service.

176
00:11:34,896 --> 00:11:38,954
I am super happy with what it brings to

177
00:11:38,992 --> 00:11:42,526
me as to web frontend developer and I

178
00:11:42,548 --> 00:11:45,822
definitely want to share my knowledge with

179
00:11:45,876 --> 00:11:49,646
you. So you can start and you can use all the benefits

180
00:11:49,748 --> 00:11:52,946
of Azure static web app. Okay,

181
00:11:53,048 --> 00:11:56,420
how to start? That's very simple,

182
00:11:57,830 --> 00:12:01,506
multiple options. But I decided to

183
00:12:01,528 --> 00:12:05,554
list two of them on this slide. Maybe the simplest

184
00:12:05,602 --> 00:12:09,302
one for you to install extension for vs code.

185
00:12:09,356 --> 00:12:13,058
Of course, if you use vs code as your main code editor,

186
00:12:13,154 --> 00:12:16,726
many developers do so install

187
00:12:16,828 --> 00:12:20,506
the extension called Azure Static web app. You will find this

188
00:12:20,608 --> 00:12:24,474
super easily open your web frontend

189
00:12:24,592 --> 00:12:28,294
project. Maybe it's created using react or angular

190
00:12:28,342 --> 00:12:31,886
or vue swelter, whatever your own framework without framework at

191
00:12:31,908 --> 00:12:35,646
all. Just open this folder and click plus button.

192
00:12:35,748 --> 00:12:40,000
Create static web app and then you'll follow some

193
00:12:40,370 --> 00:12:44,130
mini wizards to complete the steps. And the same

194
00:12:44,280 --> 00:12:47,854
flow is when you use Azure

195
00:12:47,902 --> 00:12:51,458
portal to achieve the same. So you just create new resource called

196
00:12:51,544 --> 00:12:54,980
Azure static web apps. So what

197
00:12:55,530 --> 00:12:58,914
questions you will answer before the flow

198
00:12:58,962 --> 00:13:03,202
will be completed. First, it all starts with source

199
00:13:03,266 --> 00:13:07,446
code repo. Well it's not a secret that I

200
00:13:07,468 --> 00:13:11,446
believe, I hope that vast majority of developers,

201
00:13:11,558 --> 00:13:14,730
any kind of developers, store their code

202
00:13:14,880 --> 00:13:19,434
not just as a file on their machines, but as

203
00:13:19,472 --> 00:13:23,226
a source in kind of source

204
00:13:23,258 --> 00:13:26,922
code repository. Maybe git is the mainstream.

205
00:13:26,986 --> 00:13:30,730
So if you have your code hosted,

206
00:13:30,810 --> 00:13:34,562
for example on GitHub you are good to go. So you point to this

207
00:13:34,616 --> 00:13:38,018
code repository, then you confirm a

208
00:13:38,024 --> 00:13:41,538
few points of the configuration about your application where

209
00:13:41,624 --> 00:13:44,986
your frontend code is resizing. Is it a root

210
00:13:45,038 --> 00:13:48,134
folder of the repo or maybe some subfolder? If you

211
00:13:48,172 --> 00:13:51,346
for example use mono repo approach

212
00:13:51,458 --> 00:13:55,026
then you point to build artifacts folder

213
00:13:55,138 --> 00:13:58,822
where the resulting set

214
00:13:58,876 --> 00:14:03,174
of resources after you build your web

215
00:14:03,212 --> 00:14:06,714
frontend application is located. For example for react this

216
00:14:06,752 --> 00:14:10,102
is folder called build. And then you

217
00:14:10,176 --> 00:14:13,646
count three, two, one, maybe a bit longer.

218
00:14:13,748 --> 00:14:17,534
If you have quite complex build flow and

219
00:14:17,732 --> 00:14:21,280
automatically your application is online,

220
00:14:22,390 --> 00:14:25,966
you will immediately receive test hostname,

221
00:14:25,998 --> 00:14:29,220
test domain name, couple of random words,

222
00:14:30,390 --> 00:14:33,906
Azure staticapps. Net something like this. So good to

223
00:14:33,928 --> 00:14:37,414
start with. Of course then you can connect your custom domain and

224
00:14:37,532 --> 00:14:41,234
yeah, your application is distributed over multiple

225
00:14:41,282 --> 00:14:44,514
data centers, multiple locations, multiple continents.

226
00:14:44,642 --> 00:14:48,098
Isn't that cool? So it was the start flow.

227
00:14:48,194 --> 00:14:51,298
Now how to deploy a new version,

228
00:14:51,394 --> 00:14:55,530
right? So you created this Azure static web apps resource and

229
00:14:55,600 --> 00:14:59,034
immediately you found for example bug in your

230
00:14:59,072 --> 00:15:02,590
application and you want to deploy a new version.

231
00:15:03,730 --> 00:15:08,158
Which steps do you need to go from building

232
00:15:08,244 --> 00:15:13,022
your code to having the new version deployed

233
00:15:13,086 --> 00:15:16,994
globally? First step code like

234
00:15:17,032 --> 00:15:20,914
fix your bug or add new feature and push it

235
00:15:20,952 --> 00:15:24,130
to your source code repository.

236
00:15:24,550 --> 00:15:28,262
That's it. And you know folks, there is no step number two,

237
00:15:28,316 --> 00:15:32,358
this is only thing you need to do. Basically no

238
00:15:32,444 --> 00:15:36,322
extra movements except your regular development

239
00:15:36,386 --> 00:15:39,958
flow, right? So you create a new code, you push it to the repo,

240
00:15:40,054 --> 00:15:44,298
then Azure static web apps together with

241
00:15:44,464 --> 00:15:48,458
GitHub actions where your source code is located will

242
00:15:48,544 --> 00:15:52,430
take care of the rest. Of course, under the hood many

243
00:15:52,500 --> 00:15:55,550
things are happening for you after

244
00:15:55,620 --> 00:15:59,102
you merged your code to your main branch or

245
00:15:59,156 --> 00:16:02,522
the branch you specified as the branch to

246
00:16:02,596 --> 00:16:05,970
monitor when you created Azure static web apps resource.

247
00:16:06,870 --> 00:16:10,834
Well, GitHub is taking control if

248
00:16:10,872 --> 00:16:14,580
we talk about your repo hosted on GitHub. Of course,

249
00:16:15,770 --> 00:16:19,042
maybe you heard that GitHub has awesome CI CD

250
00:16:19,106 --> 00:16:22,614
tools called GitHub actions. So this

251
00:16:22,652 --> 00:16:27,762
is where all the magic happens on recreating

252
00:16:27,826 --> 00:16:30,300
environments for your application,

253
00:16:30,910 --> 00:16:34,666
installation of modules from NPM and

254
00:16:34,768 --> 00:16:36,860
after all the build itself,

255
00:16:38,190 --> 00:16:41,742
by default it's just NPm run build. Or you can provide

256
00:16:41,796 --> 00:16:46,174
your custom comment. If you use some

257
00:16:46,212 --> 00:16:49,882
different comment then GitHub

258
00:16:49,946 --> 00:16:53,582
actions has the set of build artifacts.

259
00:16:53,646 --> 00:16:57,202
Well for many front end web applications this will be something

260
00:16:57,256 --> 00:17:00,702
like index HTML, main javascript bundle,

261
00:17:00,766 --> 00:17:04,414
main CSS bundle and yeah, it just copies

262
00:17:04,462 --> 00:17:08,678
this over multiple data centers. And if you are using

263
00:17:08,764 --> 00:17:12,150
not GitHub but Azure

264
00:17:12,970 --> 00:17:16,342
services for storing your source code,

265
00:17:16,396 --> 00:17:19,834
that's also absolutely possible to set up

266
00:17:19,952 --> 00:17:23,638
same flow for Azure repos and Azure

267
00:17:23,734 --> 00:17:27,034
pipelines. What will it

268
00:17:27,072 --> 00:17:30,814
take from you to develop your

269
00:17:30,852 --> 00:17:34,558
application locally? Well, we have

270
00:17:34,644 --> 00:17:36,880
also helper for this,

271
00:17:37,810 --> 00:17:41,054
also called Azure static web

272
00:17:41,092 --> 00:17:45,118
apps CLI command line interface this is optional,

273
00:17:45,214 --> 00:17:49,202
but I strongly recommend you to use this tool just

274
00:17:49,256 --> 00:17:53,122
to recreate complete environment like we have

275
00:17:53,176 --> 00:17:56,886
on the cloud, but on your local machine. This will help you a

276
00:17:56,908 --> 00:18:00,486
lot in emulating all

277
00:18:00,668 --> 00:18:05,570
API endpoints, all things around authentication.

278
00:18:05,650 --> 00:18:09,786
And after all this is just a nice static web server for

279
00:18:09,968 --> 00:18:13,750
you to help to debug and test your web frontend

280
00:18:13,830 --> 00:18:17,206
application. So how to start with Azure

281
00:18:17,238 --> 00:18:20,574
static web app Cli? Well classic, you just

282
00:18:20,692 --> 00:18:23,790
go and install corresponding package. I strongly recommend

283
00:18:23,860 --> 00:18:27,502
you to install it globally and then you will have

284
00:18:27,636 --> 00:18:30,702
SWA command available for you where

285
00:18:30,756 --> 00:18:36,670
you provide a few parameters to configure

286
00:18:36,750 --> 00:18:39,682
this comment for your particular application.

287
00:18:39,816 --> 00:18:43,266
Of course every frontend application is different,

288
00:18:43,448 --> 00:18:46,882
right? Has its own settings,

289
00:18:46,946 --> 00:18:50,678
but if we talk about very

290
00:18:50,764 --> 00:18:54,262
generic react application created by CRA

291
00:18:54,396 --> 00:18:58,026
create React app library, the comment will look something like

292
00:18:58,048 --> 00:19:02,010
that. Swa start and then you point to your

293
00:19:02,080 --> 00:19:05,722
dev server and then point to comment which

294
00:19:05,776 --> 00:19:09,894
you use to start the application and API

295
00:19:09,942 --> 00:19:13,422
folder. So this one single comment starts pretty

296
00:19:13,476 --> 00:19:16,590
much everything on your local machine.

297
00:19:17,330 --> 00:19:21,262
Now demo time, let's have a quick demo of

298
00:19:21,396 --> 00:19:25,106
the application I mentioned and I built

299
00:19:25,208 --> 00:19:28,610
myself called BPM

300
00:19:29,190 --> 00:19:33,522
techno which counts BPM. So let me

301
00:19:33,656 --> 00:19:37,314
open this online. It's located at

302
00:19:37,432 --> 00:19:41,160
bpmtech ino. Please feel free to use this application.

303
00:19:41,770 --> 00:19:45,094
It's in production and it just works.

304
00:19:45,212 --> 00:19:47,430
So I will start listening.

305
00:19:48,670 --> 00:19:52,506
So now it listens microphone on

306
00:19:52,528 --> 00:19:56,314
my machine via the browser and you

307
00:19:56,352 --> 00:19:59,654
see the spectrum analyzer is working and it tries

308
00:19:59,702 --> 00:20:03,242
to calculate Bpm of my narrative

309
00:20:03,306 --> 00:20:05,854
which has no sense of course,

310
00:20:06,052 --> 00:20:09,562
but if we clap, you see there are quite visible peaks

311
00:20:09,626 --> 00:20:13,274
and I even have sample demo file

312
00:20:13,402 --> 00:20:17,102
with a track I created. Let's listen

313
00:20:17,156 --> 00:20:20,894
this and let's make sure that BPM was

314
00:20:20,932 --> 00:20:22,110
detected correctly.

315
00:20:25,530 --> 00:20:31,400
Volume up frontend

316
00:20:44,590 --> 00:20:50,074
yes, after some stabilization it

317
00:20:50,112 --> 00:20:54,014
displays 120. Now it measures my voice again and

318
00:20:54,052 --> 00:20:57,150
this was correct. Bpm. This is BPM I created this track

319
00:20:57,300 --> 00:21:01,562
with and I can give thumbs

320
00:21:01,626 --> 00:21:05,518
up and this triggers API endpoint

321
00:21:05,694 --> 00:21:09,966
I have as a part of this application. Code wise

322
00:21:10,078 --> 00:21:13,938
this is classic react application

323
00:21:14,104 --> 00:21:17,666
and to make it working with azure static web apps

324
00:21:17,698 --> 00:21:21,286
we just need to provide build command. So you

325
00:21:21,308 --> 00:21:24,534
see this on your screen

326
00:21:24,652 --> 00:21:28,214
now build and no exotic,

327
00:21:28,262 --> 00:21:32,380
just a react application plus service worker to make it working

328
00:21:32,910 --> 00:21:36,858
offline. Also I want to show you this

329
00:21:36,944 --> 00:21:40,478
file which was created automatically right after

330
00:21:40,564 --> 00:21:45,882
I connected this resource to static

331
00:21:45,946 --> 00:21:49,120
web app service. This is

332
00:21:50,210 --> 00:21:52,910
workflow file for GitHub actions.

333
00:21:53,510 --> 00:21:57,826
So this file will appear on your GitHub account in

334
00:21:57,848 --> 00:22:02,082
your source code repository after

335
00:22:02,216 --> 00:22:04,986
you did this configuration.

336
00:22:05,118 --> 00:22:09,398
And there is no need to learn

337
00:22:09,484 --> 00:22:13,666
what's going on here, at least for the beginning.

338
00:22:13,778 --> 00:22:17,506
I mean you don't have to explore all

339
00:22:17,548 --> 00:22:21,718
the details of this file. This is what GitHub actions

340
00:22:21,814 --> 00:22:25,542
will do on every push to the source

341
00:22:25,606 --> 00:22:29,114
code repo and it basically builds your

342
00:22:29,152 --> 00:22:32,762
application and you can fine tune some parameters

343
00:22:32,826 --> 00:22:36,670
here if you wish, if needed, if you want to customize this flow.

344
00:22:38,050 --> 00:22:41,326
Yeah, so it was created automatically for

345
00:22:41,428 --> 00:22:44,770
you to save some time. I will not

346
00:22:44,840 --> 00:22:47,998
go through all the details

347
00:22:48,094 --> 00:22:51,742
about my application and the features it uses

348
00:22:51,806 --> 00:22:55,570
from Azure static web apps functionality.

349
00:22:56,410 --> 00:23:00,162
Please feel free to explore this GitHub

350
00:23:00,226 --> 00:23:03,350
repo. I will give you a link in just a few

351
00:23:03,420 --> 00:23:07,000
seconds. It contains pretty much

352
00:23:07,630 --> 00:23:11,962
end to end journey from how to build

353
00:23:12,096 --> 00:23:15,946
your Azure static web app or how

354
00:23:15,968 --> 00:23:20,782
to create this resource out of your web frontend project to all

355
00:23:20,916 --> 00:23:24,270
more or lets core functions,

356
00:23:25,090 --> 00:23:29,290
staging environments, authentication functions

357
00:23:29,450 --> 00:23:33,170
in form of API endpoints I have here. So you'll find

358
00:23:33,240 --> 00:23:36,926
all the explanations on this GitHub repo.

359
00:23:37,038 --> 00:23:42,098
Now I'll go back to my slides because

360
00:23:42,184 --> 00:23:45,622
I want to explain one last thing,

361
00:23:45,676 --> 00:23:49,190
how to continue learning about this interesting service.

362
00:23:49,340 --> 00:23:53,122
Well, we have awesome resource called Microsoft.

363
00:23:53,186 --> 00:23:58,710
Learn where you will find guides

364
00:23:58,790 --> 00:24:03,306
from scratch, from zero to hero, how to complete

365
00:24:03,408 --> 00:24:06,678
this or that task using Azure static web app.

366
00:24:06,774 --> 00:24:10,066
Of course, we have very well written

367
00:24:10,118 --> 00:24:13,898
documentation on every single piece of functionality of Azure

368
00:24:13,914 --> 00:24:17,374
static web app, every single method. And this is

369
00:24:17,412 --> 00:24:20,782
a link to my demo itself. Please feel

370
00:24:20,836 --> 00:24:23,870
free to use it, to fork it,

371
00:24:23,940 --> 00:24:27,630
to edit it, to send some issues

372
00:24:27,700 --> 00:24:31,182
to me. Yeah, do whatever you want. This is open

373
00:24:31,236 --> 00:24:36,150
source and a reminder that it includes includes

374
00:24:36,490 --> 00:24:39,894
really detailed demo of all Azure static web

375
00:24:39,932 --> 00:24:43,446
apps functions. That's pretty much it from my side.

376
00:24:43,548 --> 00:24:47,014
Let's stay connected on LinkedIn and Twitter. And thank

377
00:24:47,052 --> 00:24:49,126
you very much. Maxim Salnikov was with.

