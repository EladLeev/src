1
00:00:23,170 --> 00:00:26,694
Hello everyone, my name is Vladi. Today we'll talk about why and how top

2
00:00:26,732 --> 00:00:30,542
performing apps like Figma Notion have leveraged the power of real time

3
00:00:30,596 --> 00:00:33,934
collaboration and give you a quick overview of how you can also

4
00:00:33,972 --> 00:00:37,022
make your Nodejs apps collaborative very quickly

5
00:00:37,156 --> 00:00:39,870
and with a lean and open source tech tag.

6
00:00:40,210 --> 00:00:43,714
When I think of modern applications, I have certain expectations in

7
00:00:43,752 --> 00:00:48,226
mind. More specifically, in the formula for creating a modern application,

8
00:00:48,408 --> 00:00:52,018
I would expect to add certain ingredients. For example,

9
00:00:52,184 --> 00:00:55,406
the application would need to be instantly available anywhere

10
00:00:55,438 --> 00:00:59,538
in the world, accessible via the web browser or your mobile device,

11
00:00:59,714 --> 00:01:03,286
optimized for user experience, making it effortless to perform the

12
00:01:03,308 --> 00:01:07,206
task you want to complete. And for those of us who work in distributed

13
00:01:07,238 --> 00:01:10,566
teams, whether because of geographic distribution,

14
00:01:10,678 --> 00:01:14,326
preferred work install, or because of the size of your organization,

15
00:01:14,518 --> 00:01:17,638
you may also expect to see other functionalities,

16
00:01:17,814 --> 00:01:21,086
the ability to share your work with your team, the ability to

17
00:01:21,108 --> 00:01:24,926
get direct feedback without switching to another app, and the

18
00:01:24,948 --> 00:01:27,520
ability to collaborative on the same project.

19
00:01:28,290 --> 00:01:31,890
It's surprising that not all of these expectations are being met

20
00:01:31,960 --> 00:01:34,020
by modern applications today,

21
00:01:34,710 --> 00:01:38,754
especially when it comes to collaboration and

22
00:01:38,792 --> 00:01:42,754
especially knowing that the capabilities are out there and they have

23
00:01:42,792 --> 00:01:46,354
been an integral part, for example, of the gaming industry for several

24
00:01:46,402 --> 00:01:50,070
years. Before I continue a quick introduction

25
00:01:50,490 --> 00:01:53,218
I'm the community director for multiplayer.

26
00:01:53,314 --> 00:01:56,694
My background is in community building and customer service in the tech

27
00:01:56,732 --> 00:02:00,134
space, and I was fortunate to work for other user centric

28
00:02:00,182 --> 00:02:03,370
companies like Prisma and MongoDB in my previous roles.

29
00:02:03,710 --> 00:02:07,446
I hope I don't disappoint too many of you when I say that multiplayer

30
00:02:07,478 --> 00:02:11,338
is not an MMORPG, a massively multiplayer online role

31
00:02:11,354 --> 00:02:15,418
playing game. Multiplayer is a collaborative SaaS platform that aims

32
00:02:15,434 --> 00:02:19,114
to support teams working on large scale or complex distributed

33
00:02:19,162 --> 00:02:22,762
systems with numerous components, interactions and dependencies

34
00:02:22,826 --> 00:02:27,254
to effortlessly align within their team and with other stakeholders PMS

35
00:02:27,322 --> 00:02:31,010
Ops QA on how to visualize, design and manage

36
00:02:31,080 --> 00:02:34,702
those systems. This need for effortless

37
00:02:34,766 --> 00:02:38,386
alignment real time visual collaboration is so important to

38
00:02:38,408 --> 00:02:42,326
us that even inspired our name, and it led us to spend a

39
00:02:42,348 --> 00:02:46,086
lot of time researching, investigating and trying out how

40
00:02:46,108 --> 00:02:49,386
to build collaborative features in our app using a

41
00:02:49,408 --> 00:02:52,282
lean and OSS focused tech stack. Today,

42
00:02:52,336 --> 00:02:56,294
I wanted to share our experience and learnings in adding real time collaborative

43
00:02:56,342 --> 00:02:59,686
features and maybe spark some ideas on how you can also

44
00:02:59,728 --> 00:03:02,350
add these features to your own apps.

45
00:03:03,410 --> 00:03:07,134
Real time collaboration is now table stakes, and that's also due to the

46
00:03:07,172 --> 00:03:10,862
benefits it brings to the user experience. Think back

47
00:03:10,916 --> 00:03:14,930
of how teams used to work. Everyone worked individually on the same project

48
00:03:15,000 --> 00:03:18,834
but in silos and then they would exchange that

49
00:03:18,872 --> 00:03:22,530
project file back and forth with their individual additions and changes,

50
00:03:22,680 --> 00:03:26,646
and somebody would have the dubious pleasure of reconciling, if at

51
00:03:26,668 --> 00:03:30,390
all possible, the work of the entire team and producing the

52
00:03:30,460 --> 00:03:34,594
final, final version of the document. Now compare

53
00:03:34,642 --> 00:03:38,362
that to the experience of working together in a single shared space,

54
00:03:38,496 --> 00:03:41,866
side by side, virtually using a common language and

55
00:03:41,888 --> 00:03:45,222
framework, you can align, communicate, and drive consensus

56
00:03:45,286 --> 00:03:48,966
effortlessly. It's not a coincidence that Figma

57
00:03:48,998 --> 00:03:52,906
Miro canva notion, et cetera, have been so popular and successful

58
00:03:52,938 --> 00:03:56,762
in the past few years. And beyond them, many SaaS businesses,

59
00:03:56,826 --> 00:04:00,122
even companies that haven't traditionally thought of themselves as collaboration

60
00:04:00,186 --> 00:04:03,378
first, have embraced this trend. In fact,

61
00:04:03,464 --> 00:04:07,314
besides empowering, effortless team collaboration, another big

62
00:04:07,352 --> 00:04:10,974
benefit of collaborative products is that they are viability machines.

63
00:04:11,022 --> 00:04:15,058
For businesses, the ability to invite and involve

64
00:04:15,154 --> 00:04:18,422
more stakeholders in a project ensures, one,

65
00:04:18,556 --> 00:04:21,702
that more users use your product, and two, a higher

66
00:04:21,756 --> 00:04:25,154
adoption and retention rate, because when distributed

67
00:04:25,202 --> 00:04:29,446
teams are able to achieve more together, your software becomes

68
00:04:29,478 --> 00:04:33,434
a key part of how they work. So let's start

69
00:04:33,472 --> 00:04:37,130
by pinning down a bit better what we mean when we say

70
00:04:37,200 --> 00:04:40,702
real time collaborative tech there have been

71
00:04:40,756 --> 00:04:43,802
many attempts to coin a term to describe this trend,

72
00:04:43,946 --> 00:04:47,726
including multiplayer collaboration with a lowercase m,

73
00:04:47,908 --> 00:04:50,910
deep collaboration, and collaborative enterprise.

74
00:04:51,410 --> 00:04:55,202
We consider an application to be real time collaborative when it has

75
00:04:55,256 --> 00:04:58,754
these four functionalities. The first one is real

76
00:04:58,792 --> 00:05:02,162
time updates. A change made by one user must

77
00:05:02,216 --> 00:05:05,438
propagate to all other users instantly or as

78
00:05:05,464 --> 00:05:07,990
near as instant as the Internet allows.

79
00:05:08,490 --> 00:05:11,686
Like playback, each user should be able to watch in

80
00:05:11,708 --> 00:05:15,110
real time precisely what their collaborators see on their side,

81
00:05:15,260 --> 00:05:19,340
right down to watching each person's cursor move about their screen

82
00:05:19,870 --> 00:05:23,626
presence and status. So have an easy way

83
00:05:23,648 --> 00:05:26,778
to see who is online and available to work.

84
00:05:26,944 --> 00:05:31,070
And the final one is data integrity.

85
00:05:31,410 --> 00:05:35,134
With data and changes coming in from multiple people at once,

86
00:05:35,252 --> 00:05:38,794
there is a risk of conflict. And preventing data loss

87
00:05:38,842 --> 00:05:42,158
from conflicts is both a UX and a backend challenge,

88
00:05:42,254 --> 00:05:44,210
as we'll see in this presentation.

89
00:05:45,590 --> 00:05:48,926
Now that we have aligned on the definition,

90
00:05:49,038 --> 00:05:52,270
let's talk about how you would go about concretely

91
00:05:52,350 --> 00:05:55,320
building a real time collaborative product.

92
00:05:56,570 --> 00:06:00,146
So the first approach that might come to mind is to extend

93
00:06:00,178 --> 00:06:03,766
an existing restful API and simply broadcast requests and

94
00:06:03,788 --> 00:06:07,330
response messages to all connected clients using websockets.

95
00:06:07,490 --> 00:06:11,542
This works fine for changes that don't conflict. For example, both clients

96
00:06:11,606 --> 00:06:15,482
agree on the logo design, but it leads to bad things

97
00:06:15,536 --> 00:06:19,082
when multiple clients try to change the same thing at the same

98
00:06:19,136 --> 00:06:22,266
time, for example, they want to propose different logo

99
00:06:22,298 --> 00:06:25,726
designs. As another example, imagine typing in

100
00:06:25,748 --> 00:06:29,802
a document, but the words show up out of order or individual characters

101
00:06:29,866 --> 00:06:33,426
are in odd places. That's because more than

102
00:06:33,448 --> 00:06:36,946
one person is typing in the same place on the document at

103
00:06:36,968 --> 00:06:40,974
the same time, but you don't have good conflict resolution strategies,

104
00:06:41,102 --> 00:06:45,182
and indeed, handling concurrent editing in a multi user environment

105
00:06:45,246 --> 00:06:47,830
gracefully is very challenging.

106
00:06:48,250 --> 00:06:51,926
In order to merge conflicting changes in a way that makes sense to the

107
00:06:51,948 --> 00:06:55,174
end users, you have to share not just the value

108
00:06:55,212 --> 00:06:59,030
of the change, but the context of the data and the state of the client

109
00:06:59,110 --> 00:07:02,586
making the change. Luckily, there are

110
00:07:02,608 --> 00:07:06,282
some great technologies that come to the rescue. The first one

111
00:07:06,336 --> 00:07:10,202
is operational transformations ots, the second

112
00:07:10,256 --> 00:07:13,770
one conflict free replicated data types crdts,

113
00:07:13,850 --> 00:07:17,662
among others. Operational transformations are

114
00:07:17,716 --> 00:07:21,294
an algorithm for the transformation of operations such that

115
00:07:21,332 --> 00:07:25,118
they can be applied to documents whose state have diverged,

116
00:07:25,214 --> 00:07:28,766
bringing them both back to the same state and conflict

117
00:07:28,798 --> 00:07:31,966
for you by packet data types as the name suggests,

118
00:07:32,078 --> 00:07:35,874
provide several data types for handling changes and resolving conflicts

119
00:07:35,922 --> 00:07:39,960
from multiple clients operating the same data at same time.

120
00:07:40,330 --> 00:07:43,490
And to be clear, you could still use websockets,

121
00:07:43,570 --> 00:07:46,778
but it's just a lot more work and time. Also,

122
00:07:46,864 --> 00:07:50,682
depending on your problem space and the desired behavior for different

123
00:07:50,736 --> 00:07:54,614
states, you may find that you'll need a custom approach inspired

124
00:07:54,662 --> 00:07:58,218
by these two traditional methods. For example,

125
00:07:58,384 --> 00:08:01,982
if you're a startup and value the ability to ship features quickly.

126
00:08:02,116 --> 00:08:05,566
Ots the technology used for Google Docs might

127
00:08:05,588 --> 00:08:09,134
be too complex. Likewise, you might get inspired by

128
00:08:09,172 --> 00:08:12,350
multiple separate crdts and use them to create the final

129
00:08:12,420 --> 00:08:15,678
data structure that best represents your document.

130
00:08:15,854 --> 00:08:18,882
Similar to the approach that figma took today,

131
00:08:18,936 --> 00:08:22,834
we will focus on the technology that we use at multiplayer and

132
00:08:22,872 --> 00:08:26,402
that we feel offers the simplest, fastest, and most powerful approach

133
00:08:26,466 --> 00:08:30,902
to implementing collaborative features. CRDTs There

134
00:08:30,956 --> 00:08:35,570
are two approaches to CRDTs operation based CRDTS

135
00:08:35,650 --> 00:08:39,610
or commutative replicated data types and state based

136
00:08:39,680 --> 00:08:43,062
CRDTS convergent replicated data types.

137
00:08:43,206 --> 00:08:46,358
Both can provide strong eventual consistency,

138
00:08:46,534 --> 00:08:49,786
and this means that even if clients drift because of short term

139
00:08:49,818 --> 00:08:53,470
connection issues or suffer from high latency, the data

140
00:08:53,540 --> 00:08:57,760
on all connected clients will eventually resolve to the same final state.

141
00:08:58,210 --> 00:09:02,146
CRDTs are really a collection of simple algorithms such

142
00:09:02,168 --> 00:09:06,542
as last write of win registers grow only counters positive

143
00:09:06,606 --> 00:09:10,130
negative counters grow only sets two phase sets

144
00:09:10,870 --> 00:09:13,540
sequence CRDTs, among others.

145
00:09:14,810 --> 00:09:18,518
We chose a popular OSS CRDT implementation called

146
00:09:18,604 --> 00:09:22,162
js. It provides data structures like docs

147
00:09:22,226 --> 00:09:26,102
maps and arrays that map easily to regular JavaScript data

148
00:09:26,156 --> 00:09:30,198
types. So when we designed our app, we didn't need to radically

149
00:09:30,294 --> 00:09:33,594
refactor things to use js. There are

150
00:09:33,632 --> 00:09:37,354
also other benefits to yJs. It has a huge number of

151
00:09:37,392 --> 00:09:41,514
ready open source integrations, code editors, whiteboard apps,

152
00:09:41,642 --> 00:09:45,146
rich text editors any data structure

153
00:09:45,178 --> 00:09:48,026
can be supported with YJs shared types.

154
00:09:48,138 --> 00:09:51,886
It allows also for painless client reconnect without losing

155
00:09:51,918 --> 00:09:55,330
client progress. It's network agnostic,

156
00:09:55,670 --> 00:09:59,346
very easy to use awareness features out of the box, and it

157
00:09:59,368 --> 00:10:02,754
also has a very big community. One thing

158
00:10:02,792 --> 00:10:06,394
to keep in mind is that using CRDTs and YGs

159
00:10:06,462 --> 00:10:09,958
isn't just about data types. You also need to

160
00:10:09,964 --> 00:10:13,318
think about your system architecture. It's possible

161
00:10:13,404 --> 00:10:17,798
to use CRDTs in a peer to peer orientation.

162
00:10:17,974 --> 00:10:22,006
However, because we provide features like snapshotting,

163
00:10:22,118 --> 00:10:25,866
we decided to incorporate a central peer in our system to

164
00:10:25,888 --> 00:10:29,946
resolve conflicts and to provide a definitive source

165
00:10:29,978 --> 00:10:33,182
of truth for our data. Using the

166
00:10:33,236 --> 00:10:37,246
example from the hard way, let's say that both clients are working on

167
00:10:37,268 --> 00:10:40,686
the same logo. Each one makes specific

168
00:10:40,788 --> 00:10:44,354
changes. For example, one client changes the color of one

169
00:10:44,392 --> 00:10:47,762
square, while the other client changes the color of the other

170
00:10:47,816 --> 00:10:51,314
squares and their order. Those changes would

171
00:10:51,352 --> 00:10:54,494
be propagated to the central peer who is using

172
00:10:54,552 --> 00:10:58,390
YGS library and would resolve any conflicts

173
00:10:58,810 --> 00:11:02,598
so that there is no drift between the states and in other words,

174
00:11:02,764 --> 00:11:06,310
everyone is looking at the same version of the logo.

175
00:11:06,890 --> 00:11:10,918
While this solution is simpler to support, it does have a few drawbacks

176
00:11:10,934 --> 00:11:14,860
that I want to mention. So for example, the first one

177
00:11:15,310 --> 00:11:18,682
is that it can be more cpu and memory intensive since

178
00:11:18,736 --> 00:11:22,522
you need to server side resources when editing documents.

179
00:11:22,666 --> 00:11:25,758
The second is that scaling is more complex because

180
00:11:25,844 --> 00:11:29,470
you need to be able to run the central peer close to the clients.

181
00:11:29,970 --> 00:11:33,522
But overall this is a much simpler approach because you

182
00:11:33,576 --> 00:11:37,166
end up needing some central services anyway for document storage

183
00:11:37,198 --> 00:11:40,590
and management. So let's do a quick recap.

184
00:11:40,750 --> 00:11:44,162
This is an overview of the multiplayer system architecture

185
00:11:44,226 --> 00:11:47,846
as visualized using the multiplayer UI, and we

186
00:11:47,868 --> 00:11:51,766
have opted to have our CRDT peer sessions managed by

187
00:11:51,788 --> 00:11:54,520
a central peer, the collaboration service.

188
00:11:55,370 --> 00:11:59,334
This service has three main functions. The first one is serving

189
00:11:59,382 --> 00:12:03,610
the latest version of the document when a new client connects.

190
00:12:04,190 --> 00:12:07,926
The second one is sharing edits across all connected

191
00:12:07,958 --> 00:12:11,562
clients, and the third one is saving snapshots

192
00:12:11,626 --> 00:12:14,826
of the document. We keep latency low by deploying

193
00:12:14,858 --> 00:12:18,362
collaboration services close to our users, so latency

194
00:12:18,426 --> 00:12:21,810
is minimized and we have a directory service

195
00:12:21,880 --> 00:12:25,502
cluster to make decisions about where to place collaboration

196
00:12:25,566 --> 00:12:29,010
sessions, track existing sessions, and even move

197
00:12:29,080 --> 00:12:32,482
sessions. Now that we've seen

198
00:12:32,616 --> 00:12:36,106
how we implemented real time collaboration features,

199
00:12:36,238 --> 00:12:39,686
let's look at the specific features. And before I go

200
00:12:39,708 --> 00:12:43,414
on, I wanted to make a quick aside. We didn't implement all

201
00:12:43,452 --> 00:12:46,834
of the possible real time collaboration features, but only those

202
00:12:46,892 --> 00:12:50,922
that make sense for multiplayer. Also, we didn't always

203
00:12:50,976 --> 00:12:54,554
use JS, we only used it when it made sense.

204
00:12:54,752 --> 00:12:58,674
So this approach makes sense when we require conflict resolution

205
00:12:58,742 --> 00:13:02,542
between changes from different users or for temporary things

206
00:13:02,596 --> 00:13:06,314
that belong to the document. Think for example, user info

207
00:13:06,362 --> 00:13:10,334
or cursors. There are three different categories of

208
00:13:10,372 --> 00:13:14,142
real time collaboration features. The first one is awareness

209
00:13:14,206 --> 00:13:17,714
or presence features, which allow you to automatically track and

210
00:13:17,752 --> 00:13:21,186
communicate the online status of your users. So for example,

211
00:13:21,288 --> 00:13:24,354
avatar stacks. Now note that since

212
00:13:24,392 --> 00:13:27,986
we have a central peer and since JS is network agnostic,

213
00:13:28,098 --> 00:13:32,022
we decided to use websockets to display this. Also because

214
00:13:32,076 --> 00:13:36,178
we are pulling this information across multiple documents at a project level.

215
00:13:36,364 --> 00:13:39,370
However, it can be also achieved with JS.

216
00:13:40,270 --> 00:13:44,358
Other features that fall into this category are live cursors

217
00:13:44,534 --> 00:13:48,026
and user in application, which you

218
00:13:48,048 --> 00:13:51,914
would use a similar logic in JS to implement, and typing

219
00:13:51,962 --> 00:13:55,342
indicators, which is a feature we haven't implemented yet,

220
00:13:55,396 --> 00:13:59,018
but we'll likely do in the future. Another category

221
00:13:59,114 --> 00:14:02,850
of collaborative features is state synchronization.

222
00:14:03,590 --> 00:14:07,874
Features include all those user actions and changes that

223
00:14:07,912 --> 00:14:11,874
have to be synced correctly and at low latency, so live updates is

224
00:14:11,912 --> 00:14:15,046
an example. Then you have coediting, undo and

225
00:14:15,068 --> 00:14:18,514
redo an easy way to see the YGS

226
00:14:18,562 --> 00:14:21,974
implementation of these category features in multiplayer is to

227
00:14:22,012 --> 00:14:25,826
think back of the multiplayer

228
00:14:25,858 --> 00:14:28,682
system architecture that I showed you a few slides back.

229
00:14:28,816 --> 00:14:31,866
One client is moving the collaboration service to

230
00:14:31,888 --> 00:14:35,978
a different location in the system architecture, while at the same time

231
00:14:36,144 --> 00:14:39,962
another client is renaming that same component, the collaboration

232
00:14:40,026 --> 00:14:43,950
service something else, and both changes would be combined together without

233
00:14:44,020 --> 00:14:47,294
issues in a final state. The last

234
00:14:47,332 --> 00:14:51,638
and third category of collaboration features is the pub submessaging

235
00:14:51,674 --> 00:14:54,994
features which are needed to deliver the right message to the right

236
00:14:55,032 --> 00:14:58,974
client in real time. This comprises comments and push

237
00:14:59,022 --> 00:15:02,818
notifications. We use yJs, as I mentioned,

238
00:15:02,904 --> 00:15:06,822
only for things that require conflict resolution between changes from different

239
00:15:06,876 --> 00:15:10,710
users, or for temporary things that belong to the document.

240
00:15:11,130 --> 00:15:15,314
And so comments do not require simultaneous edits

241
00:15:15,442 --> 00:15:19,074
because comments can have only a single owner and they are

242
00:15:19,132 --> 00:15:23,578
not temporary. And for this reason we

243
00:15:23,664 --> 00:15:28,354
didn't use js to implement this feature. Instead we used recipe,

244
00:15:28,502 --> 00:15:31,690
API, call and websocket notifications.

245
00:15:31,850 --> 00:15:35,146
And although we haven't implemented yet push notifications,

246
00:15:35,258 --> 00:15:39,374
we would be using websockets for those too. Although you

247
00:15:39,412 --> 00:15:43,330
can use JS for state synchronization now,

248
00:15:43,400 --> 00:15:46,386
while using YJS was surprisingly easy,

249
00:15:46,488 --> 00:15:49,986
there were some challenges. The first being learning

250
00:15:50,088 --> 00:15:52,500
was how to keep track of order.

251
00:15:53,110 --> 00:15:56,966
Arrays are supported in YJS, but order of elements is

252
00:15:56,988 --> 00:16:00,134
not maintained without a little work. The first

253
00:16:00,172 --> 00:16:03,942
approach you might think of is to add an integer for the order.

254
00:16:04,076 --> 00:16:07,266
However, the drawback is that whenever a new element is

255
00:16:07,308 --> 00:16:11,002
inserted, you have to change the order value of every single

256
00:16:11,056 --> 00:16:15,062
element that follows it. This is not a scalable solution,

257
00:16:15,126 --> 00:16:19,034
especially if you have a very long list. What we

258
00:16:19,072 --> 00:16:22,314
ended up using is fractional indexing,

259
00:16:22,442 --> 00:16:25,230
which is also the approach that used by Figma.

260
00:16:25,730 --> 00:16:29,662
This solution has the benefit of inserting an element without having

261
00:16:29,716 --> 00:16:33,342
to update all of the elements that follow it. To implement

262
00:16:33,406 --> 00:16:37,394
fractional indexing, it's best to use an arbitrary precision library rather

263
00:16:37,432 --> 00:16:41,106
than the built in JavaScript number type, which is

264
00:16:41,128 --> 00:16:44,402
a 32 bit floating point number. Because it has

265
00:16:44,456 --> 00:16:48,054
limited precision, there is a limit to how

266
00:16:48,092 --> 00:16:51,606
many times you can insert something into a list before you hit the

267
00:16:51,628 --> 00:16:55,126
precision wall of the type, and instead with an

268
00:16:55,148 --> 00:16:58,300
arbitrary precision library, you don't run into this problem.

269
00:16:59,070 --> 00:17:02,410
Our second learning, to which I alluded to

270
00:17:02,480 --> 00:17:06,454
already when discussing our system architecture, is that while YJS

271
00:17:06,502 --> 00:17:10,338
supports a peer to peer design where you don't

272
00:17:10,374 --> 00:17:13,614
need to have a central service that may not fit

273
00:17:13,652 --> 00:17:16,906
your business model. In fact, for us, having a central

274
00:17:16,938 --> 00:17:20,366
collaboration service was very much necessary to

275
00:17:20,388 --> 00:17:23,954
be able to implement features like snapshotting and storing data

276
00:17:23,992 --> 00:17:28,370
in specific locations because of security requirements. Think GDPR.

277
00:17:29,030 --> 00:17:33,010
However, a peer to peer architecture would be better suited if your application

278
00:17:33,160 --> 00:17:37,270
has a requirement, for example, to operate in an offline mode.

279
00:17:37,690 --> 00:17:41,826
Our third learning was about defining the scope of collaboration,

280
00:17:42,018 --> 00:17:45,414
more specifically being selective on where and how

281
00:17:45,452 --> 00:17:48,842
we use real time collaborative features, because they might

282
00:17:48,896 --> 00:17:52,010
be unnecessary or worse, confusing.

283
00:17:52,350 --> 00:17:55,766
So let me give you a little bit of context. Multiplayer supports

284
00:17:55,798 --> 00:18:00,190
branches, chain sets and views of the platform architecture and API.

285
00:18:00,930 --> 00:18:04,862
These represent either copies of original documents or

286
00:18:04,916 --> 00:18:08,542
filtered views of the content of a document and when

287
00:18:08,596 --> 00:18:11,774
deciding how to show the awareness features. So think

288
00:18:11,812 --> 00:18:16,082
back. Avatar Stack and user cursors we decided to only

289
00:18:16,136 --> 00:18:19,906
show the users who are viewing the same document in the same branch at

290
00:18:19,928 --> 00:18:23,470
the same time as you can see in these two branches,

291
00:18:23,630 --> 00:18:27,398
instead of showing all of the users who are working on the same platform

292
00:18:27,484 --> 00:18:30,710
architecture across all branches, because that would be

293
00:18:30,780 --> 00:18:33,750
unnecessary and confusing.

294
00:18:34,330 --> 00:18:38,102
The last learning I'm keen to share is that JS can lift

295
00:18:38,166 --> 00:18:41,670
a lot of the overhead of implementing collaborative features,

296
00:18:41,830 --> 00:18:45,846
but it doesn't do everything for you. For example, it doesn't

297
00:18:45,878 --> 00:18:49,210
support cross document changes where you need to propagate

298
00:18:49,290 --> 00:18:52,560
information from one place to another.

299
00:18:52,930 --> 00:18:56,366
To give you another concrete example, in multiplayer we

300
00:18:56,388 --> 00:18:59,726
have several documents that have dependencies. For example,

301
00:18:59,828 --> 00:19:03,282
the individual component of a system architecture may be

302
00:19:03,336 --> 00:19:06,530
referenced in different places. Component list,

303
00:19:06,600 --> 00:19:10,226
component description, platform architecture. To be able

304
00:19:10,248 --> 00:19:14,342
to ensure that any change to an independent document would flow up

305
00:19:14,396 --> 00:19:18,358
to other documents that reference them. We needed to wire up

306
00:19:18,444 --> 00:19:22,118
dependencies between different data structures in our app,

307
00:19:22,284 --> 00:19:25,974
listening for changes in the YJs document. So for

308
00:19:26,012 --> 00:19:29,642
example, if you change the name of a component in the components view,

309
00:19:29,776 --> 00:19:33,914
that change will flow to any other platform document that shows that

310
00:19:33,952 --> 00:19:37,370
component automatically without needing to refresh.

311
00:19:37,950 --> 00:19:41,950
And this is all to say that you may find that your app requires some

312
00:19:42,020 --> 00:19:46,510
UX choices like that which are not supported by JS.

313
00:19:47,330 --> 00:19:51,374
So to recap, why should you build for collaboration within

314
00:19:51,412 --> 00:19:55,186
your app? With real time collaboration you ensure a

315
00:19:55,208 --> 00:19:57,842
better user experience. In other words,

316
00:19:57,976 --> 00:20:01,438
quicker time to fund your users can align,

317
00:20:01,534 --> 00:20:04,710
communicate and drive consensus effortlessly.

318
00:20:05,290 --> 00:20:08,534
Shorter production cycles, quicker time to market.

319
00:20:08,732 --> 00:20:12,786
Making sure that your users are aligned on the expectations,

320
00:20:12,898 --> 00:20:16,486
responsibilities requirements. Roadmap ensures

321
00:20:16,518 --> 00:20:19,590
that there is no miscommunication or backtracking.

322
00:20:19,750 --> 00:20:24,170
Therefore they can work more productively and deliver results faster.

323
00:20:24,670 --> 00:20:27,818
Also, they are working and communicating in a shared space,

324
00:20:27,904 --> 00:20:31,614
which means less context switching and wasted time.

325
00:20:31,812 --> 00:20:35,134
And this is not to say that real time collaboration alone is

326
00:20:35,172 --> 00:20:38,846
the ultimate productivity booster. However, it is an

327
00:20:38,868 --> 00:20:41,360
expected enhancer of the user experience.

328
00:20:42,310 --> 00:20:45,986
Also, increase business revenue. Because your tool is

329
00:20:46,008 --> 00:20:49,934
adopted by entire teams, if not entire organizations,

330
00:20:50,062 --> 00:20:53,374
it becomes a key part of the company's workflows,

331
00:20:53,502 --> 00:20:55,670
giving you higher retention rates.

332
00:20:56,330 --> 00:20:59,878
So the final advice we can give you is to

333
00:20:59,964 --> 00:21:03,426
not reinvent the wheel. There are lots of solutions

334
00:21:03,458 --> 00:21:07,306
for adding real time collaboration to your app, and while we decide to

335
00:21:07,328 --> 00:21:10,570
use YJs and build in house these functionalities,

336
00:21:11,310 --> 00:21:14,822
we can also recommend using ASAs provider

337
00:21:14,886 --> 00:21:18,282
like liveblocks. But there are so many others out there

338
00:21:18,336 --> 00:21:22,190
as well. So for example, app playkit collab kit.

339
00:21:22,690 --> 00:21:26,282
Our second advice is to embrace collaboration

340
00:21:26,346 --> 00:21:30,202
from the start if you can. Adding real time collaboration

341
00:21:30,266 --> 00:21:34,210
features as an afterthought to an existing product, or to only

342
00:21:34,280 --> 00:21:37,778
part of an existing product is more messy and difficult.

343
00:21:37,944 --> 00:21:41,374
It's not impossible though. You can certainly introduce JS

344
00:21:41,422 --> 00:21:45,254
in an existing system and it would take a lot less work and time

345
00:21:45,372 --> 00:21:47,750
than doing the same with websockets.

346
00:21:48,250 --> 00:21:51,874
However, by including it in your early designs, you ensure

347
00:21:51,922 --> 00:21:56,022
that the full ux experience is collaborative and

348
00:21:56,076 --> 00:21:59,574
your technology choices will easily support the

349
00:21:59,612 --> 00:22:02,854
evolution of these features. Thank you for

350
00:22:02,892 --> 00:22:06,834
listening to my talk and I hope you got inspired to add real time collaboration

351
00:22:06,882 --> 00:22:10,986
to your apps. If you'd like to try yourself. The features we built into multiplayer

352
00:22:11,018 --> 00:22:14,970
we'll be launching our open beta very soon and we'd love your feedback.

353
00:22:15,130 --> 00:22:18,362
You can find me on X, LinkedIn or around the Discord

354
00:22:18,426 --> 00:22:19,820
server if you have any questions.

