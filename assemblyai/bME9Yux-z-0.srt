1
00:00:00,410 --> 00:00:05,360
Jamaica make on them

2
00:00:05,810 --> 00:00:09,610
real time feedback into the behavior of your distributed systems

3
00:00:09,690 --> 00:00:13,374
and observing changes exceptions errors in

4
00:00:13,412 --> 00:00:17,182
real time allows you to not only experiment with confidence but

5
00:00:17,236 --> 00:00:20,480
respond instantly to get things working again.

6
00:00:24,610 --> 00:00:47,370
Close helps

7
00:00:47,440 --> 00:00:51,166
everyone and welcome. Thanks for joining me. Today I

8
00:00:51,188 --> 00:00:54,922
will be talking about MeteorJs as a framework

9
00:00:54,986 --> 00:00:58,640
for hyper prompt development. I'll share my experience,

10
00:00:59,170 --> 00:01:02,474
a little story, my journey and then I will

11
00:01:02,532 --> 00:01:05,666
show the demo where we

12
00:01:05,688 --> 00:01:08,850
will build a simple to do app.

13
00:01:09,000 --> 00:01:12,386
But first let me introduce myself. My name

14
00:01:12,408 --> 00:01:15,730
is Armand, I live and work in Netherlands.

15
00:01:15,810 --> 00:01:19,254
I'm based here. I have over 15 years of

16
00:01:19,372 --> 00:01:22,194
diverse experience. I started with Pascal,

17
00:01:22,242 --> 00:01:26,642
CC, post plus Java to modern Javascript and typescript frameworks.

18
00:01:26,786 --> 00:01:31,078
Last five years I'm focused on fintech. I'm helping

19
00:01:31,254 --> 00:01:34,890
banks and financial organizations with automation.

20
00:01:35,470 --> 00:01:38,666
And at some point in past I was a

21
00:01:38,688 --> 00:01:42,046
co founder and a CTO of a successful software as

22
00:01:42,068 --> 00:01:46,122
a service company where we were using meteorjs

23
00:01:46,266 --> 00:01:50,030
as our main stack, main framework.

24
00:01:50,770 --> 00:01:53,938
But let me tell you how it still started.

25
00:01:54,024 --> 00:01:57,374
So our startup journey started at a hackathon

26
00:01:57,422 --> 00:02:00,962
called Startup weekend. We build

27
00:02:01,016 --> 00:02:05,762
a simple prototype. We were building mvp,

28
00:02:05,906 --> 00:02:09,814
showing it in conferences, pitching it, getting into

29
00:02:09,932 --> 00:02:13,382
incubator where built more or less a product and

30
00:02:13,436 --> 00:02:17,026
finding market fit. Then we got investment,

31
00:02:17,218 --> 00:02:20,902
got into very nice startup bootcamp accelerator,

32
00:02:21,046 --> 00:02:24,250
second biggest accelerator at that time in Europe,

33
00:02:25,470 --> 00:02:29,494
iterating over, finding market fit, finding investors,

34
00:02:29,622 --> 00:02:33,770
finally pitching in demo days. And all that journey was

35
00:02:33,840 --> 00:02:36,238
in like four or five months.

36
00:02:36,324 --> 00:02:40,362
Imagine how dynamic it was. And for supporting

37
00:02:40,426 --> 00:02:43,794
such a quick, dynamic environment, we needed very

38
00:02:43,832 --> 00:02:47,314
good tech stack. What were our

39
00:02:47,352 --> 00:02:51,154
requirements? Because in a startup, basically you don't have a luxury to

40
00:02:51,192 --> 00:02:54,466
hire dedicated developers. So you have students,

41
00:02:54,568 --> 00:02:59,218
interns, some freelancers in helping.

42
00:02:59,394 --> 00:03:03,286
So we needed preferably the entire stack in

43
00:03:03,308 --> 00:03:07,240
one programming languages. And that

44
00:03:07,550 --> 00:03:10,506
at some points that one person can handle everything.

45
00:03:10,688 --> 00:03:15,146
We needed a quick learning curve so that we

46
00:03:15,168 --> 00:03:18,618
can onboard quickly some maybe students

47
00:03:18,704 --> 00:03:21,390
sometimes, or some fresh graduates.

48
00:03:21,970 --> 00:03:25,998
And business wise we need a tool where we can quickly

49
00:03:26,084 --> 00:03:29,950
prototype. Because sometimes you had a call from a client,

50
00:03:30,290 --> 00:03:34,290
needed something, then you would need to show

51
00:03:34,360 --> 00:03:37,986
working prototype by Monday morning. And then over the weekend you

52
00:03:38,008 --> 00:03:42,174
needed to build some prototype

53
00:03:42,222 --> 00:03:47,926
that works and of course possibility of future

54
00:03:48,028 --> 00:03:51,586
development. I would say, for instance, it's not just prototype

55
00:03:51,618 --> 00:03:55,400
that you trash away. So you need to kind of develop it. And once

56
00:03:55,770 --> 00:03:59,718
the market niche is needed, so there should be a possibility

57
00:03:59,814 --> 00:04:03,100
to build a nice good product on top of it.

58
00:04:03,710 --> 00:04:07,162
So that's where MeteorJs came in. That's the

59
00:04:07,216 --> 00:04:11,262
full stack JS framework that

60
00:04:11,316 --> 00:04:14,462
fulfilled all our needs. So basically also our

61
00:04:14,516 --> 00:04:18,654
startup was in personality assessment platform where we

62
00:04:18,692 --> 00:04:22,174
were recording personal data.

63
00:04:22,292 --> 00:04:26,094
So it was considered data of mental

64
00:04:26,142 --> 00:04:29,314
health kind of, and we couldn't host it

65
00:04:29,352 --> 00:04:33,042
somewhere in the cloud, so we had to have full control

66
00:04:33,096 --> 00:04:36,354
of the data. So MeteorJs allowed us and

67
00:04:36,392 --> 00:04:40,230
also it was a little bit more cost effective,

68
00:04:40,970 --> 00:04:44,646
it had steep learning curve. So basically

69
00:04:44,828 --> 00:04:48,666
just in one week it's possible to

70
00:04:48,848 --> 00:04:51,820
learn entire VTR js and start building.

71
00:04:52,270 --> 00:04:56,300
And in one week you can learn basically it

72
00:04:56,990 --> 00:05:00,700
from zero to 90%.

73
00:05:01,330 --> 00:05:04,606
Then mainly it allowed us to

74
00:05:04,628 --> 00:05:08,222
do a quick prototyping. And for future

75
00:05:08,276 --> 00:05:11,994
development it supported react view Svelta,

76
00:05:12,042 --> 00:05:15,906
its own blaze UI library. Also it

77
00:05:15,928 --> 00:05:20,014
was built on top of MongoDB. It's a very popular NoSQL

78
00:05:20,062 --> 00:05:23,714
database that is open source. And for the backend it

79
00:05:23,752 --> 00:05:27,478
used node JS. So for now it was a

80
00:05:27,644 --> 00:05:31,366
monolith full stack framework. And then it is possible to

81
00:05:31,468 --> 00:05:35,080
decompose it and then develop in future.

82
00:05:36,250 --> 00:05:39,574
To demonstrate how

83
00:05:39,612 --> 00:05:43,318
quickly it is possible to develop meteorjs, I prepared a

84
00:05:43,324 --> 00:05:47,100
little demo. I pre recorded this demo

85
00:05:47,630 --> 00:05:51,626
and we will build a simple app and it's

86
00:05:51,658 --> 00:05:54,942
a tutorial from official MeteorJs website.

87
00:05:55,076 --> 00:05:57,710
So you can go to Meteorjs,

88
00:05:58,050 --> 00:06:01,882
then you can find a tutorial we will use react

89
00:06:01,946 --> 00:06:05,058
was our UI library, but you can use anything

90
00:06:05,144 --> 00:06:09,022
and then you can go through the steps and basically in your own pace

91
00:06:09,086 --> 00:06:13,234
later. And once you complete that

92
00:06:13,272 --> 00:06:16,710
tutorial and you read a little bit documentation,

93
00:06:17,770 --> 00:06:21,094
you're able to basically start building with it.

94
00:06:21,212 --> 00:06:24,514
Let's jump into demo to set up MeteorJs

95
00:06:24,562 --> 00:06:31,910
project. We just run a command called MeteorJs

96
00:06:31,990 --> 00:06:35,866
create and the name of the app. For example we can call

97
00:06:35,888 --> 00:06:40,380
it rapid to do app.

98
00:06:40,930 --> 00:06:44,286
That's it. This command will generate and

99
00:06:44,308 --> 00:06:48,030
by default it would use react for the templating

100
00:06:48,930 --> 00:06:52,410
our app is generated and we can open it in

101
00:06:52,500 --> 00:06:55,790
vs code. It would have the following structure.

102
00:06:55,950 --> 00:07:00,450
So this is client,

103
00:07:00,790 --> 00:07:04,594
I would go through the main. So basically here

104
00:07:04,712 --> 00:07:07,794
in the service folder we'll have server

105
00:07:07,842 --> 00:07:12,150
site code. So basically our backend

106
00:07:13,450 --> 00:07:18,490
here in UI, we'll have our react application APIs

107
00:07:19,310 --> 00:07:23,110
and so on. We'll get back to that later. So let's

108
00:07:23,190 --> 00:07:27,846
run our application. We run meteorjs

109
00:07:28,038 --> 00:07:31,210
run this

110
00:07:31,360 --> 00:07:34,862
command would start the meteorjs application and would run

111
00:07:34,916 --> 00:07:38,986
it in localhost 3000. So let's

112
00:07:39,018 --> 00:07:43,074
wait for it a bit. Now that our

113
00:07:43,112 --> 00:07:47,442
application is running, we can go to localhost 3000 and

114
00:07:47,496 --> 00:07:51,934
render our application. So here it is. So I'll

115
00:07:51,982 --> 00:07:56,066
zoom it in or disable this.

116
00:07:56,168 --> 00:07:59,582
So yeah, we can see that we have click me

117
00:07:59,656 --> 00:08:03,590
and it's working and yeah, let's proceed.

118
00:08:04,490 --> 00:08:10,050
Now we can see that we have app component

119
00:08:10,130 --> 00:08:12,950
welcome to meteorjs hello and info.

120
00:08:13,110 --> 00:08:17,850
Hello is showing the increment button and

121
00:08:18,000 --> 00:08:21,150
the label and info some links.

122
00:08:23,010 --> 00:08:27,246
You don't need to understand the full project

123
00:08:27,348 --> 00:08:30,874
structure. For now what we need to pay attention is client

124
00:08:30,922 --> 00:08:34,130
folder is our root for our front end for web.

125
00:08:34,280 --> 00:08:37,822
So we have main HTML, main CSS

126
00:08:37,886 --> 00:08:41,662
and main js. This is like the root for our component

127
00:08:41,726 --> 00:08:45,170
that renders the app js.

128
00:08:45,530 --> 00:08:48,920
Here in the imports UI we have

129
00:08:49,530 --> 00:08:53,030
our react component as I mentioned earlier,

130
00:08:53,450 --> 00:08:57,062
and server side. Here we have a node JS code that

131
00:08:57,116 --> 00:08:59,050
connects to MongodB.

132
00:09:01,310 --> 00:09:04,838
Now we are more or less familiar with the structure.

133
00:09:04,934 --> 00:09:09,254
Now we can start building our to do app. First let's

134
00:09:09,302 --> 00:09:11,630
create a task component,

135
00:09:13,330 --> 00:09:18,990
create new file task js

136
00:09:22,790 --> 00:09:27,090
let's import react we create component.

137
00:09:29,590 --> 00:09:33,010
So basically we have a task component that

138
00:09:33,080 --> 00:09:36,280
receives task and then prints a text.

139
00:09:37,050 --> 00:09:41,894
Let's save it as

140
00:09:41,932 --> 00:09:45,718
we are not connected to the server yet to our database yet.

141
00:09:45,804 --> 00:09:49,546
So let's define the sample data which will

142
00:09:49,568 --> 00:09:52,650
be used shortly to render list of tasks.

143
00:09:54,430 --> 00:09:58,300
It will be an array and

144
00:10:00,130 --> 00:10:07,470
let's go with tasks. So we'll have first

145
00:10:07,540 --> 00:10:11,614
task, then we

146
00:10:11,652 --> 00:10:14,882
copy paste and let's choose. We have

147
00:10:14,936 --> 00:10:18,210
first task, second task and third task

148
00:10:19,830 --> 00:10:23,474
let's save now let's render this

149
00:10:23,512 --> 00:10:27,954
list of tasks. Using normal react syntaxes

150
00:10:28,002 --> 00:10:30,550
we can remove those components.

151
00:10:33,130 --> 00:10:36,886
Let's import our

152
00:10:37,068 --> 00:10:44,994
task component. Yes nowaday

153
00:10:45,042 --> 00:10:50,286
list it

154
00:10:50,428 --> 00:10:58,014
it so

155
00:10:58,052 --> 00:11:01,760
we map for each task we would

156
00:11:02,790 --> 00:11:07,650
have per task component.

157
00:11:09,110 --> 00:11:11,380
We should not forget the key.

158
00:11:11,910 --> 00:11:15,380
That's vital as you probably know.

159
00:11:16,310 --> 00:11:20,822
So we put task and

160
00:11:20,956 --> 00:11:22,440
the id of it.

161
00:11:24,410 --> 00:11:28,380
Then actual task would be go to

162
00:11:29,710 --> 00:11:31,100
the task itself.

163
00:11:35,550 --> 00:11:39,050
By the way, let me make a font bigger.

164
00:11:40,110 --> 00:11:43,510
Yeah, I hope you can see it better.

165
00:11:43,600 --> 00:11:47,360
Maybe so let's save it.

166
00:11:48,290 --> 00:11:52,422
Now we can see all our tasks. Task one stacks

167
00:11:52,586 --> 00:11:54,610
1st, second and third task.

168
00:11:56,150 --> 00:11:59,874
If we switch to mobile view now we can see

169
00:11:59,912 --> 00:12:02,020
that it's not that pretty.

170
00:12:03,110 --> 00:12:06,870
What we can do is we can add

171
00:12:06,940 --> 00:12:11,558
some meta tags so we add it to

172
00:12:11,724 --> 00:12:13,190
main HTML.

173
00:12:16,250 --> 00:12:20,140
So let's save it now it looks better.

174
00:12:21,150 --> 00:12:24,890
MeteorJs by default when using react is already

175
00:12:24,960 --> 00:12:28,022
adding a package called hot module replacement.

176
00:12:28,086 --> 00:12:31,882
That package updates the Javascript modules in running app

177
00:12:31,936 --> 00:12:35,882
that were modified during rebuild. So this reduces

178
00:12:35,946 --> 00:12:39,374
the feedback cycle while developing so you can view the

179
00:12:39,412 --> 00:12:43,106
test changes quicker. It even updates the

180
00:12:43,128 --> 00:12:46,660
app before the build has finished and it keeps the state.

181
00:12:48,390 --> 00:12:52,206
Let's do a little cleanup and remove those unused

182
00:12:52,318 --> 00:12:55,570
components. Hello and info

183
00:12:56,570 --> 00:12:59,320
delete those. Yes,

184
00:13:01,930 --> 00:13:06,550
Meteor has already set up MongoDB

185
00:13:06,890 --> 00:13:10,474
for us and in order to use that

186
00:13:10,512 --> 00:13:14,218
database. We need to create a collection which is where

187
00:13:14,304 --> 00:13:18,438
we will store our documents. And in our case the documents

188
00:13:18,534 --> 00:13:21,646
would be stacks. And we can create a new

189
00:13:21,668 --> 00:13:25,840
collection to store our tasks by creating a new file at

190
00:13:26,530 --> 00:13:29,870
API imports API folder.

191
00:13:30,930 --> 00:13:34,580
So let's create one and we call it

192
00:13:35,670 --> 00:13:43,650
stacks collection collection

193
00:13:44,310 --> 00:13:51,862
JS so

194
00:13:51,916 --> 00:13:54,520
we import mongo first,

195
00:13:56,250 --> 00:14:03,230
then export.

196
00:14:03,570 --> 00:14:08,270
We can call tasks collection which is mongo collection

197
00:14:08,930 --> 00:14:11,070
and we call it tasks.

198
00:14:12,130 --> 00:14:15,570
Did you notice that we used import API folder?

199
00:14:15,990 --> 00:14:20,750
That is all code relates to publications,

200
00:14:20,830 --> 00:14:24,370
meteorjs and in general API.

201
00:14:24,890 --> 00:14:29,318
That's just convenience and choice. We don't have to follow the

202
00:14:29,404 --> 00:14:33,640
structure. For the structure that I'm using, we can use different ones

203
00:14:34,890 --> 00:14:38,666
and we can do cleanup here as well. We can remove this

204
00:14:38,848 --> 00:14:43,130
links collection that was automatically generated.

205
00:14:44,990 --> 00:14:47,340
Okay great.

206
00:14:50,050 --> 00:14:53,886
Now we can see some errors in the console log.

207
00:14:54,068 --> 00:14:57,262
It's because there is also some

208
00:14:57,316 --> 00:15:01,120
unused code in the server side.

209
00:15:01,750 --> 00:15:05,678
So we can see that link collection was used. So we can remove

210
00:15:05,774 --> 00:15:09,234
this generator tech code. Sorry.

211
00:15:09,352 --> 00:15:15,814
As well so can completely this

212
00:15:15,852 --> 00:15:21,638
is major startup hook is run when major

213
00:15:21,804 --> 00:15:25,362
app starts. So can remove

214
00:15:25,426 --> 00:15:28,646
this one as well and we can remove

215
00:15:28,678 --> 00:15:29,580
this import.

216
00:15:33,710 --> 00:15:37,610
Now our app works and we don't have errors

217
00:15:39,890 --> 00:15:43,098
since our collection is going to be empty in the beginning,

218
00:15:43,194 --> 00:15:46,510
let's populate it with the first values.

219
00:15:47,570 --> 00:15:50,590
So we import task collection.

220
00:15:53,510 --> 00:15:56,754
Then meteor startup is

221
00:15:56,872 --> 00:16:00,066
the hook run as I mentioned when the

222
00:16:00,168 --> 00:16:04,246
application starts for the first time. So for example if the

223
00:16:04,268 --> 00:16:07,702
task collection, so we query through

224
00:16:07,756 --> 00:16:11,334
all the elements and then we count. And if

225
00:16:11,452 --> 00:16:18,546
it consists of zero clients then we can populate

226
00:16:18,578 --> 00:16:23,402
it with some mock. So for example we have per second and

227
00:16:23,456 --> 00:16:28,534
the third and the fourth task.

228
00:16:28,662 --> 00:16:30,430
Then we iterate.

229
00:16:32,370 --> 00:16:35,614
Actually let's create an arrow function. Here we

230
00:16:35,652 --> 00:16:37,470
go, insert task.

231
00:16:38,370 --> 00:16:41,914
Then for each task text we insert

232
00:16:41,962 --> 00:16:46,066
it in a way that this is function.

233
00:16:46,168 --> 00:16:50,580
So we insert into the collection. And now

234
00:16:51,910 --> 00:16:55,462
for each of those labels we

235
00:16:55,516 --> 00:16:59,382
insert into our database and let's save

236
00:16:59,436 --> 00:17:02,790
it. Now comes the fun part.

237
00:17:02,860 --> 00:17:06,354
We will render the tasks using react function

238
00:17:06,492 --> 00:17:10,090
component and the hook called use tracker.

239
00:17:10,750 --> 00:17:14,090
And that hook is from the package called

240
00:17:14,160 --> 00:17:18,042
react meteorjs data. This package has already

241
00:17:18,096 --> 00:17:21,582
been included in react skeleton when we

242
00:17:21,716 --> 00:17:23,680
initially generated the project.

243
00:17:25,810 --> 00:17:29,102
Let's start by importing the use

244
00:17:29,156 --> 00:17:32,526
tracker. Use tracker is a react hook

245
00:17:32,558 --> 00:17:36,414
that allows us to have reactivity in our react

246
00:17:36,462 --> 00:17:40,690
components. Every time the data changes through the reactivity,

247
00:17:41,590 --> 00:17:45,000
our component will rerender cool right?

248
00:17:45,850 --> 00:17:49,026
So we will also import the task collection,

249
00:17:49,138 --> 00:17:53,270
the connection to our database.

250
00:17:54,250 --> 00:17:58,458
So we'll refactor our component a little bit.

251
00:17:58,544 --> 00:18:02,826
So we would put the

252
00:18:02,848 --> 00:18:06,906
tasks inside and we will now replace the

253
00:18:06,928 --> 00:18:09,946
mock data with use tracker.

254
00:18:10,138 --> 00:18:16,702
So we would need to find

255
00:18:16,756 --> 00:18:19,390
in a query. So we query.

256
00:18:19,970 --> 00:18:24,066
Then we are fetching it. That's it.

257
00:18:24,168 --> 00:18:26,980
Let's save.

258
00:18:28,870 --> 00:18:34,534
Now you can see that we have four tasks that

259
00:18:34,572 --> 00:18:37,714
we previously added to the database.

260
00:18:37,762 --> 00:18:41,414
So basically now we are looking at the screen and we are

261
00:18:41,452 --> 00:18:44,310
getting the data directly from MongoDB.

262
00:18:45,850 --> 00:18:48,490
Now let's check our MongoDb.

263
00:18:48,990 --> 00:18:52,746
We can interact basically with Mongo using command line if

264
00:18:52,768 --> 00:18:56,634
we run meteorjs mongo command or we can also use

265
00:18:56,672 --> 00:19:00,358
UI tool called no scale booster for Mongo

266
00:19:00,454 --> 00:19:04,800
Mongodb so we connect. We use localhost and 3001

267
00:19:05,650 --> 00:19:08,990
so we connect. Now we can see

268
00:19:09,140 --> 00:19:12,894
meteorjs so we can see links and tasks.

269
00:19:12,942 --> 00:19:17,234
So basically tasks is

270
00:19:17,272 --> 00:19:21,620
the collection with four documents. So we can observe here.

271
00:19:22,070 --> 00:19:25,350
So those are the documents that we just created.

272
00:19:26,490 --> 00:19:30,406
By the way, I will leave a link to this tutorial so

273
00:19:30,428 --> 00:19:34,294
you can later do the same thing on your own step

274
00:19:34,332 --> 00:19:38,220
by step. So basically now

275
00:19:39,230 --> 00:19:44,054
we are seeing the tasks directly

276
00:19:44,102 --> 00:19:47,386
from server to client. So we're going

277
00:19:47,408 --> 00:19:50,314
to explore later the publications and subscriptions.

278
00:19:50,362 --> 00:19:54,026
So basically it's not using to be connected

279
00:19:54,058 --> 00:19:55,680
directly as it is now.

280
00:19:57,970 --> 00:20:01,622
Now we can perform a read operation from database.

281
00:20:01,706 --> 00:20:06,306
Now let's create a

282
00:20:06,328 --> 00:20:10,114
record operation. So basically adding that new task to

283
00:20:10,152 --> 00:20:14,174
add new task, let's create a simple form.

284
00:20:14,312 --> 00:20:18,498
I'll create a new react component

285
00:20:18,594 --> 00:20:23,234
here. We'll name it task

286
00:20:23,282 --> 00:20:30,550
format.

287
00:20:31,150 --> 00:20:34,886
First we need to create a simple form component to encapsulate

288
00:20:34,918 --> 00:20:38,460
our logic. As you can see we

289
00:20:38,930 --> 00:20:42,314
use state react hook. So let's

290
00:20:42,362 --> 00:20:47,710
create a task form and

291
00:20:47,860 --> 00:20:51,354
we use text and use

292
00:20:51,412 --> 00:20:55,490
state react hook with initial value of empty

293
00:20:55,830 --> 00:21:00,020
string. Then we create our form.

294
00:21:01,430 --> 00:21:05,362
Let's give it some class name. Then we have the input

295
00:21:05,426 --> 00:21:10,034
field. Let's put some placeholder

296
00:21:10,162 --> 00:21:14,310
type to add new task. Then we add

297
00:21:14,460 --> 00:21:16,600
the submit button,

298
00:21:18,510 --> 00:21:22,598
we can name it, give it a label task

299
00:21:22,774 --> 00:21:25,866
and let's save it.

300
00:21:25,968 --> 00:21:29,920
Let's give it a little more space.

301
00:21:31,970 --> 00:21:34,270
Make this one a bit smaller.

302
00:21:37,810 --> 00:21:41,310
Now let's add this form to our app component.

303
00:21:42,230 --> 00:21:46,034
So right after the

304
00:21:46,072 --> 00:21:49,810
title we could say task

305
00:21:50,870 --> 00:21:54,374
form. Of course

306
00:21:54,412 --> 00:21:55,880
we need to import it.

307
00:21:58,490 --> 00:21:59,240
No,

308
00:22:05,930 --> 00:22:09,980
let's save and we can see our

309
00:22:10,430 --> 00:22:11,660
task form.

310
00:22:14,830 --> 00:22:17,740
Let's first go to task form.

311
00:22:19,490 --> 00:22:23,774
Let's connect the input with the

312
00:22:23,812 --> 00:22:27,694
text state. So we add some

313
00:22:27,732 --> 00:22:31,402
more here. So our value

314
00:22:31,556 --> 00:22:34,882
would be so

315
00:22:34,936 --> 00:22:40,020
would be a text and a change

316
00:22:41,110 --> 00:22:48,402
event would be linked to set

317
00:22:48,456 --> 00:22:56,450
textbook

318
00:22:56,830 --> 00:22:57,580
it,

319
00:23:00,350 --> 00:23:06,140
setter target value

320
00:23:08,190 --> 00:23:11,550
and that's it.

321
00:23:11,620 --> 00:23:16,794
And yeah, let's put everything into curly

322
00:23:16,842 --> 00:23:20,320
braces. Let's hit save.

323
00:23:22,950 --> 00:23:26,254
Now let's add on submit

324
00:23:26,302 --> 00:23:29,730
handler submit.

325
00:23:31,830 --> 00:23:39,346
We can call it handle submit and

326
00:23:39,448 --> 00:23:42,786
that's the function that we

327
00:23:42,808 --> 00:23:48,598
need to declare here. So we can let's

328
00:23:48,774 --> 00:23:52,970
handle submit. We receive

329
00:23:53,870 --> 00:23:58,074
branches first

330
00:23:58,112 --> 00:24:05,020
of all it

331
00:24:08,050 --> 00:24:11,746
prevent fault first. So what we

332
00:24:11,768 --> 00:24:12,660
need to do,

333
00:24:15,430 --> 00:24:21,202
of course if there is no text we don't need to save

334
00:24:21,256 --> 00:24:25,160
it. So if there is no text then we'll just return.

335
00:24:28,090 --> 00:24:31,526
Otherwise we

336
00:24:31,548 --> 00:24:35,766
can insert it directly to our database. So we use

337
00:24:35,868 --> 00:24:42,330
task collection insert

338
00:24:44,750 --> 00:24:46,780
here we pass an object,

339
00:24:47,550 --> 00:24:51,680
we declare the text is our text.

340
00:24:54,930 --> 00:24:58,942
So trim it and let's add

341
00:24:58,996 --> 00:25:03,394
also created ad so

342
00:25:03,432 --> 00:25:06,450
we know when it's created.

343
00:25:07,910 --> 00:25:11,810
Later we will use this field for arranging.

344
00:25:14,330 --> 00:25:18,518
So we know

345
00:25:18,684 --> 00:25:21,974
the order when each task is so and we

346
00:25:22,012 --> 00:25:25,186
also need to reset

347
00:25:25,298 --> 00:25:28,140
the state save it.

348
00:25:30,430 --> 00:25:33,942
Now we can refresh our browser and let's try to add a task.

349
00:25:34,006 --> 00:25:37,690
So task,

350
00:25:38,850 --> 00:25:42,606
task five, let's press

351
00:25:42,708 --> 00:25:45,946
add. So yeah, we can see that fifth task

352
00:25:45,978 --> 00:25:49,294
has been added. It's here. Let's check

353
00:25:49,332 --> 00:25:50,350
the database.

354
00:25:53,110 --> 00:25:58,500
Yes, we have our fifth task, task five with

355
00:25:59,190 --> 00:26:03,202
created edge. Now let's utilize that

356
00:26:03,256 --> 00:26:07,094
created add field. And of course when we add a task we want

357
00:26:07,132 --> 00:26:10,360
it to be added not in the bottom but in the top.

358
00:26:10,970 --> 00:26:14,166
To do that we need to go to our

359
00:26:14,348 --> 00:26:17,834
app component and here first

360
00:26:17,952 --> 00:26:21,158
object is the search query,

361
00:26:21,254 --> 00:26:25,340
the second is sorting. So we can add one more.

362
00:26:26,110 --> 00:26:29,218
By the way, this is the standard MongoDB syntaxes.

363
00:26:29,254 --> 00:26:32,954
You can read more about it in documentation. So I'll

364
00:26:33,002 --> 00:26:38,478
just quickly add sort and

365
00:26:38,644 --> 00:26:42,754
created ads and

366
00:26:42,792 --> 00:26:46,260
then minus one which means descending order

367
00:26:47,190 --> 00:26:51,202
and we can save it. Yeah, now we can see the task five

368
00:26:51,256 --> 00:26:56,280
is here. Let's add to another one. Six yes

369
00:26:56,970 --> 00:27:01,014
it has been added. Now we can

370
00:27:01,052 --> 00:27:04,354
successfully read from our collection and insert

371
00:27:04,402 --> 00:27:07,706
documents. Let's take a look on how we

372
00:27:07,728 --> 00:27:11,754
can update and remove them by interacting by

373
00:27:11,792 --> 00:27:15,338
the UI. Since we are building a

374
00:27:15,344 --> 00:27:18,650
to do list, we need our checkbox to check

375
00:27:18,800 --> 00:27:22,442
the tasks that we have done that are completed.

376
00:27:22,586 --> 00:27:24,640
So let's implement that.

377
00:27:25,890 --> 00:27:30,062
We can open our task by doing

378
00:27:30,116 --> 00:27:33,010
that. By the way, we'll implement the update operation.

379
00:27:33,670 --> 00:27:38,658
So let's add the

380
00:27:38,744 --> 00:27:42,130
checkbox. Checked.

381
00:27:43,850 --> 00:27:46,230
Let's code is checked.

382
00:27:47,130 --> 00:27:51,058
New attribute of a task. So initially they're

383
00:27:51,074 --> 00:27:55,160
all be unchecked. And when we click

384
00:27:57,310 --> 00:28:01,382
by the way, let's pass on checkbox,

385
00:28:01,446 --> 00:28:05,430
click that would be event handler

386
00:28:05,510 --> 00:28:09,014
pass from outside. So we add that we pass

387
00:28:09,072 --> 00:28:12,734
the task, put it read only. Let's make

388
00:28:12,772 --> 00:28:16,814
it a little bit more readable and

389
00:28:16,852 --> 00:28:20,430
we close the tag and also let's

390
00:28:20,850 --> 00:28:23,810
wrap text around span.

391
00:28:24,630 --> 00:28:28,930
Let's hit save. Now we can see checkboxes

392
00:28:30,310 --> 00:28:34,850
to implement the toggle itself we go back to upcomponent.

393
00:28:35,850 --> 00:28:38,738
We create a toggle checked.

394
00:28:38,834 --> 00:28:41,080
This is handler function.

395
00:28:42,650 --> 00:28:46,542
Let's pass it to the task component. On checkbox,

396
00:28:46,626 --> 00:28:50,326
click go to toggle

397
00:28:50,358 --> 00:28:52,700
checked. That's it.

398
00:28:53,630 --> 00:28:56,714
So we pass the task. So we

399
00:28:56,832 --> 00:29:00,670
retrieve the id and is checked from the task.

400
00:29:01,010 --> 00:29:04,858
Then here we start updating

401
00:29:04,954 --> 00:29:08,382
the actual record in the database. To do that

402
00:29:08,436 --> 00:29:12,022
we use our collection update.

403
00:29:12,186 --> 00:29:15,780
Then first we pass the id of

404
00:29:16,790 --> 00:29:21,060
a record. Then put set

405
00:29:22,550 --> 00:29:26,738
field is checked would be equal to the opposite

406
00:29:26,834 --> 00:29:30,806
of the current value. And that's it.

407
00:29:30,908 --> 00:29:34,434
Let's save it and let's

408
00:29:34,482 --> 00:29:37,994
try here. So let's check

409
00:29:38,112 --> 00:29:41,846
six. Five. Let's refresh our browser.

410
00:29:42,038 --> 00:29:45,238
Now we can see that we refresh our browser but values

411
00:29:45,254 --> 00:29:50,714
are still there. So let's uncheck so we have task

412
00:29:50,762 --> 00:29:54,414
six and first task checked. Let's check

413
00:29:54,452 --> 00:29:58,254
the database itself. If we

414
00:29:58,292 --> 00:30:01,338
check the database we can see six is

415
00:30:01,444 --> 00:30:05,202
checked and first task is

416
00:30:05,336 --> 00:30:08,946
checked. Let's uncheck the

417
00:30:08,968 --> 00:30:12,226
first task. We go

418
00:30:12,248 --> 00:30:15,826
back to database. First task

419
00:30:15,938 --> 00:30:19,430
is checked false. So now

420
00:30:19,500 --> 00:30:23,474
we are updating our recording

421
00:30:23,522 --> 00:30:27,270
database. Now let's implement the remove operator,

422
00:30:27,350 --> 00:30:30,986
the last one. So we needed to be able to remove. To do

423
00:30:31,008 --> 00:30:34,700
that. Let's go to task component. We'll add

424
00:30:35,710 --> 00:30:37,900
a little cross button.

425
00:30:42,610 --> 00:30:47,342
We'll pass it some handler later so

426
00:30:47,476 --> 00:30:53,860
we can use times.

427
00:30:58,070 --> 00:31:02,594
Let's see if it works. Yes. Then we

428
00:31:02,632 --> 00:31:06,660
need to have a handler click

429
00:31:16,830 --> 00:31:20,380
it. So by the way, by the way here we

430
00:31:21,470 --> 00:31:26,730
add on delete,

431
00:31:28,030 --> 00:31:31,614
click that we

432
00:31:31,652 --> 00:31:35,214
pass from the app component and we

433
00:31:35,412 --> 00:31:39,422
add on delete. Click and we

434
00:31:39,476 --> 00:31:41,230
pass the task.

435
00:31:43,590 --> 00:31:47,102
Now let's jump

436
00:31:47,166 --> 00:31:51,586
into app component. We need to add that

437
00:31:51,688 --> 00:31:54,698
function. So we have toggle checked.

438
00:31:54,814 --> 00:31:59,186
Now let's add delete,

439
00:31:59,218 --> 00:32:05,030
click or delete task. Delete task.

440
00:32:05,530 --> 00:32:10,390
That would be a function that gets task

441
00:32:10,550 --> 00:32:13,500
and from the task we extract its id.

442
00:32:16,590 --> 00:32:19,946
And then here we actually perform the delete

443
00:32:19,978 --> 00:32:23,710
operator. So we do that by calling task

444
00:32:24,050 --> 00:32:27,710
collection remove

445
00:32:28,930 --> 00:32:32,100
and we pass the id.

446
00:32:34,950 --> 00:32:38,782
That's our function for removing

447
00:32:38,846 --> 00:32:42,670
and now we need to add it. Here let's

448
00:32:42,750 --> 00:32:46,230
make this a little bit more readable.

449
00:32:51,530 --> 00:32:57,450
Let's key task

450
00:33:06,070 --> 00:33:09,374
and here we add on delete.

451
00:33:09,422 --> 00:33:13,442
Click go to delete

452
00:33:13,506 --> 00:33:16,920
task. Let's save it.

453
00:33:20,320 --> 00:33:26,432
Now let's try to remove first

454
00:33:26,486 --> 00:33:27,280
task.

455
00:33:30,340 --> 00:33:33,932
And we can see that instead of removing it's

456
00:33:33,996 --> 00:33:38,004
actually toggling. So let's see what's the problem. Let's check the

457
00:33:38,042 --> 00:33:40,550
task component and yeah,

458
00:33:41,480 --> 00:33:45,232
I accidentally put on checkbox.

459
00:33:45,296 --> 00:33:50,680
Click. So basically it's delete. Click let's save and

460
00:33:50,830 --> 00:33:53,960
let's try. Now we remove the first task.

461
00:33:54,300 --> 00:33:58,490
Yes it's removed. Second task removed as well.

462
00:33:58,860 --> 00:34:02,312
Let's remove the third task

463
00:34:02,376 --> 00:34:06,844
and let's check back the database and

464
00:34:06,882 --> 00:34:10,524
we can see we have three elements. Six, fourth and

465
00:34:10,722 --> 00:34:14,636
task five. It doesn't

466
00:34:14,668 --> 00:34:17,920
look that nice for now. So let's fix the styling.

467
00:34:18,580 --> 00:34:22,576
So I have prepared some Css so

468
00:34:22,598 --> 00:34:25,984
I'll just quickly paste it to save us some

469
00:34:26,022 --> 00:34:29,844
time. And now

470
00:34:29,882 --> 00:34:33,392
we needed to add some more tags

471
00:34:33,456 --> 00:34:37,044
to our

472
00:34:37,162 --> 00:34:40,260
HTML. Let's do that.

473
00:34:40,410 --> 00:34:42,790
So we open our app.

474
00:34:43,800 --> 00:34:47,924
So I'll

475
00:34:47,972 --> 00:34:53,020
also for the sake of time just copy

476
00:34:55,360 --> 00:34:59,660
paste the

477
00:34:59,730 --> 00:35:02,990
HTML tag. I'll save it.

478
00:35:03,520 --> 00:35:05,650
So yeah, now it looks nice.

479
00:35:07,860 --> 00:35:10,896
Let's check if it still works. Six.

480
00:35:10,998 --> 00:35:14,690
Then we put seven.

481
00:35:16,020 --> 00:35:19,510
Yes it works. Then we can remove this seven

482
00:35:20,360 --> 00:35:24,048
and let's rename it from welcome to MeteorJs

483
00:35:24,144 --> 00:35:28,870
to do

484
00:35:29,260 --> 00:35:32,760
list. And also

485
00:35:32,830 --> 00:35:35,320
let's put this later emoji.

486
00:35:36,780 --> 00:35:40,600
Let's also quickly implement our hide completed button

487
00:35:40,670 --> 00:35:45,772
that would hide completed task and

488
00:35:45,826 --> 00:35:49,192
show. So basically it's kind of another toggle.

489
00:35:49,336 --> 00:35:53,596
So let's define the state

490
00:35:53,698 --> 00:35:57,890
so we can call it height completed. So we use state

491
00:35:59,060 --> 00:36:02,480
initial value of false. So in the beginning

492
00:36:04,100 --> 00:36:08,036
it's not hidden. Then let's add the

493
00:36:08,058 --> 00:36:13,540
toggle button. Put some class name and

494
00:36:13,610 --> 00:36:19,092
button on click. That would set

495
00:36:19,146 --> 00:36:21,610
the state to the opposite value.

496
00:36:25,020 --> 00:36:29,464
And the label of the button would be either show

497
00:36:29,662 --> 00:36:33,260
all or height completed.

498
00:36:34,400 --> 00:36:37,804
And also let's import use state from

499
00:36:37,842 --> 00:36:41,404
react. That's it. Let's save it.

500
00:36:41,522 --> 00:36:45,552
Now we have a button. I would copy another styles and

501
00:36:45,606 --> 00:36:49,680
I would just add it here somewhere.

502
00:36:50,660 --> 00:36:54,556
I believe just in the bottom. So there are some styles

503
00:36:54,588 --> 00:36:58,550
for filter class. Let's save it. Now it's in the middle.

504
00:37:00,040 --> 00:37:04,100
Yes. Now we can see that state is toggling.

505
00:37:05,320 --> 00:37:09,220
Let's make this button work. Let's open app js.

506
00:37:09,980 --> 00:37:12,200
First of all let's create a filter.

507
00:37:14,060 --> 00:37:18,520
This would be extra logic for the filtering height

508
00:37:22,390 --> 00:37:28,726
height completed filter an

509
00:37:28,748 --> 00:37:33,190
object so is checked.

510
00:37:36,670 --> 00:37:40,394
This is a special symbol of not

511
00:37:40,432 --> 00:37:43,980
equal, not equal to true.

512
00:37:46,670 --> 00:37:50,060
And then we would use it here.

513
00:37:50,910 --> 00:37:55,574
So basically if let's

514
00:37:55,702 --> 00:37:59,290
put it down here so it's a little bit more readable.

515
00:37:59,870 --> 00:38:04,850
So will if height

516
00:38:06,550 --> 00:38:13,570
complete completed

517
00:38:14,010 --> 00:38:19,174
then we would show

518
00:38:19,212 --> 00:38:22,966
the logic. Otherwise it's empty. Then we

519
00:38:22,988 --> 00:38:24,680
can put sort down here.

520
00:38:28,750 --> 00:38:31,420
That's it. Let's save it.

521
00:38:34,590 --> 00:38:38,302
And we have a little error in the console because

522
00:38:38,356 --> 00:38:41,454
we have used a variable before it was

523
00:38:41,492 --> 00:38:44,800
declared. So let's replace and save again.

524
00:38:45,810 --> 00:38:49,550
Now let's refresh the browser. Let's hide.

525
00:38:50,130 --> 00:38:53,518
Now it works. That's it for the demo for the sake

526
00:38:53,534 --> 00:38:57,170
of time. I'll stop here, but you can proceed on your own.

527
00:38:57,320 --> 00:39:01,090
So it is possible to basically

528
00:39:01,160 --> 00:39:04,898
meet your has user accounts and authentication where you

529
00:39:04,904 --> 00:39:08,530
can use email and password or any other methods like

530
00:39:08,600 --> 00:39:12,750
GitHub login or Facebook login and so on. Also, I skipped

531
00:39:12,830 --> 00:39:16,666
the methods and publications you can read on the tutorial or

532
00:39:16,688 --> 00:39:20,506
in the documentation. So basically methods and publications are the

533
00:39:20,528 --> 00:39:23,960
security for the back end. And thanks for joining today.

