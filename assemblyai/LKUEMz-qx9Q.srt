1
00:01:28,210 --> 00:01:31,686
Hello everyone, my name is Jim. Thanks for coming to my talk on

2
00:01:31,788 --> 00:01:35,366
Terraform, Gitops and Kubernetes how to manage your infrastructure and

3
00:01:35,388 --> 00:01:38,726
applications as code a little bit of background on me.

4
00:01:38,828 --> 00:01:42,334
I've been working in the software world for over

5
00:01:42,372 --> 00:01:46,160
16 years now. I've had a number of roles at various companies.

6
00:01:46,610 --> 00:01:50,766
Currently I am a developer advocate with harness and

7
00:01:50,788 --> 00:01:53,898
if you'd like to get in touch with me, you can find me on Twitter.

8
00:01:53,994 --> 00:01:57,058
Here's my GitHub and my email address.

9
00:01:57,224 --> 00:02:00,674
So if you haven't heard of harness before, our mission is

10
00:02:00,712 --> 00:02:03,934
to enable every software engineering team in the world to deliver

11
00:02:03,982 --> 00:02:07,590
code reliably, efficiently and quickly to their users.

12
00:02:08,250 --> 00:02:11,590
So we have a software platform that covers the entire

13
00:02:11,660 --> 00:02:14,806
software delivery lifecycle from CI CD all the

14
00:02:14,828 --> 00:02:18,818
way into production, with features like cloud cost management,

15
00:02:18,914 --> 00:02:22,582
feature flags, and we recently acquired chaos native.

16
00:02:22,646 --> 00:02:26,826
So we'll be offering chaos engineering integrations in the near future.

17
00:02:27,008 --> 00:02:31,142
If you'd like to learn more, you can check out our website at harness IO.

18
00:02:31,286 --> 00:02:34,846
So in 2022, I hope that everyone has heard of

19
00:02:34,868 --> 00:02:38,778
infrastructure as code. There are a lot of different solutions, but there. But today I'll

20
00:02:38,794 --> 00:02:42,446
focus on terraform. Once you start learning about Terraform, you'll quickly want

21
00:02:42,468 --> 00:02:46,254
to get your code checked into a source code repository,

22
00:02:46,382 --> 00:02:49,794
hopefully git. And from there you'll need to structure that

23
00:02:49,832 --> 00:02:53,838
code and build a delivery pipeline. So today I'll

24
00:02:53,854 --> 00:02:56,966
share two approaches that I've seen development teams adopt and be

25
00:02:56,988 --> 00:03:00,390
successful managing code from development into production.

26
00:03:00,730 --> 00:03:03,590
Each has its own benefits and potential drawbacks.

27
00:03:04,250 --> 00:03:08,034
So we'll be looking at an approach that uses a terraform

28
00:03:08,082 --> 00:03:12,122
TFR file, one per environment and then another that

29
00:03:12,176 --> 00:03:15,866
uses directories, one per environment. So let's have

30
00:03:15,888 --> 00:03:18,698
a look at some of the tools we'll be using. So of course we'll be

31
00:03:18,704 --> 00:03:22,762
using terraform, we'll be using GitHub Docker.

32
00:03:22,826 --> 00:03:26,234
Hopefully everyone's used specific to terraform and Kubernetes

33
00:03:26,282 --> 00:03:30,266
is the Terraform Kubernetes provider and we'll be using drone CI.

34
00:03:30,378 --> 00:03:34,526
So hopefully the first three are familiar to everyone. The last two I'll

35
00:03:34,558 --> 00:03:38,494
show right here. So if you're unfamiliar with the terraform

36
00:03:38,542 --> 00:03:41,326
Kubernetes provider, it's pretty fantastic.

37
00:03:41,518 --> 00:03:44,414
There are a lot of ways to manage your kubernetes resources.

38
00:03:44,542 --> 00:03:48,294
Terraform is yet another tool to add to the pile. But I

39
00:03:48,332 --> 00:03:51,846
feel like if you're in an organization that's comfortable with Terraform, you should

40
00:03:51,868 --> 00:03:55,810
really consider the Kubernetes Terraform provider as an option for your kubernetes

41
00:03:55,890 --> 00:03:59,066
resources. Your deployments, your staple sets, your services,

42
00:03:59,168 --> 00:04:02,634
and so on. So what I'll be sharing today in these

43
00:04:02,672 --> 00:04:06,438
pipelines is specific to Kubernetes. This is a workflow

44
00:04:06,454 --> 00:04:09,802
that you could follow for any tool that has

45
00:04:09,856 --> 00:04:13,894
a or service that has a terraform provider.

46
00:04:14,022 --> 00:04:17,326
I was at a company where we used the GitHub provider to manage all of

47
00:04:17,348 --> 00:04:20,560
our GitHub repositories has code and it worked very similar.

48
00:04:21,010 --> 00:04:24,862
If you haven't heard of drone before, Drone is an open source container native tool

49
00:04:24,916 --> 00:04:28,034
written in Go. It was started in 2012,

50
00:04:28,072 --> 00:04:31,390
so drone turns ten this year. Drone was acquired by Harness

51
00:04:31,470 --> 00:04:35,950
in August of 2020. Drone is an extremely small footprint

52
00:04:36,110 --> 00:04:39,478
tool where you just need the server and a runner to

53
00:04:39,484 --> 00:04:42,614
start executing pipelines. It supports a variety of source code

54
00:04:42,652 --> 00:04:46,514
solutions. GitHub, BitBucket, GitLab. It's also multi os

55
00:04:46,562 --> 00:04:50,166
and multi architecture. So if you need to run builds on Windows or Mac or

56
00:04:50,188 --> 00:04:53,498
even arm, drone will work for all of them. So let's have

57
00:04:53,504 --> 00:04:57,398
a look at a demo of these two workflows in action. So first we'll

58
00:04:57,414 --> 00:04:59,930
start with the tfvar per environment.

59
00:05:00,850 --> 00:05:04,480
So here I have a repository and I have

60
00:05:05,090 --> 00:05:08,794
pods running in two namespaces, demo prod

61
00:05:08,842 --> 00:05:12,126
and demo dev. So let's take a look

62
00:05:12,148 --> 00:05:16,226
at the dev one. So this is the

63
00:05:16,248 --> 00:05:19,970
pod info project, just a simple project microservice

64
00:05:20,310 --> 00:05:23,858
that tells you about the pod, where it's running. So this is

65
00:05:24,024 --> 00:05:27,574
in the dev namespace and tells you the pod is

66
00:05:27,612 --> 00:05:31,094
based on the promote workflow that I'm showing here.

67
00:05:31,292 --> 00:05:34,626
So let's make a change and see it through. So I'll

68
00:05:34,658 --> 00:05:38,540
go into the deployment terraform file and change the message.

69
00:05:39,070 --> 00:05:41,580
Hello Conf 42,

70
00:05:44,430 --> 00:05:47,530
new message. And we'll just commit that right to the main branch.

71
00:05:49,070 --> 00:05:52,670
This is going to kick off my drone pipeline

72
00:05:53,970 --> 00:05:57,162
if I click it correctly. There we go. So here's

73
00:05:57,226 --> 00:06:00,666
the demo dev pipeline kicking off clones, my repositories,

74
00:06:00,778 --> 00:06:04,210
sets my cube configuration, initializes the environment

75
00:06:05,270 --> 00:06:08,386
and then runs and apply and it's complete.

76
00:06:08,488 --> 00:06:12,082
So now if we go look at the pod, we should see our message

77
00:06:12,136 --> 00:06:15,986
if we refresh and once we reestablish the

78
00:06:16,088 --> 00:06:19,494
tunnel port forward. Yes, hello conf 42 now

79
00:06:19,532 --> 00:06:23,090
appears so. One feature of drone is the ability

80
00:06:23,170 --> 00:06:26,946
to handle a promotion pipeline. So that's how I've configured

81
00:06:26,978 --> 00:06:30,682
this one. So all I have to do is take that build and promote it

82
00:06:30,736 --> 00:06:34,026
to prod in this case. So here's a new

83
00:06:34,048 --> 00:06:37,126
pipeline kicked off. You'll see the name is different demo prod.

84
00:06:37,158 --> 00:06:40,426
This time similar steps are running,

85
00:06:40,608 --> 00:06:44,142
configuration initialization and now an apply,

86
00:06:44,196 --> 00:06:48,062
but this time it's using the prod TFRS file. All right,

87
00:06:48,116 --> 00:06:52,110
the deployment is complete and we can try forwarding

88
00:06:52,870 --> 00:06:57,074
into the prod pod 98,

89
00:06:57,272 --> 00:07:00,260
98, yes,

90
00:07:01,030 --> 00:07:04,418
here we are in the prod namespace with our new config conf

91
00:07:04,504 --> 00:07:08,418
42 message. So a couple of thoughts on that workflow

92
00:07:08,594 --> 00:07:12,214
on TFR per environment. So it works well for a small amount

93
00:07:12,252 --> 00:07:15,382
of tightly coupled resources, and it works

94
00:07:15,436 --> 00:07:18,886
well when both environments or multiple, however many multiple

95
00:07:18,918 --> 00:07:22,298
environments, they're all running continuously. So now let's look at the

96
00:07:22,304 --> 00:07:26,102
other approach to a directory based approach in this other repository

97
00:07:26,166 --> 00:07:29,898
that I have. So here is the

98
00:07:30,064 --> 00:07:33,354
other repository, and you'll see here we have dev and prod,

99
00:07:33,402 --> 00:07:36,974
separate directories. So if we look at both of them,

100
00:07:37,012 --> 00:07:41,390
they have the same files. The only differences now

101
00:07:41,460 --> 00:07:45,214
are going to be in the locals TF, where we've got namespace

102
00:07:45,262 --> 00:07:48,994
that has to be different. Other than that, everything is

103
00:07:49,032 --> 00:07:52,434
pretty much the same. So if we

104
00:07:52,472 --> 00:07:56,070
bring up a port forward to the dev

105
00:07:56,140 --> 00:07:59,458
pod, here it is, pod info directory

106
00:07:59,554 --> 00:08:04,086
based, and we

107
00:08:04,108 --> 00:08:08,006
can make some changes in here and see them reflected. So let's

108
00:08:08,038 --> 00:08:10,700
go to write in the new message,

109
00:08:11,790 --> 00:08:15,718
same as before, hellocom 42 and we'll commit

110
00:08:15,734 --> 00:08:19,254
that right into main and watch the drone

111
00:08:19,302 --> 00:08:23,120
job kick off. Same steps are running

112
00:08:24,130 --> 00:08:27,374
initialization and

113
00:08:27,412 --> 00:08:31,070
now an apply step. Great. So now if I come over

114
00:08:31,140 --> 00:08:33,380
and reestablish my port forward.

115
00:08:34,870 --> 00:08:37,460
There we go. Our message is there. Perfect.

116
00:08:37,910 --> 00:08:40,930
So if we go back to the repositories,

117
00:08:41,590 --> 00:08:45,510
something I can do in this workflow that I couldn't do in the other,

118
00:08:45,660 --> 00:08:49,906
or I couldn't do easily, is tear

119
00:08:49,938 --> 00:08:54,546
this down. Let's rename this to destroyed.

120
00:08:54,578 --> 00:08:58,602
I like renaming files to underscore destroyed. It's very obvious

121
00:08:58,736 --> 00:09:01,738
what's running and what's not if you do it this way.

122
00:09:01,904 --> 00:09:09,158
So I'm going to say destroy

123
00:09:09,174 --> 00:09:12,160
the dev deployment. I'll do this in a pull request this time,

124
00:09:14,130 --> 00:09:15,550
just to be safe.

125
00:09:17,170 --> 00:09:20,782
And we'll watch the drone pull request run this time.

126
00:09:20,836 --> 00:09:24,798
This time it's going to run a plan. Great. So it's telling

127
00:09:24,814 --> 00:09:27,938
me it's going to destroy the deployment, which is exactly what I

128
00:09:27,944 --> 00:09:29,220
want, because this is Dev.

129
00:09:33,420 --> 00:09:37,900
I will merge this in and

130
00:09:37,970 --> 00:09:39,660
go back and watch the pipeline.

131
00:09:41,840 --> 00:09:44,220
Great. So there it is being destroyed.

132
00:09:45,280 --> 00:09:49,116
So if you've ever worked with a

133
00:09:49,138 --> 00:09:52,336
CI pipeline, CD pipeline for Kubernetes, and wondered how to

134
00:09:52,358 --> 00:09:55,120
handle when you delete a YAML file,

135
00:09:56,500 --> 00:09:59,948
if you delete a YAML file, your CD pipeline doesn't have it there. It can't

136
00:09:59,964 --> 00:10:03,636
run Kubectl delete on the file, but if

137
00:10:03,658 --> 00:10:07,300
you work with it in terraform, everything cloud just be an apply

138
00:10:07,370 --> 00:10:11,510
operation. If a file is removed, that's fine.

139
00:10:12,120 --> 00:10:15,064
Terraform will go ahead and remove that resource for you.

140
00:10:15,102 --> 00:10:18,936
So it's a potential workflow that really isn't possible if

141
00:10:18,958 --> 00:10:21,240
you're doing YAML based manifests.

142
00:10:23,020 --> 00:10:26,724
So that's that demo. Some thoughts on the directory

143
00:10:26,772 --> 00:10:30,588
approaches. So the pull request workflow, I could have done

144
00:10:30,754 --> 00:10:34,350
a pull request for prod where I couldn't have done it in the previous example.

145
00:10:34,960 --> 00:10:38,076
And that ability to tear down the

146
00:10:38,098 --> 00:10:41,456
development resources as I just did, I think is a big

147
00:10:41,478 --> 00:10:45,104
advantage. So I can save some money, save some resources and

148
00:10:45,142 --> 00:10:48,784
not run stuff in development when it's not needed.

149
00:10:48,982 --> 00:10:53,060
So the big question is, is this Gitops?

150
00:10:53,640 --> 00:10:57,540
What we just did, we're using Git, we're following a pipeline,

151
00:10:58,200 --> 00:11:02,070
is this Gitops? So there is now a

152
00:11:03,560 --> 00:11:07,720
Gitops dev, which is created by a working

153
00:11:07,790 --> 00:11:12,136
group comprised of members of various companies that

154
00:11:12,158 --> 00:11:15,368
have created this resource. So open Gitops is

155
00:11:15,374 --> 00:11:19,148
a set of open resources standards, best practices and community focused education to

156
00:11:19,154 --> 00:11:22,444
help organizations adopt a structured, standardized approach to

157
00:11:22,482 --> 00:11:25,996
implementing Gitops, which is great. So now we have a really good

158
00:11:26,018 --> 00:11:29,150
resource to hopefully standardize all this.

159
00:11:29,780 --> 00:11:34,268
And they've given us four principles, so it needs to be declarative,

160
00:11:34,444 --> 00:11:38,524
versioned and immutable, pulled automatically and continuously

161
00:11:38,572 --> 00:11:42,256
reconciled. So the first two principles here, I think what

162
00:11:42,278 --> 00:11:45,776
we just went through. Absolutely, we're following those pulled

163
00:11:45,808 --> 00:11:49,696
automatically, maybe not as much. We're really only executing

164
00:11:49,728 --> 00:11:53,472
this when commit events are happening in the repository

165
00:11:53,536 --> 00:11:56,810
or deployment event. In the first example, promotion event,

166
00:11:57,340 --> 00:12:01,476
continuously reconciled. Yeah, I don't think we're meeting that we're

167
00:12:01,508 --> 00:12:04,776
not running something continuously. Looking at the current state of

168
00:12:04,798 --> 00:12:08,604
the infrastructure resources, comparing it to the desired state and

169
00:12:08,642 --> 00:12:10,350
reconciling them if needed.

170
00:12:12,000 --> 00:12:15,804
So that's something to think about. So the two

171
00:12:15,842 --> 00:12:19,064
big tools that everybody talks about when they talk about Gitops

172
00:12:19,192 --> 00:12:22,768
are Argo and flux. So the question I'd like everyone to

173
00:12:22,774 --> 00:12:26,956
come away from this with is, can we follow Gitops

174
00:12:27,068 --> 00:12:30,496
without flux or Argo? So these

175
00:12:30,518 --> 00:12:33,380
are two tools, they're great tools.

176
00:12:34,040 --> 00:12:37,508
Nothing's perfect. And not everything is running in a

177
00:12:37,514 --> 00:12:38,950
Kubernetes cluster. Right.

178
00:12:40,840 --> 00:12:44,604
Argo recently had a fairly high profile

179
00:12:44,672 --> 00:12:48,644
security vulnerability which could have potentially led to an attacker

180
00:12:48,692 --> 00:12:52,040
obtaining sensitive data from your Kubernetes cluster.

181
00:12:53,580 --> 00:12:57,124
So what do we do if we're not using Kubernetes

182
00:12:57,172 --> 00:13:00,616
and we want to do Gitops? Kubernetes is great,

183
00:13:00,638 --> 00:13:03,628
but there are a lot of other ways that we can run software in 2022,

184
00:13:03,634 --> 00:13:07,020
and we're just going to have more in the future, not less.

185
00:13:07,090 --> 00:13:10,968
So using Git as a single resources of truth for your infrastructure and

186
00:13:10,994 --> 00:13:14,672
applications brings a lot of benefits. So let's keep talking

187
00:13:14,726 --> 00:13:18,064
about all the different ways that we can safely and securely apply that

188
00:13:18,102 --> 00:13:21,600
configuration to our environments through Gitops principles

189
00:13:22,600 --> 00:13:25,796
and with these different tools. So with

190
00:13:25,818 --> 00:13:28,740
that, I will leave you with some resources.

191
00:13:29,320 --> 00:13:32,324
So harness we have our own slack community.

192
00:13:32,522 --> 00:13:36,336
At harnesscommunity slack.com we have a discourse

193
00:13:36,368 --> 00:13:39,940
that you can get involved with. At community harness IO.

194
00:13:40,440 --> 00:13:45,608
We also have regular meetups@meetup.com slash harness if

195
00:13:45,614 --> 00:13:49,312
you want to learn more about drone, the official documentation is but at Docs drone

196
00:13:49,396 --> 00:13:53,404
IO and I recently wrote an

197
00:13:53,442 --> 00:13:56,744
article blog post on how to run your own drone CI.

198
00:13:56,792 --> 00:14:00,444
So if you liked what you saw in those demos, it's very easy to get

199
00:14:00,482 --> 00:14:04,104
started running your own drone CI right on your laptop. Anything that can run Docker.

200
00:14:04,232 --> 00:14:07,550
You'll get started in just a few minutes at this link at the bottom.

201
00:14:08,480 --> 00:14:11,772
And if this sounds interesting to you, if being part of a company

202
00:14:11,826 --> 00:14:15,812
that creates tools to help developers build, test, deploy and manage

203
00:14:15,866 --> 00:14:19,168
their code more effectively, we are hiring.

204
00:14:19,344 --> 00:14:22,816
Just go to harness IO and look for the career section.

205
00:14:23,008 --> 00:14:26,564
And with that we've reached the end. Thank you very much for

206
00:14:26,602 --> 00:14:28,720
watching. I hope you enjoy the rest of the conference.

