1
00:00:24,090 --> 00:00:27,826
Resilience modeling guides teams to anticipate scenarios

2
00:00:27,938 --> 00:00:31,462
before they lead to incidents. Teams then

3
00:00:31,516 --> 00:00:35,670
prioritize these scenarios as hypothesis to test through

4
00:00:35,740 --> 00:00:39,206
experimentation. A resilience model

5
00:00:39,308 --> 00:00:43,014
documents the scenarios that may impact the system and

6
00:00:43,132 --> 00:00:46,630
the controls in place to guard against such impact.

7
00:00:46,970 --> 00:00:51,054
Experiments allows observation of these controls to

8
00:00:51,092 --> 00:00:55,290
understand their effectiveness in detecting and preventing incidents.

9
00:00:55,450 --> 00:00:58,826
My name is Guillonard Geroch and I am principal developer advocate

10
00:00:58,858 --> 00:01:01,962
advocate at AWS, focusing on resilience,

11
00:01:02,026 --> 00:01:05,666
chaos engineering and architecture. In this session, you will

12
00:01:05,688 --> 00:01:09,310
learn how to build a resilience model to create valuable

13
00:01:09,390 --> 00:01:12,562
hypotheses, and they allow you to

14
00:01:12,616 --> 00:01:16,630
maximize the value of your chaos engineering experiments.

15
00:01:17,930 --> 00:01:21,574
Most of you probably recognize this flywheel showing the

16
00:01:21,612 --> 00:01:25,714
faces of chaos engineering. It takes you from understanding

17
00:01:25,762 --> 00:01:30,022
the steady state of your system, to forming a hypothesis,

18
00:01:30,166 --> 00:01:33,914
to designing and running an experiments, to verifying your

19
00:01:33,952 --> 00:01:38,218
experiments by comparing to the steady state, and then finally to learning

20
00:01:38,304 --> 00:01:41,840
from the experiments and then improving the system.

21
00:01:43,650 --> 00:01:47,518
Many sessions around chaos engineering, they focus

22
00:01:47,604 --> 00:01:51,066
on this phase, how to design and run experiments,

23
00:01:51,098 --> 00:01:55,166
and that's great. I love seeing examples of how chaos engineering

24
00:01:55,198 --> 00:01:58,450
tools work, or stories from real world

25
00:01:58,520 --> 00:02:01,090
use cases of chaos engineering.

26
00:02:01,990 --> 00:02:05,394
Sometimes sessions also covers the verify phase

27
00:02:05,442 --> 00:02:09,350
where we look at the results of these experiments.

28
00:02:10,490 --> 00:02:14,310
In this session, though, I want to focus on the before

29
00:02:14,460 --> 00:02:18,822
the hypothesis phase. How do you actually create valuable

30
00:02:18,886 --> 00:02:22,694
hypotheses that allow you to maximize the value of your chaos

31
00:02:22,742 --> 00:02:26,490
engineering experiments? Spending time before running

32
00:02:26,560 --> 00:02:30,002
experiments, it allows you to use your resources

33
00:02:30,086 --> 00:02:33,534
more effectively. And this

34
00:02:33,572 --> 00:02:37,310
goes back to the four key capabilities that a system needs

35
00:02:37,380 --> 00:02:40,410
to have in order to be able to be resilient,

36
00:02:40,570 --> 00:02:44,466
anticipate, monitor, respond, and finally

37
00:02:44,568 --> 00:02:48,002
learn chaos engineering. Well,

38
00:02:48,056 --> 00:02:50,862
that mostly falls in that fourth capability,

39
00:02:51,006 --> 00:02:53,250
learning about our systems.

40
00:02:54,150 --> 00:02:58,194
But in order to prevent failures, we need to be able to anticipate,

41
00:02:58,242 --> 00:03:01,320
and that's where resilience modeling comes in.

42
00:03:02,090 --> 00:03:05,634
So, to simplify a bit here, we want to anticipate

43
00:03:05,762 --> 00:03:09,434
to learn better. So I

44
00:03:09,472 --> 00:03:12,806
want to start by sharing a quick story from AWS.

45
00:03:12,918 --> 00:03:16,922
And this was published as a service event, an event which

46
00:03:16,976 --> 00:03:20,574
I would encourage you all to read so you can access this

47
00:03:20,612 --> 00:03:23,630
article using the QR code on this slide.

48
00:03:24,850 --> 00:03:28,894
In 2012, the ELB service team had tasked one

49
00:03:28,932 --> 00:03:32,654
of their operators to perform a routine maintenance procedure on

50
00:03:32,692 --> 00:03:36,238
the ELB control plane. The operator

51
00:03:36,334 --> 00:03:39,774
performed the procedure as instructed, but this resulted

52
00:03:39,822 --> 00:03:43,330
in the inadvertent lesion of configuration data

53
00:03:43,400 --> 00:03:47,190
from the control plane. With this data, the control

54
00:03:47,260 --> 00:03:51,042
plane lost the ability to manage existing ELB

55
00:03:51,106 --> 00:03:54,342
resources, and this meant that any

56
00:03:54,396 --> 00:03:58,022
calls to modify existing load balancers began to fail.

57
00:03:58,086 --> 00:04:02,358
While calls to create and manage new ELB resources

58
00:04:02,454 --> 00:04:05,882
continued to succeed. So the service team

59
00:04:05,936 --> 00:04:10,006
took time to troubleshoot and identify the cause of the behavior.

60
00:04:10,118 --> 00:04:14,074
And when they realized what have happened, they realized they didn't

61
00:04:14,122 --> 00:04:18,142
really have any recovery procedure to restore that deleted data.

62
00:04:18,276 --> 00:04:21,594
So they had to develop a recovery plan on the spot.

63
00:04:21,722 --> 00:04:25,534
And after putting it into action, they were able to recreate the missing

64
00:04:25,582 --> 00:04:28,670
data and then finally restore

65
00:04:28,750 --> 00:04:29,780
that service.

66
00:04:31,350 --> 00:04:34,494
So, using resilience modeling,

67
00:04:34,542 --> 00:04:38,066
well, this event could have been anticipated and prevented,

68
00:04:38,178 --> 00:04:41,526
because based on that resilience modeling, we could

69
00:04:41,548 --> 00:04:45,058
have seen that we were lacking these recovery procedures.

70
00:04:45,234 --> 00:04:49,446
And using the resilience model, we could have formed an hypothesis,

71
00:04:49,558 --> 00:04:53,146
and we could then use the hypothesis to perform

72
00:04:53,248 --> 00:04:55,690
different chaos engineering experiments.

73
00:04:57,390 --> 00:05:01,194
So we have worked with numerous customers in North America,

74
00:05:01,242 --> 00:05:04,954
Latin America, Europe and Asia to anticipate incidents

75
00:05:05,002 --> 00:05:08,798
using the practices that I'm going to share with you today. And these

76
00:05:08,884 --> 00:05:12,710
customers, they've shared that they have probably avoided

77
00:05:12,810 --> 00:05:16,226
over 65 incidents if they had created a

78
00:05:16,248 --> 00:05:19,726
resilience model prior to go live. And we've

79
00:05:19,758 --> 00:05:24,014
also seen where creating a resilience model creates a shared

80
00:05:24,062 --> 00:05:27,382
understanding of how a system works in a team,

81
00:05:27,436 --> 00:05:30,854
and it becomes a vehicle for shared learning about

82
00:05:30,892 --> 00:05:34,550
what can go wrong. So by creating a resilience model,

83
00:05:34,620 --> 00:05:38,406
these Fortune 500 companies are preventing incidents

84
00:05:38,438 --> 00:05:41,862
and gaining confidence in the resilience of their systems

85
00:05:42,006 --> 00:05:44,810
and in how they operate the systems.

86
00:05:45,950 --> 00:05:49,094
So, before we get into the process of resilience modeling,

87
00:05:49,142 --> 00:05:52,670
let's just first define some important terms. First,

88
00:05:52,740 --> 00:05:56,126
the term system. So, this is a

89
00:05:56,148 --> 00:06:00,334
reference architecture diagram for a container based e commerce application

90
00:06:00,532 --> 00:06:04,382
running on AWS and AWS. An architecture diagram.

91
00:06:04,446 --> 00:06:08,126
This shows the components in the IT stack for hosting

92
00:06:08,158 --> 00:06:11,378
the application, but it doesn't show the entire system.

93
00:06:11,544 --> 00:06:15,394
For example, this diagram doesn't highlight the version

94
00:06:15,442 --> 00:06:19,094
control system for the infrastructure as code, or perhaps the

95
00:06:19,132 --> 00:06:22,694
monitoring platform for understanding the system state.

96
00:06:22,892 --> 00:06:26,470
It also doesn't show the human operators, the people

97
00:06:26,540 --> 00:06:30,554
who are managing the system at runtime. So even if we

98
00:06:30,592 --> 00:06:33,786
sometimes think of a system as fully represented by an

99
00:06:33,808 --> 00:06:37,034
architecture diagram, that's really not the case.

100
00:06:37,152 --> 00:06:40,570
A lot is missing from that architecture diagram.

101
00:06:41,730 --> 00:06:45,354
A system. It includes the tech stack, which would host

102
00:06:45,402 --> 00:06:48,894
the ecommerce application. It's the components that

103
00:06:48,932 --> 00:06:51,600
the users of the system communicate with.

104
00:06:52,770 --> 00:06:56,418
But there are additional controls in place to help the system

105
00:06:56,504 --> 00:06:59,886
continue to function over time. Things like autoscaling

106
00:06:59,918 --> 00:07:03,694
groups, circuit breakers in the code failover logic

107
00:07:03,742 --> 00:07:07,046
for the RDS database. Those are just some of

108
00:07:07,068 --> 00:07:10,966
these automated controls which respond to signals coming from

109
00:07:10,988 --> 00:07:14,530
the it stack and then change the it stack to ensure

110
00:07:14,610 --> 00:07:18,710
continued availability. And in

111
00:07:18,780 --> 00:07:22,554
addition to the automation, there are human operators, the people

112
00:07:22,592 --> 00:07:26,522
who receive alerts from the system. They have dashboards for observing the health

113
00:07:26,576 --> 00:07:29,914
of the system. They can respond by restarting or

114
00:07:29,952 --> 00:07:33,742
redeploying components as needed to ensure that users can

115
00:07:33,796 --> 00:07:37,070
continue to access the system. And all of these

116
00:07:37,140 --> 00:07:41,086
things, they make up a system. And this is important because

117
00:07:41,188 --> 00:07:45,454
both the automation and the operators, they can change the it stack,

118
00:07:45,582 --> 00:07:49,630
and that could result in both causing downtime

119
00:07:49,710 --> 00:07:53,266
or preventing downtime. So when modeling the resilience of the

120
00:07:53,288 --> 00:07:56,614
system, we need to consider these elements in addition to the

121
00:07:56,652 --> 00:07:59,974
components in the architecture diagram that we're used

122
00:08:00,012 --> 00:08:03,590
to seeing. So what is a system

123
00:08:03,660 --> 00:08:07,398
function? Well, many of the systems you work with, they are probably

124
00:08:07,484 --> 00:08:10,406
quite large and diverse in terms of their components,

125
00:08:10,438 --> 00:08:14,330
the dependencies, and the team supporting the system. So,

126
00:08:14,400 --> 00:08:18,406
to reduce the number of elements that are considered during modeling,

127
00:08:18,518 --> 00:08:21,994
we align our thinking with the key functions

128
00:08:22,042 --> 00:08:25,614
of the system. So in order

129
00:08:25,652 --> 00:08:29,246
to prevent what could go wrong with specific applications, we want to

130
00:08:29,268 --> 00:08:33,430
dive deeper into user journeys or system functions,

131
00:08:33,610 --> 00:08:37,838
and a user journey or a system function that's related to the capability

132
00:08:37,934 --> 00:08:41,506
that a specific workload has to deliver value to

133
00:08:41,528 --> 00:08:44,862
the business. Different workloads might be related to

134
00:08:44,936 --> 00:08:48,566
multiple different user journeys. If we take an

135
00:08:48,588 --> 00:08:51,734
ecommerce platform, for example, we should be able to break it down

136
00:08:51,772 --> 00:08:54,450
into multiple areas, authentication,

137
00:08:54,610 --> 00:08:58,130
personalization, ordering, delivery,

138
00:08:58,210 --> 00:09:01,734
and so on. Focusing in on all of those areas

139
00:09:01,782 --> 00:09:05,338
is mostly painful, and it would lead the application

140
00:09:05,424 --> 00:09:09,162
owners into an infinite engagement. And this is why we want to

141
00:09:09,216 --> 00:09:12,478
dive deeper into the notion of breaking it down in

142
00:09:12,564 --> 00:09:15,790
these smaller pieces. So,

143
00:09:15,860 --> 00:09:19,502
thinking of the example we just looked at, we can have an example

144
00:09:19,556 --> 00:09:23,186
of selling an item, bringing this as the main focus.

145
00:09:23,288 --> 00:09:27,662
It helps us understand what are the services within that critical

146
00:09:27,726 --> 00:09:31,490
path, and to exercise how that could

147
00:09:31,560 --> 00:09:34,706
fail. And this is ultimately the goal of breaking the

148
00:09:34,728 --> 00:09:37,510
system into these smaller user journeys.

149
00:09:39,370 --> 00:09:42,726
So after we've identified the system functions for

150
00:09:42,748 --> 00:09:46,342
a system, we need to understand how the system function might

151
00:09:46,396 --> 00:09:50,010
behave and how it might fail to completely meet

152
00:09:50,080 --> 00:09:53,686
the business objectives. And this then enables

153
00:09:53,718 --> 00:09:57,162
us to begin and associate a cost to these

154
00:09:57,216 --> 00:10:00,986
failures. Failure modes, they should be

155
00:10:01,008 --> 00:10:04,846
written from the perspective of the business or the business

156
00:10:04,948 --> 00:10:08,494
process the system supports, and it shouldn't call out the

157
00:10:08,532 --> 00:10:11,918
cause of the actual failure mode. It's typical that a

158
00:10:11,924 --> 00:10:15,394
failure mode will have more than one potential cause as well.

159
00:10:15,512 --> 00:10:19,170
So for each system function, you should try to consider

160
00:10:19,240 --> 00:10:22,834
if the function were to fail, or if it were to

161
00:10:22,872 --> 00:10:26,802
over or underperform. Consider if the function succeeded

162
00:10:26,866 --> 00:10:30,134
intermittently, or if the function were to execute when it

163
00:10:30,172 --> 00:10:33,590
shouldn't. So if we then look

164
00:10:33,660 --> 00:10:37,334
at function, let's say we're looking at

165
00:10:37,372 --> 00:10:41,114
a user login. Well, if there's no function, it means

166
00:10:41,152 --> 00:10:44,618
that we have login failure. If we instead

167
00:10:44,704 --> 00:10:48,614
have over function, it might mean that users

168
00:10:48,662 --> 00:10:52,478
log in and have administrative rights under

169
00:10:52,564 --> 00:10:56,558
function. Well, that could mean that users are logging in, but they only get read

170
00:10:56,644 --> 00:11:01,054
only access. Intermittent function might mean

171
00:11:01,092 --> 00:11:04,706
that only some of the users are able to log into the system

172
00:11:04,888 --> 00:11:08,654
and unintentional function that the wrong user

173
00:11:08,702 --> 00:11:09,940
gets logged in.

174
00:11:12,870 --> 00:11:16,718
So, to then determine the loss to the

175
00:11:16,744 --> 00:11:20,354
business of each of these failure modes, after all, preventing loss

176
00:11:20,402 --> 00:11:24,194
to the business is the main reason why we're trying to improve resilience

177
00:11:24,242 --> 00:11:27,634
in the first place. For each

178
00:11:27,692 --> 00:11:31,674
loss, we should then try to calculate the cost to the business of that

179
00:11:31,712 --> 00:11:36,042
loss. Often this will be quantified through customer

180
00:11:36,176 --> 00:11:39,750
satisfaction, customer trust, lost sales,

181
00:11:39,920 --> 00:11:43,310
and might even be fines. And the application team

182
00:11:43,380 --> 00:11:47,338
can then later weigh the implementation and operation cost of controls

183
00:11:47,434 --> 00:11:49,950
versus what they are actually mitigating.

184
00:11:51,330 --> 00:11:54,714
So then, after identifying

185
00:11:54,762 --> 00:11:58,626
failure modes and their cost to the business, the team will anticipate the

186
00:11:58,648 --> 00:12:02,082
scenarios that would lead to each failure mode, and can then begin

187
00:12:02,136 --> 00:12:05,250
to align controls to these different scenarios.

188
00:12:06,170 --> 00:12:09,622
And these controls, well, they will be one out of four

189
00:12:09,676 --> 00:12:13,202
different types. Detective controls.

190
00:12:13,266 --> 00:12:16,806
They are used to understand when the failure scenario has

191
00:12:16,828 --> 00:12:20,534
occurred or when it's about to occur. That could, for instance,

192
00:12:20,582 --> 00:12:23,942
be alarms on the number of error responses sent to client,

193
00:12:24,006 --> 00:12:27,482
or it might be decline in the number of orders per

194
00:12:27,536 --> 00:12:31,590
second in our system. Preventive controls.

195
00:12:31,670 --> 00:12:35,294
Those are the type of mechanisms that we put in place to

196
00:12:35,412 --> 00:12:39,674
prevent impairment to the system when the failure scenario has incurred.

197
00:12:39,802 --> 00:12:42,554
I mentioned circuit breakers in the code earlier.

198
00:12:42,602 --> 00:12:46,510
That's one example. It might also be different types of redundancy

199
00:12:46,590 --> 00:12:49,010
that we put in place in the architecture.

200
00:12:49,910 --> 00:12:53,666
Corrective controls. These are mechanisms or procedures in

201
00:12:53,688 --> 00:12:57,254
place to clear the system of impairment if it has been

202
00:12:57,292 --> 00:13:01,970
affected by the failure scenario. And then testing

203
00:13:02,130 --> 00:13:05,366
controls. Those are the type of tests that we

204
00:13:05,388 --> 00:13:09,462
have in place to try to detect whether the system is susceptible

205
00:13:09,526 --> 00:13:13,654
to a failure scenario. So these are the four types

206
00:13:13,782 --> 00:13:17,354
and detective controls. Well, how can you detect that this happens?

207
00:13:17,472 --> 00:13:21,482
Preventive controls. Are you taking any measures to avoid this failure?

208
00:13:21,626 --> 00:13:24,926
Recovery controls. If it happens, what do you do? How do you

209
00:13:24,948 --> 00:13:28,394
recover? And testing controls, do you have any processes

210
00:13:28,442 --> 00:13:32,366
to test against this failure? And when

211
00:13:32,388 --> 00:13:35,630
we're creating a resilience model, you want to map the losses

212
00:13:35,710 --> 00:13:40,050
to their failure modes and the failure modes to their failure scenario.

213
00:13:40,390 --> 00:13:43,966
Each failure mode may have one or more failure

214
00:13:43,998 --> 00:13:48,310
scenarios. And each failure scenario, it's going to have multiple controls.

215
00:13:49,370 --> 00:13:52,886
So if we look at an example where a failure mode was

216
00:13:52,988 --> 00:13:56,374
anticipated for a data distribution system,

217
00:13:56,572 --> 00:14:00,490
if data was not fully transferred to clients,

218
00:14:01,150 --> 00:14:04,700
there was a potential for fines to be issued to the business.

219
00:14:05,310 --> 00:14:08,726
Two causes of this failure mode were identified

220
00:14:08,918 --> 00:14:11,530
and then the controls for detection,

221
00:14:11,690 --> 00:14:15,434
prevention and correction were also identified.

222
00:14:15,562 --> 00:14:19,422
The team in this case, they didn't have any mechanism for testing this

223
00:14:19,476 --> 00:14:22,598
scenario. So we have the business loss,

224
00:14:22,714 --> 00:14:26,114
the failure mode, the scenario and the

225
00:14:26,152 --> 00:14:29,490
controls. Now,

226
00:14:29,560 --> 00:14:33,342
as I think most of you know, an hypothesis that's a proposed

227
00:14:33,406 --> 00:14:37,634
explanation for any type of phenomenon. For a hypothesis

228
00:14:37,682 --> 00:14:41,362
to be a scientific hypothesis, the scientific method

229
00:14:41,426 --> 00:14:44,966
requires that one can test it. And the way we test them,

230
00:14:45,068 --> 00:14:48,890
well, that is of course through chaos engineering experiments

231
00:14:50,190 --> 00:14:53,450
hypothesis, it's usually written in the form

232
00:14:53,520 --> 00:14:57,878
of an if then statement, and that gives us a possibility

233
00:14:58,054 --> 00:15:01,566
if, and explains what may happen because of

234
00:15:01,588 --> 00:15:05,502
the possibility then. And we

235
00:15:05,556 --> 00:15:08,910
then make use of the failure scenario and the controls.

236
00:15:09,490 --> 00:15:12,960
If failure scenario, then preventive control.

237
00:15:13,750 --> 00:15:17,122
If failure scenario, then detective control and

238
00:15:17,176 --> 00:15:20,962
recovery control, for instance. So going

239
00:15:21,016 --> 00:15:24,194
back to our previous example with the data distribution system,

240
00:15:24,312 --> 00:15:27,794
we can start to create high quality hypothesis

241
00:15:27,842 --> 00:15:31,570
from our model. If network

242
00:15:31,650 --> 00:15:35,526
mutates the response, then there is a checksum to

243
00:15:35,548 --> 00:15:39,094
verify the message content, and application will alert

244
00:15:39,142 --> 00:15:42,246
if checksum mismatches.

245
00:15:42,438 --> 00:15:46,602
And this then helps us to create a very clear and very

246
00:15:46,656 --> 00:15:50,314
testable hypothesis. We understand the scenario

247
00:15:50,362 --> 00:15:53,902
we want to test and we know the controls that are in place for that

248
00:15:53,956 --> 00:15:57,818
specific scenario. We can now use this hypothesis

249
00:15:57,914 --> 00:16:00,990
in our chaos engineering experiments.

250
00:16:02,210 --> 00:16:05,554
So let's now use the rest of this time

251
00:16:05,592 --> 00:16:09,106
to begin building a resilience model that we can then use to

252
00:16:09,128 --> 00:16:13,890
create hypothesis. And we're going to use our online storefront.

253
00:16:14,230 --> 00:16:18,342
So this is an architecture diagram for an online storefront based

254
00:16:18,396 --> 00:16:22,582
on Kubernetes running in Amazon eks. The application also

255
00:16:22,636 --> 00:16:25,986
uses DynamodB, Aurora, MySQL,

256
00:16:26,098 --> 00:16:29,370
elasticache for redis and RabbitmQ.

257
00:16:29,710 --> 00:16:33,542
In addition to the components shown here, there is a GitHub

258
00:16:33,606 --> 00:16:37,558
repository which provides CI, CD, and we have an operations

259
00:16:37,654 --> 00:16:41,266
team which can access any part of the system in production

260
00:16:41,318 --> 00:16:44,542
during operations. So then we have to ask,

261
00:16:44,596 --> 00:16:48,160
what are some of the key system functions for this system?

262
00:16:48,930 --> 00:16:52,882
Well, in this case, we can see the critical pathway for the

263
00:16:52,936 --> 00:16:56,146
submit order function. Orders are sent

264
00:16:56,248 --> 00:17:00,066
by the user through the storefront system. Custom code

265
00:17:00,168 --> 00:17:03,614
communicates with the payments processor, the pricing API

266
00:17:03,662 --> 00:17:06,998
and the inventory API to process the order

267
00:17:07,164 --> 00:17:11,442
for the submit order function. What are the different failure modes?

268
00:17:11,586 --> 00:17:15,382
So we can now use the no function over function,

269
00:17:15,516 --> 00:17:19,142
under function, intermittent function and unintentional

270
00:17:19,206 --> 00:17:22,380
function as a template when we're creating this.

271
00:17:23,470 --> 00:17:26,986
So if we were to model this submit order,

272
00:17:27,088 --> 00:17:30,986
we need to ask us these questions. What are the failure modes,

273
00:17:31,098 --> 00:17:34,874
what scenarios would cause the failure modes, and what controls

274
00:17:34,922 --> 00:17:37,790
are in place to mitigate these scenarios?

275
00:17:38,930 --> 00:17:42,694
So let's start the model. The failure mode is order submission

276
00:17:42,762 --> 00:17:46,446
fails. So our first failure

277
00:17:46,478 --> 00:17:50,606
scenario is that the TLS certificate on the application load balancer

278
00:17:50,638 --> 00:17:54,178
is expired. We have detective controls in place.

279
00:17:54,264 --> 00:17:58,450
Alarms will notify operators if certificate error occurs.

280
00:17:58,610 --> 00:18:02,594
Preventive controls well, our TLS certificates, they are rotated

281
00:18:02,642 --> 00:18:06,130
annually recovery control support department

282
00:18:06,210 --> 00:18:10,566
coordinates with operations to troubleshoot and testing controls.

283
00:18:10,678 --> 00:18:14,074
We actually don't have any testing controls in place to be able to

284
00:18:14,112 --> 00:18:15,610
test for this scenario.

285
00:18:17,230 --> 00:18:20,702
The second failure scenario is that storefront is

286
00:18:20,756 --> 00:18:23,710
unable to find user sessions in cache.

287
00:18:24,210 --> 00:18:27,614
Detective controls well, we don't have any. We also

288
00:18:27,652 --> 00:18:31,002
don't have any preventive controls for this failure scenario.

289
00:18:31,146 --> 00:18:35,006
But recovery control is that users are then redirected

290
00:18:35,038 --> 00:18:39,010
to the login page and their shopping basket is maintained.

291
00:18:39,670 --> 00:18:43,454
Testing control for this failure scenario is that we have automated testing

292
00:18:43,502 --> 00:18:46,694
in place to verify that logged out users are

293
00:18:46,732 --> 00:18:48,680
redirected to the login page.

294
00:18:50,010 --> 00:18:53,222
And the third failure scenario that we think of is that

295
00:18:53,276 --> 00:18:57,190
under high load, the cache evicts recent user sessions.

296
00:18:57,610 --> 00:19:01,162
We have detective controls in place by alarms that

297
00:19:01,216 --> 00:19:04,998
notify the operators if the number of evictions is nonzero.

298
00:19:05,174 --> 00:19:08,854
We also have preventive controls. Cache is right sized

299
00:19:08,902 --> 00:19:12,286
through load testing. Our recovery controls is that

300
00:19:12,308 --> 00:19:16,830
the operations team, they need to grow the size of elasticache.

301
00:19:17,170 --> 00:19:20,990
We don't have any testing controls for this failure scenario.

302
00:19:21,810 --> 00:19:25,826
So with these three failure scenarios that

303
00:19:25,848 --> 00:19:29,182
we have for our failure mode order submission fails,

304
00:19:29,246 --> 00:19:32,830
we can now use the technique we looked at earlier and start forming

305
00:19:32,910 --> 00:19:36,338
our hypothesis. So for the first failure scenario,

306
00:19:36,434 --> 00:19:40,550
TLS certificate on the application load balancer is expired.

307
00:19:41,450 --> 00:19:44,694
We can then create a hypothesis that would be if

308
00:19:44,732 --> 00:19:48,870
TLS certificate on ALB is expired, operators are notified

309
00:19:48,950 --> 00:19:52,742
and troubleshooting starts. The second failure scenario,

310
00:19:52,806 --> 00:19:55,946
storefront is unable to find user session in

311
00:19:55,968 --> 00:19:59,322
cache. Well, we can form a hypothesis, that is,

312
00:19:59,376 --> 00:20:03,066
if storefront is unable to find user session in cache,

313
00:20:03,178 --> 00:20:06,954
user is redirected to the login page and their shopping basket

314
00:20:07,002 --> 00:20:10,346
is maintained. And then for the third failure

315
00:20:10,378 --> 00:20:14,334
scenario that we found under high load, the cache evicts

316
00:20:14,382 --> 00:20:18,114
recent user sessions. Then we can form

317
00:20:18,152 --> 00:20:22,430
a hypothesis. That is, if cache evicts recent user sessions,

318
00:20:22,590 --> 00:20:26,390
operators are notified and the cache is right sized.

319
00:20:27,290 --> 00:20:31,986
All three of these are very valuable hypothesis and testable.

320
00:20:32,098 --> 00:20:35,682
It allows us to then maximize the value of our upcoming

321
00:20:35,746 --> 00:20:37,830
chaos engineering experiments.

322
00:20:38,650 --> 00:20:42,054
So if we go back to our flywheel of the faces of chaos

323
00:20:42,102 --> 00:20:45,830
engineering, we've now spent time forming valuable

324
00:20:45,910 --> 00:20:49,478
hypotheses through the help of resilience modeling.

325
00:20:49,574 --> 00:20:53,562
And now, well, we can move to the run experiment phase,

326
00:20:53,626 --> 00:20:56,734
where with these hypothesis, you're able to

327
00:20:56,772 --> 00:20:59,962
design and run high quality chaos

328
00:21:00,026 --> 00:21:03,650
engineering experiments. So we've now

329
00:21:03,720 --> 00:21:07,342
maximized our chaos engineering efforts by spending

330
00:21:07,406 --> 00:21:10,478
time before actually running experiments,

331
00:21:10,574 --> 00:21:14,874
you can use your chaos engineering and people resources

332
00:21:15,022 --> 00:21:16,950
much more effectively.

333
00:21:18,490 --> 00:21:22,054
So let's look at some key takeaways from this.

334
00:21:22,252 --> 00:21:26,102
First off, you should consider the entire system, not only

335
00:21:26,156 --> 00:21:29,286
the things you see in the architectural diagram.

336
00:21:29,398 --> 00:21:32,922
Consider everything around, everything from the people to the

337
00:21:33,056 --> 00:21:36,074
observability, to where you get your code from,

338
00:21:36,112 --> 00:21:40,102
and so on. Next, try to find the system functions and

339
00:21:40,176 --> 00:21:44,142
identify the critical path within your system that

340
00:21:44,196 --> 00:21:48,510
helps you. Then zoom in and be able to find these failure scenarios.

341
00:21:49,650 --> 00:21:53,294
Write your failure modes from a business perspective.

342
00:21:53,422 --> 00:21:56,450
Think from the business, think with a loss.

343
00:21:56,870 --> 00:21:59,970
When you are forming or writing your failure modes,

344
00:22:00,550 --> 00:22:04,014
anticipate the scenarios that would lead to each of these failure

345
00:22:04,062 --> 00:22:07,814
modes. How would one of these failures happen?

346
00:22:08,012 --> 00:22:11,350
And then create that and anticipate that scenario.

347
00:22:12,010 --> 00:22:15,814
For each of these scenarios, try to identify the

348
00:22:15,852 --> 00:22:19,210
controls that you have in place based on those four

349
00:22:19,280 --> 00:22:21,740
different control types that we looked at,

350
00:22:22,350 --> 00:22:26,074
and finally create your hypothesis based on

351
00:22:26,112 --> 00:22:29,226
that failure scenario and the controls that you

352
00:22:29,248 --> 00:22:32,650
have in place, and then can use that hypothesis

353
00:22:32,730 --> 00:22:36,234
to then run more high quality chaos engineering

354
00:22:36,282 --> 00:22:39,646
experiments. So, before I leave

355
00:22:39,668 --> 00:22:43,522
you, I want to show you this. Please check out the new resilience space

356
00:22:43,576 --> 00:22:47,086
we have over at community AWS we've gathered,

357
00:22:47,118 --> 00:22:50,702
and we keep adding resources for how to build and operate

358
00:22:50,766 --> 00:22:53,490
resilient applications on AWS.

359
00:22:54,630 --> 00:22:57,778
And with that, I want to thank you for joining this session.

360
00:22:57,874 --> 00:23:01,782
We've looked at how to build a resilience model to help us create more

361
00:23:01,836 --> 00:23:05,094
valuable hypotheses, and that allows us to

362
00:23:05,132 --> 00:23:08,626
maximize the value of our chaos engineering experiments.

363
00:23:08,738 --> 00:23:12,006
My name is Gunnar Grosch. I'd be happy to connect with all of you on

364
00:23:12,028 --> 00:23:15,714
social media. You can find me on most of them using the details

365
00:23:15,762 --> 00:23:19,622
shown on screen right now. Thank you all

366
00:23:19,676 --> 00:23:20,300
very much.

