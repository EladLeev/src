1
00:00:00,410 --> 00:00:06,174
Jamaica real

2
00:00:06,212 --> 00:00:09,934
time feedback into the behavior of your distributed systems and

3
00:00:09,972 --> 00:00:14,094
observing changes exceptions. Errors in real time

4
00:00:14,212 --> 00:00:17,914
allows you to not only experiment with confidence, but respond

5
00:00:18,042 --> 00:00:20,480
instantly to get things working again.

6
00:00:24,610 --> 00:00:47,162
Cause so

7
00:00:47,216 --> 00:00:51,334
today's session is titled improving the process of debugging JavaScript

8
00:00:51,382 --> 00:00:55,610
errors in production for better end user experience and happier developers.

9
00:00:55,770 --> 00:00:58,846
My agenda for today is as follows. So first of all, I'm just

10
00:00:58,868 --> 00:01:02,554
going to set the stage, introduce myself, talk a little bit about what rollbar

11
00:01:02,602 --> 00:01:06,402
is about and what I do for Rollbar. Then I'm going to talk about the

12
00:01:06,456 --> 00:01:09,634
impact of production JavaScript errors, and then

13
00:01:09,672 --> 00:01:13,634
talk a little bit about some of the particular difficulties that JavaScript developers have,

14
00:01:13,672 --> 00:01:17,026
maybe that other developers of other languages don't have. And then

15
00:01:17,048 --> 00:01:20,774
I'm going to talk about real time error monitoring, which is part

16
00:01:20,812 --> 00:01:24,214
of the solution that rollbar offers and how that can help you to

17
00:01:24,252 --> 00:01:27,846
dramatically improve your error response process.

18
00:01:28,028 --> 00:01:31,562
My goal today is that first of all, you learn about new

19
00:01:31,616 --> 00:01:35,722
error monitoring technology that's available today that you might not have been aware of,

20
00:01:35,856 --> 00:01:39,386
and that you take a step to improve your current process.

21
00:01:39,568 --> 00:01:43,530
So my name is Finbar Fleming. I'm the lead customer engineer at Rollbar.

22
00:01:43,690 --> 00:01:47,434
My background is I was a developer and a development manager

23
00:01:47,482 --> 00:01:50,906
for about 15 years with a particular interest in helping

24
00:01:50,938 --> 00:01:54,658
developers to improve their processes. So spent a

25
00:01:54,664 --> 00:01:58,382
lot of time working to develop continuous integration processes

26
00:01:58,446 --> 00:02:02,494
and test driven development processes. And more recently helping

27
00:02:02,542 --> 00:02:05,986
developers with my job at Rollbar to manage

28
00:02:06,088 --> 00:02:09,666
errors more effectively and to help them build out error

29
00:02:09,698 --> 00:02:12,966
response processes in their applications. Written lots of

30
00:02:12,988 --> 00:02:16,626
code and written lots of code with errors, and I help teams to improve

31
00:02:16,658 --> 00:02:19,814
their errors response capabilities. So I work with them so that they get

32
00:02:19,852 --> 00:02:23,198
better visibility into their errors, can differentiate

33
00:02:23,234 --> 00:02:26,326
between the important ones and the ones that are of lower importance,

34
00:02:26,438 --> 00:02:29,066
and then at a more advanced level, which I'm really not going to talk about

35
00:02:29,088 --> 00:02:32,374
much today, is just the ability to make either semiautomated

36
00:02:32,422 --> 00:02:35,806
or automated response decisions in their SDLC based on

37
00:02:35,828 --> 00:02:39,534
this error data. I see a lot of errors. See about 30%

38
00:02:39,572 --> 00:02:42,458
of the people I work with are JavaScript developers.

39
00:02:42,554 --> 00:02:45,506
So I see a lot of JavaScript developers and I talk with a lot of

40
00:02:45,528 --> 00:02:49,074
developers. So developers that use rollbar and also

41
00:02:49,112 --> 00:02:52,514
developers who don't use rollbar, and I learn from them about what

42
00:02:52,552 --> 00:02:56,606
they do differently. So just going to give a high level description

43
00:02:56,638 --> 00:03:00,326
of what rollbar is. So rollbar is a platform to group and respond to

44
00:03:00,348 --> 00:03:03,974
errors and to give developers insights about those

45
00:03:04,012 --> 00:03:08,098
errors. Rollbar is a platform to group, respond to and gain insights

46
00:03:08,114 --> 00:03:11,786
from errors. And in real time applications send

47
00:03:11,888 --> 00:03:15,786
data to rollbar. That data is analyzed and the

48
00:03:15,808 --> 00:03:19,274
errors are given an identity or a fingerprint. So think the code

49
00:03:19,312 --> 00:03:23,114
flow associated with an error, or the stack trace associated with an error is

50
00:03:23,152 --> 00:03:26,334
given a fingerprint and it's given a fingerprint in a way that's very

51
00:03:26,372 --> 00:03:30,286
accurate and done very quickly. It's instant and it's done

52
00:03:30,308 --> 00:03:33,918
in a way that's designed to allow for many code changes,

53
00:03:34,084 --> 00:03:37,966
so that over time, even though your code is changing, maybe you're upgrading versions

54
00:03:37,998 --> 00:03:41,998
of open source libraries. The same error is still giving you the same fingerprint.

55
00:03:42,094 --> 00:03:45,506
Then based on that, it enables certain workflows. So it might

56
00:03:45,528 --> 00:03:49,486
be that an error is occurring for the first time in an application that's

57
00:03:49,518 --> 00:03:52,966
never been seen before and you want to notify the team. Or it may be

58
00:03:52,988 --> 00:03:56,582
that an error in a release that you just deployed ten minutes or 15

59
00:03:56,636 --> 00:04:00,822
minutes ago is impacting ten different users every minute longer teams,

60
00:04:00,886 --> 00:04:04,570
or over longer time horizons. The data that customers

61
00:04:04,640 --> 00:04:08,534
send a rollbar enables them to identify risk in their code bases,

62
00:04:08,582 --> 00:04:11,894
so can identify maybe particularly risky

63
00:04:12,022 --> 00:04:14,970
files or parts of the code based modules,

64
00:04:15,130 --> 00:04:18,506
and then hopefully to give developers insights

65
00:04:18,538 --> 00:04:21,934
into maybe where they can improve their processes. So I'm going to talk about

66
00:04:21,972 --> 00:04:25,726
the cost of errors to your business. This data here is taken from the rollbar

67
00:04:25,758 --> 00:04:29,554
state of software code report, which interviewed about

68
00:04:29,672 --> 00:04:33,106
950 developers. And these here are some of the

69
00:04:33,208 --> 00:04:36,914
stats that I think are important for our topic here today. So first of all,

70
00:04:36,952 --> 00:04:40,258
34% say that losing users is the biggest risk of errors

71
00:04:40,274 --> 00:04:44,034
in their software applications. 28% actually reported

72
00:04:44,082 --> 00:04:46,642
losing a significant number of users to errors.

73
00:04:46,706 --> 00:04:50,102
So errors in your applications are costing you

74
00:04:50,236 --> 00:04:53,674
dramatically, increasing the risk that you do lose customers. And many of you

75
00:04:53,712 --> 00:04:57,146
actually are losing customers. The other statistic that I thought was

76
00:04:57,168 --> 00:05:00,474
really, really interesting was that 88% of the

77
00:05:00,592 --> 00:05:04,126
people that were interviewed said that bugs and errors are reported by customers

78
00:05:04,228 --> 00:05:07,406
first. And that's a little shocking. And I suppose if you

79
00:05:07,428 --> 00:05:10,526
take nothing else from this session, it really doesn't have to

80
00:05:10,548 --> 00:05:14,590
be that way in teams of the cost to your developers.

81
00:05:15,010 --> 00:05:19,310
Again, some more statistics from that report. 32% are spending

82
00:05:19,390 --> 00:05:23,202
up to 10 hours a week fixing bugs and 16% are

83
00:05:23,256 --> 00:05:26,386
spending up to 15 hours per week fixing bugs. And if you

84
00:05:26,408 --> 00:05:29,750
think that on average that a developer might be

85
00:05:29,820 --> 00:05:32,774
actually writing code 25 27 hours a week,

86
00:05:32,892 --> 00:05:36,342
any improvement that you can make in how they work with

87
00:05:36,396 --> 00:05:40,822
existing errors and bugs in existing code dramatically

88
00:05:40,886 --> 00:05:44,106
increases their ability to develop new features and

89
00:05:44,128 --> 00:05:47,306
new functionality. So it dramatically improves the throughput of

90
00:05:47,328 --> 00:05:51,354
new features and new functionality. If you can make these types of

91
00:05:51,392 --> 00:05:55,070
improvements in your code basis. A few other the

92
00:05:55,140 --> 00:05:59,054
people doing the survey were having a bit of fun. 21% of

93
00:05:59,092 --> 00:06:02,302
developers would rather go to the dentist and 26% would rather

94
00:06:02,356 --> 00:06:05,634
spend time paying bills. But I suppose what you want to take from that

95
00:06:05,672 --> 00:06:09,086
is that developers really don't want to spend their time fixing

96
00:06:09,118 --> 00:06:12,914
bugs in existing code. They'd much prefer to be working on

97
00:06:12,952 --> 00:06:16,894
new features and new functionality, which coincidentally

98
00:06:16,942 --> 00:06:20,374
is what the business wants. Also, developers in JavaScript actually

99
00:06:20,412 --> 00:06:24,034
have a particular challenge. So first of all, sort of by definition,

100
00:06:24,082 --> 00:06:27,606
I suppose I should clarify, I'm really focused on

101
00:06:27,628 --> 00:06:31,266
client side errors in this presentation. End users

102
00:06:31,298 --> 00:06:35,386
are always impacted, okay, on back end projects you may get away with

103
00:06:35,488 --> 00:06:38,186
it not being obvious that an error is occurring, or you might be able to

104
00:06:38,208 --> 00:06:42,034
run something, or something might be done asynchronously on a UI,

105
00:06:42,182 --> 00:06:45,386
your users are being impacted. Second thing to note

106
00:06:45,418 --> 00:06:48,734
is that the tools that developers and people who

107
00:06:48,772 --> 00:06:52,762
work with JavaScript have access to actually are a little bit too convenient

108
00:06:52,826 --> 00:06:57,106
and allow you to set up bad habits. And if

109
00:06:57,128 --> 00:07:00,786
we think of like the developer tools or the browser developer tools and

110
00:07:00,808 --> 00:07:04,798
the console log developers know how to use them, QA teams

111
00:07:04,814 --> 00:07:07,970
know how to use them, technical support teams know how to use them,

112
00:07:08,040 --> 00:07:12,246
and it's just too easy to use that as a location to

113
00:07:12,348 --> 00:07:15,846
debug your errors. And the problem with that is that once you go into

114
00:07:15,868 --> 00:07:19,194
production and the people using the application are no longer your

115
00:07:19,232 --> 00:07:23,622
internal developers, your internal QA staff, or your internal technical support teams,

116
00:07:23,766 --> 00:07:27,018
you lose that visibility. And there's no formalization of

117
00:07:27,024 --> 00:07:30,954
the errors response process before you put these applications into

118
00:07:30,992 --> 00:07:35,134
production, so that when you do deploy to production you really don't have anything.

119
00:07:35,332 --> 00:07:38,542
The other thing to note is that who owns client side

120
00:07:38,596 --> 00:07:41,998
errors, and many companies will have an SRE team,

121
00:07:42,164 --> 00:07:45,534
and they're responsible for ensuring site reliability.

122
00:07:45,662 --> 00:07:48,798
Often that doesn't include client side monitoring.

123
00:07:48,974 --> 00:07:52,686
Errors that are occurring in a strange version of a browser that's

124
00:07:52,718 --> 00:07:57,262
experiencing slight intermittent network issues isn't really the responsibility

125
00:07:57,326 --> 00:08:01,266
of an SRE team. So what often happens is that JavaScript applications

126
00:08:01,298 --> 00:08:04,774
get to the point where they're in production, but there's no process that has

127
00:08:04,812 --> 00:08:08,626
been put in place to observe what's occurring and to monitor

128
00:08:08,658 --> 00:08:11,866
what's occurring and taken, obviously. Lastly, there can

129
00:08:11,888 --> 00:08:15,594
be a lot of noise in JavaScript errors, there can be network issues,

130
00:08:15,712 --> 00:08:19,254
there can be browser specific issues, third party

131
00:08:19,302 --> 00:08:23,034
code issues, there can also be a culture of look,

132
00:08:23,072 --> 00:08:26,506
it's just easier to let the customer contact us rather than deal with these noisy

133
00:08:26,538 --> 00:08:30,014
errors. And that's a slightly flawed way to look at the problem.

134
00:08:30,212 --> 00:08:34,006
Just kind of another convenient number here. I did a conference

135
00:08:34,058 --> 00:08:37,710
recently and I spoke with probably a few hundred developers,

136
00:08:37,790 --> 00:08:41,426
specifically JavaScript developers, and 75% of the people I

137
00:08:41,448 --> 00:08:44,878
spoke with had no visibility into production code errors.

138
00:08:44,974 --> 00:08:49,234
Of the ones that did have something, most of them were logging generally

139
00:08:49,282 --> 00:08:53,122
to using the logging functionality, maybe of an APM solution

140
00:08:53,186 --> 00:08:57,174
or else a dedicated logging solution. And the others ones

141
00:08:57,212 --> 00:09:00,934
that were doing something were using an errors monitoring system like rollbar or something else,

142
00:09:00,972 --> 00:09:04,326
something similar. The other thing, I suppose that was of note

143
00:09:04,358 --> 00:09:07,494
there was that many of them weren't aware that this technology exists.

144
00:09:07,542 --> 00:09:10,934
This ability to analyze stack trace,

145
00:09:10,982 --> 00:09:14,202
give it an identity as soon as the error occurs,

146
00:09:14,346 --> 00:09:18,106
and then use that identity to let developer

147
00:09:18,138 --> 00:09:21,118
teams know if it's new and has never been seen before, or if it's a

148
00:09:21,124 --> 00:09:25,114
reoccurrence of an existing problem. There are two categories

149
00:09:25,162 --> 00:09:29,074
of tools that I see developers using primarily. One is

150
00:09:29,112 --> 00:09:32,306
logging, and they are often using the logging functionality, maybe even the

151
00:09:32,328 --> 00:09:36,306
APM, and they get the error detail. They can often put structure around it

152
00:09:36,328 --> 00:09:40,086
so you can add additional key value pairs. Really the focus is

153
00:09:40,108 --> 00:09:44,498
on being able to consume the logging data rather than identifying

154
00:09:44,594 --> 00:09:47,926
this error in real time. And it's really around getting the

155
00:09:47,948 --> 00:09:51,638
logs into the system and giving you the ability to query

156
00:09:51,734 --> 00:09:55,066
after the fact. So maybe you learn about the error still from

157
00:09:55,088 --> 00:09:58,086
your customer, but at that point you can go into the logs.

158
00:09:58,198 --> 00:10:01,614
The errors identification functionality tends to be very

159
00:10:01,652 --> 00:10:05,006
basic and sort of bolted on, so you don't get

160
00:10:05,108 --> 00:10:08,654
this very accurate identification of

161
00:10:08,692 --> 00:10:11,978
errors that come with error monitoring and error monitoring.

162
00:10:11,994 --> 00:10:15,282
And I said this here is a component of what rollbar does. There are

163
00:10:15,336 --> 00:10:18,514
a number of vendors in this space at a high

164
00:10:18,552 --> 00:10:22,126
level that the process is similar. You're intercepting

165
00:10:22,158 --> 00:10:25,746
the on errors event, and so for uncalled errors on the

166
00:10:25,768 --> 00:10:29,186
page you can capture that data, the stack trace

167
00:10:29,218 --> 00:10:32,566
associated with that, send it to some system, analyze the

168
00:10:32,588 --> 00:10:36,246
stack trace, give the error an identity, and based on the

169
00:10:36,268 --> 00:10:39,566
stack trace the error is given a fingerprint.

170
00:10:39,618 --> 00:10:43,638
And this happens immediately when the errors occurs

171
00:10:43,734 --> 00:10:47,354
and the sameness or two errors being considered the same from

172
00:10:47,392 --> 00:10:50,666
that point forward is based on the fingerprint and not based on some

173
00:10:50,768 --> 00:10:54,126
query that you configure after the fact. If you want

174
00:10:54,148 --> 00:10:57,290
to kind of know a bit more about how rollbar differentiates,

175
00:10:57,370 --> 00:11:00,858
consider ourselves different from other vendors in the error

176
00:11:00,874 --> 00:11:04,906
monitoring space. It's really around the accuracy and the speed of this

177
00:11:04,948 --> 00:11:08,466
grouping and the fact that it can stand up to code changes and

178
00:11:08,568 --> 00:11:11,714
focused on giving developed teams the

179
00:11:11,752 --> 00:11:15,214
data about the errors so that they can use that to improve

180
00:11:15,262 --> 00:11:18,662
their SDLC and identify risk and manage

181
00:11:18,716 --> 00:11:22,354
it better. So this here is the lifecycle of a production

182
00:11:22,402 --> 00:11:26,598
Javascript error, or at least for the 88% of people

183
00:11:26,684 --> 00:11:30,674
who learn about the errors first from their customers. So there are sort of five

184
00:11:30,732 --> 00:11:34,314
steps I've broken it down to. And the thing to note here is that the

185
00:11:34,352 --> 00:11:38,394
first three steps take a lot of time and are

186
00:11:38,432 --> 00:11:41,706
a source of much unhappiness for end users. So if

187
00:11:41,728 --> 00:11:45,374
you think customer experiences the error, hopefully the customer is

188
00:11:45,412 --> 00:11:49,006
calling in. At that point, technical support person is trying to preproduction the

189
00:11:49,028 --> 00:11:52,766
issue, maybe on their own or with the help of the customer. And at that

190
00:11:52,788 --> 00:11:56,178
point it's given to a developer who will hopefully have what they

191
00:11:56,184 --> 00:11:59,346
need to reproduce the error. And then at that point then they

192
00:11:59,368 --> 00:12:03,250
will understand the root cause. Just a few notes about this process

193
00:12:03,400 --> 00:12:06,934
customers obviously aren't happy. They may be on social media

194
00:12:07,052 --> 00:12:10,114
telling their friends that they're not happy. At a minimum,

195
00:12:10,162 --> 00:12:13,586
maybe you're experiencing service level agreement breaches,

196
00:12:13,698 --> 00:12:17,718
possibly transactions aren't getting completed, and this

197
00:12:17,884 --> 00:12:21,498
unhappiness has both short term and long term impacts for your business.

198
00:12:21,584 --> 00:12:25,194
So even though you might resolve the error and you might move

199
00:12:25,232 --> 00:12:28,906
on, the customer will still hesitant to

200
00:12:29,008 --> 00:12:33,002
potentially use you again or to recommend you to somebody else.

201
00:12:33,136 --> 00:12:36,654
Once you understand the error and once you

202
00:12:36,692 --> 00:12:40,142
have the stack trace associated with an error, you can really

203
00:12:40,276 --> 00:12:43,726
generally very quickly deduce the root cause and get a

204
00:12:43,748 --> 00:12:47,566
fix out there. And this really is where error monitoring helps

205
00:12:47,598 --> 00:12:51,314
greatly. By capturing the data in a structured form,

206
00:12:51,432 --> 00:12:55,006
presenting the stack trace back to you, presenting the other metadata

207
00:12:55,038 --> 00:12:58,242
associated with the error, like the telemetry data on the page,

208
00:12:58,296 --> 00:13:01,506
so the events that fired on that page before the error occurred,

209
00:13:01,618 --> 00:13:05,298
you have all the information you would want in order to quickly reproduce

210
00:13:05,314 --> 00:13:08,806
it, understand the root cause, and get a fix out. The immediate

211
00:13:08,838 --> 00:13:12,790
benefits of enabling an error monitoring solution

212
00:13:12,870 --> 00:13:15,910
in your code base is immediately you get visibility

213
00:13:15,990 --> 00:13:19,286
into all errors. You can see which errors are occurring

214
00:13:19,318 --> 00:13:22,586
right now, you can see the data you need to reproduce the

215
00:13:22,608 --> 00:13:26,362
errors, and if this grouping process is done very accurately,

216
00:13:26,506 --> 00:13:29,678
you have the data you need to do to decide which error needs to be

217
00:13:29,684 --> 00:13:32,782
fixed first. So you'll have much more accurate information around.

218
00:13:32,916 --> 00:13:35,798
How many times did this error actually occur?

219
00:13:35,914 --> 00:13:39,454
How many people were impacted by this specific error?

220
00:13:39,582 --> 00:13:42,738
Just on the right hand side there, I have a few images from Rollbar fix,

221
00:13:42,824 --> 00:13:47,118
which is the rollbar product focused on error monitoring

222
00:13:47,294 --> 00:13:50,534
and just you have immediate visibility into

223
00:13:50,652 --> 00:13:54,326
what the pattern of occurrences has been for this error over time,

224
00:13:54,428 --> 00:13:58,130
how many people have been impacted over time. And in this specific error,

225
00:13:58,210 --> 00:14:02,026
we see here that the vast, vast majority of people experiencing this errors are

226
00:14:02,048 --> 00:14:05,738
using Google Chrome. So immediate visibility into the

227
00:14:05,744 --> 00:14:09,258
business impact. Just as a side note, the process

228
00:14:09,344 --> 00:14:12,398
of setting up error monitoring is generally very quick.

229
00:14:12,484 --> 00:14:16,606
It's a case of importing can SDK, turning on

230
00:14:16,788 --> 00:14:20,446
errors tracking, and then you have immediate visibility into your

231
00:14:20,468 --> 00:14:24,238
errors. What we see most customers doing is very quickly

232
00:14:24,324 --> 00:14:27,826
they realize that there are errors occurring that they didn't know about. They go through

233
00:14:27,848 --> 00:14:31,522
a process to reduce those errors and very quickly,

234
00:14:31,656 --> 00:14:35,218
dramatically reduce the number of errors that are coming through the system.

235
00:14:35,304 --> 00:14:38,902
So last week I worked with someone who, the first month of working

236
00:14:38,956 --> 00:14:42,358
with rollbar were sending 40,000 errors a month,

237
00:14:42,444 --> 00:14:46,374
and now they're down to 2000. And that's in six weeks of using

238
00:14:46,492 --> 00:14:49,894
the product. That's visibility they didn't previously have.

239
00:14:50,012 --> 00:14:53,546
They were able to identify, actually we should be fixing these errors and

240
00:14:53,568 --> 00:14:57,594
now they're down to a very, very manageable number of errors. And if

241
00:14:57,632 --> 00:15:00,858
any new error occurs, it will be much clearer that it's a

242
00:15:00,864 --> 00:15:04,106
new error and they will then be able to go ahead and get that fixed.

243
00:15:04,218 --> 00:15:07,758
Error monitoring is a journey. It's not something you just turn on.

244
00:15:07,844 --> 00:15:10,990
What I see with the customers I work with

245
00:15:11,060 --> 00:15:14,710
is that there are sort of five phases to the journey,

246
00:15:14,810 --> 00:15:19,166
and the first is initial installation. Immediately you're getting real time visibility,

247
00:15:19,278 --> 00:15:22,866
understanding the business impact of errors. Then they go

248
00:15:22,888 --> 00:15:26,418
through that process that I mentioned on the previous slide where they'll fix a

249
00:15:26,424 --> 00:15:29,954
bunch of low hanging errors and low hanging issues that are causing

250
00:15:30,002 --> 00:15:33,190
problems. And then they'll turn on notifications. So they'll say,

251
00:15:33,260 --> 00:15:36,854
we care about this category of error. We don't care as much about this

252
00:15:36,892 --> 00:15:41,190
category of error. Then they will again further along that journey, add additional

253
00:15:41,270 --> 00:15:44,586
context to the errors. So it might be they want to know what geography and

254
00:15:44,608 --> 00:15:48,266
errors is coming from. They might want to know

255
00:15:48,448 --> 00:15:51,558
what category of user is being impacted by the errors.

256
00:15:51,574 --> 00:15:55,294
Is it impacting our free tier customers or is it impacting our

257
00:15:55,412 --> 00:15:59,770
highest paying customers? Then they'll go through a phase of where they're doing additional integration.

258
00:15:59,850 --> 00:16:03,806
So integrating with the source control system, maybe some testing framework tools

259
00:16:03,838 --> 00:16:07,486
that they work with, session recording tools.

260
00:16:07,678 --> 00:16:11,038
Now they learn about their errors in real time from rollbar

261
00:16:11,134 --> 00:16:14,578
and taken. They can easily link out to replay a

262
00:16:14,584 --> 00:16:18,518
session, maybe a logging system, actually, where they're on the back end where

263
00:16:18,604 --> 00:16:21,798
they're seeing that the non error data associated with

264
00:16:21,884 --> 00:16:25,590
the session that caused this error. And then final

265
00:16:25,660 --> 00:16:29,126
step is more advanced automated response. And it could be that

266
00:16:29,148 --> 00:16:32,426
they're using this data in an automated way, in a build pipeline to

267
00:16:32,448 --> 00:16:35,834
say don't allow a build to continue, or it may be

268
00:16:35,872 --> 00:16:39,190
that based on errors, let's say in a canary deployment,

269
00:16:39,270 --> 00:16:43,086
they want to trigger an automatic rollback. So the

270
00:16:43,108 --> 00:16:46,814
first step of that journey is very easy. Initial installation generally takes

271
00:16:46,852 --> 00:16:50,846
no more than 30 minutes, 60 minutes. You will immediately get

272
00:16:50,948 --> 00:16:54,970
additional visibility and much more advanced capabilities

273
00:16:55,050 --> 00:16:58,674
to understand the errors that are occurring in production and to

274
00:16:58,712 --> 00:17:02,354
debug them and to get fixes out there quickly. So I'm just going to

275
00:17:02,392 --> 00:17:06,326
finish up here now. And first of all, thank you very much for

276
00:17:06,428 --> 00:17:09,542
taking the time to attend this

277
00:17:09,596 --> 00:17:13,110
session. You take one thing from this here, do something,

278
00:17:13,260 --> 00:17:16,806
take a step along this journey. Your customers and your

279
00:17:16,828 --> 00:17:20,182
colleagues will thank you. One thing I will say particular to

280
00:17:20,316 --> 00:17:23,770
Javascript developers is try to make the improvement early

281
00:17:23,840 --> 00:17:26,874
in your apps development. So as soon as you start working on a brand new

282
00:17:26,912 --> 00:17:30,698
code base, put something in, start to build that culture around. We have a

283
00:17:30,704 --> 00:17:34,246
centralized location to manage errors from all environments

284
00:17:34,438 --> 00:17:38,494
and this here is where we're going to process errors because it will

285
00:17:38,612 --> 00:17:42,158
make it much easier. While it's convenient to use the console log and

286
00:17:42,164 --> 00:17:46,146
the developer tool in pre production environments, once you

287
00:17:46,168 --> 00:17:50,366
go into production and there are other users experiencing these errors, you lose

288
00:17:50,398 --> 00:17:53,826
that visibility into what's going on. If you only have access to

289
00:17:53,848 --> 00:17:57,606
logging or the logging in your APM system,

290
00:17:57,788 --> 00:18:01,554
use it. It's much improved visibility. Having some visibility

291
00:18:01,602 --> 00:18:04,902
is better than none. If possible, try to add

292
00:18:04,956 --> 00:18:08,086
error monitoring to your application. Definitely from

293
00:18:08,108 --> 00:18:12,262
the rollbar side it's easy to set up. You can make dramatic improvements

294
00:18:12,326 --> 00:18:16,454
quite quickly, and you can very quickly make it a part of your team's culture.

295
00:18:16,582 --> 00:18:19,834
And then as you use and as you begin to

296
00:18:19,872 --> 00:18:23,550
become more experienced with error monitoring, build out your solutions,

297
00:18:24,130 --> 00:18:28,106
add to it as needed based on feedback from your QA teams,

298
00:18:28,138 --> 00:18:31,998
from your SRE teams, from your customer engineer, your customer

299
00:18:32,084 --> 00:18:35,970
success or customer service staff,

300
00:18:36,390 --> 00:18:39,682
and build it out as you need to best

301
00:18:39,736 --> 00:18:43,326
fit the needs of your team and your application. So earlier

302
00:18:43,358 --> 00:18:46,974
in the session I referenced statistics from the Rollbar State of Software

303
00:18:47,022 --> 00:18:50,598
code report. Here are two links. One is to download the report

304
00:18:50,684 --> 00:18:54,120
and the other is to get access to a blog post about it.

305
00:18:54,570 --> 00:18:57,734
Definitely check those out. I hope you take the next step

306
00:18:57,772 --> 00:19:00,834
in your journey to improve your capabilities around

307
00:19:00,892 --> 00:19:04,790
debugging production errors in your Javascript applications.

308
00:19:04,950 --> 00:19:07,946
If that journey takes you to rollbar. We'd love to have you. We'd love to

309
00:19:07,968 --> 00:19:12,154
have your errors. You can try us out directly on rollbar.com

310
00:19:12,272 --> 00:19:16,794
or this here is a specific promo code for this conference

311
00:19:16,842 --> 00:19:20,506
and for the attendees of this conference. And if you sign up with this promo

312
00:19:20,538 --> 00:19:23,966
code, we'll turn on a few extra features that you wouldn't normally get

313
00:19:23,988 --> 00:19:27,534
in a trial account and also give you early access to some

314
00:19:27,572 --> 00:19:31,214
upcoming features. So definitely try that

315
00:19:31,252 --> 00:19:34,570
out. I do hope that you take the next step to improve

316
00:19:34,650 --> 00:19:38,278
how you work with your errors. On behalf of Rollbar, I'd just like to

317
00:19:38,284 --> 00:19:42,150
say that we're delighted to be part of this conference. We love being part

318
00:19:42,220 --> 00:19:46,230
of the developer community where developers

319
00:19:46,730 --> 00:19:50,386
help each other developers, and where they learn from experts in the industry.

320
00:19:50,498 --> 00:19:53,410
So thanks again and enjoy the rest of the conference.

