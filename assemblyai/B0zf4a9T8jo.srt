1
00:00:00,410 --> 00:00:03,678
Okay, nice. So let's start from this page.

2
00:00:03,844 --> 00:00:07,694
My topic today is the application level chaos engineering in

3
00:00:07,732 --> 00:00:11,214
JVM. Like I have already introduced myself.

4
00:00:11,332 --> 00:00:13,742
Let's continue to the second page.

5
00:00:13,876 --> 00:00:17,374
So, like several years ago, when people started to

6
00:00:17,412 --> 00:00:21,562
discuss chaos engineering, and when this concept was brought

7
00:00:21,706 --> 00:00:25,254
upfront to the developers, and then they began to

8
00:00:25,292 --> 00:00:28,162
explore the space of chaos engineering,

9
00:00:28,226 --> 00:00:31,986
like it was not only about randomly shutting

10
00:00:32,018 --> 00:00:35,762
down the instances, we could also explore different perturbation

11
00:00:35,826 --> 00:00:39,154
models. For example, we could add this,

12
00:00:39,292 --> 00:00:43,466
killing the whole region of the cluster. We could inject exceptions in

13
00:00:43,488 --> 00:00:46,874
the function in the method. We could also do

14
00:00:46,912 --> 00:00:50,986
this like time travel perturbations, or maxing out cpu

15
00:00:51,018 --> 00:00:54,730
cores out of an electric cluster, et cetera.

16
00:00:54,890 --> 00:00:58,622
So then we have different levels of

17
00:00:58,676 --> 00:01:01,918
chaos engineering, like infrastructure level,

18
00:01:02,004 --> 00:01:05,506
like the network level, and also like the application level.

19
00:01:05,608 --> 00:01:09,842
Based on different levels, we could learn different information

20
00:01:09,976 --> 00:01:13,294
from these attributes and abnormal behaviors.

21
00:01:13,422 --> 00:01:16,982
So that's why we focus on the application level

22
00:01:17,036 --> 00:01:21,014
chaos engineering, because we are quite interested in the

23
00:01:21,132 --> 00:01:24,610
observability of applicationlevel. And if it's

24
00:01:24,690 --> 00:01:28,666
directly related to the logistics and the exceptions in

25
00:01:28,688 --> 00:01:31,974
your source code, then maybe we could precisely

26
00:01:32,022 --> 00:01:35,514
control these exceptions and failures to see how the

27
00:01:35,552 --> 00:01:36,730
system behaves.

28
00:01:38,190 --> 00:01:41,790
So for sake of open science, we also

29
00:01:41,940 --> 00:01:45,982
put Iris on GitHub, like our papers, source code and data

30
00:01:46,036 --> 00:01:49,322
side with some research experiments.

31
00:01:49,386 --> 00:01:53,662
So if you feel interested in the application level

32
00:01:53,716 --> 00:01:57,974
chaos engineering, you could also take a look at this GitHub repo

33
00:01:58,122 --> 00:02:01,534
because the university is called Royal Institute

34
00:02:01,582 --> 00:02:04,290
of Technology, so we call it royal chaos.

35
00:02:05,110 --> 00:02:08,918
Yeah. So today I'm going to share some of our recent research

36
00:02:09,004 --> 00:02:13,254
work with you based on the GitHub rifle. Basically we

37
00:02:13,292 --> 00:02:17,486
have like three cases here. The first one is called chaos machine.

38
00:02:17,618 --> 00:02:21,334
It's a chaos engineering system for live analysis

39
00:02:21,382 --> 00:02:24,998
and falsification of exception handling in the GVM.

40
00:02:25,094 --> 00:02:29,178
And this paper has been accepted in one of the top journals called

41
00:02:29,264 --> 00:02:33,440
IEEE transactions of software engineering this year.

42
00:02:34,930 --> 00:02:38,606
And I put an archive link which is free to

43
00:02:38,628 --> 00:02:42,846
access for your convenience. Okay, so about this,

44
00:02:43,028 --> 00:02:45,950
I would like to introduce some background work.

45
00:02:46,020 --> 00:02:50,078
First, based on some research work, it shows that almost

46
00:02:50,164 --> 00:02:54,670
90% of the failures or bugs

47
00:02:54,970 --> 00:02:58,210
somehow related to the exception handling mechanisms.

48
00:02:58,290 --> 00:03:01,490
So for example, if I'm writing some programs in Java,

49
00:03:01,570 --> 00:03:05,346
and then I have to design lots of try catch blocks, like lots

50
00:03:05,378 --> 00:03:09,338
of exceptions could happen in production, and then we need to design

51
00:03:09,424 --> 00:03:12,838
some recovery methods in your catch blocks.

52
00:03:12,934 --> 00:03:16,058
But at least for me,

53
00:03:16,224 --> 00:03:19,622
I often write byte catch blocks.

54
00:03:19,686 --> 00:03:23,390
So even I catch this exception, but it doesn't provide

55
00:03:23,540 --> 00:03:27,130
enough recovery methods, or it's not resilient

56
00:03:27,210 --> 00:03:30,442
enough for my system to recover, to recover

57
00:03:30,506 --> 00:03:34,894
from this exception. So that's how we would like to evaluate

58
00:03:35,022 --> 00:03:39,214
these try catch blocks to evaluate the exception handling methods

59
00:03:39,262 --> 00:03:42,866
in the system. And previously, lots of work are

60
00:03:42,888 --> 00:03:46,294
done in a testing phase. For example, this is one of the

61
00:03:46,332 --> 00:03:50,374
testing method. It's called short circuit testing. It's just

62
00:03:50,492 --> 00:03:54,530
inject some exceptions in the beginning of a try block,

63
00:03:54,610 --> 00:03:58,086
and then your whole try block is

64
00:03:58,108 --> 00:04:01,530
made invalid and it goes into the catch block,

65
00:04:02,190 --> 00:04:05,914
and then it runs the test switch again to see how this

66
00:04:05,952 --> 00:04:09,290
behaves and whether it still passes the test cases.

67
00:04:09,710 --> 00:04:13,802
So we call it short circuit testing. But with chaos machine,

68
00:04:13,866 --> 00:04:17,662
we would like to apply this fault model into

69
00:04:17,716 --> 00:04:21,114
a production like environment. And then we do this bytecode

70
00:04:21,162 --> 00:04:25,422
instrumentation. So in the runtime, we instrument the bytecode

71
00:04:25,486 --> 00:04:28,834
and we throw an exemption in the beginning of the

72
00:04:28,872 --> 00:04:32,062
try block. That's how we trigger the catch block.

73
00:04:32,126 --> 00:04:35,454
So in some scenarios, if we design

74
00:04:35,592 --> 00:04:39,750
two different passes of the functionality or

75
00:04:39,820 --> 00:04:43,334
the handling logic, maybe it provides you like two

76
00:04:43,372 --> 00:04:47,026
different ways to fulfill the user's request.

77
00:04:47,138 --> 00:04:51,242
One is the normal way in try block. If something

78
00:04:51,296 --> 00:04:55,174
bad happens, then we have another way in the catch block to still fulfill

79
00:04:55,222 --> 00:04:58,730
the user's request. And that's something we would like to

80
00:04:58,800 --> 00:05:02,846
verify. So I also like this word verification in

81
00:05:02,868 --> 00:05:06,638
this title. We also call it falsification, because if we

82
00:05:06,804 --> 00:05:10,362
triggered an exception and your system behaves

83
00:05:10,426 --> 00:05:14,242
abnormally, it's good because we learn more from

84
00:05:14,296 --> 00:05:17,886
this. We could learn more information from this abnormal behavior,

85
00:05:17,998 --> 00:05:21,634
not just like building the confidence of the system in

86
00:05:21,672 --> 00:05:25,186
this exception handling mechanisms. So this is

87
00:05:25,208 --> 00:05:28,210
the architecture of the chaos machine.

88
00:05:28,630 --> 00:05:31,910
In a production like environment, we don't have access to

89
00:05:31,980 --> 00:05:35,238
the source code anymore, but we could use the

90
00:05:35,324 --> 00:05:38,826
nice feature provided by GVM, which is called the

91
00:05:38,848 --> 00:05:42,890
Java agent, to instrument the bytecode. So we attach

92
00:05:43,230 --> 00:05:47,098
a monitoring sidecar and a perturbation injector as agents

93
00:05:47,264 --> 00:05:51,606
to different services or different instances

94
00:05:51,798 --> 00:05:56,410
in JVM. And then every perturbator and sidecars

95
00:05:56,770 --> 00:06:00,362
are controlled by the chaos controller, which is responsible

96
00:06:00,426 --> 00:06:02,830
to do this chaos experiment.

97
00:06:03,990 --> 00:06:08,180
And the input to this chaos machine is then

98
00:06:08,550 --> 00:06:12,034
something about the arbitrary software and the hypothesis, I will

99
00:06:12,072 --> 00:06:13,860
introduce it later.

100
00:06:15,770 --> 00:06:19,270
So hypothesis is one of the quite important

101
00:06:19,420 --> 00:06:22,854
concepts in chaos engineering, because we would like to

102
00:06:22,972 --> 00:06:26,326
somehow monitor the steady state of the system and

103
00:06:26,348 --> 00:06:30,506
then set up a set of hypotheses. And then we run these

104
00:06:30,528 --> 00:06:34,598
chaotic experiments to verify or falsify the hypotheses.

105
00:06:34,694 --> 00:06:39,174
So regarding the tri catch handling mechanisms

106
00:06:39,302 --> 00:06:42,462
in Java, in JVM, we designed these

107
00:06:42,516 --> 00:06:46,506
four different hypotheses the first one is resilience hypothesis.

108
00:06:46,618 --> 00:06:50,574
Based on our monitoring set car, it could monitor the

109
00:06:50,612 --> 00:06:53,858
performance and the functionalities, for example the return

110
00:06:53,944 --> 00:06:58,382
code of the HTTP request or even the HTTP

111
00:06:58,446 --> 00:07:02,450
content of the body. And then we compare this

112
00:07:02,600 --> 00:07:06,294
modest information with normal behavior to see

113
00:07:06,332 --> 00:07:09,270
if this hypothesis is still verified.

114
00:07:10,170 --> 00:07:13,862
And observability hypothesis is something about the

115
00:07:13,916 --> 00:07:17,870
user visible effect. So when we trigger this exception,

116
00:07:17,970 --> 00:07:21,814
whether it has some impact on the impact

117
00:07:21,862 --> 00:07:25,274
on the end users, like if the user is able

118
00:07:25,312 --> 00:07:28,954
to feel this exception or it's just waiting for

119
00:07:28,992 --> 00:07:32,334
the response for a longer time. And the third

120
00:07:32,372 --> 00:07:36,400
one is debug hypothesis. This is related to some

121
00:07:36,930 --> 00:07:41,178
good practice in logging

122
00:07:41,274 --> 00:07:44,580
development. So if we try

123
00:07:45,430 --> 00:07:49,074
to use trycatch block to catch an

124
00:07:49,112 --> 00:07:53,138
exception and somehow we need to log

125
00:07:53,224 --> 00:07:56,038
enough information if this exception happens.

126
00:07:56,204 --> 00:08:00,166
So it's helpful for debugging. So we design

127
00:08:00,268 --> 00:08:03,714
this debug hypothesis to see if we could capture

128
00:08:03,762 --> 00:08:07,458
any information when the exception happens. And the

129
00:08:07,484 --> 00:08:10,954
silence hypothesis is interesting, but maybe it's bad for

130
00:08:10,992 --> 00:08:14,422
development. It means when the exception

131
00:08:14,486 --> 00:08:17,782
happens it fails to provide the expected

132
00:08:17,846 --> 00:08:21,230
behavior. And also we can't get

133
00:08:21,300 --> 00:08:25,214
any useful information from the user side and from

134
00:08:25,252 --> 00:08:28,974
the developer side. So what

135
00:08:29,012 --> 00:08:32,154
we can learn from these four hypotheses for chaos

136
00:08:32,202 --> 00:08:35,878
machine, basically we could try to classify these track hatch

137
00:08:35,914 --> 00:08:39,794
blocks. When we do these chaos experiments, we could find some

138
00:08:39,832 --> 00:08:43,858
fragile ones, for example, we just try, you try to

139
00:08:44,024 --> 00:08:47,858
handle this exception, but we provide an empty catch block.

140
00:08:47,954 --> 00:08:51,462
Sometimes it's normal, but sometimes it means like we are

141
00:08:51,516 --> 00:08:54,806
liking some thoughts on this exception and we

142
00:08:54,828 --> 00:08:58,650
don't provide recovery mechanisms for this exception.

143
00:08:59,390 --> 00:09:03,322
Then we could also learn like log handling mechanisms in bad

144
00:09:03,376 --> 00:09:07,050
code level. So for research paper

145
00:09:07,200 --> 00:09:11,006
usually we pick up some projects and we

146
00:09:11,028 --> 00:09:14,446
did some experiments on that to show how this tool works

147
00:09:14,548 --> 00:09:18,014
and what's the performance issue and

148
00:09:18,052 --> 00:09:21,930
the future work of chaos machine. So we use this ttorrent

149
00:09:22,010 --> 00:09:26,366
to evaluate the prototype we developed. And ttorrent

150
00:09:26,398 --> 00:09:30,660
is a file downloading client in Java which implements the

151
00:09:31,670 --> 00:09:33,330
BitTorrent protocol.

152
00:09:35,050 --> 00:09:38,486
So with the help of chaos machine we

153
00:09:38,508 --> 00:09:41,350
could detect different track hatch blocks.

154
00:09:41,770 --> 00:09:45,250
And some of them are covered by our workload

155
00:09:45,330 --> 00:09:48,918
because in production we can't make it 100%

156
00:09:49,004 --> 00:09:53,670
covered if we just run our simple experiments

157
00:09:54,350 --> 00:09:57,926
and then we could try to classify these track hatch

158
00:09:57,958 --> 00:10:02,460
blocks based on our hypotheses. That's why I'm also interested in

159
00:10:02,990 --> 00:10:06,942
the chaos monkey for spring boot, like how we design these different

160
00:10:06,996 --> 00:10:10,960
types of exceptions. So this is the first

161
00:10:11,330 --> 00:10:14,830
piece of idea I would like to share. It's called chaos machine.

162
00:10:14,910 --> 00:10:18,386
And actually I would say it brings some thoughts on

163
00:10:18,408 --> 00:10:21,854
the different perturbation models. Like we could perturb the networks,

164
00:10:21,902 --> 00:10:26,102
we could also perturb it on the applicationlevel with

165
00:10:26,156 --> 00:10:28,978
some bad code instrumentation method.

166
00:10:29,154 --> 00:10:33,094
And the goal of chaos engineering is to

167
00:10:33,212 --> 00:10:36,646
verify your system and to build the confidence and finally

168
00:10:36,748 --> 00:10:39,594
to improve the resilience of the system.

169
00:10:39,712 --> 00:10:43,910
So we would also like to try to combine different techniques

170
00:10:43,990 --> 00:10:47,834
like the chaos engineering one, faulty injection techniques, and also the

171
00:10:47,872 --> 00:10:51,230
self healing techniques, for example, failure obliviousness.

172
00:10:51,570 --> 00:10:55,354
This is the second system we developed called triple

173
00:10:55,402 --> 00:10:59,418
agent. So monitoring perturbation and failure obliviousness

174
00:10:59,514 --> 00:11:03,810
for automated resilience improvement in Java applications.

175
00:11:04,550 --> 00:11:08,782
I think we could also call it automated resilience improvement

176
00:11:08,846 --> 00:11:12,782
suggestions. So we would like to leave these decisions for developers

177
00:11:12,846 --> 00:11:15,906
because as a research prototype you can't

178
00:11:16,018 --> 00:11:19,778
directly use it in production. I think it's even more dangerous.

179
00:11:19,874 --> 00:11:22,754
But with the fault injecting experiments,

180
00:11:22,802 --> 00:11:25,640
we could provide some suggestions like okay,

181
00:11:27,370 --> 00:11:31,226
you could handle these exceptions in another way, maybe it's better.

182
00:11:31,328 --> 00:11:34,378
And this information could be helpful for the

183
00:11:34,464 --> 00:11:37,994
developers. And since I come from China, I would

184
00:11:38,032 --> 00:11:41,914
like to share another chinese golf with you. This one

185
00:11:41,952 --> 00:11:45,422
is called ambidext charity, which is quite

186
00:11:45,476 --> 00:11:49,358
interesting. In one of the fictions, this guy

187
00:11:49,524 --> 00:11:52,662
uses two different kinds of technologies.

188
00:11:52,746 --> 00:11:56,786
So on his different hands, on his left hand he used

189
00:11:56,888 --> 00:12:00,974
one of the techniques which is mainly used to defend

190
00:12:01,102 --> 00:12:04,302
another hand is uses as an attacker.

191
00:12:04,446 --> 00:12:07,542
But he trained himself like using these two

192
00:12:07,596 --> 00:12:11,878
different techniques and both of them could be improved for

193
00:12:12,044 --> 00:12:16,294
practice. And this inspires us like okay,

194
00:12:16,332 --> 00:12:19,766
we could use chaos engineering to inject exceptions

195
00:12:19,878 --> 00:12:23,414
to trigger your system and see the abnormal behavior.

196
00:12:23,542 --> 00:12:27,482
But we could also combines some self healing techniques to

197
00:12:27,536 --> 00:12:31,066
evaluate like okay, how chaos engineering works, and with

198
00:12:31,088 --> 00:12:34,682
the help of chaos engineering, how your

199
00:12:34,816 --> 00:12:38,282
self healing strategies works. So we combine

200
00:12:38,346 --> 00:12:41,614
these two technologies and one of the basic thing

201
00:12:41,652 --> 00:12:45,058
is monitoring. So that's why we call it triple agent

202
00:12:45,144 --> 00:12:49,006
monitoring. Chaos engineering and self healing

203
00:12:49,198 --> 00:12:52,846
as a simple example. So in Java we have lots

204
00:12:52,878 --> 00:12:57,250
of trycatch blocks. We also have a chain of invocation like

205
00:12:57,320 --> 00:13:00,642
methods zero cost. Method two costs method

206
00:13:00,706 --> 00:13:04,434
one, and method one cost invokes methods zero. But in methods

207
00:13:04,482 --> 00:13:08,554
zero we could have some methods which declares to

208
00:13:08,592 --> 00:13:12,074
throw exceptions and then you must handle it in your

209
00:13:12,112 --> 00:13:15,786
source code with a try catch block. So this

210
00:13:15,808 --> 00:13:19,158
is a simple example. Like the exceptions

211
00:13:19,254 --> 00:13:23,402
EA and EB are handled in method

212
00:13:23,466 --> 00:13:26,590
two, the catch blocks are written by developers.

213
00:13:27,170 --> 00:13:31,354
But actually when we do the bad code instrumentation,

214
00:13:31,482 --> 00:13:35,230
when we throw an exceptions on purpose, in this method

215
00:13:35,310 --> 00:13:39,346
zero, we could make the exceptions propagate to the

216
00:13:39,368 --> 00:13:43,502
default catch handler. But we could also intercept

217
00:13:43,566 --> 00:13:47,542
these exceptions in the middle of the chain, like if I try

218
00:13:47,596 --> 00:13:51,318
to intercept the exception in method one and

219
00:13:51,404 --> 00:13:55,094
catch and ignore this exception in method one, then we have these

220
00:13:55,132 --> 00:13:59,034
two different behaviors and we could compare them.

221
00:13:59,232 --> 00:14:03,642
Which one is better? This is the

222
00:14:03,776 --> 00:14:06,854
core idea of failure oblivious computing.

223
00:14:06,982 --> 00:14:10,638
It's possible to catch and ignore some of

224
00:14:10,644 --> 00:14:14,410
the failures before they go into the default handler,

225
00:14:14,490 --> 00:14:17,774
and some of them could provide more

226
00:14:17,812 --> 00:14:21,450
resilient behavior. That's something we would like to confirm,

227
00:14:21,530 --> 00:14:25,042
to verify, and to compare. Also,

228
00:14:25,096 --> 00:14:29,154
we did the experiments with TTorrent and we do have these

229
00:14:29,352 --> 00:14:32,782
three different categories of the perturbation

230
00:14:32,846 --> 00:14:36,342
point, like the methods which

231
00:14:36,396 --> 00:14:40,802
declare to throw exceptions. So we have lots of fragile

232
00:14:40,946 --> 00:14:44,614
perturbation point. It means if we only inject one

233
00:14:44,652 --> 00:14:48,202
exception, it makes your system crash or it makes

234
00:14:48,256 --> 00:14:51,430
the system run abnormally

235
00:14:51,510 --> 00:14:55,626
forever. We also have some sensitive perturbation points.

236
00:14:55,728 --> 00:14:58,410
So if we inject exceptions,

237
00:14:59,150 --> 00:15:01,902
only one exception in this perturbation point,

238
00:15:02,036 --> 00:15:05,642
everything is fine. But if we keep injecting exceptions,

239
00:15:05,706 --> 00:15:09,562
then your system gets stalled or get crashed.

240
00:15:09,706 --> 00:15:12,818
And we also by default have some immunized points.

241
00:15:12,904 --> 00:15:16,574
So it means the catch block behaves

242
00:15:16,622 --> 00:15:19,806
pretty much well, pretty well to handle

243
00:15:19,838 --> 00:15:23,838
these exceptions. No matter how many exceptions we injected

244
00:15:24,014 --> 00:15:27,314
the tTorrent, the system still behaves

245
00:15:27,442 --> 00:15:30,550
well enough to fulfill the user's request.

246
00:15:32,010 --> 00:15:35,682
And then we ran this failure oblivious computing experiments

247
00:15:35,746 --> 00:15:39,110
to intercept exceptions and compare the behavior

248
00:15:39,190 --> 00:15:42,506
again. Then we could have the figures on

249
00:15:42,528 --> 00:15:46,154
the right, like there is some improvement suggestions for

250
00:15:46,192 --> 00:15:50,414
developers. So this is the second

251
00:15:50,532 --> 00:15:54,638
idea I would like to share. Actually the overhead of the

252
00:15:54,724 --> 00:15:58,302
triple agent is quite acceptable because we only

253
00:15:58,356 --> 00:16:02,426
instrument the bytecode to inject some exceptions and

254
00:16:02,548 --> 00:16:06,514
it happens only in these methods which

255
00:16:06,552 --> 00:16:10,482
declare to zero exceptions. So the only

256
00:16:10,536 --> 00:16:14,878
thing I could see is about the cpu time. Sometimes it causes more

257
00:16:14,984 --> 00:16:18,806
computation resources. Okay,

258
00:16:18,908 --> 00:16:22,950
and the final one. So I think I still have time.

259
00:16:23,020 --> 00:16:27,400
So I could show you some simple command here first.

260
00:16:34,450 --> 00:16:38,206
So this is a folder of a small demo of triple

261
00:16:38,238 --> 00:16:41,842
agent. And usually when we run

262
00:16:41,896 --> 00:16:45,718
some Java applications we could use this option

263
00:16:45,804 --> 00:16:49,494
like agent path to define what

264
00:16:49,532 --> 00:16:52,370
kind of Java agents you would like to attach.

265
00:16:52,530 --> 00:16:56,386
So this part is, I think everyone is familiar

266
00:16:56,418 --> 00:16:59,994
with this one. We just run the tTorrent application by

267
00:17:00,032 --> 00:17:03,546
default like Java Jar file, and then we try to

268
00:17:03,568 --> 00:17:06,422
download a centralized iOS package.

269
00:17:06,566 --> 00:17:10,526
And then we attach the monitoring agent

270
00:17:10,628 --> 00:17:14,666
and the fault injection agent with some parameters

271
00:17:14,778 --> 00:17:18,880
like the mode is throw exceptions, so it

272
00:17:19,650 --> 00:17:23,306
gets a list of the possible positions

273
00:17:23,418 --> 00:17:27,190
based on the methods based on their throw keywords.

274
00:17:27,290 --> 00:17:30,482
And then we could indicate the

275
00:17:30,616 --> 00:17:34,466
location of the perturbations and the

276
00:17:34,488 --> 00:17:38,134
default mode is coverage. So this means we just output some

277
00:17:38,172 --> 00:17:41,698
information without really injecting exceptions.

278
00:17:41,794 --> 00:17:46,310
We could change it to throw exceptions if we would like to conduct

279
00:17:47,150 --> 00:17:48,330
experiments.

280
00:17:50,270 --> 00:17:53,786
But as you can see, there are lots of

281
00:17:53,888 --> 00:17:57,242
parameters and it still feels tedious and

282
00:17:57,296 --> 00:17:59,850
complex to do this experiment.

283
00:18:00,190 --> 00:18:03,734
So that's why we also design some

284
00:18:03,872 --> 00:18:07,870
come up with some ideas about the pipelines

285
00:18:08,770 --> 00:18:12,806
and the automation tools. So for pops it's automated

286
00:18:12,938 --> 00:18:16,690
observability for dockerized Java applications because now

287
00:18:16,760 --> 00:18:19,922
Java developers also apply lots of stuff

288
00:18:19,976 --> 00:18:24,450
in docker and it wraps their applications in the Docker image.

289
00:18:24,790 --> 00:18:28,950
So first of all we conducted an empirical study about

290
00:18:29,020 --> 00:18:32,262
the Java applicationlevel, like how

291
00:18:32,316 --> 00:18:35,650
they use Docker on GitHub.

292
00:18:35,730 --> 00:18:39,346
So we mined like 1000 Java

293
00:18:39,378 --> 00:18:42,966
GitHub projects based on their popularities. And then

294
00:18:42,988 --> 00:18:46,486
we found more than almost 600 Java

295
00:18:46,518 --> 00:18:50,818
projects really use Docker in their source

296
00:18:50,854 --> 00:18:54,270
code base. And we also analyze their docker files to see

297
00:18:54,340 --> 00:18:58,378
okay, what are the most popular based images

298
00:18:58,474 --> 00:19:01,722
in their docker files. So Java

299
00:19:01,786 --> 00:19:05,310
eight, OpenGDK eight and Iopan ranks

300
00:19:05,470 --> 00:19:09,378
first and second. And we could also see ubuntu here in

301
00:19:09,384 --> 00:19:13,154
the list. So basically some developers install GDk by

302
00:19:13,192 --> 00:19:17,106
themselves and some of them just use like Java

303
00:19:17,138 --> 00:19:20,982
eight or OpenJDK eight which

304
00:19:21,036 --> 00:19:26,326
have JDK installed already and

305
00:19:26,428 --> 00:19:30,022
as a basic workflow. So developers

306
00:19:30,166 --> 00:19:33,546
usually declare a base image like okay I would like to

307
00:19:33,568 --> 00:19:37,610
use Java eight as a base image and then I add

308
00:19:37,680 --> 00:19:42,190
more commands to write my own applications and build an image

309
00:19:42,610 --> 00:19:46,014
so that I can publish it on the docker hub. But as

310
00:19:46,052 --> 00:19:49,582
pops we could also integrate some of the features into

311
00:19:49,636 --> 00:19:53,422
the base image. Then for developers they could just

312
00:19:53,556 --> 00:19:57,598
replace the front line and to declare a new base images

313
00:19:57,694 --> 00:20:01,614
which are augmented with this observability and fault

314
00:20:01,662 --> 00:20:04,994
injection features. So we

315
00:20:05,032 --> 00:20:08,694
integrate triple agent and other monitoring tools into the

316
00:20:08,732 --> 00:20:12,262
base image and then we provide this base

317
00:20:12,316 --> 00:20:16,246
image for developers so they just replace the frontline and

318
00:20:16,348 --> 00:20:19,850
build a new docker image for their applicationlevel.

319
00:20:20,910 --> 00:20:24,778
In this way it's also convenient that we could have two different

320
00:20:24,864 --> 00:20:28,266
types of containers in a production like environment and

321
00:20:28,288 --> 00:20:31,934
then one is just running normally, another one I could

322
00:20:31,972 --> 00:20:36,330
turn on more monitoring tools and faulty injection experiments.

323
00:20:36,410 --> 00:20:40,142
So we could compare this to the behavior of these

324
00:20:40,196 --> 00:20:44,082
two different containers. And I could also

325
00:20:44,136 --> 00:20:47,620
show you the pop system here.

326
00:20:54,010 --> 00:20:57,266
So this is quite a simple dockerized Java

327
00:20:57,298 --> 00:21:00,266
program which has ttorrent in it.

328
00:21:00,448 --> 00:21:03,974
And I could also build a docker image

329
00:21:04,022 --> 00:21:09,642
here so that I could run the

330
00:21:09,696 --> 00:21:13,626
original image to download the file. So this is

331
00:21:13,728 --> 00:21:17,770
a simple normal execution

332
00:21:19,470 --> 00:21:23,060
of this application and then we could use the

333
00:21:25,350 --> 00:21:29,540
augmentation tool to add this triple agent and

334
00:21:30,470 --> 00:21:33,220
extra monitoring tool to the application.

335
00:21:33,670 --> 00:21:37,346
Now it shows that, okay, we augmented the OpenGDK

336
00:21:37,378 --> 00:21:40,882
file. Then it provides a new base images

337
00:21:40,946 --> 00:21:42,950
called OpengDK pops.

338
00:21:44,410 --> 00:21:48,250
So for developers

339
00:21:52,870 --> 00:21:57,250
we could only replace this line like previously

340
00:21:57,670 --> 00:22:01,998
it was OpengDK, and now we could use royal chaos OpengDK

341
00:22:02,094 --> 00:22:05,750
pops to have these 40 injection features.

342
00:22:06,730 --> 00:22:10,694
And now I'm going to build the

343
00:22:10,732 --> 00:22:12,470
augmented base images.

344
00:22:14,890 --> 00:22:19,414
And finally I would like to run the

345
00:22:19,452 --> 00:22:23,398
augmented base images. So you see it's still like running normally,

346
00:22:23,494 --> 00:22:26,586
but if I use this

347
00:22:26,608 --> 00:22:30,062
one, you could get some extra dashboard. So this is another nice

348
00:22:30,116 --> 00:22:33,514
monitoring tool called glueroot. We could monitor the GVM,

349
00:22:33,562 --> 00:22:36,842
we could monitoring some application level metrics,

350
00:22:36,986 --> 00:22:40,690
and based on this configuration file,

351
00:22:49,380 --> 00:22:52,684
based on this configuration file, we could also monitor

352
00:22:52,732 --> 00:22:55,410
the different paturation places like okay,

353
00:22:56,340 --> 00:23:00,308
this location, like in which method, which class, I could

354
00:23:00,474 --> 00:23:04,564
actively throw exceptions with

355
00:23:04,602 --> 00:23:09,296
the happening rate and some extra parameters

356
00:23:09,408 --> 00:23:10,470
to do that.

357
00:23:12,540 --> 00:23:16,660
Okay, and as a summary,

358
00:23:16,740 --> 00:23:20,216
so today I shared the nice repo with you.

359
00:23:20,238 --> 00:23:24,936
Hopefully you will like it. And I also introduced three different ideas

360
00:23:24,968 --> 00:23:28,232
in our research group. The first one is chaos machine.

361
00:23:28,376 --> 00:23:32,264
On the try catch level it actively injects

362
00:23:32,312 --> 00:23:35,736
exceptions in the try block. The second one

363
00:23:35,778 --> 00:23:39,612
is triple agent. It happens on the methods level. It analyzes

364
00:23:39,676 --> 00:23:43,100
the serial keyword and injects exceptions

365
00:23:43,180 --> 00:23:47,888
in the methods body so that you could compare your system

366
00:23:47,974 --> 00:23:51,756
under perturbations under normal.

367
00:23:51,948 --> 00:23:55,452
And the final one is about the dockerized Java applications.

368
00:23:55,516 --> 00:23:59,312
So it's a pipeline which augments the base images to

369
00:23:59,366 --> 00:24:03,880
provide extra ability and photo injection functionalities.

370
00:24:05,180 --> 00:24:08,420
I think that's all for today, and thanks for listening.

