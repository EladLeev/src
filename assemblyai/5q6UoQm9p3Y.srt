1
00:01:54,570 --> 00:01:58,282
Good day. Welcome to the session on getting started with GitHub

2
00:01:58,346 --> 00:02:02,346
actions and some best practices along the way. I'm Ranjan

3
00:02:02,378 --> 00:02:05,880
Mohan, the senior security engineer at my low security.

4
00:02:06,330 --> 00:02:09,894
So a couple of prerequisites for this presentation would be that you

5
00:02:09,932 --> 00:02:13,506
are familiar with Git and the concept

6
00:02:13,538 --> 00:02:17,030
of commits, branches and remote versus local repositories.

7
00:02:17,530 --> 00:02:21,514
And also familiarity with any remote git based service such

8
00:02:21,552 --> 00:02:25,066
as GitHub, BitBucket or GitHub would be

9
00:02:25,088 --> 00:02:29,810
useful diving right into the session what are GitHub actions?

10
00:02:29,990 --> 00:02:33,662
In an oversimplified sentence, GitHub actions can be

11
00:02:33,716 --> 00:02:37,722
specified as the automation platform on GitHub.

12
00:02:37,866 --> 00:02:41,582
You could use this to perform any actions related to

13
00:02:41,716 --> 00:02:45,074
git repositories hosted on GitHub. And these

14
00:02:45,112 --> 00:02:48,850
actions, the way they function, can be split into

15
00:02:48,920 --> 00:02:52,878
three phases. Broadly, they would be trigger

16
00:02:53,054 --> 00:02:56,246
as to the trigger event that would trigger the

17
00:02:56,268 --> 00:02:59,554
action to start or to run, it could be anywhere,

18
00:02:59,602 --> 00:03:03,286
from anything from changing a branch to opening or

19
00:03:03,308 --> 00:03:06,838
managing a pull request, or even scheduling a

20
00:03:06,924 --> 00:03:10,278
expression, a cron expression to run the action periodically.

21
00:03:10,374 --> 00:03:13,750
And these actions run on GitHub hosted runners,

22
00:03:13,830 --> 00:03:17,334
which are basically virtual machines that they host in their environment.

23
00:03:17,462 --> 00:03:20,778
And at the moment there are three operating systems that are supported

24
00:03:20,794 --> 00:03:23,626
by GitHub runners, and that would be macOS,

25
00:03:23,738 --> 00:03:27,146
Windows and Ubuntu. And once the action

26
00:03:27,178 --> 00:03:30,286
is triggered, it actually runs. It runs the

27
00:03:30,308 --> 00:03:34,338
specified commands and code that you have set to run as a part of

28
00:03:34,344 --> 00:03:37,826
the action. And the way you define an action is in

29
00:03:37,848 --> 00:03:42,142
a Yaml format using the syntax provided by GitHub specified

30
00:03:42,206 --> 00:03:45,150
by GitHub. And once the actions runs,

31
00:03:45,310 --> 00:03:48,930
you could use it to enforce status checks. And this is the phase

32
00:03:49,010 --> 00:03:52,614
which distinguishes CI pipelines from

33
00:03:52,652 --> 00:03:56,646
other sorts of pipelines. In case of continuous integration pipelines where

34
00:03:56,668 --> 00:04:00,298
you want to ensure code quality checks or even security

35
00:04:00,384 --> 00:04:03,722
scan checks, you could have GitHub actions that

36
00:04:03,776 --> 00:04:07,114
could report pass or failure status and use that

37
00:04:07,152 --> 00:04:10,430
to enforce pr merges or changes to a particular

38
00:04:10,500 --> 00:04:14,206
branch to ensure that you have a base

39
00:04:14,308 --> 00:04:17,726
code quality check for all changes that go

40
00:04:17,748 --> 00:04:21,578
into your repository. Now when we talk about maintaining

41
00:04:21,594 --> 00:04:25,042
GitHub actions, I have a few questions that

42
00:04:25,096 --> 00:04:29,186
would help determine as to where or how you should meet him.

43
00:04:29,368 --> 00:04:33,298
Do you reuse the same action for multiple repositories within the

44
00:04:33,304 --> 00:04:37,158
same GitHub organization? If the answer is yes,

45
00:04:37,324 --> 00:04:41,634
then you would want to store the action in the GitHub repository

46
00:04:41,682 --> 00:04:44,834
of that organization so that it's

47
00:04:44,882 --> 00:04:48,406
easy to set it up in the remaining repositories

48
00:04:48,598 --> 00:04:52,570
of the same organization. The only problem

49
00:04:52,640 --> 00:04:56,266
it solves is an ease of setting up the action in

50
00:04:56,288 --> 00:04:59,626
other repositories, but there is still a problem that

51
00:04:59,648 --> 00:05:03,306
it doesn't address, which is if the original action file,

52
00:05:03,338 --> 00:05:07,246
the Yaml file changes, you would need to manually propagate the changes

53
00:05:07,348 --> 00:05:11,326
to all the repositories using the action. The second question

54
00:05:11,428 --> 00:05:15,326
would be does your action need access to secrets,

55
00:05:15,518 --> 00:05:19,554
any secrets from GitHub secrets, or any other

56
00:05:19,752 --> 00:05:23,490
secret storage utility that you have? If yes,

57
00:05:23,640 --> 00:05:27,206
please ensure that you do not trigger any

58
00:05:27,228 --> 00:05:30,902
of these actions from any untrusted forks. I will

59
00:05:30,956 --> 00:05:33,398
explain and also show you why.

60
00:05:33,564 --> 00:05:37,186
Now moving on to the Git

61
00:05:37,218 --> 00:05:40,746
repository this is an organization that me

62
00:05:40,768 --> 00:05:44,422
and my friends have been working on for the past three years. It's called padao.

63
00:05:44,486 --> 00:05:48,662
It contains an array of Python and Java, and a few Javascript

64
00:05:48,726 --> 00:05:52,510
libraries that you could use for your day to day becoming.

65
00:05:53,090 --> 00:05:56,446
Now, as you can see, there are 30 repositories that are a part

66
00:05:56,468 --> 00:06:00,350
of his organization at the moment. And for each organization

67
00:06:00,850 --> 00:06:04,770
you could create a special repository called the GitHub repository,

68
00:06:05,110 --> 00:06:08,194
which would house templates for

69
00:06:08,232 --> 00:06:11,794
anything to do with our organization. For example, you could

70
00:06:11,832 --> 00:06:15,454
host workflow or GitHub action related templates

71
00:06:15,502 --> 00:06:18,854
over here. You could host the readme for the organization within

72
00:06:18,892 --> 00:06:22,198
the profile folder, and you could also store issue

73
00:06:22,284 --> 00:06:26,246
or pull request templates for the organization for all repositories in the

74
00:06:26,268 --> 00:06:29,638
organization within the care sub folder. Now let's focus on the

75
00:06:29,644 --> 00:06:33,594
workflow templates part of it. As you can see, there are

76
00:06:33,792 --> 00:06:37,818
three actions over here within this folder. One would be the maven build

77
00:06:37,904 --> 00:06:41,126
Yaml, other would be the Maven package publish yaml,

78
00:06:41,238 --> 00:06:44,558
and another one would be the Python build yaml. We're going to look into the

79
00:06:44,564 --> 00:06:47,726
Maven build Yaml as an example action. And as you

80
00:06:47,748 --> 00:06:50,766
can see, there are three files associated with this action. One would

81
00:06:50,788 --> 00:06:54,218
be the properties JSON which basically contains

82
00:06:54,234 --> 00:06:57,954
the metadata for that particular action, the name, the description, and so

83
00:06:57,992 --> 00:07:01,806
on. And then you have the support vector graphic file which is the icon

84
00:07:01,918 --> 00:07:05,566
for the action, and the yaml file which actually contains

85
00:07:05,678 --> 00:07:09,442
the steps that need to be run or executed as a part of the action.

86
00:07:09,586 --> 00:07:12,806
Let's take a look at the JSON file. You can see it

87
00:07:12,828 --> 00:07:17,270
has some standard metadata fields such as name description, icon name categories.

88
00:07:17,630 --> 00:07:21,126
One interesting field over here is called file patterns,

89
00:07:21,238 --> 00:07:25,110
which can be used to suggest this action

90
00:07:25,270 --> 00:07:28,730
for any repository in your organization based

91
00:07:28,800 --> 00:07:32,426
on any file patterns that are matched. For example,

92
00:07:32,608 --> 00:07:36,570
any repository in my organization that contains a form XML file

93
00:07:36,730 --> 00:07:40,442
will be suggested. This maven build, clean, test and verify

94
00:07:40,506 --> 00:07:43,694
action in the action stack we'll be looking

95
00:07:43,732 --> 00:07:47,086
into it shortly. Now, going back to the workflow templates

96
00:07:47,118 --> 00:07:50,210
folder, let's try to look at the action and see

97
00:07:50,280 --> 00:07:54,066
what are the different parts of it. We start out

98
00:07:54,088 --> 00:07:57,734
with specifying the name of the action, and this on section over

99
00:07:57,772 --> 00:08:01,942
here is the trigger section. This is where you specify what

100
00:08:01,996 --> 00:08:05,814
triggers this particular action or workflow for

101
00:08:05,852 --> 00:08:07,510
this particular action.

102
00:08:08,810 --> 00:08:11,974
Pushing to the default branch or opening a pull request

103
00:08:12,022 --> 00:08:15,706
against the default branch are the triggers. And if you

104
00:08:15,728 --> 00:08:19,078
can see we're using a variable called default branch

105
00:08:19,174 --> 00:08:23,086
which we can only use in template actions that

106
00:08:23,108 --> 00:08:26,702
are specified within the GitHub repository. When you

107
00:08:26,756 --> 00:08:30,362
try and set up this action in any of the other repositories

108
00:08:30,426 --> 00:08:34,034
within this organization, it gets replaced by

109
00:08:34,152 --> 00:08:37,700
the main branch for the repository you're setting it up for.

110
00:08:39,190 --> 00:08:41,570
Now moving on to jobs.

111
00:08:42,070 --> 00:08:45,746
We have created a job called build and we specify that it runs

112
00:08:45,778 --> 00:08:49,862
on a bunch of operating systems which

113
00:08:49,916 --> 00:08:53,990
are Ubuntu, windows and macOS. And I've specified

114
00:08:54,650 --> 00:08:58,338
Java value as in the JDK version as

115
00:08:58,364 --> 00:09:02,394
14.0.1. And the steps of the action or

116
00:09:02,432 --> 00:09:06,362
this particular build job is as follows. It starts by

117
00:09:06,416 --> 00:09:10,438
using a preexisting action on GitHub called checkout,

118
00:09:10,614 --> 00:09:14,186
and this checks out the current repository. And then I've

119
00:09:14,218 --> 00:09:17,774
specified a git command to check out any sub

120
00:09:17,812 --> 00:09:21,118
modules if it's present in the repository. And then I'm setting up

121
00:09:21,124 --> 00:09:24,494
the JDK using another predefined or pre built action

122
00:09:24,542 --> 00:09:28,258
on GitHub. And after that I'm basically

123
00:09:28,424 --> 00:09:31,822
using this step to cache any maven

124
00:09:31,886 --> 00:09:35,860
related dependencies that I have pulled as a part of

125
00:09:36,550 --> 00:09:39,970
setting up this project. So for example, if my

126
00:09:40,120 --> 00:09:44,086
Java project depend has say 15 dependencies which it needs

127
00:09:44,108 --> 00:09:47,618
to pull every time it needs to run the project or test the project,

128
00:09:47,804 --> 00:09:51,690
if I end up caching it, this cache can be used

129
00:09:51,760 --> 00:09:55,366
by any other runs

130
00:09:55,398 --> 00:09:58,778
of this GitHub action to save some time on setting up the

131
00:09:58,784 --> 00:10:01,840
dependencies. That is the advantage of this particular step.

132
00:10:02,290 --> 00:10:06,110
And then we do a linking check using

133
00:10:06,260 --> 00:10:10,014
a tool called check style, and then a static code analysis check

134
00:10:10,052 --> 00:10:13,226
using a tool called PMD. And then I run all the Java

135
00:10:13,258 --> 00:10:17,590
unit tests and using junit and I use Jacob

136
00:10:17,690 --> 00:10:20,690
to enforce and verify code coverage.

137
00:10:21,030 --> 00:10:25,170
So as you can see, this yaml file specifies the

138
00:10:25,240 --> 00:10:28,486
set of steps that I would like to be run as a part

139
00:10:28,508 --> 00:10:31,714
of this action, and it is triggered whenever

140
00:10:31,762 --> 00:10:35,398
someone pushes to the default branch directly, or if they open a

141
00:10:35,404 --> 00:10:37,240
pull request against it.

142
00:10:38,190 --> 00:10:42,570
Now that we took an example and

143
00:10:42,640 --> 00:10:46,282
we went through it, let's look at another

144
00:10:46,416 --> 00:10:49,894
example of a GitHub workflow within a repository

145
00:10:49,942 --> 00:10:54,234
called report. So this repository called report

146
00:10:54,352 --> 00:10:58,154
is a repository that I personally use to generate reports

147
00:10:58,202 --> 00:11:01,646
on the partial organization. It generates it

148
00:11:01,668 --> 00:11:05,970
as a readme within the same repository.

149
00:11:07,190 --> 00:11:10,674
So when we look at this particular action, you can

150
00:11:10,712 --> 00:11:14,130
see that not only are the trigger points any

151
00:11:14,200 --> 00:11:17,362
pushes to the main branch or pull request to the main branch,

152
00:11:17,426 --> 00:11:21,218
which happens to be the default branch for this repository.

153
00:11:21,394 --> 00:11:24,966
There is also a cron expression specified as

154
00:11:24,988 --> 00:11:28,570
a schedule. So this ensures that this actions is run

155
00:11:28,640 --> 00:11:32,140
once every day. So that's the

156
00:11:32,830 --> 00:11:36,438
advantage of using any cron expression as a schedule.

157
00:11:36,534 --> 00:11:39,754
You could specify the action to be triggered periodically or

158
00:11:39,792 --> 00:11:43,946
at a specified time, every single day or on a periodic

159
00:11:43,978 --> 00:11:47,246
basis. Another thing

160
00:11:47,268 --> 00:11:50,846
that I've specified as a part of the triggers for

161
00:11:50,868 --> 00:11:54,354
this action is something known as workflow dispatch. And what

162
00:11:54,392 --> 00:11:58,126
this lets me do is it lets me manually trigger this action.

163
00:11:58,318 --> 00:12:01,022
In general, whenever you just use pull, request,

164
00:12:01,086 --> 00:12:04,498
push, or even schedule, there wouldn't be a

165
00:12:04,504 --> 00:12:08,466
facility for you to manually trigger this action. But since a specified workflow

166
00:12:08,498 --> 00:12:11,654
dispatch that is possible, and how we go about

167
00:12:11,692 --> 00:12:15,526
doing that is we go to the actions tab, we click on the action and

168
00:12:15,548 --> 00:12:19,354
then we would see this breadcrumb over

169
00:12:19,392 --> 00:12:23,510
here which says it has a workflow dispatch event trigger

170
00:12:23,590 --> 00:12:27,126
and it gives you an option to run this particular action

171
00:12:27,238 --> 00:12:31,726
on any branch within this repository. So I

172
00:12:31,748 --> 00:12:34,830
can select my branches main and click on one workflow

173
00:12:37,170 --> 00:12:41,050
and we should be able to see the job shortly.

174
00:12:41,210 --> 00:12:45,010
The actions and it has been queued

175
00:12:47,430 --> 00:12:51,170
and when I click on it it's starting to set up the job.

176
00:12:51,320 --> 00:12:54,370
It's running all the steps within the action file,

177
00:13:03,880 --> 00:13:07,536
installing all the dependencies and this is quick because I have already cached

178
00:13:07,568 --> 00:13:16,016
them and I'm retrieving them and

179
00:13:16,038 --> 00:13:19,536
then I'm running the report. So after it runs the

180
00:13:19,558 --> 00:13:22,848
report, it commits and pushes the report to the same repository, which you'll

181
00:13:22,864 --> 00:13:26,992
be able to see, and it caches the current dependencies

182
00:13:27,136 --> 00:13:30,710
in order for it to be reused later, and so on.

183
00:13:32,760 --> 00:13:36,724
Perfect tools like the job has completed successfully.

184
00:13:36,852 --> 00:13:40,760
Now if I go to the code and I look at the readme.

185
00:13:41,580 --> 00:13:45,324
Nice. This happens to be the latest report from today, the 26

186
00:13:45,362 --> 00:13:48,556
November at 06:56 a.m. UTC time,

187
00:13:48,738 --> 00:13:52,792
which is the current time. And this report generation

188
00:13:52,856 --> 00:13:56,268
action also runs periodically, once every day,

189
00:13:56,434 --> 00:14:00,376
and it basically displays all the repositories in this organization

190
00:14:00,568 --> 00:14:03,936
along with certain information as to whether it's maintained or not, whether it is

191
00:14:03,958 --> 00:14:07,392
publicly exposed or whether it's a private report, how many open issues

192
00:14:07,446 --> 00:14:11,424
are there, and so on. So feel free to use this template

193
00:14:11,472 --> 00:14:14,580
to generate your own reports using GitHub actions.

194
00:14:16,120 --> 00:14:19,270
Now coming back to the organization page,

195
00:14:19,640 --> 00:14:23,636
one other aspect of configuring

196
00:14:23,828 --> 00:14:28,024
settings for this organization would be looking

197
00:14:28,062 --> 00:14:32,184
at a section known as secrets. See, whenever you run any

198
00:14:32,222 --> 00:14:35,720
actions, you could use it for CI related

199
00:14:36,160 --> 00:14:39,916
goals or any other tools, you might require some sort

200
00:14:39,938 --> 00:14:43,836
of secrets or credentials in order to trigger API calls or

201
00:14:43,858 --> 00:14:47,336
do some work. And for all those custom secrets

202
00:14:47,368 --> 00:14:51,308
that you need, you would configure that in GitHub secrets

203
00:14:51,324 --> 00:14:54,896
and then fetch it in your action. So how it goes about doing this is

204
00:14:54,918 --> 00:14:58,288
whenever you configure something in the secrets section of

205
00:14:58,294 --> 00:15:01,504
the organization, it gets set as an

206
00:15:01,542 --> 00:15:04,816
environment variable within the runner running the action.

207
00:15:04,928 --> 00:15:08,848
So you could just ask your script to fetch the environment variable corresponding

208
00:15:08,864 --> 00:15:12,368
to the secret and use it. That's how you can use it.

209
00:15:12,474 --> 00:15:15,672
But as much as this prevents us

210
00:15:15,726 --> 00:15:19,192
from checking in the secret into

211
00:15:19,246 --> 00:15:22,760
our repository, it also

212
00:15:22,830 --> 00:15:26,508
poses one small issue. Let's take a look at this particular

213
00:15:26,594 --> 00:15:31,112
pr. This particular pr is merged

214
00:15:31,176 --> 00:15:34,888
into one of the repositories within the partial organization

215
00:15:35,064 --> 00:15:38,148
and the main branch. So we're looking at the jpopper

216
00:15:38,184 --> 00:15:42,192
repository, and the changes are coming from a user called

217
00:15:42,246 --> 00:15:46,224
SIl s one 10, and they are getting

218
00:15:46,262 --> 00:15:49,704
the changes from their fork containing

219
00:15:49,772 --> 00:15:53,716
the branch called issue 33. So since they control

220
00:15:53,818 --> 00:15:57,924
the code that they write in issue 33, they could

221
00:15:57,962 --> 00:16:01,270
also modify the GitHub action to

222
00:16:03,820 --> 00:16:07,604
read the secrets and expose it via

223
00:16:07,652 --> 00:16:10,372
an API call to their own servers,

224
00:16:10,516 --> 00:16:13,704
or just send it externally to any

225
00:16:13,742 --> 00:16:17,388
other public facing service

226
00:16:17,474 --> 00:16:20,744
that they own. So that could lead to compromising

227
00:16:20,792 --> 00:16:24,204
secrets or any other sensitive information that you

228
00:16:24,242 --> 00:16:27,728
retrieve using GitHub secrets in your action. So you need to

229
00:16:27,734 --> 00:16:32,080
be wary whenever you run GitHub actions

230
00:16:32,660 --> 00:16:36,544
on pull requests or changes that come from

231
00:16:36,742 --> 00:16:40,752
fort repositories. And how we go about configuring

232
00:16:40,816 --> 00:16:44,244
this is something that's interesting. When you go to

233
00:16:44,282 --> 00:16:45,140
settings,

234
00:16:48,680 --> 00:16:52,608
the actions tab lets you configure

235
00:16:52,704 --> 00:16:55,944
only a restricted amount of things. It lets you say okay,

236
00:16:55,982 --> 00:16:59,864
you can only allow the actions in this organization and

237
00:16:59,902 --> 00:17:03,268
reusable workflows, or even actions that are created

238
00:17:03,284 --> 00:17:06,396
by GitHub or verified creators. This helps with an

239
00:17:06,418 --> 00:17:09,630
extent, but it still doesn't prevent people

240
00:17:11,280 --> 00:17:15,176
with forked repositories from making changes and running that action

241
00:17:15,208 --> 00:17:18,780
as a part of the new pull request. So we go to the organization

242
00:17:18,860 --> 00:17:22,304
page and the settings section, and we

243
00:17:22,342 --> 00:17:26,080
go to actions. And over

244
00:17:26,150 --> 00:17:29,880
here we see a section called four pull request workflows

245
00:17:29,900 --> 00:17:33,444
from outside collaborators, and we see three

246
00:17:33,482 --> 00:17:37,104
different settings require approval for first time contributors

247
00:17:37,152 --> 00:17:41,300
who are new to GitHub require approval for first time contributors

248
00:17:41,640 --> 00:17:44,596
who are first time contributors to this repository,

249
00:17:44,788 --> 00:17:48,520
any repository within this organization, and require approval for all outside

250
00:17:48,590 --> 00:17:52,104
collaborators. Ideally, you would

251
00:17:52,142 --> 00:17:56,060
want to require approval for all outside collaborators, and only when

252
00:17:56,130 --> 00:17:59,324
the approval is successful, as in a person

253
00:17:59,362 --> 00:18:02,520
has approved the pull request or the action request,

254
00:18:02,680 --> 00:18:06,316
will the workflow run for

255
00:18:06,338 --> 00:18:10,476
their changes. Another interesting setting

256
00:18:10,508 --> 00:18:14,220
change over here is workflow permissions if you don't

257
00:18:14,300 --> 00:18:17,644
like. For example, in case of the report repository,

258
00:18:17,772 --> 00:18:21,084
I would need read and write permissions for the GitHub action

259
00:18:21,132 --> 00:18:25,076
because it writes the report back to the repository. But in case you just

260
00:18:25,098 --> 00:18:28,400
need to build and you don't need to write back anything to the repository,

261
00:18:28,560 --> 00:18:31,472
always, always keep the read permissions as default.

262
00:18:31,536 --> 00:18:33,480
Only read permissions as default.

263
00:18:34,380 --> 00:18:38,184
Okay, perfect. Now that we were able to look at

264
00:18:38,302 --> 00:18:41,864
GitHub secrets and how they're used, and what not

265
00:18:41,902 --> 00:18:44,920
to do when dealing with pull requests from folks,

266
00:18:45,820 --> 00:18:47,640
let's get back to the presentation.

267
00:18:49,180 --> 00:18:53,228
So as a follow up

268
00:18:53,314 --> 00:18:56,844
set of links, I have specified three links that you could

269
00:18:56,882 --> 00:19:00,412
use to not only set up GitHub actions for your repositories,

270
00:19:00,556 --> 00:19:03,664
but also maybe look into using

271
00:19:03,702 --> 00:19:06,690
it for many other programming languages such as Go,

272
00:19:08,180 --> 00:19:11,796
JavaScript, and so on. So the first link over here

273
00:19:11,978 --> 00:19:15,380
has information on setting up starter actions for

274
00:19:15,450 --> 00:19:19,476
a variety of programming languages on GitHub, and the

275
00:19:19,498 --> 00:19:23,168
second link is to the organization report that I generate.

276
00:19:23,264 --> 00:19:26,584
You could always fork it, modify it as

277
00:19:26,622 --> 00:19:30,392
per your needs for your organization and go on. And I've also

278
00:19:30,446 --> 00:19:34,212
specified workflow templates for Java and Python repositories

279
00:19:34,276 --> 00:19:35,880
that we use in our organization.

280
00:19:37,100 --> 00:19:40,824
I'll specify all these links as a part

281
00:19:40,862 --> 00:19:44,152
of the description section as well. Feel free

282
00:19:44,206 --> 00:19:48,220
to refer them, and feel free to post any questions, his comments,

283
00:19:48,380 --> 00:19:52,464
or reach out to me via LinkedIn. I'd be more than happy to connect and

284
00:19:52,502 --> 00:19:55,888
answer and help in any way. Thank you for your time. Hope to

285
00:19:55,894 --> 00:19:56,780
see you now in the presentation.

