1
00:00:27,010 --> 00:00:31,394
Hello and welcome to my talk titled supercharge your JavaScript

2
00:00:31,442 --> 00:00:34,806
with Webassembly. My name is Tamash and I work as a

3
00:00:34,828 --> 00:00:38,210
senior developer experience engineer at a company called Cloudinary.

4
00:00:38,290 --> 00:00:42,290
Furthermore, you also see my various contact details on this slide.

5
00:00:42,370 --> 00:00:45,026
Please feel free to follow me on Twitter.

6
00:00:45,218 --> 00:00:49,206
So today I'm going to talk to you about Webassembly, and in

7
00:00:49,228 --> 00:00:52,574
order to get started we need two go back a couple of years,

8
00:00:52,692 --> 00:00:56,926
and we need to take a look at this very, very simplified view of

9
00:00:56,948 --> 00:01:00,858
the web platform. So think about it this way. You have your browser,

10
00:01:00,954 --> 00:01:04,814
and your browser is capable of executing JavaScript

11
00:01:04,862 --> 00:01:08,242
code. You write some JavaScript and that magically does its thing

12
00:01:08,296 --> 00:01:11,506
inside the browser. So there's this virtual machine in the

13
00:01:11,528 --> 00:01:14,574
browser itself that is capable of executing,

14
00:01:14,622 --> 00:01:18,226
interpreting and doing all sorts of magical things with your JavaScript code.

15
00:01:18,328 --> 00:01:22,118
And this is what is available in the browsers today. Brand it was available

16
00:01:22,204 --> 00:01:26,246
for a couple of years now, and it's going to be an important point

17
00:01:26,268 --> 00:01:29,738
that I'm going to make to you later on with regards to this particular

18
00:01:29,824 --> 00:01:33,146
slide. Now, there's no denying in the

19
00:01:33,168 --> 00:01:36,378
fact that the web is growing at an incredible rate.

20
00:01:36,464 --> 00:01:39,910
So the things that we release, the things that we consume,

21
00:01:40,070 --> 00:01:43,806
are highly performance. They try to achieve a lot of things.

22
00:01:43,988 --> 00:01:47,594
We try to use video, we try to do a lot of processing

23
00:01:47,722 --> 00:01:51,166
inside these browsers and on the web brand.

24
00:01:51,188 --> 00:01:54,458
Essentially the main language that we use is JavaScript,

25
00:01:54,554 --> 00:01:57,714
and we just try to push JavaScript to

26
00:01:57,752 --> 00:02:01,662
its limit. And in fact, let me just rephrase this sentence,

27
00:02:01,726 --> 00:02:05,198
and I'm going to rephrase it to say we push a language

28
00:02:05,374 --> 00:02:08,150
well outside its comfort zone. Now if you remember,

29
00:02:08,300 --> 00:02:11,986
JavaScript was not really intended to be the main programming language

30
00:02:12,018 --> 00:02:16,070
of the web, and now there are a vast number

31
00:02:16,140 --> 00:02:20,294
of frameworks and other tools and libraries that rely

32
00:02:20,342 --> 00:02:24,250
heavily on JavaScript. But that wasn't the intention. Now, JavaScript is

33
00:02:24,400 --> 00:02:28,086
a beautiful language, don't get me wrong, and all these features

34
00:02:28,118 --> 00:02:31,846
in the browsers are trying to get the most out of the language.

35
00:02:31,958 --> 00:02:35,790
The language is still evolving, which is a good thing. But there are some things

36
00:02:35,940 --> 00:02:39,406
that JavaScript is not really good at, and probably it

37
00:02:39,428 --> 00:02:42,902
will never be good at, things like heavy

38
00:02:43,066 --> 00:02:47,170
processing things, cpu heavy tasks and so on and so forth.

39
00:02:47,830 --> 00:02:51,314
So all these low level tasks are

40
00:02:51,512 --> 00:02:55,074
either two complex, or they could introduce some

41
00:02:55,112 --> 00:02:58,690
performance bottlenecks inside your application. And of course I mentioned

42
00:02:58,760 --> 00:03:02,038
that before, but let me just say that again, that all the v eight and

43
00:03:02,044 --> 00:03:05,174
these other compilers that you have inside your browsers are

44
00:03:05,212 --> 00:03:08,738
doing an amazing things to do, performance optimization,

45
00:03:08,834 --> 00:03:12,614
but sometimes you just can't do it because of the way how JavaScript

46
00:03:12,662 --> 00:03:16,202
is written. So of course thinking about this,

47
00:03:16,256 --> 00:03:20,090
there must be a better way to allow low level access and

48
00:03:20,160 --> 00:03:23,162
farts code execution at the same time, right?

49
00:03:23,216 --> 00:03:26,426
So there may be a use case where JavaScript

50
00:03:26,458 --> 00:03:30,126
is just not good enough and you need something that has lower level access than

51
00:03:30,148 --> 00:03:33,746
JavaScript, performs better than JavaScript, and so on and so forth. And this

52
00:03:33,768 --> 00:03:38,690
is when we need to say hi to webassembly. Web assembly

53
00:03:39,750 --> 00:03:43,906
is something that wasn't introduced recently. In fact,

54
00:03:44,008 --> 00:03:47,654
here's a little timeline and a historic overview for you. Back in

55
00:03:47,692 --> 00:03:51,762
2013, I believe it was the Mozilla Labs who created ASM

56
00:03:51,826 --> 00:03:55,830
js which really just allowed us to execute

57
00:03:56,250 --> 00:03:59,530
code written in a c on the web.

58
00:03:59,680 --> 00:04:02,954
Okay? Now webassembly two years later had its

59
00:04:02,992 --> 00:04:06,714
first announcement. Another two years after that an MVP was

60
00:04:06,752 --> 00:04:10,990
created brand believe it or not, since 2019

61
00:04:11,330 --> 00:04:15,642
web assembly part of the official w three C recommendation

62
00:04:15,706 --> 00:04:19,466
list. So HTML CSS JavaScript

63
00:04:19,578 --> 00:04:23,214
and since 2019 Webassembly is

64
00:04:23,252 --> 00:04:27,326
also part of the recommendation list and what web assembly.

65
00:04:27,358 --> 00:04:30,754
Now if you go to the MDN documentation, which I really

66
00:04:30,792 --> 00:04:34,514
really like, you will find a very good paragraph that

67
00:04:34,552 --> 00:04:38,674
describes what web assembly, but it's a relatively complex paragraph.

68
00:04:38,802 --> 00:04:42,166
And so I came up with my much simpler explanation as

69
00:04:42,188 --> 00:04:45,986
to what webassembly is. And very simply put, it allows

70
00:04:46,018 --> 00:04:49,706
you to execute non web based code at a

71
00:04:49,728 --> 00:04:52,250
near native speed on the web,

72
00:04:52,400 --> 00:04:55,866
okay? So it allows us to have an application

73
00:04:55,968 --> 00:05:00,154
written in C Plus plus and then be able two run that

74
00:05:00,352 --> 00:05:03,966
inside the browser itself. So we're going to take a look at can

75
00:05:03,988 --> 00:05:07,214
examples of this later on. Now what

76
00:05:07,252 --> 00:05:10,810
is this connection between JavaScript web assembly?

77
00:05:10,890 --> 00:05:14,442
So there is this thing called the webassembly JavaScript API,

78
00:05:14,586 --> 00:05:17,300
and oftentimes I hear that people,

79
00:05:17,830 --> 00:05:21,982
you know, Webassembly is the next javascript, it's going to eliminate JavaScript,

80
00:05:22,046 --> 00:05:25,338
it's going to take over the web, and JavaScript is going to be diminished

81
00:05:25,374 --> 00:05:28,834
and forgotten. And these things couldn't be further

82
00:05:28,882 --> 00:05:32,770
from the truth because JavaScript and Webassembly actually complement

83
00:05:32,850 --> 00:05:36,214
each other, okay? And they do

84
00:05:36,252 --> 00:05:40,006
this by the Webassembly JavaScript APIs, which is a set of functions

85
00:05:40,038 --> 00:05:43,734
and a set of functionality that allows you two consume webassembly

86
00:05:43,782 --> 00:05:47,322
modules from within your JavaScript application or from

87
00:05:47,376 --> 00:05:51,246
within your web application. And what

88
00:05:51,268 --> 00:05:55,486
this allows you to do is to essentially use the power

89
00:05:55,668 --> 00:05:59,898
that comes web assembly and utilize the flexibility

90
00:05:59,994 --> 00:06:03,566
that you are used to when working with JavaScript so to

91
00:06:03,588 --> 00:06:06,702
me this is an ideal mix between the two worlds.

92
00:06:06,846 --> 00:06:10,180
So the question is, how do you actually create

93
00:06:11,110 --> 00:06:14,594
a webassembly module? What is the process that you need to go through?

94
00:06:14,712 --> 00:06:17,846
If you want to use web assembly JavaScript API, you want to do something web

95
00:06:17,868 --> 00:06:21,446
assembly, how would that look like? So here's a simple example for you.

96
00:06:21,468 --> 00:06:24,514
So you write some code in a native language,

97
00:06:24,562 --> 00:06:29,080
okay? And this could be c, C and

98
00:06:29,610 --> 00:06:33,674
a number of other languages. And here's a very simple example for you

99
00:06:33,872 --> 00:06:36,730
where we have a square method written in c,

100
00:06:36,800 --> 00:06:40,566
takes an integer as a parameter and then returns that number squared.

101
00:06:40,678 --> 00:06:43,486
Very very simple. Now what we need to do,

102
00:06:43,668 --> 00:06:48,250
we also need to install a tool called mscripton,

103
00:06:48,330 --> 00:06:52,234
okay? And to install that it's relatively simple. Just go to mscripton.org,

104
00:06:52,282 --> 00:06:56,366
I think that's the website, you set it up to your machine

105
00:06:56,478 --> 00:07:00,114
and then you will have access to the eMcC command line tool

106
00:07:00,152 --> 00:07:03,870
which is the M JavaScript brand compiler. And then you essentially

107
00:07:03,950 --> 00:07:07,394
take your c file, you specify a number of

108
00:07:07,432 --> 00:07:10,742
options and notice resume equals to one.

109
00:07:10,796 --> 00:07:14,326
And then you have some extra exported runtime methods in

110
00:07:14,348 --> 00:07:18,294
here, and then you have the o square js. So you

111
00:07:18,332 --> 00:07:21,722
essentially run this command which is then going to create two things

112
00:07:21,776 --> 00:07:25,670
for you. It is going to generate a square js file

113
00:07:25,750 --> 00:07:29,338
brand, it's going to create a square wesm file. The WeSm file is

114
00:07:29,344 --> 00:07:33,274
going to be web assembly module. And what is the square js

115
00:07:33,322 --> 00:07:37,614
then? So the square js is what you would call a

116
00:07:37,812 --> 00:07:41,566
glue code. So that code is used

117
00:07:41,668 --> 00:07:45,150
to tie the webassembly module together

118
00:07:45,220 --> 00:07:48,866
with Javascript so that you drop that js file into your

119
00:07:48,968 --> 00:07:52,386
application or into your web app, and then you will be

120
00:07:52,408 --> 00:07:56,290
able to access the methods that you have exposed from your c function,

121
00:07:56,440 --> 00:08:00,294
from your c application. Even so, all you need to do now is

122
00:08:00,332 --> 00:08:03,894
load webassembly via Javascript and this is how you would

123
00:08:03,932 --> 00:08:07,430
do that. And notice I'm using module on the runtime initialized.

124
00:08:08,010 --> 00:08:12,082
I have access to that because I've added that glue code square

125
00:08:12,156 --> 00:08:15,434
js to my app. And there are a number of ways

126
00:08:15,472 --> 00:08:19,194
that you can do this. And this is just a very simple way

127
00:08:19,232 --> 00:08:22,574
of accessing web assembly module and the function that we

128
00:08:22,612 --> 00:08:26,206
have in c just to save some screen estate here. So I

129
00:08:26,228 --> 00:08:30,078
created an API object where I have a calculate square method that actually

130
00:08:30,164 --> 00:08:34,010
references the in square method that I have specified

131
00:08:34,170 --> 00:08:37,714
inside my c file. And then notice that for the event

132
00:08:37,752 --> 00:08:41,858
listener for the button I can go ahead brand, just write

133
00:08:41,944 --> 00:08:45,666
regular Javascript, I can take a number from can input field and I

134
00:08:45,688 --> 00:08:49,126
can send that to API calculate square which

135
00:08:49,148 --> 00:08:53,240
is then going to do the squaring of the number

136
00:08:53,930 --> 00:08:57,414
using the webassembly module. Right. Now before you tell

137
00:08:57,452 --> 00:09:00,598
me that you can square numbers in Javascript, I am

138
00:09:00,684 --> 00:09:03,882
very well aware of that. But the point here

139
00:09:03,936 --> 00:09:07,578
is to just show you how easy it is to have something in c

140
00:09:07,664 --> 00:09:11,062
and then bring it to the web using mscripton

141
00:09:11,126 --> 00:09:15,038
brand webassembly modules. Okay? And then the last step is of course you

142
00:09:15,044 --> 00:09:18,394
just need to run your web app. And as a final reminder,

143
00:09:18,522 --> 00:09:22,686
just remember to always use to glue code. So that's the code

144
00:09:22,868 --> 00:09:26,314
that these compilers like the emcc brand,

145
00:09:26,372 --> 00:09:30,802
some others would produce. Because if you don't add that to your application then

146
00:09:30,856 --> 00:09:34,386
you won't be able to interact with the Webassembly module or life is

147
00:09:34,408 --> 00:09:37,698
going to be a lot more difficult. Also, if you're

148
00:09:37,714 --> 00:09:41,574
doing a progressive web app that may use web assembly module, just make sure

149
00:09:41,612 --> 00:09:45,394
that you add the glue code as part of your cached

150
00:09:45,442 --> 00:09:47,160
offline assets as well.

151
00:09:48,490 --> 00:09:52,310
Okay, so on this note,

152
00:09:53,850 --> 00:09:58,202
non LLVM languages, so a language like Go work

153
00:09:58,256 --> 00:10:00,898
slightly differently. So if you are a Go developer,

154
00:10:01,014 --> 00:10:04,766
you're familiar with the Go programming language, then just know that

155
00:10:04,788 --> 00:10:08,446
you can also compile your Go project two web

156
00:10:08,468 --> 00:10:11,886
assembly module. So go has a compilation target for

157
00:10:11,908 --> 00:10:15,658
webassembly. However, things will be slightly different.

158
00:10:15,764 --> 00:10:19,406
Now I have an example of this where I'm going to highlight the differences

159
00:10:19,438 --> 00:10:22,946
for you. Actually with Go the glue code is something that

160
00:10:22,968 --> 00:10:26,754
you need to download from either the Go website or from their GitHub

161
00:10:26,802 --> 00:10:30,614
repositories. And with Go you can

162
00:10:30,652 --> 00:10:34,102
actually have direct DOm access from your

163
00:10:34,156 --> 00:10:38,040
Go project as well. So it's slightly different than how a c or a c

164
00:10:38,510 --> 00:10:42,202
project would work. Now of course,

165
00:10:42,256 --> 00:10:45,866
why would you want to use Webassembly? Why would you want

166
00:10:45,888 --> 00:10:49,706
to choose this technology for your next project? That's a very good question.

167
00:10:49,808 --> 00:10:53,040
And I tried to select a couple of points that

168
00:10:53,490 --> 00:10:56,814
either I have used or I heard other say

169
00:10:56,852 --> 00:11:00,618
was valid use cases. So reusing existing code, I think that's

170
00:11:00,634 --> 00:11:04,542
a very straightforward one because you have maybe

171
00:11:04,676 --> 00:11:08,882
an order C or C Plus plus project that you want to now

172
00:11:08,936 --> 00:11:12,574
run on the web, maybe does some audio manipulation, some video manipulation,

173
00:11:12,622 --> 00:11:16,174
image manipulation, something that is very low level processing

174
00:11:16,222 --> 00:11:20,338
that you really don't want to recreate in JavaScript, or you cannot recreate

175
00:11:20,354 --> 00:11:23,320
it in JavaScript, you can just port those to the web.

176
00:11:23,690 --> 00:11:27,330
Predictable performance is an interesting one. I would

177
00:11:27,500 --> 00:11:32,106
talk about that in combination with the binary size. So when

178
00:11:32,128 --> 00:11:36,374
you have some JavaScript file and the v eight engine runs

179
00:11:36,422 --> 00:11:39,674
through with its magic on top of that

180
00:11:39,792 --> 00:11:43,166
you get various performance optimizations, but those

181
00:11:43,268 --> 00:11:47,034
happen kind of on the fly, whereas with web assembly

182
00:11:47,082 --> 00:11:51,034
module, because of the static typing and the way how you just create web assembly

183
00:11:51,082 --> 00:11:54,654
module, your performance is always going to be the

184
00:11:54,692 --> 00:11:58,302
same. There is not going to be varying levels of performances

185
00:11:58,366 --> 00:12:02,286
based on how your entire application is written, right? So the performance

186
00:12:02,318 --> 00:12:06,066
and the binary size of the webassembly module is always going to

187
00:12:06,088 --> 00:12:09,800
be the same. So it's a given, it's not going two change.

188
00:12:10,250 --> 00:12:14,114
And the last use case could be where you want to have some advanced

189
00:12:14,242 --> 00:12:17,590
system access. So maybe you don't want to run threads,

190
00:12:18,170 --> 00:12:21,526
you want to do SIMD, you want to have shared

191
00:12:21,558 --> 00:12:25,318
memory. So all these advanced features that you do not have currently in JavaScript,

192
00:12:25,414 --> 00:12:29,370
then Webassembly is a very good option for those. In fact,

193
00:12:29,520 --> 00:12:33,114
in a recent project I was using two versions

194
00:12:33,242 --> 00:12:36,874
of the Webassembly module for the OpenCV

195
00:12:36,922 --> 00:12:40,126
library. One was with SIMD enabled and the

196
00:12:40,148 --> 00:12:43,750
other one was without SIMD, and I could achieve

197
00:12:43,930 --> 00:12:47,042
double the FPS for a video based

198
00:12:47,096 --> 00:12:51,214
project that I was working on. So you see the difference is significant

199
00:12:51,262 --> 00:12:54,418
in there as well. So putting all of

200
00:12:54,424 --> 00:12:57,494
this together, this is how the webplot formula looks today. So if

201
00:12:57,612 --> 00:13:01,142
we take a look at this very simplified view again, what's happening inside

202
00:13:01,196 --> 00:13:04,386
our browser, we have a virtual machine,

203
00:13:04,418 --> 00:13:08,134
but that virtual machine is now capable of executing both

204
00:13:08,172 --> 00:13:12,166
our JavaScript and our Webassembly code, and that's

205
00:13:12,278 --> 00:13:15,510
how it is today. As I said, it's official.

206
00:13:15,590 --> 00:13:18,746
It's part of most of the modern browser. In fact, I think all

207
00:13:18,768 --> 00:13:22,142
of the modern browser now support this. So feel

208
00:13:22,196 --> 00:13:26,270
free to experiment web assembly today.

209
00:13:26,420 --> 00:13:29,822
So let me show you a couple of demos as well, and I'm hoping that

210
00:13:29,956 --> 00:13:34,206
they will be successful. So I'm going to show you two projects.

211
00:13:34,318 --> 00:13:37,986
One is a c plus plus port to the

212
00:13:38,008 --> 00:13:42,100
web using webassembly, and the other one is a Go project.

213
00:13:49,050 --> 00:13:53,366
So let's start with the C project here. So let

214
00:13:53,388 --> 00:13:56,520
me just open a browser as well.

215
00:13:57,050 --> 00:14:00,326
Okay, so Similecra

216
00:14:00,438 --> 00:14:03,334
is, as you can see, a c plus plus file,

217
00:14:03,382 --> 00:14:06,966
and simulacra is short for structural similarity, unveiling,

218
00:14:06,998 --> 00:14:10,670
local and compression related artifacts. Very, very simply put,

219
00:14:10,820 --> 00:14:13,934
this C Plus plus project is able to

220
00:14:13,972 --> 00:14:18,030
tell us if the same two images

221
00:14:18,770 --> 00:14:22,586
look and feel the same based on their quality. And at

222
00:14:22,628 --> 00:14:26,562
cloudinary we use this particular technology to

223
00:14:26,616 --> 00:14:30,722
determine if the quality reduction of

224
00:14:30,776 --> 00:14:34,398
an image is actually going to be visible to the human eye.

225
00:14:34,494 --> 00:14:38,246
Okay? And this is a c plus plus project. It has

226
00:14:38,268 --> 00:14:42,440
always been a c plus plus project. It basically asks you to

227
00:14:42,970 --> 00:14:46,534
compile this. You will get the simulacra binary and then parameter one

228
00:14:46,572 --> 00:14:49,682
in your CLI should be the first image, and then parameter

229
00:14:49,746 --> 00:14:53,786
two is going to be the second image that you want to compare. And then

230
00:14:53,968 --> 00:14:56,700
similar query is going to return you a number.

231
00:14:57,310 --> 00:15:01,262
And as you can see here, if the number is one or close to one,

232
00:15:01,316 --> 00:15:05,466
those are very different images. So you will have some very visible

233
00:15:05,578 --> 00:15:08,750
quality differences inside the image.

234
00:15:09,170 --> 00:15:12,846
Generally speaking, anything below

235
00:15:12,948 --> 00:15:16,202
0.1 should not be visible to the human

236
00:15:16,276 --> 00:15:19,806
eye. Now I thought this is a great project, why don't

237
00:15:19,838 --> 00:15:23,074
we have a web version of this? And so what I had

238
00:15:23,112 --> 00:15:27,090
to do was of course port this web assembly. I used

239
00:15:27,160 --> 00:15:30,646
mscripton to do this. I actually wrote a blog post about this.

240
00:15:30,668 --> 00:15:34,694
So if you're curious, you can take a look at how this whole project was

241
00:15:34,732 --> 00:15:37,510
ported from C web assembly.

242
00:15:38,030 --> 00:15:41,946
But what I have here, once I have the

243
00:15:41,968 --> 00:15:45,370
webassembly module and the glue code,

244
00:15:45,520 --> 00:15:49,094
I could very easily just load web assembly

245
00:15:49,142 --> 00:15:52,794
module. And what I'm doing is grabbing two

246
00:15:52,832 --> 00:15:56,602
images and notice that I have this right file method

247
00:15:56,666 --> 00:15:59,902
here. So when you web assembly, you get access to

248
00:15:59,956 --> 00:16:03,230
the browser's virtual file system where you can

249
00:16:03,300 --> 00:16:06,914
write and read files from. So that's another very interesting use

250
00:16:06,952 --> 00:16:10,706
case. So I'm writing the two images and then I do the

251
00:16:10,728 --> 00:16:14,610
similar calculation for both, and then I just return that and I built

252
00:16:14,680 --> 00:16:18,246
a very simple UI for this particular tool. So what

253
00:16:18,268 --> 00:16:22,338
we can do, we can fire up an HTTP server

254
00:16:22,434 --> 00:16:26,214
and then I'm going to go two my browser and

255
00:16:26,252 --> 00:16:29,914
just open up port eight nine, and then we're going to take

256
00:16:29,952 --> 00:16:32,940
a look at how this project looks like.

257
00:16:34,990 --> 00:16:38,934
Actually before I do that, let me just copy this particular image

258
00:16:39,062 --> 00:16:42,462
and you will notice that this is an image of a

259
00:16:42,516 --> 00:16:45,790
car. So this is the unmodified,

260
00:16:46,370 --> 00:16:49,886
100% quality, highest quality version of

261
00:16:49,908 --> 00:16:53,674
the image. And what I'm going to compare it with is Q underscore

262
00:16:53,722 --> 00:16:57,666
one, which is of course going to reduce the quality of the image to

263
00:16:57,768 --> 00:17:01,026
quality one. So it's going to be very, very pixelated. So you see, this is

264
00:17:01,048 --> 00:17:04,674
a terrible, terrible looking image. Now at

265
00:17:04,712 --> 00:17:08,014
cloudinary we have a feature called Qauto,

266
00:17:08,062 --> 00:17:11,686
which is automatically going to reduce the quality of the images in

267
00:17:11,708 --> 00:17:14,886
a way that is not visible to the human eye. So if

268
00:17:14,908 --> 00:17:18,994
I put Qauto, then you will get again

269
00:17:19,052 --> 00:17:21,526
a high quality version of this image.

270
00:17:21,718 --> 00:17:25,574
But the difference is that if I take a look at the network panel

271
00:17:25,622 --> 00:17:30,060
here real quick, and if I try to also

272
00:17:30,670 --> 00:17:32,960
zoom in a little bit here for you,

273
00:17:34,530 --> 00:17:37,914
you will notice that this particular image

274
00:17:37,962 --> 00:17:41,466
is 732 kb in size. But if I remove

275
00:17:41,498 --> 00:17:45,554
to q autos, if I take a look at the original, then that's 1.4

276
00:17:45,592 --> 00:17:49,666
megabytes. Just by adding q auto, we shaved 50% off from

277
00:17:49,688 --> 00:17:52,834
that image. But the question is, can we

278
00:17:52,872 --> 00:17:56,686
see the difference? So if I put the same two URLs

279
00:17:56,718 --> 00:18:00,198
in here, then we're going to be getting a zero,

280
00:18:00,284 --> 00:18:03,862
indicating that these images are exactly the same. If I put Q

281
00:18:03,916 --> 00:18:07,302
underscore one, then I should get a very high

282
00:18:07,356 --> 00:18:11,194
number, a number close two, one. So 0.4. And as I said,

283
00:18:11,232 --> 00:18:15,018
anything above 0.1 means that humans will have

284
00:18:15,184 --> 00:18:18,694
perceivable quality differences between the images.

285
00:18:18,822 --> 00:18:22,510
And let's finally verify Q underscore auto.

286
00:18:22,850 --> 00:18:26,350
And that is 0.3.

287
00:18:26,500 --> 00:18:30,282
So in fact, this tool tells us that these two images

288
00:18:30,426 --> 00:18:33,726
do not have any sort of artifacts that the

289
00:18:33,748 --> 00:18:36,900
humans, human beings would in fact see.

290
00:18:37,990 --> 00:18:41,220
So this is the C Plus plus project running

291
00:18:41,830 --> 00:18:45,380
in my browser, because I was able to pull this

292
00:18:46,870 --> 00:18:50,086
from C Plus plus web assembly and then add it to

293
00:18:50,108 --> 00:18:53,510
the web. So that's one of the use cases. Now, the other project

294
00:18:53,580 --> 00:18:57,654
that I wanted to show you is a project

295
00:18:57,772 --> 00:19:01,382
that was written in go. So in the same way how cloudinary

296
00:19:01,446 --> 00:19:04,470
has Qauto to automatically reduce the quality of the image,

297
00:19:04,550 --> 00:19:08,982
we also have f auto, which is short for automatic format.

298
00:19:09,046 --> 00:19:12,606
So based on the browser that you're using, we can

299
00:19:12,708 --> 00:19:16,654
select the appropriate image format or the best image format for

300
00:19:16,692 --> 00:19:20,266
that browser based on the analysis of the image

301
00:19:20,298 --> 00:19:24,430
as well. And of course you can take a look at this inside

302
00:19:24,580 --> 00:19:28,482
your browser. So let's go back to this image, and if I now open

303
00:19:28,536 --> 00:19:32,242
up the network panel, and if I just do can

304
00:19:32,296 --> 00:19:35,970
f auto in here, so I do f underscore auto,

305
00:19:36,390 --> 00:19:39,270
then let's take a look at the headers.

306
00:19:39,770 --> 00:19:43,094
So this is a JPEG, but if I shrink this down to,

307
00:19:43,132 --> 00:19:46,646
say, width 500, so this

308
00:19:46,668 --> 00:19:50,234
is a 500 pixel version of this image, then because

309
00:19:50,272 --> 00:19:54,486
I'm using a chrome browser, I am now getting a WebP image.

310
00:19:54,598 --> 00:19:58,246
And I thought, this is great, but I would like to further analyze

311
00:19:58,358 --> 00:20:01,440
the image itself. So how could I do that?

312
00:20:01,970 --> 00:20:05,198
And well, the answer

313
00:20:05,284 --> 00:20:08,942
was that I created this go project where

314
00:20:09,076 --> 00:20:12,414
I used some libraries like

315
00:20:12,452 --> 00:20:15,930
Lib WebP and Lib PNG and some others to further

316
00:20:16,010 --> 00:20:19,302
analyze the images that are returned from cloudinary.

317
00:20:19,306 --> 00:20:22,642
So as opposed to just saying that hey, this is a web P,

318
00:20:22,776 --> 00:20:26,034
I can now tell whether it's a webp with an alpha channel. What is the

319
00:20:26,072 --> 00:20:29,666
container for that web image? Is it a vp eight? A vp

320
00:20:29,698 --> 00:20:33,574
eight l, so on and so forth. If it's a PNG, I was able

321
00:20:33,612 --> 00:20:35,670
to analyze the bit depth,

322
00:20:37,050 --> 00:20:40,742
what kind of interlacing it has, and so on and so forth.

323
00:20:40,886 --> 00:20:45,446
And I mentioned that go works slightly differently. So notice this WeSm

324
00:20:45,478 --> 00:20:49,434
underscore axe js file, which is essentially my glue code.

325
00:20:49,552 --> 00:20:53,518
And then I have main go where if you take a

326
00:20:53,524 --> 00:20:55,600
look at a line like this one,

327
00:20:56,210 --> 00:20:59,422
even though this is a go file, this file looks

328
00:20:59,556 --> 00:21:03,386
really familiar, right? Even if you've never seen go, but you know JavaScript.

329
00:21:03,418 --> 00:21:06,706
So this is essentially saying document getelement by id

330
00:21:06,808 --> 00:21:10,338
response text and then set the inner HTML to

331
00:21:10,424 --> 00:21:14,222
something so I can essentially manipulate my Dom

332
00:21:14,366 --> 00:21:17,910
from within my go context, which is very, very useful.

333
00:21:19,050 --> 00:21:23,158
And then executing this very simple command, I was able to

334
00:21:23,244 --> 00:21:26,342
build the webassembly version of this go project.

335
00:21:26,476 --> 00:21:29,962
So let's take a look at how this looks like by

336
00:21:30,016 --> 00:21:36,234
opening up another server. So let's port 9999.

337
00:21:36,272 --> 00:21:40,922
And

338
00:21:40,976 --> 00:21:44,622
this is my project. So this is that f auto flag already

339
00:21:44,676 --> 00:21:48,426
in here. So let's add width 500 and let's

340
00:21:48,618 --> 00:21:51,886
use the built in user agent, which is in fact going

341
00:21:51,908 --> 00:21:55,250
two be a chrome. So let's hit check. And this is

342
00:21:55,320 --> 00:21:59,118
a lossy webp with a vp eight container

343
00:21:59,214 --> 00:22:03,074
that has no alpha channel. But what if I go to say

344
00:22:03,112 --> 00:22:06,150
gem Darth Vader Png?

345
00:22:07,050 --> 00:22:10,440
Well, let's see, what do we get? Okay, so this is now

346
00:22:11,050 --> 00:22:14,626
a VpaX container that is lossy,

347
00:22:14,658 --> 00:22:18,466
and it does have an offer channel. Okay,

348
00:22:18,588 --> 00:22:22,614
this is perfect. So let's see what happens if I just refresh

349
00:22:22,742 --> 00:22:26,378
if I use f auto with 500, with a

350
00:22:26,384 --> 00:22:28,982
browser that does not support webp.

351
00:22:29,126 --> 00:22:32,750
Now here's a sort of additional trick for you.

352
00:22:32,820 --> 00:22:36,270
You can actually change the user agent by

353
00:22:36,340 --> 00:22:40,186
using the network

354
00:22:40,298 --> 00:22:44,558
conditions panel using the developer tools

355
00:22:44,734 --> 00:22:48,402
in Chrome. And I'm going to just say that I am now on

356
00:22:48,456 --> 00:22:53,250
a Safari Mac. Safari Mac does not support

357
00:22:53,320 --> 00:22:56,510
webP. So let's see what happens if I call the same image.

358
00:22:56,590 --> 00:22:59,938
Well, it just returns a JPEG image,

359
00:23:00,034 --> 00:23:03,234
or if I remove the width 500, is this still going to be a JPEG?

360
00:23:03,282 --> 00:23:06,838
No, now it is a JPEG 2000, which is in fact

361
00:23:06,924 --> 00:23:10,470
an image format supported by the Safari browser.

362
00:23:10,550 --> 00:23:13,882
So this particular tool allows me to dig one level

363
00:23:13,936 --> 00:23:17,514
deeper and analyze these images further. And I could have

364
00:23:17,552 --> 00:23:21,020
taken this to a whole different level

365
00:23:22,050 --> 00:23:25,486
by just manipulating the go code. So I'm going

366
00:23:25,508 --> 00:23:28,686
to leave you with some resources. Take a look

367
00:23:28,708 --> 00:23:32,010
at the various project that are out know someone ported doom

368
00:23:32,090 --> 00:23:35,714
via Webassembly to browser squeeze app is

369
00:23:35,752 --> 00:23:39,314
one of the flagship applications that is done

370
00:23:39,352 --> 00:23:42,594
by Google. There are lots of case studies around it, they talk about it quite

371
00:23:42,632 --> 00:23:45,818
often and behind the scenes that also uses

372
00:23:45,934 --> 00:23:49,366
webassembly modules. So take a look at these resources. They're very,

373
00:23:49,388 --> 00:23:52,866
very useful, and I hope you found this presentation

374
00:23:52,978 --> 00:23:56,694
to be useful. And thank you very much

375
00:23:56,732 --> 00:24:01,030
for attendees this session, and I hope you will have the opportunity to try

376
00:24:01,100 --> 00:24:03,800
out webassembly in the not so distant future.

377
00:24:04,490 --> 00:24:07,974
My contact details are on the bottom of the slide, so please feel

378
00:24:08,012 --> 00:24:10,766
free to contact me at any point in time if you have any questions or

379
00:24:10,788 --> 00:24:14,362
would like to know a little bit more about webassembly.

380
00:24:14,506 --> 00:24:14,860
Thank you.

