1
00:00:00,410 --> 00:00:06,126
Jamaica make up real

2
00:00:06,148 --> 00:00:09,902
time feedback into the behavior of your distributed systems and

3
00:00:09,956 --> 00:00:14,046
observing changes exceptions. Errors in real time

4
00:00:14,148 --> 00:00:18,778
allows you to not only experiment with conference, but respond instantly

5
00:00:18,874 --> 00:00:20,480
to get things working again.

6
00:00:24,610 --> 00:01:05,226
Close SAS

7
00:01:05,258 --> 00:01:09,294
Fox I'm so delighted to be part of the Conf 42

8
00:01:09,332 --> 00:01:13,678
ks engineering 2022 as speaker with such great speakers.

9
00:01:13,854 --> 00:01:17,714
Today I will be presenting to you as you all chaos, chaos chaos

10
00:01:17,762 --> 00:01:20,950
engineering alongside Litmus and Jenkins.

11
00:01:21,690 --> 00:01:25,762
It's like Rex what I have done with my clients talent

12
00:01:25,826 --> 00:01:29,266
to improve the resilience of its app before promoting to production

13
00:01:29,298 --> 00:01:33,174
and making it easier to developers and SRE to execute

14
00:01:33,222 --> 00:01:36,486
chaos. I'll be explaining it in a deep dive

15
00:01:36,518 --> 00:01:40,542
in a bit. I'm sure that also that you have already seen many great

16
00:01:40,596 --> 00:01:44,254
talks about today about the why and

17
00:01:44,292 --> 00:01:47,406
when to do chaos engineering, but I will be focusing on the

18
00:01:47,428 --> 00:01:52,830
how today so it will be also

19
00:01:52,980 --> 00:01:56,466
shown by a demo. Before that, I would like

20
00:01:56,488 --> 00:02:00,014
to present myself. I'm Akram Riahi. I'm an SRE

21
00:02:00,062 --> 00:02:03,682
and the Chaos engineering at scale. I'm also an author of

22
00:02:03,736 --> 00:02:07,822
several blog posts posts related to the Chaos engineering

23
00:02:07,886 --> 00:02:11,586
and litmos and also I'm an organizer

24
00:02:11,618 --> 00:02:15,554
of the Chaos Week which is like a week long chaos

25
00:02:15,602 --> 00:02:20,182
engineering fest with great speakers such

26
00:02:20,236 --> 00:02:22,470
as Wambukara from Litmus,

27
00:02:22,890 --> 00:02:26,154
Yuraninu, Jay Z, Ni, also for

28
00:02:26,192 --> 00:02:29,846
Gremlin. There are other many chaos engineering

29
00:02:29,878 --> 00:02:33,950
folks also who has been included in the Chaos week. This event

30
00:02:34,020 --> 00:02:37,614
aims at Cloud native community in France and I'm also

31
00:02:37,652 --> 00:02:41,310
part of the Paris Chaos engineering meetup. I've also

32
00:02:41,460 --> 00:02:45,410
participated in the Chaos Carnival recently

33
00:02:49,030 --> 00:02:52,258
as a speaker who we are

34
00:02:52,424 --> 00:02:55,602
so we are with scale that has been created

35
00:02:55,666 --> 00:02:59,320
in 2015, it's already more than

36
00:03:02,250 --> 00:03:05,686
50 experts whose mission is to help you

37
00:03:05,708 --> 00:03:09,386
become cloud native. We help you also think, build and

38
00:03:09,408 --> 00:03:12,874
master your cloud native architecture, continuously adapting to your

39
00:03:12,912 --> 00:03:16,074
maturity. What set us apart is our high level

40
00:03:16,112 --> 00:03:20,006
of expertise and personalized support on cloud native technologies

41
00:03:20,118 --> 00:03:23,710
with a convection that know how only has value if it is

42
00:03:23,780 --> 00:03:27,742
already shared. That's why we are trying to write many

43
00:03:27,796 --> 00:03:31,470
several blogs and do some meetups etc.

44
00:03:31,970 --> 00:03:36,494
We are also a member of the CNCF and partnership

45
00:03:36,542 --> 00:03:40,050
with Hashicorp, but also with AWS and GCP.

46
00:03:41,510 --> 00:03:46,014
In a few minutes we will have presentation

47
00:03:46,062 --> 00:03:49,526
of our menu for today we will have an introduction. Then we are

48
00:03:49,548 --> 00:03:52,854
going to see together how we use case engineering easier with litmus for

49
00:03:52,892 --> 00:03:56,834
developers and SRE to improve their resilience. We will also discover

50
00:03:56,882 --> 00:04:00,614
the harmony between Litmus two, Jenkins and Slack. We will deep

51
00:04:00,662 --> 00:04:04,300
dive into that via an amazing demo at the end

52
00:04:04,910 --> 00:04:08,314
with my clients it's always hard to look for solution to

53
00:04:08,352 --> 00:04:11,450
test and improve our application resilience before

54
00:04:11,520 --> 00:04:14,606
promote into production. And also it's hard to

55
00:04:14,708 --> 00:04:18,462
ensure that it will be hydro resilient. And we

56
00:04:18,516 --> 00:04:21,694
are not going to get some incident in

57
00:04:21,732 --> 00:04:25,986
the morning and the very morning. And we

58
00:04:26,008 --> 00:04:29,634
are not going to get surprised. Today we are faced by two

59
00:04:29,672 --> 00:04:33,202
major choices. Either we can create scripts and some

60
00:04:33,256 --> 00:04:36,758
tests that can take a lot of time and investments and also a

61
00:04:36,764 --> 00:04:40,354
lot of consultants also. Or we can go to the chaos engineering

62
00:04:40,402 --> 00:04:44,790
discipline with scientific approach based on hypothesis

63
00:04:45,850 --> 00:04:49,240
and experimentation. But here the question

64
00:04:50,010 --> 00:04:53,114
is it difficult? Do we have enough knowledge to do

65
00:04:53,152 --> 00:04:57,066
chaos? How can we deal with it in a daily basis knowing that

66
00:04:57,088 --> 00:05:00,346
we are production a lot of code that has to be tested in term of

67
00:05:00,368 --> 00:05:03,594
resilience. And also we are going

68
00:05:03,632 --> 00:05:07,246
to face this question, can we make it easier for developers to do that if

69
00:05:07,268 --> 00:05:10,782
we say okay, for example, if you are going to say okay,

70
00:05:10,836 --> 00:05:14,206
we can do chaos, but is it going

71
00:05:14,228 --> 00:05:17,490
to be easier for developers and SRE to do that? Well,

72
00:05:17,640 --> 00:05:20,978
I'm very certain that this answer is yes,

73
00:05:21,144 --> 00:05:25,134
but how case engineering is easier. Now the delivery

74
00:05:25,182 --> 00:05:29,242
process has more steps from dev all the way to the saicd.

75
00:05:29,326 --> 00:05:33,314
Each time the developer push a code, it will be tested by a classical approach

76
00:05:33,442 --> 00:05:37,062
called QA tests. With all type of tests that looks for

77
00:05:37,116 --> 00:05:42,042
things we all know. It means that we are going to test things

78
00:05:42,096 --> 00:05:46,298
that we already know built. We don't going to see

79
00:05:46,384 --> 00:05:50,890
what we can't expect and the unknowns

80
00:05:51,310 --> 00:05:55,690
in other words. But we have also to the right to get surprised sometime

81
00:05:55,770 --> 00:05:59,214
by a problem we don't know and we don't expect. Also in order

82
00:05:59,252 --> 00:06:02,734
to improve the app resilience. For that reason we have also

83
00:06:02,772 --> 00:06:06,382
to enable developers in order to inject chaos in their DevOps pipeline

84
00:06:06,446 --> 00:06:09,634
as often as they want. So today our talk will be

85
00:06:09,672 --> 00:06:13,342
around the disenablement and how they can easily inject chaos

86
00:06:13,406 --> 00:06:15,750
via sample push or a pull request.

87
00:06:16,410 --> 00:06:19,746
To do that we are going to present the environment.

88
00:06:19,858 --> 00:06:23,014
So our environment will be based on AWS and

89
00:06:23,052 --> 00:06:26,886
kubernetes for the infrastructure and AWS for

90
00:06:26,908 --> 00:06:30,010
as a cloud provider and kubernetes as a container

91
00:06:30,350 --> 00:06:33,610
orchestrator. We'll have also Jenkins

92
00:06:34,350 --> 00:06:37,926
for the CACD part. We'll have terraform for the Amphra

93
00:06:37,958 --> 00:06:42,006
configuration. And we also have slack

94
00:06:42,038 --> 00:06:45,178
for the nfcation and communication alerting, notification,

95
00:06:45,274 --> 00:06:48,794
alerting and communication. As we all know that communication

96
00:06:48,842 --> 00:06:53,438
in chaos engineering is very important in

97
00:06:53,444 --> 00:06:57,310
order to make people knowing that

98
00:06:57,460 --> 00:07:00,834
we are going to inject chaos and so they don't get

99
00:07:00,872 --> 00:07:04,274
surprised. And also that helps us to collaborate together

100
00:07:04,392 --> 00:07:07,880
in order to improve the app resilience and to improve the

101
00:07:10,010 --> 00:07:13,414
system results. In other words, we have also GitHub for

102
00:07:13,452 --> 00:07:17,126
our code SEM or code management for

103
00:07:17,148 --> 00:07:20,502
the chaos injection we will use our famous framework

104
00:07:20,566 --> 00:07:24,534
which is Litmos chaos. So what is Litmos chaos?

105
00:07:24,582 --> 00:07:28,726
Litmos Chaos is like an open source framework used for chaos engineering

106
00:07:28,838 --> 00:07:32,446
and which helps kubernetes sres and developers to

107
00:07:32,468 --> 00:07:35,280
practice it in a Kubernetes native way.

108
00:07:35,890 --> 00:07:39,870
Litmos was in CNCF sandbox and now it's incubation

109
00:07:40,530 --> 00:07:44,418
because of its great community and a big community behind it

110
00:07:44,504 --> 00:07:48,900
that supports Litmus and make it and

111
00:07:49,510 --> 00:07:51,650
trying to improve it continuously,

112
00:07:52,310 --> 00:07:55,902
continuously. And you can find it in GitHub

113
00:07:55,966 --> 00:08:00,086
repo Litmus chaos Litmus. Now it

114
00:08:00,108 --> 00:08:11,320
is in version 2626-0260

115
00:08:12,830 --> 00:08:17,002
well, the importance of Litmos is like behind

116
00:08:17,136 --> 00:08:20,886
the Chaos experiment that provides. So Litmos

117
00:08:20,918 --> 00:08:24,294
provides a lot of chaos experiments in kubernetes and AWS,

118
00:08:24,342 --> 00:08:28,074
et cetera. It will help us inject various scenarios

119
00:08:28,122 --> 00:08:31,726
such as cpu hugging, memory hugging that target the resources and

120
00:08:31,748 --> 00:08:35,650
we can also have some experiments that target

121
00:08:36,070 --> 00:08:39,342
for example network such as network latency

122
00:08:39,406 --> 00:08:43,074
for example. And this is in the pod, for example the

123
00:08:43,112 --> 00:08:47,474
radius. We can enlarge the radius in order to attack, for example nodes.

124
00:08:47,602 --> 00:08:51,106
These experiments are available in like Chaos hub

125
00:08:51,138 --> 00:08:53,938
that group all these chaos experiment.

126
00:08:54,114 --> 00:08:58,022
This chaos experiment can be organized and executed on another

127
00:08:58,076 --> 00:09:01,882
word orchestrated within a case workflow. So here's a question,

128
00:09:01,936 --> 00:09:06,106
what is the chaos workflow? A chaos workflow is like a

129
00:09:06,128 --> 00:09:09,766
set of different operation, or we can call it chaos experiment

130
00:09:09,878 --> 00:09:13,418
coupled together to achieve like a desired chaos impact on

131
00:09:13,424 --> 00:09:16,874
a Kubernetes cluster. Well, the importance

132
00:09:16,922 --> 00:09:20,046
of this chaos workflow is like it

133
00:09:20,068 --> 00:09:23,934
is very useful in automating a series of preconditioning

134
00:09:23,982 --> 00:09:27,746
steps or action which is necessary to be

135
00:09:27,768 --> 00:09:31,806
becoming before triggering the chaos injection. And a chaos workflow

136
00:09:31,838 --> 00:09:35,346
can also be used to perform different operation

137
00:09:35,378 --> 00:09:38,614
parallel to achieve a desired chaos injection scenarios, for example.

138
00:09:38,732 --> 00:09:42,534
So I see that my application is very

139
00:09:42,732 --> 00:09:46,950
affected by the cpu and memory

140
00:09:47,310 --> 00:09:50,442
memory. So it means that if I, for example,

141
00:09:50,496 --> 00:09:54,266
I want to test the

142
00:09:54,288 --> 00:09:57,594
impact of the update or the

143
00:09:57,712 --> 00:10:00,878
injection of chaos injection on

144
00:10:00,964 --> 00:10:04,366
these two resources, these two resources so I

145
00:10:04,388 --> 00:10:07,614
can go for a chaos workflow for example and

146
00:10:07,812 --> 00:10:11,882
create for example a workflow with two experiments,

147
00:10:11,946 --> 00:10:17,010
cpu hugging and memory hugging and make it running parallel

148
00:10:18,150 --> 00:10:22,018
for example. I have noticed that lately I have gotten many

149
00:10:22,104 --> 00:10:25,894
network latency on this app, so I would like to see that

150
00:10:26,012 --> 00:10:29,414
and to make it for example randomly on

151
00:10:29,452 --> 00:10:33,394
the different also dependencies so I can create workflow

152
00:10:33,442 --> 00:10:37,934
that chaos. For example, two experimentation

153
00:10:38,002 --> 00:10:41,082
running in parallel CPU Hogan memory Haagen and then going

154
00:10:41,136 --> 00:10:44,534
in serial with network latency.

155
00:10:44,662 --> 00:10:48,662
This chaos workflow can be for example created through Chaos

156
00:10:48,726 --> 00:10:52,058
center, which is like a portal that helps us

157
00:10:52,224 --> 00:10:55,950
see our workflow, observe it and monitor it, and even

158
00:10:56,020 --> 00:10:59,086
create our workflow. From the case center. We can see it, we will see it

159
00:10:59,108 --> 00:11:02,334
in the demo lately. How is that

160
00:11:02,452 --> 00:11:05,902
so how the case engineering is easier with litmus and Jenkins.

161
00:11:05,966 --> 00:11:11,394
So to do that we are going to begin to

162
00:11:11,432 --> 00:11:15,554
present the infrastructure which is based on AWS eks. It has

163
00:11:15,592 --> 00:11:19,466
been cooked via terraform for the sake of demo as KS

164
00:11:19,518 --> 00:11:22,786
engineering requirements. We all know that we have deployed

165
00:11:22,818 --> 00:11:25,906
and configured the monitoring stack composed from Grafana

166
00:11:25,938 --> 00:11:29,898
and promote. And also we have configured Slack to get notified with

167
00:11:29,904 --> 00:11:34,294
the necessary actions and also to communicate before executing chaos.

168
00:11:34,342 --> 00:11:38,138
Because it's very important, I'm trying always

169
00:11:38,224 --> 00:11:41,710
to insist that the communication is very

170
00:11:41,780 --> 00:11:46,778
and highly important keys

171
00:11:46,874 --> 00:11:50,846
of the chaos engineering discipline. We have

172
00:11:50,868 --> 00:11:54,494
also configured Jenkins GitHub to be triggered via pull

173
00:11:54,532 --> 00:11:58,002
request. And also we have like a container registry like

174
00:11:58,056 --> 00:12:01,860
get Docker hub or artifactory for example. For example.

175
00:12:02,310 --> 00:12:05,874
So here developer will update its code or the app

176
00:12:05,912 --> 00:12:09,766
code and will push or create a quest that will trigger the

177
00:12:09,788 --> 00:12:13,426
pipeline. And this pipeline, it will notify slack

178
00:12:13,458 --> 00:12:16,626
that the pipeline has been started and it's going to prepare

179
00:12:16,658 --> 00:12:21,146
the amp and then build the application and push it to

180
00:12:21,168 --> 00:12:24,854
dev. So here it will push to the Docker hub container registry.

181
00:12:24,982 --> 00:12:27,910
Then we will start the QA tests.

182
00:12:28,070 --> 00:12:31,498
So I'm not going to present the

183
00:12:31,504 --> 00:12:35,054
QA test because it's not very important for the sake of our demo and

184
00:12:35,092 --> 00:12:38,554
our presentation. And then it will go to update

185
00:12:38,602 --> 00:12:42,320
the deployed app image, so it will be updated by the new

186
00:12:42,770 --> 00:12:46,194
application or the new image and then

187
00:12:46,232 --> 00:12:49,662
it's going to inject chaos. So injecting chaos,

188
00:12:49,726 --> 00:12:53,794
it will be done via applying the workflow that we have already talked about.

189
00:12:53,912 --> 00:12:57,838
It's like CRD Kubernetes CRD and will be

190
00:12:57,864 --> 00:13:00,658
applied. So here we will face two results,

191
00:13:00,834 --> 00:13:04,194
pass or fail. If it fail, it means that a chaos experiment

192
00:13:04,242 --> 00:13:08,274
fail. Our app is not resilient, so it will get notified

193
00:13:08,322 --> 00:13:11,802
by slack or if it passed, so our app resilient so

194
00:13:11,856 --> 00:13:15,606
it will be promoted to production, tagged and promoted to production,

195
00:13:15,638 --> 00:13:19,066
pushed to the container registry with a prod tag. Then we will

196
00:13:19,088 --> 00:13:23,274
clean up the resources that has been created with the chaos workflow,

197
00:13:23,322 --> 00:13:26,746
for example chaos workflow and also will clean up the chaos results,

198
00:13:26,778 --> 00:13:30,206
which is like CRD for litmus. And then it

199
00:13:30,228 --> 00:13:33,710
will interface slack with the Qatas and the chaos, such as

200
00:13:33,780 --> 00:13:37,874
the chaos report. Now we are going to

201
00:13:37,912 --> 00:13:41,922
move to the amazing part, which is the demo. So get ready

202
00:13:41,976 --> 00:13:45,026
for it. So to

203
00:13:45,048 --> 00:13:48,374
begin with, I will present the code which is like a simple,

204
00:13:48,492 --> 00:13:52,120
very simple code. Let's see together

205
00:13:56,870 --> 00:14:00,580
Netmas chaos workflow up.

206
00:14:02,870 --> 00:14:06,534
It's a very simple code. Our app, it's like it's running.

207
00:14:06,652 --> 00:14:10,870
It's like doing hello Chaos folks.

208
00:14:12,330 --> 00:14:13,400
So here,

209
00:14:15,450 --> 00:14:18,822
hello folks. For example here hello Fox. I will be updated

210
00:14:18,886 --> 00:14:22,230
it. I'll be updated

211
00:14:22,310 --> 00:14:26,494
it. And then we have our app

212
00:14:26,612 --> 00:14:30,862
which is in here. Sorry, yes, it's here.

213
00:14:30,996 --> 00:14:34,814
So here we have our app, which is

214
00:14:34,932 --> 00:14:38,386
here is Dockerfire of the apps like Apache app, PhP app,

215
00:14:38,488 --> 00:14:41,970
and also we have the Jenkins file for pipeline.

216
00:14:42,630 --> 00:14:45,790
We have the prepare stage.

217
00:14:45,950 --> 00:14:49,674
We have configured the build image and pushed the dev decay

218
00:14:49,742 --> 00:14:53,474
test and also the update

219
00:14:53,522 --> 00:14:56,774
of the app, the app deployment. Our app

220
00:14:56,812 --> 00:15:00,870
is like deployed in deployment. And then the case injection

221
00:15:01,290 --> 00:15:05,414
jump via script and work that contains a workflow.

222
00:15:05,462 --> 00:15:09,066
And if everything goes fine, we will promote the

223
00:15:09,088 --> 00:15:12,742
app, the manifest of the deployment

224
00:15:12,806 --> 00:15:16,934
which is here for the app. And we have different scripts.

225
00:15:16,982 --> 00:15:20,650
This is the KS SH and the cleanup sh, the KsH,

226
00:15:21,090 --> 00:15:24,606
it will apply the workflow which is here, for example the

227
00:15:24,628 --> 00:15:28,174
CPU Huggin workflow and the cleanup.

228
00:15:28,222 --> 00:15:31,682
It will clean up the workflow that has been created and also

229
00:15:31,736 --> 00:15:39,554
the chaos result which reflect where

230
00:15:39,592 --> 00:15:43,654
we can get the reports that has been sent to

231
00:15:43,692 --> 00:15:47,202
slack in the workflow. We can find three steps.

232
00:15:47,266 --> 00:15:51,046
Install chaos experiment Sepio Huggin, which is the experimentation that we

233
00:15:51,068 --> 00:15:54,406
are going to running and driver chaos in order to delete the runners

234
00:15:54,438 --> 00:15:57,626
and the agents that has been the runners and the resources that has

235
00:15:57,648 --> 00:16:01,206
been created through this workflow.

236
00:16:01,318 --> 00:16:03,340
In order to target our app,

237
00:16:04,610 --> 00:16:08,094
we have to update the app info, the app

238
00:16:08,132 --> 00:16:11,518
info which is here. So of course in

239
00:16:11,524 --> 00:16:15,550
the chaos engine, in the chaos engine resource

240
00:16:17,090 --> 00:16:20,770
here, for example, we are going to target the app namespace, which is app

241
00:16:20,920 --> 00:16:24,978
with the app level which is app chaos chronicle demo.

242
00:16:25,064 --> 00:16:28,498
And the app kind is like a deployment. And for the

243
00:16:28,584 --> 00:16:31,990
CPU Huggin, we are using to do that for

244
00:16:32,060 --> 00:16:35,266
60 seconds chaos duration. And we're

245
00:16:35,298 --> 00:16:38,454
going to target one cpu core. And this will

246
00:16:38,572 --> 00:16:42,134
trigger the chaos workflow. And this

247
00:16:42,172 --> 00:16:45,766
is of course the revert part. If we don't need to revert, we can delete

248
00:16:45,878 --> 00:16:50,090
this part. It will keep the different runners

249
00:16:50,430 --> 00:16:54,738
up to clogs. For example, we have also for example, memory hogging.

250
00:16:54,934 --> 00:16:58,634
We have the pod delete experimentation, for example, to delete pods

251
00:16:58,682 --> 00:17:02,240
randomly, generally for deployment, for example.

252
00:17:05,330 --> 00:17:09,282
Okay, so for the workflow here, we have seen that

253
00:17:09,336 --> 00:17:12,882
the workflow is like an AIC code. You can

254
00:17:12,936 --> 00:17:17,022
also get it from the chaos center. So here for example, you have the litmus

255
00:17:17,166 --> 00:17:21,106
chaos center where we can see the different workflows

256
00:17:21,138 --> 00:17:25,062
that has been run, the chaos engine, chaos engine which

257
00:17:25,116 --> 00:17:28,662
connect the cluster, the chaos hub, also that contains many

258
00:17:28,716 --> 00:17:32,302
experiments, Mary experiments in azure, AWS, et cetera.

259
00:17:32,386 --> 00:17:36,218
We have the observability part. So here we are going to use our hours,

260
00:17:36,304 --> 00:17:38,090
which is Grafana,

261
00:17:40,190 --> 00:17:43,674
which is Grafana for example. And also we

262
00:17:43,712 --> 00:17:47,214
have other stuff. So here we

263
00:17:47,252 --> 00:17:50,794
can setting, we can use team management, user management,

264
00:17:50,842 --> 00:17:54,378
and also we can integrate it to GitHub.

265
00:17:54,474 --> 00:17:57,726
So for example, if I create like workflow here,

266
00:17:57,748 --> 00:18:01,214
it will be pushed directly to the GitHub repository. So how

267
00:18:01,252 --> 00:18:06,734
can I, here's the question, how can I get this cpu

268
00:18:06,782 --> 00:18:09,646
Hogan workflow? I can do it, it's very easy.

269
00:18:09,768 --> 00:18:13,400
So here from the cave center I will create a new one.

270
00:18:13,770 --> 00:18:17,400
For example I will call conf 42.

271
00:18:18,650 --> 00:18:22,310
Next I will add for example like a pod

272
00:18:22,910 --> 00:18:26,170
up pod cpu huggin.

273
00:18:26,510 --> 00:18:29,946
Thank you. So here I'm going to like this,

274
00:18:30,048 --> 00:18:34,406
I'm using to target the app namespace while the count is deployment

275
00:18:34,518 --> 00:18:37,146
and the app label which is chaos carnival.

276
00:18:37,258 --> 00:18:41,258
So I can also define

277
00:18:41,274 --> 00:18:45,102
the steady state like a probe that define, if I would like to

278
00:18:45,236 --> 00:18:48,946
define the steady state of the app. It's very important. So for the sake of

279
00:18:48,968 --> 00:18:52,322
demo, we are not going to use it. So we can

280
00:18:52,376 --> 00:18:55,410
use HTTP, CMD, prom, et cetera.

281
00:18:56,470 --> 00:18:59,958
And also for the tune experiment we can do. For example,

282
00:19:00,044 --> 00:19:03,666
I'm going to go for 62nd chaos duration

283
00:19:03,698 --> 00:19:07,622
and one cpu core click finish for me

284
00:19:07,756 --> 00:19:11,526
here for the resiliency score, reliability score. It's like for

285
00:19:11,548 --> 00:19:14,678
me the cpu Hogan is very important. So I will give it ten if it's

286
00:19:14,694 --> 00:19:18,540
not important, for example, I can give it six, or even I can give it

287
00:19:19,950 --> 00:19:23,162
from zero to three. For example, I will

288
00:19:23,296 --> 00:19:26,906
give it ten and I will scale it now. If I can scale

289
00:19:26,938 --> 00:19:30,366
it now, now I will get view yaml, I can get

290
00:19:30,388 --> 00:19:33,998
this yaml and copy paste it in the vs code and push it

291
00:19:34,004 --> 00:19:35,550
to our GitHub repo.

292
00:19:37,510 --> 00:19:41,394
So here for example, I have

293
00:19:41,432 --> 00:19:45,534
already, for example create a pull request which called Trigger Chaos

294
00:19:45,582 --> 00:19:49,186
conf. This chaos conf has prepared the app for me,

295
00:19:49,288 --> 00:19:52,866
build image and push it to dev and chaos, done the Qs

296
00:19:52,898 --> 00:19:56,566
testing, then updating the app. So in the beginning we

297
00:19:56,588 --> 00:20:00,310
have received like a notification saying

298
00:20:00,380 --> 00:20:03,526
that the Chaos conf has been, the pipeline

299
00:20:03,558 --> 00:20:06,890
has been started, then it will at the end,

300
00:20:07,040 --> 00:20:10,998
at this phase, after the cleanup,

301
00:20:11,094 --> 00:20:15,438
we will get results like you will get notification saying that the

302
00:20:15,604 --> 00:20:19,326
chaos result, that the pipeline has succeeded and

303
00:20:19,348 --> 00:20:23,802
the chaos result with the experiment name, which is Potsybu Hogan exec

304
00:20:23,946 --> 00:20:27,542
with the verdict pass and the resilience Convert 100,

305
00:20:27,616 --> 00:20:31,470
which is it means that our app is fully resilient

306
00:20:31,550 --> 00:20:35,202
and it's like going

307
00:20:35,256 --> 00:20:38,900
great. Here, for example, I will

308
00:20:39,530 --> 00:20:42,950
update the app. Well,

309
00:20:43,020 --> 00:20:50,440
I will do hello casework from around

310
00:20:50,970 --> 00:20:56,788
the world and

311
00:20:56,874 --> 00:20:59,030
I will push it,

312
00:21:00,760 --> 00:21:04,260
git add, git commit,

313
00:21:08,300 --> 00:21:12,250
git push origin.

314
00:21:17,580 --> 00:21:20,110
So here it will trigger the app,

315
00:21:22,000 --> 00:21:24,990
it will trigger the master. Here, for example,

316
00:21:25,520 --> 00:21:28,796
the master will be triggered, it's pending. And then

317
00:21:28,818 --> 00:21:34,748
we will get like a notification here saying that it is started up,

318
00:21:34,834 --> 00:21:40,796
waiting for it to

319
00:21:40,818 --> 00:21:44,910
get started up,

320
00:21:46,840 --> 00:21:50,580
it's like waiting for it, waiting in the queue.

321
00:21:53,320 --> 00:21:57,264
And here we have the startle. Then it will inject

322
00:21:57,312 --> 00:22:00,410
the chaos and we will go to all the way to

323
00:22:02,140 --> 00:22:05,432
the different steps that has been

324
00:22:05,486 --> 00:22:10,296
shown here, up all

325
00:22:10,318 --> 00:22:13,870
the way that here the Q eight hasn't been updating the app.

326
00:22:14,240 --> 00:22:17,896
Here it will update the app. Here it has injected the chaos

327
00:22:18,008 --> 00:22:20,830
and we will wait for the chaos to finish.

328
00:22:21,680 --> 00:22:25,264
When the chaos will finish, we'll finish. We will see that the

329
00:22:25,302 --> 00:22:28,770
app, it will be

330
00:22:30,340 --> 00:22:33,920
updated and we will see the CPU Hogan

331
00:22:38,310 --> 00:22:42,182
for that. For example, we can see that there are several resources that

332
00:22:42,236 --> 00:22:45,746
are created in the litmus

333
00:22:45,778 --> 00:22:49,334
namespace, for example, which like for

334
00:22:49,372 --> 00:22:52,726
example, they are the runners. They are the runners. For example,

335
00:22:52,828 --> 00:22:56,726
see here, runners that will execute the experiment which

336
00:22:56,748 --> 00:23:00,906
is the pod cpu huggin. Once it's finished, it will create for us the

337
00:23:00,928 --> 00:23:04,554
chaos results. You see

338
00:23:04,592 --> 00:23:08,590
it's case results that will be updated to our chaos

339
00:23:09,570 --> 00:23:13,294
with the verdict and the reliability score. And also we have the

340
00:23:13,332 --> 00:23:16,710
workflow, workflow resources that will be created

341
00:23:16,810 --> 00:23:20,114
which will be in running state that will run our

342
00:23:20,152 --> 00:23:20,930
experiment,

343
00:23:29,130 --> 00:23:33,350
which will run our experiment in the litmus namespace.

344
00:23:39,540 --> 00:23:46,212
Here the chaos is waiting for chaos to finish and

345
00:23:46,266 --> 00:23:50,116
certainly it has finished through the

346
00:23:50,138 --> 00:23:50,820
master.

347
00:23:53,480 --> 00:23:57,140
So if we can take a look to the slack notification,

348
00:23:58,360 --> 00:24:02,200
we will get notified that it has been updated

349
00:24:03,660 --> 00:24:05,160
with the new image.

350
00:24:07,180 --> 00:24:10,692
It's like it takes sometimes to get notified.

351
00:24:10,756 --> 00:24:21,030
It's like a connection issue up.

352
00:24:29,350 --> 00:24:30,100
Well,

353
00:24:32,170 --> 00:24:36,806
we will wait for it to finish and

354
00:24:36,828 --> 00:24:40,470
then we will get such the case

355
00:24:40,540 --> 00:24:43,750
results experiment name CPU Hogan, et cetera.

356
00:24:48,580 --> 00:24:52,480
It might take some time to get notified.

357
00:24:54,660 --> 00:24:59,210
Well, going back to our it

358
00:24:59,580 --> 00:25:02,810
while it finish tech,

359
00:25:09,890 --> 00:25:10,960
let's see,

360
00:25:14,050 --> 00:25:17,774
succeeded. So it's like notification error. So it's like the Internet

361
00:25:17,822 --> 00:25:22,034
connection is lagging so if we are good,

362
00:25:22,232 --> 00:25:26,002
we will see that the promotion. Yes, it's like

363
00:25:26,056 --> 00:25:29,762
the Internet has already finished. So normally it's updated.

364
00:25:29,826 --> 00:25:33,510
So it's right updated. And here normally we'll get

365
00:25:33,580 --> 00:25:37,240
the experiment name with the result and the report.

366
00:25:37,610 --> 00:25:40,310
Going back to our presentation,

367
00:25:41,150 --> 00:25:44,250
I hope that you enjoyed the demo.

368
00:25:44,400 --> 00:25:47,626
So as we have seen that starting chaos injection is

369
00:25:47,648 --> 00:25:51,094
a must in order to improve our app resilience.

370
00:25:51,222 --> 00:25:55,034
And also before chaos

371
00:25:55,082 --> 00:25:58,446
injection we have always communicate what we are going to

372
00:25:58,468 --> 00:26:03,182
do and it's very important for the sake of other

373
00:26:03,236 --> 00:26:08,990
team and the work of improve

374
00:26:10,230 --> 00:26:14,494
in order to keep everyone posted

375
00:26:14,542 --> 00:26:18,174
that there will be like a downtime

376
00:26:18,222 --> 00:26:21,462
or something like that. And also we have also to make

377
00:26:21,596 --> 00:26:25,554
chaos more and more automation, for example, as we have seen Jenkins

378
00:26:25,602 --> 00:26:30,066
or other tools, in order to improve

379
00:26:30,098 --> 00:26:33,590
it continuously. And also we have to keep

380
00:26:33,660 --> 00:26:38,166
enhancing one of the most requirements of the chaos engineering, which is the alerting

381
00:26:38,198 --> 00:26:41,926
systems in order to get notified

382
00:26:42,038 --> 00:26:45,550
when we have errors incident.

383
00:26:47,890 --> 00:26:51,342
And also we have also to keep enhanced in the

384
00:26:51,476 --> 00:26:54,686
monitoring systems. And also all of

385
00:26:54,708 --> 00:27:00,260
that will reveal a lot of failures and

386
00:27:00,870 --> 00:27:06,962
it will expose many

387
00:27:07,016 --> 00:27:10,866
things that we have already forgotten or we didn't

388
00:27:11,058 --> 00:27:14,680
have the chance to take it into account in our

389
00:27:15,370 --> 00:27:18,994
infrastructure or our system. So we don't have to be afraid

390
00:27:19,042 --> 00:27:22,614
of and we have

391
00:27:22,652 --> 00:27:26,006
to keep moving forward. And also I

392
00:27:26,028 --> 00:27:29,878
believe that the key success we need to hack failure before

393
00:27:30,044 --> 00:27:34,240
it's very important to to

394
00:27:34,770 --> 00:27:38,446
learn from our failures. I hope

395
00:27:38,468 --> 00:27:42,346
you enjoyed it and I would like to thank you very much for attending

396
00:27:42,378 --> 00:27:45,360
this session and see you soon.

