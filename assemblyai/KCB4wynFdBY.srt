1
00:00:27,250 --> 00:00:30,274
Hello everyone, I'm Anvil Yanarachi.

2
00:00:30,402 --> 00:00:33,974
Thank you for joining my session on simplify network services for

3
00:00:34,012 --> 00:00:37,794
real world cloud native applications with ballerina. Without further

4
00:00:37,842 --> 00:00:41,058
ado, let's dive in. Ballerina,

5
00:00:41,154 --> 00:00:45,154
at its core is an open source cloud native programming language

6
00:00:45,282 --> 00:00:49,222
designed to make integration a breeze. It is a product

7
00:00:49,356 --> 00:00:53,022
of neutered by the Fox at WSO since

8
00:00:53,076 --> 00:00:56,702
2016 and it officially released in

9
00:00:56,756 --> 00:01:00,270
February 2022. And that's not all.

10
00:01:00,340 --> 00:01:04,542
Barina comes with a vibrant ecosystem offering a plethora of network

11
00:01:04,606 --> 00:01:07,726
protocols, data formats and connectors.

12
00:01:07,918 --> 00:01:11,522
What's exciting is that you can craft your code the way you like

13
00:01:11,576 --> 00:01:15,470
it, whether through text or visually, using a sequence diagram

14
00:01:15,550 --> 00:01:18,500
flowcharts for that added quality,

15
00:01:19,110 --> 00:01:22,674
Marina brings in built in, user friendly and user

16
00:01:22,722 --> 00:01:26,658
efficient concurrency, all backed up with safety features,

17
00:01:26,754 --> 00:01:30,250
ensuring your development journey is smooth and secure.

18
00:01:30,830 --> 00:01:34,518
In modern programming, everything is an endpoint.

19
00:01:34,694 --> 00:01:39,370
May it be a database, a security, handling or

20
00:01:39,440 --> 00:01:43,294
even Internet of Thing Android device, everything can be

21
00:01:43,332 --> 00:01:47,326
an endpoint. Interesting thing is that the application that

22
00:01:47,348 --> 00:01:51,514
we are building or cloud native apps are increasingly depending

23
00:01:51,562 --> 00:01:55,026
on these endpoints. So effectively what we are building is

24
00:01:55,048 --> 00:01:58,834
an application which is talking of the network with massive number of

25
00:01:58,872 --> 00:02:02,194
endpoints. Integration is the discipline of

26
00:02:02,232 --> 00:02:05,114
resilient communication between endpoints.

27
00:02:05,262 --> 00:02:08,406
It isn't easy, you know that there are a lot of

28
00:02:08,428 --> 00:02:12,438
technology and techniques have designed to help build system

29
00:02:12,524 --> 00:02:16,834
like compensations, transaction events, circuit breakers,

30
00:02:16,962 --> 00:02:20,150
discovery, protocol handling and mediation.

31
00:02:20,310 --> 00:02:23,626
These are all hard problems to solve. In the

32
00:02:23,648 --> 00:02:27,402
past we had two ways of solving this left

33
00:02:27,456 --> 00:02:31,318
hand side. We have used and using systems like eases

34
00:02:31,414 --> 00:02:35,530
eais or enterprise service plus or enterprise integrations

35
00:02:35,690 --> 00:02:39,822
business process management to solve this problem. These things

36
00:02:39,876 --> 00:02:42,938
are understand integration. It helps to

37
00:02:42,964 --> 00:02:46,382
do integration simple and they have one big challenge

38
00:02:46,446 --> 00:02:50,050
and that is these not agile. In other hand

39
00:02:50,120 --> 00:02:53,758
you can use general programming like Java Node

40
00:02:53,934 --> 00:02:57,922
and these challenge of this they don't understand the integration,

41
00:02:58,066 --> 00:03:01,314
they are not integration simple. So developer

42
00:03:01,362 --> 00:03:05,414
has to take these responsibility for either solving hard problem or

43
00:03:05,452 --> 00:03:08,554
they have to find a suitable framework to support that.

44
00:03:08,752 --> 00:03:12,582
Camel and spring integration framework are some common framework

45
00:03:12,646 --> 00:03:16,390
people are using. These are complex bolton framework

46
00:03:16,470 --> 00:03:20,122
and don't necessarily be integration simple and still

47
00:03:20,176 --> 00:03:23,774
have high learning curve and complexities. So we

48
00:03:23,812 --> 00:03:27,322
kind of came to a conclusion that we call it integration

49
00:03:27,386 --> 00:03:30,702
gap which is you can either be agile but

50
00:03:30,756 --> 00:03:35,006
not integration simple or integration simple but not agile.

51
00:03:35,198 --> 00:03:39,346
As an integration company WSO two, we have been working for more

52
00:03:39,368 --> 00:03:42,866
than a decade to solve these integration problems and we

53
00:03:42,888 --> 00:03:46,402
have been working on more than 1000 integration projects

54
00:03:46,466 --> 00:03:50,002
and almost every project end up in one side of that integration

55
00:03:50,066 --> 00:03:54,034
gap now let's see how ballerina is minimizing

56
00:03:54,082 --> 00:03:58,402
this integration gap. Ballerina is a cloud native language,

57
00:03:58,546 --> 00:04:02,486
so why it is cloud native language? The language network primitives

58
00:04:02,518 --> 00:04:07,430
simplify writing services and deploying them in cloud native environments.

59
00:04:07,590 --> 00:04:11,386
These primitives make it eases to handle network related tasks,

60
00:04:11,498 --> 00:04:14,670
which is crucial for cloud native application development.

61
00:04:15,010 --> 00:04:18,682
Ballerina is a flexibly typed language,

62
00:04:18,826 --> 00:04:22,286
so structural types with support powerfulness are

63
00:04:22,308 --> 00:04:25,774
a key feature in ballerina. They serve two purposes,

64
00:04:25,902 --> 00:04:29,454
one enhances static typing and two describing

65
00:04:29,502 --> 00:04:33,054
service interfaces. This flexibility is valuable

66
00:04:33,102 --> 00:04:35,970
for designing and maintaining complex systems.

67
00:04:37,270 --> 00:04:40,882
Barina allows for typesafe decorative processing of various

68
00:04:40,946 --> 00:04:44,610
data formats, including JSON and XML

69
00:04:44,690 --> 00:04:48,314
and tabular data, so thus making the

70
00:04:48,432 --> 00:04:53,062
data processing over network much simpler. WSO language integrated

71
00:04:53,126 --> 00:04:57,078
queries simplify data manipulation, enhancing productivity

72
00:04:57,174 --> 00:05:00,426
and code quality. Balina programs

73
00:05:00,458 --> 00:05:03,610
offer both textual and graphical representations.

74
00:05:03,770 --> 00:05:06,894
These graphical form based on sequence diagrams provide

75
00:05:06,932 --> 00:05:10,426
a visual way to understand and design program flaws.

76
00:05:10,618 --> 00:05:14,462
Also, it makes your code documentation much

77
00:05:14,516 --> 00:05:18,242
simpler. Davino excels in providing easy

78
00:05:18,296 --> 00:05:21,966
and efficient concurrency management. The use of sequence

79
00:05:21,998 --> 00:05:26,034
diagrams and language managed threads simplifies concurrent programming

80
00:05:26,082 --> 00:05:30,194
without the complexities often associated with synchronous

81
00:05:30,242 --> 00:05:34,050
functions. Barina also enhance program reliability

82
00:05:34,130 --> 00:05:37,560
and maintain boot to several means.

83
00:05:38,250 --> 00:05:42,038
Explicitly handling static typing and concurrency

84
00:05:42,134 --> 00:05:45,434
safety contribute to most robust applications you can

85
00:05:45,472 --> 00:05:49,462
develop. This is all achieved while maintaining a familiar

86
00:05:49,606 --> 00:05:53,102
and readable syntax, making it easier for developers to

87
00:05:53,156 --> 00:05:57,294
work and understand the code base. Let's see ballerina in

88
00:05:57,332 --> 00:06:00,714
action. When it comes to ballerina, the preferred

89
00:06:00,762 --> 00:06:03,540
IDE plugin is visual studio code.

90
00:06:03,990 --> 00:06:07,714
It also offers support for various IDE plugins for

91
00:06:07,752 --> 00:06:10,302
visual studio code such as docker,

92
00:06:10,366 --> 00:06:14,274
Kubernetes, Opentelemetry, Corio, Copilot and

93
00:06:14,312 --> 00:06:18,050
GitHub. Recently we have added support for Asia

94
00:06:18,210 --> 00:06:21,720
function as a service deployment as well.

95
00:06:22,250 --> 00:06:27,078
So when you are using vs code, everything will be everything

96
00:06:27,164 --> 00:06:31,242
that you need to compile, debug, run, observe and

97
00:06:31,296 --> 00:06:34,940
monitor. Your application will be with visual studio code.

98
00:06:35,550 --> 00:06:39,210
Wso as I mentioned, Barina is a graphical

99
00:06:39,970 --> 00:06:43,226
programming language as well as syntax

100
00:06:43,338 --> 00:06:47,086
programming language. So this is a sample of what

101
00:06:47,268 --> 00:06:50,814
marina looks like. In visual studio code you

102
00:06:50,852 --> 00:06:54,386
have a simple program with the main function and on the

103
00:06:54,408 --> 00:06:57,858
left side you can disview the code. On the

104
00:06:57,864 --> 00:07:02,910
right side you can see the sequence diagram that simplifies

105
00:07:02,990 --> 00:07:06,726
what this code does. So what this code does is actually

106
00:07:06,828 --> 00:07:11,734
connect to the GitHub API and then get

107
00:07:11,772 --> 00:07:15,986
the open pull request and then using the Google Sheet connector

108
00:07:16,018 --> 00:07:20,010
it add those pull requests to the Google

109
00:07:20,080 --> 00:07:23,734
sheet. So you can simply check this sequence

110
00:07:23,782 --> 00:07:27,798
diagram and understand the code better. You can also edit

111
00:07:27,814 --> 00:07:30,746
the sequence diagrams to generate code as well.

112
00:07:30,848 --> 00:07:34,422
It works both ways, similar to the previous

113
00:07:34,486 --> 00:07:37,790
side which shows a sequential program. It also

114
00:07:37,860 --> 00:07:41,680
works with an integration designer as well.

115
00:07:42,210 --> 00:07:46,146
This is a sample ballerina service, a rest service that

116
00:07:46,168 --> 00:07:50,002
we have run, HTTP service. So it also

117
00:07:50,056 --> 00:07:53,266
displayed the service the types that it has declared and

118
00:07:53,288 --> 00:07:56,850
you can also view the open API configurations

119
00:07:56,930 --> 00:08:01,794
of this service as well. You can navigate to the SQL

120
00:08:01,842 --> 00:08:06,114
diagram view and then in that view you can also view the open API

121
00:08:06,242 --> 00:08:09,020
of the service that you write as well.

122
00:08:09,390 --> 00:08:13,926
So vs code also support autocompletion of ballerina

123
00:08:14,038 --> 00:08:18,262
programs. It also knows the libraries that ballerina

124
00:08:18,326 --> 00:08:21,434
has. So we have a set of standard libraries

125
00:08:21,562 --> 00:08:25,114
for doing the standard functionalities of a programming language.

126
00:08:25,242 --> 00:08:29,598
So those functions will be simply you can add it,

127
00:08:29,764 --> 00:08:33,806
simply export it and you can just use them in your IDE.

128
00:08:33,908 --> 00:08:37,860
The IDE will automatically complete the values there for you.

129
00:08:38,230 --> 00:08:41,554
Marina has also cracked the challenge of mapping one

130
00:08:41,592 --> 00:08:45,010
kind of data into another kind of data, which is a common

131
00:08:45,080 --> 00:08:48,806
scenario in integration. You can do that in code as

132
00:08:48,828 --> 00:08:52,546
well as our graphical editor as shown in this picture.

133
00:08:52,738 --> 00:08:55,842
So it is very easy when you do the graphical

134
00:08:55,906 --> 00:08:59,542
one, you can just add a functions to convert value from one end

135
00:08:59,596 --> 00:09:03,338
to another value. Balino also support

136
00:09:03,424 --> 00:09:06,874
data persistence. So when

137
00:09:06,912 --> 00:09:10,730
you write a code or declare your objects

138
00:09:11,150 --> 00:09:15,478
in Balarina those are called records. When you declare your records,

139
00:09:15,574 --> 00:09:19,930
Balina will automatically map the entirety and relation

140
00:09:20,090 --> 00:09:23,834
diagram between them. You can simply generate the SQL

141
00:09:23,882 --> 00:09:27,300
code that you want to execute to run this Barina program.

142
00:09:27,670 --> 00:09:31,220
So that also works graphically as well as

143
00:09:31,830 --> 00:09:35,406
textually. Marina also supports debugging

144
00:09:35,438 --> 00:09:38,854
your application via vs code. You can

145
00:09:38,892 --> 00:09:41,974
remote debug your application and check the values that you

146
00:09:42,012 --> 00:09:45,238
receive for your inputs and check your logics in the

147
00:09:45,244 --> 00:09:49,274
debug mode, simply add debugging pointers to the code and start

148
00:09:49,312 --> 00:09:53,018
the application in debug mode. If you are using

149
00:09:53,104 --> 00:09:57,062
multiple services in your application, you can picture

150
00:09:57,126 --> 00:10:01,322
or graphically view them using the architecture view

151
00:10:01,376 --> 00:10:05,294
of the vs code plugin. Balina vs code plugin so

152
00:10:05,332 --> 00:10:08,334
this is a complex system that handles multiple services.

153
00:10:08,452 --> 00:10:12,010
You can simply go to the architecture view to see the connections

154
00:10:12,090 --> 00:10:15,810
between those services and you can read down on each

155
00:10:15,880 --> 00:10:19,460
component and see fine details as well.

156
00:10:19,990 --> 00:10:23,342
Bavina has inbuilt support for multiple

157
00:10:23,406 --> 00:10:27,406
tools that is required essential in integration.

158
00:10:27,598 --> 00:10:31,522
So one is these OpenaPI tool which generates client

159
00:10:31,586 --> 00:10:35,494
and skeleton for the open API specification that you

160
00:10:35,532 --> 00:10:39,394
receive. GraphQl tool which generate client skeletons

161
00:10:39,442 --> 00:10:43,254
in ballerina for your graphQL endpoints. Async API

162
00:10:43,302 --> 00:10:46,714
tool which generate ballerina service and listener skeletons for an

163
00:10:46,752 --> 00:10:50,826
async app contract and strand and dump tool which dumps

164
00:10:50,858 --> 00:10:54,494
and inspect current available strands of a ballerina program which is

165
00:10:54,532 --> 00:10:57,950
used for performance testing then

166
00:10:58,020 --> 00:11:01,422
health tool which generate fhir HL seven

167
00:11:01,476 --> 00:11:04,702
profile to client and stub generator tool of ballerina.

168
00:11:04,846 --> 00:11:08,802
We also have support EDI tool, the set of command tools that provide

169
00:11:08,856 --> 00:11:12,500
to work with EDI files in Balrina. This is just

170
00:11:13,110 --> 00:11:16,582
most used tools. There are many more tools that you can use

171
00:11:16,636 --> 00:11:20,322
with ballerina. Now let's look at how ballerina

172
00:11:20,386 --> 00:11:24,450
is the deployment of the program that you have developed

173
00:11:24,610 --> 00:11:28,650
using unique features of ballerina.

174
00:11:29,310 --> 00:11:32,966
Bell command will generate an executable jar

175
00:11:32,998 --> 00:11:36,346
file which you can use to run with bell tool

176
00:11:36,448 --> 00:11:40,394
or using the Java ADK version as well.

177
00:11:40,592 --> 00:11:43,982
You can also simply do bell run in your program

178
00:11:44,116 --> 00:11:47,550
which will compile and run your program in your machine.

179
00:11:47,890 --> 00:11:51,034
So both of these are supported with Balrina.

180
00:11:51,162 --> 00:11:54,638
Balrina also support native compilation

181
00:11:54,734 --> 00:11:57,934
using GalVM. You can simply say bell build minus

182
00:11:57,982 --> 00:12:01,806
minus GalvM which will compile a machine code according

183
00:12:01,838 --> 00:12:05,310
to your machine architecture which runs on your machine

184
00:12:05,390 --> 00:12:08,642
as an executable. You can also build

185
00:12:08,696 --> 00:12:12,870
a docker container using bellbill command which

186
00:12:12,940 --> 00:12:17,266
packs your application to a docker image. So ballerina compiler

187
00:12:17,298 --> 00:12:21,622
is aware of your application and it will automatically generate

188
00:12:21,686 --> 00:12:25,766
docker file and docker image for your application. You can simply say bell

189
00:12:25,798 --> 00:12:29,766
build minus minus cloud declare docker which will generate docker file

190
00:12:29,798 --> 00:12:33,470
and a docker image for your application. You can also

191
00:12:33,540 --> 00:12:36,894
build GalVM compatible docker image as

192
00:12:36,932 --> 00:12:40,670
well. You can simply say bell build minus minus cloud

193
00:12:40,740 --> 00:12:43,794
declared docker and minus minus Galvm which

194
00:12:43,832 --> 00:12:47,714
will compile a docker image into a galvm. So these

195
00:12:47,752 --> 00:12:51,490
are the stats of some popular frameworks and ballerina in

196
00:12:51,560 --> 00:12:55,594
using GalVM. So as you can see, ballerina pitimus

197
00:12:55,662 --> 00:12:59,714
has the same or better experience compared

198
00:12:59,762 --> 00:13:03,334
to these values in other framework. Not only

199
00:13:03,372 --> 00:13:06,566
that, ballerina also generates Kubernetes artifacts for

200
00:13:06,588 --> 00:13:09,658
you as well. When you just write a service or a

201
00:13:09,664 --> 00:13:12,934
main function or anything, you can simply say bell build minus

202
00:13:12,982 --> 00:13:16,550
minus cloud equal ketest which will generate

203
00:13:16,710 --> 00:13:20,790
yamls that are required to deploy your application in kubernetes.

204
00:13:20,950 --> 00:13:24,746
This also build a docker image for you as well and that docker

205
00:13:24,778 --> 00:13:28,254
image will be added to your deployment yaml and you can just

206
00:13:28,292 --> 00:13:32,282
say Kubectl apply and give that Yaml folder.

207
00:13:32,346 --> 00:13:35,854
It will automatically deploy your application into Kubernetes cluster

208
00:13:35,902 --> 00:13:39,506
as well. Balina also supports function as a

209
00:13:39,528 --> 00:13:43,298
service. You can write a Balarina function, either make it

210
00:13:43,384 --> 00:13:47,086
either deploy it in azure functions or AWS lambda.

211
00:13:47,198 --> 00:13:50,694
There are built in support for these things. You can simply add

212
00:13:50,732 --> 00:13:54,626
annotation, or you can simply write an Asia function executable

213
00:13:54,738 --> 00:13:58,714
and generate an Asia function executable to deploy in Asia functions as

214
00:13:58,752 --> 00:14:02,506
well. Well, you can now deploy ballerina as a

215
00:14:02,528 --> 00:14:05,894
Java file docker, image Galvm,

216
00:14:05,942 --> 00:14:09,974
Galvm plus docker and kubernetes. Now let's see what

217
00:14:10,032 --> 00:14:13,306
we can do with observability in ballerina.

218
00:14:13,498 --> 00:14:16,974
Every ballerina programming is automatically observable by

219
00:14:17,012 --> 00:14:20,814
any telemetry tool. You can view all the visibility and

220
00:14:20,852 --> 00:14:24,226
codes, behavior and performance automatically will be published in

221
00:14:24,248 --> 00:14:27,794
open telemetry syntax and you can simply add them

222
00:14:27,832 --> 00:14:31,460
and view them in any open telemetry supported tool

223
00:14:31,990 --> 00:14:34,958
distributed login also supported by ballerina.

224
00:14:35,054 --> 00:14:39,014
You can simply say no hub bal run and add this one and

225
00:14:39,052 --> 00:14:42,566
redirect your output to a ballerina log. Or then

226
00:14:42,588 --> 00:14:46,278
you can tail this log as well. So you can view these

227
00:14:46,364 --> 00:14:50,140
log value outputs in elasticsearch as well.

228
00:14:50,670 --> 00:14:54,154
All right, so let me explain about my

229
00:14:54,192 --> 00:14:57,862
setup a bit here. I'm using vs code with Balarina

230
00:14:57,926 --> 00:15:01,606
extension installed and my current ballerina version is

231
00:15:01,648 --> 00:15:05,166
Swan Lake update seven let me explain about the

232
00:15:05,188 --> 00:15:08,846
scenario a little bit. What I'm going to do is I'm going to write a

233
00:15:08,868 --> 00:15:13,710
service, HTTP service, which will provide

234
00:15:13,780 --> 00:15:17,486
the location and weather information when you provide an IP

235
00:15:17,518 --> 00:15:21,266
address to that one. In order to do that, I'm using

236
00:15:21,368 --> 00:15:24,914
two API endpoints. One is IP API, the other

237
00:15:24,952 --> 00:15:28,642
one is weather API. So this IP API endpoint,

238
00:15:28,706 --> 00:15:32,360
what it does is it will return the location data.

239
00:15:32,810 --> 00:15:36,722
These you provide an IP address for this one. These location

240
00:15:36,786 --> 00:15:40,314
data contains latitude and longitude belonged into

241
00:15:40,352 --> 00:15:44,138
that IP address. So now I'm going to extract those

242
00:15:44,224 --> 00:15:48,378
two location data, latitude and longitude, and then

243
00:15:48,544 --> 00:15:52,046
pass that one into the weather API endpoint where I

244
00:15:52,068 --> 00:15:55,486
will be passing that latitude and longitude value to

245
00:15:55,508 --> 00:15:59,630
get the current weather information for that particular location.

246
00:15:59,970 --> 00:16:03,474
Then I'm going to combine the results of these two and

247
00:16:03,512 --> 00:16:07,106
provide an aggregated weather data update for

248
00:16:07,128 --> 00:16:10,254
that particular location which contains following

249
00:16:10,382 --> 00:16:13,858
items. So it contains last updated time

250
00:16:13,944 --> 00:16:18,114
of the current weather, temperature condition

251
00:16:18,242 --> 00:16:21,942
fields like weather information. Then it will also

252
00:16:21,996 --> 00:16:25,222
contain the location information, city, country and these

253
00:16:25,276 --> 00:16:28,362
ISP. So I have

254
00:16:28,416 --> 00:16:32,474
exposed this one as a service called with

255
00:16:32,512 --> 00:16:36,700
base eases geo data which runs on port 99

256
00:16:37,070 --> 00:16:40,862
and I have defined a resource function which does

257
00:16:40,916 --> 00:16:44,990
all of this which accept IP address as a path parameter

258
00:16:45,490 --> 00:16:48,590
and returns the weather data or a bad

259
00:16:48,660 --> 00:16:52,174
request or internal server depending on the

260
00:16:52,212 --> 00:16:55,874
results that we receive. Let me show

261
00:16:55,912 --> 00:16:59,698
the graphical view of this program real quick so you

262
00:16:59,704 --> 00:17:04,114
can simply click on this icon which will explore the graphical view

263
00:17:04,312 --> 00:17:07,590
and it will give you a glance of what you have written.

264
00:17:08,010 --> 00:17:11,218
Here we have this get two functions,

265
00:17:11,394 --> 00:17:14,914
one service, one record and three module

266
00:17:14,962 --> 00:17:17,794
level variables. So what these functions,

267
00:17:17,842 --> 00:17:21,738
these is this one get geodata, the other one get weather data.

268
00:17:21,904 --> 00:17:27,114
And this service, it contains two resources and it

269
00:17:27,152 --> 00:17:30,634
features this weather data and I have used the

270
00:17:30,752 --> 00:17:33,882
user key which is the key for the weather

271
00:17:33,946 --> 00:17:37,422
app that I need to invoke. So I am reading this value

272
00:17:37,476 --> 00:17:41,054
from the environment variable when we run and

273
00:17:41,092 --> 00:17:43,790
it is configurable in ballerina.

274
00:17:44,150 --> 00:17:47,902
So let's take a look at the service view of this graphical

275
00:17:47,966 --> 00:17:51,726
view. You can see the resource functions

276
00:17:51,758 --> 00:17:55,670
that I have written here graphically similar to that open

277
00:17:55,740 --> 00:18:00,210
API spec level visualizer.

278
00:18:00,370 --> 00:18:04,262
You can also view the cloud code view of this one which

279
00:18:04,316 --> 00:18:08,394
explain these logic that is written inside this

280
00:18:08,592 --> 00:18:12,342
resource endpoint. So we have this endpoint

281
00:18:12,406 --> 00:18:16,170
which returns which is very clear

282
00:18:16,240 --> 00:18:19,946
and easy to understand. If you want to document your code you can

283
00:18:19,968 --> 00:18:23,278
simply copy and paste this value and be done with it.

284
00:18:23,444 --> 00:18:27,262
All right now let's try and invoke this service

285
00:18:27,396 --> 00:18:31,306
in my local machine. So I'm going to use the terminal

286
00:18:31,338 --> 00:18:34,766
for this one. In the terminal I have created

287
00:18:34,798 --> 00:18:38,446
two terminal instances, one to compile and one to invoke

288
00:18:38,478 --> 00:18:42,322
this services I'm going to do just do a bell run on this

289
00:18:42,376 --> 00:18:45,734
folder which will compile my

290
00:18:45,932 --> 00:18:49,560
program and then also run it in this

291
00:18:50,010 --> 00:18:53,334
90 90 port. In these

292
00:18:53,452 --> 00:18:57,094
terminal I'm going to use curl to invoke this one and

293
00:18:57,132 --> 00:19:01,690
get the output. All right it compiling.

294
00:19:02,350 --> 00:19:05,610
Let me type the curl real fast until

295
00:19:05,680 --> 00:19:09,658
that we can do HTTP and it's running on my local

296
00:19:09,744 --> 00:19:14,046
machine in port 90 90. My base path is your data

297
00:19:14,228 --> 00:19:18,190
and the weather is these endpoint and it accept

298
00:19:18,530 --> 00:19:21,070
IP address as a path parameter.

299
00:19:21,890 --> 00:19:25,860
Now it is running on port 90 90. I can simply knock this one

300
00:19:26,230 --> 00:19:30,114
as you can see. Now you can see the output of this program and

301
00:19:30,152 --> 00:19:33,762
the logs that I have added in this program which

302
00:19:33,896 --> 00:19:37,182
prints the location information and the weather

303
00:19:37,246 --> 00:19:40,566
information. And finally we can see the output on

304
00:19:40,588 --> 00:19:44,150
this window which contains the details for my current IP address

305
00:19:44,220 --> 00:19:47,646
location. Let me invoke another IP

306
00:19:47,698 --> 00:19:51,162
address as well. Let's say one seven two

307
00:19:51,216 --> 00:19:54,790
here. All right, it's from United Kingdom

308
00:19:54,870 --> 00:19:58,300
and it's heavy raining at the moment. All right

309
00:19:58,990 --> 00:20:02,350
that's one way of testing. Let me show you another

310
00:20:02,420 --> 00:20:06,634
way. Using the graphical way you can simply

311
00:20:06,762 --> 00:20:10,400
click on this try it button which will invoke the

312
00:20:12,130 --> 00:20:15,946
swagger editor for this API which contains

313
00:20:15,978 --> 00:20:19,426
all the results, services and the port you can provide. And I

314
00:20:19,448 --> 00:20:22,882
can just say get weather IP and try it out and

315
00:20:22,936 --> 00:20:28,774
enter an IP address here. Let me say one 7210 21

316
00:20:28,972 --> 00:20:33,106
and execute. It will give a nice output

317
00:20:33,298 --> 00:20:37,266
in graphical view as well. So United States partially cloudy

318
00:20:37,298 --> 00:20:40,794
and these are these temperature information. That's the

319
00:20:40,832 --> 00:20:44,074
graphical view. I want to just give a glass. You can do

320
00:20:44,112 --> 00:20:48,234
lot more with this graphical view. Now since

321
00:20:48,272 --> 00:20:51,934
we have running this, let's run this one in

322
00:20:51,972 --> 00:20:55,962
Kubernetes. So I'm going to do this without writing

323
00:20:56,026 --> 00:20:59,470
a single YAML file or building a docker image.

324
00:20:59,970 --> 00:21:03,502
All right I have stopped the service for now but before

325
00:21:03,556 --> 00:21:07,314
doing that I want to add another opensource to this one to

326
00:21:07,352 --> 00:21:11,662
check the readiness of this service. Let's do it by graphical

327
00:21:11,726 --> 00:21:15,006
way. I'm going to go to service and going to add the

328
00:21:15,048 --> 00:21:18,534
resource and it will be a get resource and my

329
00:21:18,572 --> 00:21:25,830
path will be health readiness.

330
00:21:28,170 --> 00:21:32,278
So this is the endpoint that I will invoke in my readiness probe

331
00:21:32,374 --> 00:21:36,714
and the response for that will be 200. Okay and

332
00:21:36,752 --> 00:21:39,100
I'm going to do it and then save.

333
00:21:39,710 --> 00:21:43,230
As you can see the code for this one

334
00:21:43,300 --> 00:21:48,282
got automatically invoked. Now I'm going to do a return HTTP

335
00:21:48,346 --> 00:21:52,334
okay here. Okay now we are ready to deploy this one

336
00:21:52,372 --> 00:21:56,302
in Kubernetes. So in order to modify the Kubernetes

337
00:21:56,366 --> 00:21:59,554
artifacts generated by compiler we can use this

338
00:21:59,592 --> 00:22:03,486
cloud TML file. Here I have added a cloud TML file

339
00:22:03,518 --> 00:22:07,286
to configure the name of the docker image that we are building and the

340
00:22:07,308 --> 00:22:10,322
tag that we are providing for that image.

341
00:22:10,466 --> 00:22:13,810
Also as you can remember we have a configurable

342
00:22:13,890 --> 00:22:17,646
variable which requires the user key to operate

343
00:22:17,778 --> 00:22:21,030
and eases it to the weather API.

344
00:22:21,190 --> 00:22:24,762
So that for that one I have already created a

345
00:22:24,896 --> 00:22:28,986
config map which contains this user key and I want

346
00:22:29,008 --> 00:22:32,458
to use that in my deployment. So I am saying

347
00:22:32,544 --> 00:22:36,042
that use this info config map

348
00:22:36,106 --> 00:22:39,582
and use that key refer its key

349
00:22:39,636 --> 00:22:43,486
user key in my deployment. Now I want to add

350
00:22:43,508 --> 00:22:46,754
the readiness probe to this one. As you can see we can

351
00:22:46,792 --> 00:22:50,574
simply type readiness and it will give you the suggestions

352
00:22:50,702 --> 00:22:54,530
here. I have to give the path. So my path will be

353
00:22:54,600 --> 00:22:58,420
health readiness, it should be

354
00:23:00,390 --> 00:23:04,230
geodata health readiness

355
00:23:04,890 --> 00:23:08,440
and my port will be 99.

356
00:23:08,970 --> 00:23:12,570
All right now we have added the readiness probe, let's compile.

357
00:23:12,910 --> 00:23:17,210
So I'm going to use bell build minus minus cloud equal Kubernetes

358
00:23:18,030 --> 00:23:21,902
command which will compile this program. Then pack

359
00:23:21,956 --> 00:23:25,066
that giant to a docker image and the docker file

360
00:23:25,098 --> 00:23:27,950
will be generated along with the YAMl file.

361
00:23:28,290 --> 00:23:31,882
Let's see. All right, we got an error.

362
00:23:32,026 --> 00:23:35,202
In addition. All right, as I

363
00:23:35,336 --> 00:23:38,882
said earlier, the compiler is aware of the resources and these

364
00:23:38,936 --> 00:23:42,626
YAml files, so we can see that

365
00:23:42,808 --> 00:23:46,342
health actually contain an EZ here. So I have missed that

366
00:23:46,396 --> 00:23:48,600
one. Let's add it and try again.

367
00:23:49,050 --> 00:23:51,590
So until it bears,

368
00:23:52,650 --> 00:23:56,386
let me explain. By my Kubernetes cluster, I'm using rancher

369
00:23:56,418 --> 00:24:00,102
for desktop along local cluster,

370
00:24:00,166 --> 00:24:03,494
so I can use the same docker registry in my local machine

371
00:24:03,542 --> 00:24:06,794
in this Kubernetes cluster as well. All right,

372
00:24:06,832 --> 00:24:10,582
now it's generating executable. Likewise it generates Kubernetes

373
00:24:10,646 --> 00:24:14,030
artifacts that are mentioned here along with the Docker image.

374
00:24:14,450 --> 00:24:18,558
So these things should be in there

375
00:24:18,644 --> 00:24:22,800
and it will finally print the commands that you need to run this program.

376
00:24:23,190 --> 00:24:26,798
If you go to the target folder and Kubernetes file,

377
00:24:26,894 --> 00:24:31,010
you can see that the file is already generated

378
00:24:31,590 --> 00:24:34,802
and it has created a service with port 90

379
00:24:34,856 --> 00:24:39,042
90 of cluster ip. Then the deployment with the same labels

380
00:24:39,106 --> 00:24:42,066
which will match these service labels.

381
00:24:42,258 --> 00:24:45,958
And as I mentioned earlier, we have this config value

382
00:24:46,044 --> 00:24:49,414
parameter which will read from this one and inject

383
00:24:49,462 --> 00:24:53,862
it into the container that we have provided. These name is Geodeeployment

384
00:24:53,926 --> 00:24:57,020
and the port is GeopRC one.

385
00:24:57,390 --> 00:25:01,006
And it also got that readiness trip configured as

386
00:25:01,028 --> 00:25:05,006
well with these initial delay of 30 seconds. We also

387
00:25:05,108 --> 00:25:09,722
generate an horizontal auto scale for dotoscale.

388
00:25:09,866 --> 00:25:13,006
If you look at the Docker file, it contains the

389
00:25:13,028 --> 00:25:16,434
jars that you require to run this one and the docker image as

390
00:25:16,472 --> 00:25:19,618
well. So now I'm going to do,

391
00:25:19,784 --> 00:25:23,346
let me quickly run a Docker images command to show whether the

392
00:25:23,368 --> 00:25:26,950
Docker image has built. I'm going to do docker images.

393
00:25:27,530 --> 00:25:31,094
As you can see, we have this geo weather data v

394
00:25:31,132 --> 00:25:34,120
one 10 just created about a minute ago.

395
00:25:34,730 --> 00:25:38,362
Now I'm going to run this command which we got

396
00:25:38,416 --> 00:25:41,770
from this output of this ballerina

397
00:25:42,430 --> 00:25:46,586
one kubectl create

398
00:25:46,688 --> 00:25:49,930
minus f and the part to the ML file.

399
00:25:51,090 --> 00:25:54,510
All right, everything got created. Let's see the status.

400
00:25:55,330 --> 00:25:58,574
Okay, still it is running. I think this is

401
00:25:58,612 --> 00:26:02,270
because of that initial delay of 32nd we have added.

402
00:26:02,870 --> 00:26:05,794
Let's wait for 30 seconds and see. Let's see.

403
00:26:05,832 --> 00:26:10,370
Other resources also got created. Get SVC.

404
00:26:10,870 --> 00:26:14,500
Sorry these, we got this network services

405
00:26:15,590 --> 00:26:18,578
and get HPA as well. Okay,

406
00:26:18,744 --> 00:26:21,060
we got this HPA as well.

407
00:26:21,850 --> 00:26:25,910
Still it's not running. Let's check these status

408
00:26:26,730 --> 00:26:29,606
describe pod. Okay,

409
00:26:29,708 --> 00:26:33,400
it's still waiting for that readiness pop.

410
00:26:33,950 --> 00:26:38,394
Okay, now it's running. Now we

411
00:26:38,432 --> 00:26:41,838
want to expose this service as a node port

412
00:26:41,924 --> 00:26:45,774
in our cluster. So I'm going to type the command that

413
00:26:45,812 --> 00:26:49,630
we already retrieved from that. Build output,

414
00:26:49,970 --> 00:26:53,460
expose deployment, your deployment as a node port.

415
00:26:53,910 --> 00:26:57,234
Okay, now this will create a node port service which we

416
00:26:57,272 --> 00:27:00,862
can use to invoke this service in the Kubernetes cluster.

417
00:27:01,006 --> 00:27:04,900
So it's exposing this 90 90 via this

418
00:27:05,210 --> 00:27:08,338
32 two four cluster.

419
00:27:08,514 --> 00:27:12,326
Now let's invoke that one and see whether we get the same result

420
00:27:12,428 --> 00:27:14,790
we got from curl.

421
00:27:15,370 --> 00:27:19,370
Before doing that, let's log the pods,

422
00:27:20,190 --> 00:27:23,466
tail the logs of the pods as well. We are

423
00:27:23,488 --> 00:27:26,780
going to do this log. Okay,

424
00:27:27,310 --> 00:27:30,074
now we just do same,

425
00:27:30,192 --> 00:27:34,350
but with the port that we got for the node.

426
00:27:34,930 --> 00:27:39,070
What's the port? Let me quickly

427
00:27:39,140 --> 00:27:44,114
get the port. It's 32 two

428
00:27:44,152 --> 00:27:47,570
four. I'm going to use that in the curl.

429
00:27:48,150 --> 00:27:51,586
Okay. All right, we got the log and the

430
00:27:51,608 --> 00:27:54,674
result. Let's try another IP address as

431
00:27:54,712 --> 00:27:57,640
well this time like one, one two.

432
00:27:58,090 --> 00:28:00,834
Okay, we got our local results.

433
00:28:00,962 --> 00:28:05,030
As you can see, the pod logs are also

434
00:28:05,100 --> 00:28:07,880
being printed. Okay,

435
00:28:08,590 --> 00:28:11,754
now that's all for the demo that I

436
00:28:11,792 --> 00:28:14,970
want to show. This is just a

437
00:28:15,040 --> 00:28:18,780
scratch of the surface of what ballerina can do.

438
00:28:19,310 --> 00:28:22,954
In this demo, we have exposed Ballerina's network

439
00:28:23,002 --> 00:28:26,282
primitives, the dual textual and graphical syntax,

440
00:28:26,426 --> 00:28:29,962
and we also experienced the ease of concurrency management

441
00:28:30,026 --> 00:28:33,454
and how easy it is to deploy in Kubernetes or

442
00:28:33,492 --> 00:28:37,074
docker environments. The power of ballerina does not

443
00:28:37,112 --> 00:28:40,590
stop here. It's a dynamic language that keeps evolving

444
00:28:40,670 --> 00:28:45,182
and there's always more to discover and leverage in your cloud native applications.

445
00:28:45,326 --> 00:28:48,806
I encourage you to take what you have learned today and apply it in your

446
00:28:48,828 --> 00:28:51,730
projects. Furthermore, you can experiment,

447
00:28:51,810 --> 00:28:55,590
collaborate and innovate with ballerina as you build

448
00:28:55,660 --> 00:28:58,882
your scalable, efficient and relevant cloud native

449
00:28:58,946 --> 00:29:02,594
applications. If you have any questions or would you like to explore

450
00:29:02,642 --> 00:29:07,090
ballerina further, please contact us with one of these channels,

451
00:29:07,170 --> 00:29:10,960
these websites I have mentioned in this slide you.

452
00:29:11,570 --> 00:29:14,480
Thank you once again for joining with us.

453
00:29:15,090 --> 00:29:16,700
Have a fantastic day ahead.

