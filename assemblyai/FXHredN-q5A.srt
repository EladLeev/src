1
00:01:28,210 --> 00:01:32,242
Let's talk about DevOps and internal developer platforms

2
00:01:32,306 --> 00:01:36,258
and how those might be the only thing that matters

3
00:01:36,434 --> 00:01:40,298
for DevOps engineers or DevOps culture, what terraform

4
00:01:40,314 --> 00:01:43,754
that's called today. My name is Victor. I work for upbound.

5
00:01:43,802 --> 00:01:47,326
We're a company behind Crossplane and quite a few other things you will

6
00:01:47,348 --> 00:01:51,502
see crossplane later. But that's not the focus right

7
00:01:51,636 --> 00:01:55,170
now. When I said DevOps, most of you are probably thinking

8
00:01:55,240 --> 00:01:59,294
about containers. Kubernetes, cloud, GitHub, CI CD

9
00:01:59,342 --> 00:02:03,570
logging, monitoring, infrastructure as code troubleshooting, security service

10
00:02:03,640 --> 00:02:07,310
mesh and so on and so forth. But that's not

11
00:02:07,400 --> 00:02:10,914
what DevOps is about. Those are operations tools,

12
00:02:10,962 --> 00:02:14,438
right? Those are the tools that if they did exist in

13
00:02:14,444 --> 00:02:18,470
the past, some of them did. We would be using them as members

14
00:02:18,540 --> 00:02:21,638
of OpS departments or Ops people or security

15
00:02:21,804 --> 00:02:25,866
experts or sysadmins, whatever we were called in the past.

16
00:02:25,968 --> 00:02:29,910
But DevOps is about combining development and operations

17
00:02:30,070 --> 00:02:33,402
and enabling developers, application developers,

18
00:02:33,546 --> 00:02:36,654
to be selfsufficient, to move faster, to be able

19
00:02:36,692 --> 00:02:40,094
to do things by themselves. And when we talk

20
00:02:40,132 --> 00:02:43,674
about developers, do we really expect them to use and

21
00:02:43,732 --> 00:02:47,202
know all those things? Are they all going to become

22
00:02:47,336 --> 00:02:50,814
experts in containers? Kubernetes, cloud, Githubs, CI CD

23
00:02:50,862 --> 00:02:54,402
logging, monitoring, troubleshooting, et cetera, et cetera? They're not,

24
00:02:54,456 --> 00:02:58,582
because that would be impossible. No single person can

25
00:02:58,636 --> 00:03:02,054
know all that. And yet we want everybody

26
00:03:02,172 --> 00:03:05,990
to be selfsufficient, to self serve their needs.

27
00:03:06,140 --> 00:03:10,006
And that's the core of what we are trying to do in DevOps.

28
00:03:10,038 --> 00:03:13,318
We are trying to shift left to shift operations

29
00:03:13,414 --> 00:03:17,514
and everything that is happening on those right side of application

30
00:03:17,632 --> 00:03:19,900
lifecycle to the left.

31
00:03:20,430 --> 00:03:24,314
Now we cannot do that by saying, hey, now you do it. Here's AWS

32
00:03:24,362 --> 00:03:27,866
account. Create a cluster, create node groups, create vpcs,

33
00:03:27,978 --> 00:03:32,490
subnets and so on and so forth. Learn kubernetes, create manifests

34
00:03:32,570 --> 00:03:36,434
for deployments or stateful sets and virtual services and services and

35
00:03:36,472 --> 00:03:39,730
ingresses and so on and so forth. We cannot shift left

36
00:03:39,880 --> 00:03:43,234
by saying, now you do it. So the

37
00:03:43,272 --> 00:03:47,160
core, the essence of DevOps is about creating services

38
00:03:47,610 --> 00:03:50,754
that use ops tools but are meant

39
00:03:50,802 --> 00:03:54,834
to enable developers to be able. Application developers,

40
00:03:54,882 --> 00:03:57,746
just to be clear, because everybody's a developer,

41
00:03:57,778 --> 00:04:01,446
right? Everybody writes code. So to enable application developers to

42
00:04:01,468 --> 00:04:04,842
do whatever they need to do, you need a cluster, create it. There's a service

43
00:04:04,896 --> 00:04:08,122
for that. You need an application. Should it be back end or front end?

44
00:04:08,176 --> 00:04:11,882
This or that. Anyways, there's a service for that and so on and so forth.

45
00:04:11,946 --> 00:04:15,866
And that's how we are getting to the concept of internal

46
00:04:15,978 --> 00:04:19,706
developer platforms, or idps. They're internal

47
00:04:19,738 --> 00:04:23,658
because they are meant for internal usage. They are developer because application

48
00:04:23,764 --> 00:04:27,374
developers are the customers of those providing

49
00:04:27,502 --> 00:04:30,834
a platform. And it's a platform because that's how it all comes

50
00:04:30,872 --> 00:04:34,146
together. So IDP or internal developer platform is a

51
00:04:34,168 --> 00:04:38,038
layer on top of the technology and the tooling that we already

52
00:04:38,124 --> 00:04:41,714
have. It is about shifting left by enabling developers,

53
00:04:41,762 --> 00:04:45,666
application developers to be self sufficient by consume

54
00:04:45,778 --> 00:04:49,862
services of such a platform. That's what operations and SREs

55
00:04:49,926 --> 00:04:53,658
and DevOps and whatever other names we have for people on

56
00:04:53,664 --> 00:04:57,386
the right side of application lifecycle, that's what they're doing

57
00:04:57,488 --> 00:05:00,940
to enable developers to self serve themselves.

58
00:05:01,390 --> 00:05:04,286
And the reason why we want to do that, the reason why we want to

59
00:05:04,308 --> 00:05:07,658
create services is to free operations

60
00:05:07,834 --> 00:05:10,654
from doing mundane tasks. Kind of hey,

61
00:05:10,692 --> 00:05:14,318
there is an email, I should create a cluster for this team. Or there

62
00:05:14,324 --> 00:05:18,750
is another email or Jira ticket I should create manifest for application deployed

63
00:05:18,830 --> 00:05:22,082
here and there and so on and so forth. No, that's a waste of

64
00:05:22,136 --> 00:05:26,210
time. What is a good usage of time is to put

65
00:05:26,280 --> 00:05:29,682
all that knowledge into a platform and let

66
00:05:29,736 --> 00:05:32,950
everybody use it. Hey, this is how you create a cluster. Don't ask me.

67
00:05:33,020 --> 00:05:36,406
There's a button, you fill in those three fields or four fields, you get

68
00:05:36,428 --> 00:05:40,454
a cluster, you want application. Again, there is a form with

69
00:05:40,492 --> 00:05:44,026
a few fields, you need to specify whether it's this or that. Click a

70
00:05:44,048 --> 00:05:47,798
button, you get your application, and so on and so forth.

71
00:05:47,894 --> 00:05:51,226
And the reason why we want self service is actually there

72
00:05:51,248 --> 00:05:54,106
are quite a few reasons. We want to increase productivities,

73
00:05:54,218 --> 00:05:57,594
we want to reduce lean time, we want to increase deployment frequency,

74
00:05:57,642 --> 00:06:00,778
we want to decrease meantime to repair or MTTR,

75
00:06:00,874 --> 00:06:04,490
we want to decrease change failure rate or CFR, and so

76
00:06:04,500 --> 00:06:08,578
on and so forth. There are numerous studies that show that

77
00:06:08,744 --> 00:06:12,286
selfsufficient teams are performing better than teams,

78
00:06:12,318 --> 00:06:15,586
that depend on other teams who depend on other teams, and so on and so

79
00:06:15,608 --> 00:06:18,918
forth. And then we get to the question, what should such a platform do?

80
00:06:19,004 --> 00:06:21,494
And the simple answer is everything.

81
00:06:21,612 --> 00:06:25,442
Right? And there are certain stages, certain groups of operations

82
00:06:25,506 --> 00:06:28,498
that we need to think about. We need to be able to change those desired

83
00:06:28,594 --> 00:06:32,218
state. That's the state that is stored in git. We need

84
00:06:32,224 --> 00:06:36,086
to perform certain actions like building container images, running tests

85
00:06:36,118 --> 00:06:39,786
and so on and so forth. We need to converge the actual into the

86
00:06:39,808 --> 00:06:43,542
desired state. You know, if it's in git, that's what it should be.

87
00:06:43,616 --> 00:06:47,086
And we need to be able to observe what's going on and all

88
00:06:47,108 --> 00:06:50,286
that can look more or less like this, we have an

89
00:06:50,308 --> 00:06:53,914
IDP at the top, that's those interaction, that's how we interact

90
00:06:53,962 --> 00:06:57,506
with the whole system. And it's tailor made for the needs of

91
00:06:57,528 --> 00:07:01,326
a company. It contains a user interface which could be web or CLI

92
00:07:01,358 --> 00:07:04,242
or ID, I don't care whatever people are using.

93
00:07:04,376 --> 00:07:08,006
And it needs to have an API. And this is now the core of

94
00:07:08,028 --> 00:07:12,162
the issue, that API must be Kubernetes,

95
00:07:12,226 --> 00:07:15,542
simply because that's the only API that we

96
00:07:15,596 --> 00:07:19,722
have today that is widely accepted and has a tendency real

97
00:07:19,776 --> 00:07:23,786
potential to become a universal API. And then we

98
00:07:23,808 --> 00:07:27,146
have the desired state, that's what we're storing it. And then we have the

99
00:07:27,168 --> 00:07:30,906
actual state, that's AWS and Azure and on Prem and

100
00:07:30,928 --> 00:07:34,878
Google and Splunk and elastic and whatever else we are doing, those are

101
00:07:34,884 --> 00:07:38,814
the providers, and we have infrastructure on top of those providers which are servers or

102
00:07:38,852 --> 00:07:42,970
clusters or databases. And we have applications which could be ours

103
00:07:43,050 --> 00:07:46,274
or third party applications. So we have the desired state,

104
00:07:46,392 --> 00:07:50,350
we have the actual state, and we have internal developer platforms

105
00:07:50,430 --> 00:07:53,970
that enables people to observe those actual state

106
00:07:54,040 --> 00:07:57,346
to see what's going on and to be able to define what the

107
00:07:57,368 --> 00:08:00,534
state should be by pushing stuff to git in a way

108
00:08:00,572 --> 00:08:03,686
that is very easy to define and push as

109
00:08:03,708 --> 00:08:07,234
well. And then we have a Kubernetes cluster. Now don't think about Kubernetes

110
00:08:07,282 --> 00:08:11,150
cluster in this concept as a cluster where our applications

111
00:08:11,170 --> 00:08:14,586
are running. I mean our applications could be running in Kubernetes, but that's not

112
00:08:14,608 --> 00:08:18,006
the purpose here because our applications could be running a services

113
00:08:18,118 --> 00:08:22,226
like Lambda or Google Cloud functions, it could be running on vms,

114
00:08:22,358 --> 00:08:25,946
it could be this, it could be let's say a database managed

115
00:08:25,978 --> 00:08:29,374
database like RDS. In this concept I'm not talking about

116
00:08:29,412 --> 00:08:33,162
kubernetes where applications run. I'm talking about kubernetes

117
00:08:33,306 --> 00:08:36,142
where we can define custom resource definitions,

118
00:08:36,206 --> 00:08:40,018
define what something is, because we already established that

119
00:08:40,104 --> 00:08:42,798
things are too complicated for an average developer.

120
00:08:42,894 --> 00:08:46,642
Defining all the resources for an application Kubernetes is too

121
00:08:46,696 --> 00:08:50,706
complex for people who are not dedicated to kubernetes to understand defining

122
00:08:50,738 --> 00:08:54,166
all the resources in AWS, again too complex. We need

123
00:08:54,188 --> 00:08:57,298
to simplify that and we simplify that by creating

124
00:08:57,394 --> 00:09:01,270
new custom resource definitions. Hey, in my company

125
00:09:01,420 --> 00:09:04,986
this is what it means to run a cluster. And I'll show you that in

126
00:09:05,008 --> 00:09:08,362
a second. And this is what it means to run an application. Again,

127
00:09:08,416 --> 00:09:12,774
I will show you that in a second. And those CRDs have associated

128
00:09:12,822 --> 00:09:16,334
custom resources. Those are the manifests that we store in git that are creating into

129
00:09:16,372 --> 00:09:20,030
custom resources. And the goal of those CRDs is to define what something

130
00:09:20,100 --> 00:09:23,498
can be. The goal of CRS custom resources is to define what

131
00:09:23,524 --> 00:09:27,298
something is. And the goal of kubernetes and controllers in

132
00:09:27,304 --> 00:09:31,138
kubernetes is to convert those custom resources into

133
00:09:31,224 --> 00:09:35,102
something which is the actual state, which could be in our providers,

134
00:09:35,166 --> 00:09:37,882
infrastructure, applications and so on and so forth.

135
00:09:38,046 --> 00:09:41,606
This is what unites it all. And to do that

136
00:09:41,628 --> 00:09:45,346
we need tools, we need pipelines, we need GitHub tools. That's the tools

137
00:09:45,378 --> 00:09:49,218
like ArgosDM flux that synchronizes desired state into what is in Kubernetes.

138
00:09:49,314 --> 00:09:52,410
And Kubernetes synchronizes what is in kubernetes with the actual

139
00:09:52,480 --> 00:09:55,898
state. And we need infrastructure and we need Arbec and

140
00:09:55,904 --> 00:09:59,306
a bunch of other things. And I will show you all those things in

141
00:09:59,328 --> 00:10:02,618
a second. Actually, not all those things, but some of those things in a

142
00:10:02,624 --> 00:10:06,030
demo, because I get nervous speaking for too long without

143
00:10:06,100 --> 00:10:09,550
touching my keyboard. Actually. Now I'm going to think about it. Why not go into

144
00:10:09,620 --> 00:10:13,370
demos right away? I had five, six, seven slides

145
00:10:13,450 --> 00:10:16,734
prepared to talk about it, but that's boring. So let's go straight

146
00:10:16,782 --> 00:10:20,306
into those demo and let me show you how all that looks like,

147
00:10:20,408 --> 00:10:24,002
how we can combine couple of tools to do just

148
00:10:24,056 --> 00:10:27,106
that, and it's not going to be hard, so bear with me. So let's say

149
00:10:27,128 --> 00:10:30,994
that I'm a developer and I want to have a cluster in somewhere.

150
00:10:31,042 --> 00:10:34,326
Let's say aws. And that cluster should have all the things that I

151
00:10:34,348 --> 00:10:38,626
do not really understand, but it should be a cluster, kubernetes cluster. Eks cluster.

152
00:10:38,738 --> 00:10:42,346
How would I do that? How would I do that to the level that is

153
00:10:42,448 --> 00:10:45,546
easy for me to define and consume it as a

154
00:10:45,568 --> 00:10:49,158
service. And by the way, that cluster should not be just a cluster,

155
00:10:49,254 --> 00:10:52,426
it should be production ready cluster, meaning that it should not

156
00:10:52,448 --> 00:10:56,238
be only an eks cluster with node groups and kubernetes and vpcs and so on

157
00:10:56,244 --> 00:11:00,110
and so forth. But everything that I need inside of that cluster already

158
00:11:00,260 --> 00:11:03,550
baked in. And I could do that in a very easy

159
00:11:03,620 --> 00:11:07,366
way by showing you this file. Infrawks.

160
00:11:07,498 --> 00:11:11,410
Here we go. And this file is relatively simple.

161
00:11:11,480 --> 00:11:15,186
Bear in mind, if I would do this without the way how I'm doing it

162
00:11:15,208 --> 00:11:18,370
right now, which is by the way, crossplane, I would probably

163
00:11:18,440 --> 00:11:22,246
end up with 500 lines of yaml or hcl or something

164
00:11:22,268 --> 00:11:26,006
like that. But in this case it's much easier because I'm saying, hey, I want

165
00:11:26,028 --> 00:11:29,786
to create or I want to define something called composite cluster. Now what is

166
00:11:29,808 --> 00:11:33,574
composite cluster, well, that's what other people defined and already prepared.

167
00:11:33,622 --> 00:11:37,366
In my cluster there is a custom resource definition,

168
00:11:37,478 --> 00:11:40,886
or what we call in crossplane XRD or crossplane

169
00:11:40,918 --> 00:11:44,414
resource definition that is called composite cluster. And I

170
00:11:44,532 --> 00:11:48,126
can just say, hey, I want to consume that thing and I will give it

171
00:11:48,148 --> 00:11:51,390
an id and I will say, hey, this should be

172
00:11:51,460 --> 00:11:55,374
an AWS cluster. And that's where we are going into compositions

173
00:11:55,422 --> 00:11:58,722
because this custom resource can have many

174
00:11:58,776 --> 00:12:02,018
different compositions and I can choose, hey, do I want in Google? Do I

175
00:12:02,024 --> 00:12:05,410
want in AWS? Where do I want? And finally,

176
00:12:05,560 --> 00:12:08,562
I have a couple of parameters. I'm saying, you know what,

177
00:12:08,616 --> 00:12:12,194
I do not know what is t two something something or whatever are the sizes

178
00:12:12,242 --> 00:12:15,618
in AWS and Azure and Google. I just want the nodes

179
00:12:15,634 --> 00:12:19,398
of that cluster to be medium size, whatever that means. And I

180
00:12:19,404 --> 00:12:22,986
want to have a minimum of three nodes because hey, you should

181
00:12:23,008 --> 00:12:26,426
have a minimum. And I assume that it will auto scale up, right?

182
00:12:26,528 --> 00:12:30,206
We are defining something that doesn't exist in crossplane. It's what

183
00:12:30,228 --> 00:12:34,942
we call crossplane resource definitions, which are basically base

184
00:12:35,076 --> 00:12:38,414
for operations in my company, or sres or DevOps or

185
00:12:38,452 --> 00:12:42,110
whatever they're called to use to combine different

186
00:12:42,180 --> 00:12:45,634
resources. And I will show you those resources later into something that

187
00:12:45,672 --> 00:12:49,074
is meaningful to everybody else. In this case me and I have

188
00:12:49,112 --> 00:12:52,626
a second xrd called Gitops because I want this cluster to

189
00:12:52,648 --> 00:12:55,986
be Gitops ready and I do not want really to

190
00:12:56,008 --> 00:12:59,346
install argo CD. I do not want to create argo CD

191
00:12:59,378 --> 00:13:03,430
applications and projects. I do not want to configure git repository myself

192
00:13:03,500 --> 00:13:07,030
and so on and so forth. So I'm using yet another custom

193
00:13:07,100 --> 00:13:10,494
resource definition that was created by others. It's called Gitops.

194
00:13:10,562 --> 00:13:14,106
And I'm saying, hey, you know what? I want to use Argo CD. I could

195
00:13:14,128 --> 00:13:17,306
have other implementations of this like flux, but in

196
00:13:17,328 --> 00:13:20,986
this case argo CD and I

197
00:13:21,008 --> 00:13:24,702
wanted to run in a cluster that is identifiable through this

198
00:13:24,756 --> 00:13:28,734
secret and secret namespace, which happens to be the one created by

199
00:13:28,772 --> 00:13:32,174
this guy over here. And most important, this is what really

200
00:13:32,212 --> 00:13:35,278
matters. Hey, I do not want to go into details. What I

201
00:13:35,284 --> 00:13:38,834
do want to do is to tell you that those is the repository you should

202
00:13:38,872 --> 00:13:42,638
monitor and make that cluster the one defined above.

203
00:13:42,734 --> 00:13:46,514
GitHub's ready. Now all I have to do is push this manifest to

204
00:13:46,552 --> 00:13:49,942
git repository. Argo CD will pick it up, it will

205
00:13:49,996 --> 00:13:53,666
create whatever needs to be created in the management cluster, and then crossplane

206
00:13:53,698 --> 00:13:57,446
will do everything else. But I already did that in advance because it

207
00:13:57,468 --> 00:14:00,586
takes 20 minutes, 30 minutes or something like that. So let me show you the

208
00:14:00,608 --> 00:14:04,186
result of me pushing that to git. I did that in

209
00:14:04,208 --> 00:14:07,834
advance. And the result from operational perspective can be this

210
00:14:07,952 --> 00:14:11,326
get managed. And then we can see that

211
00:14:11,428 --> 00:14:14,862
behind that simple definition many things happened.

212
00:14:14,996 --> 00:14:18,442
And I got all those role policy attachments

213
00:14:18,506 --> 00:14:22,494
and roles and different objects installed in that cluster and

214
00:14:22,532 --> 00:14:25,938
different helm charts installed in that cluster, and a node group

215
00:14:26,024 --> 00:14:29,586
and a cluster and subnets and all

216
00:14:29,608 --> 00:14:33,106
those other things that are really necessary. But I

217
00:14:33,128 --> 00:14:36,674
do not want to bother with somebody else create

218
00:14:36,712 --> 00:14:40,390
a composition that combines all those resources and exposes them

219
00:14:40,460 --> 00:14:43,158
through that composition that I showed you a minute ago.

220
00:14:43,244 --> 00:14:46,706
Now that was from development perspective, from operational perspective,

221
00:14:46,738 --> 00:14:50,330
from SRE perspective, there are a couple of things that I had to create,

222
00:14:50,400 --> 00:14:54,390
somebody else had to create in advance. And the first one is definition

223
00:14:54,470 --> 00:14:57,786
saying, hey, I want to create something completely new,

224
00:14:57,888 --> 00:15:01,514
completely new definition. And that definition will be

225
00:15:01,552 --> 00:15:05,134
called composite resource definition. That does not matter.

226
00:15:05,172 --> 00:15:09,066
What matters is that the name from user perspective will be composite cluster.

227
00:15:09,098 --> 00:15:12,746
That's the one I used a second ago. And there is open API

228
00:15:12,778 --> 00:15:16,042
schema that creates a completely new definition.

229
00:15:16,186 --> 00:15:19,442
It's a typical open API schema, nothing really special.

230
00:15:19,576 --> 00:15:22,846
It says hey, you should have an id and you should have some parameters,

231
00:15:22,958 --> 00:15:26,914
and within those parameters you should have version and node size and minimum number

232
00:15:26,952 --> 00:15:30,406
of nodes. And that's what crossplane took to

233
00:15:30,428 --> 00:15:34,274
create that new custom resource definition that I used at the very beginning

234
00:15:34,322 --> 00:15:37,814
of this demo. And then I need to create a couple of implementations of that.

235
00:15:37,852 --> 00:15:41,306
Something I will show you eks, even though I have the

236
00:15:41,328 --> 00:15:44,586
implementation of that same resource definition for Google and for

237
00:15:44,608 --> 00:15:48,474
Azure and so on and so forth. But eks is like this.

238
00:15:48,672 --> 00:15:52,726
Here we go. This is a composition. So one composite resource definition

239
00:15:52,838 --> 00:15:56,334
can have many compositions. So we can pick and choose which

240
00:15:56,372 --> 00:15:59,642
variation we want. And in this case it is composition.

241
00:15:59,706 --> 00:16:02,970
That is called cluster AWS. That's the one I used.

242
00:16:03,140 --> 00:16:06,594
And here we have eks cluster defined, and we

243
00:16:06,632 --> 00:16:10,366
have a bunch of parameters here taken from those user

244
00:16:10,478 --> 00:16:14,114
and node group, and again with some parameters hard

245
00:16:14,152 --> 00:16:17,298
coded and some parameters provided

246
00:16:17,314 --> 00:16:20,998
by users. Like in this case I'm saying, hey, whenever somebody

247
00:16:21,164 --> 00:16:25,014
writes in their manifest parameters, node size, that should be

248
00:16:25,052 --> 00:16:28,882
translated to instance types, because that's what AWS

249
00:16:28,946 --> 00:16:32,602
understands. And whenever somebody says small, it should be t three small,

250
00:16:32,656 --> 00:16:35,994
and whenever somebody says medium, it should be this and large should be

251
00:16:36,032 --> 00:16:40,074
this and so on and so forth. I have here what

252
00:16:40,112 --> 00:16:43,546
else? Role and another role and

253
00:16:43,648 --> 00:16:46,686
role, attachments and so on and so forth. Those are all the things that

254
00:16:46,708 --> 00:16:49,886
you need to do. No matter which tool you're using if you want

255
00:16:49,908 --> 00:16:53,214
to be in control. But we can hide this from end

256
00:16:53,252 --> 00:16:56,594
users, from application DevOps, all those things.

257
00:16:56,712 --> 00:17:00,802
And it's not only about AWS over here. I'm also deploying some

258
00:17:00,856 --> 00:17:04,286
helm charts and kubernetes resources and so on and so forth,

259
00:17:04,398 --> 00:17:08,182
everything that is needed to run a cluster production ready,

260
00:17:08,236 --> 00:17:12,578
cluster in production. And I did those same thing with Githubs.

261
00:17:12,674 --> 00:17:16,326
The variations, whether it's flux, whether it's argo CD, what happens when

262
00:17:16,348 --> 00:17:19,482
argo CD is installed? How do we create this? How do we create

263
00:17:19,536 --> 00:17:23,674
that? And from the user perspective, all those things,

264
00:17:23,792 --> 00:17:28,038
from application developer perspective, all those things are digested

265
00:17:28,134 --> 00:17:31,466
into something that I showed you at the very beginning. I do not need to

266
00:17:31,488 --> 00:17:34,826
worry about those things. I know that this is what operators

267
00:17:34,858 --> 00:17:38,366
in my company, sres did. I can just consume those services

268
00:17:38,468 --> 00:17:42,110
by defining penetrate lines of yaml, like here.

269
00:17:42,180 --> 00:17:45,602
Now let's verify that the newly created cluster really

270
00:17:45,656 --> 00:17:49,406
works. And remember I pushed it to git and I'm

271
00:17:49,438 --> 00:17:52,722
not going to interact directly with my kubernetes cluster at all.

272
00:17:52,776 --> 00:17:56,494
It's all githubs only by pushing to git. But first let me double

273
00:17:56,542 --> 00:18:00,022
check that I can connect to the new cluster and I'm going to do that.

274
00:18:00,076 --> 00:18:03,314
You can ignore this is fetching the secrets stored in the management

275
00:18:03,362 --> 00:18:06,646
cluster. What does matter here is that I can confirm that

276
00:18:06,668 --> 00:18:10,490
the new cluster is up and running by saying hey,

277
00:18:10,560 --> 00:18:13,180
get all the nodes, for example.

278
00:18:13,710 --> 00:18:17,578
Let's go, come on. And were we go, this is

279
00:18:17,584 --> 00:18:21,446
the newly created cluster, right? With everything inside and among

280
00:18:21,478 --> 00:18:24,538
other things it already has argo CD up and running and I can prove it

281
00:18:24,544 --> 00:18:28,286
to you by opening those port. I should have created those domain for

282
00:18:28,308 --> 00:18:31,486
that, but I didn't, I was too lazy I guess. So here we are,

283
00:18:31,508 --> 00:18:35,054
this is Argo CD already baked into that cluster and

284
00:18:35,092 --> 00:18:38,610
I can prove it to you. Admin admin one, two, three, there we go,

285
00:18:38,680 --> 00:18:42,078
it's running. I'm not going to save the password and it's

286
00:18:42,094 --> 00:18:45,586
empty. Nothing there going on, right? Nothing here. And if

287
00:18:45,608 --> 00:18:49,494
I go here, nothing here, right? Because I did not yet push any application

288
00:18:49,612 --> 00:18:52,658
manifest to my git repository,

289
00:18:52,754 --> 00:18:56,854
but I will do that right away. So I want to have an application

290
00:18:56,972 --> 00:19:00,534
running in this cluster. And let's say that it should be a backend

291
00:19:00,582 --> 00:19:03,914
application with database. And let's say that that

292
00:19:03,952 --> 00:19:07,306
database should be AWs RDS database. How would they

293
00:19:07,328 --> 00:19:10,906
do that? And again, that would be very complicated because if I would

294
00:19:10,928 --> 00:19:14,714
like to do that myself, I would need to define stateful set or deployment.

295
00:19:14,762 --> 00:19:18,430
I'm not sure because hey, Kubernetes is complicated a service,

296
00:19:18,500 --> 00:19:22,586
ingress virtual service, this and that. And then I would need to define VPC

297
00:19:22,618 --> 00:19:26,254
and subnets and what's or not for RDS database and RDS database

298
00:19:26,302 --> 00:19:30,146
itself. Create some users in that database, choose this or that, it would

299
00:19:30,168 --> 00:19:34,094
be complete. But the operations of my company, the SRE

300
00:19:34,142 --> 00:19:38,066
or DevOps already created a service for that. Remember this is crossplane

301
00:19:38,098 --> 00:19:41,794
now still and I can show you that service. I can define

302
00:19:41,842 --> 00:19:45,462
a new application based on that service which will be

303
00:19:45,596 --> 00:19:48,898
this one, and says hey, instead of all that nonsense,

304
00:19:48,994 --> 00:19:51,202
I'm going to define something called app,

305
00:19:51,356 --> 00:19:55,530
operator, already created crossplane composition that is called app.

306
00:19:55,680 --> 00:19:59,306
And I'm going to just say that I want to be a backend with a

307
00:19:59,328 --> 00:20:02,410
database. This is the image that I care about.

308
00:20:02,480 --> 00:20:06,638
This is the those it should be exposed to and this is the port that

309
00:20:06,724 --> 00:20:10,618
the application is listening to. And I want also something called SQL.

310
00:20:10,714 --> 00:20:14,266
And that SQL should be in AWS and PostgreSQL

311
00:20:14,378 --> 00:20:18,194
and it could have a couple of parameters and it should write

312
00:20:18,232 --> 00:20:22,162
the connection string to this secret so that this application can

313
00:20:22,216 --> 00:20:25,890
connect to that database through that secret to authenticate there.

314
00:20:25,960 --> 00:20:29,794
Right again, I'm reducing hundreds and hundreds of lines of YAML

315
00:20:29,842 --> 00:20:33,906
or HCL or whatever you're using to a few lines, 30 lines

316
00:20:33,938 --> 00:20:37,974
of Yaml. So what should I do? Well, I should just copy

317
00:20:38,022 --> 00:20:41,354
this file from examples and then what was it?

318
00:20:41,392 --> 00:20:45,770
Backend app, backend backend

319
00:20:46,110 --> 00:20:49,978
AWS, PostgreSQL and no claim. That's the one

320
00:20:50,064 --> 00:20:53,694
I'm going to copy to the directory apps. That's the directory in

321
00:20:53,732 --> 00:20:57,054
repository that ArgoCd is already configured to watch.

322
00:20:57,172 --> 00:21:00,302
And I'm going to add that file and I'm going to

323
00:21:00,356 --> 00:21:03,934
commit with message that says something and

324
00:21:03,972 --> 00:21:07,666
I'm going to push that to git. And that's it. That's all I need to

325
00:21:07,688 --> 00:21:11,230
do to have my application up and running in the newly created cluster.

326
00:21:11,310 --> 00:21:15,194
And that application is very complex. There are many moving pieces, many resources,

327
00:21:15,262 --> 00:21:18,502
but I'm using a service provided by others.

328
00:21:18,636 --> 00:21:22,118
So let's see whether it's working by opening it in

329
00:21:22,204 --> 00:21:25,414
Argo CD. Here we are. Is it working?

330
00:21:25,612 --> 00:21:26,680
Let's see.

331
00:21:28,330 --> 00:21:31,802
There we go. It's coming right? It found two

332
00:21:31,856 --> 00:21:35,126
manifests, app and sql. And so far it's

333
00:21:35,158 --> 00:21:38,854
not doing anything with them. But look at it. This is now crossplane expanding

334
00:21:38,902 --> 00:21:42,086
those compositions into some objects and provider

335
00:21:42,118 --> 00:21:45,898
configs and DB subnet groups and RDS instance and Internet

336
00:21:45,914 --> 00:21:49,706
gateway and so on and so forth. All those things could need to be created

337
00:21:49,738 --> 00:21:53,406
by me, but I don't have to do that because somebody created a service that

338
00:21:53,428 --> 00:21:57,394
I can consume and that service is called. One service is called sql, another service

339
00:21:57,432 --> 00:22:00,850
is called app. And I can just define what

340
00:22:00,920 --> 00:22:04,414
I want. Those let the details and the complexity

341
00:22:04,462 --> 00:22:08,374
into the hands of whoever is creating those crossplane compositions and

342
00:22:08,412 --> 00:22:11,766
just push simple YAML into a

343
00:22:11,788 --> 00:22:15,506
git repository and let Argo CD get it to the management

344
00:22:15,538 --> 00:22:18,886
cluster and let Crossplane do the rest. Actually, it's not

345
00:22:18,908 --> 00:22:22,498
going to the management cluster. It's going directly with Argo CD from git

346
00:22:22,594 --> 00:22:26,346
to the cluster that I created before I started those demo. And I

347
00:22:26,368 --> 00:22:29,306
showed you already how. And if you don't believe me that all those things are

348
00:22:29,328 --> 00:22:32,426
happening, I can prove it to you. I can go to that newly created

349
00:22:32,458 --> 00:22:36,094
cluster, say, hey, this is the kubeconfig that

350
00:22:36,132 --> 00:22:39,674
I fetched before, and get all the apps

351
00:22:39,802 --> 00:22:43,550
and sqls in that cluster. And there we go.

352
00:22:43,620 --> 00:22:46,514
You see, they're not yet ready. Application is ready,

353
00:22:46,632 --> 00:22:49,762
but database is not ready because it takes like ten minutes,

354
00:22:49,816 --> 00:22:53,266
I think for AWS to create airds instance. And I can

355
00:22:53,288 --> 00:22:56,626
also do something similar with get managed all the

356
00:22:56,648 --> 00:23:00,274
resources managed by crossplane. I would not do that as a developer

357
00:23:00,322 --> 00:23:03,974
because for me this is what really matters. But as operator or

358
00:23:04,012 --> 00:23:07,762
SRE, I can see all the details. What did Crossplane create

359
00:23:07,836 --> 00:23:11,162
from those two? And this is what it did.

360
00:23:11,296 --> 00:23:14,810
Those are all the resources that it created for us.

361
00:23:14,960 --> 00:23:18,890
Here we are. All those two were expanded into

362
00:23:19,040 --> 00:23:22,974
those RDs instance in AWS, DB subnet group.

363
00:23:23,092 --> 00:23:26,394
Some objects creating in Kubernetes cluster like deployment,

364
00:23:26,442 --> 00:23:29,498
egress service, Internet gateway,

365
00:23:29,674 --> 00:23:32,598
Kubernetes, VPC, security groups, route tables.

366
00:23:32,634 --> 00:23:36,926
Right. All the complete is now moved to the cluster. It is grouped

367
00:23:36,958 --> 00:23:40,142
into compositions so operations, accessories,

368
00:23:40,206 --> 00:23:43,394
DevOps care about creating those definitions and

369
00:23:43,432 --> 00:23:46,706
controllers behind it. It's relatively easy, as you saw,

370
00:23:46,808 --> 00:23:50,130
and then exposing them through a simple interface

371
00:23:50,210 --> 00:23:53,974
to everybody else so that everybody can consume without dealing with such

372
00:23:54,012 --> 00:23:57,922
a complexity. Thank you so much for watching. My name is Victor.

373
00:23:58,066 --> 00:24:01,574
Let me show a couple of slides. I didn't show many slides. I work for

374
00:24:01,612 --> 00:24:04,534
outbound and what you saw in this demo was very brief,

375
00:24:04,582 --> 00:24:08,234
but probably gave you a glimpse of what you can do with Crossplane to create

376
00:24:08,272 --> 00:24:11,342
your own platform for your own people in your own company.

377
00:24:11,476 --> 00:24:14,942
And that is called Crossplane. And the company

378
00:24:14,996 --> 00:24:19,402
behind Crossplane, actually the company that founded Crossplane is upbound.

379
00:24:19,466 --> 00:24:23,418
I work there, but Crossplane is open source. It was donated

380
00:24:23,514 --> 00:24:27,214
to cloud Native Computing foundation, CNCF, so you can use

381
00:24:27,252 --> 00:24:30,846
it freely, at least in this concept. You might want to

382
00:24:30,868 --> 00:24:34,122
check what we are doing at upbound, but Crossplane is open source.

383
00:24:34,186 --> 00:24:37,734
You might also want to listen to the podcast Devil's paradox. You might

384
00:24:37,772 --> 00:24:40,498
want to come to my YouTube channel, DevOps Toolkit.

385
00:24:40,594 --> 00:24:44,102
And that's about it. Thank you so much for watching,

386
00:24:44,156 --> 00:24:47,670
for listening. See you next time in the next conference or

387
00:24:47,740 --> 00:24:50,310
in my YouTube channel. Come there. Thank you so much.

