1
00:01:54,170 --> 00:01:57,470
Hi everyone, I want to first thank the team

2
00:01:57,540 --> 00:02:01,342
from Conf 42 opportunity to speak and share our

3
00:02:01,396 --> 00:02:04,882
ideas with everyone. My name is Lionel Longcap.

4
00:02:04,986 --> 00:02:09,218
I work as an independent DevOps and cloud engineer

5
00:02:09,394 --> 00:02:13,142
and today I want to discuss with you how

6
00:02:13,196 --> 00:02:16,626
to build universal CI CD pipelines.

7
00:02:16,818 --> 00:02:20,298
Let's see our agenda. We will first start

8
00:02:20,384 --> 00:02:24,380
by giving you a little bit of history, how I came up with the idea,

9
00:02:24,990 --> 00:02:28,940
and then we will focus on the definition of some terms

10
00:02:29,390 --> 00:02:33,082
to follow up with what are the core principle of

11
00:02:33,136 --> 00:02:36,846
universal CICD pipelines. Then I

12
00:02:36,868 --> 00:02:40,558
will just give you what I

13
00:02:40,644 --> 00:02:44,610
just tell you what I learned throughout the process and

14
00:02:44,760 --> 00:02:48,274
we will just taking from what

15
00:02:48,392 --> 00:02:51,906
we will share together how you can go further with

16
00:02:51,928 --> 00:02:54,994
the same ideas a little bit about the

17
00:02:55,032 --> 00:02:58,994
history behind all of this. As a DevOps engineer, we are quite oftentimes

18
00:02:59,042 --> 00:03:02,390
tasked to create CI CD pipelines. Things to

19
00:03:02,460 --> 00:03:06,194
streamline the software delivery and to continuously

20
00:03:06,242 --> 00:03:10,810
improve the quality and the security of our software. The thing I realized

21
00:03:11,550 --> 00:03:15,014
throughout my experience after creating a lot of CI CD

22
00:03:15,062 --> 00:03:18,780
pipelines is that things

23
00:03:19,230 --> 00:03:22,574
are quite similar in the manifest we

24
00:03:22,612 --> 00:03:26,366
wrote and someday something started to

25
00:03:26,388 --> 00:03:30,254
shape in my mind. Let's see together here you

26
00:03:30,292 --> 00:03:33,986
have two manifests coming from two tools to

27
00:03:34,008 --> 00:03:37,374
do CI CD. The first one is a Jenkins

28
00:03:37,422 --> 00:03:41,326
file and the second one is the manifest file.

29
00:03:41,358 --> 00:03:44,030
The workflow manifest file from GitHub actions.

30
00:03:44,190 --> 00:03:48,150
I give you like one or 2 seconds

31
00:03:48,650 --> 00:03:52,054
to just see if something come up.

32
00:03:52,092 --> 00:03:54,310
When you see those two manifest,

33
00:03:56,570 --> 00:04:00,406
I hope you realize that when you remove the noise,

34
00:04:00,598 --> 00:04:04,538
we are only left with name of stages and

35
00:04:04,624 --> 00:04:08,970
actions and those two manifest files

36
00:04:09,390 --> 00:04:12,894
look quite the same. Let's take another example

37
00:04:13,012 --> 00:04:16,750
with a manifest file from GitLab CI same thing,

38
00:04:16,820 --> 00:04:21,246
stages and actions. So we could agree that

39
00:04:21,348 --> 00:04:24,574
if you have a way or a DSL to express

40
00:04:24,702 --> 00:04:28,354
only the intent, maybe a tool could be

41
00:04:28,392 --> 00:04:32,274
able to generate the noise and thus all

42
00:04:32,312 --> 00:04:36,786
those manifest files. I want to give you a disclaimer.

43
00:04:36,978 --> 00:04:40,962
Those ideas are free to use everywhere,

44
00:04:41,026 --> 00:04:44,600
so don't hesitate to copy and

45
00:04:45,130 --> 00:04:48,840
steal from those ideas because I really think that

46
00:04:50,570 --> 00:04:54,278
they will provide value. Let's see some definitions.

47
00:04:54,454 --> 00:04:58,122
I know everyone knows the definition of

48
00:04:58,176 --> 00:05:01,610
CICD. CICD stands for continuously

49
00:05:01,690 --> 00:05:05,760
integration and continuous delivery. Sometimes we

50
00:05:06,130 --> 00:05:09,674
use continuous deployment to include

51
00:05:09,722 --> 00:05:13,102
in CI CD, but those practices

52
00:05:13,166 --> 00:05:17,122
are very separated. But throughout the talk when I said

53
00:05:17,176 --> 00:05:20,798
CICD, feel free to think about the tree.

54
00:05:20,894 --> 00:05:24,050
So continuous integration, continuous delivery and

55
00:05:24,120 --> 00:05:28,126
continuous deployment let's see the definition of CI CD pipeline.

56
00:05:28,238 --> 00:05:32,210
A CI CD pipelines is a workflow first triggered

57
00:05:32,370 --> 00:05:36,594
by any means to automate every steps or activities involved

58
00:05:36,722 --> 00:05:40,602
in the delivery of a fit for purpose, that is

59
00:05:40,656 --> 00:05:44,646
functional requirements and fit for use nonfunctional requirements

60
00:05:44,678 --> 00:05:48,186
software. Sometimes CI CD pipelines look

61
00:05:48,208 --> 00:05:51,718
like this. You have a trigger. The trigger makes

62
00:05:51,744 --> 00:05:56,954
sure it's done. You come up with the source stage

63
00:05:57,082 --> 00:06:00,720
and then the build stage. We do some tasked here.

64
00:06:01,570 --> 00:06:05,186
Going forward to the test publish, we face the

65
00:06:05,208 --> 00:06:08,306
quality gate sometimes that

66
00:06:08,488 --> 00:06:12,542
just give us some guardrails

67
00:06:12,686 --> 00:06:16,630
before going live. So that's

68
00:06:18,170 --> 00:06:21,734
the simple look of CI CD pipelines. We are

69
00:06:21,772 --> 00:06:25,442
still on the definitions. Let's define universal

70
00:06:25,586 --> 00:06:29,558
in the dictionary. Universal mean applicable everywhere

71
00:06:29,734 --> 00:06:34,250
or in all cases general or

72
00:06:34,400 --> 00:06:37,420
used or understood by all.

73
00:06:37,790 --> 00:06:42,474
That's the two main characteristic

74
00:06:42,602 --> 00:06:44,430
of the word universal.

75
00:06:45,650 --> 00:06:49,530
This will help us define some core principle

76
00:06:49,690 --> 00:06:53,614
universal, as I said, used and understood

77
00:06:53,662 --> 00:06:57,202
by all and applicable everywhere or in

78
00:06:57,256 --> 00:07:00,642
all cases. I really

79
00:07:00,696 --> 00:07:05,402
like to change the first one by build Anubiquistos

80
00:07:05,486 --> 00:07:09,046
CI CD pipelines. If we get in the

81
00:07:09,068 --> 00:07:12,486
context of CI CD pipelines, and for the

82
00:07:12,508 --> 00:07:16,310
last one applicable everywhere, I will say

83
00:07:16,460 --> 00:07:20,274
platform agnostic. So a universal

84
00:07:20,402 --> 00:07:24,250
CI CD pipelines will be a pipeline

85
00:07:24,830 --> 00:07:29,558
that is built around a ubiquitous

86
00:07:29,654 --> 00:07:33,214
language that is semantically correct

87
00:07:33,412 --> 00:07:36,282
and that is platform agnostic.

88
00:07:36,426 --> 00:07:40,174
So we already seen this

89
00:07:40,212 --> 00:07:44,020
pipeline. So let's build one CI CD pipeline together,

90
00:07:45,350 --> 00:07:49,662
and not only a simple CI CD pipeline, but an ubiquitous

91
00:07:49,726 --> 00:07:52,930
CI CD pipelines. As I said,

92
00:07:53,000 --> 00:07:55,830
we start from the trigger,

93
00:07:57,290 --> 00:08:01,314
then after the trigger we went to the source stage.

94
00:08:01,442 --> 00:08:04,914
And if you zoom a little bit on the source stage,

95
00:08:05,042 --> 00:08:08,682
we realize that in the source stage we have many

96
00:08:08,736 --> 00:08:12,470
tasks to execute. We have sensitized

97
00:08:12,550 --> 00:08:15,866
the code, linting the code, analyzing the code,

98
00:08:16,048 --> 00:08:19,274
linting the docs. You have many tasked here.

99
00:08:19,472 --> 00:08:23,198
And after that we went to a stage that

100
00:08:23,284 --> 00:08:26,814
I like to call create. So in the create stage is

101
00:08:26,852 --> 00:08:29,562
where we compile the code, compile the docs,

102
00:08:29,706 --> 00:08:33,166
run some unit test, and then we went to

103
00:08:33,188 --> 00:08:36,578
the verify stage. In the verify stage, as you

104
00:08:36,584 --> 00:08:40,034
said, I tried to be expressive in

105
00:08:40,072 --> 00:08:43,890
the intent of the task here.

106
00:08:44,040 --> 00:08:48,530
So after verifying everything, we went directly

107
00:08:48,610 --> 00:08:51,634
to the review stage.

108
00:08:51,762 --> 00:08:55,222
And the review stage is where we take what we

109
00:08:55,276 --> 00:08:58,666
built and we put it in the

110
00:08:58,688 --> 00:09:01,674
QA environment. After that,

111
00:09:01,712 --> 00:09:05,558
and only after that when we realized that the package

112
00:09:05,654 --> 00:09:09,354
is right, we package all things up and we

113
00:09:09,392 --> 00:09:12,590
deliver it to an artifact repository.

114
00:09:13,410 --> 00:09:18,522
And I try to, as I said, be expressful

115
00:09:18,586 --> 00:09:21,982
or use good

116
00:09:22,036 --> 00:09:25,394
words and good verb to describe the

117
00:09:25,432 --> 00:09:29,300
intent here those to summarize that

118
00:09:30,630 --> 00:09:34,286
that's how ubiquitous CI

119
00:09:34,318 --> 00:09:37,830
CT pipelines will look quite

120
00:09:37,900 --> 00:09:41,670
expressive. And everyone that even

121
00:09:41,740 --> 00:09:45,160
know how things work could understand

122
00:09:46,010 --> 00:09:49,570
the pipelines without going into the implementation

123
00:09:49,650 --> 00:09:53,199
details. So after the

124
00:09:53,699 --> 00:09:57,718
delivery is where continuous integration and continuous delivery

125
00:09:57,814 --> 00:10:01,866
stop. And we have like an approval,

126
00:10:02,058 --> 00:10:05,998
manual approval that will forward us

127
00:10:06,084 --> 00:10:10,398
to another stage which is putting

128
00:10:10,484 --> 00:10:14,162
everything live and we have the same

129
00:10:14,216 --> 00:10:17,758
task at the end. So that's

130
00:10:17,774 --> 00:10:21,554
the whole idea. And continuous deployment only means that

131
00:10:21,592 --> 00:10:25,570
we remove the manual approval. So that's the

132
00:10:25,720 --> 00:10:28,930
UB crystals CI CD pipelines.

133
00:10:29,290 --> 00:10:32,600
To implement something like this, we need

134
00:10:32,970 --> 00:10:36,274
to have task managers,

135
00:10:36,322 --> 00:10:40,210
because task managers, as I showed you in those manifest file,

136
00:10:40,290 --> 00:10:43,706
task managers help just hide the

137
00:10:43,728 --> 00:10:47,210
implementation detail and let us express the intent.

138
00:10:48,030 --> 00:10:52,138
And also it's a good practice to use project generators

139
00:10:52,234 --> 00:10:55,838
because project generators help also to spread the

140
00:10:55,844 --> 00:11:00,314
good practice and make sure that everyone got the same templates

141
00:11:00,442 --> 00:11:05,258
and start from the same basis

142
00:11:05,354 --> 00:11:08,846
from the told requirements. My own preference as a tax manager,

143
00:11:08,878 --> 00:11:11,998
I use make and from project generators, I use progen.

144
00:11:12,094 --> 00:11:16,550
Progen is the project behind the AWS CDK

145
00:11:16,890 --> 00:11:20,102
and it differentiates itself from other project

146
00:11:20,156 --> 00:11:23,702
generators because other project generators got

147
00:11:23,756 --> 00:11:27,074
the same ideas. I take my template and I generate

148
00:11:27,122 --> 00:11:30,746
a project from the template. This works at

149
00:11:30,768 --> 00:11:33,786
the bootstrapping phase at the beginning of the project.

150
00:11:33,968 --> 00:11:38,058
But if the template evolve, you can't really

151
00:11:38,224 --> 00:11:43,898
get those updates in the project that derived

152
00:11:43,994 --> 00:11:48,094
from the template. So where

153
00:11:48,212 --> 00:11:51,818
project shines is that it keeps your template

154
00:11:51,994 --> 00:11:55,454
in sync with all projects that were generated

155
00:11:55,502 --> 00:11:58,946
from that template. Take a look at this

156
00:11:58,968 --> 00:12:03,410
project. It's very great then to

157
00:12:03,480 --> 00:12:06,706
build those ubiquitous CI CD

158
00:12:06,738 --> 00:12:10,662
pipelines, you have to shape your project and being

159
00:12:10,796 --> 00:12:14,006
a little bit disciplined about how you

160
00:12:14,028 --> 00:12:17,366
use your task managers. This example, I will show

161
00:12:17,388 --> 00:12:20,970
you how I use make to implement

162
00:12:21,790 --> 00:12:25,514
those, to make my task more

163
00:12:25,552 --> 00:12:28,300
expressive. So the action part,

164
00:12:28,990 --> 00:12:32,714
and there I have a make file and the make file

165
00:12:32,762 --> 00:12:36,702
is quite empty. The only thing is there is

166
00:12:36,756 --> 00:12:40,560
that I include all other make

167
00:12:41,330 --> 00:12:44,270
that present in the task folder.

168
00:12:44,430 --> 00:12:49,310
So I split every actions, every steps

169
00:12:49,470 --> 00:12:53,682
in those make files. And those make files are only

170
00:12:53,816 --> 00:12:57,574
generic because what the only thing they are doing is calling

171
00:12:57,692 --> 00:13:02,470
the script that is on the script folder.

172
00:13:03,130 --> 00:13:07,218
That's a little snippet of how to do it. And so

173
00:13:07,404 --> 00:13:12,330
I use this shape to produce my manifest.

174
00:13:12,670 --> 00:13:17,526
Let's take a look of a manifest from GitHub actions,

175
00:13:17,638 --> 00:13:19,450
because I really like GitHub actions.

176
00:13:20,450 --> 00:13:23,770
So you see, I just put my task

177
00:13:23,850 --> 00:13:27,054
and they represent the intent of what

178
00:13:27,092 --> 00:13:30,750
I need to do. And those

179
00:13:30,820 --> 00:13:34,338
instruction will forward everything to

180
00:13:34,424 --> 00:13:38,110
the script that could be written in any language.

181
00:13:38,270 --> 00:13:41,810
So you see that we have something that

182
00:13:41,880 --> 00:13:45,206
is quite expressive and everyone coming

183
00:13:45,228 --> 00:13:48,434
to the project without knowing the implementation details

184
00:13:48,482 --> 00:13:52,246
could understand the goal of our workflow. And that's the

185
00:13:52,268 --> 00:13:56,370
end goal of building very anubiquitous CI CD pipelines.

186
00:13:56,530 --> 00:14:00,706
The second principle of a universal

187
00:14:00,738 --> 00:14:04,790
CI CD pipelines is that it should be platform agnostic.

188
00:14:04,950 --> 00:14:08,854
So when you reflect on that, being platform agnostic

189
00:14:08,902 --> 00:14:12,638
will mean that we will have a manifest file that

190
00:14:12,804 --> 00:14:16,560
will help us define our workflow. And also

191
00:14:16,930 --> 00:14:21,390
you have to have something that will be well integrated into

192
00:14:21,540 --> 00:14:25,060
all the CI CD platform on the market and

193
00:14:25,430 --> 00:14:27,460
that will work on every platform.

194
00:14:28,550 --> 00:14:32,466
And what I realized that I found a real project that

195
00:14:32,488 --> 00:14:36,210
could do this, and it's dagger. Dagger is

196
00:14:36,280 --> 00:14:40,382
mainly a programmable CI CD engine. By programmable

197
00:14:40,446 --> 00:14:44,310
CI CD engine I mean that you could create

198
00:14:44,460 --> 00:14:47,598
not the entire manifest file,

199
00:14:47,634 --> 00:14:50,682
but the main part could be

200
00:14:50,736 --> 00:14:54,874
written using either Q go,

201
00:14:55,072 --> 00:14:59,130
Python Node js, and maybe a lot of other languages,

202
00:15:00,190 --> 00:15:04,082
because they created an SDK pal language

203
00:15:04,246 --> 00:15:08,240
to communicate directly with the dagger engine.

204
00:15:09,490 --> 00:15:13,194
And under the hood it works with Docker.

205
00:15:13,322 --> 00:15:16,994
So it ensure that your

206
00:15:17,112 --> 00:15:21,282
pipeline or the things you express using those

207
00:15:21,336 --> 00:15:24,734
SDK is also portable from CI

208
00:15:24,782 --> 00:15:28,520
to CI. Let's see, on an example

209
00:15:30,970 --> 00:15:34,086
you can scan the QR code to go to the project.

210
00:15:34,188 --> 00:15:38,170
You will see in this project something that looks

211
00:15:38,240 --> 00:15:41,770
similar to what I showed you here. I didn't implement any

212
00:15:41,840 --> 00:15:45,466
task managers. I just wanted to show you how I

213
00:15:45,488 --> 00:15:49,698
use dagger to program my CI CD

214
00:15:49,894 --> 00:15:53,534
workflow. So in the tasked you

215
00:15:53,572 --> 00:15:56,862
have there you have one

216
00:15:56,916 --> 00:16:00,270
task which is the script.

217
00:16:00,690 --> 00:16:04,430
Oh, this is my pipeline being programmed

218
00:16:04,510 --> 00:16:08,418
in Python. I won't show you the implementation because

219
00:16:08,584 --> 00:16:11,140
it's not important. For now,

220
00:16:12,790 --> 00:16:16,118
let me give you a walkthrough of

221
00:16:16,124 --> 00:16:20,134
the repo. So in the repository you

222
00:16:20,172 --> 00:16:23,702
have the GitHub, and in GitHub you

223
00:16:23,756 --> 00:16:26,770
have two workflows.

224
00:16:26,930 --> 00:16:30,422
We will see the CI CD workflow that is implemented

225
00:16:30,486 --> 00:16:34,454
without using dagger, and the CI CD workflow

226
00:16:34,502 --> 00:16:38,090
with dagger. To see how things are

227
00:16:38,160 --> 00:16:41,280
made and what the benefits we got,

228
00:16:43,010 --> 00:16:46,640
let me show you in real code

229
00:16:47,250 --> 00:16:50,654
how it's being implemented. Here you

230
00:16:50,692 --> 00:16:54,366
have a gif of those two workflow

231
00:16:54,398 --> 00:16:57,922
files. The one on the left is the

232
00:16:58,056 --> 00:17:02,002
normal workflow and the one on the right is the one using

233
00:17:02,136 --> 00:17:05,250
the dagger SDK or using dagger.

234
00:17:05,610 --> 00:17:08,866
So as I said, you see the differences

235
00:17:09,058 --> 00:17:12,754
between the two. We use an internal

236
00:17:12,802 --> 00:17:16,918
action called prepare, and its goal is to prepare the

237
00:17:17,004 --> 00:17:21,222
CI environment for both workflows.

238
00:17:21,366 --> 00:17:24,730
Let's see the content of this action.

239
00:17:25,070 --> 00:17:27,370
It's a composite action,

240
00:17:28,830 --> 00:17:32,042
and its role is to

241
00:17:32,176 --> 00:17:35,710
just install node JS.

242
00:17:36,210 --> 00:17:39,626
If we skip the dagger SDK,

243
00:17:39,738 --> 00:17:44,534
and if you want to use the dagger SDK, it install dagger

244
00:17:44,602 --> 00:17:49,060
IO and Python. That's it.

245
00:17:50,870 --> 00:17:54,546
And we also make sure that the version of the

246
00:17:54,568 --> 00:17:58,694
Python we are using in development is

247
00:17:58,732 --> 00:18:01,350
the same that is used in the CI.

248
00:18:02,410 --> 00:18:06,214
Let's go back to the diff you

249
00:18:06,252 --> 00:18:10,486
see there. That on the right is the workflow

250
00:18:10,518 --> 00:18:14,646
using dagger. The only thing that the workflow using dagger

251
00:18:14,678 --> 00:18:18,380
is doing is calling the Python script here.

252
00:18:18,830 --> 00:18:21,470
Let's see the content of things script.

253
00:18:22,210 --> 00:18:25,870
Here we import the dagger SDK

254
00:18:26,930 --> 00:18:31,226
and we're importing also any IU. Any IU

255
00:18:31,258 --> 00:18:35,266
will help run our pipeline. And the pipeline is just

256
00:18:35,448 --> 00:18:38,562
an async function. And inside that

257
00:18:38,616 --> 00:18:42,002
function you declare a client like

258
00:18:42,056 --> 00:18:46,710
this and you could build and

259
00:18:46,780 --> 00:18:50,214
customize a container that will be the

260
00:18:50,252 --> 00:18:53,282
base container for your action.

261
00:18:53,426 --> 00:18:57,026
So here I'm using the node 18

262
00:18:57,218 --> 00:19:00,890
base image and I make sure that

263
00:19:00,960 --> 00:19:04,358
all my script run on that image here. And note

264
00:19:04,374 --> 00:19:08,086
that you could also do like multistage pipelines

265
00:19:08,198 --> 00:19:12,650
by also creating another container variables

266
00:19:12,810 --> 00:19:15,600
with the client container function.

267
00:19:16,850 --> 00:19:20,494
So that's all the things

268
00:19:20,532 --> 00:19:23,794
you can do with dagger. As you

269
00:19:23,832 --> 00:19:27,746
see, dagger is very powerful and you

270
00:19:27,768 --> 00:19:31,566
could have everything defined in pipeline script

271
00:19:31,758 --> 00:19:35,126
and the fact that there

272
00:19:35,148 --> 00:19:38,774
is a code. You can also imagine some use

273
00:19:38,812 --> 00:19:42,520
case where you can test your pipeline too.

274
00:19:43,610 --> 00:19:47,382
Now let's try those workflows on GitHub to see

275
00:19:47,436 --> 00:19:50,982
if it works. And let's hope that the demo

276
00:19:51,036 --> 00:19:53,260
gods are on our side.

277
00:19:55,310 --> 00:19:59,062
So if I go with actions normally,

278
00:19:59,126 --> 00:20:03,310
I would first execute the first action without dagger.

279
00:20:04,130 --> 00:20:06,350
So let me run the workflow,

280
00:20:07,970 --> 00:20:09,840
say run here.

281
00:20:15,790 --> 00:20:20,186
So the workflow will start and

282
00:20:20,368 --> 00:20:23,846
it will execute all the steps I showed

283
00:20:23,878 --> 00:20:27,078
you before. So for

284
00:20:27,184 --> 00:20:31,054
one of those steps, if I go directly to the

285
00:20:31,092 --> 00:20:32,110
workflow,

286
00:20:46,590 --> 00:20:50,582
you will see that it's very fast and the workflow was done.

287
00:20:50,736 --> 00:20:53,934
And at the end of the workflow normally what

288
00:20:53,972 --> 00:20:57,662
we got, let me go on

289
00:20:57,716 --> 00:21:01,742
here and we will see the package that were

290
00:21:01,796 --> 00:21:04,878
created after running this workflow.

291
00:21:05,054 --> 00:21:07,570
So if I go to packages,

292
00:21:11,350 --> 00:21:15,006
you will see that I have a new version

293
00:21:15,118 --> 00:21:19,250
published. So one 10 Rc

294
00:21:19,410 --> 00:21:23,174
eleven that were published 1 minute ago.

295
00:21:23,372 --> 00:21:27,366
That's a simple workflow. So let's use dagger then to

296
00:21:27,388 --> 00:21:31,098
trigger another workflow. If it works, we will have

297
00:21:31,184 --> 00:21:34,922
normally a new version that will be like

298
00:21:34,976 --> 00:21:39,260
one 10 Rc twelve.

299
00:21:40,610 --> 00:21:44,000
And there we are using dagger to do this.

300
00:21:45,570 --> 00:21:49,290
That's what I was saying, dagger very things

301
00:21:49,370 --> 00:21:53,462
there, because you can also create like multiple

302
00:21:53,546 --> 00:21:57,330
containers as code and just forward

303
00:21:57,400 --> 00:22:00,580
the output from one container to another one.

304
00:22:01,190 --> 00:22:05,266
And everything in the code, the workflow succeeded. And you

305
00:22:05,288 --> 00:22:08,838
see the workflow is simple. If you go

306
00:22:08,924 --> 00:22:13,746
to the packages normally,

307
00:22:13,938 --> 00:22:17,880
you will see a new version. Let me just refresh the page

308
00:22:18,430 --> 00:22:21,930
and voila, you have the twelve

309
00:22:22,000 --> 00:22:27,210
version. So that was Dagger

310
00:22:27,710 --> 00:22:31,790
and GitHub actions in the nutshell using the Python SDK.

311
00:22:32,210 --> 00:22:35,120
Okay, I hope you like the demo. Okay,

312
00:22:36,690 --> 00:22:40,942
what I've learned throughout the research on

313
00:22:41,076 --> 00:22:45,106
universal CI CD pipelines is that it's important to

314
00:22:45,128 --> 00:22:48,514
focus on semantics and less on technology and

315
00:22:48,552 --> 00:22:52,482
told, and also that onboarding is also

316
00:22:52,536 --> 00:22:56,850
important. So make sure that if you choose to write your pipeline in dagger

317
00:22:57,010 --> 00:23:00,822
to use the right abstraction to

318
00:23:00,876 --> 00:23:04,534
not confuse newcomers. And if you choose the

319
00:23:04,652 --> 00:23:08,082
tax manager route, make sure also,

320
00:23:08,236 --> 00:23:12,074
as we discussed at the beginning, to use

321
00:23:12,272 --> 00:23:16,394
good name for your actions so that they will just

322
00:23:16,512 --> 00:23:20,410
get the quick grasp of

323
00:23:20,560 --> 00:23:24,846
what your workflow is doing. The dagger team provides some sdks and

324
00:23:24,868 --> 00:23:28,560
I think that's great because you can come with the language you know

325
00:23:28,930 --> 00:23:31,950
and just start writing pipelines.

326
00:23:32,370 --> 00:23:36,286
I know today we have only go Q node

327
00:23:36,318 --> 00:23:40,222
js and Python, but the project is evolving

328
00:23:40,366 --> 00:23:44,020
so I think we will have many languages to come.

329
00:23:45,270 --> 00:23:48,998
Dagger could also replace in some part

330
00:23:49,084 --> 00:23:53,266
tasked managers, because everything is defined

331
00:23:53,298 --> 00:23:57,094
in your script as code and the only thing you have to do is call

332
00:23:57,132 --> 00:24:00,650
Python and the name of your script. So to keep

333
00:24:00,720 --> 00:24:04,650
your pipeline semantically correct, you could just choose

334
00:24:04,800 --> 00:24:07,260
to name your script the right way.

335
00:24:09,950 --> 00:24:14,014
Then what next? Today I

336
00:24:14,052 --> 00:24:17,598
try to follow the same process and my

337
00:24:17,684 --> 00:24:21,166
two exploration at the moment are

338
00:24:21,268 --> 00:24:25,006
universal project specification. So trying to define

339
00:24:25,038 --> 00:24:28,194
a universal project folder structure that could

340
00:24:28,232 --> 00:24:31,890
work with every framework, every language,

341
00:24:32,630 --> 00:24:36,802
any tool, and a universal

342
00:24:36,866 --> 00:24:41,094
code documentation specification that could help you create

343
00:24:41,212 --> 00:24:45,302
documentation and from that documentation create more

344
00:24:45,356 --> 00:24:48,940
generators and that documentation could be

345
00:24:49,310 --> 00:24:52,730
embedded in any language. Let's imagine that

346
00:24:52,800 --> 00:24:56,678
we have like something similar to Javadoc

347
00:24:56,854 --> 00:25:00,442
or GSDoc, but that will work

348
00:25:00,496 --> 00:25:03,706
with any language. So I

349
00:25:03,728 --> 00:25:07,722
hope you like the talk and feel free to connect

350
00:25:07,776 --> 00:25:10,730
with me with my provided handle.

351
00:25:11,070 --> 00:25:14,226
Thanks a lot for your attention and I hope that you

352
00:25:14,248 --> 00:25:16,286
will enjoy the conference.

