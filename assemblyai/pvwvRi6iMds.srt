1
00:00:25,650 --> 00:00:29,170
Welcome everybody to the mega Flask machine.

2
00:00:29,330 --> 00:00:31,974
Welcome to Conf 42 Python site.

3
00:00:32,092 --> 00:00:35,762
I come from the Python user group of Mauritius.

4
00:00:35,906 --> 00:00:39,922
Mauritius which is a small island in the Indian Ocean.

5
00:00:40,066 --> 00:00:44,070
About me I'm a Python developer for my own account

6
00:00:44,220 --> 00:00:47,862
and also a flask on organised member and a

7
00:00:47,916 --> 00:00:51,438
flask community work group member. Flask one is a yearly event

8
00:00:51,524 --> 00:00:54,926
which hosts some nice talk.

9
00:00:55,028 --> 00:00:58,734
We've had a first edition last year and we hope to

10
00:00:58,852 --> 00:01:02,234
have another edition this year. Hands I'm also a shopyo

11
00:01:02,282 --> 00:01:06,514
maintainer. Shopyo which is a web framework. It's actually

12
00:01:06,632 --> 00:01:10,722
a mega machine for Flask. You can see we just

13
00:01:10,776 --> 00:01:15,642
moved from a personal repo to an organization

14
00:01:15,806 --> 00:01:19,554
repo. Along with the documentations. We now host

15
00:01:19,602 --> 00:01:23,154
it on reader docs. And this talk is about version

16
00:01:23,282 --> 00:01:27,634
three nine four. The story begins with web

17
00:01:27,692 --> 00:01:31,606
frameworks. Currently, if you analyze the stack overflow

18
00:01:31,638 --> 00:01:35,702
survey, if you just see the stats for the most popular

19
00:01:35,766 --> 00:01:39,302
web frameworks in the world, and among them Python

20
00:01:39,366 --> 00:01:42,922
ones, you will see that Flask and Django unsurprisingly

21
00:01:43,066 --> 00:01:47,054
come up was the top most popular web

22
00:01:47,092 --> 00:01:50,798
frameworks. And we might analyze like a bit

23
00:01:50,964 --> 00:01:54,718
what drives people to choose web frameworks.

24
00:01:54,814 --> 00:01:58,830
For example, we have Django. So why do people use Django?

25
00:01:58,910 --> 00:02:03,102
What factors do they consider before using Django?

26
00:02:03,246 --> 00:02:06,774
The first one is the ability to get started quick.

27
00:02:06,892 --> 00:02:10,822
It was developed to be used under pressure and people find

28
00:02:10,876 --> 00:02:14,742
it really awesome, really useful to just get

29
00:02:14,876 --> 00:02:18,722
started with Django. You spin websites

30
00:02:18,786 --> 00:02:22,486
really fast and also in

31
00:02:22,508 --> 00:02:25,850
the people take into account a frameworks.

32
00:02:26,350 --> 00:02:30,086
The time development has been

33
00:02:30,208 --> 00:02:33,774
going on, active development, I mean people have been

34
00:02:33,812 --> 00:02:38,378
presenting, there have been releases hands, all these strengthened

35
00:02:38,474 --> 00:02:42,062
project people look at these version number certainly

36
00:02:42,196 --> 00:02:46,260
like some people take it as a hint, but also whether

37
00:02:46,790 --> 00:02:50,082
the package has been adopted by the community,

38
00:02:50,216 --> 00:02:53,842
by companies, whether or not the app is

39
00:02:53,896 --> 00:02:57,206
being used in production. And in that sense we

40
00:02:57,228 --> 00:03:00,706
can say that Django is a pretty much solid choice.

41
00:03:00,818 --> 00:03:05,234
It's pretty old also, and also about the Django ecosystem,

42
00:03:05,282 --> 00:03:08,742
which is strong, you want to build a feature, you know that

43
00:03:08,796 --> 00:03:12,758
there must be a package which already implemented the feature.

44
00:03:12,854 --> 00:03:16,874
You just go and grab the package and use it in your own project and

45
00:03:16,912 --> 00:03:21,182
you're good to go. That's why people choose

46
00:03:21,316 --> 00:03:24,362
Django, because you can customize your projects,

47
00:03:24,426 --> 00:03:28,106
sometimes many times easily. And also it's

48
00:03:28,218 --> 00:03:31,550
scalable. That is you have your app here,

49
00:03:31,620 --> 00:03:35,122
you want to make complex app, you want to make a big app, you just

50
00:03:35,176 --> 00:03:38,466
continue developing. You don't have to find a

51
00:03:38,488 --> 00:03:42,718
better architecture, not in terms of infrastructure,

52
00:03:42,814 --> 00:03:46,374
but in terms of code organization. So you

53
00:03:46,412 --> 00:03:50,674
just focus on developing. And also, since Django

54
00:03:50,722 --> 00:03:53,682
is a widely used package,

55
00:03:53,826 --> 00:03:56,978
it's powering many websites.

56
00:03:57,074 --> 00:04:00,600
So obviously it integrated common security

57
00:04:01,050 --> 00:04:04,902
fixers, common security flaws, it addressed those

58
00:04:04,956 --> 00:04:08,394
flaws. And maybe if you were to start off on your

59
00:04:08,432 --> 00:04:12,062
own, you would have you yourself to address those

60
00:04:12,116 --> 00:04:15,422
issues, to provide the lines to those common

61
00:04:15,476 --> 00:04:19,450
issues. Because these are common issues, they're bound to be recurring

62
00:04:19,530 --> 00:04:22,394
or it's within reach of people to breach.

63
00:04:22,522 --> 00:04:25,378
So Django got you covered up.

64
00:04:25,464 --> 00:04:29,346
It's also because of the wide range of apps available. Like you have

65
00:04:29,368 --> 00:04:33,106
e commerce, you have pretty much everything you have

66
00:04:33,208 --> 00:04:37,234
for manipulating jurispatial data. You have quality packages.

67
00:04:37,362 --> 00:04:40,550
Sometimes among all Python frameworks, you can find

68
00:04:40,620 --> 00:04:44,210
packages for certain fields only in Django,

69
00:04:44,290 --> 00:04:48,262
geospatial, for example. So we can say that

70
00:04:48,396 --> 00:04:51,994
we have a wide range of app for Django. Now comes

71
00:04:52,032 --> 00:04:55,754
to the question, why flask like? You have Django here?

72
00:04:55,872 --> 00:04:59,258
Why do people still go for flask? Like,

73
00:04:59,344 --> 00:05:02,638
is Django not the answer to no?

74
00:05:02,724 --> 00:05:06,318
Obviously people choose flask for a reason. The first is

75
00:05:06,404 --> 00:05:09,674
that it's very easy to pick up flask,

76
00:05:09,722 --> 00:05:13,154
ten lines. You get your flask app running these yourself,

77
00:05:13,272 --> 00:05:17,026
right? And it's awesome. It's amazing. You want

78
00:05:17,128 --> 00:05:20,114
an endpoint to return some text or something like that,

79
00:05:20,152 --> 00:05:23,890
something simple, something basic. Flask is really easy

80
00:05:23,960 --> 00:05:28,070
to pick up, and floss gets out of

81
00:05:28,140 --> 00:05:31,654
your way. You want to program, you want to do something.

82
00:05:31,772 --> 00:05:35,954
So floss is not here to actually prevent

83
00:05:36,002 --> 00:05:39,318
you from doing the way you want to

84
00:05:39,404 --> 00:05:43,242
do. Important for people who have grown big enough

85
00:05:43,376 --> 00:05:46,362
so that the Framework doesn't get you see,

86
00:05:46,416 --> 00:05:50,170
that was is better. So with Flask to

87
00:05:50,240 --> 00:05:54,454
do that, you can actually roll out your style.

88
00:05:54,502 --> 00:05:58,814
It's about doing it and also enjoying your development time.

89
00:05:58,932 --> 00:06:02,842
The flask kind of let you enjoy

90
00:06:02,996 --> 00:06:06,398
the way you want, and also about customization,

91
00:06:06,574 --> 00:06:09,954
much like Django. But Flask also has,

92
00:06:10,072 --> 00:06:13,282
since Flask is a very simple,

93
00:06:13,416 --> 00:06:17,682
a very bare bones framework, you have to customize

94
00:06:17,746 --> 00:06:21,602
it. And for that purpose, you have an awesome collection

95
00:06:21,666 --> 00:06:24,998
of plugins. You have an awesome range of

96
00:06:25,084 --> 00:06:28,790
plugins available for you to customize. These really

97
00:06:28,940 --> 00:06:32,374
make. It's like cooking. You have to find the right ingredients,

98
00:06:32,502 --> 00:06:36,426
in what quantity, in what proportion. You want this in

99
00:06:36,448 --> 00:06:40,006
your app, you want that in your app, you have to

100
00:06:40,128 --> 00:06:43,438
decide on the ingredients of your app.

101
00:06:43,604 --> 00:06:47,438
You can have the perfect meal. In other words,

102
00:06:47,604 --> 00:06:51,722
then let's say that we have flask,

103
00:06:51,786 --> 00:06:55,906
we have Django. But what if we could have both?

104
00:06:56,008 --> 00:06:59,326
What if we could have the power of Django?

105
00:06:59,438 --> 00:07:03,074
The incredible development speed of

106
00:07:03,112 --> 00:07:06,418
Django, the head started of Django

107
00:07:06,514 --> 00:07:10,790
with the flexibility, the customizability of

108
00:07:10,860 --> 00:07:14,246
flask. Like what if you could have both?

109
00:07:14,428 --> 00:07:18,166
That's precisely what Shopyo is. It allows

110
00:07:18,198 --> 00:07:22,150
you to have the organization, the cross sharing

111
00:07:22,310 --> 00:07:25,546
of modules of Django, features found in

112
00:07:25,568 --> 00:07:29,434
Django, like main entry points, commands used by

113
00:07:29,472 --> 00:07:33,086
Django, pretty much everything which

114
00:07:33,188 --> 00:07:36,458
characterizes Django and Django

115
00:07:36,634 --> 00:07:40,846
apps. Well, those and these, you still

116
00:07:41,028 --> 00:07:44,306
retain flask. You retain the flexibility of

117
00:07:44,328 --> 00:07:47,858
flask, you retain the customizing power.

118
00:07:47,944 --> 00:07:51,662
If we can put it like that of flask, what if you could just merge

119
00:07:51,726 --> 00:07:55,810
both? That's what Shopyo is. And conceptually

120
00:07:55,890 --> 00:07:58,886
speaking, what is a Shopyo app?

121
00:07:58,988 --> 00:08:02,886
Well, you can think of a shop you app

122
00:08:02,988 --> 00:08:06,882
as an app which has different modules.

123
00:08:07,026 --> 00:08:10,874
That's how you picture a shop you app in your

124
00:08:10,912 --> 00:08:14,646
mind. And when we say like, why Shopyo?

125
00:08:14,758 --> 00:08:18,518
We were saying we have flask, we have Django. But from the perspective

126
00:08:18,614 --> 00:08:22,178
of a flask developer, why would you want to use Shopyo?

127
00:08:22,214 --> 00:08:25,546
It's because Shopyo has modules. And who says modules?

128
00:08:25,578 --> 00:08:28,570
You can share it between projects.

129
00:08:28,650 --> 00:08:32,142
You have superpowers found in Django. You have

130
00:08:32,196 --> 00:08:36,814
the organization of very, very organized

131
00:08:36,942 --> 00:08:40,402
code base. We even have a concept called boxes which

132
00:08:40,456 --> 00:08:44,046
allows you to organize your apps

133
00:08:44,158 --> 00:08:47,410
up to a higher level so you have a

134
00:08:47,480 --> 00:08:51,046
great level of organization. It's feature packed. Like if

135
00:08:51,068 --> 00:08:54,354
you were to add all the features that Shopview provides

136
00:08:54,402 --> 00:08:57,586
you, it would have taken you a lot of time, lots of trial and

137
00:08:57,628 --> 00:09:01,402
errors, and each time redoing it, it becomes boring. For example,

138
00:09:01,456 --> 00:09:04,886
you have migration. Shopyo provides you with migration,

139
00:09:05,078 --> 00:09:08,742
with the migration mechanism, with assets management,

140
00:09:08,806 --> 00:09:12,458
with modules. And you also have docs,

141
00:09:12,554 --> 00:09:16,094
hands tests included. What I mean by docs and

142
00:09:16,132 --> 00:09:18,890
tests, I don't mean the Django documentation,

143
00:09:18,970 --> 00:09:23,214
the shopping documentation or flux documentation I'm talking about

144
00:09:23,332 --> 00:09:27,010
for your project. I'm not talking about framework documentation, I'm talking

145
00:09:27,080 --> 00:09:30,898
documentation for your project. Like you have a project which

146
00:09:30,984 --> 00:09:34,830
does something and you want to set up some instructions

147
00:09:34,990 --> 00:09:39,042
about a specific part to how to connect to a specific API,

148
00:09:39,106 --> 00:09:43,382
how to do this and that. So you have to write some documentation. And another

149
00:09:43,516 --> 00:09:47,250
great place besides the readme is a proper

150
00:09:47,420 --> 00:09:50,390
doc system. So for example, you have Sphinx.

151
00:09:50,470 --> 00:09:53,942
Shopyo comes with Sphinx loaded by default,

152
00:09:54,006 --> 00:09:57,706
and also tests, tests and test fixtures, things you

153
00:09:57,728 --> 00:10:00,650
need to get started to writing tests.

154
00:10:00,730 --> 00:10:04,826
Everything is set up for you to continue on expanding

155
00:10:04,938 --> 00:10:08,160
and so that you don't forget those two important

156
00:10:08,690 --> 00:10:12,074
aspects of a project. So documentation

157
00:10:12,122 --> 00:10:16,478
and tests are included. The basics of it are included

158
00:10:16,574 --> 00:10:20,462
so that you can continue development. And also Shopyo,

159
00:10:20,526 --> 00:10:23,934
though it provides you with awesome powers.

160
00:10:24,062 --> 00:10:27,974
Shopyo is transparent. It leaves much

161
00:10:28,092 --> 00:10:31,190
power of usage in your hands,

162
00:10:31,340 --> 00:10:35,286
rather than in our hands, in Shopu's hands.

163
00:10:35,388 --> 00:10:38,550
And also whatever is going on is clear.

164
00:10:38,700 --> 00:10:42,262
You can see in the app py how Shopyo accomplishes

165
00:10:42,326 --> 00:10:46,122
this, how it accomplishes that, and you are free

166
00:10:46,176 --> 00:10:50,314
to change it if ever you want. But the

167
00:10:50,352 --> 00:10:54,234
idea is to have something that people can relate

168
00:10:54,282 --> 00:10:57,866
to. Let's say that yes, it gives you all those powers,

169
00:10:57,898 --> 00:11:01,134
but you have to learn, you have to do

170
00:11:01,252 --> 00:11:04,610
something here and there, so it's not kind of worth

171
00:11:04,680 --> 00:11:08,482
it. But Shopview preserves the

172
00:11:08,536 --> 00:11:11,886
simplicity of if you were going bare

173
00:11:11,918 --> 00:11:15,266
bones floss. So what does a shop you project

174
00:11:15,368 --> 00:11:18,710
looks like? As you can see, this is how

175
00:11:18,780 --> 00:11:22,102
you conceptual Shopview app in its full

176
00:11:22,156 --> 00:11:25,958
picture. You have modules, you have boxes. Boxes is a

177
00:11:25,964 --> 00:11:29,334
way to organize modules. You can share modules among projects,

178
00:11:29,382 --> 00:11:33,094
among Shopyo, your projects, or you can share boxes among Shopview

179
00:11:33,142 --> 00:11:37,174
projects. They will work. And then you have fixtures,

180
00:11:37,302 --> 00:11:40,758
some common fixtures for login, logout, et cetera, admin user,

181
00:11:40,774 --> 00:11:44,750
et cetera. It's already included, you can use it. You cannot use it

182
00:11:44,820 --> 00:11:48,206
if you want, it's up to you. But they are included if

183
00:11:48,228 --> 00:11:51,738
you want to go. The Django was, they are included.

184
00:11:51,834 --> 00:11:55,698
You also have the basics of documentations already available.

185
00:11:55,864 --> 00:11:58,946
Shopping also comes with a theming system. Let's say

186
00:11:58,968 --> 00:12:02,626
you have a site, you want to change themes. It was a

187
00:12:02,648 --> 00:12:06,382
way to customize everything with a we can say

188
00:12:06,536 --> 00:12:09,798
whatever and however you want it. You just

189
00:12:09,884 --> 00:12:13,638
need to sit down and take the time to really

190
00:12:13,724 --> 00:12:17,782
write your theme and then you can use it. And it even

191
00:12:17,916 --> 00:12:21,798
has an admin panel whereby you can change

192
00:12:21,884 --> 00:12:24,690
the themes. It has module related utilities,

193
00:12:24,770 --> 00:12:28,966
migration, set management. So these are some utilities present.

194
00:12:29,068 --> 00:12:33,082
You have utilities sections, tests and docs

195
00:12:33,146 --> 00:12:37,134
and tests. You have themes, you have mail that

196
00:12:37,172 --> 00:12:40,618
yes, it comes integrated with mail.

197
00:12:40,714 --> 00:12:44,930
You have secrets management, you have config profiles, you have

198
00:12:45,000 --> 00:12:48,274
of course the application factory. I mean a shop.

199
00:12:48,312 --> 00:12:52,066
Your project is an advanced flosk app from the

200
00:12:52,088 --> 00:12:56,254
beginning. You want to have a super advanced Flask

201
00:12:56,302 --> 00:13:00,038
app. So feel free to use Shopyo. You get it for free

202
00:13:00,124 --> 00:13:04,002
from day one. And if you don't like some pictorial

203
00:13:04,066 --> 00:13:07,538
representation of what a project looks like,

204
00:13:07,644 --> 00:13:11,350
you certainly have this representation

205
00:13:11,430 --> 00:13:14,954
here which you can pose, you can see, you can go

206
00:13:15,072 --> 00:13:18,346
more into depth to see exactly what

207
00:13:18,368 --> 00:13:21,962
these shop you app looks like. Lines, that's vanilla,

208
00:13:22,026 --> 00:13:25,134
that's without anything. You just have those.

209
00:13:25,252 --> 00:13:28,346
And then as to a module focusing on a module,

210
00:13:28,458 --> 00:13:32,358
well, a module actually makes up of different parts.

211
00:13:32,474 --> 00:13:36,050
And unsurprisingly like Django,

212
00:13:37,110 --> 00:13:40,606
you can relate. If you've used Django, you have a static folder,

213
00:13:40,638 --> 00:13:44,302
your templates folder, your tests folder that's included

214
00:13:44,366 --> 00:13:48,002
by default by Shopyo. When you create a new module,

215
00:13:48,146 --> 00:13:51,858
then view models, forms upload upload is for dbcding

216
00:13:51,874 --> 00:13:55,494
and info. JSON is about more information, gives more

217
00:13:55,532 --> 00:13:59,402
information on the module. As you can see you can get pretty much

218
00:13:59,456 --> 00:14:02,806
organised codes hands among that. Your static folder

219
00:14:02,838 --> 00:14:06,346
is optional, even the view file is

220
00:14:06,448 --> 00:14:10,426
optional. You can have an endpoint or you can

221
00:14:10,528 --> 00:14:14,426
use a package solely for the purpose

222
00:14:14,458 --> 00:14:17,898
of organization. You don't need to have an endpoint associated.

223
00:14:17,994 --> 00:14:22,042
And then as for the commands you have run debug, you have run server.

224
00:14:22,106 --> 00:14:25,106
Much like there is a subtle difference,

225
00:14:25,288 --> 00:14:29,058
but you get it, you won't even know

226
00:14:29,144 --> 00:14:32,834
whether it was Shopyo or not. And then

227
00:14:32,872 --> 00:14:37,190
you have basically collect static just like

228
00:14:37,340 --> 00:14:41,186
Django. Those are some commands supported by Shopyo.

229
00:14:41,298 --> 00:14:45,094
But most importantly here you can

230
00:14:45,132 --> 00:14:49,238
see how you start Shopyo, your new for example blog. Then you

231
00:14:49,324 --> 00:14:53,114
see the inside two directories to finally

232
00:14:53,232 --> 00:14:56,426
arrive at your focus starting point I

233
00:14:56,448 --> 00:15:00,102
can say of the app. So try it, drop your project

234
00:15:00,176 --> 00:15:03,326
name. So that's it. Those are some commands that

235
00:15:03,348 --> 00:15:06,682
we support. Initialize basically instantiates

236
00:15:06,746 --> 00:15:09,562
the DB and collect static,

237
00:15:09,626 --> 00:15:13,282
collects your assets and then in your code you can use

238
00:15:13,336 --> 00:15:16,990
get asset so that your code remains

239
00:15:17,070 --> 00:15:20,914
the same for development and production. You also have

240
00:15:20,952 --> 00:15:24,498
migrate commands which you can use. And then one

241
00:15:24,584 --> 00:15:28,502
question which always nearly comes out

242
00:15:28,636 --> 00:15:31,974
when I do presentations of Shopyo is

243
00:15:32,172 --> 00:15:35,746
why not use Django? You have all the mechanisms of Django,

244
00:15:35,858 --> 00:15:38,722
you have everything here. Why use Shopview?

245
00:15:38,786 --> 00:15:42,186
Like why a new framework that is built on

246
00:15:42,208 --> 00:15:45,766
top of flask? Well dancer is because flask because of the spirit

247
00:15:45,798 --> 00:15:49,626
of flosk, because of the floss ecosystem, because of for

248
00:15:49,648 --> 00:15:53,166
example sqlalchemy. That's why you

249
00:15:53,188 --> 00:15:56,974
would want to stick with flask. But at the same time as

250
00:15:57,012 --> 00:16:00,302
a flask user, you want to get more powers. That's where

251
00:16:00,356 --> 00:16:03,630
Shopview comes in. The other questions that people

252
00:16:03,700 --> 00:16:07,362
ask silently inside them themselves, whether or not

253
00:16:07,416 --> 00:16:12,014
the packages is reliable, we are happy to say that we don't maintain middlewares,

254
00:16:12,062 --> 00:16:15,502
we use flask login for login we use Flask admin, migrate,

255
00:16:15,566 --> 00:16:19,494
WTF, WTF, Sqlalchemy, emailman. These are

256
00:16:19,612 --> 00:16:23,810
popular, reliable, solid packages

257
00:16:23,970 --> 00:16:27,094
which have been going strong for years.

258
00:16:27,212 --> 00:16:30,394
Since we don't maintain our middle west, there are less

259
00:16:30,512 --> 00:16:34,554
chance of doing something really damaging to

260
00:16:34,592 --> 00:16:39,258
a project. But at least our tech stack is quite interesting,

261
00:16:39,424 --> 00:16:42,862
stable and we've reached the

262
00:16:42,996 --> 00:16:47,162
end of the slides, hands the end of the presentation.

263
00:16:47,306 --> 00:16:50,574
And I can say that maybe one point which I did not

264
00:16:50,612 --> 00:16:54,586
touch, it's about what's the big deal about going flask

265
00:16:54,618 --> 00:16:58,558
bare boots. This project looks intimidating

266
00:16:58,734 --> 00:17:02,658
to get started with. It's like you have all these

267
00:17:02,744 --> 00:17:06,414
files just to get started with. Well, to tackle

268
00:17:06,462 --> 00:17:10,406
this one first, we'll say that shopyo these is not for every

269
00:17:10,588 --> 00:17:13,798
project. You need to know when it will benefit you, when it

270
00:17:13,804 --> 00:17:17,110
will be great, when it makes sense to use it.

271
00:17:17,180 --> 00:17:20,150
If you want something maybe very simple,

272
00:17:20,220 --> 00:17:23,974
maybe this is not the project. But even

273
00:17:24,012 --> 00:17:27,446
if someone wants to use it in every case, so he can.

274
00:17:27,548 --> 00:17:31,246
But you really need to know when

275
00:17:31,268 --> 00:17:34,730
to use it, whether it will benefit me. What are the advantages?

276
00:17:34,890 --> 00:17:37,982
You can compare it to Django to get an idea.

277
00:17:38,116 --> 00:17:39,660
I think we can finish.

