1
00:00:17,690 --> 00:00:21,246
Hi, welcome to my talk leveraging the power of state machines in

2
00:00:21,268 --> 00:00:25,346
Swift who am I? My name is Frank Corville and I'm based in trail,

3
00:00:25,378 --> 00:00:29,314
Canada. I've done iOS mobile development consulting for almost a decade,

4
00:00:29,362 --> 00:00:33,190
and now I'm an iOS corporate trainer for a company called School of Swift.

5
00:00:33,530 --> 00:00:37,186
School of Swift is an online organization that keeps iOS teams

6
00:00:37,218 --> 00:00:40,506
on the cutting edge. We deliver interactive workshops on all

7
00:00:40,528 --> 00:00:43,978
sorts of iOS topics, and most workshops are only half a day.

8
00:00:44,144 --> 00:00:47,722
This way you can ensure the continuing education of your team without

9
00:00:47,776 --> 00:00:52,234
jeopardizing their development schedule. Some of our workshop topics include

10
00:00:52,362 --> 00:00:56,346
getting started with voiceover, painless dynamic type Swift UI

11
00:00:56,378 --> 00:00:59,578
for UI kit developers, and getting started with async

12
00:00:59,594 --> 00:01:03,600
await. If that sounds interesting, check out schoolaswift.com

13
00:01:03,970 --> 00:01:07,794
and of course, please reach out and tell me what you think of this talk.

14
00:01:07,912 --> 00:01:11,298
You can find me on Twitter at frankacy, where my dms are always open.

15
00:01:11,464 --> 00:01:14,786
You can also email me at hello, frank courville.com.

16
00:01:14,888 --> 00:01:18,486
But keep in mind that being helpful on Twitter is

17
00:01:18,508 --> 00:01:22,326
my superpower. So if you want a quick reply, you know where to find me.

18
00:01:22,508 --> 00:01:25,080
All right, let's get to the good stuff.

19
00:01:25,610 --> 00:01:28,738
In this presentation, we're going to talk about state machines in

20
00:01:28,764 --> 00:01:32,198
Swift, what they are, how to build them, and why they're

21
00:01:32,214 --> 00:01:36,070
useful. We'll learn how to draw state diagrams,

22
00:01:36,230 --> 00:01:40,006
then we'll take those state diagrams and translate them into Swift,

23
00:01:40,198 --> 00:01:43,454
and we'll also see some advanced applications of state machines in our

24
00:01:43,492 --> 00:01:47,146
code. But perhaps most importantly,

25
00:01:47,338 --> 00:01:51,114
why should you care? What's the point of talking about state machines

26
00:01:51,162 --> 00:01:53,220
in the context of an iOS app?

27
00:01:54,630 --> 00:01:57,730
The reality is that state machines are everywhere.

28
00:01:58,230 --> 00:02:02,094
They're, of course, in our code, but also in our daily

29
00:02:02,142 --> 00:02:05,506
lives. Things like the turnstile you

30
00:02:05,528 --> 00:02:08,726
use to take public transit or the cruise control in your

31
00:02:08,748 --> 00:02:12,690
car are classic examples of state machines. And perhaps

32
00:02:12,770 --> 00:02:15,878
the best example, power of state machines is a traffic light,

33
00:02:15,964 --> 00:02:17,320
which we'll look at soon.

34
00:02:18,570 --> 00:02:22,646
But to drive the point home a bit further, in the context of iOS

35
00:02:22,758 --> 00:02:26,438
specifically, I want to talk about something seemingly unrelated.

36
00:02:26,534 --> 00:02:29,100
So just bear with me for a while.

37
00:02:29,470 --> 00:02:33,070
Let's talk about the coordinator pattern in Uikit.

38
00:02:33,890 --> 00:02:37,614
For those of you who are unfamiliar, coordinators are

39
00:02:37,652 --> 00:02:41,354
objects that control the flow in an app. This was popularized

40
00:02:41,402 --> 00:02:45,238
by Sarosh Kanlu, back when we were still all doing objective

41
00:02:45,274 --> 00:02:48,302
c. In a way, they're like a programmatic

42
00:02:48,366 --> 00:02:51,694
storyboard. They string together many view controllers

43
00:02:51,742 --> 00:02:55,118
and define the flows that a user can take through a series of

44
00:02:55,144 --> 00:02:58,674
screens. Now, as a freelance developer,

45
00:02:58,722 --> 00:03:02,246
I've worked on many different projects and I've seen this pattern again and

46
00:03:02,268 --> 00:03:05,782
again. It's my go to pattern for building

47
00:03:05,836 --> 00:03:09,850
anything in Uikid. However, it has its shortcomings.

48
00:03:10,350 --> 00:03:14,010
When you look at a coordinator class, there's always those questions

49
00:03:14,080 --> 00:03:17,722
that come to mind. How can you tell the

50
00:03:17,776 --> 00:03:21,226
order of the view controllers? There's nothing in

51
00:03:21,248 --> 00:03:25,150
the code that communicates those to developer. You kind of have to piece this together

52
00:03:25,220 --> 00:03:29,214
yourself. It's also unclear how

53
00:03:29,252 --> 00:03:32,766
each of these view controllers interacts with a coordinator. You often need

54
00:03:32,788 --> 00:03:36,562
to wade through multiple files in order to figure out what exactly

55
00:03:36,616 --> 00:03:39,886
is going on. And perhaps worst

56
00:03:39,918 --> 00:03:43,186
of all is, how are you supposed to test this? How do

57
00:03:43,208 --> 00:03:46,774
you ensure that your flow is working correctly and isn't going to be broken by

58
00:03:46,812 --> 00:03:50,934
future change? So with those questions in mind,

59
00:03:51,132 --> 00:03:55,334
let's look at state machines in swift so

60
00:03:55,452 --> 00:03:58,858
what is a state machine? Here's a

61
00:03:58,864 --> 00:04:02,394
good definition. It's a pattern to represent a

62
00:04:02,432 --> 00:04:06,438
finite number of states and enforce known transition

63
00:04:06,614 --> 00:04:10,186
between those states. There's a lot going on

64
00:04:10,208 --> 00:04:14,014
in this definition, so let's break it down. A finite number

65
00:04:14,052 --> 00:04:17,406
of states. We aren't trying to model the

66
00:04:17,428 --> 00:04:21,390
whole world, right? We have a constrained domain and

67
00:04:21,460 --> 00:04:25,940
we want to focus on our specific problem.

68
00:04:27,270 --> 00:04:30,126
Okay, now, known transitions.

69
00:04:30,238 --> 00:04:34,142
This means that we can assign names to them. We know which states can transition

70
00:04:34,206 --> 00:04:37,414
to which other states. Conversely, we also know

71
00:04:37,452 --> 00:04:40,840
which states can transition to which other states.

72
00:04:42,090 --> 00:04:45,814
We can make strong assumptions about our state machine and how it will

73
00:04:45,852 --> 00:04:48,780
behave. And finally,

74
00:04:49,390 --> 00:04:53,610
enforce. These transitions are

75
00:04:53,680 --> 00:04:57,366
enforced. There's no dynamic way of bypassing

76
00:04:57,398 --> 00:05:01,098
a certain transition. You can't, for example, reach into the

77
00:05:01,104 --> 00:05:04,686
state machine and set an arbitrary state yourself. If you want

78
00:05:04,708 --> 00:05:08,414
to move to a specific state, you must use the transitions that

79
00:05:08,452 --> 00:05:12,206
already exist. So let's look at an example of what we

80
00:05:12,228 --> 00:05:15,460
mean here. Let's look at the standard traffic light.

81
00:05:16,150 --> 00:05:20,082
We can define its states as red, yellow, and green.

82
00:05:20,216 --> 00:05:23,886
So here they are listed out in state diagrams.

83
00:05:23,918 --> 00:05:27,234
It's common to list out states using their names in circles.

84
00:05:27,282 --> 00:05:30,546
So that's what we did here. Now let's

85
00:05:30,578 --> 00:05:35,270
think about how we move between each of these states. Green can become yellow,

86
00:05:35,690 --> 00:05:38,954
yellow can become red, and red can become green.

87
00:05:38,992 --> 00:05:42,458
Again, we can represent these possible

88
00:05:42,544 --> 00:05:45,580
transitions by using arrows between the states.

89
00:05:46,750 --> 00:05:50,922
Now let's assume that inside our traffic light, we have a set of timers

90
00:05:50,986 --> 00:05:53,600
that determines when the light should change.

91
00:05:54,930 --> 00:05:58,030
Now we can use that to name our transition.

92
00:05:59,730 --> 00:06:03,166
So we have a state diagram from which we can glean the problem that

93
00:06:03,188 --> 00:06:06,546
we're dealing with. We can easily see, for instance, that our

94
00:06:06,568 --> 00:06:10,686
state machine transitions from green to yellow. When the green timer elapses.

95
00:06:10,878 --> 00:06:14,834
Cool. Finite number of states. Known transitions between

96
00:06:14,872 --> 00:06:17,320
those states. Exactly what we want.

97
00:06:18,330 --> 00:06:21,686
Now, this is fine and dandy, but you're probably not here to

98
00:06:21,708 --> 00:06:24,630
code traffic lights, right? You're here to build apps.

99
00:06:25,290 --> 00:06:29,046
Let's go through this exercise again with something a little more concrete.

100
00:06:29,158 --> 00:06:32,374
Loading remote content loading

101
00:06:32,422 --> 00:06:36,106
remote content is a great example of an implicit state machine that we

102
00:06:36,128 --> 00:06:39,674
have in our apps. In other words, we have

103
00:06:39,712 --> 00:06:42,986
code that acts like a state machine, but isn't formally defined

104
00:06:43,018 --> 00:06:46,926
that way. Let's see if we can break it down. When we

105
00:06:46,948 --> 00:06:50,000
navigate to a screen, we start in the loading state.

106
00:06:50,770 --> 00:06:55,140
We may encounter an error, which will push us to the error state.

107
00:06:56,550 --> 00:07:00,082
We can then hit a button to retry, and that

108
00:07:00,136 --> 00:07:02,260
moves us back to the loading state.

109
00:07:03,350 --> 00:07:06,742
Eventually, we receive data from the back end, but maybe

110
00:07:06,796 --> 00:07:09,906
it's empty. This brings us to an empty

111
00:07:09,938 --> 00:07:13,446
state. At this point, we could press a button to

112
00:07:13,468 --> 00:07:16,866
refresh our content and move back to the loading

113
00:07:16,898 --> 00:07:20,886
state again. And then finally we

114
00:07:20,908 --> 00:07:24,106
get a fresh set of data from the back end, moving us to the

115
00:07:24,128 --> 00:07:27,402
data state. Many of us have built something

116
00:07:27,456 --> 00:07:31,182
like this in one way or another in our apps without putting

117
00:07:31,236 --> 00:07:35,306
much thought to it. But this is those perfect example of an implicit

118
00:07:35,338 --> 00:07:38,974
state machine. Now, how do we take the state diagram and

119
00:07:39,012 --> 00:07:40,750
translate it into swift?

120
00:07:42,610 --> 00:07:46,094
In my experience, the most effective way to build a state machine

121
00:07:46,142 --> 00:07:49,826
is in two parts. The first part is to create a

122
00:07:49,848 --> 00:07:53,454
state definition enum. This will represent the state diagram

123
00:07:53,502 --> 00:07:57,062
we just made. It will hold the different states, the different

124
00:07:57,116 --> 00:08:00,902
transitions, and the rules that govern how your values change

125
00:08:00,956 --> 00:08:04,726
from one state to the next. The second part

126
00:08:04,748 --> 00:08:08,680
of the solution is to create a state machine wrapper class.

127
00:08:09,210 --> 00:08:12,310
This class will wrap the current state of your state machine,

128
00:08:12,390 --> 00:08:16,214
protecting it from the outside, and ensure that only predefined

129
00:08:16,262 --> 00:08:19,386
transitions are called on it. This is

130
00:08:19,408 --> 00:08:23,200
also the class that will communicate new states to the rest of the app

131
00:08:24,690 --> 00:08:27,722
building. The first part, a state definition enum,

132
00:08:27,786 --> 00:08:31,134
is pretty straightforward once you have your state diagram. So let's start

133
00:08:31,172 --> 00:08:34,910
with that. Since we're dealing with mutually

134
00:08:34,990 --> 00:08:38,180
exclusive, state enums are a natural fit.

135
00:08:38,550 --> 00:08:41,902
Here I have my remote content state definition enum,

136
00:08:42,046 --> 00:08:45,198
and we're going to start listing out the possible states.

137
00:08:45,384 --> 00:08:49,030
Loading data, error and empty.

138
00:08:50,170 --> 00:08:54,630
In addition to these cases, let's also define our different transitions.

139
00:08:55,450 --> 00:08:59,014
These are the events that act on our state machine to cause the state to

140
00:08:59,052 --> 00:09:02,906
change. In other words, they're the labels we added to

141
00:09:02,928 --> 00:09:06,458
our arrows in the state diagram. Once again,

142
00:09:06,624 --> 00:09:09,286
since they are known and mutually exclusive,

143
00:09:09,398 --> 00:09:13,182
let's use another enum. Here's an enum called

144
00:09:13,236 --> 00:09:16,954
event that defines four transitions, did receive

145
00:09:17,002 --> 00:09:20,986
error, did trigger reload, did receive empty

146
00:09:21,018 --> 00:09:23,620
data, and did receive data.

147
00:09:24,470 --> 00:09:28,322
You'll also notice that our event enum is inside our

148
00:09:28,376 --> 00:09:31,554
state definition enum. Since it should

149
00:09:31,592 --> 00:09:34,946
only really be used here, it makes sense to scope it as

150
00:09:34,968 --> 00:09:38,326
tightly as possible. This is also important if

151
00:09:38,348 --> 00:09:41,480
you end up with many state machine implementations in your app.

152
00:09:42,570 --> 00:09:46,066
Now those fun part we define our state transitions.

153
00:09:46,178 --> 00:09:49,754
It looks something like those we

154
00:09:49,792 --> 00:09:53,546
start with a mutating function called handle event. When it

155
00:09:53,568 --> 00:09:56,938
receives an event, it's going to change the current state into the

156
00:09:56,944 --> 00:10:00,502
next state. In the body of this method,

157
00:10:00,566 --> 00:10:03,998
we're going to switch over two things, the current value of those state,

158
00:10:04,084 --> 00:10:07,630
which is self, as well as the event we received.

159
00:10:08,130 --> 00:10:12,160
Now those is a lot of code, so let's focus in on a single case.

160
00:10:13,330 --> 00:10:17,106
Here you can see we're switching over a tuple of self, which is those

161
00:10:17,128 --> 00:10:20,706
current state and event. And in

162
00:10:20,728 --> 00:10:24,574
this case, when we're in the loading state, we receive the did receive

163
00:10:24,622 --> 00:10:27,650
error event, we change self to error,

164
00:10:27,730 --> 00:10:31,366
which means we are moved to the error state and

165
00:10:31,388 --> 00:10:35,026
we simply repeat this logic for each of the transitions

166
00:10:35,138 --> 00:10:38,934
until every transition on our state diagram

167
00:10:38,982 --> 00:10:41,660
is handled. Now,

168
00:10:42,510 --> 00:10:45,866
if you were to try to make this compile, you would get

169
00:10:45,888 --> 00:10:48,970
an error switch must be exhausted.

170
00:10:49,790 --> 00:10:53,054
This is a good thing. The swift compiler is on our side.

171
00:10:53,172 --> 00:10:56,720
Great. Here are a few ways to fix this.

172
00:10:57,570 --> 00:11:02,190
You could exhaustively list out every state and every transition.

173
00:11:02,870 --> 00:11:06,766
This, although wordy, is a good solution

174
00:11:06,878 --> 00:11:10,654
for a state machine that may grow over time. This approach

175
00:11:10,702 --> 00:11:14,062
will force you to consider every other state or transition

176
00:11:14,206 --> 00:11:16,920
in case you add a new one in the future.

177
00:11:17,370 --> 00:11:21,094
Again, this approach is very wordy, but those composed has

178
00:11:21,132 --> 00:11:22,840
your back, so that's a good thing.

179
00:11:24,170 --> 00:11:27,794
Alternatively, you can use simply a default label

180
00:11:27,842 --> 00:11:31,180
to handle all unused combinations, which is what we'll do here.

181
00:11:31,870 --> 00:11:35,194
Now this brings up another question. What should

182
00:11:35,232 --> 00:11:38,074
we do with an invalid state transition? Again,

183
00:11:38,192 --> 00:11:42,302
you have a few options. One option, the one

184
00:11:42,356 --> 00:11:45,530
that most often comes to mind, is to crash

185
00:11:45,610 --> 00:11:48,654
to fatal error. This can be useful in

186
00:11:48,692 --> 00:11:51,178
very strict applications power of state machines,

187
00:11:51,274 --> 00:11:54,626
but watch out race conditions in your code,

188
00:11:54,728 --> 00:11:58,002
especially revolving around UI, could cause

189
00:11:58,056 --> 00:12:01,662
your app to unnecessarily crash. So generally

190
00:12:01,726 --> 00:12:05,686
I don't recommend those approach. Another option is

191
00:12:05,788 --> 00:12:09,622
to simply ignore the attempted transition and log

192
00:12:09,676 --> 00:12:13,270
an error. You could, for example,

193
00:12:13,420 --> 00:12:17,254
log it to crashalytics or some other remote logging database to

194
00:12:17,292 --> 00:12:20,090
audit how your state machine is behaving in production.

195
00:12:20,750 --> 00:12:24,250
But at the very least you should log an error message

196
00:12:24,320 --> 00:12:28,650
to the console so that you can see it happening during development.

197
00:12:29,230 --> 00:12:32,522
This will alert you that you have unexpected behavior

198
00:12:32,586 --> 00:12:36,026
that requires your attention. So that wraps

199
00:12:36,058 --> 00:12:39,870
up our state definition enum. Let's move on to the second power

200
00:12:40,020 --> 00:12:43,874
of state machines wrapper class. Let's create

201
00:12:43,912 --> 00:12:47,570
a class, and we're going to call it remote content state machine.

202
00:12:49,030 --> 00:12:52,674
It's going to contain a private variable called state,

203
00:12:52,872 --> 00:12:56,694
and we're going to initialize it to the initial state that we want our state

204
00:12:56,732 --> 00:13:00,118
machine to be in. So in this case, that would be the

205
00:13:00,124 --> 00:13:03,542
loading state. Next,

206
00:13:03,676 --> 00:13:07,506
this class needs to communicate with the outside world, the rest

207
00:13:07,548 --> 00:13:11,290
of our app. Now, again, there's many ways

208
00:13:11,360 --> 00:13:15,270
that you could do this. You could, for example, use combine

209
00:13:15,430 --> 00:13:19,046
rx, swift, or even a simple closure.

210
00:13:19,238 --> 00:13:23,102
However, in our case, let's go with the approach that most of us

211
00:13:23,156 --> 00:13:25,870
are familiar with, a delegate protocol.

212
00:13:27,090 --> 00:13:31,274
Here I define a delegate called remote content state machine delegate,

213
00:13:31,402 --> 00:13:34,720
and it has a single method did change state.

214
00:13:35,910 --> 00:13:39,342
Next, I add a weak delegate property to my state machine,

215
00:13:39,406 --> 00:13:43,182
and I'll use a did set to ensure that I never forget to notify

216
00:13:43,246 --> 00:13:46,840
my delegate that the state machine has changed states.

217
00:13:48,890 --> 00:13:53,430
Next, we need a way for our app to trigger these state transitions.

218
00:13:54,090 --> 00:13:58,042
To do this, we can write public methods on our state machine class

219
00:13:58,176 --> 00:14:01,578
to allow this to happen. For example,

220
00:14:01,744 --> 00:14:05,290
here I have three methods on remote content state machine

221
00:14:05,630 --> 00:14:09,100
receive error, reload, and receive data.

222
00:14:09,550 --> 00:14:11,520
But what do these methods do?

223
00:14:13,330 --> 00:14:16,734
Receive error and reload will simply pass on the

224
00:14:16,772 --> 00:14:20,574
event to our state definition enum in order

225
00:14:20,612 --> 00:14:23,150
for it to attempt to do its transition.

226
00:14:24,310 --> 00:14:28,606
However, receive data is a bit different depending

227
00:14:28,638 --> 00:14:32,514
on the data it receives, it decides which event to send to

228
00:14:32,552 --> 00:14:37,026
our state definition enum. If it receives an empty array,

229
00:14:37,138 --> 00:14:40,374
it sends the did receive empty data event.

230
00:14:40,572 --> 00:14:43,862
Otherwise, it sends the did receive data

231
00:14:43,916 --> 00:14:47,694
event. Your state machine class can be a convenient

232
00:14:47,762 --> 00:14:51,020
place to put light business logic such as this.

233
00:14:51,710 --> 00:14:55,366
You could also inject more complex validators into your state machine

234
00:14:55,398 --> 00:14:58,282
class if necessary. And finally,

235
00:14:58,416 --> 00:15:02,080
it's good practice to add a start method power of state machines class.

236
00:15:03,170 --> 00:15:06,734
Those will allow you to control when the initial state is

237
00:15:06,772 --> 00:15:11,262
communicated to the rest of the app through

238
00:15:11,316 --> 00:15:15,154
the same mechanism that we defined earlier. In our

239
00:15:15,192 --> 00:15:17,330
case, it's through the delegate,

240
00:15:18,790 --> 00:15:21,940
and now we can integrate this solution into our app.

241
00:15:22,710 --> 00:15:25,906
To do this, I've built a remote content container

242
00:15:25,938 --> 00:15:29,654
controller. It's initialized with

243
00:15:29,692 --> 00:15:32,790
both a network controller and our state machine.

244
00:15:33,930 --> 00:15:37,566
As the state changes are communicated through the state machine,

245
00:15:37,698 --> 00:15:41,462
the container controller switches between different view controllers.

246
00:15:41,606 --> 00:15:44,486
A loading view controller, an error view controller,

247
00:15:44,598 --> 00:15:48,406
an empty view controller and a data view controller.

248
00:15:48,598 --> 00:15:52,158
This allows for each of these child view controllers to be completely

249
00:15:52,244 --> 00:15:56,750
self contained and reusable throughout our app in other contexts.

250
00:15:57,970 --> 00:16:01,914
In order to hook up our container controller to our remote

251
00:16:01,962 --> 00:16:05,890
content state machine, we're going to make it conform to the remote content

252
00:16:05,960 --> 00:16:09,634
state machine delegate that we

253
00:16:09,672 --> 00:16:13,886
made earlier. Then using a few judicious helper

254
00:16:13,918 --> 00:16:17,206
methods, we can simply switch over those state that

255
00:16:17,228 --> 00:16:20,854
we receive and ensure that our container view controller is

256
00:16:20,892 --> 00:16:24,806
displaying the correct child view controller. This is

257
00:16:24,828 --> 00:16:28,198
also a good spot for you to trigger side effects. For instance,

258
00:16:28,294 --> 00:16:32,490
when we receive the loading state, we send off that network request

259
00:16:33,470 --> 00:16:35,866
and that's it, we're done.

260
00:16:36,048 --> 00:16:38,250
So what have we accomplished?

261
00:16:39,230 --> 00:16:42,954
We've taken something that was traditionally done in a single giant

262
00:16:43,002 --> 00:16:46,974
view controller and split it up into a bunch of small parts that are easy

263
00:16:47,012 --> 00:16:50,446
to reason about. And that's especially true for

264
00:16:50,468 --> 00:16:54,194
our state machine. It is trivially easy to

265
00:16:54,232 --> 00:16:56,370
test and ensure its correctness.

266
00:16:57,190 --> 00:17:00,974
What's more, we've taken something implicit in loading

267
00:17:01,022 --> 00:17:04,594
remote content, that is, the different view

268
00:17:04,632 --> 00:17:07,830
controllers, and we've made them explicit.

269
00:17:08,970 --> 00:17:12,262
This is a huge win for any project that wants to stand

270
00:17:12,316 --> 00:17:16,146
the test of time. Great. So before we dive

271
00:17:16,178 --> 00:17:19,080
a bit deeper into state machines, it's story time again.

272
00:17:19,790 --> 00:17:23,434
So a few years ago I worked at a large multinational on

273
00:17:23,472 --> 00:17:26,666
their Internet of things app. We had about a

274
00:17:26,688 --> 00:17:31,034
dozen different devices to support, each with their own custom pairing

275
00:17:31,082 --> 00:17:35,086
flows and UI. In this case, we did have

276
00:17:35,108 --> 00:17:38,638
a state machine to handle, but it was like

277
00:17:38,724 --> 00:17:42,742
5000 lines long and incredibly difficult to modify

278
00:17:42,826 --> 00:17:46,206
without introducing bugs. The kicker is that we were adding

279
00:17:46,238 --> 00:17:50,030
new devices practically every quarter, so it became

280
00:17:50,110 --> 00:17:53,746
unmanageable quite quickly. This got

281
00:17:53,768 --> 00:17:56,920
me thinking about two aspects that hadn't crossed my mind before.

282
00:17:58,010 --> 00:18:01,362
First of all, in some use cases, state machines

283
00:18:01,426 --> 00:18:05,314
tend to grow in complexity over time. You could imagine

284
00:18:05,362 --> 00:18:09,242
that today you create a feature that only has three

285
00:18:09,296 --> 00:18:12,198
different screens. But as your product evolves,

286
00:18:12,294 --> 00:18:15,674
or as Apple adds new device functionalities, the number

287
00:18:15,712 --> 00:18:18,970
of states increases to something that's not as manageable.

288
00:18:20,450 --> 00:18:24,698
However, complex state machines also often have substate

289
00:18:24,714 --> 00:18:28,298
machines inside them. That is to say, you can extract

290
00:18:28,394 --> 00:18:31,520
part power of state machines and make it its own.

291
00:18:33,570 --> 00:18:37,426
To me, this reveals that if we want our state machines to

292
00:18:37,448 --> 00:18:40,530
remain easy to work with, they need to be composable.

293
00:18:41,590 --> 00:18:45,494
We need a solution that allows us to bring to

294
00:18:45,532 --> 00:18:48,630
build big state machines out of smaller state machines.

295
00:18:49,610 --> 00:18:52,806
So let's take our remote content

296
00:18:52,988 --> 00:18:56,662
example a little bit further. I find

297
00:18:56,716 --> 00:19:00,578
that data and loaded are two sides of the same coin and I

298
00:19:00,604 --> 00:19:04,378
want to be able to refresh data once it's loaded as well to either

299
00:19:04,464 --> 00:19:08,362
see new data or to move back to the empty state if

300
00:19:08,496 --> 00:19:11,806
everything has been consumed, how can

301
00:19:11,828 --> 00:19:14,190
I model that as a child state machine?

302
00:19:17,250 --> 00:19:20,334
Let's create a new state definition and list these

303
00:19:20,372 --> 00:19:23,954
different states empty data and

304
00:19:23,992 --> 00:19:28,126
refresh. We'll go through the same exercise creating

305
00:19:28,158 --> 00:19:29,700
an event enum as well.

306
00:19:31,910 --> 00:19:35,606
Once again, we implement the handle event method to mutate the

307
00:19:35,628 --> 00:19:37,510
state of our child state machine.

308
00:19:39,210 --> 00:19:42,374
So far, everything is how you'd expect, but here is where things get

309
00:19:42,412 --> 00:19:46,262
interesting. Now, in our parent state

310
00:19:46,316 --> 00:19:50,246
machine, we can remove the empty and data states and replace

311
00:19:50,278 --> 00:19:54,374
it with a loaded state. It's going to have an associated

312
00:19:54,422 --> 00:19:58,730
value, which is the current state of our child state machine.

313
00:20:00,350 --> 00:20:04,046
Now, in the parent state definition, all we need to

314
00:20:04,068 --> 00:20:07,566
do is clean up the handle event implementation in order to

315
00:20:07,588 --> 00:20:11,386
forward events to the child state definition, and we're

316
00:20:11,418 --> 00:20:14,994
good to go. If you're interested in seeing

317
00:20:15,032 --> 00:20:18,626
the actual implementation of all of this, I encourage you to download the

318
00:20:18,648 --> 00:20:20,500
sample talk at the end of the talk.

319
00:20:23,550 --> 00:20:27,206
All right, so let's finish up this presentation with some examples

320
00:20:27,238 --> 00:20:30,654
of state machines that you may have in your application. I find

321
00:20:30,692 --> 00:20:34,078
that those task of discovering implicit state machines in

322
00:20:34,084 --> 00:20:37,840
our code is one that benefits from lots of examples. So here we go.

323
00:20:38,950 --> 00:20:42,834
Those first is an onboarding coordinator. Imagine you

324
00:20:42,872 --> 00:20:46,446
start in a login state, and then you move to an app preview,

325
00:20:46,638 --> 00:20:51,262
and then maybe you're prompted to enable location

326
00:20:51,326 --> 00:20:54,774
and push notifications. When you hit the back

327
00:20:54,812 --> 00:20:58,274
button in one of these last states, you don't necessarily

328
00:20:58,322 --> 00:21:02,134
want to go back the screen before. Here in

329
00:21:02,172 --> 00:21:05,100
our onboarding state machine, we would handle this.

330
00:21:06,830 --> 00:21:11,114
Next up is form validation. Imagine a form field

331
00:21:11,232 --> 00:21:15,594
in a form that would start off in an empty state. As you type,

332
00:21:15,712 --> 00:21:18,240
it moves to an entering data state.

333
00:21:19,090 --> 00:21:22,494
Once you're done entering data, it would move to a

334
00:21:22,532 --> 00:21:26,720
validating state where it checks to see if what you've entered is correct.

335
00:21:27,250 --> 00:21:30,898
Then you finally end up in either

336
00:21:30,984 --> 00:21:34,750
a validated state or can error state, which can both transition

337
00:21:34,830 --> 00:21:36,740
back to entering data.

338
00:21:38,310 --> 00:21:42,130
And finally, let's look at accepting push notifications.

339
00:21:42,810 --> 00:21:46,374
Those one is really great. Too often when we want

340
00:21:46,412 --> 00:21:50,002
users to accept push notifications, we'll show some sort of priming

341
00:21:50,066 --> 00:21:53,618
prompt to tell them the benefits of push notifications.

342
00:21:53,794 --> 00:21:57,558
If they accept, then we can move to show them the system prompt,

343
00:21:57,654 --> 00:22:01,658
but if they decline, we simply move to a declined state

344
00:22:01,744 --> 00:22:04,730
and the app can move on. However,

345
00:22:04,800 --> 00:22:08,334
if they accept the system prompt, then we move

346
00:22:08,372 --> 00:22:13,454
to a push accepted state and

347
00:22:13,492 --> 00:22:16,862
that's it for this presentation. If you want the sample code

348
00:22:16,916 --> 00:22:20,374
and resources for this talk, go to bitly state machines

349
00:22:20,442 --> 00:22:23,586
comp 42. The sample code is

350
00:22:23,608 --> 00:22:27,074
really great, by the way. There are three different projects that pull straight from

351
00:22:27,112 --> 00:22:29,140
the things we talked about during this talk.

352
00:22:30,550 --> 00:22:34,054
Also, here are a few additional resources for learning more about state

353
00:22:34,092 --> 00:22:37,414
machines. They don't all necessarily take the same

354
00:22:37,452 --> 00:22:41,382
approach, but it's interesting to have a more global view

355
00:22:41,436 --> 00:22:44,920
on what's possible and the different patterns that are available to us.

356
00:22:46,250 --> 00:22:48,998
And finally, my contact information. Again,

357
00:22:49,164 --> 00:22:52,246
if you enjoyed the talk, let me know on Twitter. And of course,

358
00:22:52,268 --> 00:22:55,526
don't be shy. But if you are shy, you can send me an email as

359
00:22:55,548 --> 00:22:58,730
well. Thank you so much and enjoy the rest of the conference.

