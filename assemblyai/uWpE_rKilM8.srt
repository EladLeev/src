1
00:00:25,570 --> 00:00:29,154
You. Hello and welcome to my session

2
00:00:29,202 --> 00:00:31,990
for this year's comfort. Two DevOps.

3
00:00:32,330 --> 00:00:36,258
Just to be fully transparent. I have a dog here and I'm home alone,

4
00:00:36,354 --> 00:00:39,814
so there might be noise coming. She's, she's currently laying about and

5
00:00:39,852 --> 00:00:43,302
being a good girl, but we'll see what happens.

6
00:00:43,356 --> 00:00:46,134
There might be some noise and stuff like that, so we'll see how we'll deal

7
00:00:46,172 --> 00:00:50,174
with that. Fortunately that's one of the things, by working from home or not having

8
00:00:50,212 --> 00:00:53,360
a proper actual studio and everything like that. So anyway,

9
00:00:54,770 --> 00:00:58,058
this talk is called how to achieve actual get offs

10
00:00:58,074 --> 00:01:00,798
with terraform in Kubernetes, and it's a little bit of a cheeky title. I'm going

11
00:01:00,804 --> 00:01:04,226
to get back to why this is written in this

12
00:01:04,248 --> 00:01:07,538
fashion, but just to clarify, in case you

13
00:01:07,544 --> 00:01:10,526
didn't know, that's me. My name is Robert.

14
00:01:10,558 --> 00:01:14,180
I work as a principal cloud engineer at Amesto 42.

15
00:01:14,710 --> 00:01:17,906
I'm a Microsoft MVP and hashicorbin bad

16
00:01:17,928 --> 00:01:20,302
store for the last couple of years. And hopefully,

17
00:01:20,446 --> 00:01:23,926
obviously this year also, that I'll probably continue to be that

18
00:01:23,948 --> 00:01:27,334
as well. We'll see. I'm very active in the cloud

19
00:01:27,372 --> 00:01:30,954
native computing foundation where I'm one of the co chairs in the platforms working group

20
00:01:30,992 --> 00:01:34,710
where we're creating a lot of resources and helping

21
00:01:34,870 --> 00:01:38,890
establish the platform engineering parts and get that

22
00:01:39,040 --> 00:01:42,746
into the CNCF space, so to speak.

23
00:01:42,848 --> 00:01:47,134
And I'm also one of the maintainers of the Open Gitops project, which is

24
00:01:47,332 --> 00:01:51,386
a project that came out of the Gitops working group under the CNCF,

25
00:01:51,578 --> 00:01:55,146
where we kind of define what Gitops is. And that's one of the reasons

26
00:01:55,178 --> 00:01:58,866
why I'm holding a stock. I'm one of

27
00:01:58,888 --> 00:02:02,382
the founders of, well, a lot of things, but cloud native

28
00:02:02,446 --> 00:02:06,310
Norway is one of the newest ones. It's so new that it's actually not fully

29
00:02:06,650 --> 00:02:09,926
actually founded, but we're going to do

30
00:02:10,028 --> 00:02:14,038
live events and things like that, but also whole like the

31
00:02:14,044 --> 00:02:17,110
aim here is to do Kubernetes community

32
00:02:17,180 --> 00:02:21,074
days here in Norway. I'm also in the azure cloud native

33
00:02:21,122 --> 00:02:24,426
user group where we're doing a lot of meetups, so feel free to. If you

34
00:02:24,448 --> 00:02:28,346
look on Meetup, you'll probably find us there. And we're doing everything online, so I

35
00:02:28,368 --> 00:02:31,722
know it says location on the meetup because that's just how Meetup.com

36
00:02:31,776 --> 00:02:36,142
works, but it's fully online and everything like that

37
00:02:36,276 --> 00:02:39,886
also. Or the founder of Norwegian Powershell user Group, which has

38
00:02:39,908 --> 00:02:43,134
been a little bit neglected lately, but I'm going to get back to that also.

39
00:02:43,172 --> 00:02:46,354
I'm trying to put something interesting here, like talk

40
00:02:46,392 --> 00:02:49,666
about myself. I just don't know how to do it properly. But my

41
00:02:49,688 --> 00:02:52,930
interest is in music. I'm a former musician.

42
00:02:54,150 --> 00:02:57,826
Well, I play a little bit, but I'm former actual musician

43
00:02:57,858 --> 00:03:01,554
and I'm into the metal and progressive

44
00:03:01,602 --> 00:03:04,774
music space. So wide area of interest there.

45
00:03:04,812 --> 00:03:08,386
But also gaming, like retro gaming, rhythm games,

46
00:03:08,418 --> 00:03:11,846
because I like music and shoot them ups and stuff

47
00:03:11,868 --> 00:03:15,814
like that. And I'm a film buff. That means I don't actually watch films

48
00:03:15,862 --> 00:03:19,706
that are new, but I watch a lot of old films. So if any of

49
00:03:19,728 --> 00:03:23,374
those things interest you as well, feel free to reach out and talk about that

50
00:03:23,412 --> 00:03:27,022
as well. But anyway, our agenda for today is

51
00:03:27,076 --> 00:03:30,590
to do, first of all, a quick introduction to Gitops and

52
00:03:30,740 --> 00:03:34,158
actually a quick introduction to Terraform as well, just to make sure that everyone's on

53
00:03:34,164 --> 00:03:38,334
the same playing field there. Talk about how we can combine

54
00:03:38,382 --> 00:03:42,114
terraform in Githubs and then do a little demo of it,

55
00:03:42,152 --> 00:03:45,694
because obviously we want to see how it works. And hopefully

56
00:03:45,742 --> 00:03:49,320
the demo gas this time is on my side and

57
00:03:50,090 --> 00:03:51,640
we won't have any issues.

58
00:03:52,650 --> 00:03:56,870
So I usually start with this kind of like statement thing.

59
00:03:57,020 --> 00:04:00,922
Terraform stored in get automated with pipelines is not

60
00:04:00,976 --> 00:04:06,810
Gitops. The reason why I say that is when

61
00:04:06,880 --> 00:04:10,842
Gitops became a term, it was actually a description of

62
00:04:10,976 --> 00:04:14,554
can actual operational model. It has meaning

63
00:04:14,602 --> 00:04:18,734
behind it. A lot of people think of if you put stuff

64
00:04:18,772 --> 00:04:22,510
in git and you do your pipelines, you can call that Gitops,

65
00:04:23,190 --> 00:04:26,926
you can call it whatever you want. But in all honesty,

66
00:04:27,038 --> 00:04:30,706
honestly, it's just CI CD at

67
00:04:30,728 --> 00:04:33,650
that point. So it's just normal automation.

68
00:04:34,150 --> 00:04:37,762
The idea behind Gitops is to take that to a further length.

69
00:04:37,906 --> 00:04:41,254
It's about the continuous deployment part of this.

70
00:04:41,452 --> 00:04:45,302
When you're done with your CI CD and you have something

71
00:04:45,356 --> 00:04:49,014
that you want to deploy, do you need to

72
00:04:49,132 --> 00:04:52,726
actually sit there and define imperative

73
00:04:52,838 --> 00:04:56,634
steps that says, I want to deploy this to this

74
00:04:56,672 --> 00:04:59,786
location and so on and so forth? Probably not. You just want it to be

75
00:04:59,808 --> 00:05:03,634
deployed right. So that is what Gitops is. Git ops

76
00:05:03,702 --> 00:05:07,386
came from, was coined by WeWorks

77
00:05:07,578 --> 00:05:11,310
back in 2017. And the idea

78
00:05:11,380 --> 00:05:15,058
is that this is actually what we wanted to do all the time,

79
00:05:15,144 --> 00:05:20,546
but we haven't had the technology, proper technology to do it at in

80
00:05:20,568 --> 00:05:24,020
the Githubs working group or the Open Gitops project.

81
00:05:24,550 --> 00:05:28,050
This was one of the things that we started off with first

82
00:05:28,120 --> 00:05:31,782
is actually creating some principle that if it follows these

83
00:05:31,836 --> 00:05:35,218
principles, this is actually git ups. I know my head is blocking,

84
00:05:35,234 --> 00:05:39,286
I got a thick head, but I'll try to get out of the way when

85
00:05:39,308 --> 00:05:42,970
I get to 0.4. But we have four principles

86
00:05:43,630 --> 00:05:47,798
and not to just read them off. The first one is about being declarative.

87
00:05:47,894 --> 00:05:51,834
The thing is that we cant our system state to be

88
00:05:51,872 --> 00:05:55,166
defined in a declarative fashion, meaning we don't want to say this

89
00:05:55,188 --> 00:05:58,654
is what you should do to get this to run. We just want to say

90
00:05:58,692 --> 00:06:02,302
this is how we want our system to look like. And based

91
00:06:02,356 --> 00:06:05,954
on that it should just be

92
00:06:05,992 --> 00:06:09,842
deployed by itself. We want it stored in some place

93
00:06:09,896 --> 00:06:14,050
that is versioned and immutable, which is why git works

94
00:06:14,120 --> 00:06:17,814
well for this. But that doesn't mean that git actually is the only

95
00:06:17,852 --> 00:06:21,122
place you can store stuff and still be git ops.

96
00:06:21,266 --> 00:06:25,046
The thing is that you have version and immutable as

97
00:06:25,068 --> 00:06:29,270
a concept, where you define your state, your desired

98
00:06:29,350 --> 00:06:33,974
state, once, and instead of creating

99
00:06:34,022 --> 00:06:37,706
new versions or tweaking the state, if there's something that's going to

100
00:06:37,728 --> 00:06:41,594
change, you want the entire version, an entire version to

101
00:06:41,632 --> 00:06:45,454
be supersede the previous one. This means

102
00:06:45,492 --> 00:06:48,830
that you have a complete version history, so that if something

103
00:06:48,900 --> 00:06:52,154
fails in your deployment, you can always roll back to the previous

104
00:06:52,202 --> 00:06:56,018
version and it will work right. So this

105
00:06:56,184 --> 00:06:59,234
works well with Git in our case, but that

106
00:06:59,272 --> 00:07:02,798
doesn't mean that an S true bucket or can azure

107
00:07:02,894 --> 00:07:06,434
storage account, blob storage, this actually

108
00:07:06,472 --> 00:07:10,274
works with that as well. We want it to be pulled automatically,

109
00:07:10,322 --> 00:07:13,698
so we don't want to push, we don't want to say this is now it's

110
00:07:13,714 --> 00:07:17,814
ready to be deployed. We want software agents to make

111
00:07:17,852 --> 00:07:21,526
sure that the desired state is always up to date. And then we have the

112
00:07:21,548 --> 00:07:24,946
continuous reconcile, which is we're pulling

113
00:07:24,978 --> 00:07:28,774
in the state as is. And then we

114
00:07:28,812 --> 00:07:32,686
want it to the soft brasions to

115
00:07:32,788 --> 00:07:37,402
actually make it so that the observed desired

116
00:07:37,466 --> 00:07:41,280
state is what happens in the actual system itself.

117
00:07:44,150 --> 00:07:47,842
This is best done in the

118
00:07:47,896 --> 00:07:51,426
world of kubernetes because of these principles. That doesn't mean that

119
00:07:51,448 --> 00:07:55,150
that has to be the case, but obviously this came

120
00:07:55,240 --> 00:07:58,290
from a Kubernetes perspective,

121
00:07:58,370 --> 00:08:02,246
and the tools were just there to do this

122
00:08:02,268 --> 00:08:03,590
in a proper fashion.

123
00:08:06,090 --> 00:08:10,066
Speaking of tools, there's two that are frequently

124
00:08:10,098 --> 00:08:13,820
referred to. It's the Argo CD and Flux project.

125
00:08:14,190 --> 00:08:17,434
Both of these are in the CNCF and both of them are

126
00:08:17,472 --> 00:08:20,762
actually a graduated project. So they've gone through the entire loop. They're officially

127
00:08:20,826 --> 00:08:24,426
certified or graduated from the CNCF,

128
00:08:24,618 --> 00:08:30,126
which has been a long journey. Argo CD works

129
00:08:30,228 --> 00:08:33,586
slightly different than flux. We're going to look at flux this

130
00:08:33,608 --> 00:08:37,810
time because the tools that we're using in this demonstration

131
00:08:38,150 --> 00:08:41,586
is more flux centric. But that

132
00:08:41,608 --> 00:08:44,926
doesn't mean that you cant do terraform with Argo CD.

133
00:08:45,038 --> 00:08:48,198
It just means that the tools that I'm showing off here is probably not going

134
00:08:48,204 --> 00:08:51,954
to work. Speaking of Argo

135
00:08:52,082 --> 00:08:56,018
about flux, this is a high level drawing that I just stole

136
00:08:56,034 --> 00:08:59,778
from the flux cud website. This just shows all

137
00:08:59,804 --> 00:09:03,578
the different components of flux. And as you can

138
00:09:03,584 --> 00:09:06,838
see here we have some controllers and these are the controllers

139
00:09:06,854 --> 00:09:10,474
that are actually making everything work. So you have your source

140
00:09:10,522 --> 00:09:14,190
controller. This is the controller that actually looks

141
00:09:14,260 --> 00:09:17,706
at the states in your version

142
00:09:17,738 --> 00:09:21,630
control and pulls in

143
00:09:21,700 --> 00:09:26,034
the newest data. Then we have our and

144
00:09:26,072 --> 00:09:30,398
that pulls down the data and it writes that directly into the Kubernetes API

145
00:09:30,494 --> 00:09:34,542
through the sources and customizations, custom resource

146
00:09:34,606 --> 00:09:38,898
definitions. And based on that you have a customized controller

147
00:09:38,994 --> 00:09:42,274
which takes basically just like your manifest,

148
00:09:42,322 --> 00:09:45,842
right? It can either be plain manifest

149
00:09:45,906 --> 00:09:49,450
or it can be using customizations

150
00:09:49,870 --> 00:09:53,354
which is just a template, a way of

151
00:09:53,392 --> 00:09:56,330
templating your Kubernetes manifests.

152
00:09:57,150 --> 00:10:01,014
There's more power there, but at the same time it gets more confusing

153
00:10:01,062 --> 00:10:03,886
if you're totally new to it. So we're probably going to look at both in

154
00:10:03,908 --> 00:10:07,066
this. There's also a helm controller. So when you're doing helm

155
00:10:07,098 --> 00:10:10,222
deployments, it can actually keep

156
00:10:10,356 --> 00:10:13,546
control over your helm deployments and everything like that. You don't

157
00:10:13,578 --> 00:10:17,614
need to use that, but it's a different process than customize because customize

158
00:10:17,662 --> 00:10:21,746
is just kubectl. Basically it's built into your

159
00:10:21,768 --> 00:10:25,606
CLI tooling and helm is a different tool. So that's why those two

160
00:10:25,628 --> 00:10:29,494
are there. There's also a notification controller and things

161
00:10:29,532 --> 00:10:32,998
like that, but that's something we're not going

162
00:10:33,004 --> 00:10:36,840
to look at. These are basically what we're going to be using.

163
00:10:39,070 --> 00:10:43,082
So terraform, in case you don't know what that is, it is

164
00:10:43,216 --> 00:10:46,538
seen as an infrastructureascode, as code tool.

165
00:10:46,704 --> 00:10:50,090
However, it actually works with basically everything that has an API.

166
00:10:50,670 --> 00:10:54,186
It is declarative. So again you

167
00:10:54,208 --> 00:10:57,822
don't say I want to do step one to step

168
00:10:57,876 --> 00:11:01,806
five. You define your resources in a declarative fashion and

169
00:11:01,828 --> 00:11:05,380
then terraform works with the API to make it so

170
00:11:06,150 --> 00:11:09,582
it's modular. Everything's a module. So when you're

171
00:11:09,646 --> 00:11:13,154
writing terraform, have that in the folder and you run terraform on that.

172
00:11:13,192 --> 00:11:16,630
That's what we call a root module. And then you have child

173
00:11:16,700 --> 00:11:20,280
or resource modules, depending on what you want to call it, that you can then

174
00:11:20,890 --> 00:11:24,070
reuse code in different root modules.

175
00:11:24,490 --> 00:11:27,934
These root modules and resource modules

176
00:11:28,002 --> 00:11:31,994
take inputs and outputs. So you can put

177
00:11:32,032 --> 00:11:35,910
in some information that you need to use, for instance like a deployment

178
00:11:35,990 --> 00:11:39,866
name, a location and so on

179
00:11:39,888 --> 00:11:43,054
and so forth. And then you can output stuff which then can be used by

180
00:11:43,092 --> 00:11:46,954
other modules. So that's how they kind of talk between modules.

181
00:11:47,082 --> 00:11:50,522
It's also stateful. So it has what's called a terraform

182
00:11:50,586 --> 00:11:54,180
state file. That's something you need to take care of,

183
00:11:56,470 --> 00:11:59,774
which is part of why the TF

184
00:11:59,822 --> 00:12:03,234
controller from Weworks works so well for this. So the TF controller from

185
00:12:03,272 --> 00:12:06,946
WeWorks is a project where they're

186
00:12:06,978 --> 00:12:10,662
building on top of flux, which is again, why this

187
00:12:10,716 --> 00:12:13,906
wouldn't work with Argo CD in an easy fashion.

188
00:12:13,938 --> 00:12:17,586
But this works with Flux. So the source

189
00:12:17,698 --> 00:12:21,302
controller is used as a way of

190
00:12:21,356 --> 00:12:24,620
getting the information that the DF controllers is doing.

191
00:12:24,990 --> 00:12:28,474
And it's creating a custom resource for

192
00:12:28,512 --> 00:12:32,038
terraform. So you can define your terraform as a

193
00:12:32,144 --> 00:12:35,278
resource in the Kubernetes API. It also does a

194
00:12:35,284 --> 00:12:39,354
lot of lifecycle management. So for instance, if you don't

195
00:12:39,402 --> 00:12:43,086
define that, your state is supposed terraform state is supposed to be somewhere

196
00:12:43,118 --> 00:12:46,930
else. It would actually keep that in the Kubernetes cluster as a secret,

197
00:12:47,910 --> 00:12:51,346
and thus it can manage state in

198
00:12:51,368 --> 00:12:54,866
that sense. Obviously in production you want your

199
00:12:54,888 --> 00:12:58,806
state to be probably somewhere else. But for testing and

200
00:12:58,828 --> 00:13:01,320
demo like I'm doing now, this is perfect.

201
00:13:02,330 --> 00:13:06,070
It also has for instance, a dependency

202
00:13:08,170 --> 00:13:11,546
attribute. So we're going to look specifically at

203
00:13:11,568 --> 00:13:15,994
that, how we can kind of build up these deployments that are done

204
00:13:16,032 --> 00:13:19,580
in succession and reference each other.

205
00:13:22,370 --> 00:13:25,674
All right, so that was about it. I'm going to jump

206
00:13:25,722 --> 00:13:30,270
right into visual studio code. Hopefully everything

207
00:13:30,420 --> 00:13:33,700
works fine there. Let's see if I can find it. Here we go.

208
00:13:34,630 --> 00:13:38,706
So just an explanation of what you're seeing here. I got

209
00:13:38,888 --> 00:13:43,086
a double check. I got a visual

210
00:13:43,118 --> 00:13:47,062
studio code up here with a terminal. The terminal has k

211
00:13:47,116 --> 00:13:50,886
nine s or k nine s, which is

212
00:13:50,908 --> 00:13:55,014
basically a CLI, visual CLI tool. So what you're looking at

213
00:13:55,052 --> 00:13:58,962
here is a relatively blank Kubernetes

214
00:13:59,026 --> 00:14:02,070
cluster running kind on my local machine.

215
00:14:02,410 --> 00:14:05,670
Flux and all other Githubs tools

216
00:14:05,750 --> 00:14:09,434
work with any Kubernetes cluster, so that doesn't matter. But this

217
00:14:09,472 --> 00:14:12,926
is just for demonstration purposes. So I have that so we can visually look at

218
00:14:12,948 --> 00:14:16,410
what's happening. This git repository,

219
00:14:16,570 --> 00:14:20,282
it's on my account on GitHub.

220
00:14:20,346 --> 00:14:23,694
It's called GitHubs terraform or terraform githubs. No,

221
00:14:23,732 --> 00:14:27,442
GitHubs terraform. So everything that I'm doing here

222
00:14:27,496 --> 00:14:30,962
is available there. It's a little bit of a mess because I've been using this

223
00:14:31,016 --> 00:14:34,994
back and forth in different presentations and hopefully I'll get to at some

224
00:14:35,032 --> 00:14:36,920
point clean up a little bit.

225
00:14:37,770 --> 00:14:41,174
But in itself, if you can follow along here,

226
00:14:41,292 --> 00:14:43,878
then you can go in there and get the code if you want to.

227
00:14:43,964 --> 00:14:47,510
So I have some terraform files.

228
00:14:48,110 --> 00:14:51,434
I have one called greetings, which is a really simple,

229
00:14:51,552 --> 00:14:55,142
like a hello world type thing where I take an input

230
00:14:55,206 --> 00:14:59,574
called greeting and I takes an input called subject.

231
00:14:59,702 --> 00:15:04,350
And as you can see here, it defaults to hello GitHub stays

232
00:15:05,570 --> 00:15:09,646
and it formats and outputs the

233
00:15:09,668 --> 00:15:13,294
message. So this

234
00:15:13,332 --> 00:15:17,138
was written while doing a demonstration actually on this for

235
00:15:17,224 --> 00:15:20,642
GitHub stays. So we're going to override those with

236
00:15:20,696 --> 00:15:24,546
actual inputs. But this is just like a simple test to

237
00:15:24,568 --> 00:15:27,734
make sure that everything works. And what I'm going to do

238
00:15:27,852 --> 00:15:31,750
in the background here, I'm going to bootstrap flux,

239
00:15:32,570 --> 00:15:36,482
point it towards this particular folder

240
00:15:36,626 --> 00:15:40,438
where I have a flux

241
00:15:40,534 --> 00:15:44,406
systems. This usually will get overwritten,

242
00:15:44,518 --> 00:15:48,410
but there's a customization here that

243
00:15:48,560 --> 00:15:52,874
takes in what's called the GitHubs

244
00:15:53,002 --> 00:15:56,474
toolkit components, which is the original name of flux

245
00:15:56,602 --> 00:16:00,106
version two. But I'm also adding

246
00:16:00,138 --> 00:16:03,650
on a TF controllers YaML file, and if you look at

247
00:16:03,720 --> 00:16:07,198
that one, it's setting up a helm repository

248
00:16:07,374 --> 00:16:10,690
and a helm release for the TF controller.

249
00:16:11,350 --> 00:16:14,654
So what this will do is not only bootstrap flux,

250
00:16:14,702 --> 00:16:17,590
but it will also install the terraform controllers.

251
00:16:19,130 --> 00:16:22,902
And we have a greeting Yaml here.

252
00:16:22,956 --> 00:16:25,942
Sorry, I just need to make sure that I get this in the right order

253
00:16:25,996 --> 00:16:29,138
so we're all paying attention where I

254
00:16:29,164 --> 00:16:32,842
have a customization, but this one is depending on the flux system one.

255
00:16:32,896 --> 00:16:36,474
So we cant our terraform controller to get in

256
00:16:36,512 --> 00:16:39,914
because that has the CRD. So if

257
00:16:39,952 --> 00:16:43,198
we didn't do that, it will start complaining about

258
00:16:43,284 --> 00:16:46,640
CRD missing. Let's see,

259
00:16:47,730 --> 00:16:50,366
clean up so you don't see all the mess that I've been doing.

260
00:16:50,548 --> 00:16:54,330
So the idea here is that we'll bootstrap

261
00:16:54,410 --> 00:16:57,546
this cluster with flux, and TF

262
00:16:57,578 --> 00:17:01,266
controllers will also be part of the deployment and the greetings one.

263
00:17:01,448 --> 00:17:05,454
So we're running the flux bootstrap command

264
00:17:05,502 --> 00:17:10,534
for GitHub, pointing it towards saying that I'm the owner putting

265
00:17:10,572 --> 00:17:14,006
in the repository and we have to put in a little flag that

266
00:17:14,028 --> 00:17:17,170
says this is a personal one because this is not owned by an organization,

267
00:17:17,250 --> 00:17:20,642
this is an actual user's git repository.

268
00:17:20,786 --> 00:17:23,862
And then again, like I said, pointing against the path.

269
00:17:24,006 --> 00:17:27,498
So if we do that, it will do a lot of things and it

270
00:17:27,504 --> 00:17:31,198
says it will install the components. What I want to do is just jump in

271
00:17:31,204 --> 00:17:34,910
here and see these controllers starting to run.

272
00:17:35,060 --> 00:17:36,480
We then look at custom,

273
00:17:38,290 --> 00:17:40,880
let's not break k nine s.

274
00:17:41,730 --> 00:17:46,114
If you look at the customization, we can see that the

275
00:17:46,152 --> 00:17:50,162
flux system customization has already been pulled in

276
00:17:50,296 --> 00:17:55,042
and it says applied revision and then it referenced a get

277
00:17:55,176 --> 00:17:59,094
hash or commercial hash. So that

278
00:17:59,132 --> 00:18:02,594
means that we should have now a terraform,

279
00:18:02,722 --> 00:18:06,150
which we do, that says, that's called greet folks.

280
00:18:07,710 --> 00:18:09,100
That is this one.

281
00:18:11,230 --> 00:18:14,890
And as we can see here, we have it set to approve plan

282
00:18:14,960 --> 00:18:18,086
auto. You can have this to manually approve.

283
00:18:18,278 --> 00:18:20,700
However, the way that I see it,

284
00:18:23,470 --> 00:18:28,906
if you don't have it set to automatically approve,

285
00:18:29,018 --> 00:18:31,280
then we're kind of not doing Gitops again,

286
00:18:32,630 --> 00:18:36,094
that is something for a topic to be discussed.

287
00:18:36,222 --> 00:18:39,794
I feel that the entire idea behind Gitops is that

288
00:18:39,912 --> 00:18:46,214
deployment should be continuous and it

289
00:18:46,252 --> 00:18:48,920
should just work. Right. Anyway,

290
00:18:49,930 --> 00:18:53,954
that's beside the point. So here we're putting in variables

291
00:18:54,082 --> 00:18:58,706
for the greeting, changing that salutations, subject to files.

292
00:18:58,898 --> 00:19:02,426
And then we're writing the output to a secret. So if we

293
00:19:02,448 --> 00:19:06,326
look now we have a secret. Well, we have several

294
00:19:06,358 --> 00:19:09,946
secrets. I just created some in the background without you noticing. I'll get back to

295
00:19:09,968 --> 00:19:14,074
that. But we have one says greeting output. We have one that says TF

296
00:19:14,122 --> 00:19:17,754
plan default greet files and we have in TF

297
00:19:17,802 --> 00:19:19,950
state default greet folks.

298
00:19:20,690 --> 00:19:24,514
So when you're doing a terraform plan, what you usually

299
00:19:24,552 --> 00:19:29,106
do in a pipeline is that if

300
00:19:29,128 --> 00:19:32,386
you're doing a terraform plan, if you don't output that into a

301
00:19:32,408 --> 00:19:36,046
plan files, if you're then going to do can approval

302
00:19:36,078 --> 00:19:39,746
step and make sure that you say this

303
00:19:39,768 --> 00:19:43,046
is what's going to happen, do you want to approve it? If you don't put

304
00:19:43,148 --> 00:19:46,262
the plan into a file, you could potentially have a different result

305
00:19:46,316 --> 00:19:50,086
the next time you're running. If you're going to run it again with TF apply.

306
00:19:50,268 --> 00:19:54,246
So you usually put it into file. In this case this TF

307
00:19:54,278 --> 00:19:58,122
controllers puts that in as a

308
00:19:58,176 --> 00:20:01,686
secret. So if you look into the TF plan,

309
00:20:01,728 --> 00:20:05,454
you have a TF plan data, you also have a

310
00:20:05,492 --> 00:20:09,422
state, like I said, if you don't do anything, it will actually keep track of

311
00:20:09,476 --> 00:20:12,734
the state file itself in the

312
00:20:12,772 --> 00:20:15,070
Kubernetes cluster as a secret,

313
00:20:16,210 --> 00:20:19,986
which obviously you could then export and then, but somewhere else if

314
00:20:20,008 --> 00:20:24,034
you want to take a backup of it, so on and so forth. But more

315
00:20:24,072 --> 00:20:27,574
importantly we have this greeting output. I'm going to press X to

316
00:20:27,692 --> 00:20:30,520
decrypt it. Sorry.

317
00:20:33,210 --> 00:20:36,280
And now it says salutation folks. Right,

318
00:20:36,890 --> 00:20:40,602
so this

319
00:20:40,656 --> 00:20:43,834
is basically the workflow you can have

320
00:20:43,872 --> 00:20:47,466
these automatically run if you can

321
00:20:47,488 --> 00:20:51,150
put the outputs into a secret and then you can reference that

322
00:20:51,220 --> 00:20:54,798
back and forth. So this is not a great example.

323
00:20:54,964 --> 00:20:58,654
This is just literally running

324
00:20:58,772 --> 00:21:02,426
the most basic terraform ever, just taking inputs

325
00:21:02,458 --> 00:21:04,450
and then exporting that as an output.

326
00:21:05,270 --> 00:21:09,426
What we want to do is put in a new,

327
00:21:09,608 --> 00:21:12,914
to show off a little bit more capabilities we're using to put in a new

328
00:21:12,952 --> 00:21:17,206
customization which have an example of

329
00:21:17,308 --> 00:21:20,742
using dependencies. And if we

330
00:21:20,796 --> 00:21:24,454
look at examples we'll see we got a bunch of

331
00:21:24,492 --> 00:21:28,054
files here. We first of all look at the terraform ones. We have

332
00:21:28,092 --> 00:21:30,490
a root module for shared resources.

333
00:21:32,270 --> 00:21:35,846
This is where we're going to create some azure resource groups

334
00:21:35,878 --> 00:21:38,630
to have stuff in. We're going to put in a virtual network,

335
00:21:38,790 --> 00:21:42,718
we're going to do some security groups for that virtual network and then

336
00:21:42,804 --> 00:21:47,054
we are going to export that. So we're exporting the subnet id and

337
00:21:47,172 --> 00:21:52,400
we're exporting the resource group name because

338
00:21:53,250 --> 00:21:57,246
we have these shared resources. We want several virtual

339
00:21:57,278 --> 00:22:01,362
machines, for instance in this case this example, to be deployed into

340
00:22:01,416 --> 00:22:05,378
the same resource group in the same subnet, et cetera, et cetera. So we're creating

341
00:22:05,394 --> 00:22:08,694
these resources and then we have a workload which is basically just

342
00:22:08,732 --> 00:22:09,590
a vm.

343
00:22:12,410 --> 00:22:15,798
We create a network interface that is using that subnet id.

344
00:22:15,964 --> 00:22:19,810
We have a virtual machine that just gets deployed and

345
00:22:19,820 --> 00:22:23,238
we have an admin password that we're

346
00:22:23,254 --> 00:22:26,586
going to be using. So in the background here

347
00:22:26,688 --> 00:22:30,006
I put in two things. I put in a secret for the workload ids

348
00:22:30,038 --> 00:22:33,374
because we want these secrets to come in from somewhere else.

349
00:22:33,412 --> 00:22:36,878
We don't want to store that in git. You could do that

350
00:22:37,044 --> 00:22:40,506
if you're using sops or something like that to encrypt

351
00:22:40,538 --> 00:22:44,106
your secrets. But for demonstrations

352
00:22:44,138 --> 00:22:48,066
I'm just like putting the secrets in manual in the cluster while you're not

353
00:22:48,088 --> 00:22:51,266
looking. And then we're going to run the

354
00:22:51,288 --> 00:22:54,830
shared resource one. We're going to disable the backend

355
00:22:54,910 --> 00:22:59,270
config. So we're not going to store stuff in the Kubernetes cluster.

356
00:23:00,250 --> 00:23:04,306
I have put in a secret for, well, it says here terraform enterprise

357
00:23:04,338 --> 00:23:08,342
Cli config. It's basically just a token for terraform

358
00:23:08,406 --> 00:23:11,786
cloud. So I have a token for terraform cloud which means that

359
00:23:11,808 --> 00:23:14,090
I can use that as my backend.

360
00:23:15,390 --> 00:23:19,798
And we're putting in the variables, deployment name and location

361
00:23:19,974 --> 00:23:23,682
and we're going to write our outputs to a secret.

362
00:23:23,766 --> 00:23:27,390
And this secret is then going to be used by a workload,

363
00:23:27,970 --> 00:23:31,054
one which is doing exactly the same thing as the other one.

364
00:23:31,092 --> 00:23:34,594
But it has a depends on. So it

365
00:23:34,632 --> 00:23:38,126
actually will wait until the previous or the shared

366
00:23:38,158 --> 00:23:41,854
resources one is deployed in a proper fashion.

367
00:23:41,982 --> 00:23:45,214
So if we look at the customizations

368
00:23:45,262 --> 00:23:50,934
here and if we go into our

369
00:23:50,972 --> 00:23:54,550
customization file uncomment,

370
00:23:58,030 --> 00:24:01,862
it's kind of fun using conventional commits to stylize

371
00:24:01,926 --> 00:24:05,802
in a proper fashion, something that's basically just not

372
00:24:05,856 --> 00:24:09,526
really that important. But I'm

373
00:24:09,558 --> 00:24:11,900
just doing this because. I'm sorry,

374
00:24:12,750 --> 00:24:16,126
hold on to your hats, I need

375
00:24:16,148 --> 00:24:19,486
to fix that. I'm on a new computer, sorry. And now

376
00:24:19,508 --> 00:24:22,080
I'm going to sync the changes up and as soon as I do,

377
00:24:22,950 --> 00:24:29,074
well as soon as I do, after a while the

378
00:24:29,112 --> 00:24:32,306
source controller will see that there's a change here and

379
00:24:32,408 --> 00:24:36,790
we'll actually pull it down and apply that. Which means that our customization,

380
00:24:39,850 --> 00:24:43,734
this one will then pop in. If that takes

381
00:24:43,772 --> 00:24:46,694
a little bit of time, never mind. It can take a little bit of time

382
00:24:46,732 --> 00:24:50,634
to do that because it's on can interval but

383
00:24:50,672 --> 00:24:53,866
you can force reconcile it.

384
00:24:53,968 --> 00:24:57,146
But it's already done that. So if

385
00:24:57,168 --> 00:25:00,622
we now look at Terraform we can see that we have two

386
00:25:00,676 --> 00:25:04,202
more. We have the shared resource and workload.

387
00:25:04,266 --> 00:25:07,914
And the workload one specifically says that dependency flux

388
00:25:07,962 --> 00:25:11,086
system shared resources is not ready so

389
00:25:11,188 --> 00:25:14,782
it can't do anything. And if you see the other one is now

390
00:25:14,916 --> 00:25:18,866
saying that it's doing a plan. So if we look every

391
00:25:18,888 --> 00:25:22,894
time you put in this, it actually spins up a pod that is a runner

392
00:25:22,942 --> 00:25:26,582
and it runs the code for you. Let me just check my time

393
00:25:26,636 --> 00:25:30,134
here. And what we can do is

394
00:25:30,172 --> 00:25:33,686
we can open this hopefully. There you

395
00:25:33,708 --> 00:25:38,682
go and see the plan run in terraform cloud but

396
00:25:38,816 --> 00:25:42,410
in itself just like if you did this through a CLI,

397
00:25:42,830 --> 00:25:46,346
you will also get this in

398
00:25:46,368 --> 00:25:49,340
your CLI tool. So as you can see here,

399
00:25:50,510 --> 00:25:54,826
it started, it did a check. These resources are already existing

400
00:25:54,858 --> 00:25:57,870
because I didn't want to take any chances with the demo gods.

401
00:25:58,370 --> 00:26:01,710
But it runs over and makes sure that everything's good and

402
00:26:01,780 --> 00:26:05,170
when that's done it destroys that

403
00:26:05,240 --> 00:26:08,386
pod because it's done. However, now if

404
00:26:08,408 --> 00:26:09,780
you look at the terraform one,

405
00:26:13,350 --> 00:26:17,366
it wrote the outputs to a file and

406
00:26:17,388 --> 00:26:21,270
it said the ready state is now set to true.

407
00:26:21,340 --> 00:26:25,138
So as soon as the reconciliation process for workflow

408
00:26:25,234 --> 00:26:28,294
one triggers which I think is set to 1 minute

409
00:26:28,342 --> 00:26:31,994
I hope. Yes. So this should happen pretty quickly. It will

410
00:26:32,032 --> 00:26:36,198
look and see. Oh my dependent terraform

411
00:26:36,294 --> 00:26:39,498
resource is ready. So everything's good. So I

412
00:26:39,504 --> 00:26:43,022
can start do my stuff and

413
00:26:43,076 --> 00:26:46,734
like I said, hopefully that will happen pretty soon. There we go. So this

414
00:26:46,772 --> 00:26:49,994
now does the same thing. Now it spins

415
00:26:50,042 --> 00:26:53,806
up a new workload runner or a terraform runner.

416
00:26:53,838 --> 00:26:56,610
Sorry. On the workload one resource,

417
00:26:57,750 --> 00:27:00,814
in this case, like mentioned, I have deployment

418
00:27:00,862 --> 00:27:04,466
name and location, but it also takes in the

419
00:27:04,488 --> 00:27:08,726
workload secrets, which is more or less just not

420
00:27:08,748 --> 00:27:12,920
even sure what that is. It's the admin password. Let me double check.

421
00:27:14,810 --> 00:27:18,378
Yeah, it's the admin password and deployment name. So I'm overriding the

422
00:27:18,384 --> 00:27:20,700
deployment name because why not?

423
00:27:21,470 --> 00:27:26,140
And then it also pulls in as variables the

424
00:27:26,830 --> 00:27:30,554
subnet id and the resource group name

425
00:27:30,672 --> 00:27:34,250
from the shared resource one. And then it's using that to do the deployment.

426
00:27:34,410 --> 00:27:37,902
And I think this one got deleted, so it might take a little.

427
00:27:37,956 --> 00:27:40,880
All right. I don't know, it's just refreshing. State, no changes. Cool.

428
00:27:41,570 --> 00:27:44,642
So as you can tell, this is how we can

429
00:27:44,696 --> 00:27:48,702
do a dependency chain

430
00:27:48,766 --> 00:27:52,402
here. So you have a certain root module that is dependent on

431
00:27:52,456 --> 00:27:56,274
different resources. So you can kind of like build up a little bit more complex

432
00:27:56,402 --> 00:27:58,280
scenario in that sense.

433
00:27:59,370 --> 00:28:03,206
But one of the main things why I really like this

434
00:28:03,228 --> 00:28:06,834
way of doing terraform is because I'm

435
00:28:06,882 --> 00:28:11,042
building platforms on kubernetes and

436
00:28:11,196 --> 00:28:14,698
while I can program and go and I

437
00:28:14,704 --> 00:28:18,234
can make all this kind of a little bit more complicated things work

438
00:28:18,272 --> 00:28:22,062
and create APIs and so on and so forth, many people

439
00:28:22,116 --> 00:28:24,430
that I work with who are doing infrastructureascode,

440
00:28:25,970 --> 00:28:29,134
it's a big learning curve to start learning to program. If you're a more

441
00:28:29,172 --> 00:28:32,850
traditional infrastructure or cloud operational person,

442
00:28:32,920 --> 00:28:36,510
like doing terraform relatively easily,

443
00:28:36,590 --> 00:28:40,034
it's not really that hard. So by doing

444
00:28:40,072 --> 00:28:44,002
it through this fashion, like what I usually

445
00:28:44,056 --> 00:28:48,118
say to people, if you can put your things into

446
00:28:48,284 --> 00:28:51,926
a terraform file and make sure that you can repeat it

447
00:28:51,948 --> 00:28:55,222
over and over again so you have the proper inputs and

448
00:28:55,356 --> 00:28:58,666
you know, if there's a dependency for down the line, that you do

449
00:28:58,688 --> 00:29:02,474
your proper outputs. If you just do that, we can put it into

450
00:29:02,512 --> 00:29:06,700
this and then we can create basically a platform for

451
00:29:08,910 --> 00:29:13,162
automatic deployment of infrastructure and more using terraform

452
00:29:13,226 --> 00:29:16,878
as one of the base tools, which is kind

453
00:29:16,884 --> 00:29:21,070
of like a standard in our industry. So while

454
00:29:21,140 --> 00:29:24,930
the terraform part of this is just like plain straight terraform,

455
00:29:25,750 --> 00:29:30,050
we as platform engineers can kind of facilitate

456
00:29:30,710 --> 00:29:33,650
this automation in a more proper fashion.

457
00:29:35,130 --> 00:29:39,122
There's plenty of things that you can do with this. I highly

458
00:29:39,186 --> 00:29:45,334
suggest that you look into it and look

459
00:29:45,372 --> 00:29:49,110
into it. Make sure that if you are doing terraform,

460
00:29:49,770 --> 00:29:52,760
give this a try. It's relatively easy to get running.

461
00:29:53,130 --> 00:29:56,662
I basically did the entire thing from scratch here. But if there is anything

462
00:29:56,716 --> 00:29:59,878
that you're thinking about or want

463
00:29:59,884 --> 00:30:03,280
to discuss or something, feel free to just

464
00:30:03,730 --> 00:30:07,774
yell at me. I'm preferably on LinkedIn or through email and

465
00:30:07,812 --> 00:30:10,960
I'll make sure to help as much as possible.

466
00:30:11,410 --> 00:30:15,310
Thanks for having me here for comfort to DevOps 2023.

467
00:30:15,380 --> 00:30:19,374
I hope this was valuable and I

468
00:30:19,412 --> 00:30:21,740
hope to be back someday, so thank you.

