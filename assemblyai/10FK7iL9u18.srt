1
00:02:15,250 --> 00:02:18,542
Hey, let's start with a story. One of my first

2
00:02:18,596 --> 00:02:21,806
coding jobs was at a company called Gocardless. I'd been

3
00:02:21,828 --> 00:02:25,806
there for a few months when we had a major incident. Our API, which was

4
00:02:25,828 --> 00:02:29,374
basically our entire product, had slowed to a crawl. I was pretty

5
00:02:29,412 --> 00:02:33,098
curious, so I jumped into the incident channel. We figured

6
00:02:33,114 --> 00:02:36,486
out that a particular endpoint was causing the issue by sending a

7
00:02:36,508 --> 00:02:40,994
bad query to our large postgres database, which was now struggling.

8
00:02:41,122 --> 00:02:44,502
We disabled the bad endpoint to get the rest of the system up and running

9
00:02:44,556 --> 00:02:48,086
again, and it worked. Then we had to understand what

10
00:02:48,108 --> 00:02:51,414
had happened. There weren't any recent changes that looked suspicious.

11
00:02:51,542 --> 00:02:55,190
It turned out that the query plan for this particular query had changed

12
00:02:55,270 --> 00:02:58,682
from something that was expensive but manageable, to something

13
00:02:58,736 --> 00:03:02,294
that was not at all manageable. To make matters worse,

14
00:03:02,422 --> 00:03:05,854
there wasn't a timeout on the query, so the database would keep

15
00:03:05,892 --> 00:03:09,662
running the expensive task long after the person asking for it had given

16
00:03:09,716 --> 00:03:13,326
up. On ever getting a response. We made a subtle change to

17
00:03:13,348 --> 00:03:16,414
the query, which made the database revert to the good query

18
00:03:16,462 --> 00:03:19,986
plan. Everything was back up and running. We'd fixed it.

19
00:03:20,088 --> 00:03:23,486
Well, I say we. I watched quietly

20
00:03:23,518 --> 00:03:27,374
from the sidelines, furiously scribbling notes. After the incident

21
00:03:27,422 --> 00:03:31,398
was over, I turned to my colleague. What is a query plan?

22
00:03:31,564 --> 00:03:35,058
We'll come back to this in a second. Hey, I'm Lisa Karlin

23
00:03:35,074 --> 00:03:38,774
Curtis. Last year I joined incident IO as employee number

24
00:03:38,812 --> 00:03:42,918
two. We build an incident management platform for your whole organisation

25
00:03:43,094 --> 00:03:46,954
and incidents and incidents response are naturally very close to my heart

26
00:03:47,072 --> 00:03:51,542
and fundamentally things is a talk about why I've accelerated

27
00:03:51,606 --> 00:03:55,578
my career by running towards the fire. When I joined Gocardless

28
00:03:55,674 --> 00:03:59,386
I was a pretty junior engineer. I progressed very rapidly.

29
00:03:59,498 --> 00:04:03,434
I modes senior, honestly, quite a lot faster than I'd expected.

30
00:04:03,562 --> 00:04:06,946
I was reflecting on how that had happened and of course,

31
00:04:07,048 --> 00:04:10,574
like anything it was a number of factors. But a pattern

32
00:04:10,622 --> 00:04:14,274
stood out to me. The big step changes in my understanding and

33
00:04:14,312 --> 00:04:17,182
my ability to solve larger, more complex problems.

34
00:04:17,336 --> 00:04:20,866
Reason about tradeoffs came as a result of the incidents

35
00:04:20,898 --> 00:04:25,330
that I'd participated in or observed. I was introduced to new technologies,

36
00:04:25,490 --> 00:04:29,234
learned new skills and met people who became some of my closest

37
00:04:29,282 --> 00:04:32,806
friends. And every time I'd come out as a better engineer.

38
00:04:32,918 --> 00:04:37,126
So things is why I love incidents. Incidents broaden your horizons.

39
00:04:37,318 --> 00:04:40,810
As engineers, we live in a world full of black boxes,

40
00:04:41,230 --> 00:04:45,082
whether that's a programming language, a framework or a database,

41
00:04:45,226 --> 00:04:48,542
we learn how to use the interface and we move on.

42
00:04:48,676 --> 00:04:52,714
If we tried to understand how everything worked, down to the metal or the transistors

43
00:04:52,762 --> 00:04:56,030
in our laptops, we'd never get to ship,

44
00:04:56,190 --> 00:04:59,554
well anything. Incidents force you to open

45
00:04:59,592 --> 00:05:03,474
the black boxes around you, peek inside and learn just

46
00:05:03,512 --> 00:05:06,350
enough to solve the problem. After this incident,

47
00:05:06,510 --> 00:05:10,706
I read up on query plans and this proved really useful.

48
00:05:10,898 --> 00:05:14,518
It was not our last query plan related incident, far from it.

49
00:05:14,604 --> 00:05:18,134
It was also useful when I was building new things. I was

50
00:05:18,172 --> 00:05:21,526
suddenly able to write code that scaled well the first time.

51
00:05:21,708 --> 00:05:24,858
Seeing this stuff in real life helped me see into the

52
00:05:24,864 --> 00:05:28,826
crystal ball like my senior colleagues could and truly understand the

53
00:05:28,848 --> 00:05:31,846
impact of the tradeoffs we were making when talking to the database.

54
00:05:31,958 --> 00:05:35,818
Incidents give you great signal about which of these black boxes are worth opening

55
00:05:35,914 --> 00:05:39,134
and you get a real world example to use as a starting point.

56
00:05:39,252 --> 00:05:43,258
This all becomes particularly important if youre joining a larger engineering

57
00:05:43,354 --> 00:05:47,374
at the start you learn about the parts of your system which your team owns.

58
00:05:47,502 --> 00:05:51,470
You might get given a thousand foot view using your onboarding,

59
00:05:51,630 --> 00:05:54,914
but mostly you pick up context, bottom up as and

60
00:05:54,952 --> 00:05:58,834
when you encounter things. You'll also find that incidents don't respect

61
00:05:58,882 --> 00:06:02,354
team boundaries. They impact systems owned by multiple

62
00:06:02,402 --> 00:06:06,674
teams and that pushes you outside your team's remit. It's much more interactive

63
00:06:06,722 --> 00:06:10,246
than studying an architecture diagram, giving you handson experience of

64
00:06:10,268 --> 00:06:14,010
how the systems interact. It shows you how the puzzle pieces fit together,

65
00:06:14,160 --> 00:06:17,594
widening your proverbial lens to see the bigger picture and grow

66
00:06:17,632 --> 00:06:21,546
your context. And having that bigger picture gives you more information to

67
00:06:21,568 --> 00:06:25,146
make better choices for your own team. Incidents teach you to

68
00:06:25,168 --> 00:06:28,826
build systems that fail gracefully one of the key follow ups from the API

69
00:06:28,858 --> 00:06:32,186
incident was to add statement timeouts on all of our database calls.

70
00:06:32,298 --> 00:06:35,694
This meant that if we issued a bad query, postgres would

71
00:06:35,732 --> 00:06:39,026
try for maybe a few seconds, but it would then give up.

72
00:06:39,128 --> 00:06:42,610
This is an excellent example of resilient engineering. Our system

73
00:06:42,680 --> 00:06:46,114
can now handle unexpected failures. We don't need to know what will

74
00:06:46,152 --> 00:06:49,298
issue a bad query, just that it's likely that something will.

75
00:06:49,384 --> 00:06:53,186
It's possible to read about these ideas in a book, but nothing compares

76
00:06:53,218 --> 00:06:56,774
to seeing it in action. During this incident, I learned a whole

77
00:06:56,812 --> 00:07:00,790
set of tools that I could employ to reduce the blast radius of potential failures.

78
00:07:01,290 --> 00:07:04,826
Not just the statement timeouts which we implemented, but all the other

79
00:07:04,848 --> 00:07:08,486
options that the incidents levelup teams discussed and discarded.

80
00:07:08,678 --> 00:07:12,050
And I got to listen to the best people in the talk about the tradeoffs

81
00:07:12,070 --> 00:07:15,354
between them. Incidents teach you to make systems easier

82
00:07:15,402 --> 00:07:19,306
to debug. Observability isn't easy. I've shipped

83
00:07:19,338 --> 00:07:22,734
plenty of useless log lines and metrics in my time. To build

84
00:07:22,772 --> 00:07:26,314
genuinely observable systems, you need to have empathy for your future

85
00:07:26,372 --> 00:07:30,126
self or teammate who'll be debugging an issue, and that's

86
00:07:30,158 --> 00:07:33,394
hard to learn in abstract, the people I've worked with who do this

87
00:07:33,432 --> 00:07:37,586
well are constantly leaning on their experience of debugging issues,

88
00:07:37,768 --> 00:07:41,682
their pattern matching on what they've seen before, allowing them to identify

89
00:07:41,746 --> 00:07:45,746
useful places for logs and metrics. Incidents are a great shortcut

90
00:07:45,778 --> 00:07:49,266
to get this kind of experience and build a repository of patterns

91
00:07:49,298 --> 00:07:53,014
that you can recognize going forwards. Incidents build your network.

92
00:07:53,142 --> 00:07:57,174
They provide a great opportunity to meet people outside your team and forge

93
00:07:57,222 --> 00:08:00,970
strong relationships along the way. As psychologists have known for a while,

94
00:08:01,120 --> 00:08:05,082
there's something about going through a stressful situation with someone that forges

95
00:08:05,146 --> 00:08:08,186
a connection much more quickly than normal. Most of the engineering

96
00:08:08,218 --> 00:08:11,998
folks I met at Gocardless, I met apologies. Most of

97
00:08:12,004 --> 00:08:16,122
the non engineering folks I met during incidents, those relationships

98
00:08:16,186 --> 00:08:19,950
were really valuable. They gave me a mental map of the rest of the

99
00:08:20,030 --> 00:08:22,882
and meant that I had a friendly face I could talk to when I needed

100
00:08:22,936 --> 00:08:26,302
advice about customer support or sales or risk.

101
00:08:26,446 --> 00:08:29,894
As I became more senior, that network became increasingly important

102
00:08:30,012 --> 00:08:33,874
as I was responsible for larger and larger projects which impacted multiple

103
00:08:33,922 --> 00:08:37,494
teams and incidents are a chance to learn from the best when things

104
00:08:37,532 --> 00:08:41,286
go wrong when things go really wrong, people from

105
00:08:41,308 --> 00:08:44,922
all over the get pulled in to help fix it. But they're not just any

106
00:08:44,976 --> 00:08:48,634
people, they're the people with the most context, the most experience

107
00:08:48,832 --> 00:08:52,234
who everyone trusts to fix the problem. Getting to spend time

108
00:08:52,272 --> 00:08:55,626
with these roles is pretty rare. They're probably some of the busiest

109
00:08:55,658 --> 00:08:59,646
people in the company. Incidents provide a unique opportunity to learn from

110
00:08:59,668 --> 00:09:03,520
them and see firsthand how they approach a challenging problem.

111
00:09:03,890 --> 00:09:07,554
For me, the API incident gave me opportunities to learn much

112
00:09:07,592 --> 00:09:10,994
faster than I otherwise would have. Incidents have unusually high

113
00:09:11,032 --> 00:09:14,814
information density compared with day to day work, and they enable

114
00:09:14,862 --> 00:09:17,986
you to piggyback on the experience of others. Who knows how long

115
00:09:18,008 --> 00:09:20,998
it might have been before I'd realized that I really ought to know what a

116
00:09:21,004 --> 00:09:24,886
query plan was? Honestly, probably until my own code broke in.

117
00:09:24,908 --> 00:09:28,002
The same way I go cardless, I was lucky.

118
00:09:28,146 --> 00:09:31,302
Their culture and processes meant that I could see incident

119
00:09:31,366 --> 00:09:35,066
channels and follow along whenever I wanted, giving me

120
00:09:35,088 --> 00:09:38,554
this opportunity to accelerate. But that's not always the case.

121
00:09:38,752 --> 00:09:42,646
Some teams run incidents in private channels by default, operating an invite

122
00:09:42,678 --> 00:09:46,314
only policy. That means that junior team members who want to observe

123
00:09:46,362 --> 00:09:49,870
rather than participate probably don't even know that they're happening.

124
00:09:50,020 --> 00:09:52,794
Sometimes people are excluded from other for other reasons.

125
00:09:52,922 --> 00:09:56,330
It's not culturally encouraged to get involved. There's an

126
00:09:56,340 --> 00:10:00,194
in group they handle all the incidents and everyone else should just get

127
00:10:00,232 --> 00:10:03,714
out of the way. Joining that in group even as a new

128
00:10:03,752 --> 00:10:07,238
senior can become almost impossible. So let's look at what

129
00:10:07,244 --> 00:10:10,534
we can do to build a culture where everybody can learn from

130
00:10:10,572 --> 00:10:14,146
incidents. Let's look at building a culture where incidents

131
00:10:14,178 --> 00:10:18,306
are accessible first. Declare lots of incidents.

132
00:10:18,498 --> 00:10:22,030
If you only declare incidents when things get really bad, you won't

133
00:10:22,050 --> 00:10:25,738
get a chance to practice your incidents process. That means you

134
00:10:25,744 --> 00:10:28,906
won't be as good at running incidents, and also there won't be as

135
00:10:28,928 --> 00:10:32,438
many learning opportunities for your team. By lowering the bar for what counts

136
00:10:32,454 --> 00:10:35,582
as an incident when the really bad ones do come around,

137
00:10:35,716 --> 00:10:39,502
the response is a well oiled machine. It also helps with learning.

138
00:10:39,636 --> 00:10:43,818
When problems are handled as incidents, it makes them accessible to everybody else.

139
00:10:44,004 --> 00:10:47,838
It's a bit like an invitation. Encourage everyone to participate.

140
00:10:47,934 --> 00:10:51,874
As we've discussed, incidents are great learnings opportunities and

141
00:10:51,912 --> 00:10:55,566
so they should be accessible to everybody. Incidents channels

142
00:10:55,598 --> 00:10:59,626
have to be public by default and engagement encouraged at all levels.

143
00:10:59,758 --> 00:11:03,190
Of course, there can be too much of a good thing. Having 20 people

144
00:11:03,260 --> 00:11:07,010
descend into a minor incident channel may not be the best outcome,

145
00:11:07,170 --> 00:11:10,946
but most incidents can comfortably accommodate a few junior responders tagging

146
00:11:10,978 --> 00:11:14,250
along. And it doesn't have to come at the cost of a good response.

147
00:11:14,590 --> 00:11:18,522
You can get this experience in low risk environments either

148
00:11:18,576 --> 00:11:22,486
by asking questions to someone who's not actively responding to the incident, or writing

149
00:11:22,518 --> 00:11:26,286
them down and asking them after it's resolved. There are also other

150
00:11:26,308 --> 00:11:29,626
ways to gather learnings. Reading debrief documents or attending

151
00:11:29,658 --> 00:11:33,146
post incident reviews are both great ways of getting value from your team's

152
00:11:33,178 --> 00:11:37,270
incidents. I'd also recommend compiling a list of the best incident debriefs

153
00:11:37,290 --> 00:11:41,230
in your to share with everyone as part of your part of their onboarding,

154
00:11:41,310 --> 00:11:44,594
and maybe some public ones too. We all know which

155
00:11:44,632 --> 00:11:48,434
were the most interesting incidents. Why not share the love with new joiners too?

156
00:11:48,552 --> 00:11:51,842
Get into the habit of showing youre working in an incident.

157
00:11:51,906 --> 00:11:55,046
It's good practice to put as much information as you can into the

158
00:11:55,068 --> 00:11:59,298
incident channel. What command did you run? What theory have you disproved?

159
00:11:59,474 --> 00:12:02,486
If you're debugging on your own, this can admittedly

160
00:12:02,518 --> 00:12:05,914
feel a bit strange. I've personally been sat at 10:00 p.m.

161
00:12:05,952 --> 00:12:09,254
In an incident channel on more than one occasion, having a delightful

162
00:12:09,302 --> 00:12:12,570
conversation with myself. But it's worth it, I promise.

163
00:12:13,070 --> 00:12:16,398
It's useful for your response because it means that you don't have to rely on

164
00:12:16,404 --> 00:12:20,014
your memory to know exactly what youre already tried and when, which helps you

165
00:12:20,052 --> 00:12:23,514
avoid making bad assumptions, but it's also beneficial

166
00:12:23,562 --> 00:12:26,686
for your team. If this information is accessible,

167
00:12:26,798 --> 00:12:30,738
you're enabling everyone to learn from your experience. That means

168
00:12:30,824 --> 00:12:34,638
using public slack channels wherever possible and having central locations

169
00:12:34,734 --> 00:12:38,518
where everyone can go to find the incidents that they might be interested in.

170
00:12:38,604 --> 00:12:42,134
I'm a bit biased, but using an incident management platform really does

171
00:12:42,172 --> 00:12:45,910
help with this. And finally, watch out for anyone playing the hero.

172
00:12:46,650 --> 00:12:50,374
Often a single engineer takes on a lot of the incident response burden,

173
00:12:50,502 --> 00:12:53,290
fixing everything before anybody knows it's broken.

174
00:12:53,950 --> 00:12:57,260
Maybe that was you, maybe it still is.

175
00:12:57,790 --> 00:13:00,090
This doesn't really end well for the hero.

176
00:13:00,430 --> 00:13:04,102
Eventually, they'll stop getting as much credit as they think they deserve

177
00:13:04,166 --> 00:13:07,902
for fixing everything as it becomes normalized. No one's ever known anything

178
00:13:07,956 --> 00:13:11,726
else, and that makes them at risk of burning out, but it

179
00:13:11,748 --> 00:13:15,386
also causes problems for the rest of the team. Without meaning

180
00:13:15,418 --> 00:13:19,346
to, the hero is taking away these learning opportunities from everyone else

181
00:13:19,448 --> 00:13:21,730
by fixing things quietly in the corner.

182
00:13:22,390 --> 00:13:25,234
That means that no one else is ever going to be able to do what

183
00:13:25,272 --> 00:13:29,190
they do as effectively because no one's had enough practice.

184
00:13:30,250 --> 00:13:33,250
While that's maybe an effective job preservation tactic,

185
00:13:33,330 --> 00:13:35,960
it's not using to result in a high performing team.

186
00:13:37,130 --> 00:13:40,530
If you think that you get a lot of recognition for resolving incidents,

187
00:13:40,690 --> 00:13:44,006
imagine how much you'll get for leveling up your whole team so they can do

188
00:13:44,028 --> 00:13:48,066
the same. Thanks so much for listening. I really appreciate appreciate

189
00:13:48,098 --> 00:13:51,466
you coming along to this talk. If you're interested in incidents

190
00:13:51,498 --> 00:13:55,262
in general, we have a slack community at incident IO slash community,

191
00:13:55,396 --> 00:13:59,386
which I'd really love to see you there. I'm also on Twitter at patrickarti

192
00:13:59,418 --> 00:14:02,526
eng if you'd like to chat about anything that we've discussed today, and I really

193
00:14:02,548 --> 00:14:03,850
hope you enjoy the rest of the conference.

