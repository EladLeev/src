1
00:00:20,330 --> 00:00:24,314
Hello everyone. Welcome to this session about quantum

2
00:00:24,362 --> 00:00:27,654
and quantum inspired annealing. What we're going to do

3
00:00:27,692 --> 00:00:31,446
in the next half hour or so is to just have a

4
00:00:31,468 --> 00:00:34,966
look at what annealing is, why you might be interested in

5
00:00:34,988 --> 00:00:38,602
it, what is out there, what the state of play

6
00:00:38,656 --> 00:00:42,620
is of this technology and what it's useful for.

7
00:00:43,070 --> 00:00:46,470
What we're going to do is just brief introduction,

8
00:00:46,630 --> 00:00:49,946
brief introduction of why you

9
00:00:49,968 --> 00:00:54,158
might be interested, what it is the

10
00:00:54,244 --> 00:00:57,520
anitas that are out there, the state of play of the technology.

11
00:00:57,970 --> 00:01:01,786
And then the meat will be to just talk you through the benchmarking

12
00:01:01,818 --> 00:01:05,634
exercise that we went through at my company of utivity, what we

13
00:01:05,672 --> 00:01:09,714
tested, how we tested, what we found, and finally

14
00:01:09,752 --> 00:01:13,586
bring it into a land with conclusions. This is a

15
00:01:13,608 --> 00:01:17,318
very practical session in the sense that we're interested in technology

16
00:01:17,404 --> 00:01:20,934
as it is today, not as it will be ten years from now.

17
00:01:21,052 --> 00:01:24,950
We're not a research institution. We are here to solve our customers business

18
00:01:25,020 --> 00:01:29,558
problems. So the focus will be very practical

19
00:01:29,654 --> 00:01:33,210
about what use is this

20
00:01:33,280 --> 00:01:35,980
quantum and quantum inspired technology today?

21
00:01:36,750 --> 00:01:40,402
A little bit about me my name Peter Den Haan. The funny accent is Dutch.

22
00:01:40,486 --> 00:01:43,802
I'm quantum computing specialist at objectivity,

23
00:01:43,866 --> 00:01:47,262
which is part of accenture. I started

24
00:01:47,316 --> 00:01:50,800
life as a physicist. I've got a phd in

25
00:01:51,250 --> 00:01:54,826
quantum physics on aspects of quantum electrodynamics

26
00:01:54,858 --> 00:01:58,034
in antidicular space. I've also got

27
00:01:58,072 --> 00:02:01,250
twelve years experience as a software developer, mainly using

28
00:02:01,320 --> 00:02:04,130
Java closure and javascript.

29
00:02:04,470 --> 00:02:07,910
So that's enough about me. Let's start with

30
00:02:07,980 --> 00:02:11,174
a short introduction. We're all

31
00:02:11,212 --> 00:02:15,366
familiar with quantum computing, right? The reason why

32
00:02:15,468 --> 00:02:19,334
quantum computers are potentially so much

33
00:02:19,372 --> 00:02:22,602
faster and skilled, so much better than anything else

34
00:02:22,656 --> 00:02:26,054
out there is entanglement. It's the sheer

35
00:02:26,102 --> 00:02:29,866
size of Hilbert space. And here is

36
00:02:30,048 --> 00:02:33,518
probably don't anyone attends this conference? I don't need

37
00:02:33,524 --> 00:02:37,038
to tell you what quantum computing is, but there's a little

38
00:02:37,124 --> 00:02:40,858
illustration for you. It's like a classical computer solves

39
00:02:40,954 --> 00:02:45,202
a problem, amaze just one step at a time, but with

40
00:02:45,256 --> 00:02:49,140
your untangled qubits, you can explore an entire

41
00:02:49,670 --> 00:02:53,346
problem space and ask a question in one go

42
00:02:53,448 --> 00:02:57,670
and solve certain classes of problems much faster

43
00:03:00,650 --> 00:03:03,926
in the business world out there, most industries are by

44
00:03:03,948 --> 00:03:07,346
and large convinced that quantum computing is going to be

45
00:03:07,468 --> 00:03:10,838
significant, even significant in the short term.

46
00:03:10,934 --> 00:03:14,746
By 2025, about half

47
00:03:14,768 --> 00:03:17,994
of companies believe that quantum computing will

48
00:03:18,032 --> 00:03:22,378
start to impact really practically. Virtually everybody

49
00:03:22,464 --> 00:03:26,270
thinks that in the long term there will be serious disruption,

50
00:03:26,690 --> 00:03:30,414
as in improvements that can get you a competitive advantage or

51
00:03:30,452 --> 00:03:36,370
can get your competitors a competitive advantage across

52
00:03:36,440 --> 00:03:39,906
all industries. And actually a

53
00:03:39,928 --> 00:03:44,594
lot of companies are already starting to pay attention and

54
00:03:44,712 --> 00:03:49,826
expecting relatively short term impact,

55
00:03:49,938 --> 00:03:54,086
relatively short term systems out

56
00:03:54,108 --> 00:03:57,882
there that will help them do their business better based on

57
00:03:57,936 --> 00:04:01,622
quantum computing. In reality,

58
00:04:01,686 --> 00:04:05,498
though, you probably know the predictions of when quantum computing will

59
00:04:05,504 --> 00:04:08,810
become practically useful just vary widely.

60
00:04:09,230 --> 00:04:12,874
Some people say the first application is already useful.

61
00:04:12,922 --> 00:04:16,430
Now you can use this stuff actually, even in production,

62
00:04:17,570 --> 00:04:20,938
you hear other voices who say, well, no, quantum computing

63
00:04:20,954 --> 00:04:24,078
is going to be up till 20

64
00:04:24,164 --> 00:04:27,760
years from now. It will become useful, maybe more.

65
00:04:28,450 --> 00:04:31,826
And what to think of this? Well, it really depends. It really depends on what

66
00:04:31,848 --> 00:04:37,650
you're looking at. If you're looking at breaking

67
00:04:37,730 --> 00:04:40,930
cryptographic encryption using shore's algorithm,

68
00:04:41,010 --> 00:04:44,502
then, yeah, that will be a little while

69
00:04:44,556 --> 00:04:47,698
from now because you need

70
00:04:47,884 --> 00:04:51,126
quantum computers with a significant capacity.

71
00:04:51,318 --> 00:04:54,954
You will have to address the noise problem,

72
00:04:55,072 --> 00:04:58,506
error correction, circuit depth, all of that. And we're a long

73
00:04:58,528 --> 00:05:01,978
way away from that. But quantum

74
00:05:01,994 --> 00:05:04,990
computing life doesn't start and end with Schwarz algorithm.

75
00:05:06,530 --> 00:05:10,702
So the answer to the question when does quantum computing become useful? Depends on

76
00:05:10,756 --> 00:05:14,100
the use case, the problem you're trying to solve. In other words,

77
00:05:14,710 --> 00:05:18,530
the technology you're using. So when

78
00:05:18,600 --> 00:05:22,414
you think about quantum computers, by and large, people think about circuit

79
00:05:22,462 --> 00:05:25,746
based quantum computers, or alternatively, gate based quantum

80
00:05:25,778 --> 00:05:28,982
computers means the same thing. And,

81
00:05:29,116 --> 00:05:32,370
well, we got the early ones. We're about 100 qubits.

82
00:05:32,450 --> 00:05:35,110
They're noisy, circuit depth is limited,

83
00:05:35,530 --> 00:05:37,240
decoherence is a problem,

84
00:05:38,910 --> 00:05:41,818
and so on. So actually,

85
00:05:41,904 --> 00:05:45,718
I think that it will emerge

86
00:05:45,814 --> 00:05:50,366
into some practical usefulness, early use cases that

87
00:05:50,388 --> 00:05:53,774
might be sort of commercially useful sooner than many

88
00:05:53,812 --> 00:05:57,418
people think, but we're

89
00:05:57,434 --> 00:06:01,054
not there yet. Then there are

90
00:06:01,092 --> 00:06:04,946
Neeler based quantum computers which

91
00:06:05,128 --> 00:06:08,414
work in a completely different way, which are focused

92
00:06:08,462 --> 00:06:12,046
on optimization. So they're

93
00:06:12,078 --> 00:06:14,610
kind of single purpose circuits,

94
00:06:15,370 --> 00:06:18,626
and actually they're in a much greater state of maturity,

95
00:06:18,738 --> 00:06:21,990
in part because it's simpler, it's easier to scale,

96
00:06:23,530 --> 00:06:26,806
and actually, with annealing, noise isn't that much of a

97
00:06:26,828 --> 00:06:30,602
problem. We'll come back to annealing in a moment. And then

98
00:06:30,656 --> 00:06:34,426
finally, of course, there is actually the

99
00:06:34,528 --> 00:06:37,846
ideas, the foam of ideas that quantum computing

100
00:06:37,878 --> 00:06:41,378
has generated has actually impacted the classical

101
00:06:41,414 --> 00:06:45,310
world as well. And there's a world out there of quantum inspired algorithms,

102
00:06:46,050 --> 00:06:48,320
and we'll come back to that as well.

103
00:06:49,330 --> 00:06:52,862
So what will the quantum computing world look like?

104
00:06:52,996 --> 00:06:56,354
I will go over this briefly, because I assume that most of you

105
00:06:56,552 --> 00:07:00,574
will know what to expect for selected

106
00:07:00,622 --> 00:07:04,126
use cases. We can see the first commercial use of quantum computing.

107
00:07:04,158 --> 00:07:08,758
As I said, annealing is quite actually

108
00:07:08,844 --> 00:07:12,306
already useful. Things like atomic

109
00:07:12,338 --> 00:07:15,766
clock, quantum key distribution, the networks are

110
00:07:15,788 --> 00:07:23,398
already up and running in many places in the world quantum

111
00:07:23,414 --> 00:07:27,340
machine learning, as you can see on a little diagram, that is

112
00:07:27,710 --> 00:07:31,170
probably sort of the next wave of early applications

113
00:07:31,190 --> 00:07:35,470
of quantum computing, but is in the process of emerging

114
00:07:35,890 --> 00:07:39,322
early simulation. Again, that's sort of the medium

115
00:07:39,386 --> 00:07:43,300
term. It will be there, start to get there in a few years.

116
00:07:44,710 --> 00:07:48,878
The big promises of quantum computing, those exponential speed ups,

117
00:07:49,054 --> 00:07:50,980
they're a bit further into the future,

118
00:07:51,670 --> 00:07:54,894
but we need more sophisticated

119
00:07:54,942 --> 00:07:57,880
hardware for that. We need error correction and all of that.

120
00:07:59,450 --> 00:08:02,120
But the early use cases are already here.

121
00:08:03,050 --> 00:08:06,486
And the early use cases, I think we think

122
00:08:06,668 --> 00:08:11,786
the earliest use cases that already here now are

123
00:08:11,808 --> 00:08:15,626
based on annealers. So let's specifically take a look at

124
00:08:15,648 --> 00:08:20,146
annealers. And I don't assume that everyone is completely familiar with annealers.

125
00:08:20,198 --> 00:08:24,240
So let's start by having a look at

126
00:08:24,690 --> 00:08:26,880
what they are and what they do.

127
00:08:27,810 --> 00:08:33,666
Annealers are based on

128
00:08:33,848 --> 00:08:37,486
the idea of the annealing process in metallurgy,

129
00:08:37,678 --> 00:08:41,922
sort of when you heat a metal and the

130
00:08:41,976 --> 00:08:45,570
atoms of that metal, they're sort of in a fairly

131
00:08:45,650 --> 00:08:49,186
reasonably chaotic state, and as it cools

132
00:08:49,218 --> 00:08:53,640
down, it settles into a structure and

133
00:08:54,730 --> 00:08:58,666
at a sort of an energy minimum. And that is the

134
00:08:58,688 --> 00:09:02,170
basic idea of an annealers.

135
00:09:03,070 --> 00:09:06,780
You start with a superposition of states

136
00:09:07,630 --> 00:09:10,734
with the Hamiltonians, or is well defined. And then

137
00:09:10,772 --> 00:09:14,190
you start slowly changing the Hamiltonian

138
00:09:15,570 --> 00:09:19,166
and slowly changing, as it were, the temperature of your system

139
00:09:19,348 --> 00:09:23,610
to a hamiltonian that represents the problem you're trying, the optimization

140
00:09:23,690 --> 00:09:27,406
problem you're trying to solve. And there is something called

141
00:09:27,508 --> 00:09:31,300
the quantum antibiotic theorem that says that if you change,

142
00:09:31,910 --> 00:09:35,766
if you make that change slowly enough and you start

143
00:09:35,868 --> 00:09:38,390
in a minimum, you start in an optimum,

144
00:09:39,450 --> 00:09:43,446
then you will also finish in an

145
00:09:43,468 --> 00:09:46,726
optimum. So that means that at

146
00:09:46,748 --> 00:09:50,438
the end, when the Hamiltonian represents a problem you're trying to solve,

147
00:09:50,614 --> 00:09:54,474
the state of your system, the state of your quantum annealer will

148
00:09:54,512 --> 00:09:57,994
represent the minimum of that Hamiltonian and

149
00:09:58,112 --> 00:10:01,626
therefore the optimum of the problem you're trying to solve,

150
00:10:01,658 --> 00:10:04,320
which is fantastic. Now, you might ask,

151
00:10:04,690 --> 00:10:08,734
slowly enough. What does slowly enough mean? Well, of course,

152
00:10:08,932 --> 00:10:10,190
there's the rub.

153
00:10:12,210 --> 00:10:15,426
You can sort of formulate heuristics or formulate heuristics of

154
00:10:15,448 --> 00:10:19,426
what is slowly enough, but you can't do

155
00:10:19,448 --> 00:10:22,946
it too slowly because in the end, you want your answer at

156
00:10:22,968 --> 00:10:26,354
some point. So there's a little bit of an art to

157
00:10:26,392 --> 00:10:29,234
that. But that is the basic idea. You can see this in the diagram.

158
00:10:29,282 --> 00:10:32,598
You start in a superposition state. You start to modify the

159
00:10:32,604 --> 00:10:35,542
Hamiltonian of your system to represent your problem.

160
00:10:35,676 --> 00:10:39,130
And hopefully, at the very end, you find

161
00:10:39,200 --> 00:10:43,770
the system into the minimum

162
00:10:45,390 --> 00:10:48,614
of the Hamiltonian, and therefore the optimum of the problem, the optimum

163
00:10:48,662 --> 00:10:52,246
that you're looking for, it's probabilistic. So you're

164
00:10:52,278 --> 00:10:55,390
probably going to do this ten times, 100 times,

165
00:10:55,460 --> 00:10:59,354
1000 times, and then look at the distribution of your solutions

166
00:10:59,402 --> 00:11:02,922
to pick out the one that represents the optimum

167
00:11:03,066 --> 00:11:06,174
or something very close to it. And generally,

168
00:11:06,302 --> 00:11:10,226
you can pretty much guarantee, although it's all heuristic, you can

169
00:11:10,248 --> 00:11:14,094
pretty much guarantee that you will end up with something that is either the optimum

170
00:11:14,222 --> 00:11:17,826
or something pretty close to the optimum if you do your job right. And there's

171
00:11:17,858 --> 00:11:21,318
a little bit of an art, to be fair, to doing the job

172
00:11:21,404 --> 00:11:24,646
right. There's of course, science to back

173
00:11:24,668 --> 00:11:27,080
it up, but there's also an art to it,

174
00:11:28,590 --> 00:11:32,474
one of the sort of characteristics of annealers. Apart from

175
00:11:32,512 --> 00:11:35,718
that, they're sort of single purpose optimization

176
00:11:35,814 --> 00:11:36,650
circuits.

177
00:11:38,350 --> 00:11:41,866
Annealing plays an important effect in quantum annealers,

178
00:11:41,898 --> 00:11:45,214
specifically because tunneling allows the

179
00:11:45,252 --> 00:11:49,086
system to transition from an energy state that is a

180
00:11:49,108 --> 00:11:52,726
local minimum, but not your absolute minimum. In other words, not your optimum.

181
00:11:52,858 --> 00:11:56,434
Tunneling allows your system to transition from there

182
00:11:56,632 --> 00:12:00,430
to a better minimum, and hopefully,

183
00:12:00,510 --> 00:12:04,194
ideally the absolute minimum in a way that is

184
00:12:04,232 --> 00:12:08,054
classically impossible. And it has been demonstrated in

185
00:12:08,092 --> 00:12:12,082
can article called computational multi qubit annealing in programmable

186
00:12:12,146 --> 00:12:15,730
quantum annealers in 2016 by Bossio Etol

187
00:12:15,890 --> 00:12:19,414
has been demonstrated that tunneling actually works in that way,

188
00:12:19,532 --> 00:12:23,114
and helps the quantum annealers perform the way

189
00:12:23,152 --> 00:12:26,486
they do. Entanglement actually also plays

190
00:12:26,518 --> 00:12:30,918
a role. There's an article I would recommend as reexamination

191
00:12:30,934 --> 00:12:34,970
of the evidence for entanglement in quantum annealers by Albash Etol

192
00:12:35,650 --> 00:12:39,294
in 2015 that was published in

193
00:12:39,332 --> 00:12:43,122
Fizzrev A. Boxio was

194
00:12:43,176 --> 00:12:44,530
published in Nature.

195
00:12:45,910 --> 00:12:49,202
And the final thing to note is that you will be

196
00:12:49,256 --> 00:12:52,514
surprised by the number of problems that can be

197
00:12:52,552 --> 00:12:55,862
formulated as optimization problems to

198
00:12:55,916 --> 00:12:59,922
run on a quantum annealers. All of Carp's 21 mp

199
00:12:59,986 --> 00:13:03,554
complete problems can be run on a quantum annealers.

200
00:13:03,682 --> 00:13:07,454
That's been, as a famous paper by Andrew

201
00:13:07,522 --> 00:13:11,500
Lucas called icing formulations of many NP problems,

202
00:13:13,230 --> 00:13:16,826
and it was published in Frontiers of

203
00:13:16,848 --> 00:13:20,634
Physics twelve and graph covering

204
00:13:20,682 --> 00:13:23,802
problems, traveling salesman problem, bim packing

205
00:13:23,866 --> 00:13:27,454
problem partitioning problems, the number

206
00:13:27,492 --> 00:13:31,600
of problems that you can formulate as an optimization problem.

207
00:13:32,790 --> 00:13:36,462
In fact, as a binary optimization problem with quadratic interactions,

208
00:13:36,526 --> 00:13:40,178
which is what annealers specialize in

209
00:13:40,344 --> 00:13:42,850
binary, because they're qubits,

210
00:13:43,270 --> 00:13:47,590
and quadratic interactions are what we can model using an annealers.

211
00:13:48,810 --> 00:13:55,014
The number of problems that can be formulated in that way is

212
00:13:55,052 --> 00:13:58,758
enormous. You would be surprised. That's really a

213
00:13:58,764 --> 00:14:02,298
paper I would suggest you read if you're at all interested and in

214
00:14:02,304 --> 00:14:05,962
terms of where the technology is at. B wave, which sort of the

215
00:14:06,016 --> 00:14:08,380
premier quantum annular company,

216
00:14:09,070 --> 00:14:12,160
has hardware running available on the cloud.

217
00:14:13,330 --> 00:14:16,574
If you want it, you can get access to it for free.

218
00:14:16,772 --> 00:14:20,122
And it's got 5614 qubits,

219
00:14:20,186 --> 00:14:22,960
and they're looking to expand that to 7000.

220
00:14:23,970 --> 00:14:27,280
So that's where the quantum and neotechnology is at.

221
00:14:29,090 --> 00:14:32,574
D wave is the prominent player in the quantum

222
00:14:32,622 --> 00:14:36,054
space. There's a whole host of people who've been inspired by

223
00:14:36,172 --> 00:14:39,746
annealing lark and are running quantum inspired

224
00:14:39,778 --> 00:14:40,630
annealing,

225
00:14:42,810 --> 00:14:46,018
and they generally use, they use fpgas,

226
00:14:46,114 --> 00:14:49,626
so programmable gate arrays, or they use sort

227
00:14:49,648 --> 00:14:52,810
of graphics cards, a whole host of graphics cards,

228
00:14:55,230 --> 00:14:58,410
or classical computing resources. Your cpus,

229
00:14:58,990 --> 00:15:01,290
Toshiba and Fujitsu,

230
00:15:02,430 --> 00:15:06,110
have annealers. You can find

231
00:15:06,180 --> 00:15:10,590
one qubit and Microsoft Quantum inspired annealing on Azure.

232
00:15:11,970 --> 00:15:15,220
There are startups, many startups working on this space.

233
00:15:15,590 --> 00:15:19,026
Quantagonia we have tested. We're currently talking to

234
00:15:19,048 --> 00:15:22,146
a company called Lightsover. This is not an exhaustive list,

235
00:15:22,328 --> 00:15:27,474
but there's a lot of people working in that space, because actually businesses

236
00:15:27,602 --> 00:15:31,398
are out there are riddled with optimization problems

237
00:15:31,484 --> 00:15:35,480
that are perfect for annealers. And annealers are actually already

238
00:15:36,330 --> 00:15:39,654
emerging into commercial usefulness and can

239
00:15:39,692 --> 00:15:42,858
really demonstrate value if you pick the right use case.

240
00:15:42,944 --> 00:15:46,634
And that is only sort of the set of

241
00:15:46,672 --> 00:15:50,234
use cases where you can get value is only going to expand and

242
00:15:50,272 --> 00:15:53,886
expand rapidly over the next few years. So there's quite a few players in this

243
00:15:53,908 --> 00:15:58,030
space, and we tried to benchmarked

244
00:15:58,930 --> 00:16:02,160
as many of them as we could put our hands on,

245
00:16:03,890 --> 00:16:08,146
because, as I said, we're a company, we're here to solve our

246
00:16:08,168 --> 00:16:12,082
customers business problems. So we're interested in near

247
00:16:12,136 --> 00:16:15,410
term use of quantum and quantum inspired computing

248
00:16:15,750 --> 00:16:20,402
in a production context. Of course, we also work

249
00:16:20,456 --> 00:16:23,910
with circuit based quantum computers because it is our job

250
00:16:24,060 --> 00:16:27,494
to spot where and when they will be useful for our customers.

251
00:16:27,612 --> 00:16:31,438
But at the moment, an awful lot of work is done with Anilas.

252
00:16:31,474 --> 00:16:35,180
So we want to know what tools are available in the market.

253
00:16:35,630 --> 00:16:39,034
How well do they perform? How well do they perform across a

254
00:16:39,072 --> 00:16:42,350
range of different problem types? What are their strengths and weaknesses?

255
00:16:44,050 --> 00:16:48,046
So we tested a fair number of them

256
00:16:48,228 --> 00:16:51,710
against a number of different problems, and we

257
00:16:51,780 --> 00:16:55,450
tested them with fixed timeouts so as to create a

258
00:16:55,460 --> 00:16:59,010
level playing field. And the problems that we used,

259
00:16:59,160 --> 00:17:01,634
you can find, you can see them here on the slide on the right hand

260
00:17:01,672 --> 00:17:05,170
side. The problems that we selected

261
00:17:05,770 --> 00:17:09,026
is the Sherington Kirkpatrick model, which is a spin

262
00:17:09,058 --> 00:17:12,386
glass. It's perhaps slightly

263
00:17:12,418 --> 00:17:16,002
artificial, but a sort of fully connected,

264
00:17:16,066 --> 00:17:20,010
fully interacting matrix.

265
00:17:22,990 --> 00:17:26,282
The second model is in some ways

266
00:17:26,336 --> 00:17:29,786
quite similar. This one is pulled from an

267
00:17:29,808 --> 00:17:32,620
early application of quantum computing in the I space,

268
00:17:33,150 --> 00:17:35,450
which is feature selection. So,

269
00:17:35,600 --> 00:17:39,226
imagine you have, say you want to build a recommender

270
00:17:39,258 --> 00:17:43,310
system based on artificial intelligence, and you want to recommend stuff

271
00:17:43,380 --> 00:17:46,020
based on the property of the items you're trying to sell,

272
00:17:48,710 --> 00:17:52,322
and you have sort of a data warehouse or a data lake with

273
00:17:52,376 --> 00:17:56,058
all the properties of your items. If you try and train your machine

274
00:17:56,094 --> 00:17:59,206
learning model using all the properties, it probably isn't going

275
00:17:59,228 --> 00:18:02,834
to work all that well. But if you pick the right optimal

276
00:18:02,882 --> 00:18:06,150
subset of properties of your items,

277
00:18:06,730 --> 00:18:10,346
the properties that are most significant, so that

278
00:18:10,368 --> 00:18:13,980
you sort of recommend the best possible article to your customer,

279
00:18:14,430 --> 00:18:17,530
then your AI will work much better. Well,

280
00:18:17,600 --> 00:18:21,526
picking those features that you use as input

281
00:18:21,558 --> 00:18:25,086
for your AI. That's an optimization problem, which set of features to

282
00:18:25,108 --> 00:18:28,686
pick. And that is actually one of the places where Anel has worked

283
00:18:28,708 --> 00:18:31,920
really well. So that's that. A feature selection model.

284
00:18:32,850 --> 00:18:38,622
Again, highly dense interactions, sort of many

285
00:18:38,676 --> 00:18:42,402
interactions between different elements, between different variables of your model.

286
00:18:42,536 --> 00:18:45,794
One constraint, which is the number of features that you want to end

287
00:18:45,832 --> 00:18:48,958
up with, pick the optimal sets of features.

288
00:18:49,134 --> 00:18:52,214
The third problem that we can, traveling salesman problem,

289
00:18:52,412 --> 00:18:56,006
probably most of all of us are familiar with it. You need to

290
00:18:56,028 --> 00:18:59,114
visit, say, ten cities, you know,

291
00:18:59,152 --> 00:19:03,206
geographical locations, the distance between cities. You don't want to visit cities twice.

292
00:19:03,318 --> 00:19:06,954
What's your best route? Actually, very simple problem

293
00:19:06,992 --> 00:19:10,250
to state, computationally hard problem to solve,

294
00:19:11,570 --> 00:19:14,846
impossible to without short circuiting, without sort

295
00:19:14,868 --> 00:19:18,206
of shortcuts, heuristic shortcuts. It's impossible to

296
00:19:18,228 --> 00:19:22,590
solve classically within an acceptable time frame. As soon as the number of cities grows

297
00:19:22,930 --> 00:19:26,174
in New England, works pretty well there. So, traveling salesman

298
00:19:26,222 --> 00:19:30,178
problem, bin packing problem.

299
00:19:30,344 --> 00:19:33,662
I've got a number of bins of given size or given weight.

300
00:19:33,806 --> 00:19:36,774
I've got items of a given size and weight that I want to put into

301
00:19:36,812 --> 00:19:40,834
the bins. What's my optical optimal packing? That's the bin

302
00:19:40,882 --> 00:19:44,246
packing problem. Again, it's an optimization problem. And the

303
00:19:44,268 --> 00:19:48,426
final problem, just to assess the

304
00:19:48,528 --> 00:19:52,086
performance of the annealer on integer variables,

305
00:19:52,198 --> 00:19:55,786
what you need to do with integer variables, you end up coding them down

306
00:19:55,808 --> 00:19:59,082
to binary, which creates a sort of

307
00:19:59,136 --> 00:20:03,086
pretty messy Hamiltonian when you

308
00:20:03,108 --> 00:20:07,070
need to do that. So, to assess

309
00:20:07,570 --> 00:20:10,026
how well an annealers behaves,

310
00:20:10,138 --> 00:20:13,570
because in practice, many optimization problems

311
00:20:13,640 --> 00:20:17,090
actually involve integer variables, not just binary variables,

312
00:20:17,830 --> 00:20:21,730
we formulated a simple integer

313
00:20:22,470 --> 00:20:26,526
linear programming problem, which is I've

314
00:20:26,558 --> 00:20:30,274
got a pile of pizza ingredients. I've got recipes

315
00:20:30,322 --> 00:20:33,814
of pizzas I can make. I know how much the ingredients cost, I know

316
00:20:33,852 --> 00:20:35,880
how much I can sell the pizzas for.

317
00:20:37,130 --> 00:20:41,066
Which pizzas do I need to make in which quantities to maximize my

318
00:20:41,088 --> 00:20:44,506
returns? Again, very simple problem to state,

319
00:20:44,608 --> 00:20:48,570
actually, this is not a particularly problem, hard problem to solve

320
00:20:48,910 --> 00:20:51,070
classically, as I just stated,

321
00:20:52,770 --> 00:20:56,990
and you wouldn't use an annealer normally

322
00:20:57,570 --> 00:21:01,840
to do it, but it allows us to assess how well

323
00:21:02,390 --> 00:21:06,606
does this annealers handle integer variables

324
00:21:06,798 --> 00:21:10,526
when you have to code them down to encode them as binary variables

325
00:21:10,558 --> 00:21:12,980
and stick them in the Hamiltonian in that way.

326
00:21:14,890 --> 00:21:18,920
So, let's have a look at the results. So the first one,

327
00:21:19,450 --> 00:21:22,070
Sharon Kirkpatrick, spring glass,

328
00:21:23,690 --> 00:21:27,400
which is sort of a physical system,

329
00:21:29,550 --> 00:21:32,666
highly dense interactions between sort of

330
00:21:32,688 --> 00:21:37,786
all the different variables, all the different spins in your spin glass perfect

331
00:21:37,888 --> 00:21:39,770
use case for an annealers.

332
00:21:40,830 --> 00:21:44,414
And you can see the results here in front of you.

333
00:21:44,532 --> 00:21:48,842
Now, let's just go in a little bit of, little bit more detail slowly

334
00:21:48,906 --> 00:21:52,174
for this particular case, and familiarize ourselves with what we

335
00:21:52,212 --> 00:21:55,760
tested. So the blue line,

336
00:21:56,850 --> 00:22:00,846
the light blue line is D wave. It's a D wave

337
00:22:00,878 --> 00:22:03,934
cloud service. So that uses the D wave

338
00:22:03,982 --> 00:22:07,640
quantum processor supplemented by

339
00:22:08,170 --> 00:22:11,346
a large amount of classical computing resources.

340
00:22:11,538 --> 00:22:15,174
And D wave won't tell you how exactly they mix up the

341
00:22:15,212 --> 00:22:19,062
two, but it works exceptionally

342
00:22:19,126 --> 00:22:22,460
well in terms of compute time.

343
00:22:22,910 --> 00:22:25,994
Most of the compute time is done by sort of

344
00:22:26,032 --> 00:22:29,594
classical computers, and the time spent on

345
00:22:29,632 --> 00:22:33,230
the actual QPU is measured in milliseconds,

346
00:22:34,050 --> 00:22:38,366
whereas sort of the total execution time, depending on the size of the problem,

347
00:22:38,548 --> 00:22:42,560
is measured in minutes, seconds or minutes,

348
00:22:43,910 --> 00:22:46,622
and sort of on the x axis,

349
00:22:46,766 --> 00:22:50,354
we increase the size of the problem. On the

350
00:22:50,392 --> 00:22:54,034
y axis, you find a percentage, which is

351
00:22:54,072 --> 00:22:57,510
basically the quality of the solution as measured by

352
00:22:57,660 --> 00:23:01,446
the energy of the Hamiltonian, compared to the best possible

353
00:23:01,548 --> 00:23:05,174
solution that we've got. And you can see that

354
00:23:05,212 --> 00:23:09,066
the duive cloud service does an absolute great job on this

355
00:23:09,088 --> 00:23:12,540
particular problem, and is basically pegged at 100%

356
00:23:13,550 --> 00:23:17,994
within a given time. Comes up with the best solution of

357
00:23:18,032 --> 00:23:22,240
all. The next one is

358
00:23:22,770 --> 00:23:26,334
the Microsoft quantum inspired optimizer, which you can access

359
00:23:26,452 --> 00:23:29,914
very cheaply or even for free on the Azure

360
00:23:29,962 --> 00:23:33,018
cloud service, which does.

361
00:23:33,204 --> 00:23:36,846
They're all going up to a scale to 10,000 variables.

362
00:23:36,878 --> 00:23:41,010
10,000 binding variables does pretty

363
00:23:41,080 --> 00:23:44,850
well, starts to drop off a little bit at

364
00:23:44,920 --> 00:23:48,518
3000 10,000 variables, but does a

365
00:23:48,524 --> 00:23:51,490
pretty good job. A startup, quantagonia,

366
00:23:51,570 --> 00:23:57,894
which at the time of testing was in a really early stage with

367
00:23:58,012 --> 00:24:01,146
sort of a maximum number of variables of 8000.

368
00:24:01,328 --> 00:24:04,410
So this is clearly sort of an early effort.

369
00:24:05,790 --> 00:24:09,066
Did pretty well, but started to drop off. We had

370
00:24:09,168 --> 00:24:13,006
5000 and beyond 3000 to start to hit the

371
00:24:13,028 --> 00:24:16,842
limit of the hardware. One qubit,

372
00:24:16,906 --> 00:24:18,910
which is also available on Azure,

373
00:24:20,690 --> 00:24:24,222
didn't scale terribly well. Performed similar

374
00:24:24,276 --> 00:24:28,878
to Pantagonia, but actually didn't really scale

375
00:24:28,974 --> 00:24:30,420
fantastically well.

376
00:24:31,990 --> 00:24:35,300
Toshiba is another

377
00:24:36,870 --> 00:24:39,170
pure quantum inspired annealers.

378
00:24:40,170 --> 00:24:42,722
Msqio, Contagonia, one qubit,

379
00:24:42,786 --> 00:24:46,326
toshiba. They're all quantum inspired rather

380
00:24:46,348 --> 00:24:50,102
than quantum. As such, Toshiba performed very

381
00:24:50,156 --> 00:24:52,970
similarly to the D wave hybrid offering.

382
00:24:54,590 --> 00:24:58,150
Found the optimum solution

383
00:24:58,230 --> 00:25:02,366
to the spin glass problem, right up to 10,000,

384
00:25:02,468 --> 00:25:05,230
which is where the hardware starts to reach its limits.

385
00:25:06,050 --> 00:25:10,110
Then we also tested just a d wave QPu rather

386
00:25:10,180 --> 00:25:13,662
than sort of cloud service with this sort of classical

387
00:25:13,726 --> 00:25:16,610
resources isolating you from the QPU.

388
00:25:17,030 --> 00:25:20,850
And the QPU did pretty well,

389
00:25:21,000 --> 00:25:24,146
but you can get it to about

390
00:25:24,248 --> 00:25:27,320
100 variables. Now, you might wonder,

391
00:25:28,010 --> 00:25:31,222
why can you only get it to 100 variables when

392
00:25:31,276 --> 00:25:33,986
the QPU has more than 5000 qubits?

393
00:25:34,178 --> 00:25:36,870
And the reason for that is connectivity,

394
00:25:37,850 --> 00:25:41,934
because quantum inspired annos

395
00:25:42,082 --> 00:25:45,626
generally have perfect connectivity. You can have interactions between

396
00:25:45,728 --> 00:25:49,482
any two qubits, but a

397
00:25:49,536 --> 00:25:53,694
hardware implementation is

398
00:25:53,732 --> 00:25:57,962
generally more limited and the connections

399
00:25:58,026 --> 00:26:00,510
are only between specific qubits.

400
00:26:02,450 --> 00:26:06,302
D wave, over the years, has been working with a number of different topologies.

401
00:26:06,446 --> 00:26:10,418
But what you need to do when you have a problem is

402
00:26:10,504 --> 00:26:14,580
to find an embedding of your specific problem

403
00:26:15,370 --> 00:26:19,270
on the physical structure of the quantum processor.

404
00:26:22,570 --> 00:26:25,990
And in order to sort of deal with the limits of connectivity,

405
00:26:27,390 --> 00:26:31,382
you quite often need to use multiple physical qubits

406
00:26:31,526 --> 00:26:35,254
on a quantum processor to represent one logical

407
00:26:35,302 --> 00:26:39,002
qubit. And you do that by basically creating a very,

408
00:26:39,056 --> 00:26:42,526
very strong interaction between them. So they always have

409
00:26:42,548 --> 00:26:45,962
the same value. So actually you can lose,

410
00:26:46,026 --> 00:26:49,806
depending on the particular topology of your problem,

411
00:26:49,988 --> 00:26:53,314
you can lose an awful lot of qubits that way. And that is what is

412
00:26:53,352 --> 00:26:57,214
happening here. Because the spin glass is a fully dense

413
00:26:57,262 --> 00:27:00,018
interaction matrix. It's a fully connected problem.

414
00:27:00,184 --> 00:27:04,290
So it's a nightmare to embed

415
00:27:05,210 --> 00:27:08,470
on the QPU. And that is why the D wave QPu,

416
00:27:09,290 --> 00:27:13,414
we couldn't get beyond 100 qubits because of

417
00:27:13,612 --> 00:27:15,640
the nature of this particular problem.

418
00:27:17,130 --> 00:27:20,362
And then just to benchmark these quantum and quantum part

419
00:27:20,416 --> 00:27:24,314
solution against a known quantity, we also

420
00:27:24,352 --> 00:27:28,294
benchmark gurubi as a sort of best in class classical

421
00:27:28,342 --> 00:27:32,094
optimizers. And Gurobi is really, really good.

422
00:27:32,292 --> 00:27:34,800
But this kind of problem,

423
00:27:35,250 --> 00:27:39,386
a completely dense interaction matrix, you don't have any clever algorithm

424
00:27:39,418 --> 00:27:43,146
mathematical algorithms that you can use to sort of shortcut

425
00:27:43,178 --> 00:27:46,654
your way to the answer is a perfect nightmare for classical

426
00:27:46,702 --> 00:27:50,626
optimizer like Gurubi. So you can actually see that within the

427
00:27:50,648 --> 00:27:54,034
given time frame. Gurubi absolutely does a good

428
00:27:54,072 --> 00:27:58,194
job, but the quality of the solution starts to drop

429
00:27:58,242 --> 00:28:01,878
off a little bit at the larger sizes of a

430
00:28:01,884 --> 00:28:04,550
special 30, 00, 10,000 variables.

431
00:28:05,290 --> 00:28:08,878
This is really the kind of territory where an Anila

432
00:28:08,914 --> 00:28:11,260
really works very well.

433
00:28:12,990 --> 00:28:15,980
The next lab feature selection, as I said,

434
00:28:17,550 --> 00:28:21,260
it's actually a really practical use case, an early use case

435
00:28:21,870 --> 00:28:25,646
for annealers in the AI space, selecting the

436
00:28:25,668 --> 00:28:29,200
features to input in a machine learning system.

437
00:28:30,210 --> 00:28:34,014
In many ways, it's similar to SK, as in the

438
00:28:34,052 --> 00:28:38,178
interactions are highly dense, there are a

439
00:28:38,184 --> 00:28:42,334
bit more variety in the interactions, and there is a single constraint, and that constraint

440
00:28:42,382 --> 00:28:45,220
is the number of features that you want to use,

441
00:28:47,510 --> 00:28:51,310
and you can see very similar behaviors.

442
00:28:51,390 --> 00:28:55,682
The D wave cloud service, which combines the QPU

443
00:28:55,746 --> 00:28:59,482
with classical computing resources, performs really

444
00:28:59,536 --> 00:29:04,038
well across the board. MSQio and Quantagonia

445
00:29:04,214 --> 00:29:08,618
start to drop off at larger sizes of 300,000,

446
00:29:08,704 --> 00:29:10,330
3000 features.

447
00:29:12,270 --> 00:29:14,300
One qubit we weren't able to run.

448
00:29:14,670 --> 00:29:18,418
Toshiba performs very well and scales

449
00:29:18,454 --> 00:29:22,046
all the way up to 10,000, but starts to drop off a little

450
00:29:22,068 --> 00:29:25,154
bit in quality at the larger sizes of

451
00:29:25,192 --> 00:29:28,514
3000, 10,000. You can up that quality by simply giving

452
00:29:28,552 --> 00:29:32,340
it more time. But we're working with a level playing field here.

453
00:29:33,190 --> 00:29:35,860
Gurubi actually does better,

454
00:29:36,790 --> 00:29:40,790
does better, perhaps because the constraint gives the whole problem a little bit more structure,

455
00:29:41,130 --> 00:29:44,566
but also sort of drops off at the

456
00:29:44,588 --> 00:29:47,350
largest size of 10,000 that we tested.

457
00:29:49,450 --> 00:29:51,030
Traveling salesmen.

458
00:29:52,750 --> 00:29:56,326
So you want to visit a number of cities,

459
00:29:56,438 --> 00:29:59,814
you know the distance between each city, what is your optimal

460
00:29:59,862 --> 00:30:03,840
route to go from the starting city to the city where you want to finish?

461
00:30:07,570 --> 00:30:10,878
And again, the D wave cloud service,

462
00:30:11,044 --> 00:30:14,660
up to, up to a size of 300.

463
00:30:15,430 --> 00:30:18,702
And actually the Cubo,

464
00:30:18,766 --> 00:30:23,026
sort of the optimization problem for

465
00:30:23,128 --> 00:30:27,400
a 300 city traveling salesman problem.

466
00:30:28,810 --> 00:30:31,670
The size optimization problem scales quadratically.

467
00:30:32,170 --> 00:30:36,120
So you're talking about 90,000 variables here. This is not a small problem.

468
00:30:36,810 --> 00:30:40,454
D wave performs well across the board. The Microsoft

469
00:30:40,502 --> 00:30:44,170
quantum inspired optimization starts to struggle

470
00:30:44,830 --> 00:30:46,970
beyond ten cities.

471
00:30:48,670 --> 00:30:51,360
Quantagonia, similar story.

472
00:30:52,930 --> 00:30:56,366
Toshiba performs a

473
00:30:56,388 --> 00:30:59,870
bit better, but starts to drop off seriously

474
00:31:00,690 --> 00:31:03,970
beyond 100 cities. And then beyond that,

475
00:31:04,040 --> 00:31:07,458
you start to run into the limitations of the hardware, of the

476
00:31:07,464 --> 00:31:10,050
number of variables it can handle.

477
00:31:11,110 --> 00:31:15,130
The QPU, the D wave QPU, has a total nightmare

478
00:31:15,150 --> 00:31:18,914
with this particular problem. We managed to run it for size three, and beyond

479
00:31:18,962 --> 00:31:20,760
that, you run into embedding problems.

480
00:31:22,730 --> 00:31:25,970
Robi again does reasonably

481
00:31:26,050 --> 00:31:29,542
well, but struggles at larger sizes, 30 cities

482
00:31:29,606 --> 00:31:33,850
or larger. To get acceptable solutions.

483
00:31:34,190 --> 00:31:37,546
At 100, 300, you need to give

484
00:31:37,568 --> 00:31:41,180
it more time. The technology really needs more time.

485
00:31:44,510 --> 00:31:47,658
Then Bim packing, sort of.

486
00:31:47,664 --> 00:31:51,614
Bim packing is where you have items, a number of items with

487
00:31:51,652 --> 00:31:55,486
given weight. You have as many bins

488
00:31:55,518 --> 00:31:58,866
as you need with a given maximum weight. How do you

489
00:31:58,888 --> 00:32:02,206
pack the items in the bins optimally? So you use a minimal

490
00:32:02,238 --> 00:32:06,562
number of bins, actually annealers. When you naively

491
00:32:06,626 --> 00:32:10,406
translate this problem into a

492
00:32:10,428 --> 00:32:14,550
binary optimization problem suitable for an annealers,

493
00:32:15,050 --> 00:32:17,878
you get a hamiltonian landscape that is really,

494
00:32:18,044 --> 00:32:22,010
really rough for annealers. And you can see

495
00:32:22,080 --> 00:32:27,562
here that almost

496
00:32:27,616 --> 00:32:31,550
all annealers really start to struggle beyond

497
00:32:32,690 --> 00:32:36,782
ten items, with the

498
00:32:36,836 --> 00:32:40,094
exception of D wave, which of course

499
00:32:40,132 --> 00:32:44,130
supplements their annealers with classical computing resources.

500
00:32:44,790 --> 00:32:48,466
And so it performs better, but it starts to struggle at

501
00:32:48,488 --> 00:32:51,986
100 items as well. So here you see an

502
00:32:52,008 --> 00:32:57,010
example of a problem that annealing

503
00:32:57,910 --> 00:33:01,240
cannot solve very easily. However,

504
00:33:01,690 --> 00:33:05,400
it is actually possible to reformulate the bin packing problem

505
00:33:06,330 --> 00:33:09,926
as using sort of a two step algorithm, by first

506
00:33:10,028 --> 00:33:14,534
selecting for first finding packings

507
00:33:14,582 --> 00:33:18,650
for just one bin and treating them

508
00:33:18,800 --> 00:33:22,494
as a set of candidate solutions. And then in step two, where you're trying

509
00:33:22,532 --> 00:33:26,026
to solve the entire problem, the problem becomes a graph covering

510
00:33:26,058 --> 00:33:30,330
problem, which is a lot easier for anelas to solve.

511
00:33:30,490 --> 00:33:33,930
We're actually working on that. We're busy benchmarking that. Unfortunately,

512
00:33:34,010 --> 00:33:35,730
not in time for this presentation.

513
00:33:37,270 --> 00:33:40,946
But it will be interesting to see how the technology scale then.

514
00:33:41,128 --> 00:33:44,734
But that's just a hint that annealers are not necessarily sort of a natural

515
00:33:44,782 --> 00:33:46,840
choice for absolutely everything.

516
00:33:48,010 --> 00:33:52,226
And the last problem that we checked, pizza parlor, sort of linear programming,

517
00:33:52,338 --> 00:33:56,402
pretty vanilla. Not natural annealers.

518
00:33:56,466 --> 00:33:59,698
But for the purpose of this benchmarked,

519
00:33:59,874 --> 00:34:03,626
we don't mind. We don't mind. Gurubi blows all

520
00:34:03,648 --> 00:34:06,854
of them out of the water on this problem, because actually the linear

521
00:34:06,902 --> 00:34:08,060
programming problems,

522
00:34:11,010 --> 00:34:14,606
you can solve them algorithmically, and that is what

523
00:34:14,628 --> 00:34:16,080
Gurubi excels at.

524
00:34:17,730 --> 00:34:21,402
But the purpose here is not to be the fastest.

525
00:34:21,466 --> 00:34:25,086
The purpose here is to see how

526
00:34:25,108 --> 00:34:28,786
do these anninas cope when you start to have

527
00:34:28,808 --> 00:34:32,862
integer variables and code them down to binary.

528
00:34:33,006 --> 00:34:36,790
How do Anilas deal with the hamiltonian landscape that results?

529
00:34:39,130 --> 00:34:42,834
And you see that dwave

530
00:34:42,882 --> 00:34:46,294
cloud service with

531
00:34:46,332 --> 00:34:49,514
an interesting blip at the smallest size of

532
00:34:49,552 --> 00:34:53,210
size ten. So ten different pizzas.

533
00:34:54,990 --> 00:34:58,522
Other than that, it performs really well, up to

534
00:34:58,576 --> 00:35:01,918
size 100,000, and only starts to drop off a

535
00:35:01,924 --> 00:35:05,886
bit in quality at size 300,000 compared to a

536
00:35:05,908 --> 00:35:06,910
guerobi.

537
00:35:09,570 --> 00:35:13,726
All the others struggle more to find, to find an optimum

538
00:35:13,758 --> 00:35:16,686
solution to your linear programming problem. So Ms.

539
00:35:16,718 --> 00:35:20,034
Qio starts to

540
00:35:20,152 --> 00:35:23,762
struggles from the start, drops off in quality

541
00:35:23,816 --> 00:35:27,394
as you increase the size and doesn't produce feasible solutions

542
00:35:27,442 --> 00:35:31,030
beyond 300 quantagonia. Similar story,

543
00:35:31,100 --> 00:35:34,594
but poorer quality. But remember, early stage startup,

544
00:35:34,722 --> 00:35:37,350
they will improve rapidly, without a shadow of a doubt.

545
00:35:37,710 --> 00:35:41,130
One qubit didn't really perform all that well for us,

546
00:35:41,200 --> 00:35:45,340
and gave up producing feasible solutions quite early.

547
00:35:46,110 --> 00:35:48,780
Toshiba does reasonably well,

548
00:35:49,230 --> 00:35:52,926
certainly handles the

549
00:35:52,948 --> 00:35:56,858
largest problems from any other anila

550
00:35:56,874 --> 00:36:00,766
that we tested, and the

551
00:36:00,788 --> 00:36:02,270
dwave QPU.

552
00:36:04,550 --> 00:36:08,340
So when you just use the raw QPU rather than the cloud service,

553
00:36:08,710 --> 00:36:12,450
you can only tackle the smallest problem, and it

554
00:36:12,520 --> 00:36:16,054
just doesn't perform fantastically well on

555
00:36:16,092 --> 00:36:19,734
that, because you very quickly start to run into embedding problems.

556
00:36:19,852 --> 00:36:23,446
And linear programming isn't sort

557
00:36:23,468 --> 00:36:27,494
of the natural Anila territory, but it gives us an idea

558
00:36:27,612 --> 00:36:31,530
of the impact of what happens when you have

559
00:36:31,600 --> 00:36:35,226
an optimization problem involving integer numbers,

560
00:36:35,408 --> 00:36:38,598
and you see that you really need to give an analyst

561
00:36:38,614 --> 00:36:42,382
quite a bit of time, more time than we've given them

562
00:36:42,516 --> 00:36:44,190
here in this benchmark,

563
00:36:46,210 --> 00:36:49,338
to find the actual optimum,

564
00:36:49,514 --> 00:36:53,780
with the exception of the dwave cloud service,

565
00:36:54,150 --> 00:36:57,220
which performs exceptionally well. And actually,

566
00:36:58,390 --> 00:37:03,918
does this mean that annealers

567
00:37:03,934 --> 00:37:08,150
are useless for this type of problem? Well, no, not necessarily,

568
00:37:10,890 --> 00:37:14,614
because first of all,

569
00:37:14,812 --> 00:37:18,790
many business problems are actually not that simple as a linear program problems.

570
00:37:18,860 --> 00:37:22,394
There are complex constraints, there are perhaps even

571
00:37:22,432 --> 00:37:25,946
nonlinear interactions, which suddenly make

572
00:37:25,968 --> 00:37:29,066
the problem a whole lot more complicated, and then I think it's become a lot

573
00:37:29,088 --> 00:37:32,906
more competitive. In fact, we ran

574
00:37:32,938 --> 00:37:36,654
a pilot for a production optimization system

575
00:37:36,852 --> 00:37:39,466
for a manufacturer customer of ours,

576
00:37:39,658 --> 00:37:43,422
where they had gurubi running and

577
00:37:43,476 --> 00:37:46,834
taking quite a bit of time, and we basically ran that

578
00:37:46,872 --> 00:37:50,126
on a quantum annealers to compare

579
00:37:50,158 --> 00:37:53,634
results. And we found that a quantum annealers was very

580
00:37:53,672 --> 00:37:58,998
competitive with the classical optimizer because the

581
00:37:59,084 --> 00:38:02,630
complex constraints, mainly because the complex constraints

582
00:38:04,170 --> 00:38:07,746
made sort of algorithmically solving

583
00:38:07,778 --> 00:38:10,726
the problem much more difficult,

584
00:38:10,828 --> 00:38:14,730
and therefore made in Neilas, much more competitive.

585
00:38:15,710 --> 00:38:19,766
And there are clever ways to use anilas in solving linear programming

586
00:38:19,798 --> 00:38:22,862
problems. So don't count

587
00:38:22,916 --> 00:38:26,190
them out, but be aware, use the right tool

588
00:38:26,260 --> 00:38:29,162
for the job. But clearly,

589
00:38:29,226 --> 00:38:32,974
you can see from this, most anilas really start to struggle

590
00:38:33,022 --> 00:38:36,862
within a short amount of time to find the optimum.

591
00:38:36,926 --> 00:38:41,426
So having integer variables that

592
00:38:41,448 --> 00:38:44,690
you code down to binaries,

593
00:38:46,810 --> 00:38:51,122
to binary variables, really makes the hamiltonian

594
00:38:51,186 --> 00:38:54,854
landscape that you're trying to optimize against. Find the minimum of

595
00:38:55,052 --> 00:38:58,958
a lot tougher to negotiate for an anita,

596
00:38:58,994 --> 00:39:01,210
whether that's quantum or quantum inspired.

597
00:39:02,510 --> 00:39:05,020
So where does that leave us?

598
00:39:08,670 --> 00:39:11,670
Where does that leave us as to the annealers landscape?

599
00:39:11,830 --> 00:39:15,286
Well, first of all, quantum and quantum

600
00:39:15,318 --> 00:39:18,960
inspired annealers can absolutely bring business value,

601
00:39:20,690 --> 00:39:23,754
and in some problems are showing clear advantage,

602
00:39:23,802 --> 00:39:27,938
like feature selection. So if you have an optimization problem

603
00:39:28,024 --> 00:39:31,426
that is complex enough that you cannot simply number crunch your

604
00:39:31,448 --> 00:39:35,434
way through it, and you don't have any good algorithmic shortcuts

605
00:39:35,502 --> 00:39:39,238
on a classical machine, but your problem is

606
00:39:39,324 --> 00:39:43,458
small enough to match the sort of constraints of today's

607
00:39:43,554 --> 00:39:45,910
quantum or quantum inspired hardware.

608
00:39:47,470 --> 00:39:51,100
You can actually already see real business value

609
00:39:52,030 --> 00:39:56,246
in using this technology. For quantum

610
00:39:56,278 --> 00:40:00,250
annealers, D Wave is the big show in town,

611
00:40:01,810 --> 00:40:05,614
predominantly in their hybrid offering, their leap cloud

612
00:40:05,652 --> 00:40:09,086
service that combines Casco resources with

613
00:40:09,108 --> 00:40:12,634
their QPU that

614
00:40:12,692 --> 00:40:14,740
performs exceptionally well.

615
00:40:16,630 --> 00:40:19,938
The QPU performs as well,

616
00:40:20,104 --> 00:40:23,678
and you can tune it, and you can use all sort of tricks

617
00:40:23,854 --> 00:40:26,962
to get it to bring value.

618
00:40:27,096 --> 00:40:30,670
But it has strong competition

619
00:40:30,750 --> 00:40:34,230
from the quantum inspired annealers out there that also perform

620
00:40:34,300 --> 00:40:38,086
well and don't have the connectivity problems, and therefore don't

621
00:40:38,118 --> 00:40:41,930
have the problems embedding the topology of your problem onto the

622
00:40:42,000 --> 00:40:45,946
topology of the QPU of the

623
00:40:45,968 --> 00:40:47,610
quantum processor hardware.

624
00:40:51,730 --> 00:40:55,646
Generally, though, for most business problems,

625
00:40:55,748 --> 00:40:59,680
you will want to use classical computing to

626
00:41:00,050 --> 00:41:03,714
identify subproblems or boil down your

627
00:41:03,752 --> 00:41:07,326
bigger problem to a form that fits

628
00:41:07,358 --> 00:41:11,730
within the constraints of your quantum processor or your quantum inspired annealers.

629
00:41:13,350 --> 00:41:16,846
And after D wave, it was Toshiba

630
00:41:16,878 --> 00:41:21,458
SQbM plus. That definitely was

631
00:41:21,544 --> 00:41:25,474
sort of the strongest offering, scaled the best and produced

632
00:41:25,522 --> 00:41:29,050
the best solutions. You might have missed Fujitsu.

633
00:41:30,670 --> 00:41:34,214
We didn't test Fujitsu simply for commercial reasons,

634
00:41:34,262 --> 00:41:38,346
because their business model does not match the

635
00:41:38,368 --> 00:41:42,326
way we work with our customers. So that's

636
00:41:42,358 --> 00:41:46,370
the sort of pragmatic reason why we didn't test Fujitsu.

637
00:41:46,550 --> 00:41:50,094
For all I have seen of it, it's a strong offering, but I can't really

638
00:41:50,132 --> 00:41:53,922
say very much about it. So, bottom line

639
00:41:54,056 --> 00:41:58,622
for optimization problems, and actually optimization problems reflect

640
00:41:58,686 --> 00:42:01,874
a wide range of business, practical business problems,

641
00:42:01,992 --> 00:42:06,118
from retail through manufacturing to

642
00:42:06,204 --> 00:42:09,080
banking, portfolio optimization and so on.

643
00:42:10,170 --> 00:42:14,774
You can already see early business value in

644
00:42:14,812 --> 00:42:18,454
quantum computing, specifically in quantum annealing

645
00:42:18,502 --> 00:42:22,314
and quantum inspired annealing. So don't let anyone tell you

646
00:42:22,352 --> 00:42:25,978
that you are working on an abstract problem that will already

647
00:42:26,064 --> 00:42:29,420
only carry fruit 20 years from now.

648
00:42:29,790 --> 00:42:34,000
Some of the big promises, yeah, they're a number of years into the future,

649
00:42:34,530 --> 00:42:38,014
but there is real, current and near term value in

650
00:42:38,052 --> 00:42:41,518
quantum computing to be had if you pick the right problem and you pick the

651
00:42:41,524 --> 00:42:45,070
right technology. Thank you for your attention.

652
00:42:46,210 --> 00:42:49,898
My name Peter den Haan. I will be on discord

653
00:42:49,994 --> 00:42:52,880
if you want to know more, talk to me there.

654
00:42:53,890 --> 00:42:56,870
Send me an email pnhanondoptivity co.

655
00:42:56,940 --> 00:43:00,486
UK and I will be more than

656
00:43:00,508 --> 00:43:04,406
happy to talk to you. Thank you very much for your attention and

657
00:43:04,508 --> 00:43:04,834
bye.

