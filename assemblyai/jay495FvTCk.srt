1
00:00:00,410 --> 00:00:06,174
Jamaica real

2
00:00:06,212 --> 00:00:09,934
time feedback into the behavior of your distributed systems and

3
00:00:09,972 --> 00:00:14,094
observing changes exceptions. Errors in real time

4
00:00:14,212 --> 00:00:18,858
allows you to not only experiment with confidence, but respond instantly

5
00:00:18,954 --> 00:00:20,480
to get things working again.

6
00:00:24,610 --> 00:00:47,658
Those everybody,

7
00:00:47,744 --> 00:00:51,898
and welcome to my talk. Treat your users right with segmented

8
00:00:51,994 --> 00:00:55,854
rendering. Let me start by introducing myself.

9
00:00:56,052 --> 00:00:59,806
My name is Eric Burel. I live in France, in Montpellier. I'm the

10
00:00:59,828 --> 00:01:03,818
founder of a company based Elbecau. I'm a web developer.

11
00:01:03,914 --> 00:01:07,966
I'm doing a lot of things. I'm doing consulting in public funding

12
00:01:07,998 --> 00:01:11,986
for a company named Research to business. I'm those maintainer of

13
00:01:12,008 --> 00:01:15,414
the open source framework vulcanjs that used to run on top

14
00:01:15,452 --> 00:01:20,040
of meteor and is now working with NextJs.

15
00:01:20,730 --> 00:01:24,134
I'm a member of the devographics collective who runs the

16
00:01:24,172 --> 00:01:27,666
state of JavaScript costs and graphQL surveys created

17
00:01:27,698 --> 00:01:31,126
by Sasha Graph and I'm a next JS teacher

18
00:01:31,158 --> 00:01:35,130
at human coders. You can find me on Twitter and medium.

19
00:01:36,190 --> 00:01:39,466
So this talk is essentially about

20
00:01:39,568 --> 00:01:43,310
web personalization. So let's start by defining it.

21
00:01:43,460 --> 00:01:47,694
I think the most common example of web personalization is

22
00:01:47,812 --> 00:01:50,858
theming. It's just, for instance,

23
00:01:51,034 --> 00:01:54,366
letting a user pick version

24
00:01:54,398 --> 00:01:57,986
of the website they like. Here I

25
00:01:58,008 --> 00:02:02,034
have free themes, firewater and grass. Of course, usually in

26
00:02:02,072 --> 00:02:05,474
real life the theme will be about dark versus light

27
00:02:05,512 --> 00:02:08,806
mode, for instance, but it could also be an adaptation to

28
00:02:08,828 --> 00:02:12,566
a certain company, having your own logo or picking your own colors for

29
00:02:12,588 --> 00:02:16,440
a website. So web personalization is anything

30
00:02:16,810 --> 00:02:20,838
that adapts a website to who the user

31
00:02:20,934 --> 00:02:24,570
is and usually knowing who

32
00:02:24,640 --> 00:02:27,722
the user is. ISR actually implemented using

33
00:02:27,856 --> 00:02:31,146
cookies. For instance, I will have a cookie

34
00:02:31,178 --> 00:02:34,222
name starter with the values fire, water or

35
00:02:34,276 --> 00:02:38,058
grass that will define the themes I picked.

36
00:02:38,154 --> 00:02:41,210
But you are already used to use personalization

37
00:02:41,290 --> 00:02:44,770
in a lot of different contexts. So for instance,

38
00:02:45,270 --> 00:02:48,366
you have the same use case, but you have internationalization,

39
00:02:48,478 --> 00:02:52,286
which is a form of web personalization because you adapt

40
00:02:52,398 --> 00:02:55,894
a website to the language of the user that you

41
00:02:55,932 --> 00:02:59,670
detect based on the request headers or cookies.

42
00:03:00,970 --> 00:03:04,774
There is the paid versus unpaid content and

43
00:03:04,812 --> 00:03:08,930
guest content. You have a b testing. That's one very advanced

44
00:03:09,010 --> 00:03:12,874
example of web personalization where you change

45
00:03:13,072 --> 00:03:16,122
a version of the website to make an experiment. For example,

46
00:03:16,176 --> 00:03:20,042
you have half the user with a version can old version and the other

47
00:03:20,096 --> 00:03:23,486
half with a newer version that you want to experiment and you

48
00:03:23,508 --> 00:03:27,438
compare the statistics for both things is an example

49
00:03:27,524 --> 00:03:32,294
of web personalization. So it's kind of ubiquitous

50
00:03:32,442 --> 00:03:36,338
in web development. So let's focus on this

51
00:03:36,424 --> 00:03:40,242
theme use case and let's try to render the right

52
00:03:40,296 --> 00:03:43,540
those based on the user information.

53
00:03:44,970 --> 00:03:48,902
So first let's define this idea of rendering. What do I mean by

54
00:03:48,956 --> 00:03:52,918
prerendering? Nextjs is a good platform

55
00:03:53,004 --> 00:03:56,886
to understand rendering because it embeds all modes of

56
00:03:56,988 --> 00:04:00,306
prerendering of server rendering and client rendering.

57
00:04:00,338 --> 00:04:04,070
So the first one, client rendering is just using javascript

58
00:04:04,150 --> 00:04:07,974
or treat or whatever front end framework you are used to use when creating

59
00:04:08,022 --> 00:04:11,390
single page application with a lot of interactivity and

60
00:04:11,460 --> 00:04:14,990
javascript. That's good. Old client side prerendering,

61
00:04:15,730 --> 00:04:19,642
server side rendering or per request server side rendering

62
00:04:19,786 --> 00:04:22,882
is what you are used to do if you code

63
00:04:22,936 --> 00:04:26,482
with PHP, Ruby, django, a language that is not

64
00:04:26,616 --> 00:04:30,066
node JS, basically a

65
00:04:30,088 --> 00:04:34,110
traditional web server. And static

66
00:04:34,190 --> 00:04:38,374
prerendering is a variation of server rendering where you

67
00:04:38,492 --> 00:04:42,306
render the page ahead of time and not for every request.

68
00:04:42,418 --> 00:04:46,422
It's just like putting your server render into a cache or

69
00:04:46,476 --> 00:04:50,006
just writing HTML ahead of time that is not adapted

70
00:04:50,038 --> 00:04:52,170
to the current user, to the request.

71
00:04:53,470 --> 00:04:56,774
So basically, client side prerendering and per request

72
00:04:56,822 --> 00:04:59,606
server side rendering are dynamic patterns.

73
00:04:59,718 --> 00:05:03,230
Why? Because they take the current users into account.

74
00:05:03,380 --> 00:05:06,686
Serverside rendering happens for each request, so you

75
00:05:06,708 --> 00:05:10,142
can adapt the answer based on the request content. So based

76
00:05:10,196 --> 00:05:13,218
on the cookies, the user information and stuff like that.

77
00:05:13,304 --> 00:05:16,558
Client side prerendering happens in the browser. So of course it's

78
00:05:16,574 --> 00:05:19,762
adapted to the user because it's literally running on their

79
00:05:19,816 --> 00:05:23,998
machine. Static treat generation

80
00:05:24,174 --> 00:05:27,654
is, well a static pattern, but it has the

81
00:05:27,692 --> 00:05:31,074
advantage of being faster since the page, the HTML

82
00:05:31,122 --> 00:05:34,934
of the page is generated ahead of time. So there is

83
00:05:34,972 --> 00:05:38,410
no new computation for a new request. But the problem

84
00:05:38,480 --> 00:05:42,326
is that you cannot adapt the content to the request because it's

85
00:05:42,358 --> 00:05:46,060
already on the end. It's too late when the request happens.

86
00:05:47,070 --> 00:05:49,770
So what to use for personalization?

87
00:05:50,190 --> 00:05:53,966
The answer is really the dynamic patterns. Of course

88
00:05:53,988 --> 00:05:57,674
they are dynamic and they can adapt to the current request or user.

89
00:05:57,802 --> 00:06:01,102
The problem ISR that they are slower because they need to do

90
00:06:01,156 --> 00:06:04,994
a new computation for each request or for each

91
00:06:05,032 --> 00:06:07,806
interaction between the user and the browser.

92
00:06:07,998 --> 00:06:12,382
So ideally we would like to use static generation

93
00:06:12,446 --> 00:06:16,370
to get better performances. And segmented rendering

94
00:06:16,450 --> 00:06:19,890
is exactly about that. A way to use the static

95
00:06:20,050 --> 00:06:23,000
pattern for personalized content.

96
00:06:24,010 --> 00:06:27,554
Let me rephrase things idea in terms of

97
00:06:27,612 --> 00:06:31,334
business concept. When you use dynamic

98
00:06:31,382 --> 00:06:34,906
patterns for web personalization, you are

99
00:06:34,928 --> 00:06:39,660
faced with what I call the rich guest per customer issue.

100
00:06:40,050 --> 00:06:43,882
The problem is that you are using those faster static

101
00:06:43,946 --> 00:06:48,190
renders for public content that is not personalized

102
00:06:48,610 --> 00:06:52,062
and you are using the slower dynamic patterns for

103
00:06:52,116 --> 00:06:55,490
personalized content. But personalized content

104
00:06:55,560 --> 00:06:59,426
is usually for your customers, for the people, you know, for the

105
00:06:59,448 --> 00:07:03,458
people that are logged in, for instance for the paid users of your application.

106
00:07:03,624 --> 00:07:07,078
So people pay to access your website,

107
00:07:07,164 --> 00:07:11,142
pay for your ecommerce website, they provide their data and so on.

108
00:07:11,276 --> 00:07:15,480
And yet you treat them less.

109
00:07:16,170 --> 00:07:19,802
You give them worse performances than the people

110
00:07:19,856 --> 00:07:23,718
that are not connected, those guest of your website. That's the rich guest,

111
00:07:23,814 --> 00:07:27,766
poor customers issue. So let's solve

112
00:07:27,798 --> 00:07:29,850
this with segmented rendering.

113
00:07:32,210 --> 00:07:37,226
So the most basic way to implement segmented

114
00:07:37,258 --> 00:07:40,030
rendering is to use the URL,

115
00:07:40,530 --> 00:07:43,826
those patterns words. Okay, for example here we could have

116
00:07:43,848 --> 00:07:46,782
the theme firewater and grass as a URL,

117
00:07:46,846 --> 00:07:51,090
a root parameter of the URL, an explicit parameter.

118
00:07:52,790 --> 00:07:56,370
You may be used to this pattern. For example, for internationalization,

119
00:07:56,450 --> 00:07:59,430
it's common to have fr en,

120
00:07:59,500 --> 00:08:03,238
to say France, England or whatever, to have

121
00:08:03,324 --> 00:08:06,822
the language in the URL. And it's okay for many use

122
00:08:06,876 --> 00:08:10,474
cases. However, there are a few issues. First,

123
00:08:10,592 --> 00:08:13,926
the user can change the URL that's okay for the language,

124
00:08:14,038 --> 00:08:18,186
that's not okay for paid content. Of course they

125
00:08:18,208 --> 00:08:21,718
can see the parameter okay for internationalization.

126
00:08:21,894 --> 00:08:25,470
But if you are doing an A B test, you can throw it into

127
00:08:25,540 --> 00:08:29,406
trash because if the user is aware of the bucket they are in,

128
00:08:29,508 --> 00:08:32,958
it's useless. The test is just broken. So you

129
00:08:32,964 --> 00:08:36,130
cannot do that for a b testing. It's not safe.

130
00:08:36,470 --> 00:08:40,338
And finally, when you have a lot of parameters, the URL will become

131
00:08:40,424 --> 00:08:44,146
quite long and ugly. You cannot show anything, any parameter in

132
00:08:44,168 --> 00:08:47,640
a URL that's not those same way to personalize a website.

133
00:08:49,050 --> 00:08:52,840
Okay, so let's have a second try

134
00:08:53,210 --> 00:08:57,014
without the URL. This time I need

135
00:08:57,212 --> 00:09:00,250
a very small addition to my architecture.

136
00:09:00,670 --> 00:09:04,486
I need to add what we call a proxy

137
00:09:04,518 --> 00:09:08,394
server, a tiny server that is just able to take your

138
00:09:08,432 --> 00:09:12,554
request and to change the URL server

139
00:09:12,602 --> 00:09:16,846
side. And then it will point to the right page.

140
00:09:17,028 --> 00:09:20,974
This is a very subtle change compared to

141
00:09:21,012 --> 00:09:25,374
just using the URL, but very important because this URL

142
00:09:25,502 --> 00:09:29,426
rewrite is happening serverside and it isr not known by

143
00:09:29,448 --> 00:09:33,054
the end user. So the user is just accessing

144
00:09:33,102 --> 00:09:36,578
the website and the URL parameter is added

145
00:09:36,674 --> 00:09:40,086
after server side. It's a kind of server side rerouting of

146
00:09:40,108 --> 00:09:43,606
the request and it's very powerful because it

147
00:09:43,628 --> 00:09:46,902
will solve all our issues in one

148
00:09:46,956 --> 00:09:50,662
go. The user won't see the parameter, it's added

149
00:09:50,726 --> 00:09:54,554
serverside. Those URL doesn't become ugly because

150
00:09:54,592 --> 00:09:57,882
the parameter is not visible and you can do

151
00:09:57,936 --> 00:10:01,834
everything securely. For example, adding a paid parameter securely

152
00:10:01,882 --> 00:10:06,270
because it happens server side, the user cannot alter the parameters manually.

153
00:10:06,770 --> 00:10:10,490
The parameter itself can be computed based on the request,

154
00:10:10,570 --> 00:10:13,746
typically based on a user id you get from

155
00:10:13,768 --> 00:10:17,406
the cookies session token that allows

156
00:10:17,438 --> 00:10:21,262
to identify the user uniquely server side. But again it's

157
00:10:21,406 --> 00:10:24,210
safe, which is great compared to the URL.

158
00:10:25,350 --> 00:10:29,014
And this is just segmented rendering. That's it.

159
00:10:29,052 --> 00:10:32,546
You just have to add this tiny redirection server and it opens

160
00:10:32,578 --> 00:10:36,962
up this new pattern that lets you statically render personalized

161
00:10:37,026 --> 00:10:39,660
content and get the best performance for your customers.

162
00:10:41,470 --> 00:10:44,970
One URL per segment and a rope server.

163
00:10:46,270 --> 00:10:50,460
This might sound a bit abstract to be fair.

164
00:10:51,010 --> 00:10:55,002
So I wanted to show you now a possible implementation

165
00:10:55,066 --> 00:10:59,018
with next JS middleware. Because next JS edge middlewares

166
00:10:59,034 --> 00:11:02,966
can play the role of the proxy servers I've described

167
00:11:03,018 --> 00:11:06,514
earlier. It's specifically running at the edge. Of course

168
00:11:06,552 --> 00:11:10,178
it could work with more traditional architecture, for example with an

169
00:11:10,344 --> 00:11:14,302
NginX proxy server. But in nextjs

170
00:11:14,366 --> 00:11:18,054
the advantage is that it's built in the framework. You can

171
00:11:18,092 --> 00:11:22,406
collocate this serverside and your nextjs code, and in

172
00:11:22,428 --> 00:11:26,418
addition it's written in JavaScript, so it's more intuitive for front end developer

173
00:11:26,514 --> 00:11:30,550
than say Nginx or configuring your AWS

174
00:11:30,630 --> 00:11:34,934
gateway or any solution that is targeted at DevOps,

175
00:11:35,062 --> 00:11:39,238
while nextjs middleware are targeted more at Javascript

176
00:11:39,334 --> 00:11:43,098
developers. So let's proceed with the demonstration.

177
00:11:43,274 --> 00:11:47,226
Let's get started by discovering the end result of segmented

178
00:11:47,258 --> 00:11:50,734
rendering. So I have a simple demonstration website,

179
00:11:50,852 --> 00:11:55,682
you can find the link in the slide and I will share that where

180
00:11:55,736 --> 00:11:59,762
relevant. So basically I have this website and I let

181
00:11:59,816 --> 00:12:04,178
the user explicitly select a theme between fire,

182
00:12:04,264 --> 00:12:06,978
water and grass. Okay?

183
00:12:07,144 --> 00:12:10,598
And the idea of segmented rendering is that I don't want

184
00:12:10,684 --> 00:12:14,882
the theme to appear in the URL and I want the theme selection

185
00:12:14,946 --> 00:12:18,274
process to be secure because for a theme there is no critical

186
00:12:18,322 --> 00:12:21,562
issue of course, but I want this pattern to work also for paid

187
00:12:21,616 --> 00:12:25,274
content, for secure content, for IB test, for whatever. I want a very

188
00:12:25,312 --> 00:12:28,474
generic pattern. So here I have

189
00:12:28,512 --> 00:12:32,782
no theme currently and I will select the fire

190
00:12:32,916 --> 00:12:36,286
theme. Okay, the page refresh and

191
00:12:36,308 --> 00:12:39,994
the current, those is fire. You see that the text becomes

192
00:12:40,042 --> 00:12:44,046
red. So first thing to notice, it's slightly

193
00:12:44,078 --> 00:12:48,066
small on my computer. But basically you see were that the URL is

194
00:12:48,088 --> 00:12:51,554
not changed, I don't have a fire parameter, I don't need

195
00:12:51,592 --> 00:12:55,310
it. Second, you can notice

196
00:12:55,390 --> 00:12:58,446
in the network tab, for instance if I do a hard

197
00:12:58,488 --> 00:13:02,614
refresh, that the result returned from

198
00:13:02,652 --> 00:13:07,362
the server is already personalized

199
00:13:07,506 --> 00:13:11,130
current those fire I don't have the css, so you won't see

200
00:13:11,200 --> 00:13:14,666
the color, the actual color in the development tooling. But you see that

201
00:13:14,688 --> 00:13:18,854
the text is correct. So this means that this was server

202
00:13:18,902 --> 00:13:22,650
renders. However, this was statically

203
00:13:22,730 --> 00:13:26,750
server rendering, meaning that I did not need a new computation.

204
00:13:27,570 --> 00:13:31,418
I cannot prove that in the browser because you cannot

205
00:13:31,514 --> 00:13:35,422
see what happened in the server, but I will show you the corresponding

206
00:13:35,486 --> 00:13:39,358
code that is using only the static features of nextjs

207
00:13:39,454 --> 00:13:42,738
and not per request. Server side rendering. This is very important.

208
00:13:42,824 --> 00:13:46,598
This means that things personalization doesn't require a

209
00:13:46,604 --> 00:13:50,998
new computation. If you have 3 million people using

210
00:13:51,164 --> 00:13:54,742
the fire theme, there is only one

211
00:13:54,796 --> 00:13:59,290
render and not one render for each of the those million request.

212
00:13:59,950 --> 00:14:03,142
That's the big difference with dynamic patterns.

213
00:14:03,206 --> 00:14:06,140
And it's faster because it's already renders as well.

214
00:14:07,310 --> 00:14:10,710
So the current those ISR statically renders

215
00:14:10,870 --> 00:14:14,186
to define and to remember the corrected theme.

216
00:14:14,218 --> 00:14:17,694
I've set up a cookie, a theme cookie that can

217
00:14:17,732 --> 00:14:21,470
be read by the server on each request to select the right

218
00:14:21,540 --> 00:14:25,502
theme for the current user. As simple

219
00:14:25,556 --> 00:14:29,306
as that. And this pattern is very interesting because as

220
00:14:29,348 --> 00:14:33,358
said earlier, it applies to any kind of personalization

221
00:14:33,454 --> 00:14:37,074
where you can define a segment where multiple

222
00:14:37,202 --> 00:14:40,566
people may have the same

223
00:14:40,748 --> 00:14:44,166
version of the website. Like can a b test where you have two

224
00:14:44,188 --> 00:14:47,802
groups with many people in each group. Like a language where world

225
00:14:47,856 --> 00:14:51,100
country will use the same language and stuff like that.

226
00:14:52,270 --> 00:14:55,450
So let's take a look at the code. First,

227
00:14:55,520 --> 00:14:59,162
it starts with the middleware, which is the most

228
00:14:59,216 --> 00:15:02,506
important part of my segmented rendering

229
00:15:02,538 --> 00:15:06,510
architecture. It's the proxy server I've shown earlier.

230
00:15:06,930 --> 00:15:10,094
So the middleware ISR really simple when

231
00:15:10,132 --> 00:15:13,730
I mean it's a light server. It's a light server.

232
00:15:14,310 --> 00:15:18,066
There are more concepts than code here. So the

233
00:15:18,088 --> 00:15:20,450
middleware will just take the request,

234
00:15:21,990 --> 00:15:25,474
read the theme cookie, it can

235
00:15:25,512 --> 00:15:29,094
check that the theme is valid. So if the user try to use

236
00:15:29,132 --> 00:15:32,642
a those that doesn't exist, well they just cannot.

237
00:15:32,706 --> 00:15:36,214
I can throw an error or I can have any kind of behavior I

238
00:15:36,252 --> 00:15:39,814
want and I can do that server side so it cannot

239
00:15:39,862 --> 00:15:44,074
be hacked by the user. So it would work very well with paid

240
00:15:44,112 --> 00:15:48,074
content, for instance. Then finally I use a

241
00:15:48,112 --> 00:15:52,170
URL rewrite to rewrite the URL of the request.

242
00:15:52,610 --> 00:15:56,026
It's important to notice that it is not a URL reguration,

243
00:15:56,138 --> 00:15:59,962
but can actual rewrite. The difference is just that a reguration

244
00:16:00,026 --> 00:16:03,642
ISR visible to the end user. A rewrite is not,

245
00:16:03,716 --> 00:16:07,902
it is internal to the server. And that's why the end user dont

246
00:16:07,966 --> 00:16:11,726
see the personalization parameter. It's happening on those server

247
00:16:11,758 --> 00:16:15,986
side. It's kind of rerouting a request on the server

248
00:16:16,178 --> 00:16:20,070
to match another URL without the user knowing it.

249
00:16:20,220 --> 00:16:24,166
Okay, the second part of the segment and

250
00:16:24,188 --> 00:16:27,650
rendering architecture is the rendering part.

251
00:16:27,740 --> 00:16:31,942
Here I have redirected the user by detecting

252
00:16:32,006 --> 00:16:35,910
the right segment based on the cookies so the those

253
00:16:35,990 --> 00:16:39,914
and corrected them to right variation of the website.

254
00:16:40,032 --> 00:16:43,566
But I need to actually render the different versions of the

255
00:16:43,588 --> 00:16:46,638
page, different themes for the same page.

256
00:16:46,804 --> 00:16:50,254
So to do so I will use the

257
00:16:50,452 --> 00:16:54,698
API of next js get static path and get static props.

258
00:16:54,794 --> 00:16:58,354
If you are not familiar with nextjs, static path is

259
00:16:58,392 --> 00:17:02,878
about defining which version of the page you want to statically renders.

260
00:17:03,054 --> 00:17:06,738
So here for instance, I'm pre rendering a fire version,

261
00:17:06,834 --> 00:17:10,610
a water version, a version without a those,

262
00:17:10,770 --> 00:17:14,326
and I voluntarily omit graph because I

263
00:17:14,348 --> 00:17:18,342
want to demo incremental static regeneration which isr basically

264
00:17:18,396 --> 00:17:22,540
the ability of nextjs to create

265
00:17:23,230 --> 00:17:27,046
a new version of the page on the go on the first request.

266
00:17:27,158 --> 00:17:30,838
So for instance, if a combination of parameters is not

267
00:17:30,864 --> 00:17:34,014
very common, you may not statically render it,

268
00:17:34,052 --> 00:17:37,194
but instead render it on the first request.

269
00:17:37,322 --> 00:17:41,322
Then it will be put in a cache and reused for further

270
00:17:41,386 --> 00:17:45,890
request. But it's important for those who are already wondering

271
00:17:46,630 --> 00:17:50,034
how we will be able to handlers a website with a lot of

272
00:17:50,072 --> 00:17:53,646
variations. The answer is that you statically renders

273
00:17:53,758 --> 00:17:56,822
the most important variations, a few of them,

274
00:17:56,956 --> 00:18:01,330
and then you used this pattern, this incremental static regeneration

275
00:18:01,410 --> 00:18:04,902
which exists also with

276
00:18:04,956 --> 00:18:08,406
other names in other frameworks. There are other approach to do

277
00:18:08,428 --> 00:18:11,834
so for other variations. Those idea is just that you put

278
00:18:11,872 --> 00:18:15,802
everything in a cache to reuse them later, so that one

279
00:18:15,856 --> 00:18:19,130
render is shared by all users of a segment.

280
00:18:20,430 --> 00:18:24,266
Get static props for each path will compute

281
00:18:24,378 --> 00:18:27,806
the data of the page. So here it's just the

282
00:18:27,828 --> 00:18:31,582
theme itself. But we could also for instance get

283
00:18:31,636 --> 00:18:35,646
more information about each theme in a database

284
00:18:35,678 --> 00:18:38,914
or something like that. Then this

285
00:18:38,952 --> 00:18:43,234
parameter is just paste to the page.

286
00:18:43,432 --> 00:18:47,582
So the those component receive the those as props.

287
00:18:47,726 --> 00:18:51,606
As simple as that in HS. And based on this we

288
00:18:51,628 --> 00:18:55,666
can renders different themes. So for example here I'm selecting

289
00:18:55,858 --> 00:18:59,174
different styles based on the theme,

290
00:18:59,222 --> 00:19:02,986
the current theme value. So that's the

291
00:19:03,008 --> 00:19:06,874
rendering part. I'm configuring my rendering framework. So nextjs gets

292
00:19:06,912 --> 00:19:10,314
p whatever to statically render each

293
00:19:10,352 --> 00:19:13,934
possible variation of the patch. This is not those hard part.

294
00:19:14,052 --> 00:19:17,994
If you are used to static prerendering, things will feel very normal.

295
00:19:18,042 --> 00:19:21,454
It's just static seed generation. It exists with

296
00:19:21,492 --> 00:19:25,122
many technologies and those smart idea is just to

297
00:19:25,176 --> 00:19:29,986
say I'm going to generate variations even

298
00:19:30,088 --> 00:19:33,838
that are not really static, like paid content versus

299
00:19:33,934 --> 00:19:37,686
free content. And I will put a

300
00:19:37,708 --> 00:19:41,190
middleware in front of them to pick the right

301
00:19:41,260 --> 00:19:43,320
variation. I've computed ahead.

302
00:19:46,570 --> 00:19:50,166
I know it sounds a bit unsettling at first, but you

303
00:19:50,188 --> 00:19:53,162
see from the demonstration and you will have access to the code.

304
00:19:53,216 --> 00:19:56,522
Again from the slide there is a link. This is all

305
00:19:56,576 --> 00:20:00,154
open source. It's actually really a few lines of code and

306
00:20:00,192 --> 00:20:04,206
using approach that you already know. You already know

307
00:20:04,228 --> 00:20:07,802
what a URL redirection, what a URL

308
00:20:07,866 --> 00:20:11,562
is, you already know what a request is and you already know what static

309
00:20:11,626 --> 00:20:15,410
rendering is if you are used to create full stack application

310
00:20:15,560 --> 00:20:18,962
or to those frameworks. So I'm just combining the

311
00:20:19,016 --> 00:20:22,674
simple approaches to create to achieve an optimal number

312
00:20:22,712 --> 00:20:25,890
of renders. Small bonus.

313
00:20:26,050 --> 00:20:29,734
I'm using an edge API route to select

314
00:20:29,932 --> 00:20:33,942
the right theme. So I'm using an HTTP cookie basically

315
00:20:34,076 --> 00:20:38,182
to set the theme. This can be useful if you need more

316
00:20:38,236 --> 00:20:43,654
security on the cookie. So for example, based on those unique

317
00:20:43,702 --> 00:20:47,354
identifier for an A B test bucket you might want to use

318
00:20:47,392 --> 00:20:50,942
such patterns. So I'm switching the those using only server side

319
00:20:50,996 --> 00:20:54,746
code and not client side Javascript. So this demonstration

320
00:20:54,858 --> 00:20:57,850
should work without Javascript enabled.

321
00:20:57,930 --> 00:21:01,114
That's the small bonus. It's not mandatory,

322
00:21:01,162 --> 00:21:03,700
but that's the small bonus for this application.

323
00:21:05,350 --> 00:21:08,382
So let's get back at the slides.

324
00:21:08,446 --> 00:21:11,906
Now this has been a long ride, but here we are.

325
00:21:12,008 --> 00:21:15,418
We have implemented segmented rendering and demonstrated

326
00:21:15,454 --> 00:21:19,794
the implementation with next js. If you are exploring

327
00:21:19,842 --> 00:21:23,382
the versel website, Versaille being those company behind Nextjs,

328
00:21:23,516 --> 00:21:26,120
if you don't already know it,

329
00:21:27,950 --> 00:21:32,022
they will use segmented prerendering but give them the name of edge

330
00:21:32,086 --> 00:21:36,170
personalization. This is because in Versailles, for instance,

331
00:21:37,710 --> 00:21:40,934
the proxy server is implemented at the edge.

332
00:21:40,982 --> 00:21:44,666
The edge is just having a cload of tiny

333
00:21:44,698 --> 00:21:48,766
servers that are close to the user. The idea is that the personalized is

334
00:21:48,788 --> 00:21:52,126
very fast and because it happens near the

335
00:21:52,148 --> 00:21:55,774
end users. And this is typically useful if you have a global

336
00:21:55,822 --> 00:21:59,602
company for instance, that operates in multiple country, you may have

337
00:21:59,656 --> 00:22:02,798
segments that are defined by regions, for instance.

338
00:22:02,894 --> 00:22:06,694
So segmented rendering is very appropriate in this

339
00:22:06,732 --> 00:22:10,134
context and it will be translated as

340
00:22:10,172 --> 00:22:13,558
edge personalized at the costs level.

341
00:22:13,644 --> 00:22:17,474
Because it happens at the edge. You will see this naming also

342
00:22:17,532 --> 00:22:22,166
with competitors of Versailles, for example netlify is implementing

343
00:22:22,198 --> 00:22:25,514
edge features. Eleventi is doing another kind

344
00:22:25,552 --> 00:22:29,194
of edge personalized as well, which is

345
00:22:29,232 --> 00:22:33,210
more about altering the HTML than using this redirection

346
00:22:33,290 --> 00:22:37,710
approach. But that's something you might hear about in the ecosystem.

347
00:22:40,130 --> 00:22:43,810
I've picked another name, segmented rendering because I still

348
00:22:43,880 --> 00:22:47,182
want to have a definition

349
00:22:47,246 --> 00:22:50,846
of this pattern that is not specific to the those stagnant rendering

350
00:22:50,878 --> 00:22:54,994
is just my generalization and formalization of things

351
00:22:55,032 --> 00:22:58,378
pattern that you may encounter in practice in the industry.

352
00:22:58,494 --> 00:22:59,990
Vih personalization.

353
00:23:02,810 --> 00:23:07,110
So I'd like to conclude on the future of SSR.

354
00:23:07,710 --> 00:23:12,106
Actually maybe the current

355
00:23:12,208 --> 00:23:16,442
of the SSR, because I'm registering things

356
00:23:16,496 --> 00:23:20,562
talk right after the nextjs 13 release,

357
00:23:20,726 --> 00:23:25,022
and if you don't know it already, it completely changes

358
00:23:25,156 --> 00:23:28,830
the way next JS server side rendering is structured.

359
00:23:29,970 --> 00:23:34,338
The segmented rendering demonstration still hold.

360
00:23:34,504 --> 00:23:38,338
Those implementation is slightly different if you know, if you are

361
00:23:38,504 --> 00:23:41,950
already aware of next JS inner workings.

362
00:23:42,030 --> 00:23:45,246
Basically you have the headers and cookies function, and segmented

363
00:23:45,278 --> 00:23:48,454
rendering is about avoiding to call those functions when

364
00:23:48,492 --> 00:23:52,646
it's not needed. So that's something we

365
00:23:52,668 --> 00:23:55,926
may have the chance to discuss, and I may

366
00:23:55,948 --> 00:23:59,450
have the chance to talk more about if you follow

367
00:23:59,520 --> 00:24:02,906
me on Twitter. Or you can meet me on the nextjs

368
00:24:03,008 --> 00:24:06,650
discord and they are very often talking about such

369
00:24:06,720 --> 00:24:10,154
patterns. But basically the

370
00:24:10,192 --> 00:24:13,774
future of server side prerendering ISR about

371
00:24:13,892 --> 00:24:17,370
caching, it's about forgetting this static

372
00:24:17,450 --> 00:24:21,226
versus per request server side rendering idea and just thinking that it's

373
00:24:21,338 --> 00:24:25,442
about caching. So static rendering is

374
00:24:25,496 --> 00:24:29,614
just server side rendering cached at build time. And the idea of segmented

375
00:24:29,662 --> 00:24:33,602
rendering is just that a tiny server lets you pick

376
00:24:33,656 --> 00:24:37,186
the right cached value. It's just a cache

377
00:24:37,218 --> 00:24:40,806
key actually, and per request serverside rendering is

378
00:24:40,908 --> 00:24:43,970
when a value render cannot be cached.

379
00:24:44,050 --> 00:24:48,486
It can happen in some situation when the data are heavily

380
00:24:48,598 --> 00:24:52,394
personalized, for instance, you cannot put them

381
00:24:52,432 --> 00:24:56,330
in cache. It works here because I have segments of users

382
00:24:56,670 --> 00:24:59,626
that will have the same version of the page,

383
00:24:59,728 --> 00:25:03,150
basically. So the cache key

384
00:25:03,220 --> 00:25:06,430
is not just the URL, it's the full request,

385
00:25:06,770 --> 00:25:10,762
and the cache value is the renders HTML. And the middleware

386
00:25:10,826 --> 00:25:14,234
lets you compute the right key for each request,

387
00:25:14,362 --> 00:25:17,694
translate the request to a URL that acts as an

388
00:25:17,732 --> 00:25:20,994
intermediate cache key. So my bet

389
00:25:21,032 --> 00:25:25,130
is that in the future we will have a unified API for server side rendering

390
00:25:25,150 --> 00:25:28,920
that encompasses static, perrequest and everything in between.

391
00:25:29,850 --> 00:25:33,318
It's a relatively safe bet, given that

392
00:25:33,404 --> 00:25:36,678
again, the next GS 13 release is really about that they

393
00:25:36,764 --> 00:25:40,646
actually started to unify the IPF or serverside rendering.

394
00:25:40,838 --> 00:25:44,714
However, it's still heavily based on the URL more than the

395
00:25:44,752 --> 00:25:48,106
request. So you still have to use this middleware trick to

396
00:25:48,128 --> 00:25:51,866
implement segmented rendering. While I hope that

397
00:25:52,048 --> 00:25:54,618
in an even further future,

398
00:25:54,784 --> 00:25:58,314
instead of having defining the variation

399
00:25:58,362 --> 00:26:01,834
of your page based on the URL, you could use those perrequest directly,

400
00:26:01,882 --> 00:26:05,426
because this is actually what's happening under the URL is

401
00:26:05,448 --> 00:26:08,978
just a simpler way of doing this, but it's actually

402
00:26:09,064 --> 00:26:10,690
all about request.

403
00:26:12,390 --> 00:26:15,766
I hope you enjoyed this talk.

404
00:26:15,868 --> 00:26:19,334
I've put a lot of additional resources at

405
00:26:19,372 --> 00:26:22,422
the end if you want to get more familiar with this

406
00:26:22,476 --> 00:26:26,930
pattern with personalization which is very useful

407
00:26:27,090 --> 00:26:31,494
in the industry. If you are dont ecommerce, a b test and

408
00:26:31,532 --> 00:26:35,010
managing website at scale, you cannot avoid web personalization.

409
00:26:35,090 --> 00:26:39,030
So I've put my preferred resources and a few articles that shows

410
00:26:39,100 --> 00:26:43,226
various variation of segmented rendering like the megaparam

411
00:26:43,258 --> 00:26:47,274
patterns that can let you scale it or how plasmic

412
00:26:47,402 --> 00:26:51,440
use it in a no code approach which is also very interesting.

413
00:26:52,210 --> 00:26:55,678
I hope you enjoyed this talk and I hope

414
00:26:55,764 --> 00:26:59,354
you will enjoy the rest of the comfort conference.

415
00:26:59,482 --> 00:27:00,780
See you soon. Thank you.

