1
00:00:25,570 --> 00:00:28,706
You hi, my name is Kenneth

2
00:00:28,738 --> 00:00:32,082
Dumez and I'm a developer relations engineers here at Teleport.

3
00:00:32,226 --> 00:00:35,190
Thank you so much for taking the time to come listen to my talk.

4
00:00:35,340 --> 00:00:38,546
We've got so many good ones at the conference this year, and I really urge

5
00:00:38,578 --> 00:00:41,654
you to check them all out if you get the chance. The folks from Comp

6
00:00:41,692 --> 00:00:44,920
42 really know how to get a group together,

7
00:00:45,450 --> 00:00:49,046
so today I hope I can teach you a couple things about securing your

8
00:00:49,068 --> 00:00:53,102
automated workflows, how the landscape looks right now, and why it's probably a bad

9
00:00:53,156 --> 00:00:56,698
idea to use long lived static credentials in your various CI

10
00:00:56,714 --> 00:01:00,590
CD flows. But today we're going to focus especially in

11
00:01:00,660 --> 00:01:03,762
on GitHub actions, hence the name of the talk,

12
00:01:03,896 --> 00:01:07,810
why you should never use static shared secrets in GitHub actions

13
00:01:09,590 --> 00:01:13,086
so many of you are probably familiar with these two logos,

14
00:01:13,278 --> 00:01:16,786
if not the one on the right, certainly. If not the one on the right,

15
00:01:16,888 --> 00:01:20,706
certainly the one on the left. Gotta love that strange little octacat

16
00:01:20,738 --> 00:01:24,278
guy that the GitHub folks have conjured up. The logo on the right, if you're

17
00:01:24,284 --> 00:01:28,098
not familiar, is for their CI CD solution, GitHub Actions

18
00:01:28,274 --> 00:01:31,966
GitHub Actions is great because it allows you to centralize all of your integration

19
00:01:32,018 --> 00:01:36,166
and development testing workflows in the same place as you keep the code you're testing.

20
00:01:36,278 --> 00:01:39,642
So that way there's no need for a bunch of other repositories floating around

21
00:01:39,696 --> 00:01:43,374
with different workplace configuration files and

22
00:01:43,412 --> 00:01:46,590
et cetera. There's no need for separate DevOps repos.

23
00:01:47,010 --> 00:01:50,510
You get this nifty little UI where you can see all of your test runs.

24
00:01:51,570 --> 00:01:55,198
You can also click into individual runs and see all of your details.

25
00:01:55,294 --> 00:01:59,010
It's really a great tool for managing your development lifecycle in a pretty

26
00:01:59,080 --> 00:02:03,074
intuitive manner. The GitHub actions config files themselves are

27
00:02:03,112 --> 00:02:06,886
also pretty simple. It's easy to get started. It's really just a

28
00:02:06,908 --> 00:02:10,454
great solution without overcomplicating things and a lot of

29
00:02:10,572 --> 00:02:13,894
minimal overhead. This is just a little example from

30
00:02:14,012 --> 00:02:17,506
one of our repos at teleport from the instruct labs

31
00:02:17,538 --> 00:02:21,366
that we have, and I'm

32
00:02:21,398 --> 00:02:24,682
certainly not alone in my opinion on the tool. This is data

33
00:02:24,736 --> 00:02:28,330
from HG insights that shows the adoption of GitHub actions by companies

34
00:02:28,400 --> 00:02:31,642
in the last year. As the product has matured, its user base

35
00:02:31,696 --> 00:02:34,334
has also grown wildly and still continues to grow.

36
00:02:34,452 --> 00:02:37,706
When GitHub Actions first came out, it was a little bit rough around the edges,

37
00:02:37,818 --> 00:02:41,870
but now as it matures, adoption has skyrocketed

38
00:02:42,290 --> 00:02:46,174
and this is also only tracking enterprise organizations and

39
00:02:46,212 --> 00:02:49,698
doesn't account for the thousands of open source product that are also relying on

40
00:02:49,704 --> 00:02:53,218
GitHub actions for their CI CD needs. As you can see,

41
00:02:53,304 --> 00:02:56,750
over the last twelve months there's been a 71.88%

42
00:02:56,840 --> 00:03:00,822
increase in companies using GitHub actions. This brings the current running

43
00:03:00,876 --> 00:03:05,766
total of companies that HG insights tracks to 9406.

44
00:03:05,868 --> 00:03:09,398
It's a lot of companies. And if

45
00:03:09,404 --> 00:03:12,686
you've seen some of my other talks, you know I love the Git Guardian

46
00:03:12,738 --> 00:03:16,042
State of Secret Sprawl report. This is the most recent numbers

47
00:03:16,096 --> 00:03:19,450
from their 2022 report. Looking back on the past year,

48
00:03:19,600 --> 00:03:22,874
I really do love this report because it really illustrates how big

49
00:03:22,912 --> 00:03:26,446
the problem with secrets, especially in GitHub, is. You would

50
00:03:26,468 --> 00:03:30,334
think by now we as an industry would start adapting our practices a little

51
00:03:30,372 --> 00:03:33,982
bit and being more careful with how we manage credentials. But no,

52
00:03:34,116 --> 00:03:38,414
the problem is actually getting worse. 6 million secrets

53
00:03:38,462 --> 00:03:42,180
were leaked in 2021. That was double that of 2020.

54
00:03:43,270 --> 00:03:47,054
Part of this has to do with the increased amount of companies moving their infrastructure

55
00:03:47,102 --> 00:03:50,934
from more traditional on prem setups moving

56
00:03:50,972 --> 00:03:54,498
over to the cloud. As there are more cloud resources, of course there's

57
00:03:54,514 --> 00:03:58,082
going to be more credentials requiring to access them, different access tokens,

58
00:03:58,146 --> 00:04:01,500
API keys, long live passwords, you name it.

59
00:04:02,910 --> 00:04:06,666
And frankly, most organizations are just not equipped to deal with

60
00:04:06,688 --> 00:04:10,282
these leaks. Another quote from the report is that on

61
00:04:10,336 --> 00:04:13,534
average, in 2021, a typical company with 400

62
00:04:13,572 --> 00:04:18,158
developers and four appsec engineers would discover 1050

63
00:04:18,244 --> 00:04:22,190
unique secrets leaked upon scanning its repositories and commits.

64
00:04:22,530 --> 00:04:26,274
And each of these secrets is typically not leaked in an isolated way in just

65
00:04:26,312 --> 00:04:30,654
one place. On average, each of these individual secrets appeared

66
00:04:30,702 --> 00:04:34,718
13 different times per secrets in different places

67
00:04:34,814 --> 00:04:38,198
across the code base. Accounting for

68
00:04:38,204 --> 00:04:41,574
all this duplication across the code base. This means that

69
00:04:41,612 --> 00:04:45,814
a single appsec engineer, on average, annually needs

70
00:04:45,852 --> 00:04:49,686
to handle 3413 secrets,

71
00:04:49,878 --> 00:04:54,134
on average. But that said, this is simply not sustainable.

72
00:04:54,262 --> 00:04:56,940
Those poor appsec engineers need a break.

73
00:04:58,910 --> 00:05:02,522
So there's a couple different solutions to this problem.

74
00:05:02,656 --> 00:05:06,058
How do we deal with credentials? How do we deal with secrets in our repos?

75
00:05:06,234 --> 00:05:10,682
One of the purported solutions is of course, just to use GitHub's encrypted secrets.

76
00:05:10,826 --> 00:05:14,586
These are pretty good. Everything is encrypted on the client side and then decrypted

77
00:05:14,618 --> 00:05:18,334
on runtime, so the secret can actually just be injected into the workflow.

78
00:05:18,462 --> 00:05:21,694
And GitHub actually does use a mechanism that attempts to redact

79
00:05:21,742 --> 00:05:24,974
any secrets that appear in run logs or get

80
00:05:25,032 --> 00:05:27,080
exposed in other ways.

81
00:05:28,490 --> 00:05:31,702
However, because during the runs there are multiple ways

82
00:05:31,756 --> 00:05:35,714
secret values can be mutated and transformed, accidental exposure

83
00:05:35,762 --> 00:05:39,734
does happen another problem is dynamic

84
00:05:39,782 --> 00:05:43,210
access, dynamic credential exposure. For example,

85
00:05:43,360 --> 00:05:46,854
say you're using a private key to generate assigned JWT

86
00:05:46,902 --> 00:05:50,214
token to access a web API. Unless you register

87
00:05:50,262 --> 00:05:53,966
that JWT as a secret in GitHub, it won't be redacted and

88
00:05:53,988 --> 00:05:58,154
can be exposed in logs and standard out and standard error anywhere

89
00:05:58,202 --> 00:06:02,046
that that is being printed. Another issue is chain of

90
00:06:02,068 --> 00:06:05,466
custody. So this is important because any user

91
00:06:05,498 --> 00:06:09,186
with write access to your repository has read access to all the

92
00:06:09,208 --> 00:06:13,086
secrets configured in your repo. This makes it very difficult to audit

93
00:06:13,118 --> 00:06:16,626
and keep track of who is accessing your resources, at what time,

94
00:06:16,728 --> 00:06:20,786
and who is doing what with your various secrets. This is increasingly

95
00:06:20,818 --> 00:06:24,070
a bigger problem at scale. It could be easier if you have

96
00:06:24,140 --> 00:06:27,634
three, four engineers, but then once you have that example prior

97
00:06:27,682 --> 00:06:31,114
where there's 400, it's a lot to keep track

98
00:06:31,152 --> 00:06:35,670
of. There's also this issue of duplication.

99
00:06:35,830 --> 00:06:39,206
So in an ideal world, of course, the secrets you are using in your GitHub

100
00:06:39,238 --> 00:06:42,350
actions, repo would only live there and there alone.

101
00:06:42,850 --> 00:06:46,814
However, a common setup that I've seen in the past

102
00:06:47,012 --> 00:06:50,526
is that these secrets will actually be duplicated across various places in

103
00:06:50,548 --> 00:06:53,790
your infrastructure. They might be stored in a password vault, for example,

104
00:06:53,860 --> 00:06:57,790
as well as in the GitHub repository. This is really useful for an engineer,

105
00:06:57,870 --> 00:07:01,442
because if you wanted to manually access a resource, you'll have the credentials at hand.

106
00:07:01,496 --> 00:07:05,106
They're right in the vault, you can look them up

107
00:07:05,208 --> 00:07:09,282
and go from there. They're not hidden behind this GitHub

108
00:07:09,346 --> 00:07:13,346
encryption. The problem is though is that now you have these credentials

109
00:07:13,378 --> 00:07:17,238
floating around in a few different places. This makes it very difficult,

110
00:07:17,324 --> 00:07:20,950
for example, to rotate these creds. Say if an engineer leaves,

111
00:07:21,110 --> 00:07:24,374
a new one joins or a credential

112
00:07:24,422 --> 00:07:28,122
gets compromised. You need to rotate that. You need to now track down all

113
00:07:28,176 --> 00:07:31,658
the different places that you're using this credential and rotate

114
00:07:31,674 --> 00:07:35,040
it in every single one of these. It becomes a lot very quickly.

115
00:07:37,010 --> 00:07:40,794
This also expands the attack surface that would allow malicious

116
00:07:40,842 --> 00:07:44,498
actors to take advantage of these credentials. The more places that you

117
00:07:44,504 --> 00:07:48,702
have these secrets stored, the less secure they are, leading to more chances for mistakes

118
00:07:48,766 --> 00:07:51,918
and compromising developer efficiency. Whenever secrets are added,

119
00:07:52,014 --> 00:07:54,850
removed, or need to be rotated,

120
00:07:56,070 --> 00:07:59,698
another avenue is saying, okay, so we know that secrets

121
00:07:59,714 --> 00:08:02,966
are probably going to be leaked at some point, so we should constantly be

122
00:08:02,988 --> 00:08:06,294
monitoring our repositories for those creds so we can respond as

123
00:08:06,332 --> 00:08:10,166
quickly as possible to leaks. This is where the monitoring

124
00:08:10,198 --> 00:08:13,850
and scanning solutions come in, just like Gitguardian.

125
00:08:14,270 --> 00:08:18,058
So these tools are great and not mutually exclusive with using,

126
00:08:18,144 --> 00:08:22,042
say, encrypted secrets when you can, but really they're just not

127
00:08:22,096 --> 00:08:25,226
quite enough. They're more of a reactive solution that you

128
00:08:25,248 --> 00:08:28,874
can use to do damage control rather than preventing the problem at the resources,

129
00:08:29,002 --> 00:08:32,186
which is kind of always the end goal to make sure that the problem doesn't

130
00:08:32,218 --> 00:08:35,754
happen in the beginning. They also often require manual

131
00:08:35,802 --> 00:08:40,206
intervention. So, say, when a scan picks up a security leak

132
00:08:40,398 --> 00:08:44,654
and a secret gets out there, a security engineer

133
00:08:44,702 --> 00:08:48,086
may be pinged and he'll have to put down dinner with

134
00:08:48,108 --> 00:08:52,498
their family. Then go rotate that cred in the password vault and delete

135
00:08:52,514 --> 00:08:55,480
it the 13 times it appears in the leaked code base.

136
00:08:56,650 --> 00:08:59,722
And for anyone that's had to delete old commit history

137
00:08:59,776 --> 00:09:03,578
from GitHub and absolutely sift through that huge

138
00:09:03,664 --> 00:09:07,180
tree and try to repair it, they know how difficult that it can

139
00:09:08,590 --> 00:09:12,494
can. It's a real mess to delete and overwrite GitHub history to make sure that

140
00:09:12,532 --> 00:09:14,480
commit is fully, fully gone.

141
00:09:15,250 --> 00:09:19,114
So again, these tools are great, these scanning and monitoring

142
00:09:19,162 --> 00:09:22,350
tools, but they just don't go far

143
00:09:22,420 --> 00:09:25,140
enough, and they certainly aren't enough by themselves.

144
00:09:26,790 --> 00:09:29,794
So this leads to the question of, well,

145
00:09:29,912 --> 00:09:32,834
so what can we do about this? What can we do about all of our

146
00:09:32,872 --> 00:09:33,730
secrets?

147
00:09:37,240 --> 00:09:40,680
What if we simply removed the long lived credentials?

148
00:09:41,340 --> 00:09:44,728
Keeping long lived credentials safe is hard. It's really,

149
00:09:44,814 --> 00:09:48,536
really difficult. So the reality is that as long as they

150
00:09:48,558 --> 00:09:53,340
exist, no matter everyone's best intentions, to follow best security practice guidelines,

151
00:09:53,680 --> 00:09:56,540
always encrypt those secrets, make sure they're rotated,

152
00:09:57,680 --> 00:10:00,824
don't leak anything, is that humans

153
00:10:00,872 --> 00:10:04,796
are human, right? They will eventually make a mistake.

154
00:10:04,908 --> 00:10:08,704
And when they do, if it's not properly handled immediately, there could be huge

155
00:10:08,742 --> 00:10:13,356
repercussions. We're talking customer data leaks. We're talking bitcoin

156
00:10:13,388 --> 00:10:17,076
miners in all of your infrastructure costs shooting up to millions of

157
00:10:17,098 --> 00:10:19,300
dollars, et cetera.

158
00:10:19,640 --> 00:10:22,804
And you might stop 99 out of 100

159
00:10:22,842 --> 00:10:26,468
of those leaks, maybe 999 out of 1000.

160
00:10:26,634 --> 00:10:29,776
But eventually one of those secrets is going to make it into a paste

161
00:10:29,808 --> 00:10:33,448
bin file somewhere on the dark web that some kid in Brussels is going to

162
00:10:33,454 --> 00:10:36,724
sell to buy some NFTs or whatever hacker

163
00:10:36,772 --> 00:10:40,090
teens in Brussels do, it's not going to be good.

164
00:10:41,660 --> 00:10:44,968
So one of the ways that we can actually eliminate these

165
00:10:45,054 --> 00:10:48,904
long lived credentials is by using a solution like teleport machine

166
00:10:48,952 --> 00:10:52,300
id for GitHub actions. In teleport eleven,

167
00:10:52,900 --> 00:10:56,796
one of our most recent releases, we actually added support for GitHub

168
00:10:56,828 --> 00:11:00,304
actions workflows. So with

169
00:11:00,342 --> 00:11:04,348
teleport machineid, if instead of managing your access using long live credentials,

170
00:11:04,444 --> 00:11:08,160
you can just join each infrastructure resource to your teleport cluster

171
00:11:08,240 --> 00:11:11,796
and instead use automated short lived certificates. There's no

172
00:11:11,818 --> 00:11:15,476
credentials to manage, there's a rich audit log of everything happening in your

173
00:11:15,498 --> 00:11:18,836
CI CD environments, and you have that chain of custody even for

174
00:11:18,858 --> 00:11:22,516
your automated worker nodes. So this is kind of a higher level architecture

175
00:11:22,548 --> 00:11:25,864
diagram showing how teleport machineid can

176
00:11:25,902 --> 00:11:30,036
interact. For the Kubernetes cluster, the worker node will actually refresh its credentials

177
00:11:30,068 --> 00:11:33,160
on a cadence, getting a new kubeconfig from the teleport host,

178
00:11:33,240 --> 00:11:36,220
renewing its access in an automated, secure fashion.

179
00:11:36,800 --> 00:11:40,776
So in this instance, this machineid worker node

180
00:11:40,888 --> 00:11:44,076
does not actually use any persistent credentials. It has

181
00:11:44,098 --> 00:11:47,436
these short lived certs that it renews from the teleport host,

182
00:11:47,548 --> 00:11:51,280
making sure that there's no secrets to manage, there's nothing to jumble.

183
00:11:51,860 --> 00:11:55,860
And this will actually interact with your GitHub actions workflows

184
00:11:56,360 --> 00:12:00,272
to make sure that you don't have to use any static credentials

185
00:12:00,416 --> 00:12:03,220
in your CI CD workflows.

186
00:12:04,520 --> 00:12:08,280
So let's check it out, do a little demo, see it in action.

187
00:12:12,460 --> 00:12:16,344
Cool. So first what we're going to need to do is to create a

188
00:12:16,382 --> 00:12:19,736
join token. These tokens set out criteria by

189
00:12:19,758 --> 00:12:23,256
which the auth server decides whether or not to allow a bot or node

190
00:12:23,288 --> 00:12:26,936
to join. To create a token, we can write the resources yaml

191
00:12:26,968 --> 00:12:30,492
to a file on disk, and then use the teleport CLI control

192
00:12:30,546 --> 00:12:33,808
tool tcuttle to apply it. Let's take a look at

193
00:12:33,814 --> 00:12:34,930
our token here.

194
00:12:36,980 --> 00:12:40,752
So we have our token, it's pretty simple. We have the name Comp

195
00:12:40,806 --> 00:12:44,512
42 GitHub token. We have the

196
00:12:44,566 --> 00:12:48,196
when it expires, which I just set to the year 2100 for this

197
00:12:48,218 --> 00:12:51,556
example. It's going to be around for a while, but you can set this

198
00:12:51,738 --> 00:12:56,036
arbitrarily as you'd like. And then we have the spec

199
00:12:56,138 --> 00:12:59,536
which contains things like the role. The role defines

200
00:12:59,568 --> 00:13:03,316
which roles that this token will grant access to. The value of the bot

201
00:13:03,428 --> 00:13:06,564
states that this token grants access to a machine id bot.

202
00:13:06,692 --> 00:13:10,216
Then we have cube, which specifies that it will allow the bot to

203
00:13:10,238 --> 00:13:13,364
interact with Kubernetes resources. We have the join method

204
00:13:13,412 --> 00:13:16,824
bot name, which is the name of the bot, and then the GitHub

205
00:13:16,872 --> 00:13:20,584
section. This will be our repo that we'll be running our actions

206
00:13:20,632 --> 00:13:23,916
from. I just spun up a quick little demo repo for the purposes

207
00:13:23,948 --> 00:13:27,164
of this example just in my personal repository.

208
00:13:27,292 --> 00:13:30,610
Dumez Conf 42 demo.

209
00:13:32,980 --> 00:13:36,164
Next, we'll actually create the token resource using that

210
00:13:36,202 --> 00:13:40,100
cli utility I was talking about earlier called tcuttle

211
00:13:41,160 --> 00:13:44,724
in order to create the token, we'll run tcuttle create.

212
00:13:44,922 --> 00:13:48,488
This command will take in the config yaml and product a

213
00:13:48,494 --> 00:13:50,200
resource on our cluster.

214
00:13:51,260 --> 00:13:55,780
Great. Now let's just check to make sure that the token was created successfully.

215
00:13:55,940 --> 00:13:59,220
We can do that by running tcuttle tokens

216
00:13:59,300 --> 00:14:02,476
ls as you can see, we have the name

217
00:14:02,498 --> 00:14:05,896
of our token here conf 42 GitHub token

218
00:14:06,008 --> 00:14:09,500
with the expected type bot and cube.

219
00:14:10,480 --> 00:14:14,172
Perfect. Next thing, what we're going to do is actually create

220
00:14:14,226 --> 00:14:17,612
our bot. This will be the bot that will be running all of their companies

221
00:14:17,676 --> 00:14:21,756
triggered by our GitHub actions workflow. The machine id bot created

222
00:14:21,788 --> 00:14:25,472
in this example will be used to access a specific node on the cluster

223
00:14:25,536 --> 00:14:29,072
via tsh Ssh. Teleport's Ssh utility,

224
00:14:29,216 --> 00:14:32,836
and will therefore require a role that can access the cluster as needed.

225
00:14:33,018 --> 00:14:36,932
This example configuration will apply the access role. However,

226
00:14:37,066 --> 00:14:40,596
care should be taken to either create or apply a role according to the

227
00:14:40,618 --> 00:14:43,992
principle of least privilege in production environments. For this demo,

228
00:14:44,046 --> 00:14:47,544
it doesn't matter as much, but if you're using this in production, you always want

229
00:14:47,582 --> 00:14:51,172
the role to have the least privileges possible. Additionally,

230
00:14:51,236 --> 00:14:55,304
it should have explicit access to the cluster using a username created specifically

231
00:14:55,352 --> 00:14:59,372
for the bot user alone, and do not share this username with any other use

232
00:14:59,426 --> 00:15:02,936
case. So here we have our command tcuttle

233
00:15:02,968 --> 00:15:06,348
bots add comp 42 demo the name of our bot,

234
00:15:06,444 --> 00:15:10,256
we give it the roles access and we input the token here. We also give

235
00:15:10,278 --> 00:15:13,644
it the login Ubuntu. Again, in a production environment,

236
00:15:13,692 --> 00:15:15,890
you're going to want a specific user for this.

237
00:15:18,360 --> 00:15:21,556
Great, so it looks like it worked. Let's just check to make

238
00:15:21,578 --> 00:15:25,076
sure that the bot was successfully created. In order to do this, we can

239
00:15:25,098 --> 00:15:29,288
use tcuttle bots ls and here we have our

240
00:15:29,374 --> 00:15:32,696
demo bot.com 42 demo and you can see

241
00:15:32,718 --> 00:15:35,720
that it has the correct user and the correct roles.

242
00:15:36,460 --> 00:15:40,284
Awesome. Now let's take

243
00:15:40,322 --> 00:15:44,140
a look at this example GitHub actions workflow I created earlier.

244
00:15:49,330 --> 00:15:53,478
Great. This workflow leverages two existing teleport actions,

245
00:15:53,594 --> 00:15:57,246
which first install teleport on the actions runner. Then we'll authorize

246
00:15:57,278 --> 00:16:00,926
the runner by fetching the machine ID credentials

247
00:16:01,038 --> 00:16:04,546
from our bot. Then we'll list the

248
00:16:04,568 --> 00:16:08,406
remote ssh nodes we'll have access to on

249
00:16:08,428 --> 00:16:12,034
the cluster, and finally we'll ssh onto one of our nodes

250
00:16:12,082 --> 00:16:15,606
and actually write the GitHub commit Shaw that triggered the workflow to

251
00:16:15,628 --> 00:16:17,830
a file on the ssh code.

252
00:16:19,870 --> 00:16:23,946
As you can see, we have this Tsh command that will then echo the

253
00:16:24,048 --> 00:16:28,170
GitHub commit Shaw to this file called GitHub run logs.

254
00:16:29,630 --> 00:16:33,550
Perfect. So now let's go ahead and actually

255
00:16:33,620 --> 00:16:37,006
commit this action and see

256
00:16:37,028 --> 00:16:38,590
it go see it in action.

257
00:16:41,250 --> 00:16:46,482
We're going to say demo add conf

258
00:16:46,616 --> 00:16:49,250
42 demo action.

259
00:16:49,910 --> 00:16:53,426
So now let's go ahead and actually push our commit push this

260
00:16:53,448 --> 00:16:55,890
workflow up to our repo to see it in action.

261
00:16:58,490 --> 00:17:02,134
So we've run the git push, we have our bot. Now let's go check on

262
00:17:02,172 --> 00:17:03,720
our actions page.

263
00:17:05,530 --> 00:17:09,170
We can see the action being run. This was triggered because of the

264
00:17:09,180 --> 00:17:12,646
push to main. Now let's

265
00:17:12,678 --> 00:17:16,954
just give it a second and we should be able to see this

266
00:17:16,992 --> 00:17:20,442
action actually run using the GitHub actions runner using

267
00:17:20,496 --> 00:17:24,158
the machine id bot with its credentials. And as you can see here,

268
00:17:24,244 --> 00:17:27,774
we don't have any secrets or any long lived credentials that we're using.

269
00:17:27,892 --> 00:17:31,518
All we're using is this short lived certificate that is produced by the

270
00:17:31,524 --> 00:17:32,560
machine id.

271
00:17:35,350 --> 00:17:38,078
Awesome. And our job ran successfully.

272
00:17:38,254 --> 00:17:41,060
So now if we log into our cluster here,

273
00:17:46,910 --> 00:17:50,694
we should be able to see this is the teleport UI

274
00:17:50,742 --> 00:17:54,666
here. And this actually allows us to interact with our teleport

275
00:17:54,698 --> 00:17:58,366
cluster and check on all of our activity. So if we go to

276
00:17:58,388 --> 00:18:01,870
the audit log, we can actually see the certificate issued

277
00:18:02,210 --> 00:18:05,220
and we can see what the bot was doing.

278
00:18:05,670 --> 00:18:09,266
So we can see that it started the session and it actually executed a

279
00:18:09,288 --> 00:18:13,102
command on the node, Kate's host. And then

280
00:18:13,256 --> 00:18:16,646
we can see the exact commit shot and exactly what was run

281
00:18:16,828 --> 00:18:20,854
on this worker node. Just like

282
00:18:20,892 --> 00:18:24,946
that, we're able to manipulate our teleport resources, our resources

283
00:18:24,978 --> 00:18:29,146
managed by the teleport cluster, all without using any

284
00:18:29,168 --> 00:18:32,006
long lived static credentials stored in our GitHub.

285
00:18:32,198 --> 00:18:35,626
There's nothing to be leaked. And all

286
00:18:35,648 --> 00:18:40,060
of this is fully extensible and fully configurable for your various needs.

287
00:18:40,750 --> 00:18:43,930
So you can do a lot of different things with this. You can manipulate SSH

288
00:18:44,010 --> 00:18:47,562
nodes, you can manipulate databases, you can even manipulate kubernetes

289
00:18:47,626 --> 00:18:51,522
clusters, whatever kind of resources that you have, you can use teleport to manage

290
00:18:51,576 --> 00:18:52,850
your GitHub actions.

291
00:18:54,310 --> 00:18:58,322
Great. So that's a little bit in a nutshell about how

292
00:18:58,376 --> 00:19:02,386
teleport machineid can integrate with your GitHub actions workflows to

293
00:19:02,408 --> 00:19:06,034
secure your CI CD pipelines and reduce the risk of a hack

294
00:19:06,082 --> 00:19:10,082
through a leaked credential, completely eliminating static credentials

295
00:19:10,146 --> 00:19:13,718
from your workflows and making it so that your engineers can sleep a little

296
00:19:13,724 --> 00:19:17,174
bit easier at night. Thank you

297
00:19:17,212 --> 00:19:21,178
so much. I hope you learned a little bit from this talk, and you

298
00:19:21,184 --> 00:19:23,930
should go out there right now and secure your GitHub actions.

299
00:19:24,670 --> 00:19:28,026
Check us out on Slack at teleport slack.com. We have

300
00:19:28,048 --> 00:19:31,466
a great community there. I'm hanging out there all the time so

301
00:19:31,488 --> 00:19:36,330
we can chat. And if you want to learn more, just go to teleport.com.

302
00:19:36,480 --> 00:19:39,546
Remember, we have an open source and an enterprise version, so if you want to

303
00:19:39,568 --> 00:19:42,914
download it and just hack around with it and try it out for yourself,

304
00:19:43,112 --> 00:19:46,706
feel free to do so. It's a lot of fun. Thank you again so much

305
00:19:46,808 --> 00:19:48,320
and I hope I see you at the next talk.

