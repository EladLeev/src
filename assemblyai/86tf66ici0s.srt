1
00:00:34,450 --> 00:00:39,080
Let's start a session and talk about container and Kubernetes security

2
00:00:39,610 --> 00:00:43,474
policy design and ten critical best practices.

3
00:00:43,602 --> 00:00:47,154
This presentation is divided into seven sections.

4
00:00:47,282 --> 00:00:51,290
I'll start by a brief overview of Project Calico

5
00:00:51,370 --> 00:00:54,974
and what it is that we are doing at Tigera to help you

6
00:00:55,012 --> 00:00:58,154
in your cloud native journey. Then I will switch

7
00:00:58,202 --> 00:01:02,186
top application modernization and its relevance

8
00:01:02,298 --> 00:01:05,762
in the context of container. Then I will

9
00:01:05,816 --> 00:01:09,394
delve into the topic of container security to

10
00:01:09,432 --> 00:01:13,390
highlight some key best practices to secure

11
00:01:13,470 --> 00:01:16,886
your containerized applications. Next I

12
00:01:16,908 --> 00:01:20,454
will discuss network segmentation, which is

13
00:01:20,492 --> 00:01:24,098
a critical part of securing your Kubernetes cluster.

14
00:01:24,194 --> 00:01:27,914
To better understand the best practices part of the

15
00:01:27,952 --> 00:01:31,606
demo, I'm going to talk about the policy enforcement

16
00:01:31,718 --> 00:01:34,570
and policy resources in kubernetes.

17
00:01:35,150 --> 00:01:39,350
Finally, I will conclude with a section on monitoring

18
00:01:39,510 --> 00:01:43,694
why it is necessary to have it and how it can help you top,

19
00:01:43,732 --> 00:01:47,934
detect and respond top security threats in real time.

20
00:01:48,052 --> 00:01:51,694
To bring all those topics to life, I will wrap up with

21
00:01:51,732 --> 00:01:55,010
a demo where I do my best to demonstrate these

22
00:01:55,080 --> 00:01:58,658
concepts in action. If you're new to kubernetes or

23
00:01:58,744 --> 00:02:02,366
container networking, don't worry, I got you covered.

24
00:02:02,478 --> 00:02:05,890
At the end of this presentation, you will find a link

25
00:02:05,960 --> 00:02:09,254
and a QR code to all the resources that you will

26
00:02:09,292 --> 00:02:13,490
need to recreate the demo in your own lab environment

27
00:02:13,650 --> 00:02:16,694
and brush up on any concepts that

28
00:02:16,732 --> 00:02:20,394
you might be unfamiliar with. This way, you can

29
00:02:20,432 --> 00:02:23,546
redo the demo part as many times as you like

30
00:02:23,648 --> 00:02:27,610
and gain a deeper understanding to the topics that

31
00:02:27,680 --> 00:02:31,706
it covers. So let's get started with Calico.

32
00:02:31,818 --> 00:02:35,374
Project Calico offers a pure layer three approach to

33
00:02:35,412 --> 00:02:39,150
virtual networking and security for highly scalable data

34
00:02:39,220 --> 00:02:43,042
centers. We offer Calico a free and open

35
00:02:43,096 --> 00:02:47,038
source networking and network security solution for containers,

36
00:02:47,134 --> 00:02:50,770
virtual machines and native host based workloads.

37
00:02:51,190 --> 00:02:55,306
Calico supports multiple architectures and platforms

38
00:02:55,438 --> 00:02:58,760
such as X 86 and ARM 64,

39
00:02:59,450 --> 00:03:02,962
so you can basically install it on any environment.

40
00:03:03,106 --> 00:03:06,886
Today, Calico offers four pluggable data planes that

41
00:03:06,908 --> 00:03:10,658
can be switched on depending on your needs and environment.

42
00:03:10,834 --> 00:03:15,002
A standard data plane is based on iptables that

43
00:03:15,056 --> 00:03:19,142
provides fast networking, security and compatibility

44
00:03:19,286 --> 00:03:22,782
for all environments. Calico EVPF Data

45
00:03:22,836 --> 00:03:26,538
plane is another data plane created by Tigera,

46
00:03:26,634 --> 00:03:30,794
which uses the power of EVPF to provide blazing

47
00:03:30,842 --> 00:03:34,290
fast networking and security for your environment.

48
00:03:34,790 --> 00:03:38,514
EVPf data plane offers capabilities such

49
00:03:38,552 --> 00:03:42,350
as complete Kubeproxy replacement

50
00:03:42,510 --> 00:03:45,738
source ip preservation and DSR.

51
00:03:45,854 --> 00:03:50,450
If you're running a hybrid environment, you can use Calico for Windows,

52
00:03:50,610 --> 00:03:54,482
which is based on Microsoft HNS and can deliver

53
00:03:54,546 --> 00:03:57,598
networking and security to your Windows nodes.

54
00:03:57,714 --> 00:04:01,706
VPP is the newest data plane for Calico. Currently in

55
00:04:01,728 --> 00:04:05,610
its beta phase, which accelerates the networking experience

56
00:04:05,760 --> 00:04:09,654
by utilizing the power of user based programming.

57
00:04:09,782 --> 00:04:13,246
In fact, EVPF and HNs are some

58
00:04:13,268 --> 00:04:17,854
of the foundational technologies that provides networking security,

59
00:04:18,052 --> 00:04:21,562
observability, image assurance, and runtime

60
00:04:21,626 --> 00:04:24,782
threat defense in our enterprise solutions

61
00:04:24,846 --> 00:04:28,430
at Tigera. Project Calico is an inclusive,

62
00:04:28,510 --> 00:04:32,014
active community about cloud networking

63
00:04:32,062 --> 00:04:35,830
and security. Feel free to join our community using these

64
00:04:35,900 --> 00:04:39,890
social networking handles and drive the conversation

65
00:04:40,050 --> 00:04:43,314
where you see a need for a change or seek

66
00:04:43,362 --> 00:04:47,126
help for your Calico adventure from developers who

67
00:04:47,148 --> 00:04:51,222
are actively working on the project. We're also excited

68
00:04:51,286 --> 00:04:55,094
to announce that project Calico will be attending Kubecon EU

69
00:04:55,142 --> 00:04:58,666
2023, which is happening from

70
00:04:58,768 --> 00:05:02,490
April 18 to 21 in Amsterdam.

71
00:05:02,650 --> 00:05:05,950
So come meet us at our booth, Booth 28.

72
00:05:06,100 --> 00:05:10,078
We'll be there from 10:30 a.m. Onwards to answer

73
00:05:10,164 --> 00:05:13,518
your questions or help you with your cloud journey.

74
00:05:13,614 --> 00:05:17,074
All right, so application modernization is

75
00:05:17,112 --> 00:05:21,022
the process of updating or transforming existing

76
00:05:21,086 --> 00:05:24,494
legacy applications to make them more efficient,

77
00:05:24,622 --> 00:05:28,482
scalable and cloud native. This approach helps

78
00:05:28,546 --> 00:05:32,358
businesses to meet the demands of modern customers

79
00:05:32,524 --> 00:05:36,290
and remain competitive. Modernization typically

80
00:05:36,370 --> 00:05:39,990
involves the replacement of older systems

81
00:05:40,070 --> 00:05:44,022
with new ones, the integration of new applications,

82
00:05:44,166 --> 00:05:48,214
and the development of new processes and workflows.

83
00:05:48,342 --> 00:05:53,162
Some common approaches to application modernization includes refactoring,

84
00:05:53,226 --> 00:05:56,734
code replatforming, rebuilding the

85
00:05:56,772 --> 00:06:00,494
infrastructure. Now you might be thinking, what is

86
00:06:00,532 --> 00:06:04,254
a motivation behind it? Well, legacy applications

87
00:06:04,302 --> 00:06:08,622
are often complex, outdated and difficult to maintain.

88
00:06:08,766 --> 00:06:12,750
They may have been built on older technology platforms

89
00:06:12,830 --> 00:06:17,490
that are no longer supported or require manual processes

90
00:06:17,650 --> 00:06:21,314
that consume significant resources and manpower.

91
00:06:21,442 --> 00:06:25,266
As a result, they may have limited scalability,

92
00:06:25,458 --> 00:06:29,194
poor performance, and present security

93
00:06:29,312 --> 00:06:32,874
risk. To remain competitive, businesses need

94
00:06:32,912 --> 00:06:34,810
to embrace modernization,

95
00:06:35,390 --> 00:06:38,970
accelerate innovation or agile

96
00:06:39,390 --> 00:06:42,730
workflows. Optimizing costs

97
00:06:43,070 --> 00:06:46,890
and improve security are some of the reasons

98
00:06:47,050 --> 00:06:50,734
the ideal design for the cloud is break up

99
00:06:50,852 --> 00:06:54,414
everything into microservices that can communicate

100
00:06:54,462 --> 00:06:57,714
with each other and your storage of

101
00:06:57,752 --> 00:07:01,666
choice. This distribution allows you to go beyond what

102
00:07:01,688 --> 00:07:05,102
was possible with the old technologies in terms

103
00:07:05,176 --> 00:07:08,422
of serviceability, scalability and

104
00:07:08,476 --> 00:07:12,322
reliability. While application modernization offers

105
00:07:12,386 --> 00:07:15,574
many benefits, embarking on this journey is

106
00:07:15,612 --> 00:07:19,398
not an easy task. It requires a significant

107
00:07:19,494 --> 00:07:23,210
investment in people, process and

108
00:07:23,280 --> 00:07:27,574
technology to achieve the desired business outcomes.

109
00:07:27,702 --> 00:07:30,714
The right foundation must be established

110
00:07:30,762 --> 00:07:34,030
from the beginning. Top avoid this high cost

111
00:07:34,100 --> 00:07:37,294
of rearchitecture, which can be

112
00:07:37,332 --> 00:07:40,240
a major roadblock in achieving success.

113
00:07:40,690 --> 00:07:44,722
One of the key benefits of modernization is

114
00:07:44,856 --> 00:07:48,402
ability to package applications and their

115
00:07:48,456 --> 00:07:51,902
dependencies into port, table and lightweight

116
00:07:51,966 --> 00:07:55,654
container images that can be easily shared and

117
00:07:55,692 --> 00:07:59,302
distributed. By packaging your application and

118
00:07:59,356 --> 00:08:02,674
its dependencies in a container image,

119
00:08:02,802 --> 00:08:06,338
you can ensure that your application is isolated

120
00:08:06,434 --> 00:08:10,330
from the host system and other applications.

121
00:08:10,670 --> 00:08:14,650
This can help to reduce the risk of security breaches.

122
00:08:14,990 --> 00:08:18,666
When creating a container image, it is important

123
00:08:18,768 --> 00:08:22,970
to include only unnecessary components. This means remove

124
00:08:23,050 --> 00:08:26,746
unnecessary files, libraries, and dependencies

125
00:08:26,858 --> 00:08:30,494
that are not required for your application to run.

126
00:08:30,692 --> 00:08:34,900
And finally, when you package your application,

127
00:08:35,350 --> 00:08:37,570
scan them for vulnerabilities.

128
00:08:38,150 --> 00:08:41,906
There are several tools available that can help you

129
00:08:41,928 --> 00:08:45,402
to scan your container images for vulnerabilities

130
00:08:45,566 --> 00:08:49,000
and identify any potential security issues.

131
00:08:50,170 --> 00:08:53,058
And in the demo part of this presentation,

132
00:08:53,234 --> 00:08:57,250
I will show you how to use Tigera scanner

133
00:08:57,330 --> 00:09:00,486
to scan your images for vulnerabilities.

134
00:09:00,678 --> 00:09:04,102
The choice between using a public or private

135
00:09:04,166 --> 00:09:08,150
image registry depends on an organization's

136
00:09:08,230 --> 00:09:12,490
specific needs and requirements. Public image registries

137
00:09:12,650 --> 00:09:16,238
can be a convenient and cost effective option

138
00:09:16,324 --> 00:09:19,834
for smaller projects or open source software,

139
00:09:19,962 --> 00:09:23,790
while private image registries may be necessary

140
00:09:23,870 --> 00:09:27,634
for larger enterprises or those with specific

141
00:09:27,752 --> 00:09:31,090
security or regulatory requirements.

142
00:09:31,750 --> 00:09:34,962
For example, government agencies and

143
00:09:35,016 --> 00:09:38,694
banks prefer private images repositories for

144
00:09:38,732 --> 00:09:42,882
several reasons related to security compliance

145
00:09:43,026 --> 00:09:47,314
and data protection, and also since government

146
00:09:47,452 --> 00:09:51,482
agencies and banks deal with sensitive information that

147
00:09:51,536 --> 00:09:53,610
must be kept confidential.

148
00:09:54,030 --> 00:09:58,154
Private image repositories allow these organizations to

149
00:09:58,192 --> 00:10:01,850
keep their software, assets and intellectual

150
00:10:01,930 --> 00:10:06,586
properties within their own secure infrastructure,

151
00:10:06,778 --> 00:10:11,562
reducing the risk of leaks or unauthorized

152
00:10:11,626 --> 00:10:15,374
use. After your container is created and stored

153
00:10:15,422 --> 00:10:19,534
in a registry of choice, you need to provide isolation

154
00:10:19,662 --> 00:10:23,742
on a networking level for it. Kubernetes network

155
00:10:23,806 --> 00:10:27,538
segmentation is the process of dividing Kubernetes

156
00:10:27,634 --> 00:10:32,230
clusters network into smaller, isolated segments.

157
00:10:32,890 --> 00:10:36,406
This can be achieved by using network policies to

158
00:10:36,428 --> 00:10:39,830
restrict communication between different pods,

159
00:10:39,990 --> 00:10:43,930
services, or namespaces within the cluster.

160
00:10:44,270 --> 00:10:47,994
Network segmentation is important for security

161
00:10:48,112 --> 00:10:52,170
purposes as it helps to limit the potential impact

162
00:10:52,250 --> 00:10:55,770
of security breach by segmenting the network,

163
00:10:55,930 --> 00:10:59,786
an attacker who gains access to one part of the network

164
00:10:59,898 --> 00:11:03,578
will find it more difficult to move laterally

165
00:11:03,754 --> 00:11:07,098
and access other parts of the cluster.

166
00:11:07,194 --> 00:11:11,086
If you're using capable CNI such as Calico,

167
00:11:11,198 --> 00:11:14,670
you can also add RBAC roles to your segmentation

168
00:11:14,750 --> 00:11:18,354
process. All right, so let's dig deeper

169
00:11:18,402 --> 00:11:20,946
to the realm of security and networking.

170
00:11:21,058 --> 00:11:24,214
Kubernetes has built in resource, which is

171
00:11:24,252 --> 00:11:27,902
called Kubernetes network policy that can shape

172
00:11:27,986 --> 00:11:31,770
the security posture of your cloud native environment.

173
00:11:32,190 --> 00:11:35,734
However, like networking, Kubernetes doesn't

174
00:11:35,782 --> 00:11:39,014
enforce these policies on its own, and it delegates

175
00:11:39,062 --> 00:11:42,186
the responsibility to the CNI plugins.

176
00:11:42,378 --> 00:11:45,902
So it is vital to use a CNI that offers such

177
00:11:45,956 --> 00:11:48,830
capability to secure your environment.

178
00:11:49,410 --> 00:11:53,318
These policy resources can be attached to namespaces

179
00:11:53,434 --> 00:11:56,594
and pods to block or permit a

180
00:11:56,632 --> 00:12:00,222
traffic flow. While these policy resources

181
00:12:00,286 --> 00:12:03,678
are a great tool to secure your cluster,

182
00:12:03,854 --> 00:12:07,654
they have some limitations that might be a problem down

183
00:12:07,692 --> 00:12:11,926
the road. These policy resources don't have

184
00:12:12,028 --> 00:12:15,686
explicit action attributes, which can cause a

185
00:12:15,708 --> 00:12:19,522
bit of problem in massive clusters. You cannot

186
00:12:19,586 --> 00:12:23,130
also write node specific policies,

187
00:12:23,630 --> 00:12:27,530
and you don't have policies that can affect the

188
00:12:27,600 --> 00:12:31,114
cluster as a whole. Similar to Kubernetes,

189
00:12:31,242 --> 00:12:35,390
your CNI of choice might offer security resources.

190
00:12:35,810 --> 00:12:39,022
For example, Calico offers two set

191
00:12:39,076 --> 00:12:42,694
of security resources that can be used alone

192
00:12:42,842 --> 00:12:46,734
or with Kubernetes policy resources to further

193
00:12:46,862 --> 00:12:51,150
lock down your cluster and bring security to your environment.

194
00:12:51,310 --> 00:12:54,922
These two resources are Calico network

195
00:12:55,006 --> 00:12:59,122
policy, which is a security resource that can be applied

196
00:12:59,186 --> 00:13:03,206
in namespaces, and global network policy,

197
00:13:03,388 --> 00:13:06,920
which can be applied to the cluster as a hope.

198
00:13:07,390 --> 00:13:11,226
On top of that, Calico provides a host endpoint policy

199
00:13:11,328 --> 00:13:15,302
resource that can be used to secure non namespace

200
00:13:15,366 --> 00:13:18,470
resources such as host processes

201
00:13:18,630 --> 00:13:21,434
and host network cards.

202
00:13:21,562 --> 00:13:25,194
Monitoring is a critical component of container

203
00:13:25,242 --> 00:13:28,922
security because it allows administrators

204
00:13:28,986 --> 00:13:32,914
to detect and respond to security threats in

205
00:13:32,952 --> 00:13:36,270
real time. Container applications

206
00:13:36,350 --> 00:13:39,762
are highly dynamic and distributed with

207
00:13:39,816 --> 00:13:43,262
many different components running across multiple

208
00:13:43,326 --> 00:13:46,594
nodes, making them more difficult to monitor

209
00:13:46,642 --> 00:13:50,866
and secure. By monitoring containerized applications,

210
00:13:50,978 --> 00:13:54,930
administrators can gain visibility into behavior

211
00:13:55,090 --> 00:13:59,146
of these applications, identify potential security

212
00:13:59,248 --> 00:14:02,794
issues, and take action to mitigate them.

213
00:14:02,912 --> 00:14:07,158
All right, so let's start by infrastructure monitoring.

214
00:14:07,254 --> 00:14:10,682
Container rely on the underlying

215
00:14:10,746 --> 00:14:14,090
infrastructure such as the host OS,

216
00:14:14,250 --> 00:14:17,614
network, and storage to function

217
00:14:17,732 --> 00:14:21,354
properly. Infrastructure monitoring tools

218
00:14:21,402 --> 00:14:25,426
can help detect any issue or vulnerabilities in

219
00:14:25,448 --> 00:14:29,406
the infrastructure, such as resource utilization,

220
00:14:29,518 --> 00:14:33,326
network latency, and storage capabilities

221
00:14:33,518 --> 00:14:37,240
that could impact container performance and security.

222
00:14:37,770 --> 00:14:41,702
Next, application monitoring containers are

223
00:14:41,756 --> 00:14:45,682
used to deploy and run applications,

224
00:14:45,826 --> 00:14:49,722
and application monitoring tools can help detect any

225
00:14:49,776 --> 00:14:53,722
issues or vulnerabilities in the application code or

226
00:14:53,776 --> 00:14:57,462
dependencies, such as memory leaks, errors,

227
00:14:57,526 --> 00:15:01,194
and crashes that could impact container

228
00:15:01,242 --> 00:15:04,990
performance and security. By monitoring both

229
00:15:05,060 --> 00:15:07,440
the infrastructure and application,

230
00:15:08,050 --> 00:15:12,026
it teams can gain a comprehensive understanding

231
00:15:12,138 --> 00:15:15,918
of container environment and detect any potential

232
00:15:16,014 --> 00:15:19,038
issues before they become critical.

233
00:15:19,214 --> 00:15:22,740
All right, it's time for the demo.

234
00:15:23,110 --> 00:15:27,362
All right, so let's start the demo. By using multipass

235
00:15:27,426 --> 00:15:31,126
to create the infrastructure environment, I'm going

236
00:15:31,148 --> 00:15:34,710
to instruct multipass to create three vms,

237
00:15:35,050 --> 00:15:38,746
one as a control plane and the other two

238
00:15:38,848 --> 00:15:42,022
as worker nodes. After completion,

239
00:15:42,166 --> 00:15:45,674
I'm going to use multipass transfer command to move

240
00:15:45,712 --> 00:15:49,094
the kubeconfig file from multipass VM

241
00:15:49,222 --> 00:15:52,494
to my computer and use it to access my

242
00:15:52,532 --> 00:15:56,446
cluster. In order to use the Kubeconfig file, I'm going

243
00:15:56,468 --> 00:16:00,170
to create an environment variable called Kubeconfig

244
00:16:00,250 --> 00:16:03,954
with the path to the transferred file and replace the

245
00:16:03,992 --> 00:16:08,770
localhost IP address with the multipass instance IP.

246
00:16:12,390 --> 00:16:16,482
Now I can use Kubectl to access my cluster

247
00:16:16,546 --> 00:16:18,310
and change configurations.

248
00:16:29,080 --> 00:16:32,788
Next I'm going to compile a simple hello world application

249
00:16:32,954 --> 00:16:36,804
into two container images with different base image

250
00:16:36,852 --> 00:16:40,356
layers and scan the end result with the Tigera

251
00:16:40,388 --> 00:16:43,876
image scanner to spot any vulnerabilities

252
00:16:43,988 --> 00:16:47,320
that might be inside the container image.

253
00:16:55,440 --> 00:16:59,340
Now that the compilation is done, let's take a closer look

254
00:16:59,410 --> 00:17:00,940
at the docker file.

255
00:17:04,230 --> 00:17:07,894
As you can see, there is nothing special in here and the

256
00:17:07,932 --> 00:17:11,926
only notable thing is the use of Ubuntu latest as

257
00:17:11,948 --> 00:17:13,270
the base image.

258
00:17:18,040 --> 00:17:22,136
Now let's create a container with the same application and

259
00:17:22,158 --> 00:17:23,880
a different base image.

260
00:17:37,040 --> 00:17:40,744
As you can see, this time I'm using the scratch layer

261
00:17:40,792 --> 00:17:44,500
to package my application. All right, before scanning,

262
00:17:44,600 --> 00:17:47,170
let's check if the image size is different.

263
00:17:48,580 --> 00:17:51,980
Seems like the scratch image is significantly

264
00:17:52,060 --> 00:17:55,472
smaller, but the image size is not the only

265
00:17:55,526 --> 00:17:59,904
difference here. Let's go ahead and scan the Ubuntu based container

266
00:17:59,952 --> 00:18:03,300
with the Tigera images scanner. As you can see,

267
00:18:03,370 --> 00:18:07,268
there are two vulnerabilities in a hello word application

268
00:18:07,434 --> 00:18:11,272
that I just packaged. Let's scan the other

269
00:18:11,326 --> 00:18:14,932
one, and as you can see, there are no vulnerabilities

270
00:18:15,076 --> 00:18:18,996
because the scratch image doesn't include any libraries

271
00:18:19,108 --> 00:18:22,590
other than the ones that we specifically say.

272
00:18:24,320 --> 00:18:27,720
All right, let's get back to our Kubernetes

273
00:18:27,800 --> 00:18:32,316
cluster. At the moment my cluster is not ready

274
00:18:32,498 --> 00:18:35,648
since there is no CNI installed on it.

275
00:18:35,814 --> 00:18:39,392
We can change this by installing Tigera operator and

276
00:18:39,446 --> 00:18:41,440
Calico on our cluster.

277
00:18:43,380 --> 00:18:47,460
If you recall, during the presentation I talked about public

278
00:18:47,530 --> 00:18:51,316
and private registries. Most manifests on

279
00:18:51,338 --> 00:18:54,560
the Internet are shipped with a public registry

280
00:18:54,640 --> 00:18:57,972
path to offer easier accessibility for

281
00:18:58,026 --> 00:19:01,764
everyone. For example, if we examine the tiger

282
00:19:01,812 --> 00:19:05,848
operator manifest, it shows the quie IO public

283
00:19:05,934 --> 00:19:09,960
repository as the image storage location.

284
00:19:10,540 --> 00:19:14,036
So for the next part, I'm going to configure

285
00:19:14,148 --> 00:19:17,992
another multi pass vm as a private repository

286
00:19:18,136 --> 00:19:21,532
and push all other components of calico into

287
00:19:21,586 --> 00:19:25,132
it so we can install everything from our private

288
00:19:25,196 --> 00:19:28,912
registry. And to make my life a little bit

289
00:19:28,966 --> 00:19:32,556
easier, I'm going to extract the private registry IP

290
00:19:32,588 --> 00:19:36,140
address and the desired version of Calico

291
00:19:36,300 --> 00:19:40,064
and save them in two environment variables. To prepare

292
00:19:40,112 --> 00:19:42,470
for the next part of this demo.

293
00:19:43,240 --> 00:19:46,996
Now let's pull Calico Typho, one of the components of

294
00:19:47,018 --> 00:19:50,676
Calico, into our local docker

295
00:19:50,868 --> 00:19:54,804
and tag it for the private

296
00:19:54,852 --> 00:19:58,468
registry and push it into our private registry.

297
00:19:58,644 --> 00:20:02,204
Since my private registry is configured with

298
00:20:02,242 --> 00:20:07,208
a self signed certificate, I need to explicitly

299
00:20:07,304 --> 00:20:11,100
allow it inside my docker settings.

300
00:20:11,520 --> 00:20:14,972
To do so, I'm going to head to the settings

301
00:20:15,036 --> 00:20:18,928
in my docker desktop and select docker engine

302
00:20:19,094 --> 00:20:22,604
and add the IP address of my private registry

303
00:20:22,732 --> 00:20:26,432
as an insecure registry here and apply

304
00:20:26,566 --> 00:20:29,748
and restart the docker daemon after

305
00:20:29,834 --> 00:20:30,790
I'm done.

306
00:20:33,240 --> 00:20:36,532
This will take some seconds, but after it's done,

307
00:20:36,666 --> 00:20:39,796
we can easily push every image

308
00:20:39,828 --> 00:20:43,000
that we want into our private registry.

309
00:20:57,830 --> 00:21:01,380
All right, let's go ahead and check again.

310
00:21:02,390 --> 00:21:06,194
Perfect. The image is pushing to the private

311
00:21:06,242 --> 00:21:08,600
registry without any problem.

312
00:21:09,530 --> 00:21:13,202
All right, now let's every other component of Calico

313
00:21:13,266 --> 00:21:15,640
into our private registry as well.

314
00:22:30,120 --> 00:22:33,492
Changing the image location that is used for

315
00:22:33,546 --> 00:22:37,190
each pod can be happened in different ways.

316
00:22:37,640 --> 00:22:40,868
For example, Calico installation resource,

317
00:22:40,964 --> 00:22:44,888
which is used to instruct the operator on how to install

318
00:22:44,974 --> 00:22:48,996
Calico, offers an attribute called registry

319
00:22:49,188 --> 00:22:52,716
which can change the default image registry that

320
00:22:52,738 --> 00:22:55,550
is used for the installation process.

321
00:22:56,080 --> 00:23:00,216
Let's use this value and install the remaining components

322
00:23:00,248 --> 00:23:03,100
of calico from our private registry.

323
00:23:05,700 --> 00:23:09,644
Other than the installation resource, Tigera operator

324
00:23:09,772 --> 00:23:13,104
offers a Tigera status command which could be

325
00:23:13,142 --> 00:23:16,450
used to observe the Calico installation process.

326
00:23:18,200 --> 00:23:22,304
For example, here I've chained the Tigera status

327
00:23:22,352 --> 00:23:26,052
command with a cube kettle weight to form an

328
00:23:26,106 --> 00:23:29,712
interactive weight that will end when the

329
00:23:29,786 --> 00:23:32,170
calico installation is done.

330
00:23:55,630 --> 00:23:59,414
Before going any further, let's verify that calico

331
00:23:59,462 --> 00:24:03,410
components were actually pulled from the private registry

332
00:24:03,590 --> 00:24:08,110
by issuing a describe on one of the calico components.

333
00:24:09,090 --> 00:24:12,862
Excellent. It seems like private repository was

334
00:24:12,916 --> 00:24:16,450
the registry that provided the image.

335
00:24:19,110 --> 00:24:22,130
Next stop is network segmentation.

336
00:24:22,470 --> 00:24:26,766
First, let's create a namespace for our monitoring solution,

337
00:24:26,878 --> 00:24:30,550
which we will deploy later on this cluster.

338
00:24:35,870 --> 00:24:39,750
After that we need to create a cluster role resource

339
00:24:39,910 --> 00:24:43,658
with the expected privileges that our monitoring

340
00:24:43,754 --> 00:24:46,958
user should hold, which will be used

341
00:24:47,044 --> 00:24:49,998
by the monitoring program. Next,

342
00:24:50,084 --> 00:24:53,482
we need a user resource in our cluster

343
00:24:53,626 --> 00:24:57,650
to be associated with the cluster role, and after that

344
00:24:57,800 --> 00:25:01,842
we need a cluster role binding to glue together the

345
00:25:01,896 --> 00:25:04,500
cluster role and the service account.

346
00:25:08,090 --> 00:25:11,762
Now let's apply the resources for these cluster

347
00:25:11,826 --> 00:25:15,494
roles and service accounts to actually

348
00:25:15,612 --> 00:25:18,470
create the resources in the cluster.

349
00:25:46,670 --> 00:25:50,538
Let's carry on by creating a couple of security policy

350
00:25:50,624 --> 00:25:54,518
resources to segment and secure communication

351
00:25:54,694 --> 00:25:58,250
between Calico and Kubernetes components.

352
00:25:59,330 --> 00:26:02,922
This first policy will permit host network

353
00:26:02,986 --> 00:26:06,682
containers to communicate with the local host

354
00:26:06,746 --> 00:26:07,760
IP address,

355
00:26:09,650 --> 00:26:12,474
as it is suggested by this picture.

356
00:26:12,602 --> 00:26:16,274
Calico node and Calico typhoid pods which are

357
00:26:16,312 --> 00:26:19,774
located in the Calico system namespace,

358
00:26:19,902 --> 00:26:23,558
are now permitted by the previous policies

359
00:26:23,724 --> 00:26:27,042
that we applied to communicate with the host

360
00:26:27,106 --> 00:26:29,830
OS local host IP.

361
00:26:30,490 --> 00:26:34,134
Next policy is the famous deny app policy,

362
00:26:34,332 --> 00:26:37,674
which you have undoubtedly seen as part of our

363
00:26:37,712 --> 00:26:41,530
documentation and free certification programs.

364
00:26:42,270 --> 00:26:45,110
As it's illustrated by this diagram,

365
00:26:45,270 --> 00:26:49,214
DenyApp policy will block all communications that

366
00:26:49,252 --> 00:26:52,010
are happening by namespace resources,

367
00:26:52,170 --> 00:26:55,790
except the ones that are distant for

368
00:26:55,860 --> 00:27:00,080
the core DNS pods to query DNS information.

369
00:27:01,490 --> 00:27:05,470
To make a long story short, I'm going to stop narrating

370
00:27:05,630 --> 00:27:09,506
what these policies will do and just apply them to

371
00:27:09,528 --> 00:27:12,830
my cluster. But if you'd like to know more about

372
00:27:12,920 --> 00:27:16,678
these policies, how to write them, and what they actually

373
00:27:16,764 --> 00:27:20,626
affect, check out the best practices

374
00:27:20,738 --> 00:27:24,406
for securing a Kubernetes environment folder in the

375
00:27:24,428 --> 00:27:28,202
GitHub repository of this demo. The link will come

376
00:27:28,256 --> 00:27:30,970
at the end of this presentation.

377
00:28:18,340 --> 00:28:21,980
All right, let's go ahead and add infrastructure

378
00:28:22,060 --> 00:28:25,876
and application monitoring to this cluster as the final

379
00:28:25,978 --> 00:28:29,844
step. First, let's enable application

380
00:28:29,962 --> 00:28:34,192
monitoring for Calico. Calico components

381
00:28:34,256 --> 00:28:37,700
are capable of exposing Prometheus metrics,

382
00:28:37,860 --> 00:28:41,880
however, this is disabled by the default configuration.

383
00:28:42,380 --> 00:28:45,080
Enabling monitoring is pretty easy.

384
00:28:45,230 --> 00:28:48,808
All that is required is changing two values

385
00:28:48,904 --> 00:28:52,972
from calico configurations. After each

386
00:28:53,026 --> 00:28:57,132
enablement. We have to create service so

387
00:28:57,186 --> 00:29:01,360
it can act as a load balancer for metric collector.

388
00:29:21,990 --> 00:29:25,634
For infrastructure monitoring, I'm going to use the

389
00:29:25,672 --> 00:29:29,242
node exporter helm chart that can gather vital

390
00:29:29,326 --> 00:29:33,286
information from my vms and expose them in the

391
00:29:33,308 --> 00:29:37,014
Prometheus format. Next, I'm going to

392
00:29:37,052 --> 00:29:41,138
pull the node exporter image from the public registry

393
00:29:41,234 --> 00:29:44,490
and push it to the lab private registry.

394
00:29:48,270 --> 00:29:51,974
Now that the image is set, I can modify the helm

395
00:29:52,022 --> 00:29:55,834
installation to use the private registry for building the node

396
00:29:55,882 --> 00:29:57,310
exporter image.

397
00:30:05,060 --> 00:30:08,432
Now that the both monitoring solutions are in place,

398
00:30:08,566 --> 00:30:12,276
I can use Prometheus web UI to validate the

399
00:30:12,298 --> 00:30:13,220
procedure.

400
00:31:11,600 --> 00:31:15,084
That's it. There is a lot more to

401
00:31:15,122 --> 00:31:18,944
discuss about container security and security in general.

402
00:31:19,142 --> 00:31:23,500
However, that would require you to sit through more of my boring

403
00:31:23,580 --> 00:31:27,504
explanations. So, as promised, you can use

404
00:31:27,542 --> 00:31:31,600
the top link in this page to create the demo and

405
00:31:31,670 --> 00:31:35,170
check each step by yourself on your own time.

406
00:31:35,780 --> 00:31:39,724
If something goes wrong or you got any suggestions,

407
00:31:39,852 --> 00:31:43,432
don't be shy to contact me. I'm reachable at

408
00:31:43,486 --> 00:31:47,176
dsocial places and calico users like

409
00:31:47,358 --> 00:31:50,856
so that's it for my presentation. I hope you

410
00:31:50,878 --> 00:31:53,940
have enjoyed it and I'd like to thank you for viewing.

