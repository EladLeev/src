1
00:00:38,850 --> 00:00:41,894
Hello and welcome. My name is Kevin Petro Givinch and

2
00:00:41,932 --> 00:00:45,394
I will have pleasure to talk about Azure DevOps private

3
00:00:45,442 --> 00:00:49,510
agents at scale. So how easy you can build

4
00:00:49,580 --> 00:00:53,018
your private agent pools using my approach.

5
00:00:53,194 --> 00:00:56,670
So go with me through the presentation and

6
00:00:56,740 --> 00:01:00,974
at the end of it you will obtain all the information which

7
00:01:01,012 --> 00:01:04,922
is needed to configure this private

8
00:01:04,986 --> 00:01:08,426
agents pool in your projects. Okay,

9
00:01:08,548 --> 00:01:13,874
before going to the presentation I would like to say

10
00:01:13,912 --> 00:01:18,070
a few words about manager manager senior Azure architect

11
00:01:18,570 --> 00:01:22,242
team, focusing mainly on the cloud migrations

12
00:01:22,306 --> 00:01:24,230
and greenfield projects.

13
00:01:25,530 --> 00:01:29,638
I really love to make automation of the solution,

14
00:01:29,814 --> 00:01:33,862
so it includes both code deployment

15
00:01:34,006 --> 00:01:37,798
and infrastructure creation. With my favorite

16
00:01:37,894 --> 00:01:41,790
tool terraform. I really like to also

17
00:01:41,860 --> 00:01:44,990
share knowledge. I do that through LinkedIn,

18
00:01:45,650 --> 00:01:49,322
my blog Azure way, and of course events

19
00:01:49,386 --> 00:01:50,640
like this.

20
00:01:51,890 --> 00:01:55,234
So just firstly I would

21
00:01:55,352 --> 00:01:58,914
like to show you two types of the

22
00:01:58,952 --> 00:02:02,818
Azure DevOps agents which are available so

23
00:02:02,904 --> 00:02:06,390
safe hosted and Microsoft hosted agents.

24
00:02:06,540 --> 00:02:09,830
So briefly we see the difference between

25
00:02:09,900 --> 00:02:13,320
them so you can easily define which

26
00:02:13,770 --> 00:02:17,502
agent is better for your workload.

27
00:02:17,666 --> 00:02:21,610
Okay, so the first thing which

28
00:02:21,680 --> 00:02:24,806
I would like to compare is the maintenance. So it's

29
00:02:24,838 --> 00:02:28,230
self hosted agents like the name suggest

30
00:02:28,390 --> 00:02:31,760
you need to maintain this agent by yourself.

31
00:02:32,130 --> 00:02:35,882
So you need to take care about the update,

32
00:02:36,026 --> 00:02:38,670
the networking, the connectivity,

33
00:02:39,250 --> 00:02:43,214
the tools which are installed, the updates

34
00:02:43,262 --> 00:02:46,802
of the system and so on. On the other hand,

35
00:02:46,856 --> 00:02:50,642
in Microsoft hosted you just use it,

36
00:02:50,776 --> 00:02:55,254
you do not care at all. So this

37
00:02:55,292 --> 00:02:58,710
is for sure easier path.

38
00:02:59,050 --> 00:03:02,178
Okay. The second thing, the integration.

39
00:03:02,354 --> 00:03:05,942
In my opinion, this is the crucial moment when you

40
00:03:05,996 --> 00:03:10,454
decide which agent you should use. So imagine

41
00:03:10,502 --> 00:03:13,946
that you have a project which is

42
00:03:14,128 --> 00:03:17,754
network isolated so it

43
00:03:17,792 --> 00:03:21,498
can be behind firewall, you can use

44
00:03:21,584 --> 00:03:25,226
private endpoints, you can use another

45
00:03:25,328 --> 00:03:28,526
isolation methods, then you need

46
00:03:28,548 --> 00:03:32,654
to use safe hosted agent because then you can

47
00:03:32,772 --> 00:03:35,950
integrate it with your network.

48
00:03:36,110 --> 00:03:39,614
So on the other hand, Microsoft hosted cannot

49
00:03:39,662 --> 00:03:43,742
be integrated with the virtual network.

50
00:03:43,886 --> 00:03:47,394
Of course there is also Microsoft hosted

51
00:03:47,442 --> 00:03:51,222
have some limits on the cpu memory and

52
00:03:51,276 --> 00:03:54,678
so on. So if you even do not

53
00:03:54,764 --> 00:03:58,438
have isolated

54
00:03:58,614 --> 00:04:01,994
workload, but you need more

55
00:04:02,112 --> 00:04:04,380
resources to build your project,

56
00:04:04,750 --> 00:04:08,710
then you need to go with the self hosted.

57
00:04:08,870 --> 00:04:12,234
Okay, what about pricing and scaling?

58
00:04:12,362 --> 00:04:15,982
So in the self hosted mode you have a

59
00:04:16,036 --> 00:04:19,358
really nice feature that if you add

60
00:04:19,444 --> 00:04:23,522
user with the MSDN license to

61
00:04:23,576 --> 00:04:26,754
your organization, you obtain one

62
00:04:26,952 --> 00:04:30,500
license for self hosted agent

63
00:04:31,430 --> 00:04:35,082
which includes private projects.

64
00:04:35,246 --> 00:04:39,046
If you want more license then you

65
00:04:39,068 --> 00:04:42,470
need to pay $15 per month. Of course

66
00:04:42,540 --> 00:04:46,262
this $15 per month include owning the license to

67
00:04:46,316 --> 00:04:49,434
running next self hosted agent.

68
00:04:49,632 --> 00:04:53,258
So the entire infrastructure on which

69
00:04:53,344 --> 00:04:56,426
you run this agent, you need

70
00:04:56,448 --> 00:05:00,286
to pay for that. Okay, so on

71
00:05:00,308 --> 00:05:03,918
the other hand, Microsoft hosted you pay

72
00:05:04,004 --> 00:05:07,470
$40 per month and you do not

73
00:05:07,540 --> 00:05:11,322
care about nothing. So the infrastructure

74
00:05:11,386 --> 00:05:14,786
and license is included on that price.

75
00:05:14,968 --> 00:05:18,382
What is really nice thing, you obtain

76
00:05:18,526 --> 00:05:21,762
one Microsoft hosted agent for free

77
00:05:21,896 --> 00:05:25,874
in Azure DevOps, but it has limit

78
00:05:26,002 --> 00:05:27,670
of the execution.

79
00:05:29,130 --> 00:05:33,654
Of course this agent for

80
00:05:33,692 --> 00:05:36,630
which you pay do not have such a limit.

81
00:05:37,210 --> 00:05:41,254
Okay, so if we are talking about private

82
00:05:41,382 --> 00:05:45,114
agents on the DevOps, of course you

83
00:05:45,152 --> 00:05:49,146
have many ways to achieve it. So this

84
00:05:49,168 --> 00:05:52,814
is not one solution which

85
00:05:52,852 --> 00:05:56,222
is perfect, but you can use many

86
00:05:56,356 --> 00:05:59,934
ways to achieve the goal. So now I would

87
00:05:59,972 --> 00:06:03,794
like you to present some of the options

88
00:06:03,912 --> 00:06:07,182
which we can use to create private

89
00:06:07,246 --> 00:06:10,706
agents. So the first will be maybe

90
00:06:10,888 --> 00:06:14,658
not popular one, but I really like it

91
00:06:14,744 --> 00:06:18,930
for certain scenarios. So this is Azure container instances

92
00:06:19,090 --> 00:06:23,282
which I like on that. This is extremely

93
00:06:23,346 --> 00:06:27,094
easy to set up, so you can set up

94
00:06:27,132 --> 00:06:30,330
it with only one command for the

95
00:06:30,400 --> 00:06:33,754
Azure ClI. So the setup is

96
00:06:33,792 --> 00:06:37,894
really easy, but there is some disadvantage

97
00:06:38,022 --> 00:06:41,694
that you cannot build docker images on

98
00:06:41,732 --> 00:06:45,262
it. Of course you can do some

99
00:06:45,316 --> 00:06:49,514
workaround. For example you can use Azure container

100
00:06:49,642 --> 00:06:52,914
registry private pool in

101
00:06:52,952 --> 00:06:57,342
which you can build your docker images and integrate

102
00:06:57,486 --> 00:07:00,754
with your virtual network. But as

103
00:07:00,792 --> 00:07:03,170
I said, this is only workaround.

104
00:07:04,230 --> 00:07:08,390
Of course there is another disadvantage that

105
00:07:08,540 --> 00:07:12,150
this agent is

106
00:07:12,300 --> 00:07:15,254
one instance which is constantly running.

107
00:07:15,452 --> 00:07:19,718
So imagine the situation that you have many pipelines

108
00:07:19,894 --> 00:07:24,026
and maybe you face such a situation in

109
00:07:24,048 --> 00:07:27,990
your projects. So when you build one pipeline

110
00:07:28,070 --> 00:07:31,950
and then second pipeline it sometimes fail,

111
00:07:33,090 --> 00:07:36,606
but in the other configuration it

112
00:07:36,708 --> 00:07:41,402
succeeded. So it means that your pipelines

113
00:07:41,546 --> 00:07:46,114
are somehow dependent on each other, but in

114
00:07:46,152 --> 00:07:50,354
not a state way. So the order in

115
00:07:50,392 --> 00:07:53,762
which run is really important because

116
00:07:53,896 --> 00:07:58,450
there must be certain order that these

117
00:07:58,520 --> 00:08:02,454
bill are failing. So it

118
00:08:02,492 --> 00:08:06,486
can be cases because that agent

119
00:08:06,588 --> 00:08:10,298
is not clear. So it has some

120
00:08:10,384 --> 00:08:14,246
dependent, maybe settings

121
00:08:14,358 --> 00:08:17,606
or some environment variables, maybe tools

122
00:08:17,718 --> 00:08:20,880
from the other build which was run on this agent.

123
00:08:21,330 --> 00:08:25,454
So yeah, we need to be careful on that and

124
00:08:25,492 --> 00:08:28,240
I will show you how we can avoid it.

125
00:08:28,850 --> 00:08:32,678
Okay, so the next thing will be of course Azure

126
00:08:32,714 --> 00:08:36,370
Kubernetes services, so you can create your

127
00:08:36,440 --> 00:08:40,370
private agent pool on the aks, which is a really

128
00:08:40,440 --> 00:08:43,634
great service. I think we can agree on that.

129
00:08:43,832 --> 00:08:47,938
And what's more, if you will use Keda

130
00:08:48,034 --> 00:08:51,938
for it, then you can make even driven

131
00:08:52,034 --> 00:08:55,510
scale of these private agents running

132
00:08:55,580 --> 00:08:59,610
on the Kubernetes services. So you can adjust

133
00:09:00,350 --> 00:09:03,642
your agents, for example to the

134
00:09:03,696 --> 00:09:07,530
qui build. So if you're on your qui

135
00:09:08,190 --> 00:09:11,660
will be for example 8910

136
00:09:12,270 --> 00:09:16,650
waiting bills, then you can scale accordingly

137
00:09:16,990 --> 00:09:21,134
with Keda. But of course this Azure Kubernetes services

138
00:09:21,252 --> 00:09:24,510
is difficult to set up. This is not one line comment.

139
00:09:24,670 --> 00:09:28,034
So this is more difficult to set

140
00:09:28,072 --> 00:09:30,606
up than container instances,

141
00:09:30,798 --> 00:09:34,542
but of course it's much more powerful

142
00:09:34,686 --> 00:09:38,614
than container services. So of

143
00:09:38,652 --> 00:09:42,866
course with the aks you can build docker

144
00:09:42,898 --> 00:09:46,070
images but it requires additional configuration.

145
00:09:46,650 --> 00:09:50,506
And what is great thing

146
00:09:50,608 --> 00:09:54,282
you benefit from all aks features. Yeah so

147
00:09:54,336 --> 00:09:57,642
self healing, scarring and so on.

148
00:09:57,776 --> 00:10:01,694
So this is a really great approach. But in my opinion this

149
00:10:01,732 --> 00:10:05,902
is really nice when you have a big project and

150
00:10:05,956 --> 00:10:10,030
long running project. So if your project run long

151
00:10:10,100 --> 00:10:13,586
time, so this is about two years

152
00:10:13,688 --> 00:10:17,534
or more, then you can think about setting

153
00:10:17,582 --> 00:10:19,460
up Kubernetes services.

154
00:10:20,710 --> 00:10:23,842
Okay. And the last but not least option is

155
00:10:23,896 --> 00:10:28,054
Azure V two R machine's case approach. So what I

156
00:10:28,172 --> 00:10:31,686
like in that scenario that this is pretty easy to

157
00:10:31,708 --> 00:10:35,666
set up. Of course this is more complicated than Azure container

158
00:10:35,698 --> 00:10:38,822
instances but less complicated than Kubernetes

159
00:10:38,886 --> 00:10:42,506
services. So it can scale up,

160
00:10:42,608 --> 00:10:46,374
scale down, can build docker

161
00:10:46,422 --> 00:10:50,306
images and is really cost efficient

162
00:10:50,438 --> 00:10:54,474
because you always scale

163
00:10:54,602 --> 00:10:58,330
to your needs and this is pretty similar to Keda.

164
00:10:58,410 --> 00:11:02,830
So if you have some builds waiting then you scale

165
00:11:03,490 --> 00:11:07,354
accordingly with the visual machine

166
00:11:07,402 --> 00:11:11,362
skset, but this does not require any

167
00:11:11,416 --> 00:11:12,930
additional configuration.

168
00:11:14,150 --> 00:11:17,974
And with this last approach I would like to follow in that

169
00:11:18,012 --> 00:11:22,166
presentation. So I will show you how to create

170
00:11:22,268 --> 00:11:26,198
virtual machines cases setup with of course

171
00:11:26,284 --> 00:11:30,806
step to step. And for what's

172
00:11:30,838 --> 00:11:34,794
more I will share source code for you

173
00:11:34,912 --> 00:11:38,486
in which you can run your setup

174
00:11:38,598 --> 00:11:41,470
in your project. Okay.

175
00:11:41,620 --> 00:11:45,294
But of course every setup has

176
00:11:45,332 --> 00:11:48,602
some challenges and visual

177
00:11:48,666 --> 00:11:52,330
machine skset agent pool is not different one.

178
00:11:52,500 --> 00:11:55,154
So what are the challenges here?

179
00:11:55,272 --> 00:11:59,742
So the first challenge will be to build a universal

180
00:11:59,806 --> 00:12:03,474
agent image because if you

181
00:12:03,672 --> 00:12:07,622
run such an approach then you need to cover

182
00:12:07,756 --> 00:12:11,126
different teams and application needs. So you

183
00:12:11,148 --> 00:12:14,950
will have some team which use net, some which use

184
00:12:15,020 --> 00:12:18,810
Java, some which use node or some data

185
00:12:18,880 --> 00:12:23,206
teams or even some architects

186
00:12:23,238 --> 00:12:26,934
team which creates architecture, for example in azure

187
00:12:26,982 --> 00:12:30,286
or AWS or even on the

188
00:12:30,308 --> 00:12:34,554
other clouds. So you need to have universal

189
00:12:34,602 --> 00:12:36,590
image, you can call it gold image,

190
00:12:37,570 --> 00:12:41,006
but building such an image which is

191
00:12:41,108 --> 00:12:44,642
a universal one is a challenge. I think we can agree

192
00:12:44,696 --> 00:12:48,226
on that. So you need to install a

193
00:12:48,248 --> 00:12:52,178
lot of tools and these tools will be in

194
00:12:52,344 --> 00:12:55,554
many versions. So you need to be careful

195
00:12:55,602 --> 00:12:59,602
on that because you cannot update

196
00:12:59,746 --> 00:13:03,138
these tools with your own choice

197
00:13:03,314 --> 00:13:07,030
because you can break some other build.

198
00:13:07,950 --> 00:13:11,306
So you will end up with

199
00:13:11,488 --> 00:13:15,978
many versions of your golden image and

200
00:13:16,064 --> 00:13:19,990
you need to be sure that you update your

201
00:13:20,080 --> 00:13:23,726
scale agents pool in a smooth way that you

202
00:13:23,748 --> 00:13:27,422
are sure that some

203
00:13:27,476 --> 00:13:31,326
teams are not using the version, for example five

204
00:13:31,428 --> 00:13:35,700
and they can switch to the version six. So you need to

205
00:13:36,310 --> 00:13:40,050
create a new agent pool, tell the team,

206
00:13:40,200 --> 00:13:43,522
yeah, you need to switch to the new pool because new

207
00:13:43,576 --> 00:13:47,302
version we deployed and check your old

208
00:13:47,356 --> 00:13:51,174
pipelines, your old builds. So if they can move

209
00:13:51,212 --> 00:13:54,614
to new version you can decommission previous one.

210
00:13:54,732 --> 00:13:58,342
But still you need to version the image

211
00:13:58,406 --> 00:14:02,058
and I will show you what tools you need to use

212
00:14:02,224 --> 00:14:05,770
to achieve that goal. Okay,

213
00:14:05,920 --> 00:14:09,878
so how this image build process

214
00:14:10,064 --> 00:14:13,774
can be made. So the first important

215
00:14:13,892 --> 00:14:18,080
thing, and I think this is a really great information

216
00:14:18,450 --> 00:14:22,110
that you do not need to create this golden image because

217
00:14:22,180 --> 00:14:26,002
it's already created. So on the GitHub you can find

218
00:14:26,056 --> 00:14:29,442
the repo where the definition of

219
00:14:29,496 --> 00:14:33,326
this image is already done. And what's

220
00:14:33,358 --> 00:14:36,390
more, using those sources.

221
00:14:38,250 --> 00:14:42,498
I think you use it many ways but you do not realize.

222
00:14:42,674 --> 00:14:46,082
So these sources are used to build GitHub

223
00:14:46,146 --> 00:14:49,880
runners and Microsoft hosted agents.

224
00:14:50,250 --> 00:14:54,440
So you can build these universal agents

225
00:14:54,990 --> 00:14:58,506
for your own private pool. I think this

226
00:14:58,528 --> 00:15:02,014
is really great information. To build that

227
00:15:02,052 --> 00:15:04,720
image you use Packer tool.

228
00:15:05,330 --> 00:15:08,186
And why to use Packer?

229
00:15:08,298 --> 00:15:11,360
Because you can just run it.

230
00:15:12,050 --> 00:15:16,574
You can go install the tools and create the image.

231
00:15:16,702 --> 00:15:20,462
Yeah, but with Packer you have a lot of tools,

232
00:15:20,606 --> 00:15:24,626
you can make the test of

233
00:15:24,648 --> 00:15:29,090
the setup and this is done through the CI CD pipeline.

234
00:15:29,250 --> 00:15:33,458
I think this is a really great approach that you can automatically

235
00:15:33,554 --> 00:15:36,998
build your golden image and

236
00:15:37,084 --> 00:15:40,974
Packer do that job for you. So in the background packer

237
00:15:41,042 --> 00:15:44,630
create virtual machine. On that virtual

238
00:15:44,710 --> 00:15:48,006
machine it execute the scripts,

239
00:15:48,198 --> 00:15:51,774
then make some best and then create

240
00:15:51,892 --> 00:15:55,326
image from this virtual machine in which you can use it.

241
00:15:55,508 --> 00:16:00,058
And in that process you will upload

242
00:16:00,234 --> 00:16:03,614
the image created from Packer into Azure

243
00:16:03,662 --> 00:16:07,118
image gallery. In that Azure image gallery

244
00:16:07,214 --> 00:16:10,914
you can have many versions of

245
00:16:10,952 --> 00:16:14,366
the image. So you create container.

246
00:16:14,398 --> 00:16:17,814
For example my golden build agent

247
00:16:18,012 --> 00:16:21,350
and on the my golden build agent you create

248
00:16:21,420 --> 00:16:24,566
versions and using that versions you

249
00:16:24,588 --> 00:16:28,360
can create virtual machines cases it

250
00:16:28,910 --> 00:16:32,854
of course you can have many versions of one image,

251
00:16:32,982 --> 00:16:36,346
which solves our problem with

252
00:16:36,448 --> 00:16:40,462
versioning and different tools. I think

253
00:16:40,516 --> 00:16:44,110
this is a really great approach and now I would like

254
00:16:44,180 --> 00:16:47,774
you to show how to implement it

255
00:16:47,892 --> 00:16:50,000
through the demo.

256
00:16:51,090 --> 00:16:54,286
Firstly I would like you to present

257
00:16:54,468 --> 00:16:58,106
the GitHub repository. Its name is

258
00:16:58,228 --> 00:17:02,260
images and what we can find

259
00:17:02,950 --> 00:17:06,674
in this repository is the source code used

260
00:17:06,712 --> 00:17:10,474
to create VM images for GitHub hosted runners

261
00:17:10,622 --> 00:17:14,342
used for GitHub actions, and also

262
00:17:14,396 --> 00:17:18,550
Microsoft hosted agents used for Azure pipelines.

263
00:17:18,710 --> 00:17:23,260
So in that repo, as you just see

264
00:17:23,790 --> 00:17:26,986
is a source code which is used to

265
00:17:27,008 --> 00:17:30,634
build choose hosted hanas. In my

266
00:17:30,672 --> 00:17:33,838
case I will be using ubuntu 20 four.

267
00:17:34,004 --> 00:17:37,870
So now let's see what are

268
00:17:38,020 --> 00:17:41,834
the tools installed into this image.

269
00:17:41,962 --> 00:17:46,274
To see that we need to go to the images next to

270
00:17:46,392 --> 00:17:50,194
explore Ubuntu. And now go

271
00:17:50,232 --> 00:17:53,698
to the readme file. Okay so

272
00:17:53,784 --> 00:17:57,382
in the readme file we have all information what is

273
00:17:57,436 --> 00:18:01,122
deployed into this image. So we have OS

274
00:18:01,186 --> 00:18:05,222
version of course system d image version and

275
00:18:05,276 --> 00:18:08,694
so on. This also specified language

276
00:18:08,742 --> 00:18:13,210
and runtime which I installed package management

277
00:18:14,430 --> 00:18:18,250
tools. So you have a pretty

278
00:18:18,320 --> 00:18:20,990
long list of the tools.

279
00:18:22,850 --> 00:18:26,282
And of course we have also some Cli tools

280
00:18:26,426 --> 00:18:29,802
like Aws, Cli, azure, Cli, GitHub,

281
00:18:29,866 --> 00:18:32,250
Cli, Google cloud,

282
00:18:32,420 --> 00:18:35,570
openshift and so on.

283
00:18:35,720 --> 00:18:39,938
Okay so now I would like you to show

284
00:18:40,104 --> 00:18:43,042
how this image definition look like.

285
00:18:43,176 --> 00:18:46,806
So to find the image definition we of course need

286
00:18:46,828 --> 00:18:50,194
to go to ubuntu and now explore

287
00:18:50,242 --> 00:18:53,990
templates. In the templates we need to

288
00:18:54,060 --> 00:18:57,590
open packer definition file.

289
00:18:59,450 --> 00:19:03,610
Okay and in the packer definition file we find firstly

290
00:19:04,030 --> 00:19:07,674
required plugins. This is the same structure as

291
00:19:07,712 --> 00:19:12,030
for terraform. And now nextly variables.

292
00:19:12,530 --> 00:19:16,462
These are pretty long list of the variables and

293
00:19:16,516 --> 00:19:19,850
then the build image

294
00:19:19,930 --> 00:19:23,070
step with usage of the azure iam.

295
00:19:23,970 --> 00:19:26,654
Okay so this is how it looks like,

296
00:19:26,692 --> 00:19:30,820
but in the setup I would like you to show the

297
00:19:31,590 --> 00:19:34,786
installation of the tools. So you see that

298
00:19:34,808 --> 00:19:38,882
this is execution of the prepared

299
00:19:38,946 --> 00:19:42,742
scripts. And for example there is also a

300
00:19:42,796 --> 00:19:45,750
skip build install terraform.

301
00:19:46,090 --> 00:19:49,320
So now go to that script and see

302
00:19:49,930 --> 00:19:53,370
how it pools. So we need to go to the

303
00:19:53,520 --> 00:19:58,006
scripts next build and then install terraform.

304
00:19:58,198 --> 00:20:03,470
Okay so go ubuntu scripts

305
00:20:06,290 --> 00:20:10,286
build and

306
00:20:10,388 --> 00:20:14,542
ethernet. Okay so the installation

307
00:20:14,606 --> 00:20:18,398
is pretty easy as you can see we first need to download

308
00:20:18,574 --> 00:20:22,174
the binaries and then unzip

309
00:20:22,222 --> 00:20:26,130
it to the user bin director.

310
00:20:26,290 --> 00:20:30,322
And then is our invoke test tools terraform.

311
00:20:30,466 --> 00:20:33,480
So let's see how this test looks like.

312
00:20:34,490 --> 00:20:38,330
So again we need to go to images

313
00:20:38,670 --> 00:20:42,170
ubuntu scripts

314
00:20:42,910 --> 00:20:44,250
next best.

315
00:20:48,270 --> 00:20:50,880
And then tools test pds one.

316
00:20:53,250 --> 00:20:56,510
Now we find terraform.

317
00:20:57,170 --> 00:21:00,734
Okay so we have a terraform test,

318
00:21:00,852 --> 00:21:05,234
we have a terraform version and

319
00:21:05,432 --> 00:21:08,834
should gcatune zero exit code.

320
00:21:08,952 --> 00:21:13,218
So it's simple word. This will just return the

321
00:21:13,384 --> 00:21:17,094
version of the terraform. Okay nice.

322
00:21:17,212 --> 00:21:20,760
So now I would like you to show how

323
00:21:21,210 --> 00:21:25,122
looks like the terraform

324
00:21:25,186 --> 00:21:28,786
skip to create the packet

325
00:21:28,818 --> 00:21:32,870
image and the virtual machine skip.

326
00:21:33,310 --> 00:21:36,598
So firstly we start with our providers

327
00:21:36,774 --> 00:21:40,154
for telephone. So we define two.

328
00:21:40,272 --> 00:21:44,514
So this would be hashicop azure rm

329
00:21:44,662 --> 00:21:48,878
and also hashicop random. I like

330
00:21:49,044 --> 00:21:52,586
this library for the random because I

331
00:21:52,628 --> 00:21:56,878
can generate random numbers, random passwords

332
00:21:56,974 --> 00:22:01,218
and so on. So really nice thing.

333
00:22:01,384 --> 00:22:04,994
Nextly I configure backend for

334
00:22:05,032 --> 00:22:08,534
the terraform in the azure in that case of course

335
00:22:08,572 --> 00:22:12,262
I use azure storage if you do not

336
00:22:12,316 --> 00:22:15,810
know how to configure the backend for the terraform,

337
00:22:15,970 --> 00:22:19,446
you can go to my blog and see article

338
00:22:19,558 --> 00:22:22,986
which goes you through all the steps how

339
00:22:23,008 --> 00:22:26,534
to configure backend and of course how to confuse

340
00:22:26,582 --> 00:22:30,198
provider in the terraform for

341
00:22:30,304 --> 00:22:33,806
Azure. So how to create client id,

342
00:22:33,988 --> 00:22:37,482
client secret and how to set up subscription

343
00:22:37,546 --> 00:22:42,170
id and of course tenant as you configure

344
00:22:42,250 --> 00:22:46,146
your telephone providers then we can look

345
00:22:46,248 --> 00:22:52,658
into the exit terraform script. So first

346
00:22:52,744 --> 00:22:56,134
things you need to notice is the image path. So this is

347
00:22:56,172 --> 00:22:59,842
path to the Ubuntu definition

348
00:22:59,906 --> 00:23:03,974
in Packer. And as you can see I have the

349
00:23:04,012 --> 00:23:07,474
directory running images main

350
00:23:07,612 --> 00:23:11,482
and this is just simple copy of

351
00:23:11,536 --> 00:23:15,370
the repo which I just show you in the seconds.

352
00:23:16,590 --> 00:23:20,640
Okay, so what we need to create to

353
00:23:25,570 --> 00:23:28,922
build your image and to create virtual

354
00:23:28,986 --> 00:23:32,382
machine sky set. So firstly we need

355
00:23:32,436 --> 00:23:35,726
a gallery. So we create shared

356
00:23:35,758 --> 00:23:38,020
image gallery here.

357
00:23:39,510 --> 00:23:43,102
This is just our service for storing

358
00:23:43,246 --> 00:23:46,626
the images and the image version.

359
00:23:46,818 --> 00:23:50,406
Next we

360
00:23:50,428 --> 00:23:54,594
need to create shared image. This is just a container

361
00:23:54,722 --> 00:23:58,586
for your image versions. So this is not

362
00:23:58,688 --> 00:24:01,900
exact image but this is

363
00:24:03,070 --> 00:24:06,534
like a resource group for the images.

364
00:24:06,662 --> 00:24:10,102
So my name will be Ubuntu 2204

365
00:24:10,256 --> 00:24:11,630
agent pools.

366
00:24:12,930 --> 00:24:16,570
Next I need to use a new heso

367
00:24:16,730 --> 00:24:20,240
because I would like to add packer in it.

368
00:24:20,770 --> 00:24:24,814
I run packet image with my image

369
00:24:24,862 --> 00:24:28,974
path. As you remember this is path

370
00:24:29,022 --> 00:24:33,326
to the Ubuntu four packer image

371
00:24:33,358 --> 00:24:37,906
definition. Next I run next

372
00:24:38,008 --> 00:24:41,558
no resource bound by but now this is a

373
00:24:41,564 --> 00:24:44,694
packet runner. It means to best a

374
00:24:44,732 --> 00:24:48,266
packer image. Of course I

375
00:24:48,288 --> 00:24:51,638
need to somehow authorize in Azure.

376
00:24:51,814 --> 00:24:55,142
So I need to again set the client

377
00:24:55,206 --> 00:24:58,982
id, client secret subscription

378
00:24:59,126 --> 00:25:02,314
and of course tenant. What you can notice

379
00:25:02,362 --> 00:25:06,494
in these parameters is a temp resource group name.

380
00:25:06,692 --> 00:25:09,966
So this is a resource group which will

381
00:25:09,988 --> 00:25:14,334
be used by Parker to create virtual machine

382
00:25:14,462 --> 00:25:17,794
and install all these tools there. And from this

383
00:25:17,832 --> 00:25:21,874
machine create image and

384
00:25:21,912 --> 00:25:25,986
this image will be placed in the managed image

385
00:25:26,018 --> 00:25:30,182
resource group name. Of course with

386
00:25:30,236 --> 00:25:33,862
the name specified in the managed image name

387
00:25:33,996 --> 00:25:37,106
parameter. Okay, after our skip

388
00:25:37,138 --> 00:25:40,898
is done I need to wait for it on the depends

389
00:25:40,914 --> 00:25:44,138
on. So see I must

390
00:25:44,224 --> 00:25:47,466
wait for the packaging to

391
00:25:47,488 --> 00:25:51,482
be finished before I can obtain azure

392
00:25:51,626 --> 00:25:54,894
image. I use that data

393
00:25:55,012 --> 00:25:58,640
because this is not adhesives which I create

394
00:25:59,010 --> 00:26:03,314
but I just made import to

395
00:26:03,352 --> 00:26:06,610
the terraform. And you remember

396
00:26:06,680 --> 00:26:10,610
that this image was created by a packet just in the

397
00:26:10,680 --> 00:26:13,762
packet runner step. Okay,

398
00:26:13,896 --> 00:26:17,538
so while I have the exact image

399
00:26:17,714 --> 00:26:21,686
I can create image version and put it in

400
00:26:21,708 --> 00:26:23,910
the image gallery.

401
00:26:24,810 --> 00:26:28,182
Of course I use some name in my case

402
00:26:28,236 --> 00:26:32,154
will be free. And of

403
00:26:32,192 --> 00:26:35,894
course you need to make a reference to the managed image

404
00:26:35,942 --> 00:26:39,862
id where in my case will be the

405
00:26:40,016 --> 00:26:43,150
id of the image created by Packer.

406
00:26:44,050 --> 00:26:47,646
Okay so the last step will be to create

407
00:26:47,748 --> 00:26:51,642
the skyset I use virtual

408
00:26:51,706 --> 00:26:54,894
machine skyset module defined in the terraform

409
00:26:55,022 --> 00:26:58,690
and in here I just need few

410
00:26:58,760 --> 00:27:03,090
parameters, resource group and location skew

411
00:27:03,510 --> 00:27:07,480
and image gallery image id.

412
00:27:07,930 --> 00:27:11,782
Okay so now see how

413
00:27:11,836 --> 00:27:15,922
this module look like. I create a random password.

414
00:27:15,986 --> 00:27:19,802
I need it for a setup. By honesty you don't need to log

415
00:27:19,856 --> 00:27:23,590
into these virtual machines because they are controlled

416
00:27:23,750 --> 00:27:27,450
by Azure DevOps. So next

417
00:27:27,520 --> 00:27:30,814
create just simple virtual network and

418
00:27:30,852 --> 00:27:34,558
subnet. Of course there is nothing special

419
00:27:34,644 --> 00:27:37,806
subnet needed. I think you

420
00:27:37,828 --> 00:27:41,440
need to adjust to your needs in your project.

421
00:27:42,370 --> 00:27:46,354
Next I create virtual machine skyset with the

422
00:27:46,472 --> 00:27:50,862
of course name admin user password

423
00:27:51,006 --> 00:27:54,658
for the instances I put one because this will be

424
00:27:54,744 --> 00:27:58,342
scaled by Azure DevOps so I don't need

425
00:27:58,396 --> 00:28:02,594
more. And what is really important, you need to set over provisioning

426
00:28:02,642 --> 00:28:07,362
to false and upgrade mode to manual as these parameters

427
00:28:07,506 --> 00:28:10,866
are needed to use this virtual machine

428
00:28:10,898 --> 00:28:14,762
sketch as an agent pool. Next I

429
00:28:14,816 --> 00:28:18,122
play source image id. Of course this will be

430
00:28:18,176 --> 00:28:20,170
id from the guy image.

431
00:28:20,770 --> 00:28:24,910
Okay next standard parameters,

432
00:28:25,810 --> 00:28:29,358
nothing fancy here. Okay so

433
00:28:29,524 --> 00:28:33,906
now see how this pipeline because

434
00:28:34,008 --> 00:28:38,146
I use Azure DevOps to build this

435
00:28:38,328 --> 00:28:41,826
terraform of course. So I

436
00:28:41,848 --> 00:28:45,402
do not want to run my local machine,

437
00:28:45,566 --> 00:28:49,334
I would rather use some

438
00:28:49,372 --> 00:28:53,270
pipeline to do that. One important thing on the pipeline is that

439
00:28:53,340 --> 00:28:57,160
timeout in minutes. You need to set a really high because

440
00:28:57,550 --> 00:29:00,890
this build cases about 2 hours which I will

441
00:29:00,960 --> 00:29:04,778
show you just now. Okay so

442
00:29:04,864 --> 00:29:08,442
we have pipeline create plan

443
00:29:08,496 --> 00:29:12,142
and apply. And you see that this took about 2

444
00:29:12,196 --> 00:29:15,150
hours. Of course it can vary.

445
00:29:16,610 --> 00:29:20,602
Okay so next go to terraform

446
00:29:20,666 --> 00:29:24,794
apply. Of course this is some standard setup.

447
00:29:24,842 --> 00:29:28,226
So I install terraform, I made some in it.

448
00:29:28,408 --> 00:29:32,100
I made terraform validate and then terraform apply.

449
00:29:33,270 --> 00:29:37,270
But what I would like to show here are tests.

450
00:29:39,130 --> 00:29:42,760
So go and find it.

451
00:29:44,330 --> 00:29:48,630
Yeah, so you see that we have discovered five tests.

452
00:29:50,650 --> 00:29:55,142
Discovery was pretty fast. Now these

453
00:29:55,196 --> 00:29:58,442
are filter selected four tests to run.

454
00:29:58,576 --> 00:30:02,090
As you see the filter is power nodules

455
00:30:02,990 --> 00:30:06,026
and there is a running of the

456
00:30:06,048 --> 00:30:10,154
best. And you see that test passed

457
00:30:10,202 --> 00:30:13,714
four fight zero skipped zero, not on

458
00:30:13,752 --> 00:30:17,586
one. And if you find that any

459
00:30:17,608 --> 00:30:20,626
of the best will be fired, of course the build of the

460
00:30:20,648 --> 00:30:24,338
image will be fired also. So you are sure

461
00:30:24,424 --> 00:30:27,380
that all pools are working.

462
00:30:28,630 --> 00:30:31,990
In another case you will just do not build this image.

463
00:30:32,570 --> 00:30:35,766
Okay, so now take a

464
00:30:35,788 --> 00:30:40,694
look for Azure side there

465
00:30:40,732 --> 00:30:43,898
is an agent pool automation code

466
00:30:43,984 --> 00:30:47,180
resource group and what we can find it.

467
00:30:48,350 --> 00:30:52,086
Yeah, so we have compute gallery, we have image,

468
00:30:52,198 --> 00:30:55,930
we have virtual machines cases, we have some virtual

469
00:30:56,010 --> 00:30:59,386
network. We have image definition and image

470
00:30:59,418 --> 00:31:03,314
version. So now take a look how this all connects with

471
00:31:03,352 --> 00:31:07,294
each other. So firstly go to the image

472
00:31:07,342 --> 00:31:10,574
gallery. In the image gallery

473
00:31:10,622 --> 00:31:14,366
you will find definition. So this is our Ubuntu

474
00:31:14,398 --> 00:31:18,054
2004 agent pool. So you see that this

475
00:31:18,092 --> 00:31:21,720
is only image definition which I can

476
00:31:23,050 --> 00:31:26,530
rely when I try to create virtual

477
00:31:26,610 --> 00:31:31,130
machines case it. So go to this definition.

478
00:31:34,110 --> 00:31:38,410
Okay, so you see that I have some versions

479
00:31:39,150 --> 00:31:43,406
and using that image definition I

480
00:31:43,428 --> 00:31:47,082
can create virtual machine or I can create virtual

481
00:31:47,146 --> 00:31:51,310
machine skyset. If you go to the version

482
00:31:55,030 --> 00:31:58,498
you also have create VM, a create

483
00:31:58,664 --> 00:32:03,314
virtual machines case set. But then when

484
00:32:03,352 --> 00:32:06,782
you use it you will use the exact version

485
00:32:06,846 --> 00:32:09,860
of the image. So in my case will be free.

486
00:32:10,250 --> 00:32:13,190
What is really nice is the update replication.

487
00:32:14,730 --> 00:32:18,650
So you see that we have a target region, replica count

488
00:32:18,720 --> 00:32:22,246
and stripe skew and replication status.

489
00:32:22,438 --> 00:32:26,154
So when you firstly run out form,

490
00:32:26,272 --> 00:32:29,638
the replication status won't be completed,

491
00:32:29,734 --> 00:32:33,630
but will be in progress and you will see a percentage

492
00:32:34,450 --> 00:32:37,790
how much of this application was completed.

493
00:32:38,610 --> 00:32:41,946
Of course this replication status must be to completed.

494
00:32:42,058 --> 00:32:45,314
Two this step on the telephone will be

495
00:32:45,352 --> 00:32:48,738
finished. So as you

496
00:32:48,744 --> 00:32:52,238
can see you can put this image in many regions

497
00:32:52,414 --> 00:32:56,226
and also use many versions. So if

498
00:32:56,248 --> 00:33:00,340
you would like to build another Ubuntu 2205

499
00:33:00,650 --> 00:33:04,722
ZFO agent pool, you will just put another version

500
00:33:04,786 --> 00:33:08,794
to that image definition. And then next you

501
00:33:08,832 --> 00:33:12,742
can use it with the virtual machine

502
00:33:12,806 --> 00:33:17,834
skill set creation. Okay, so now

503
00:33:17,872 --> 00:33:21,694
we can go to find how we can see

504
00:33:21,812 --> 00:33:25,422
how we can create a private agent

505
00:33:25,476 --> 00:33:28,910
pools. So we need to go to the organization settings.

506
00:33:31,650 --> 00:33:37,522
Next go to agent pools and

507
00:33:37,576 --> 00:33:42,674
in the next you need to go and click add pull as

508
00:33:42,712 --> 00:33:47,570
a pools type we'll choose virtual

509
00:33:47,650 --> 00:33:51,910
machine skset project

510
00:33:51,980 --> 00:33:56,802
for service connection. In my case will be azure way Azure

511
00:33:56,866 --> 00:34:00,694
subscription. So our connection will

512
00:34:00,732 --> 00:34:02,650
be enterprise subscription.

513
00:34:04,190 --> 00:34:07,702
Next I created a special virtual

514
00:34:07,766 --> 00:34:09,980
machine skate set for this demo.

515
00:34:11,490 --> 00:34:13,360
We specify the name,

516
00:34:19,570 --> 00:34:23,282
okay, and now we have few options to choose. First is

517
00:34:23,336 --> 00:34:27,122
an automaticality down virtual machine after

518
00:34:27,256 --> 00:34:31,010
use what it means. It means that when

519
00:34:31,080 --> 00:34:34,834
your build finished then your machine will

520
00:34:34,872 --> 00:34:38,486
be destroyed and new machine will

521
00:34:38,508 --> 00:34:42,086
be created to use for the next build. This is

522
00:34:42,108 --> 00:34:46,294
a really nice feature because you are sure that your

523
00:34:46,492 --> 00:34:49,514
agents is clean. I do not have

524
00:34:49,552 --> 00:34:52,490
any dependencies from other build,

525
00:34:52,990 --> 00:34:56,922
so for sure we want to turn on

526
00:34:56,976 --> 00:35:00,906
this feature. Next, the maximum number

527
00:35:00,928 --> 00:35:03,070
of each of our machines is Skyset.

528
00:35:04,210 --> 00:35:08,334
I think the description is pretty obvious, but you cannot set more

529
00:35:08,452 --> 00:35:11,658
than you have parallel jobs.

530
00:35:11,754 --> 00:35:13,860
So in Macari this is a nine,

531
00:35:15,510 --> 00:35:18,830
okay, so numbers of agents to keep on standby.

532
00:35:18,990 --> 00:35:22,734
So this will be the number of the petrol

533
00:35:22,782 --> 00:35:25,534
machines which are waiting for the bills.

534
00:35:25,662 --> 00:35:28,950
So if you want to save money, just put a zero here.

535
00:35:29,100 --> 00:35:32,710
But you must agree with that, that for the first

536
00:35:32,780 --> 00:35:35,878
build you need to wait a little bit.

537
00:35:35,964 --> 00:35:39,706
This will be about two, three minutes. Just to

538
00:35:39,808 --> 00:35:43,770
this agents will be connected to the delts.

539
00:35:44,270 --> 00:35:47,770
The last parameter is delay in minutes before

540
00:35:47,840 --> 00:35:51,550
deleting excess idle agents.

541
00:35:51,700 --> 00:35:54,960
So it means that this is a time,

542
00:35:56,770 --> 00:36:00,254
how much time this agents will keep

543
00:36:00,292 --> 00:36:03,954
on standby. If there is no action in

544
00:36:03,992 --> 00:36:06,500
that 30 minutes, this will be ticked down.

545
00:36:07,430 --> 00:36:12,738
So if you have really big

546
00:36:12,824 --> 00:36:16,534
number of the bills waiting, then this

547
00:36:16,572 --> 00:36:19,718
number won't be used because these agents

548
00:36:19,804 --> 00:36:23,720
will be occupied and you will never

549
00:36:24,170 --> 00:36:28,138
touch this delay. But if

550
00:36:28,224 --> 00:36:31,834
for example your team stopped working at this

551
00:36:31,872 --> 00:36:35,034
day and because this is an end of work

552
00:36:35,232 --> 00:36:39,114
for now, then probably all agents will be

553
00:36:39,152 --> 00:36:42,250
teamed down with this delay.

554
00:36:43,230 --> 00:36:47,226
Okay, so of course how to provision this agent pull in our

555
00:36:47,248 --> 00:36:50,558
project. It depends on your needs. Okay,

556
00:36:50,724 --> 00:36:54,290
so if you don't want to have

557
00:36:54,360 --> 00:36:57,842
this pool be available on all projects, just turn

558
00:36:57,896 --> 00:36:58,660
it off.

559
00:37:03,410 --> 00:37:06,000
Okay, so when you click create,

560
00:37:06,950 --> 00:37:11,346
then this pools will be ready in about 15

561
00:37:11,448 --> 00:37:14,834
minutes. So you must be patient here.

562
00:37:15,032 --> 00:37:19,330
15 minutes is beacons small time.

563
00:37:19,480 --> 00:37:23,234
So go to the, now we go to the agent pools.

564
00:37:23,282 --> 00:37:26,440
Again, there is an example,

565
00:37:27,850 --> 00:37:31,306
this is example pools as

566
00:37:31,328 --> 00:37:34,842
you can see on the agents. This is

567
00:37:34,896 --> 00:37:38,182
built on the example virtual machines kset.

568
00:37:38,326 --> 00:37:41,642
And this is also made on the

569
00:37:41,696 --> 00:37:45,280
same image which I just showed you.

570
00:37:45,810 --> 00:37:50,640
So I would like to go and

571
00:37:52,210 --> 00:37:58,210
present you that

572
00:37:58,280 --> 00:38:01,426
using this pool I can build the

573
00:38:01,448 --> 00:38:05,540
docker image. I will just make a run pipeline here

574
00:38:05,910 --> 00:38:07,300
and show you.

575
00:38:11,050 --> 00:38:14,870
Yeah, so you see that I have a really simple pipeline

576
00:38:15,370 --> 00:38:18,646
built and push state and there is

577
00:38:18,668 --> 00:38:22,442
a docker build, easy one, nothing fancy here.

578
00:38:22,576 --> 00:38:25,674
Okay, so I just

579
00:38:25,712 --> 00:38:29,082
run this pipeline, it should be finished in

580
00:38:29,136 --> 00:38:31,820
about three minutes, maybe two.

581
00:38:32,670 --> 00:38:35,840
So we'll back to it in a second.

582
00:38:36,850 --> 00:38:39,518
And as you can see, one more thing,

583
00:38:39,684 --> 00:38:42,426
it uses the example bitchuma machine,

584
00:38:42,458 --> 00:38:45,726
skset agent and of

585
00:38:45,748 --> 00:38:48,866
course the machine, the name is

586
00:38:48,888 --> 00:38:52,178
the same. Okay, so we back

587
00:38:52,264 --> 00:38:56,034
in a minute to see how it

588
00:38:56,072 --> 00:38:58,420
goes. Okay,

589
00:38:59,290 --> 00:39:03,382
so the summary of the process, it looks like

590
00:39:03,516 --> 00:39:06,946
that. So first we need to create shared image

591
00:39:06,978 --> 00:39:11,382
gallery just to have

592
00:39:11,436 --> 00:39:15,602
possibility to later on use image to create virtual

593
00:39:15,666 --> 00:39:19,174
machines case it. And next we create shared

594
00:39:19,222 --> 00:39:22,970
image. Remember that this is just a container for the image versions.

595
00:39:23,730 --> 00:39:27,342
Then we unpack an image build. To build our

596
00:39:27,396 --> 00:39:31,166
image as an output we

597
00:39:31,188 --> 00:39:33,390
need to create image version.

598
00:39:34,530 --> 00:39:37,858
So after we create the image version, we can create

599
00:39:37,944 --> 00:39:41,570
virtual machines cases. And the

600
00:39:41,640 --> 00:39:45,170
last step will be configure Azure DevOps agent

601
00:39:45,240 --> 00:39:49,090
pool okay so maybe

602
00:39:49,240 --> 00:39:52,580
we see how our build is going,

603
00:39:54,010 --> 00:39:57,960
we need a few moments more. Okay so

604
00:39:59,530 --> 00:40:03,722
what if of course I had different issues

605
00:40:03,856 --> 00:40:07,594
when I tried to build this golden image. So the

606
00:40:07,632 --> 00:40:11,786
first was we stopped hearing from

607
00:40:11,888 --> 00:40:15,280
agent, from the hosted agent

608
00:40:16,050 --> 00:40:20,718
okay so I tried to use Microsoft hosted agent and

609
00:40:20,884 --> 00:40:24,926
after one and a half hour I got

610
00:40:25,108 --> 00:40:28,610
that this hosted agent was disconnected.

611
00:40:30,230 --> 00:40:33,490
If you will put this error into

612
00:40:33,560 --> 00:40:37,330
the Google you will see a lot of

613
00:40:37,400 --> 00:40:41,318
issues with the hosted Microsoft agents and

614
00:40:41,484 --> 00:40:44,658
of course nothing was resolved.

615
00:40:44,834 --> 00:40:49,606
So in order to build that image I used another

616
00:40:49,708 --> 00:40:53,446
private agent. I set it up on the virtual

617
00:40:53,638 --> 00:40:58,042
machine, the Linux one of course the Ubuntu so then

618
00:40:58,176 --> 00:41:00,540
it all worked just fine.

619
00:41:01,150 --> 00:41:05,014
But I have another arrow.

620
00:41:05,142 --> 00:41:08,966
This was fate to fetch four fee for Biden.

621
00:41:09,158 --> 00:41:12,886
So I got this arrow, why don't

622
00:41:12,918 --> 00:41:16,610
unlink one of the pools? Maybe that was, you know,

623
00:41:16,680 --> 00:41:20,590
some issue with that server.

624
00:41:20,750 --> 00:41:24,770
I know how to say when I rerun

625
00:41:26,310 --> 00:41:30,390
this process the image was built without errors.

626
00:41:30,730 --> 00:41:35,814
Okay so yeah you see that the

627
00:41:35,852 --> 00:41:40,198
build is already finished. It took almost two

628
00:41:40,284 --> 00:41:44,186
minutes. Let's see how the agents

629
00:41:44,288 --> 00:41:47,718
looks like. So you see that my agent is offline

630
00:41:47,894 --> 00:41:51,114
because I have a settings that it needs

631
00:41:51,152 --> 00:41:55,020
to be teared down after the build.

632
00:41:57,070 --> 00:42:00,650
When I will another

633
00:42:00,720 --> 00:42:03,580
pipeline then I will go to fetch agent.

634
00:42:04,910 --> 00:42:08,130
Okay so what about the costs?

635
00:42:08,790 --> 00:42:12,354
So in my project I run it

636
00:42:12,392 --> 00:42:16,338
for one month, I set it up maximum number of

637
00:42:16,504 --> 00:42:20,680
agents to 15 and the build was

638
00:42:21,210 --> 00:42:24,774
$150. So it

639
00:42:24,812 --> 00:42:28,454
means that I paid $10 pay

640
00:42:28,572 --> 00:42:32,474
per agent. Of course this $10 is only the

641
00:42:32,512 --> 00:42:36,042
cost of the infrastructure. So this is

642
00:42:36,096 --> 00:42:40,410
cost of virtual machines cases. I think this is a pretty

643
00:42:40,480 --> 00:42:43,906
good price as the hosted

644
00:42:43,958 --> 00:42:47,582
agents, the Microsoft hosted agent it cost about

645
00:42:47,636 --> 00:42:51,022
$40 per month. So I use

646
00:42:51,076 --> 00:42:55,680
the same image as the Microsoft hosted pay $10.

647
00:42:55,990 --> 00:42:59,314
So I think this is a pretty good and of

648
00:42:59,352 --> 00:43:03,650
course this cost may vary because

649
00:43:03,800 --> 00:43:07,362
you can set up another number

650
00:43:07,416 --> 00:43:11,426
of the Eden agents, you can have more bills.

651
00:43:11,538 --> 00:43:15,606
So it all depends on the project but you

652
00:43:15,628 --> 00:43:19,686
see the overall cost. Okay so

653
00:43:19,788 --> 00:43:23,290
if you would like to obtain the source code

654
00:43:23,360 --> 00:43:27,114
and description for the terraform which I just show

655
00:43:27,152 --> 00:43:29,926
you and of course the pipelines,

656
00:43:30,118 --> 00:43:34,926
you can go to my blog. This is Azureway cloud,

657
00:43:35,028 --> 00:43:39,402
you can scan this QR code and see the description

658
00:43:39,546 --> 00:43:43,418
and all the needed URLs.

659
00:43:43,594 --> 00:43:47,694
So the GitHub, GitHub runners

660
00:43:47,822 --> 00:43:51,694
and the GitHub repository of my Azure

661
00:43:51,742 --> 00:43:52,930
way blog.

662
00:43:54,310 --> 00:43:58,034
Okay if you would like to

663
00:43:58,072 --> 00:44:01,814
stay in touch with me you can just follow me

664
00:44:01,852 --> 00:44:05,942
on my LinkedIn and if you have any questions of

665
00:44:06,076 --> 00:44:09,654
problems with my examples you can

666
00:44:09,692 --> 00:44:12,682
contact me on the private message. For sure.

667
00:44:12,816 --> 00:44:14,940
I will help you with that.

668
00:44:17,070 --> 00:44:20,762
Okay. So thank you for your attention. I hope

669
00:44:20,816 --> 00:44:24,714
you enjoyed the session and

670
00:44:24,912 --> 00:44:28,918
I hope that you will use this approach in your projects.

671
00:44:29,014 --> 00:44:32,826
And the setup will be really smooth using my

672
00:44:33,008 --> 00:44:36,158
tutorial and source code. Bye.

673
00:44:36,214 --> 00:44:36,914
Have a nice day.

