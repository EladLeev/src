1
00:02:14,920 --> 00:02:18,352
Hi and welcome to this talk on SRE best practices

2
00:02:18,416 --> 00:02:21,844
for API design. I'm Navendu and in this

3
00:02:21,882 --> 00:02:25,296
session we will look into how development can development teams

4
00:02:25,328 --> 00:02:29,648
can build reliable APIs. We will look into what reliability

5
00:02:29,744 --> 00:02:33,508
means for APIs and reliability issues

6
00:02:33,594 --> 00:02:37,052
in a traditional API design. We will also look into

7
00:02:37,106 --> 00:02:41,032
how SRE fit into API development pipelines,

8
00:02:41,176 --> 00:02:44,760
and we will top it off with SRE and devop centric

9
00:02:44,840 --> 00:02:48,856
best practices for API development with an

10
00:02:48,898 --> 00:02:52,736
API gateway. Before we

11
00:02:52,918 --> 00:02:57,440
mourn a little bit about me I am Navendu

12
00:02:57,780 --> 00:03:01,904
and I'm a developer advocate at API seven AI.

13
00:03:02,032 --> 00:03:05,252
I currently contribute to Apache API six,

14
00:03:05,386 --> 00:03:07,860
which is a cloud native API gateway.

15
00:03:08,600 --> 00:03:12,928
I was also a cloud native computing foundation open source maintainer

16
00:03:13,104 --> 00:03:17,780
and I also help Google Summer of code and LFX

17
00:03:17,860 --> 00:03:21,384
mentees to help start their open

18
00:03:21,422 --> 00:03:24,712
source contribution journey. And you can reach out to me

19
00:03:24,766 --> 00:03:27,996
on Twitter, I'm mostly active there. If you have any operations or

20
00:03:28,018 --> 00:03:31,020
if you would like to discuss things further, feel free to reach out to me

21
00:03:31,090 --> 00:03:35,324
over at Twitter. All right, let's start

22
00:03:35,362 --> 00:03:38,460
the session by discussing about reliability.

23
00:03:39,060 --> 00:03:42,160
What does it mean to be reliable?

24
00:03:42,900 --> 00:03:46,496
So if you

25
00:03:46,518 --> 00:03:49,984
are a seller of an API, you might

26
00:03:50,022 --> 00:03:52,400
have slas,

27
00:03:53,940 --> 00:03:58,164
you might quote to your customers that your

28
00:03:58,202 --> 00:04:01,190
API is 99.9%,

29
00:04:01,720 --> 00:04:04,500
has a 99.9% uptime.

30
00:04:05,500 --> 00:04:09,240
But uptime can be a myopic view of

31
00:04:09,310 --> 00:04:11,560
what reliability entails.

32
00:04:13,420 --> 00:04:15,720
And even the case of uptime,

33
00:04:17,840 --> 00:04:21,196
it is kind of caused by making sure

34
00:04:21,218 --> 00:04:23,500
that your services don't crash.

35
00:04:26,480 --> 00:04:29,904
There is something more to uptime, or uptime is

36
00:04:30,022 --> 00:04:32,640
the result of some other factors.

37
00:04:33,780 --> 00:04:37,660
So what does it mean to be reliable?

38
00:04:37,740 --> 00:04:41,116
So when talking about reliability, a lot of

39
00:04:41,238 --> 00:04:42,790
teams get tossed around.

40
00:04:43,960 --> 00:04:46,420
These are consistency,

41
00:04:47,720 --> 00:04:51,236
especially in case of APIs. You need

42
00:04:51,258 --> 00:04:54,456
to have your APIs consistent so that

43
00:04:54,478 --> 00:04:58,164
the client applications can produce reproducible results

44
00:04:58,212 --> 00:05:02,184
with your API, and you need to make it

45
00:05:02,382 --> 00:05:06,090
available. So availability directly translates to

46
00:05:06,400 --> 00:05:09,710
what could be the uptime. So we want to make sure that

47
00:05:10,320 --> 00:05:13,980
your API is available

48
00:05:14,130 --> 00:05:18,396
all the time or as expected, and the

49
00:05:18,418 --> 00:05:22,352
consumers of the API don't have app

50
00:05:22,406 --> 00:05:26,208
crashes due to a

51
00:05:26,214 --> 00:05:29,376
lack of response from your API and low

52
00:05:29,398 --> 00:05:33,252
latency. So latency, a service with a high

53
00:05:33,306 --> 00:05:37,108
latency is almost equal to service that is not working.

54
00:05:37,194 --> 00:05:41,460
So basically for a client or for a consumer,

55
00:05:42,840 --> 00:05:46,744
it basically translates to a

56
00:05:46,782 --> 00:05:50,404
failed application. So latency is also an important factor

57
00:05:50,452 --> 00:05:53,770
when it comes to reliability and security.

58
00:05:55,100 --> 00:05:59,292
Secure APIs and secure services are

59
00:05:59,346 --> 00:06:03,224
what are like the pillars

60
00:06:03,272 --> 00:06:05,820
of reliability when it comes to API.

61
00:06:06,160 --> 00:06:10,304
And on top of that, you also need to ensuring you have

62
00:06:10,422 --> 00:06:13,584
status of your API so this goes for

63
00:06:13,622 --> 00:06:16,252
both the development teams and the consumers of the API.

64
00:06:16,316 --> 00:06:20,464
So both of them should be aware of how

65
00:06:20,502 --> 00:06:24,500
their API is performing and what is the status?

66
00:06:26,840 --> 00:06:30,180
Is it up right now or is there some

67
00:06:30,250 --> 00:06:33,920
redirects configured or that sort of things? We will look into this

68
00:06:34,010 --> 00:06:37,300
further. So I want to emphasize

69
00:06:37,460 --> 00:06:41,256
on the point that reliability is more than just the

70
00:06:41,278 --> 00:06:45,672
uptime. And for

71
00:06:45,726 --> 00:06:49,384
this talk I will use the term microservice

72
00:06:49,512 --> 00:06:53,132
loosely. It may need

73
00:06:53,186 --> 00:06:56,556
not be a cloud native microservice, it can be your application,

74
00:06:56,658 --> 00:07:00,156
servers or anything that is serving

75
00:07:00,188 --> 00:07:03,964
your API to your consumers. So traditionally

76
00:07:04,012 --> 00:07:07,708
you will have more than one client

77
00:07:07,804 --> 00:07:11,420
for your API, and I am representing it here

78
00:07:11,510 --> 00:07:16,100
by different applications running on different platforms.

79
00:07:19,800 --> 00:07:23,590
Yes. Let's look into

80
00:07:24,140 --> 00:07:27,528
some of the problems you face with

81
00:07:27,614 --> 00:07:31,992
traditional API architectures that

82
00:07:32,046 --> 00:07:35,428
will be of your concern as a site reliability

83
00:07:35,524 --> 00:07:39,468
engineer. So we talked about

84
00:07:39,634 --> 00:07:43,484
all the different pillars of reliability or

85
00:07:43,522 --> 00:07:46,380
different aspects of reliability,

86
00:07:47,040 --> 00:07:51,220
and if you want to improve

87
00:07:51,240 --> 00:07:54,496
the reliability of your services, you have to do something about it.

88
00:07:54,678 --> 00:07:58,476
So in a traditional API architecture,

89
00:07:58,508 --> 00:08:02,550
if you want to do something about it, what you will end up doing is

90
00:08:03,000 --> 00:08:06,980
you will have to configure or you'll have to add something

91
00:08:07,050 --> 00:08:12,016
new to each of your service, each of your endpoints.

92
00:08:12,208 --> 00:08:15,320
So these endpoints

93
00:08:15,740 --> 00:08:18,980
basically could be written in multiple programming languages.

94
00:08:19,140 --> 00:08:22,072
They could have been using different libraries, all sort of things.

95
00:08:22,126 --> 00:08:25,290
So it is not plug and play.

96
00:08:25,980 --> 00:08:29,896
It is more of a tedious job that can waste

97
00:08:29,928 --> 00:08:31,550
a lot of developer hours,

98
00:08:34,000 --> 00:08:38,076
and they are not centralized. So when

99
00:08:38,098 --> 00:08:41,484
you see something like this, it immediately

100
00:08:41,532 --> 00:08:45,696
pops into our mind that this should have been centralized. But in

101
00:08:45,718 --> 00:08:49,024
this case, as the API scales, you also have to

102
00:08:49,062 --> 00:08:52,944
scale your scale, the structure you have set up to ensure

103
00:08:52,992 --> 00:08:57,780
reliability, which is not feasible, which is not sustainable.

104
00:08:58,680 --> 00:09:01,940
So if you are setting up monitoring,

105
00:09:02,280 --> 00:09:06,328
you'll end up having to monitor every service

106
00:09:06,414 --> 00:09:09,784
or maybe every request to the service or

107
00:09:09,822 --> 00:09:14,010
every endpoint in the service. And if you want to set up security,

108
00:09:14,460 --> 00:09:19,324
the same goes, you will have to configure your

109
00:09:19,362 --> 00:09:22,796
security for each of your services. And if you want to set

110
00:09:22,818 --> 00:09:26,636
up something like an authentication, it is also not centralized and you will

111
00:09:26,658 --> 00:09:31,084
end up having to configure them directly

112
00:09:31,132 --> 00:09:34,624
on all your services, which needless to say,

113
00:09:34,662 --> 00:09:38,464
is a lot burden for the developer and

114
00:09:38,662 --> 00:09:42,596
for the maintenance team who works on

115
00:09:42,618 --> 00:09:47,476
it afterwards. And we

116
00:09:47,498 --> 00:09:50,870
can even imagine how difficult it would be to

117
00:09:52,120 --> 00:09:58,090
make new releases. So it will be a

118
00:09:59,820 --> 00:10:03,336
tiring job because you

119
00:10:03,358 --> 00:10:06,732
have to ensure very less downtime or

120
00:10:06,786 --> 00:10:10,588
zero downtime. And we want to ensure that no requests are

121
00:10:10,674 --> 00:10:14,012
interrupted while transitioning to this new

122
00:10:14,066 --> 00:10:17,720
version of the API. So from a traditional

123
00:10:17,800 --> 00:10:21,100
perspective, this seems too difficult to handle.

124
00:10:23,620 --> 00:10:27,136
What is the solution? What can we

125
00:10:27,158 --> 00:10:30,130
do to overcome this?

126
00:10:30,740 --> 00:10:34,240
That is where we introduce API gateways.

127
00:10:34,320 --> 00:10:38,084
So API gateways have been around for a

128
00:10:38,122 --> 00:10:42,320
really long time, ever since the API development

129
00:10:42,400 --> 00:10:44,020
model was popularized,

130
00:10:46,600 --> 00:10:50,356
and they have been widely gaining adoption ever since

131
00:10:50,458 --> 00:10:54,416
people started to moving from monoliths to microservice

132
00:10:54,448 --> 00:10:58,668
based architectures. So what

133
00:10:58,674 --> 00:11:02,670
do you mean by an API gateway and why should you care about it?

134
00:11:03,200 --> 00:11:06,990
Now, if we go back to our service,

135
00:11:09,140 --> 00:11:12,784
you have a lot of services and you have to end up configuring all

136
00:11:12,822 --> 00:11:16,540
of your observability configurations

137
00:11:16,620 --> 00:11:19,280
like monitoring, tracing,

138
00:11:20,100 --> 00:11:23,716
security, authentication and traffic control and all

139
00:11:23,738 --> 00:11:27,076
sort of things directly to your microservice. And that is

140
00:11:27,098 --> 00:11:29,510
where an API gateway steps in.

141
00:11:30,120 --> 00:11:33,872
So an API gateway acts as common

142
00:11:33,946 --> 00:11:37,640
entry point for all of your traffic. And in turn,

143
00:11:37,790 --> 00:11:41,096
an API gateway routes, it has

144
00:11:41,118 --> 00:11:45,000
some configurations, and based on that configuration, it routes the traffic

145
00:11:45,660 --> 00:11:49,150
back to your backend, back to your services.

146
00:11:50,320 --> 00:11:54,664
So an API gateways in essence abstracts

147
00:11:54,712 --> 00:11:58,316
out all the configuration you need on

148
00:11:58,338 --> 00:12:01,650
your APIs. So it abstracts out,

149
00:12:03,860 --> 00:12:06,160
when talking in terms of observability,

150
00:12:07,140 --> 00:12:11,556
it abstracts out all the burden from

151
00:12:11,578 --> 00:12:15,584
each of the individual services into one standards

152
00:12:15,632 --> 00:12:18,736
instance, and it can be managed centrally.

153
00:12:18,928 --> 00:12:22,432
So an API gateway does a lot of functions.

154
00:12:22,496 --> 00:12:25,556
So it manages authentication,

155
00:12:25,668 --> 00:12:32,388
it deals with your security, it can be configured

156
00:12:32,484 --> 00:12:36,040
to allow for monitoring and observability,

157
00:12:36,560 --> 00:12:39,308
and it can also be used for traffic control,

158
00:12:39,394 --> 00:12:41,870
among a lot of other things.

159
00:12:42,960 --> 00:12:46,700
So can API gateways is quite useful.

160
00:12:47,440 --> 00:12:50,528
And with that in mind,

161
00:12:50,694 --> 00:12:54,880
let's look at reliability, some of the reliability

162
00:12:55,540 --> 00:12:58,080
best practices for API gateways,

163
00:12:58,820 --> 00:13:02,276
and there are a lot of vendor neutral and

164
00:13:02,298 --> 00:13:04,230
open source API gateways available.

165
00:13:07,000 --> 00:13:10,944
As I might have mentioned, I am one of the maintainers

166
00:13:10,992 --> 00:13:14,536
of Apache API six project,

167
00:13:14,638 --> 00:13:17,476
which is also a cloud native API gateway.

168
00:13:17,668 --> 00:13:20,250
But throughout this talk,

169
00:13:21,980 --> 00:13:25,416
I'll be talking about API gateways from on a high

170
00:13:25,438 --> 00:13:29,324
level, and you can use any of the API gateways of

171
00:13:29,362 --> 00:13:33,692
your choice, or you can even go for cloud

172
00:13:33,746 --> 00:13:37,276
providers API gateways. So let's look

173
00:13:37,298 --> 00:13:41,520
at reliability best practices with these API gateways.

174
00:13:42,420 --> 00:13:45,964
So authentication and security, as we discussed

175
00:13:46,092 --> 00:13:49,152
in the earlier session of this talk, is quite

176
00:13:49,206 --> 00:13:53,700
essential. And the

177
00:13:53,770 --> 00:13:57,060
first thing is user authentication.

178
00:13:57,640 --> 00:14:01,952
So user authentication or authenticated rookies

179
00:14:02,016 --> 00:14:05,880
are a proven way to secure your client API interactions.

180
00:14:06,380 --> 00:14:10,490
And when it comes to monitoring authenticated, rookers also

181
00:14:11,180 --> 00:14:14,312
holds monitor your APIs in a very fine

182
00:14:14,366 --> 00:14:18,732
grained manner. The picture is self

183
00:14:18,786 --> 00:14:23,208
explanatory. We have all traffic routed

184
00:14:23,304 --> 00:14:26,936
through the API gateway and the API gateway will handle

185
00:14:26,968 --> 00:14:31,340
the authentication. So you can have basic authentication

186
00:14:31,420 --> 00:14:34,892
like a jot

187
00:14:34,956 --> 00:14:38,480
token or cookie in the header, or something

188
00:14:38,550 --> 00:14:43,556
basic to something like you

189
00:14:43,578 --> 00:14:47,408
can even use authentication providers like active directories

190
00:14:47,504 --> 00:14:51,350
and all sort of things, or maybe even

191
00:14:51,880 --> 00:14:55,240
authentication. So basically, API gateway takes care

192
00:14:55,310 --> 00:14:58,890
of all of your authentication needs,

193
00:14:59,340 --> 00:15:02,836
and once your client is authenticated,

194
00:15:03,028 --> 00:15:06,936
it can use the info gained

195
00:15:06,968 --> 00:15:11,612
from the authentication and it can be used for

196
00:15:11,666 --> 00:15:15,356
the algorithms in the service, or it can

197
00:15:15,378 --> 00:15:18,990
be used later on in your back end or in your services.

198
00:15:19,940 --> 00:15:23,904
And the next important aspect of security

199
00:15:24,022 --> 00:15:29,584
is rate limiting. This is something that some

200
00:15:29,622 --> 00:15:33,712
of you might not have thought in terms of reliability

201
00:15:33,776 --> 00:15:37,732
perspective. But rate limiting is also quite

202
00:15:37,786 --> 00:15:41,620
important, mainly because it avoids

203
00:15:42,360 --> 00:15:46,068
intentional or even unintentional misuse

204
00:15:46,084 --> 00:15:49,960
of your APIs, like a denial of service attacks.

205
00:15:50,780 --> 00:15:55,416
And it also helps improve the scalability as

206
00:15:55,438 --> 00:15:58,380
your API encounter traffic spikes,

207
00:15:59,920 --> 00:16:03,368
or mainly like quite uncertain traffic spikes.

208
00:16:03,464 --> 00:16:05,710
So rate limiting is quite important.

209
00:16:06,880 --> 00:16:10,896
So basically all

210
00:16:10,918 --> 00:16:14,240
of your requests will be routed through your API gateway.

211
00:16:14,660 --> 00:16:18,896
And if

212
00:16:18,918 --> 00:16:22,656
your services can't handle a set

213
00:16:22,678 --> 00:16:28,084
of requests, what you can do is you

214
00:16:28,122 --> 00:16:31,792
can block those requests. So if there are too many requests,

215
00:16:31,856 --> 00:16:35,432
they won't be processed and you can either reject those

216
00:16:35,486 --> 00:16:39,124
requests or you can either delay

217
00:16:39,172 --> 00:16:42,744
those requests. So based on your configuration or based

218
00:16:42,782 --> 00:16:46,084
on what you are trying to do, you can do either by reject,

219
00:16:46,132 --> 00:16:49,624
I mean you will entirely suspend

220
00:16:49,672 --> 00:16:55,420
those requests and you will probably return 500

221
00:16:55,570 --> 00:16:59,120
range status code back to your client. Or you can maybe

222
00:16:59,190 --> 00:17:02,704
delay those requests if you

223
00:17:02,742 --> 00:17:06,496
can tolerate some level of latency, or if your client application

224
00:17:06,598 --> 00:17:10,850
can tolerate some level of latency, you can delay those requests until your

225
00:17:11,240 --> 00:17:13,904
services are able to handle those requests.

226
00:17:14,032 --> 00:17:17,600
So it is like a first come first priority.

227
00:17:17,680 --> 00:17:21,684
So you can work based on that and

228
00:17:21,722 --> 00:17:25,850
there are even other ways in which you can

229
00:17:26,940 --> 00:17:30,488
ensuring security and authentication. But I will leave that

230
00:17:30,574 --> 00:17:34,248
to you to explore and I will move on to the

231
00:17:34,414 --> 00:17:38,060
monitoring and observability part of our discussion.

232
00:17:38,480 --> 00:17:42,424
So monitoring and observability deals

233
00:17:42,472 --> 00:17:44,940
with tracing,

234
00:17:46,400 --> 00:17:48,220
logging and metrics.

235
00:17:51,460 --> 00:17:53,980
So we have our API gateway,

236
00:17:54,060 --> 00:17:58,160
and by monitoring

237
00:17:58,660 --> 00:18:02,716
what you can get is you can monitor your reliability metrics. We talked about

238
00:18:02,758 --> 00:18:06,532
some metrics and setting up some monitoring tool

239
00:18:06,586 --> 00:18:10,932
directly on your API gateway means you can monitor all of your traffic and

240
00:18:10,986 --> 00:18:14,492
you can monitor those traffic for your reliability metrics.

241
00:18:14,656 --> 00:18:18,660
And the API logs and your traces

242
00:18:18,740 --> 00:18:23,400
give detailed information of one particular request. So a trace tracks

243
00:18:24,460 --> 00:18:27,916
the entire request throughout your API, from your

244
00:18:27,938 --> 00:18:31,852
API gateway, through your services and back to the client. So post

245
00:18:31,906 --> 00:18:37,772
can give detailed information about

246
00:18:37,826 --> 00:18:41,424
the different reliability metrics and you can know how your API is

247
00:18:41,462 --> 00:18:44,736
performed. And setting up

248
00:18:44,758 --> 00:18:49,072
monitoring also helps you to know when your API has

249
00:18:49,126 --> 00:18:53,472
failed or know when there is an error. And instead

250
00:18:53,526 --> 00:18:57,504
of silently failing. With monitoring setup and alert

251
00:18:57,552 --> 00:19:00,964
setup, you can

252
00:19:01,002 --> 00:19:04,490
easily come in and fix it quite quickly and

253
00:19:05,180 --> 00:19:07,770
fix the system and get it up and running again.

254
00:19:09,740 --> 00:19:13,956
Later on we will discuss some circuit breaking

255
00:19:13,988 --> 00:19:17,704
mechanisms, but basically setting up monitoring

256
00:19:17,752 --> 00:19:21,516
can help, can go a long way. So it

257
00:19:21,538 --> 00:19:25,052
can also help in knowing your

258
00:19:25,106 --> 00:19:28,556
traffic. So when to scale, when to not scale, those kind of

259
00:19:28,578 --> 00:19:31,280
metrics are also key here as well.

260
00:19:31,350 --> 00:19:34,400
So going back tracing,

261
00:19:35,380 --> 00:19:39,600
we can set up logging and we can set up metrics.

262
00:19:40,260 --> 00:19:43,664
Now let's look at version control and zero downtime.

263
00:19:43,712 --> 00:19:47,524
Maybe this is

264
00:19:47,562 --> 00:19:51,504
more straightforward to think when it comes to reliability,

265
00:19:51,632 --> 00:19:55,284
especially in case of zero downtime. How do you ensure

266
00:19:55,332 --> 00:19:59,176
that your services stay up all

267
00:19:59,198 --> 00:20:03,076
the time? So let's

268
00:20:03,108 --> 00:20:06,984
first look at the version control aspect.

269
00:20:07,032 --> 00:20:11,404
So when you are releasing a new version of

270
00:20:11,442 --> 00:20:15,196
your API, how do you do that? So there is a

271
00:20:15,218 --> 00:20:18,140
release strategy called Canary release.

272
00:20:18,820 --> 00:20:22,636
So basically what you can do with an API

273
00:20:22,668 --> 00:20:25,984
gateway is it can direct all of your

274
00:20:26,022 --> 00:20:30,748
traffic to an upstream can. Upstream here represents

275
00:20:30,844 --> 00:20:33,844
all of your back end or your services.

276
00:20:34,042 --> 00:20:37,232
So you have an upstream on version

277
00:20:37,296 --> 00:20:41,284
one and you are trying

278
00:20:41,322 --> 00:20:45,204
to introduce a new version two, but you haven't tested

279
00:20:45,252 --> 00:20:48,804
it with production traffic before, so you want to ensure

280
00:20:48,852 --> 00:20:52,856
that it works perfectly before you

281
00:20:53,038 --> 00:20:58,956
deploy it completely. So you

282
00:20:58,978 --> 00:21:03,756
don't want to have to roll back to the previous version when

283
00:21:03,778 --> 00:21:07,036
something fails, you have to ensure that it will work.

284
00:21:07,218 --> 00:21:10,568
So initially what we will do is we will get

285
00:21:10,594 --> 00:21:14,588
all traffic to our API gateway and it will direct all traffic

286
00:21:14,764 --> 00:21:17,916
to can upstream to the initial version

287
00:21:17,948 --> 00:21:21,384
of our upstream. That is how it will be functioning normally.

288
00:21:21,532 --> 00:21:24,676
And when we have a new version ready, what we

289
00:21:24,698 --> 00:21:28,256
will do is we will direct few traffic,

290
00:21:28,368 --> 00:21:34,344
few of the traffic to the

291
00:21:34,382 --> 00:21:38,136
new upstream. So can API gateway can be configured to do

292
00:21:38,158 --> 00:21:43,592
this dynamically based

293
00:21:43,646 --> 00:21:47,484
on the results from this traffic to the new version. If it is

294
00:21:47,522 --> 00:21:50,888
working fine, you can slowly increase the traffic

295
00:21:50,904 --> 00:21:54,540
to the new version until we have

296
00:21:54,610 --> 00:21:58,060
all the traffic directed to the new version.

297
00:21:58,740 --> 00:22:02,304
So this will ensure that your services stay up

298
00:22:02,422 --> 00:22:05,644
all the time, and it will also ensure

299
00:22:05,692 --> 00:22:09,760
that the new version you have released works

300
00:22:09,830 --> 00:22:13,860
perfectly. And in case something

301
00:22:13,930 --> 00:22:17,956
fails, or in case there are some

302
00:22:17,978 --> 00:22:22,224
issues, you still have your previous upstream in standby,

303
00:22:22,272 --> 00:22:26,312
and you can go back to it quite easily by just changing the

304
00:22:26,446 --> 00:22:28,840
configuration in your API gateway.

305
00:22:30,460 --> 00:22:34,132
Now let's talk about circuit breaking. Circuit breaking

306
00:22:34,276 --> 00:22:37,000
seems like can electrical engineering concept,

307
00:22:37,760 --> 00:22:40,840
but circuit breaking is quite essential

308
00:22:40,920 --> 00:22:44,792
in modern software

309
00:22:44,856 --> 00:22:49,264
architectures. So basically you

310
00:22:49,302 --> 00:22:53,600
have your multiple upstreams. So all these upstreams

311
00:22:55,700 --> 00:22:59,516
does the same thing. So our API gateway acts

312
00:22:59,548 --> 00:23:03,460
as a load balancer

313
00:23:05,080 --> 00:23:10,628
for your upstream. And if

314
00:23:10,714 --> 00:23:14,368
one upstream service is unavailable,

315
00:23:14,464 --> 00:23:18,180
or maybe it is experiencing high latency,

316
00:23:18,600 --> 00:23:22,176
it needs to be cut off. Because if you don't

317
00:23:22,208 --> 00:23:25,876
cut it off, a rook is coming to

318
00:23:25,898 --> 00:23:30,044
the the failed upstream will

319
00:23:30,082 --> 00:23:34,232
be stagnated and it will cause resource

320
00:23:34,296 --> 00:23:38,044
exhaustion and the gateway or the service will

321
00:23:38,082 --> 00:23:40,700
keep trying the retrying the request.

322
00:23:40,780 --> 00:23:44,770
So what, this can cause a chain reaction and it can even

323
00:23:45,540 --> 00:23:49,296
cascade into all of your other upstreams. So your

324
00:23:49,318 --> 00:23:53,396
whole system may

325
00:23:53,418 --> 00:23:57,056
be in the way of in the domino tiles,

326
00:23:57,248 --> 00:23:59,750
so it needs to be cut off.

327
00:24:00,680 --> 00:24:04,070
So your upstream has gone down.

328
00:24:04,700 --> 00:24:09,284
And what the circuit breaking functionality

329
00:24:09,332 --> 00:24:12,570
of an API gateway does is it cuts off

330
00:24:13,100 --> 00:24:17,016
all traffic to your failed

331
00:24:17,048 --> 00:24:20,952
upstream, and it instead routes

332
00:24:21,016 --> 00:24:24,780
all traffic to your fully functioning upstream.

333
00:24:25,360 --> 00:24:28,990
And once the upstream is back,

334
00:24:30,180 --> 00:24:33,424
or once time has

335
00:24:33,462 --> 00:24:37,264
passed, what the API gateway does is it tries to check

336
00:24:37,302 --> 00:24:41,068
the status of the upstream, and if it is working

337
00:24:41,254 --> 00:24:45,140
fine, it can go back to the healthy state

338
00:24:45,210 --> 00:24:48,852
and the traffic can again be sent

339
00:24:48,906 --> 00:24:52,336
to this upstream and it can again be functioning

340
00:24:52,368 --> 00:24:53,460
as normal.

341
00:24:56,620 --> 00:25:00,184
And finally, there is

342
00:25:00,222 --> 00:25:02,660
also this case of reporting status,

343
00:25:02,740 --> 00:25:06,888
or creating

344
00:25:06,984 --> 00:25:10,892
new APIs, or changing APIs. So what happens

345
00:25:10,946 --> 00:25:15,036
when you change the path of your API? How does it

346
00:25:15,058 --> 00:25:18,964
affect users and how can you ensure reliability

347
00:25:19,032 --> 00:25:22,656
in such a case? So when a

348
00:25:22,678 --> 00:25:25,952
client is used to send

349
00:25:26,006 --> 00:25:28,160
requests to one particular path,

350
00:25:31,320 --> 00:25:34,756
and if the path is no longer there,

351
00:25:34,938 --> 00:25:38,900
or if you are trying to change the path for whatever reason,

352
00:25:38,970 --> 00:25:42,870
or maybe the services changed, or maybe things change.

353
00:25:43,240 --> 00:25:47,560
So basically what happens here is your

354
00:25:47,710 --> 00:25:51,690
old path is no longer there, but instead you have a

355
00:25:52,140 --> 00:25:55,876
new path, but the client user don't

356
00:25:55,908 --> 00:25:59,756
know this path directly. You either have to

357
00:25:59,858 --> 00:26:03,404
talk to them before, or provide documentation on this

358
00:26:03,442 --> 00:26:07,356
change, or something that is like

359
00:26:07,378 --> 00:26:10,976
that. But in most cases, this can

360
00:26:10,998 --> 00:26:14,210
be a tedious process to change the client code.

361
00:26:15,380 --> 00:26:19,024
So how do you handle such cases? How do you let

362
00:26:19,062 --> 00:26:22,820
your client know that this is the new API endpoint,

363
00:26:23,720 --> 00:26:27,604
and that is where an API gateway comes in. So in your

364
00:26:27,642 --> 00:26:31,204
normal use case, when you are going to

365
00:26:31,242 --> 00:26:34,776
the old API path, and the API gateway directs all

366
00:26:34,798 --> 00:26:38,696
traffic to your API endpoint, and when

367
00:26:38,718 --> 00:26:42,472
it is no longer there, what you can do is you can change

368
00:26:42,526 --> 00:26:46,720
the configuration of your API gateway to redirect

369
00:26:46,820 --> 00:26:50,652
traffic to this path from this path to your

370
00:26:50,706 --> 00:26:54,796
new path. So every time a

371
00:26:54,818 --> 00:26:58,184
user goes to this particular endpoint,

372
00:26:58,232 --> 00:27:02,416
the API gateway is configured to redirect the user to

373
00:27:02,438 --> 00:27:06,032
the new API. And you can even give

374
00:27:06,086 --> 00:27:09,324
a redirect status

375
00:27:09,372 --> 00:27:12,850
code before redirecting, and you can even send,

376
00:27:13,240 --> 00:27:17,056
let's say, a message saying that, okay, this old API path

377
00:27:17,088 --> 00:27:20,384
is being deprecated and this is the new path.

378
00:27:20,432 --> 00:27:23,556
Please change this and you can get on with

379
00:27:23,578 --> 00:27:26,776
that. But still, it will be backwards compatible as the

380
00:27:26,798 --> 00:27:29,832
users of the old API will still be able

381
00:27:29,886 --> 00:27:34,200
to access the new endpoint without

382
00:27:34,270 --> 00:27:36,410
having to change any of their client code.

383
00:27:38,540 --> 00:27:42,552
So let's wind up this session with a quick summary,

384
00:27:42,616 --> 00:27:47,052
and let's look at the key takeaway takeaways so

385
00:27:47,186 --> 00:27:50,960
we started this discussion by talking about

386
00:27:51,030 --> 00:27:54,624
reliability, and we decided that reliability is more than

387
00:27:54,662 --> 00:27:58,764
just the uptime, and it is also about consistency,

388
00:27:58,892 --> 00:28:02,980
availability, low latency, security and status.

389
00:28:04,920 --> 00:28:08,196
We also looked into API gateways and how

390
00:28:08,218 --> 00:28:12,276
they overcome the issues faced by the

391
00:28:12,298 --> 00:28:15,880
traditional API architectures. We also looked at

392
00:28:15,950 --> 00:28:19,876
how API gateways can help with best practices

393
00:28:20,068 --> 00:28:23,752
for reliability in areas of authentication and security

394
00:28:23,886 --> 00:28:27,240
monitoring and observability, motion control

395
00:28:27,310 --> 00:28:28,750
and zero dam time.

396
00:28:30,480 --> 00:28:34,172
That's it. And if you'd like to learn more, you can

397
00:28:34,226 --> 00:28:37,512
check out the Apache API six documentation,

398
00:28:37,576 --> 00:28:41,180
which is free and open source API gateway

399
00:28:41,920 --> 00:28:45,404
hosted by the Apache Software foundation. And there

400
00:28:45,442 --> 00:28:49,176
are also other API gateways free and open source

401
00:28:49,288 --> 00:28:52,964
available out there. And you can also reach

402
00:28:53,002 --> 00:28:56,388
out to me on Twitter. Here is my Twitter handle if you

403
00:28:56,394 --> 00:29:01,264
have any questions, or I'll also be hanging out in the Discord

404
00:29:01,312 --> 00:29:04,150
channel where you can ask questions.

405
00:29:04,600 --> 00:29:05,748
So thank you,

