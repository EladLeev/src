1
00:00:17,530 --> 00:00:20,750
Hello everyone, my name is Reinaldi and I'm going to be giving the talk

2
00:00:20,820 --> 00:00:23,950
using our own custom graphics library to show them naltics.

3
00:00:24,290 --> 00:00:28,022
So before we begin, I'd like to give a big thank you to Mark

4
00:00:28,076 --> 00:00:32,306
and rest of the Conf 42 team for organizing this amazing conference.

5
00:00:32,498 --> 00:00:35,974
And I'm using to be enjoying learning from every one of the

6
00:00:36,012 --> 00:00:39,686
speakers here. So I hope that you guys can enjoy learning from

7
00:00:39,708 --> 00:00:43,306
every one of the speakers here, as well as to enjoy my particular talk as

8
00:00:43,328 --> 00:00:46,140
well, and take some value out of it for your own needs.

9
00:00:47,070 --> 00:00:50,858
So let's get into it a bit about myself. I'm a

10
00:00:50,864 --> 00:00:54,266
founder and developer advocate, and I'm

11
00:00:54,298 --> 00:00:58,126
a founder essentially of GrEs Studio and I'm a developer advocate in the

12
00:00:58,148 --> 00:01:02,142
tech community. So I've been a speaker in the open source community for

13
00:01:02,196 --> 00:01:05,474
about four years now, and for the past four years

14
00:01:05,512 --> 00:01:09,506
I've been participating in various conferences talking about various issues

15
00:01:09,688 --> 00:01:13,460
and talking about best practices such as

16
00:01:14,150 --> 00:01:16,946
cloud based practices, security practices,

17
00:01:17,138 --> 00:01:20,470
and also just talking in general about

18
00:01:20,540 --> 00:01:24,786
projects that I'm working on, such as programming based projects based in Python

19
00:01:24,898 --> 00:01:28,506
or JavaScript, or more such as that.

20
00:01:28,688 --> 00:01:32,102
I'm a certified AWS solutions architect

21
00:01:32,166 --> 00:01:36,006
and DevOps engineer professional as well as a CCNA,

22
00:01:36,198 --> 00:01:39,542
and my personal field of interest is in penetration

23
00:01:39,606 --> 00:01:43,306
testing, intrusion and other security related best practices.

24
00:01:43,498 --> 00:01:46,542
So if you're interested in talking to me about it,

25
00:01:46,596 --> 00:01:49,966
I'm always happy to basically hear you out and basically have

26
00:01:49,988 --> 00:01:52,350
a good conversation with you about those topics.

27
00:01:53,830 --> 00:01:58,702
On those side I run meetups, those occasional hackathon,

28
00:01:58,846 --> 00:02:02,590
as I enjoy being able to learn from people in the hackathon,

29
00:02:02,670 --> 00:02:06,262
as well as to be able to encourage people to develop

30
00:02:06,316 --> 00:02:10,082
new solutions to solve problems within various

31
00:02:10,146 --> 00:02:13,526
issues regarding the community and in general.

32
00:02:13,628 --> 00:02:16,550
I also am a VR tech enthusiast,

33
00:02:16,970 --> 00:02:21,030
so I really love being able to explore developments

34
00:02:21,110 --> 00:02:23,482
in new VR applications and such.

35
00:02:23,616 --> 00:02:27,254
So if you are also an advocate

36
00:02:27,302 --> 00:02:30,778
of VR technology, and if you really enjoy

37
00:02:30,864 --> 00:02:34,254
developing applications as well within VR and such,

38
00:02:34,372 --> 00:02:37,454
then definitely chat me up. I'm really happy to talk about

39
00:02:37,492 --> 00:02:41,294
developments, my own developments, and also in general, what developments there

40
00:02:41,332 --> 00:02:45,166
currently are in the community and how we can best proceed with further

41
00:02:45,198 --> 00:02:49,442
VR technology. So first off,

42
00:02:49,496 --> 00:02:52,974
we're going to start off with talking about what to aim for in creating graphics

43
00:02:53,022 --> 00:02:56,450
libraries. So first off, clear,

44
00:02:56,520 --> 00:03:00,402
concise visuals is a must. When we create graphics libraries,

45
00:03:00,466 --> 00:03:03,702
we need to ensure that the libraries we have can portray clear

46
00:03:03,756 --> 00:03:07,126
message. People should be able to interpret what we are

47
00:03:07,148 --> 00:03:10,506
writing easily inside those libraries. People need

48
00:03:10,528 --> 00:03:13,670
to be able to see the graphics libraries,

49
00:03:13,830 --> 00:03:17,242
the graphics that are portrayed from these libraries and just think, oh,

50
00:03:17,296 --> 00:03:21,242
right, it's going to portray this particular threshold amount,

51
00:03:21,376 --> 00:03:24,586
or it goes from x to Y and it's

52
00:03:24,618 --> 00:03:27,998
trying to portray this particular thing and we

53
00:03:28,004 --> 00:03:31,914
can see this particular pattern. So people need to be able to interpret

54
00:03:31,962 --> 00:03:35,586
your graphics libraries very well. So you need to keep that in

55
00:03:35,608 --> 00:03:38,850
mind when you create graphics libraries. Second off,

56
00:03:38,920 --> 00:03:42,638
provide novel elements. So when I say novel elements,

57
00:03:42,734 --> 00:03:46,370
I mean you need to put a distinguishing factor between you

58
00:03:46,440 --> 00:03:50,086
and the other graphics libraries. So you need to

59
00:03:50,108 --> 00:03:53,926
be able to have that. Why? Why should I use

60
00:03:53,948 --> 00:03:57,842
your graphic library in particular compared to other graphics libraries?

61
00:03:57,986 --> 00:04:01,766
What benefit do you have? For example, what benefit

62
00:04:01,798 --> 00:04:04,454
do you have over the standard canvas library?

63
00:04:04,582 --> 00:04:08,070
So it's all something that you need to take into consideration

64
00:04:08,150 --> 00:04:12,238
while you're making those judgments. And essentially, you need to

65
00:04:12,244 --> 00:04:15,310
have that why factor, and you need to also ask yourself,

66
00:04:15,460 --> 00:04:19,054
why do you make that particular library? Can you

67
00:04:19,092 --> 00:04:21,710
already actually have that libraries?

68
00:04:22,210 --> 00:04:25,970
Can you already actually do what you need to do from other

69
00:04:26,120 --> 00:04:29,714
libraries, or are you introducing something new that is

70
00:04:29,752 --> 00:04:33,170
not yet available in other libraries? Third,

71
00:04:33,320 --> 00:04:36,598
follow the errors guideline. And I'm using to be talking in depth about this in

72
00:04:36,604 --> 00:04:38,070
the next couple of slides.

73
00:04:39,930 --> 00:04:43,526
So before we go on, I need to stress that

74
00:04:43,548 --> 00:04:46,230
an accustomed library doesn't mean no dependencies.

75
00:04:46,730 --> 00:04:50,118
So when I say we're going to develop this from scratch,

76
00:04:50,214 --> 00:04:53,622
I don't mean that we will exclude other graphics

77
00:04:53,686 --> 00:04:57,770
libraries because reusability is

78
00:04:57,840 --> 00:05:01,494
a very important part of software development. If we actually have

79
00:05:01,552 --> 00:05:05,338
existing code that can actually help us in our development,

80
00:05:05,434 --> 00:05:09,722
why not we use that? Why got we use already existing libraries

81
00:05:09,786 --> 00:05:13,570
to also help us in developing new libraries. So some

82
00:05:13,640 --> 00:05:16,734
examples of this is chart js,

83
00:05:16,862 --> 00:05:20,478
canvas js, two js. So even if you're developing

84
00:05:20,494 --> 00:05:22,740
a new library, it doesn't mean that you can't use them.

85
00:05:25,670 --> 00:05:29,634
So the heirs guideline, it's a personal guideline which I established

86
00:05:29,682 --> 00:05:33,394
myself. So first off, you need to decide

87
00:05:33,442 --> 00:05:37,094
what the aim is. So when I talk about aim, I'm talking

88
00:05:37,132 --> 00:05:40,906
about why you have that library. What are you trying to accomplish with

89
00:05:40,928 --> 00:05:44,070
that library? So you need to have a clear aim,

90
00:05:44,150 --> 00:05:47,834
such as why do you need

91
00:05:47,872 --> 00:05:51,806
a new library in place, essentially? And what problem are

92
00:05:51,828 --> 00:05:55,930
you trying to solve with those library? Are you trying to visualize temperature

93
00:05:56,010 --> 00:05:59,486
data? Are you trying to visualize something else? It all

94
00:05:59,508 --> 00:06:02,000
depends on you information.

95
00:06:03,650 --> 00:06:07,166
What information do you want to display in the graph?

96
00:06:07,358 --> 00:06:10,526
You need to think about the types of information that you can display

97
00:06:10,558 --> 00:06:13,998
because each type of information can have different thresholds

98
00:06:14,094 --> 00:06:18,374
and different types of measurements. That you need to put in place. For example,

99
00:06:18,572 --> 00:06:22,518
say you will want to visualize temperature data or

100
00:06:22,684 --> 00:06:26,134
particle matter data, or the number of

101
00:06:26,252 --> 00:06:32,070
HTTP error responses. It all have very different graphical

102
00:06:32,150 --> 00:06:35,530
implications and essentially you need to consider those

103
00:06:35,600 --> 00:06:39,258
while you're going along, because every type of information

104
00:06:39,344 --> 00:06:42,990
have different implications on what it means for your particular

105
00:06:43,060 --> 00:06:46,766
use for making new graphics library. So you need to consider this while

106
00:06:46,788 --> 00:06:49,870
you go along. Resilience.

107
00:06:51,250 --> 00:06:55,086
Now, what comes to mind when resilience

108
00:06:55,118 --> 00:06:58,286
is mentioned in this particular instance,

109
00:06:58,398 --> 00:07:03,170
resilience is the adaptability towards various

110
00:07:03,830 --> 00:07:07,554
threshold stretches that may be encountered by a graphics

111
00:07:07,602 --> 00:07:10,280
library. Say for example,

112
00:07:11,290 --> 00:07:14,920
you have temperature data and in your particular

113
00:07:15,530 --> 00:07:18,874
city temperature data may only stretch between 20

114
00:07:18,912 --> 00:07:22,454
and 30, but suddenly temperature

115
00:07:22,502 --> 00:07:26,234
may jump up to 100. How will you visualize that?

116
00:07:26,432 --> 00:07:29,994
Will you those to actually put in

117
00:07:30,032 --> 00:07:33,966
a zero to 100 on a scale and actually have that to 20 to 30

118
00:07:34,068 --> 00:07:37,502
on a flat line? Or can you actually

119
00:07:37,556 --> 00:07:40,750
make those graphics library adaptable somehow to that particular

120
00:07:40,820 --> 00:07:44,482
instance? And that's what I'm going to be talking about as well later on

121
00:07:44,616 --> 00:07:47,982
and showing how you can make the graphics library adaptable

122
00:07:48,046 --> 00:07:52,690
towards changes in data such that structure.

123
00:07:53,350 --> 00:07:57,522
Structure, essentially in this kind of scenario means how will

124
00:07:57,576 --> 00:08:01,398
you structure your libraries? What kind of structure do you

125
00:08:01,404 --> 00:08:05,126
want your data to have? Do you want it to display a

126
00:08:05,148 --> 00:08:09,074
particular bar graph? Do you want it to display line chart?

127
00:08:09,122 --> 00:08:13,114
So essentially, how do you want to structure your data to

128
00:08:13,312 --> 00:08:16,586
an extent to make the data clear, to be able to be

129
00:08:16,608 --> 00:08:20,106
interpreted by people. So this is another very important factor that

130
00:08:20,128 --> 00:08:22,830
you need to consider while creating graphics libraries.

131
00:08:25,410 --> 00:08:28,654
All right, well, without further ado, we're just going to jump into the use

132
00:08:28,692 --> 00:08:32,586
case directly. So I'm going to be showing a bit about how I implemented

133
00:08:32,618 --> 00:08:35,666
my own library directly for my own use case.

134
00:08:35,768 --> 00:08:39,486
Now, to give you a bit of context, in this particular context, I'm implementing

135
00:08:39,518 --> 00:08:43,682
it for being able to record data based

136
00:08:43,736 --> 00:08:47,858
on data that I've collected from my sensors. So essentially

137
00:08:47,954 --> 00:08:52,230
how this works is that the data that I've collected

138
00:08:52,570 --> 00:08:56,438
will be sent from my device to web

139
00:08:56,524 --> 00:08:59,638
API cloud platform called Thinkspeak,

140
00:08:59,814 --> 00:09:03,306
which is then in turn sends the data

141
00:09:03,408 --> 00:09:07,386
to my visualization on

142
00:09:07,408 --> 00:09:11,102
my website. And that visualization has

143
00:09:11,156 --> 00:09:15,806
this custom graphics library implemented. So as

144
00:09:15,828 --> 00:09:19,246
I said before as well, dependencies are definitely okay.

145
00:09:19,428 --> 00:09:22,862
You need to strive to be able to use

146
00:09:22,996 --> 00:09:26,370
those kinds of implementations in order to make your life easier.

147
00:09:27,430 --> 00:09:31,054
So as you can see over here, those dependencies I particularly

148
00:09:31,102 --> 00:09:34,766
use are jquery 1.1 as well as

149
00:09:34,888 --> 00:09:36,790
canvas graphics library.

150
00:09:39,290 --> 00:09:43,878
Next up, you need to plan out your functionality so

151
00:09:44,044 --> 00:09:47,618
in my own personal use case, I have four steps,

152
00:09:47,714 --> 00:09:51,606
and this is how you plan out functionality for a graphics library which aims

153
00:09:51,638 --> 00:09:55,210
to retrieve HTTP requests as well from those server.

154
00:09:55,630 --> 00:09:59,910
So start off with you need first initialize the variables.

155
00:10:00,070 --> 00:10:03,486
You need to first initialize stuff such as what

156
00:10:03,508 --> 00:10:06,734
is the step size that you want to make in your graphs? What is

157
00:10:06,772 --> 00:10:10,446
your x minimum and x maximum, as well as

158
00:10:10,468 --> 00:10:14,466
the y minimum and y maximum. How do you want to scale your

159
00:10:14,488 --> 00:10:16,980
data essentially to be able to do this?

160
00:10:19,190 --> 00:10:22,574
Next up, define the web based functions necessary

161
00:10:22,622 --> 00:10:25,874
for the functionality. So these are

162
00:10:25,912 --> 00:10:30,230
examples of HTTP and Ajax requests. And essentially

163
00:10:30,650 --> 00:10:34,326
what you want to do is you want to be able to define in

164
00:10:34,348 --> 00:10:38,686
such a way that these functions are ready for you to use in implementation,

165
00:10:38,818 --> 00:10:42,186
and you can just call them and basically have them used as you

166
00:10:42,208 --> 00:10:42,940
go along.

167
00:10:44,750 --> 00:10:47,530
Define a core functions for the graphics library.

168
00:10:48,270 --> 00:10:51,370
Now this is where you start implementing the core functions,

169
00:10:51,710 --> 00:10:54,686
and I'm going to be showing you a bit about how to do it in

170
00:10:54,708 --> 00:10:57,998
the next few slides as well. But essentially you need to be

171
00:10:58,004 --> 00:11:02,094
able to show how to initialize the graphics that's going to be

172
00:11:02,212 --> 00:11:05,874
made on the site and other core features of

173
00:11:05,912 --> 00:11:10,750
the graphics as well that you use, and finally execute,

174
00:11:10,910 --> 00:11:14,606
put into motion, draw it on your website, start putting it into motion,

175
00:11:14,638 --> 00:11:18,534
and start retrieving data and such and start basically

176
00:11:18,732 --> 00:11:22,246
putting data into motion and start the whole visualization in

177
00:11:22,268 --> 00:11:26,406
motion. All right,

178
00:11:26,508 --> 00:11:29,846
the first step of the whole process, initialize variables.

179
00:11:30,038 --> 00:11:32,906
So as I mentioned, as you can see over here,

180
00:11:33,008 --> 00:11:36,540
we're initializing some pretty

181
00:11:37,950 --> 00:11:41,434
straightforward stuff, such as init. In this

182
00:11:41,472 --> 00:11:44,670
case, init simply is a state.

183
00:11:44,820 --> 00:11:48,526
So state is essentially a kind of a way to be

184
00:11:48,548 --> 00:11:52,830
able to initialize what particular element,

185
00:11:53,330 --> 00:11:57,074
if the graphics library is already drawn or not, based on the data that is

186
00:11:57,112 --> 00:12:00,558
received, and Ajax.

187
00:12:00,654 --> 00:12:04,766
In this case, we just declare it to be able to get XML

188
00:12:04,798 --> 00:12:08,494
HTTP request object. And as you can see for Ymax

189
00:12:08,542 --> 00:12:12,054
ymin y step, we have eight different values. This is because we have

190
00:12:12,092 --> 00:12:16,226
eight different kinds of data that we are obtaining and eight different graphs

191
00:12:16,258 --> 00:12:19,890
we want to draw. That's why we're specifying

192
00:12:20,050 --> 00:12:23,646
eight different values based on the particular maximum

193
00:12:23,698 --> 00:12:27,818
minimums that will most likely be associated with each particular

194
00:12:27,984 --> 00:12:29,210
type of graph.

195
00:12:30,930 --> 00:12:34,826
And we define a few more stuff, such as the data average

196
00:12:34,858 --> 00:12:38,462
period and of course also the sending data

197
00:12:38,516 --> 00:12:42,078
period, which is essentially the period of data

198
00:12:42,244 --> 00:12:46,098
that will be sent to thinkspeak, for example, from the

199
00:12:46,184 --> 00:12:49,998
device and specifying a time zone.

200
00:12:50,174 --> 00:12:53,586
We specify also a sensor data

201
00:12:53,688 --> 00:12:57,250
to also check if the sensor data is in or not and also

202
00:12:57,320 --> 00:13:00,786
specify a URL target. In this case it's the Thinkspeak

203
00:13:00,818 --> 00:13:04,118
website. And as you can see I specify my own channel and I'm going to

204
00:13:04,124 --> 00:13:07,560
show you how to be able to use this in your code later.

205
00:13:07,950 --> 00:13:11,738
And the other functions will be

206
00:13:11,824 --> 00:13:15,290
talked about later as we go along these implementation.

207
00:13:16,510 --> 00:13:20,762
So start off with, we start off with the old, good old getter,

208
00:13:20,906 --> 00:13:25,150
and that goes with the getaxml HTTP request object

209
00:13:25,220 --> 00:13:28,846
function should be really self explanatory if

210
00:13:28,868 --> 00:13:33,994
you're used to using Ajax in JavaScript, but essentially

211
00:13:34,122 --> 00:13:37,170
we're making an if else clause here.

212
00:13:37,240 --> 00:13:41,460
So we want to be able to recognize if

213
00:13:41,990 --> 00:13:45,570
the browser that is being used is an Internet Explorer

214
00:13:46,230 --> 00:13:49,742
browser or if it's another browser. So for Explorer

215
00:13:49,806 --> 00:13:53,174
and especially for the older versions, we need to

216
00:13:53,212 --> 00:13:57,270
actually put in an activex object for the Ajax request.

217
00:13:57,930 --> 00:14:01,654
If not, then we can assume that it's probably a new browser or new

218
00:14:01,692 --> 00:14:05,274
version of engine Explorer and we can basically call

219
00:14:05,392 --> 00:14:08,726
Ajax and instead take an XmL HTTP request.

220
00:14:08,838 --> 00:14:12,510
So essentially it works to serve both cases.

221
00:14:14,850 --> 00:14:18,174
So now we start off with having a function

222
00:14:18,372 --> 00:14:20,350
to initialize the graphics.

223
00:14:20,770 --> 00:14:24,002
So as you can see over here, we start

224
00:14:24,056 --> 00:14:28,286
off with needing to draw basic graphic drawing

225
00:14:28,318 --> 00:14:32,178
background. So we draw the x and y axis line,

226
00:14:32,264 --> 00:14:36,034
cross line and the y scale text with this particular start

227
00:14:36,072 --> 00:14:39,830
to the function. So that's why we have a for loop looping over eight times.

228
00:14:39,980 --> 00:14:44,146
So as you can see over there we have capturing variables

229
00:14:44,178 --> 00:14:48,134
of like x length, y length, and the

230
00:14:48,172 --> 00:14:51,446
increments that we want to take as part of the step sizes.

231
00:14:51,558 --> 00:14:54,682
So as you can see, we start also calling

232
00:14:54,736 --> 00:14:58,326
those canvas library that we already managed

233
00:14:58,358 --> 00:15:01,662
to import into the particular project in order

234
00:15:01,716 --> 00:15:05,278
to start converting string first and

235
00:15:05,364 --> 00:15:09,086
eventually start getting the element by id, to be

236
00:15:09,108 --> 00:15:12,926
able to get the particular graph by the id, and we

237
00:15:12,948 --> 00:15:16,190
start to use it to draw further functions.

238
00:15:16,270 --> 00:15:19,794
If you're already used to using the canvas library, some of these will be pretty

239
00:15:19,832 --> 00:15:22,980
straightforward, but I'm going to be just talking about these in general.

240
00:15:23,910 --> 00:15:27,398
So most people here can probably

241
00:15:27,484 --> 00:15:31,554
follow. So just some functions such as got context

242
00:15:31,602 --> 00:15:35,362
to get in clear rectangle,

243
00:15:35,506 --> 00:15:39,494
to be able to basically initialize

244
00:15:39,542 --> 00:15:43,370
the canvas width and canvas height based on our specified parameters,

245
00:15:44,190 --> 00:15:48,026
and some other customization stuff such

246
00:15:48,048 --> 00:15:51,630
as declaring the line width and the stroke style.

247
00:15:51,970 --> 00:15:55,646
So that's mainly for that particular

248
00:15:55,828 --> 00:15:59,722
part of the code. And essentially we have another for loop

249
00:15:59,866 --> 00:16:03,434
and this time we want to be able to draw the crossline background.

250
00:16:03,562 --> 00:16:07,582
So for this we start off

251
00:16:07,636 --> 00:16:11,714
by calling another for loop and basically putting it

252
00:16:11,752 --> 00:16:15,522
to the extent of until it reaches basically

253
00:16:15,576 --> 00:16:19,574
the step size that we put in place. So this

254
00:16:19,612 --> 00:16:23,014
will mean that it starts off with the y length and plus 20.

255
00:16:23,132 --> 00:16:26,866
So it'll continue on decreasing by the y increment value until it reaches

256
00:16:26,898 --> 00:16:31,114
ten. And this will mean that it begins the path and it'll continue moving

257
00:16:31,232 --> 00:16:34,330
towards the particular specified eye.

258
00:16:35,070 --> 00:16:39,446
To be able to draw the crossline in the background and the horizontal lines

259
00:16:39,478 --> 00:16:43,966
that are actually necessary. Same thing with the below

260
00:16:44,148 --> 00:16:47,822
feature. We also are drawing vertical lines this time,

261
00:16:47,956 --> 00:16:51,482
and we only draw the left and right most lines.

262
00:16:51,626 --> 00:16:55,534
And probably it's not making as much sense right

263
00:16:55,572 --> 00:16:58,642
now, but I'm going to be showing the visualization at the end,

264
00:16:58,696 --> 00:17:01,858
so it definitely will make much more sense by then.

265
00:17:02,024 --> 00:17:06,120
And for drawing the vertical line, as you can see at the bottom most code,

266
00:17:06,730 --> 00:17:10,534
we're going with continuing to begin the

267
00:17:10,572 --> 00:17:13,410
path and just moving the path,

268
00:17:13,570 --> 00:17:16,838
creating a line to the path and declaring more of the fonts, such as

269
00:17:16,924 --> 00:17:19,740
stroke, move to line to, and such.

270
00:17:23,150 --> 00:17:26,598
Continuing with that. As you can see, we have continuing

271
00:17:26,694 --> 00:17:29,478
modifications towards the font,

272
00:17:29,574 --> 00:17:32,858
and we start off by drawing

273
00:17:32,874 --> 00:17:36,798
an axis line. So this is where we draw the access line. We start

274
00:17:36,964 --> 00:17:41,198
declaring a line width and stroke style, and again

275
00:17:41,364 --> 00:17:44,718
begin path. So this time it's for the axis line compared

276
00:17:44,734 --> 00:17:48,514
to the other ones. And afterwards we

277
00:17:48,552 --> 00:17:51,954
then draw the text for the y scale. So we

278
00:17:51,992 --> 00:17:55,338
start off by declaring the normal font standards,

279
00:17:55,374 --> 00:17:58,274
such as declaring fonts first, fill style,

280
00:17:58,322 --> 00:18:02,578
fill a text, align, and basically afterwards

281
00:18:02,674 --> 00:18:06,294
just filling the text. And this is a particularly crucial part

282
00:18:06,332 --> 00:18:10,694
of the text. So as you can see, we have a wide

283
00:18:10,742 --> 00:18:13,866
difference variable there. So why do

284
00:18:13,888 --> 00:18:17,242
we need a wide diff variable? We need it

285
00:18:17,296 --> 00:18:21,514
for that adaptability purpose, as I mentioned before. So we're

286
00:18:21,562 --> 00:18:25,310
calculating the difference between y max and y diff

287
00:18:25,380 --> 00:18:29,866
in order to calculate the difference between the two. So essentially

288
00:18:30,058 --> 00:18:33,300
what we're doing here is we're adapting the

289
00:18:35,670 --> 00:18:39,070
particular text, the particular ranges

290
00:18:39,230 --> 00:18:42,238
by the new maximum and the new minimum.

291
00:18:42,334 --> 00:18:46,142
So basically we're scaling them accordingly.

292
00:18:46,286 --> 00:18:50,134
And that's what I was saying about adaptability. We want

293
00:18:50,172 --> 00:18:53,686
people to be able to see custom graphics library in such a

294
00:18:53,708 --> 00:18:57,618
way that they do not omit

295
00:18:57,714 --> 00:19:00,726
data, such as if we have a 100 when we have only a scale from

296
00:19:00,748 --> 00:19:04,422
2030, so it'll scale the graphics

297
00:19:04,486 --> 00:19:08,070
accordingly and it'll put new measurements as required.

298
00:19:08,230 --> 00:19:11,702
And you don't have to worry about the graphics

299
00:19:11,766 --> 00:19:15,646
library going over the limit either, or actually kind

300
00:19:15,668 --> 00:19:18,974
of like being stuck with 100. Like only one

301
00:19:19,012 --> 00:19:22,094
point has 100, while all the other data has a 20 and a 30.

302
00:19:22,212 --> 00:19:26,210
Like sure, the data will be visualized, but because we put it on a period,

303
00:19:26,630 --> 00:19:30,878
data will eventually keep moving leftwards and eventually disappear,

304
00:19:30,974 --> 00:19:35,022
and afterwards it will scale back to 20 and 30 again. So outliers

305
00:19:35,086 --> 00:19:38,806
will still be displayed for a short moment, but in the end it'll be

306
00:19:38,828 --> 00:19:42,422
regulated to the point where we will go back to actually

307
00:19:42,476 --> 00:19:46,406
just having the standard library and actually going back

308
00:19:46,428 --> 00:19:50,358
to the standard measurement. So as long as we can

309
00:19:50,524 --> 00:19:53,658
still have a period where it captures the data, we're still able to

310
00:19:53,664 --> 00:19:57,082
represent the data correctly, but also still are

311
00:19:57,136 --> 00:20:00,074
able to make it adaptable to the point where we don't have to worry about

312
00:20:00,112 --> 00:20:03,614
that kind of data using neglected and not being

313
00:20:03,652 --> 00:20:07,118
taken into account of individualizations. Because who knows, some of

314
00:20:07,124 --> 00:20:11,226
those data may be necessary as well for if you need further

315
00:20:11,258 --> 00:20:14,674
data analysis to be done. And as you can see over here,

316
00:20:14,712 --> 00:20:18,194
that's why we have a y max minus y div for the fill

317
00:20:18,232 --> 00:20:20,340
text function and such.

318
00:20:23,270 --> 00:20:26,950
So some bored functions to add as part of the libraries.

319
00:20:27,450 --> 00:20:30,774
So some of these functions, as you can see over here,

320
00:20:30,972 --> 00:20:34,040
include stuff like getobserver data,

321
00:20:34,890 --> 00:20:38,566
got web server data and get web server all data.

322
00:20:38,668 --> 00:20:41,834
So getwebserver data in those

323
00:20:41,872 --> 00:20:45,226
case we are using that to be able to retrieve the data from the

324
00:20:45,248 --> 00:20:49,194
source URL through Ajax. Same as get web server for all data as

325
00:20:49,232 --> 00:20:52,686
well. Essentially got web server all data has

326
00:20:52,708 --> 00:20:56,014
a specified period of retrieving the web

327
00:20:56,052 --> 00:20:59,706
server data though gets web server data, is just opening a connection

328
00:20:59,738 --> 00:21:03,566
and being able to get the data in general and send that Ajax

329
00:21:03,598 --> 00:21:07,058
request. So as you can see,

330
00:21:07,144 --> 00:21:10,606
we're using our URL target variable here and we are opening

331
00:21:10,638 --> 00:21:14,706
it based on particular specified string on the

332
00:21:14,888 --> 00:21:18,706
URL that we have specified. So we're opening

333
00:21:18,738 --> 00:21:22,710
it and we're pushing a get request on either method.

334
00:21:23,210 --> 00:21:26,706
And as you can see, that's how more or less like both methods

335
00:21:26,738 --> 00:21:30,298
will work. And afterwards we then

336
00:21:30,384 --> 00:21:33,994
have a display all data function. So this

337
00:21:34,032 --> 00:21:37,258
will display data in those form of rows and that's for another

338
00:21:37,344 --> 00:21:40,986
segment of the website. So we can display the

339
00:21:41,008 --> 00:21:43,934
data in the form of graph, but you can also display it in the form

340
00:21:43,972 --> 00:21:46,398
of rows as well, should we require it.

341
00:21:46,564 --> 00:21:49,962
So for this one we are basically deleting

342
00:21:50,026 --> 00:21:53,166
the previous rows if there are any rows as

343
00:21:53,188 --> 00:21:56,626
well, which is why we have the delete row function as

344
00:21:56,648 --> 00:22:00,050
you can see over there. But before

345
00:22:00,120 --> 00:22:03,874
that though, we of course declare table length first and

346
00:22:03,912 --> 00:22:07,990
just go with the roast length variable that we declare.

347
00:22:09,930 --> 00:22:13,174
And further towards the bottom,

348
00:22:13,372 --> 00:22:17,646
we then declare variable as sensor

349
00:22:17,698 --> 00:22:21,734
data. And we want to parse the data that is obtained

350
00:22:21,782 --> 00:22:25,146
from those local storage. And that's why

351
00:22:25,168 --> 00:22:29,082
we have local storage, sensor data

352
00:22:29,136 --> 00:22:33,034
storage. And essentially if the sensor data is null,

353
00:22:33,082 --> 00:22:37,038
it'll just return null. But afterwards we

354
00:22:37,044 --> 00:22:40,490
just declare more variables as well, like the max length,

355
00:22:40,570 --> 00:22:44,494
the tail, body and row

356
00:22:44,542 --> 00:22:48,098
that is associated with the particular

357
00:22:48,184 --> 00:22:48,820
data.

358
00:22:51,350 --> 00:22:55,070
And continuing on from those, we then continue

359
00:22:55,160 --> 00:22:59,010
on to basically declare

360
00:22:59,090 --> 00:23:02,934
more of the variables in terms of

361
00:23:02,972 --> 00:23:06,694
the, to establish the rows and the table. So as

362
00:23:06,732 --> 00:23:11,042
you can see, we have declared

363
00:23:11,106 --> 00:23:14,602
s as kind of like the container for taking

364
00:23:14,656 --> 00:23:18,006
in the variables. And as you can see, we have different fields.

365
00:23:18,038 --> 00:23:22,038
We have field one, field two up to field eight, and that's where

366
00:23:22,064 --> 00:23:25,486
we basically start to take in the sensor data and portray it on the

367
00:23:25,508 --> 00:23:29,374
table. So to do this, we then get the element by

368
00:23:29,412 --> 00:23:33,166
id again, and we basically take up

369
00:23:33,188 --> 00:23:37,598
the row and we insert it as a row and basically

370
00:23:37,684 --> 00:23:41,570
it's inserted to the table that way, essentially towards

371
00:23:41,640 --> 00:23:45,074
the bottom. You then start comparing those

372
00:23:45,112 --> 00:23:48,534
data for each field data value for the

373
00:23:48,572 --> 00:23:52,166
current data row to the field maximum and

374
00:23:52,268 --> 00:23:56,294
minimum y values. As you can see, it's quite a long

375
00:23:56,332 --> 00:24:00,202
line of code, so it basically is just

376
00:24:00,336 --> 00:24:03,514
a list of while loops. So essentially it

377
00:24:03,552 --> 00:24:07,658
first checks out if basically

378
00:24:07,824 --> 00:24:11,030
the value is more than those maximum y value or less than a

379
00:24:11,040 --> 00:24:15,098
minimum y value. So it'll update the appropriate maximum

380
00:24:15,114 --> 00:24:18,574
and minimum y value accordingly based on fields. And as

381
00:24:18,612 --> 00:24:23,586
I mentioned before, this is part of the adaptability feature that the

382
00:24:23,608 --> 00:24:27,134
graphics library aims to have, so that you're able to adapt

383
00:24:27,182 --> 00:24:30,866
your particular library accordingly. And as

384
00:24:30,888 --> 00:24:34,740
you can see over here, we start to do it by

385
00:24:35,050 --> 00:24:38,838
doing the while loops. After checking that the

386
00:24:38,844 --> 00:24:42,022
sensor data does go above the y max or is

387
00:24:42,076 --> 00:24:45,830
smaller than the y min, and afterwards adjust the y min

388
00:24:45,900 --> 00:24:49,062
to decrease by a step if it's

389
00:24:49,126 --> 00:24:53,178
less than a minimum, or increase by a step if it's by a

390
00:24:53,184 --> 00:24:54,090
maximum.

391
00:24:59,610 --> 00:25:02,966
All right, and we then move on to making a

392
00:25:02,988 --> 00:25:06,646
function to draw. So now this is where it starts

393
00:25:06,678 --> 00:25:10,394
to get pretty interesting as well. This is where we start to put

394
00:25:10,432 --> 00:25:14,006
in a those drawing feature into the graphics library.

395
00:25:14,118 --> 00:25:17,822
So as you can see here, we define a function called draw line

396
00:25:17,876 --> 00:25:21,854
graphics. And what we do over here is we

397
00:25:21,892 --> 00:25:25,246
first initialize basically

398
00:25:25,348 --> 00:25:29,250
based on the graphics libraries, the graphic in it function

399
00:25:29,320 --> 00:25:33,442
that we already created before.

400
00:25:33,576 --> 00:25:37,250
So after this we then are able

401
00:25:37,320 --> 00:25:40,546
to set sensor data to parse from local storage

402
00:25:40,578 --> 00:25:44,440
again and set some more variables, such as

403
00:25:46,570 --> 00:25:50,482
the data sensor length or the x increments

404
00:25:50,626 --> 00:25:54,662
values and the current data period x length, y length.

405
00:25:54,726 --> 00:25:59,100
So these are all stuff that we will use as variables within

406
00:25:59,470 --> 00:26:03,366
the particular, within querying

407
00:26:03,398 --> 00:26:06,758
the data to be able to be received as part of the

408
00:26:06,784 --> 00:26:10,110
tables and the other implementations on the website. And also

409
00:26:10,180 --> 00:26:13,422
we also collect values such as previous y

410
00:26:13,476 --> 00:26:16,622
values and some values. And I'm going to be talking

411
00:26:16,676 --> 00:26:20,242
more about that a bit more. Well, when we see

412
00:26:20,296 --> 00:26:23,426
that code being used, variables being used in

413
00:26:23,448 --> 00:26:26,834
the code. So we then go on

414
00:26:26,872 --> 00:26:30,194
to declare for loop here. We go

415
00:26:30,232 --> 00:26:33,490
on to calculate the timestamps essentially

416
00:26:34,070 --> 00:26:37,334
at the created at field in the sensor data

417
00:26:37,532 --> 00:26:41,030
and convert it to minutes and divide by data

418
00:26:41,100 --> 00:26:44,346
average period. And then we finally round it. And you can see this by the

419
00:26:44,368 --> 00:26:48,202
formula that is currently there from the current

420
00:26:48,256 --> 00:26:51,962
data period. So we're essentially repeating this

421
00:26:52,096 --> 00:26:55,566
until the x pause reaches to bigger than or equal to

422
00:26:55,588 --> 00:26:59,054
30, because 30 was the value we specified as

423
00:26:59,092 --> 00:27:02,494
those particular stopping point in the chart value

424
00:27:02,612 --> 00:27:06,446
in terms of those length that we want

425
00:27:06,468 --> 00:27:11,246
it to be. And afterwards

426
00:27:11,358 --> 00:27:15,026
we then loop over all those eight data and

427
00:27:15,208 --> 00:27:17,730
we then start to sum it all up.

428
00:27:17,800 --> 00:27:20,838
So essentially for this one,

429
00:27:21,004 --> 00:27:25,030
we then round up the timestamp period for the data

430
00:27:25,180 --> 00:27:28,790
which is still within a particular period of time. And we basically

431
00:27:28,860 --> 00:27:31,766
sum the value for every particular field.

432
00:27:31,868 --> 00:27:35,546
And afterwards we just kind of like raise the counter by one every time

433
00:27:35,568 --> 00:27:39,254
we finish that. So we're

434
00:27:39,302 --> 00:27:42,986
doing this to be able to average then those

435
00:27:43,008 --> 00:27:46,906
field sum values for the same time period, to be able to then portray the

436
00:27:46,928 --> 00:27:50,334
data as best as we can based on the averages that are done

437
00:27:50,372 --> 00:27:54,138
based on the sums of data. And this will help us to portray

438
00:27:54,154 --> 00:27:58,070
the data in a much more efficient way. And averaging

439
00:27:58,090 --> 00:28:01,666
those data helps us to keep track of the data better and be

440
00:28:01,688 --> 00:28:05,634
able to further develop better analytics based

441
00:28:05,672 --> 00:28:08,926
on the averaging data. And this especially helps

442
00:28:08,958 --> 00:28:12,440
us to steer clear of potential outliers and such.

443
00:28:14,730 --> 00:28:18,454
Continuing on, we continue on with another for

444
00:28:18,492 --> 00:28:22,360
loop for this function. So as you can see,

445
00:28:22,830 --> 00:28:28,266
for this particular one, we go on to basically

446
00:28:28,368 --> 00:28:32,838
average the field sum values as mentioned before continuing

447
00:28:32,854 --> 00:28:36,526
on from the last slide. And eventually we

448
00:28:36,548 --> 00:28:41,326
are then able to set the

449
00:28:41,428 --> 00:28:45,178
individual sum values and the individual sum

450
00:28:45,194 --> 00:28:49,106
values are represented by I as the index. So we have that formula in

451
00:28:49,128 --> 00:28:53,106
place to be able to take some values as those relative position from the

452
00:28:53,128 --> 00:28:57,086
bottom to plot drawing, and we added

453
00:28:57,118 --> 00:29:00,680
with 30 minus y towards

454
00:29:01,370 --> 00:29:02,680
the bottom, basically.

455
00:29:06,010 --> 00:29:09,880
Furthermore, from there we then continue on by

456
00:29:10,330 --> 00:29:14,054
using canvas Ctx and canvas Id again, and also

457
00:29:14,092 --> 00:29:17,642
declaring day, hour, minute, current time period and

458
00:29:17,776 --> 00:29:21,082
closest hour xpause values variables in order

459
00:29:21,136 --> 00:29:25,082
to further loop through all the eight graphics in order

460
00:29:25,136 --> 00:29:27,994
to start drawing the necessary graphics.

461
00:29:28,122 --> 00:29:31,934
So this is where we start drawing those tiny circle, for example on

462
00:29:31,972 --> 00:29:35,438
the spot point. And basically this is where

463
00:29:35,604 --> 00:29:39,106
we will start marking the particular points of data that

464
00:29:39,128 --> 00:29:42,354
has been recognized. So as you can see, we have similar stuff

465
00:29:42,392 --> 00:29:45,250
here as the previous slides, declan canvas id,

466
00:29:45,320 --> 00:29:48,974
canvas Ctx and begin path

467
00:29:49,022 --> 00:29:52,902
arc arcs where we start to actually

468
00:29:52,956 --> 00:29:56,326
put in the specific data. So as you can see, we're starting

469
00:29:56,348 --> 00:29:58,230
to draw center of a circle,

470
00:29:59,930 --> 00:30:03,960
center of circle, pause at the

471
00:30:04,490 --> 00:30:07,638
x pause basically at the exposition.

472
00:30:07,734 --> 00:30:11,546
And essentially from there we then put

473
00:30:11,568 --> 00:30:15,440
in those sum of values, the averaging, and we then

474
00:30:15,890 --> 00:30:19,466
basically go about it with creating

475
00:30:19,498 --> 00:30:23,486
it with radius three. And afterwards just

476
00:30:23,508 --> 00:30:26,986
some additional customizations, putting a red as the

477
00:30:27,028 --> 00:30:30,500
color of those particular circles and just filling it in.

478
00:30:31,190 --> 00:30:33,890
And we then have a conditional.

479
00:30:34,310 --> 00:30:38,594
So to check if the x pause is equals to

480
00:30:38,792 --> 00:30:42,726
x length plus 30, we then basically at

481
00:30:42,748 --> 00:30:46,278
the beginning of the graphic, which is the most right part,

482
00:30:46,364 --> 00:30:49,720
we then put timescale text in the canvas and

483
00:30:50,330 --> 00:30:54,082
basically get the day, hour and minute

484
00:30:54,146 --> 00:30:57,866
from the current at data to calculate the

485
00:30:57,888 --> 00:31:01,606
nearest hour to the end of the graph. So this will help us parse

486
00:31:01,638 --> 00:31:04,460
the data in terms of days, hours and minutes.

487
00:31:04,850 --> 00:31:08,318
And you can see the implementation towards the bottom

488
00:31:08,404 --> 00:31:11,710
and get the current time period and the closest

489
00:31:12,210 --> 00:31:15,850
hour towards the exposition

490
00:31:15,930 --> 00:31:20,802
that is currently made in order towards

491
00:31:20,856 --> 00:31:23,300
the current time period that is currently available.

492
00:31:25,190 --> 00:31:28,866
And initialize some more fonts for us to be

493
00:31:28,888 --> 00:31:31,080
able to visualize the kind of data.

494
00:31:33,850 --> 00:31:37,874
And yeah, continuing from there, just more fonts with font

495
00:31:37,922 --> 00:31:42,082
style text align. And also for

496
00:31:42,156 --> 00:31:45,770
being able to put a time mark for every 2 hours starting

497
00:31:45,840 --> 00:31:49,340
from the closest x hour position. We use the

498
00:31:52,030 --> 00:31:55,760
for loop looping, kind of like a mechanism for

499
00:31:56,130 --> 00:32:00,298
initializing the variable k as a closest hour exposition.

500
00:32:00,394 --> 00:32:04,190
And we continue on to put the time mark at the particular

501
00:32:04,260 --> 00:32:07,762
location where we have decided that we should

502
00:32:07,816 --> 00:32:11,602
based on the current part of k. And that's why we

503
00:32:11,656 --> 00:32:15,154
fill text at k. And we

504
00:32:15,192 --> 00:32:18,734
then go initialize the variable hour to display,

505
00:32:18,782 --> 00:32:22,760
to display the hour plus time zone and

506
00:32:23,370 --> 00:32:27,378
also check if the hour to display is bigger

507
00:32:27,394 --> 00:32:31,046
than recruit 24. And if so, we put it in a

508
00:32:31,068 --> 00:32:36,406
standard, kind of like a visualization.

509
00:32:36,598 --> 00:32:39,866
And afterwards we then fill in the

510
00:32:39,888 --> 00:32:43,466
text and we then do this to

511
00:32:43,488 --> 00:32:47,386
draw a vertical line at those point. And these vertical lines are

512
00:32:47,408 --> 00:32:51,082
going to make sense once you see the graphics visualization as well.

513
00:32:51,216 --> 00:32:54,426
So just standard stuff, just using move to line two

514
00:32:54,448 --> 00:32:58,818
and stroke again to be able to do so. And another

515
00:32:58,904 --> 00:33:02,626
check for if the

516
00:33:02,648 --> 00:33:07,106
hour is smaller than zero, then yeah, we'll just add to

517
00:33:07,128 --> 00:33:09,380
the hours, basically 24 to the hours.

518
00:33:11,770 --> 00:33:15,494
And this is where the tricky part starts we finished all our

519
00:33:15,612 --> 00:33:19,266
functions that we need to make. We finished making our request

520
00:33:19,298 --> 00:33:23,050
functions. We've finished making our graphics library specific

521
00:33:23,120 --> 00:33:26,858
functions. Now we just have to start putting it all together and making the

522
00:33:26,864 --> 00:33:30,618
Ajax requests. So in order to

523
00:33:30,624 --> 00:33:33,754
do this, we then start making

524
00:33:33,872 --> 00:33:36,590
an Ajax already state change function.

525
00:33:36,740 --> 00:33:40,880
So afterwards we then start to

526
00:33:41,250 --> 00:33:45,002
check if the statuses are currently already received correctly.

527
00:33:45,066 --> 00:33:48,766
And we do this by checking the Ajax status. So as you can see over

528
00:33:48,788 --> 00:33:51,970
there, if we put an Ajax status, if it's bigger than 200

529
00:33:52,120 --> 00:33:55,966
and smaller than 300, or if it's

530
00:33:55,998 --> 00:33:59,202
actually those hundred and four, then yeah, sure it can got to go through,

531
00:33:59,256 --> 00:34:04,162
otherwise it'll just return an error. So afterwards

532
00:34:04,306 --> 00:34:07,906
we then go ahead with initializing

533
00:34:07,938 --> 00:34:11,286
a display data variable in order to check if the data is going to be

534
00:34:11,308 --> 00:34:16,746
displayed or not based on if the

535
00:34:16,768 --> 00:34:20,426
data has already been received. So afterwards we

536
00:34:20,448 --> 00:34:23,434
then check if the init variable is zero and in it,

537
00:34:23,472 --> 00:34:27,006
as I mentioned before, is a variable to check essentially if

538
00:34:27,028 --> 00:34:30,880
the data is already visualized. So here

539
00:34:31,730 --> 00:34:35,374
we are putting in variables as string sensor data to put

540
00:34:35,412 --> 00:34:39,106
a response text, putting a header length and

541
00:34:39,288 --> 00:34:43,566
essentially to be able to search through feeds

542
00:34:43,678 --> 00:34:46,894
to be able to retrieve the particular header length

543
00:34:46,942 --> 00:34:50,710
and essentially get also added to the time zone

544
00:34:51,930 --> 00:34:55,222
and also search for data n which

545
00:34:55,356 --> 00:34:58,440
we get by using the length function.

546
00:34:59,850 --> 00:35:03,418
And from there we then continue on

547
00:35:03,504 --> 00:35:07,306
by doing a window local storage in order to set the

548
00:35:07,328 --> 00:35:11,286
particular item as the sensor

549
00:35:11,318 --> 00:35:15,726
data storage and go on to

550
00:35:15,908 --> 00:35:19,754
declare another web get timer function to set an interval.

551
00:35:19,882 --> 00:35:24,094
And as you can see over there, we start getting

552
00:35:24,132 --> 00:35:27,402
the web server data. And with those

553
00:35:27,556 --> 00:35:31,540
we're basically putting 120,000

554
00:35:32,710 --> 00:35:37,060
milliseconds, which is a two minute interval. So we're waiting for 120,000

555
00:35:37,510 --> 00:35:40,742
milliseconds before we are actually getting

556
00:35:40,796 --> 00:35:44,482
to get the data that is retrieved.

557
00:35:44,626 --> 00:35:47,782
And since we already done

558
00:35:47,836 --> 00:35:51,110
it one time, we can basically continue on

559
00:35:51,180 --> 00:35:55,322
and set the inlet to one so that the routine will

560
00:35:55,376 --> 00:35:59,754
read the initial historical data will not run again and

561
00:35:59,792 --> 00:36:03,194
the new data will be available. So we'll set

562
00:36:03,232 --> 00:36:07,134
display data to one to enable to display the new data that has

563
00:36:07,172 --> 00:36:11,102
already been received. However, if the n

564
00:36:11,156 --> 00:36:14,494
is got one, not zero,

565
00:36:14,612 --> 00:36:17,822
we will just continue on with saving the

566
00:36:17,876 --> 00:36:21,122
new read data from the web server to a variable with the

567
00:36:21,256 --> 00:36:24,654
new read data function where we parse

568
00:36:24,702 --> 00:36:29,974
the JSON based on response text. And we

569
00:36:30,012 --> 00:36:33,910
then set sensor data to parse

570
00:36:35,050 --> 00:36:38,614
with JSON those local storage and get

571
00:36:38,652 --> 00:36:42,806
the sensor data storage from the local storage and we

572
00:36:42,828 --> 00:36:46,602
will get the id of the latest data and check whether

573
00:36:46,656 --> 00:36:49,610
it is the same with the latest one in the local storage.

574
00:36:51,150 --> 00:36:54,614
And we do this with the data length and

575
00:36:54,752 --> 00:36:58,014
latest id variables being declared and we

576
00:36:58,052 --> 00:37:02,046
go on to basically check if

577
00:37:02,148 --> 00:37:05,482
the new read data entry id is equal to the latest

578
00:37:05,546 --> 00:37:09,114
id and if so then we will add the latest data and store

579
00:37:09,172 --> 00:37:13,746
back to those local storage and we'll push that data and we

580
00:37:13,768 --> 00:37:17,486
will stringify that data and we will set the item as necessary

581
00:37:17,598 --> 00:37:22,594
and set the display to one, essentially as

582
00:37:22,632 --> 00:37:25,960
an alternate scenario to if the init was a zero.

583
00:37:28,730 --> 00:37:32,218
And finally we will start displaying the fields. So this is where

584
00:37:32,224 --> 00:37:36,762
we start creating variables such as create a transform, so new

585
00:37:36,816 --> 00:37:39,580
read data and created at time.

586
00:37:40,750 --> 00:37:44,454
And basically this is just to be able to set more variables,

587
00:37:44,502 --> 00:37:48,238
just to be able to check if the data was created at

588
00:37:48,244 --> 00:37:53,546
a particular time and basically to be able to display

589
00:37:53,578 --> 00:37:57,226
the current data results on the left side

590
00:37:57,268 --> 00:38:00,740
of those whole visualization, to be able to

591
00:38:01,270 --> 00:38:04,946
recreate as well the created data format that

592
00:38:04,968 --> 00:38:10,070
was made basically during the coding as well. So basically

593
00:38:10,140 --> 00:38:13,702
it's just checking when the created time was

594
00:38:13,756 --> 00:38:17,094
and just putting in behaviors, if so.

595
00:38:17,212 --> 00:38:21,266
And finally we can then display

596
00:38:21,298 --> 00:38:25,254
the data by doing a document get element by id

597
00:38:25,372 --> 00:38:29,082
and basically getting the data and displaying it in the new read data

598
00:38:29,136 --> 00:38:32,614
field. And this can be then put into motion in HTML,

599
00:38:32,662 --> 00:38:36,446
which I will show in the next slide. And that's pretty much all

600
00:38:36,468 --> 00:38:40,830
of it for being able to put the data into visualization.

601
00:38:43,330 --> 00:38:46,638
And of course some good HTML and CSS for

602
00:38:46,804 --> 00:38:50,274
supporting the JavaScript that we have already implemented. Because after all,

603
00:38:50,312 --> 00:38:54,226
HTML is our main pillar of support for our whole website.

604
00:38:54,328 --> 00:38:57,858
So as you can see, we're putting quite

605
00:38:58,024 --> 00:39:01,254
a number of our functions into play here. So we can start

606
00:39:01,372 --> 00:39:05,734
declaring the necessary construction of the

607
00:39:05,932 --> 00:39:09,746
table that we want of the latest variables

608
00:39:09,778 --> 00:39:12,586
you want. So as you can see over there, that's why we put number of

609
00:39:12,608 --> 00:39:16,202
fields to be displayed for the HTML code.

610
00:39:16,336 --> 00:39:20,454
And we also put the canvas

611
00:39:20,502 --> 00:39:24,086
library to motion as well here. And that's where we start drawing

612
00:39:24,118 --> 00:39:28,634
with our customs graphic library. We start basically drawing

613
00:39:28,762 --> 00:39:32,586
with canvas. Also the number of fields

614
00:39:32,618 --> 00:39:34,910
that are currently, we have currently already specified,

615
00:39:35,570 --> 00:39:38,990
and we also have the CSS.

616
00:39:39,070 --> 00:39:42,562
As you can see, we basically can specify more

617
00:39:42,616 --> 00:39:46,338
fonts that are necessary for use in the website

618
00:39:46,504 --> 00:39:49,678
and just declare more containers and labels. So I'm

619
00:39:49,694 --> 00:39:52,758
not using to be going too deep into this because we're focusing only on the

620
00:39:52,764 --> 00:39:55,878
JavaScript side. It's creating a JavaScript library after all,

621
00:39:55,964 --> 00:39:59,446
but it's just an example of how it's used on

622
00:39:59,468 --> 00:40:03,546
the HTML and CSS side and finally,

623
00:40:03,648 --> 00:40:07,290
it'll result in something like this. As you can see, we have our

624
00:40:07,360 --> 00:40:11,370
latest data on the left, our results on the right,

625
00:40:11,440 --> 00:40:15,130
our table of results, and our visualization

626
00:40:15,210 --> 00:40:19,600
of charts which we made using our own graphics libraries at the middle.

627
00:40:20,930 --> 00:40:25,674
And this is an example of when the whole visualization

628
00:40:25,722 --> 00:40:29,726
is populated with data. And as you can see, we have those small circles

629
00:40:29,758 --> 00:40:33,090
which we created through the

630
00:40:33,240 --> 00:40:36,786
function that we already defined on there. And as

631
00:40:36,808 --> 00:40:40,100
you can see, at first this is based on in it,

632
00:40:40,890 --> 00:40:44,146
but now after initializing it, after collecting

633
00:40:44,178 --> 00:40:47,830
data, it'll continue collecting new data and it'll continue

634
00:40:47,900 --> 00:40:51,302
moving toward the data towards the left, and it'll continue

635
00:40:51,356 --> 00:40:54,826
inputting new data from the right and it

636
00:40:54,848 --> 00:40:58,746
can adapt based on the maximum and minimum data, as I

637
00:40:58,768 --> 00:41:02,474
mentioned before. And that's what I mean by the data not being

638
00:41:02,512 --> 00:41:06,154
able to actually outlier data,

639
00:41:06,192 --> 00:41:10,602
not being able to ruin the data, because at some point with our specified interval

640
00:41:10,666 --> 00:41:14,106
it'll eventually be off those chart anyway. So it won't those

641
00:41:14,138 --> 00:41:17,694
much of a problem and it'll continue moving on

642
00:41:17,732 --> 00:41:19,630
until it's out of sight.

643
00:41:21,190 --> 00:41:24,782
So to wrap up, it's not hard to make your own libraries.

644
00:41:24,926 --> 00:41:28,594
Definitely takes a bit of practice, but once you know more or less

645
00:41:28,632 --> 00:41:32,286
like what you want to make, the aim errors,

646
00:41:32,318 --> 00:41:35,702
guidelines mentioned before, and pretty much just go

647
00:41:35,756 --> 00:41:39,174
ahead with it and just give it a try. And making a custom

648
00:41:39,212 --> 00:41:42,726
one is great, but remember that you can still use dependencies if needed. Don't be

649
00:41:42,748 --> 00:41:46,454
afraid to use a canvas as a dependency or two js

650
00:41:46,502 --> 00:41:50,074
or other canvas libraries that are available. As long as you are

651
00:41:50,112 --> 00:41:53,834
able to meet your particular objective and help solve a problem, then it's all

652
00:41:53,872 --> 00:41:57,074
good. And of course experiment,

653
00:41:57,142 --> 00:42:01,822
experiment, experiment. It takes a long while to be able to find

654
00:42:01,876 --> 00:42:05,374
the perfect library that can really match your needs. It takes lots of

655
00:42:05,412 --> 00:42:08,320
research, and if you're creating a library especially,

656
00:42:08,690 --> 00:42:12,014
you'll need to be able to research which dependencies you need as well,

657
00:42:12,132 --> 00:42:16,098
what tools you'll need, how to be able to best code it, and how to

658
00:42:16,104 --> 00:42:19,298
be able to make it most efficient. Even until now, I'm still looking for a

659
00:42:19,304 --> 00:42:22,914
way to make my library efficient as I share in the open source community.

660
00:42:23,032 --> 00:42:26,598
As one of the biggest things that you need to keep in

661
00:42:26,604 --> 00:42:29,826
mind in sharing these kinds of libraries is of course the readability

662
00:42:29,938 --> 00:42:33,110
and how the open source community can best perceive it.

663
00:42:33,260 --> 00:42:36,922
Because people won't really have a use for a library that is

664
00:42:36,976 --> 00:42:40,682
not able to be read clearly or actually is not

665
00:42:40,736 --> 00:42:44,266
easily understandable or has no function. So you need to experiment with

666
00:42:44,288 --> 00:42:48,346
the best approaches you need to make and how you can actually best approach

667
00:42:48,378 --> 00:42:52,302
it in the open source community to have people adopt the library and

668
00:42:52,356 --> 00:42:56,480
actually have them also use it for their own purposes as well.

669
00:42:58,210 --> 00:43:01,954
So that's all for me. Thank you so much for listening to my

670
00:43:01,992 --> 00:43:05,650
talk. And before we close up,

671
00:43:05,800 --> 00:43:08,946
remember to connect with me if you have any questions, or if you would like

672
00:43:08,968 --> 00:43:13,970
to talk to me about anything else I mentioned before. If you have any interesting

673
00:43:14,120 --> 00:43:17,486
insights about any of the topics I mentioned, or if you have any interesting insights

674
00:43:17,518 --> 00:43:20,926
about any of the topics code I've

675
00:43:20,958 --> 00:43:24,234
talked about, then feel free to share it with me. I'm happy as well to

676
00:43:24,272 --> 00:43:27,850
talk to you about it. So remember, you can connect with me

677
00:43:28,000 --> 00:43:31,786
with my twitter at Reynold G or through

678
00:43:31,808 --> 00:43:35,786
my LinkedIn at Reynoldsbroto. So thank

679
00:43:35,808 --> 00:43:38,950
you again, and I hope you enjoy the rest of the talks at the conference.

