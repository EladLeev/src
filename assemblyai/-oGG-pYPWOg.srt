1
00:00:30,770 --> 00:00:33,922
Hi everyone. My name is Jayaganesh Kalyanasundaram.

2
00:00:34,066 --> 00:00:37,638
I am a software engineer at Google, and in this talk I'll be

3
00:00:37,644 --> 00:00:41,286
speaking about product management in SRE. This talk is going to be about the

4
00:00:41,308 --> 00:00:44,742
SRE principles and how product management fits into

5
00:00:44,796 --> 00:00:48,150
these. And I'm speaking about it specifically because

6
00:00:48,300 --> 00:00:51,722
personally, our whole team benefited

7
00:00:51,786 --> 00:00:55,374
a lot by having a dedicated product manager to take

8
00:00:55,412 --> 00:00:58,426
care of all the product aspects in the SRE.

9
00:00:58,538 --> 00:01:01,870
And this is also to make sure that people

10
00:01:02,020 --> 00:01:05,630
sre aware that Sre are not just to do the operations

11
00:01:05,710 --> 00:01:09,426
work, but they sre responsible for the overall reliability of the product.

12
00:01:09,608 --> 00:01:13,058
And hence, how can we benefit from

13
00:01:13,224 --> 00:01:16,974
realizing the product aspects within SRE.

14
00:01:17,102 --> 00:01:20,754
So I'll be going over the generic SRE principles and

15
00:01:20,792 --> 00:01:23,926
how we benefited as a team in each of these aspects by

16
00:01:23,948 --> 00:01:27,126
having a dedicated product manager. So let's say the first one

17
00:01:27,148 --> 00:01:31,030
about service level objectives. Pretty straightforward,

18
00:01:31,110 --> 00:01:34,138
right? When service level objectives are met, when these slos are

19
00:01:34,144 --> 00:01:37,418
met, you have happy users. When they're not met, you have

20
00:01:37,584 --> 00:01:41,302
sad users. But this gets

21
00:01:41,376 --> 00:01:44,430
more tricky, especially in this day and age,

22
00:01:44,580 --> 00:01:49,098
because we are nowadays moving from monoliths to microservices,

23
00:01:49,274 --> 00:01:53,570
and rightly so, because we have a lot of other benefits from having microservices.

24
00:01:54,790 --> 00:01:58,818
The difference is that earlier the monolith was

25
00:01:58,904 --> 00:02:02,254
measuring the overall service level objective,

26
00:02:02,382 --> 00:02:06,226
including the user paradigms. But now, because we

27
00:02:06,248 --> 00:02:10,486
have microservices, and because we have platforms and a lot of products which

28
00:02:10,588 --> 00:02:13,990
by default have monitorings and stuff for these microservices,

29
00:02:14,970 --> 00:02:18,222
service level objectives are not confined for these microservices.

30
00:02:18,386 --> 00:02:21,660
We want to be able to have a larger picture in mind.

31
00:02:23,230 --> 00:02:26,780
So let's take an example. In our CI CD platform,

32
00:02:27,870 --> 00:02:31,514
we have a simple action of doing a rollback, and I'm pretty sure

33
00:02:31,552 --> 00:02:34,314
many of you would be using this one on a day to day basis,

34
00:02:34,362 --> 00:02:38,842
whenever your system doesn't function as intended, we hit the button rollback.

35
00:02:38,986 --> 00:02:43,062
Right now, the engineers

36
00:02:43,226 --> 00:02:47,070
wanted to measure the slos, the rollback,

37
00:02:47,150 --> 00:02:51,310
as the journey starts, from the user hitting the button rollback

38
00:02:51,470 --> 00:02:55,262
all the way to a specific RPC being sent

39
00:02:55,336 --> 00:02:58,870
to the right system to initiate the rollback.

40
00:02:59,690 --> 00:03:03,122
Makes sense, right? The managers

41
00:03:03,186 --> 00:03:06,678
and also tech leads were like, you know what? We wouldn't stop just at

42
00:03:06,684 --> 00:03:10,454
the point where we have an RPC. We would also wait for

43
00:03:10,492 --> 00:03:14,090
the workflow instantiation, which does the rollback.

44
00:03:14,910 --> 00:03:18,890
But the people who sre focused on the product, which is management,

45
00:03:19,230 --> 00:03:22,678
and our product managers, they felt that rollback

46
00:03:22,694 --> 00:03:26,238
is a journey. It's not something we want to be accountable for. Just as a

47
00:03:26,244 --> 00:03:29,406
button, but the whole journey by itself, which is when I

48
00:03:29,428 --> 00:03:33,210
click the button rollback, I want everything to function smoothly

49
00:03:33,290 --> 00:03:36,882
and the rollback to actually happen. So right

50
00:03:36,936 --> 00:03:40,974
here we have total of three different interpretations of how a rollback journey

51
00:03:41,022 --> 00:03:44,686
could be described and what is the service level journey.

52
00:03:44,718 --> 00:03:49,782
We are looking at the targets and the objectives are next because

53
00:03:49,836 --> 00:03:53,650
of which our product manager made a beautiful framework

54
00:03:53,810 --> 00:03:57,426
of writing down the overall critical user

55
00:03:57,458 --> 00:04:00,938
journeys. What I mean, writing down having an explicit document which

56
00:04:01,024 --> 00:04:04,470
states clearly what is the end to end user journey

57
00:04:04,550 --> 00:04:08,746
for each of them and why did we benefit from it was that everyone

58
00:04:08,848 --> 00:04:12,266
was on the same page when they spoke about any specific journey and

59
00:04:12,288 --> 00:04:15,486
what the SLO should be for that. It also helped us

60
00:04:15,508 --> 00:04:18,910
a bit more that we were able to kind of realize the overall product

61
00:04:18,980 --> 00:04:22,906
quality. What I mean here is, let's say you have 15 journeys

62
00:04:23,098 --> 00:04:26,678
offered from the product, but we have slos for governing

63
00:04:26,714 --> 00:04:30,254
only five of them. We are just covering one third of the journeys

64
00:04:30,302 --> 00:04:33,634
and the other two thirds are not actually governed. So which

65
00:04:33,672 --> 00:04:37,998
means that they could be not functioning as well and we wouldn't be alerted

66
00:04:38,014 --> 00:04:41,318
for that. And that's not a right product. Right. So we were also able to

67
00:04:41,324 --> 00:04:44,870
measure the product quality with this framework. And right just there,

68
00:04:44,940 --> 00:04:48,606
we, weve able to benefit a lot from product management in just this one aspect

69
00:04:48,658 --> 00:04:52,422
of slos. So next topic of making tomorrow

70
00:04:52,486 --> 00:04:56,134
better. And this becomes more and more important in the earlier

71
00:04:56,182 --> 00:04:59,494
phase of SRE in any team, because initially SRE

72
00:04:59,542 --> 00:05:02,986
is the one which holds a pager. So they're more like the pager monkey

73
00:05:03,018 --> 00:05:06,602
for the initial few times until they kind of realize the pattern,

74
00:05:06,666 --> 00:05:10,058
realize the major pitfalls, and try to improve

75
00:05:10,074 --> 00:05:13,886
on them in the future. But we can only improve on them when

76
00:05:13,908 --> 00:05:17,154
we have the error budget for that. What I mean here is, let's say that

77
00:05:17,192 --> 00:05:20,610
your sLo states that your service can be down for five minutes

78
00:05:20,680 --> 00:05:24,610
in one month, but let's say you are just pretty much ten days

79
00:05:24,680 --> 00:05:28,398
past in a month and you're already down for four months and

80
00:05:28,424 --> 00:05:32,278
you just have 1 minute more for the next 20 days and

81
00:05:32,444 --> 00:05:36,214
you will be forced to hold the pager and do nothing more because any 1

82
00:05:36,252 --> 00:05:39,958
minute more downtime you

83
00:05:39,964 --> 00:05:43,606
have hit your maximum error budget. But we want to be having an error

84
00:05:43,638 --> 00:05:47,402
budget policy which enforces us to work on the product more.

85
00:05:47,536 --> 00:05:51,386
And this is yet another aspect where we benefited a lot

86
00:05:51,408 --> 00:05:54,798
from the product manager because they were able to help us navigate these discussions with

87
00:05:54,804 --> 00:05:58,334
the stakeholders, where we basically weve able to advocate for,

88
00:05:58,372 --> 00:06:01,758
you know, what we will not be doing any more feature development. We'll be

89
00:06:01,764 --> 00:06:05,066
able to stop it and we will literally improve

90
00:06:05,098 --> 00:06:09,566
the reliability of the product. So these kind of discussions or these kind of initiatives,

91
00:06:09,598 --> 00:06:13,054
which are pretty difficult for the product itself because you're going to compromise

92
00:06:13,102 --> 00:06:16,322
on the feature velocity and putting

93
00:06:16,376 --> 00:06:19,718
more focus on the reliability. Rightly so,

94
00:06:19,884 --> 00:06:23,206
but it also enforces that you need to be

95
00:06:23,228 --> 00:06:26,214
able to have these communications with the upper management and trying to convince them.

96
00:06:26,252 --> 00:06:29,558
And the product manager having that interest in the product is one of

97
00:06:29,564 --> 00:06:33,146
the best persons to do this. And in

98
00:06:33,168 --> 00:06:36,950
terms of product work, as I mentioned before, a lot of things like automating repetitive

99
00:06:37,030 --> 00:06:40,666
work and trying to look into the postmortem action items and trying to say that,

100
00:06:40,688 --> 00:06:43,846
you know what, this whole quarter we'll be just focusing on postmortem

101
00:06:43,878 --> 00:06:47,342
action items because we haven't been doing so for the last two years.

102
00:06:47,476 --> 00:06:51,226
Again, that's a very bad state to be in. But these kind of difficult discussions

103
00:06:51,258 --> 00:06:54,546
weve you pause. The feature work or the more shiny work

104
00:06:54,648 --> 00:06:58,100
to focus on the overall reliability of the product

105
00:06:58,710 --> 00:07:02,338
are difficult discussions which sre to be taken with the hat of the

106
00:07:02,344 --> 00:07:05,726
product manager. Next, let's look at the shared

107
00:07:05,758 --> 00:07:08,950
responsibility model. So as I mentioned before, the general

108
00:07:09,020 --> 00:07:12,246
tendency is that all the work gets dumped on the

109
00:07:12,268 --> 00:07:15,586
SRE. All the toils of work gets dumped on the sres.

110
00:07:15,698 --> 00:07:17,510
They sre more like the pager monkeys,

111
00:07:18,750 --> 00:07:22,346
whereas as I mentioned before, it's supposed to be a shared model

112
00:07:22,448 --> 00:07:25,830
where SRE are responsible for the overall

113
00:07:25,990 --> 00:07:29,850
system's reliability. So in a classical system

114
00:07:29,920 --> 00:07:33,614
development model, from the stage of having a business idea to

115
00:07:33,652 --> 00:07:37,150
doing the initial business modeling, to doing the development

116
00:07:37,490 --> 00:07:40,746
and to the operations, or to ship the features and ship

117
00:07:40,778 --> 00:07:44,026
the whole development, to actually making revenue of it.

118
00:07:44,148 --> 00:07:48,194
SRE ideally needs to be involved from business to

119
00:07:48,232 --> 00:07:52,002
development to also operations like traditionally, they have just been

120
00:07:52,056 --> 00:07:55,666
the operational people. That's why we have the whole aspect of DevOps, which is

121
00:07:55,688 --> 00:07:58,338
like shared model between development and operations.

122
00:07:58,514 --> 00:08:02,054
But if they were involved in the business to development model as early as

123
00:08:02,092 --> 00:08:05,766
possible, it helps them to have a voice and

124
00:08:05,788 --> 00:08:09,862
an opinion in the way the product is being developed.

125
00:08:10,006 --> 00:08:13,862
Looking at the scale and the overall reliability

126
00:08:13,926 --> 00:08:17,178
needs of the product, scalability being an important

127
00:08:17,264 --> 00:08:20,954
aspect, you want to be able to ensure that the product is built to

128
00:08:20,992 --> 00:08:24,190
scale at the initial time, rather than building

129
00:08:24,260 --> 00:08:27,966
it in some ad hoc fashion and then investing a lot more time

130
00:08:28,068 --> 00:08:31,230
on rebuilding it for the scale. Again,

131
00:08:31,300 --> 00:08:34,654
these are difficult things which require a lot of

132
00:08:34,692 --> 00:08:37,914
leadership, buying and hence a product manager,

133
00:08:37,962 --> 00:08:41,520
a product owner influence makes a big impact here.

134
00:08:42,370 --> 00:08:46,114
So an example from my own team about leadership

135
00:08:46,162 --> 00:08:49,478
volume. So as I mentioned before, we were looking at the rollback journey as a

136
00:08:49,484 --> 00:08:53,254
whole, as to the user clicking the rollback all the way to

137
00:08:53,292 --> 00:08:56,866
the rollback actually finishing successfully being the user

138
00:08:56,898 --> 00:08:59,580
journey. And we wanted to measure the Slo for this.

139
00:09:00,350 --> 00:09:04,410
Just like any other SLO, we started with a 99.99%

140
00:09:04,560 --> 00:09:08,182
target. That four nights is the target

141
00:09:08,246 --> 00:09:11,950
for any rollback attempt to finish successfully.

142
00:09:12,530 --> 00:09:15,902
To our surprise, initially the success

143
00:09:15,956 --> 00:09:20,078
rate is 40%. It's nowhere close to

144
00:09:20,244 --> 00:09:22,960
four nine. It's like less than half, right.

145
00:09:24,230 --> 00:09:27,714
The reason was more than 50%

146
00:09:27,752 --> 00:09:31,422
of these errors was because the user

147
00:09:31,566 --> 00:09:35,522
didn't have the right access to have

148
00:09:35,576 --> 00:09:39,240
a rollback initiated for the microservice. To give an example,

149
00:09:39,930 --> 00:09:43,638
a user or an engineer who works for Google Search

150
00:09:43,804 --> 00:09:47,554
shouldn't be able to roll back a software which is working

151
00:09:47,612 --> 00:09:51,290
for YouTube for the matter. Right, because you

152
00:09:51,360 --> 00:09:54,860
wouldn't want to dismantle or

153
00:09:55,550 --> 00:09:58,490
work on some other person's product. Again,

154
00:09:58,560 --> 00:10:02,390
in this case, it wasn't a totally different product, but it was different microservices

155
00:10:02,470 --> 00:10:05,520
where the user didn't have the access to necessary access to.

156
00:10:06,530 --> 00:10:10,554
Again, this is not specifically an issue of the product. The product is functioning perfectly

157
00:10:10,602 --> 00:10:13,886
well. It's the issue of the user. But we

158
00:10:13,908 --> 00:10:18,290
still wanted to measure the end to end journey, because if there are unhappy users,

159
00:10:18,710 --> 00:10:22,018
that doesn't transfer to a good user experience. So we want

160
00:10:22,024 --> 00:10:25,346
to better the user experience. So probably what we had

161
00:10:25,368 --> 00:10:28,650
in mind was to improve the user experience by letting them know that they don't

162
00:10:28,670 --> 00:10:31,574
have the access, which is what we have done finally. We finally have let them

163
00:10:31,612 --> 00:10:35,346
know in a big red bar saying that you don't

164
00:10:35,378 --> 00:10:38,466
have access to this microservice, so you can't

165
00:10:38,498 --> 00:10:41,866
perform any of the emergency actions on this, and because of

166
00:10:41,888 --> 00:10:45,146
which they don't attempt to do a rollback anymore on these kind of services.

167
00:10:45,248 --> 00:10:48,406
But keeping that aside, having a target

168
00:10:48,438 --> 00:10:52,110
of 40% makes you look really bad before the upper management.

169
00:10:53,410 --> 00:10:57,806
So we wanted to loosen the SLO from

170
00:10:57,828 --> 00:11:01,582
a four nine to literally 45% initially until

171
00:11:01,636 --> 00:11:04,862
we made this recent change. And this is a very

172
00:11:04,916 --> 00:11:08,834
drastic change on how your product SLO should be.

173
00:11:09,032 --> 00:11:12,446
And this requires a big leadership buy in. Like, we had to convince

174
00:11:12,478 --> 00:11:16,146
the upper management that this is the case, that we don't want to have a

175
00:11:16,168 --> 00:11:19,058
four nine target, we instead want to have a 45% target.

176
00:11:19,154 --> 00:11:22,226
Because most of these errors are user cost errors.

177
00:11:22,338 --> 00:11:26,406
So convincing the upper management and the stakeholders for the overall product by

178
00:11:26,428 --> 00:11:30,038
itself requires a lot of leadership and a lot of stakeholder management,

179
00:11:30,134 --> 00:11:34,074
with also keeping the interest of product in mind. And this was yet

180
00:11:34,112 --> 00:11:38,518
another place where our team's product manager helped

181
00:11:38,534 --> 00:11:43,710
us greatly to navigate these conversations and

182
00:11:43,780 --> 00:11:47,786
as I mentioned before, putting reliability and the consistency of the product upfront

183
00:11:47,818 --> 00:11:51,642
and making them one of the major aspects

184
00:11:51,706 --> 00:11:55,134
of any feature launches. For example, ensuring that your

185
00:11:55,172 --> 00:11:58,574
feature launches are covered by slos or covered by integration

186
00:11:58,622 --> 00:12:01,730
tests so that you invest as much as possible early

187
00:12:01,800 --> 00:12:05,780
on to ensure that the product is reliable and it's working well,

188
00:12:06,230 --> 00:12:10,134
are some of the things which we have developed in our team, and this

189
00:12:10,172 --> 00:12:13,238
also builds a lot of resiliency within the product. So we

190
00:12:13,244 --> 00:12:17,350
have recently developed a lot of feature launch requirements

191
00:12:17,690 --> 00:12:21,274
for an internal SRE based feature launch as

192
00:12:21,312 --> 00:12:24,966
well to ensure that our feature launches

193
00:12:25,078 --> 00:12:29,174
for any of the SRE products or SRE feature based tools

194
00:12:29,302 --> 00:12:32,894
is also governed with a lot of practices like

195
00:12:32,932 --> 00:12:36,640
integration test slos and having the proper

196
00:12:37,010 --> 00:12:40,078
emrs on who is going to be the EAP customers

197
00:12:40,164 --> 00:12:44,130
and what is the market for the strategies and so on,

198
00:12:44,280 --> 00:12:48,034
just to ensure that the product launch is pretty smooth and we have a very

199
00:12:48,072 --> 00:12:51,966
consistent product going forward. The product doesn't get brittle

200
00:12:52,078 --> 00:12:54,050
after every frequent launch.

201
00:12:56,650 --> 00:13:00,134
Automation is yet another place which can

202
00:13:00,172 --> 00:13:04,514
benefit a lot with SRE teams specifically,

203
00:13:04,562 --> 00:13:11,046
I want to dwell a lot on this slide because recently

204
00:13:11,238 --> 00:13:15,050
a lot of these SRE practices can be put

205
00:13:15,120 --> 00:13:17,450
into four major themes.

206
00:13:18,830 --> 00:13:22,246
CI CD is the major bread

207
00:13:22,278 --> 00:13:26,026
and butter of every operations DevOps by itself, because that's

208
00:13:26,058 --> 00:13:29,546
how the whole DevOps even started. They wanted to ensure that the CI CD

209
00:13:29,578 --> 00:13:34,126
aspects SRE done by an operations team when

210
00:13:34,148 --> 00:13:37,586
you're close to CI CD is the aspects of monitoring. You want to

211
00:13:37,608 --> 00:13:41,202
ensure that your product, your services are

212
00:13:41,256 --> 00:13:44,434
monitored well. The next aspect is

213
00:13:44,472 --> 00:13:48,146
capacity planning, which is when you have any inorganic

214
00:13:48,178 --> 00:13:51,622
launches. Let's say you want to view

215
00:13:51,676 --> 00:13:55,590
your cricket matches and because of which there's a sudden spike.

216
00:13:57,530 --> 00:14:01,154
I'm sorry, you want to view the cricket matches

217
00:14:01,202 --> 00:14:04,266
and because of which there's a sudden spike in the traffic for, let's say,

218
00:14:04,288 --> 00:14:07,798
YouTube and Google Ads. You want to be able to do the capacity planning

219
00:14:07,814 --> 00:14:11,394
for these. And the fourth, obviously is the incident management,

220
00:14:11,462 --> 00:14:14,526
which is when everything works well. Everyone is happy,

221
00:14:14,628 --> 00:14:18,750
but when there is an incident of a very big impact,

222
00:14:19,250 --> 00:14:22,734
everyone rushes to see what is happening, how can they

223
00:14:22,772 --> 00:14:25,118
solve it, and what is the right status and so on. So we want to

224
00:14:25,124 --> 00:14:29,550
be able to have a medium to communicate to all the required stakeholders

225
00:14:29,630 --> 00:14:33,246
and people who are interested as to what is the state of the incident

226
00:14:33,358 --> 00:14:36,350
and what is the way they have been taking to fix it, and is it

227
00:14:36,360 --> 00:14:39,926
mitigated or not? And what is the impact it has right now.

228
00:14:40,108 --> 00:14:43,794
So these four aspects of CICD, monitoring and capacity

229
00:14:43,842 --> 00:14:48,300
planning and incident management are the four major themes across

230
00:14:48,750 --> 00:14:52,310
all SRE teams. So automating

231
00:14:52,390 --> 00:14:56,534
these centrally helps us reduce the cost overall.

232
00:14:56,662 --> 00:14:59,754
And this is yet another place where we have been very

233
00:14:59,792 --> 00:15:03,802
lucky to be able to invest onto horizontal products.

234
00:15:03,936 --> 00:15:07,706
For example, our team focuses on the CI CD products. This helps

235
00:15:07,738 --> 00:15:11,226
us reduce the cost of maintaining CI CD platforms and CI

236
00:15:11,258 --> 00:15:14,786
CD tools specifically for every single team, because now

237
00:15:14,808 --> 00:15:17,890
they can focus on their vertical team based strategies.

238
00:15:19,750 --> 00:15:23,502
And this concludes a section of having the ability

239
00:15:23,566 --> 00:15:25,730
to regulate the workload.

240
00:15:27,030 --> 00:15:29,986
So we want to be able to prioritize the work, we want to be able

241
00:15:30,008 --> 00:15:33,558
to push back when there are unreliable practices. As I mentioned before, we want to

242
00:15:33,564 --> 00:15:36,658
be able to sometimes say that we want to be able to focus on reliability

243
00:15:36,754 --> 00:15:39,450
as such and not focus on feature development anymore.

244
00:15:40,030 --> 00:15:43,866
And obviously the fourth aspect of blamelessness. Blamelessness is

245
00:15:43,888 --> 00:15:46,886
something which is homegrown within SRE for most parts,

246
00:15:46,918 --> 00:15:50,106
right? Whenever something goes wrong, we want to be

247
00:15:50,128 --> 00:15:52,798
able to capture it well and we want to be able to make sure we

248
00:15:52,804 --> 00:15:57,310
don't repeat the same thing again, having postmortems for every incident

249
00:15:57,650 --> 00:16:01,418
and writing our action items and ensuring the postmortem action items

250
00:16:01,434 --> 00:16:04,994
are fixed right on time and they solve the

251
00:16:05,032 --> 00:16:08,500
problem at the root cause. And we don't hit any other issue

252
00:16:09,110 --> 00:16:13,326
after that are some of the basic principles of SF,

253
00:16:13,518 --> 00:16:17,542
because we have paid the price. Making it

254
00:16:17,596 --> 00:16:21,542
blameless ensures that people put in all the thoughts as to what

255
00:16:21,596 --> 00:16:24,934
all went wrong and what all have gone wrong and how

256
00:16:24,972 --> 00:16:28,554
the system should be resilient to prevent those

257
00:16:28,592 --> 00:16:30,460
issues from happening in the future.

258
00:16:32,350 --> 00:16:35,930
Because human errors are really system

259
00:16:36,000 --> 00:16:39,674
problems at the end, right? So failure is an opportunity to

260
00:16:39,712 --> 00:16:43,058
improve and not to blame blunt

261
00:16:43,094 --> 00:16:46,782
and switchbox. So instead

262
00:16:46,836 --> 00:16:50,554
of pointing fingers, we want to be able to ensure the reliability

263
00:16:50,602 --> 00:16:54,074
of the service and find out what went wrong and trying to ensure

264
00:16:54,122 --> 00:16:57,746
that gets better over time. So we want to be able to improve the

265
00:16:57,768 --> 00:17:01,646
mean time, to detect and mean time to repair of any failure.

266
00:17:01,758 --> 00:17:05,298
Because if come things similar to that can happen in the future, we want

267
00:17:05,304 --> 00:17:09,166
to be able to find that out as soon as possible, and in fact hopefully

268
00:17:09,198 --> 00:17:12,806
not even find that out, because we have ensured that we have fixed them on

269
00:17:12,828 --> 00:17:16,022
the postmodern action items. But if at all we catch them, we find that out

270
00:17:16,076 --> 00:17:19,786
and we fix them as soon as possible. So to

271
00:17:19,808 --> 00:17:23,494
recap, these are the four principles of SRE

272
00:17:23,622 --> 00:17:27,180
and how we benefited with the product management in each of them.

273
00:17:27,630 --> 00:17:31,674
So, to conclude my talk, I hope

274
00:17:31,712 --> 00:17:35,694
I've given you a sense of how we benefited in our team with

275
00:17:35,732 --> 00:17:39,662
a dedicated product manager in each of these four principles, and how these

276
00:17:39,716 --> 00:17:42,686
four principles can be seen through the lens of product.

277
00:17:42,868 --> 00:17:46,814
And what I've seen in a lot of teams within Google as well,

278
00:17:46,852 --> 00:17:50,286
is that the senior members of the team,

279
00:17:50,468 --> 00:17:54,314
also the people who are into the leadership,

280
00:17:54,362 --> 00:17:58,214
technical leadership, and management, generally, wear the hat of product management for

281
00:17:58,252 --> 00:18:01,798
SRE, and any training through them in

282
00:18:01,804 --> 00:18:05,302
the aspects of product management has been really beneficial because

283
00:18:05,356 --> 00:18:09,014
they understand the users and they understand what the product can

284
00:18:09,052 --> 00:18:12,166
do for the users. I hope everyone has got

285
00:18:12,188 --> 00:18:15,860
the sense of the product management in SRE and hope you liked it.

