1
00:00:24,090 --> 00:00:27,830
And welcome to Learning Rust by building CLI tools.

2
00:00:28,330 --> 00:00:31,654
Some intro about me could find me at

3
00:00:31,692 --> 00:00:34,886
Jim lynch codes, also in the New Jersey New

4
00:00:34,908 --> 00:00:38,374
York City area. Like to do lots of things.

5
00:00:38,572 --> 00:00:42,280
Been working as a software engineer for about ten years.

6
00:00:43,210 --> 00:00:47,570
I wouldn't consider myself a rust expert.

7
00:00:47,730 --> 00:00:51,214
Been coding in it for a few years, but sometimes

8
00:00:51,332 --> 00:00:55,038
still feel like I'm kind of a noob. And I would say my

9
00:00:55,124 --> 00:00:58,686
progression of my favorite programming languages started

10
00:00:58,788 --> 00:01:02,314
back with action Script, three flash games,

11
00:01:02,362 --> 00:01:06,514
and using Java for the back end and VBA for

12
00:01:06,632 --> 00:01:10,306
Microsoft applications. Then it kind of progressed to

13
00:01:10,488 --> 00:01:14,238
typescript, react and node js

14
00:01:14,334 --> 00:01:17,926
and all those kind of things. Got into clojure for a

15
00:01:17,948 --> 00:01:20,498
while, very functional lisp syntax,

16
00:01:20,674 --> 00:01:24,402
and now I feel like Rust is my favorite

17
00:01:24,466 --> 00:01:27,922
programming language. Kind of steals all these good things

18
00:01:27,996 --> 00:01:31,626
from the other ones. So why do people come

19
00:01:31,648 --> 00:01:34,758
to Rust? Well, it's probably faster

20
00:01:34,854 --> 00:01:38,490
than what you were using before, and it's also safer than C,

21
00:01:38,560 --> 00:01:42,998
C Plus plus, and less painful, dangerous to code in.

22
00:01:43,184 --> 00:01:46,830
There's no garbage collector virtual machine,

23
00:01:47,330 --> 00:01:50,602
and here is kind of a famous picture.

24
00:01:50,666 --> 00:01:55,090
This is from the blog posts of why discord

25
00:01:55,510 --> 00:01:59,570
is switching from go to rust. And you can see these spikes

26
00:01:59,990 --> 00:02:03,810
are basically the cpu working really hard,

27
00:02:03,960 --> 00:02:07,766
the response times taking a lot longer

28
00:02:07,868 --> 00:02:12,082
than they should. And this is pretty much from the garbage collector

29
00:02:12,146 --> 00:02:16,066
kicking in. Okay, so once people start using Rust,

30
00:02:16,178 --> 00:02:19,974
why do they end up falling in love with it? Usually the

31
00:02:20,012 --> 00:02:23,386
super elegant syntax, right? Just the fact

32
00:02:23,408 --> 00:02:26,666
that variables can never have a null value. You have

33
00:02:26,688 --> 00:02:30,178
this explicit syntax for all meetability

34
00:02:30,374 --> 00:02:34,058
fields, visibility heap for stack allocation,

35
00:02:34,234 --> 00:02:38,510
and it has a very functional ish feeling syntax,

36
00:02:38,850 --> 00:02:42,706
right? Just the match syntax and how if is

37
00:02:42,728 --> 00:02:46,830
an expression. Here's a chart that Rust developers

38
00:02:46,910 --> 00:02:51,086
love to show. This is the GitHub most loved programming

39
00:02:51,118 --> 00:02:54,306
languages, and we can see rust at

40
00:02:54,328 --> 00:02:57,750
the very top, number one by pretty large margin.

41
00:02:58,330 --> 00:03:02,290
Okay, so why use Rust

42
00:03:02,370 --> 00:03:06,086
for CLI tools? And why CLI tools as

43
00:03:06,108 --> 00:03:10,266
a way to learn Rust? Well, CLI tool

44
00:03:10,368 --> 00:03:13,738
is the default thing that's created when you run cargo new

45
00:03:13,824 --> 00:03:17,226
and create these new project. These CLi tools are

46
00:03:17,248 --> 00:03:21,054
usually small, isolated projects, which makes it

47
00:03:21,092 --> 00:03:23,998
easy to just practice one specific thing.

48
00:03:24,084 --> 00:03:27,582
Rust. And the speed and efficiency of

49
00:03:27,636 --> 00:03:31,086
rust make it a great choice for building a

50
00:03:31,108 --> 00:03:34,242
real CLI tool. One day you could

51
00:03:34,376 --> 00:03:37,682
use go or python or node js or something

52
00:03:37,736 --> 00:03:41,298
else, but even just that little bit of

53
00:03:41,384 --> 00:03:45,482
garbage collector virtual machine that has to boot up in the beginning,

54
00:03:45,646 --> 00:03:49,554
you'll usually find the split second of delay,

55
00:03:49,682 --> 00:03:51,960
and that can be annoying for some people.

56
00:03:53,050 --> 00:03:56,886
So it can be nice to build them in

57
00:03:56,908 --> 00:04:00,410
rust and then you just have everything execute extremely fast.

58
00:04:00,560 --> 00:04:04,586
But how do you know that it works? So you

59
00:04:04,608 --> 00:04:07,882
can use these small exercises as a way to practice not

60
00:04:07,936 --> 00:04:12,058
just writing the rust code to complete the task,

61
00:04:12,154 --> 00:04:15,466
but also to practice writing automated tests

62
00:04:15,578 --> 00:04:19,200
to make sure your rust code works. Okay,

63
00:04:19,810 --> 00:04:23,486
key thing is to put your unit tests and integration tests

64
00:04:23,518 --> 00:04:26,766
where cargo is expecting them. And here's

65
00:04:26,798 --> 00:04:30,594
a little example. Say we're testing this lib rs in

66
00:04:30,632 --> 00:04:34,110
the source folder. You'd put your implementation

67
00:04:34,190 --> 00:04:37,586
code for lib rs in that file, and you'd

68
00:04:37,618 --> 00:04:41,222
also put your unit tests for lib rs in that same

69
00:04:41,276 --> 00:04:44,934
file. Then in these

70
00:04:45,132 --> 00:04:47,350
integrationtest rs,

71
00:04:48,030 --> 00:04:51,546
you would put your integration tests and basically all the

72
00:04:51,568 --> 00:04:55,302
files inside of that tests folder that's parallel

73
00:04:55,366 --> 00:04:58,890
to source would hold all integration tests.

74
00:04:59,470 --> 00:05:03,834
Okay, you can also use these exercises

75
00:05:03,882 --> 00:05:06,954
as a way to get familiar with the macros

76
00:05:07,002 --> 00:05:10,990
used for testing, like these CFG test and assert

77
00:05:11,810 --> 00:05:15,442
books. Books are nice too. Here are a few

78
00:05:15,496 --> 00:05:19,054
books. There's lots of good books on rust, and I'd

79
00:05:19,102 --> 00:05:22,260
recommend checking them out. Reading them

80
00:05:22,630 --> 00:05:26,294
before, during after you're working through these

81
00:05:26,332 --> 00:05:29,938
exercises. The GitHub repo remember my handle

82
00:05:29,954 --> 00:05:33,622
is Jim lunchcodes. So they're at GitHub.com

83
00:05:33,756 --> 00:05:37,266
jimlenchcodes rust CLI exercises.

84
00:05:37,458 --> 00:05:40,998
And I also put together some example solutions.

85
00:05:41,174 --> 00:05:44,826
So these are my own personal solutions, not necessarily the

86
00:05:44,848 --> 00:05:49,994
only ones or the best ones, but you can find these@GitHub.com

87
00:05:50,112 --> 00:05:54,414
jimlinchcode rustclixamples and

88
00:05:54,452 --> 00:05:57,854
I just wanted to go over this real quick for people who are totally new

89
00:05:57,892 --> 00:06:01,902
to rust. Really awesome getting started with

90
00:06:01,956 --> 00:06:05,406
rust because we have rust up and you can

91
00:06:05,428 --> 00:06:09,314
find it at Rustsup Rs. Just one command works

92
00:06:09,352 --> 00:06:14,206
on Mac, windows and Linux, and it will install cargo,

93
00:06:14,318 --> 00:06:17,986
the compiler, everything you need for developing

94
00:06:18,018 --> 00:06:21,446
in rust. Okay, so with that out of the

95
00:06:21,468 --> 00:06:24,710
way, let's jump in and explore the exercises.

96
00:06:25,130 --> 00:06:29,050
Okay, so before we take a look at the code, just wanted to show you

97
00:06:29,200 --> 00:06:32,358
how to work on these projects.

98
00:06:32,454 --> 00:06:35,686
Okay, so we're here at the repository

99
00:06:35,798 --> 00:06:39,514
and I recommend making a fork of

100
00:06:39,552 --> 00:06:43,440
this. You can't push directly to my

101
00:06:44,210 --> 00:06:47,818
repository since you don't have permissions.

102
00:06:47,994 --> 00:06:51,866
I'm just going to choose one of my organizations

103
00:06:51,898 --> 00:06:55,074
here as these owner and you can copy the

104
00:06:55,112 --> 00:06:59,042
main branch only. That's fine. And the idea is that

105
00:06:59,176 --> 00:07:02,718
when you create a fork, this will copy all the files

106
00:07:02,814 --> 00:07:06,920
into a repo that you own. So then

107
00:07:07,370 --> 00:07:10,770
you can clone this, work through the projects,

108
00:07:10,850 --> 00:07:14,754
and push your solutions directly

109
00:07:14,802 --> 00:07:18,966
up to your repository here. Okay, here we are in vs

110
00:07:18,998 --> 00:07:22,906
code and I'm going to go

111
00:07:22,928 --> 00:07:26,742
through some of these files here. First, let's look at the readme

112
00:07:26,806 --> 00:07:29,340
in the root of this project. Okay?

113
00:07:29,710 --> 00:07:33,438
And this is saying again, we can use rest up to install

114
00:07:33,524 --> 00:07:37,134
cargo and everything. We can run cargo version to

115
00:07:37,172 --> 00:07:40,702
check that we have installed. And these, in each of these

116
00:07:40,756 --> 00:07:44,286
projects we can run the commands cargo

117
00:07:44,318 --> 00:07:46,660
run and cargo test.

118
00:07:47,510 --> 00:07:50,994
You can also run these tests with some code

119
00:07:51,032 --> 00:07:54,050
coverage output using this tarpaulin.

120
00:07:54,890 --> 00:07:58,406
And if you want to get crazy, you can even run

121
00:07:58,508 --> 00:08:01,160
mutation testing. Okay?

122
00:08:01,610 --> 00:08:06,070
And you can work through these in any order. They're totally independent.

123
00:08:06,570 --> 00:08:10,034
So the anatomy of an exercises. Each exercise

124
00:08:10,082 --> 00:08:13,718
will have a title, will have kind of a little backstory,

125
00:08:13,814 --> 00:08:17,514
an imaginary real world situation of where

126
00:08:17,552 --> 00:08:20,990
this could be useful. The exercise, the actual

127
00:08:21,060 --> 00:08:24,970
goal thing you need to accomplish some suggestions

128
00:08:25,050 --> 00:08:29,578
about how to write tests for this bullet

129
00:08:29,594 --> 00:08:33,042
points of the skills practice some things

130
00:08:33,096 --> 00:08:37,202
that you can add to your rust toolbox of just

131
00:08:37,256 --> 00:08:40,370
things that you're confident that you can do in rust.

132
00:08:41,110 --> 00:08:44,622
Bonus sometimes there will be bonus ideas

133
00:08:44,686 --> 00:08:47,350
for how you can push it further.

134
00:08:48,010 --> 00:08:51,554
And in a hints MD file,

135
00:08:51,682 --> 00:08:55,766
I've put some hints in case you get stuck. And just the

136
00:08:55,788 --> 00:08:59,858
idea of building your own rust toolbox where you

137
00:08:59,884 --> 00:09:03,494
have all these little examples of code that you've written.

138
00:09:03,542 --> 00:09:06,666
So if you need to do that again in the future,

139
00:09:06,848 --> 00:09:10,882
you have it right there in your toolbox as a reference

140
00:09:10,966 --> 00:09:14,814
or as code that you can just copy right over and

141
00:09:14,932 --> 00:09:18,160
allows you to just really hit the ground running.

142
00:09:18,690 --> 00:09:22,534
Okay, we talked about this a little bit. Why rust

143
00:09:22,682 --> 00:09:26,782
is great for CLI tools. Fast execution

144
00:09:26,846 --> 00:09:30,514
and startup time. Very low level control

145
00:09:30,632 --> 00:09:33,874
with these nice syntax. Cargo is

146
00:09:33,912 --> 00:09:38,086
a really awesome build tool and

147
00:09:38,268 --> 00:09:41,030
CLI tools just for working with rust.

148
00:09:41,610 --> 00:09:45,606
And coding with rust is know once you get the hang of it,

149
00:09:45,708 --> 00:09:49,334
you might find that you actually really like working in rust.

150
00:09:49,462 --> 00:09:53,334
And you really don't want to go back to coding in typescript

151
00:09:53,382 --> 00:09:56,860
or python or whatever you were doing before.

152
00:09:57,390 --> 00:10:00,554
Have the solutions these in these rust CLI examples.

153
00:10:00,602 --> 00:10:04,446
Repo contributing I would

154
00:10:04,468 --> 00:10:08,478
love to have some other faces on the repo of

155
00:10:08,564 --> 00:10:12,266
people who have contributed, maybe fixing

156
00:10:12,298 --> 00:10:16,206
typos or even adding more exercises

157
00:10:16,238 --> 00:10:19,634
here. Totally open to that. So open some

158
00:10:19,672 --> 00:10:23,214
issues if you have ideas or pull requests,

159
00:10:23,262 --> 00:10:26,006
if you want to just jump into working on it.

160
00:10:26,188 --> 00:10:30,070
And this is all MIT open source, so feel free

161
00:10:30,140 --> 00:10:34,534
to use this code for whatever personal

162
00:10:34,652 --> 00:10:38,374
or commercial projects that you have. Okay, now I'm just

163
00:10:38,412 --> 00:10:41,110
going to briefly talk about each of these projects.

164
00:10:41,690 --> 00:10:45,430
Hello world, the classic

165
00:10:45,510 --> 00:10:49,562
example. All you need to do is write a function that prints hello

166
00:10:49,616 --> 00:10:53,226
world bin files helps

167
00:10:53,258 --> 00:10:56,542
you to understand breaking up your functions into

168
00:10:56,596 --> 00:11:00,730
different files and modules and rust argparse

169
00:11:00,890 --> 00:11:04,260
since we're building a command line tool,

170
00:11:04,710 --> 00:11:08,126
you probably want to parse arguments. So that's

171
00:11:08,158 --> 00:11:11,486
positional arguments or flags

172
00:11:11,598 --> 00:11:15,254
that you can pass in either the long

173
00:11:15,292 --> 00:11:19,414
flag with two dashes or these short flag with one dash and

174
00:11:19,452 --> 00:11:23,014
these potentially taking arguments with your

175
00:11:23,052 --> 00:11:26,934
flags. For env reader, this is

176
00:11:26,972 --> 00:11:31,334
reading environment variables. If you have API keys

177
00:11:31,382 --> 00:11:35,114
or secrets, definitely recommended to

178
00:11:35,152 --> 00:11:39,398
save them into an environment variables file

179
00:11:39,494 --> 00:11:42,654
or somehow load them rather than just

180
00:11:42,692 --> 00:11:46,382
hard coding these into your code and pushing them up to get number

181
00:11:46,436 --> 00:11:50,094
five, table of chairs. This one,

182
00:11:50,292 --> 00:11:54,190
kind of goofy. We have a bunch of data about chairs

183
00:11:54,270 --> 00:11:58,066
and you want to render them in a table and

184
00:11:58,168 --> 00:12:01,534
this just helps you practice rendering a table

185
00:12:01,582 --> 00:12:04,642
of data in the command line. Number six,

186
00:12:04,696 --> 00:12:08,354
Fibonacci. In this one classic

187
00:12:08,402 --> 00:12:11,766
Fibonacci series, you're given a number and you want

188
00:12:11,788 --> 00:12:16,274
to return the Fibonacci series

189
00:12:16,402 --> 00:12:20,842
that ends with that. Number seven

190
00:12:20,976 --> 00:12:25,098
apology letter. This has some

191
00:12:25,264 --> 00:12:29,750
string parsing, some file loading

192
00:12:29,830 --> 00:12:33,582
read write. Basically you have an apology letter with

193
00:12:33,636 --> 00:12:37,182
some placeholders and you

194
00:12:37,236 --> 00:12:40,814
pass in the person's name and

195
00:12:40,932 --> 00:12:44,334
the thing you're apologizing for and we'll automatically generate

196
00:12:44,382 --> 00:12:48,050
an apology letter. Number eight, image resizer.

197
00:12:48,390 --> 00:12:52,578
This one you want to load an image and

198
00:12:52,664 --> 00:12:55,830
save that image in different sizes.

199
00:12:56,410 --> 00:13:00,680
Number nine GitHub scaffold. So in this one

200
00:13:01,210 --> 00:13:05,250
you're writing a CLI tool that automatically

201
00:13:05,410 --> 00:13:09,190
scaffolds a project from a repo on GitHub.

202
00:13:09,350 --> 00:13:13,370
So it's automatically doing that clone and pulling the files.

203
00:13:13,790 --> 00:13:17,738
Number ten, yes no. So in things one, you want to

204
00:13:17,904 --> 00:13:21,678
take input from the user not

205
00:13:21,764 --> 00:13:25,680
through arguments, but by

206
00:13:26,290 --> 00:13:30,862
waiting. It's kind of that give and take question

207
00:13:30,996 --> 00:13:35,154
sort of CLI tool where the

208
00:13:35,192 --> 00:13:38,562
program will run. It will ask you hey,

209
00:13:38,616 --> 00:13:41,762
we need an input, yes or no? And then the program will just

210
00:13:41,816 --> 00:13:45,246
sit there and hang until the user enters

211
00:13:45,278 --> 00:13:48,702
something, and then it will respond

212
00:13:48,766 --> 00:13:51,560
depending on if the user enters. Yes or no.

213
00:13:52,090 --> 00:13:56,246
Okay, number eleven, get json. This one

214
00:13:56,348 --> 00:14:00,698
is basically just making an API call, making a get rest

215
00:14:00,784 --> 00:14:04,022
call and parsing the jSon,

216
00:14:04,086 --> 00:14:08,250
displaying it. Okay, number twelve, happy birthday.

217
00:14:08,910 --> 00:14:13,118
This one has to do with working with dates. So basically

218
00:14:13,204 --> 00:14:16,702
you're given a birthday of the user and

219
00:14:16,756 --> 00:14:20,526
you need to display if it is the user's birthday or not,

220
00:14:20,628 --> 00:14:24,370
and if not, how many days until their next birthday.

221
00:14:24,950 --> 00:14:29,140
13. Agile stand up. So in this one

222
00:14:29,590 --> 00:14:33,406
you're kind of just taking text input

223
00:14:33,438 --> 00:14:37,202
from the user. That has to do with agile

224
00:14:37,266 --> 00:14:41,014
stand up. So you're reading things like

225
00:14:41,132 --> 00:14:44,418
what did the person do yesterday,

226
00:14:44,514 --> 00:14:48,362
what did they work on, what are they working on today and if

227
00:14:48,416 --> 00:14:51,286
they are stuck on anything. 14.

228
00:14:51,398 --> 00:14:55,322
Pizza order so another one where you're taking text

229
00:14:55,376 --> 00:14:59,322
from the user. This one is about what

230
00:14:59,376 --> 00:15:02,778
type of pizza they would like, topping,

231
00:15:02,874 --> 00:15:05,966
size, and those kind of things. 15.

232
00:15:06,068 --> 00:15:09,438
Higher or lower? So this is sort of

233
00:15:09,444 --> 00:15:13,294
a guessing game where the

234
00:15:13,412 --> 00:15:16,980
program will think of a secret number and you have to guess

235
00:15:17,910 --> 00:15:22,222
between one and 100. And as you give wrong answers,

236
00:15:22,366 --> 00:15:25,720
it will tell you if the correct answer is higher or lower.

237
00:15:26,570 --> 00:15:30,440
16. Wordle game so this one,

238
00:15:30,890 --> 00:15:34,738
no relation to New York Times or Josh Wordle

239
00:15:34,754 --> 00:15:39,098
or any of them, but this one is building a

240
00:15:39,184 --> 00:15:41,340
five letter word guessing game.

241
00:15:42,030 --> 00:15:45,802
Seventeen s these read, write. So this

242
00:15:45,856 --> 00:15:49,430
is reading and writing to an Amazon

243
00:15:49,510 --> 00:15:51,950
s three bucket. 18.

244
00:15:52,530 --> 00:15:56,718
Database crud so this one you are

245
00:15:56,804 --> 00:16:00,606
building. Create, read, update, and delete functions with the

246
00:16:00,628 --> 00:16:04,658
database. You have lots of

247
00:16:04,744 --> 00:16:07,918
freedom here to use any kind of database

248
00:16:08,014 --> 00:16:11,778
you would like. And I think it would be really interesting

249
00:16:11,864 --> 00:16:15,558
in my examples repo to have

250
00:16:15,724 --> 00:16:19,350
lots of different examples here of

251
00:16:19,420 --> 00:16:22,150
doing these crud operations with different databases.

252
00:16:22,810 --> 00:16:26,166
19. Audio stutter so this

253
00:16:26,188 --> 00:16:29,814
one you're given can audio file and you

254
00:16:29,852 --> 00:16:33,160
need to make a cool stutter effect.

255
00:16:34,090 --> 00:16:38,342
And 20. Traveling salesman where you're given

256
00:16:38,476 --> 00:16:42,046
a graph of weighted edges and you have

257
00:16:42,068 --> 00:16:45,550
to write a function that finds these most efficient path.

258
00:16:46,130 --> 00:16:50,222
So that's all the exercises. Go through them.

259
00:16:50,356 --> 00:16:53,194
Have fun. Let me know if you get stuck.

260
00:16:53,322 --> 00:16:56,766
Thanks for watching my talk. Hope this was

261
00:16:56,788 --> 00:17:00,218
helpful and happy coding.

262
00:17:00,394 --> 00:17:00,650
Bye.

