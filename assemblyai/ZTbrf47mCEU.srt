1
00:00:00,330 --> 00:00:04,158
Hey, guys. My name is Joyce. This is my dog, Lucy. She's a

2
00:00:04,164 --> 00:00:07,082
year old, and I am in from San Francisco.

3
00:00:07,146 --> 00:00:10,474
She's alone. So I'm going to head back tomorrow to see Lucy.

4
00:00:10,602 --> 00:00:14,490
So my talk is, who owns Chaos? Who is responsible for chaos?

5
00:00:14,650 --> 00:00:17,754
Again, my name is Joyce. I'm a developer advocate at Postman.

6
00:00:17,882 --> 00:00:22,126
So thank you, John and Manuel, for demoing Postman earlier this morning.

7
00:00:22,308 --> 00:00:25,874
I'm not going to be talking about Postman, but it is an API

8
00:00:25,922 --> 00:00:29,906
development platform used by more than 8 million developers.

9
00:00:30,018 --> 00:00:33,126
So one of the best parts of my job is that there's a ton of

10
00:00:33,148 --> 00:00:36,534
people who use Postman, and I get to talk with all of them

11
00:00:36,652 --> 00:00:39,800
and find out what are they working on and how are they doing it.

12
00:00:40,330 --> 00:00:44,058
So this is kind of a side project of mine, chaos. I've been interested in

13
00:00:44,064 --> 00:00:47,450
it. So I've been going to community days, conferences, and one of the questions

14
00:00:47,520 --> 00:00:50,734
that I had when I was in the audience listening to people talk

15
00:00:50,772 --> 00:00:53,934
about chaos engineering, who, who, who, who, who?

16
00:00:53,972 --> 00:00:57,674
Who is responsible for chaos? With the engineering slack

17
00:00:57,722 --> 00:01:00,974
group, they've posted a diagram of

18
00:01:01,012 --> 00:01:05,138
the people in the tools in this chaos community. These are the famous people.

19
00:01:05,304 --> 00:01:08,260
Let's take a quick look at this data and break it down.

20
00:01:09,030 --> 00:01:12,850
So what job titles are doing chaos? Who here identifies as being

21
00:01:12,920 --> 00:01:14,420
engineer in this room?

22
00:01:16,870 --> 00:01:19,906
Okay, almost everyone here. So if

23
00:01:19,928 --> 00:01:23,254
you look at that diagram of the tools that the famous people in

24
00:01:23,292 --> 00:01:26,994
chaos, most of them include the word engineer

25
00:01:27,042 --> 00:01:31,094
in their job title. There are specialized roles or vanity roles, as villas

26
00:01:31,142 --> 00:01:35,174
will call them, like chaos engineer. You have site reliability engineers

27
00:01:35,222 --> 00:01:38,826
that also might handle chaos. And about third of the

28
00:01:38,848 --> 00:01:42,942
community comes from functions like security or ops or

29
00:01:42,996 --> 00:01:46,554
R D. So typically, the folks

30
00:01:46,602 --> 00:01:49,966
that are most motivated to start a chaos program

31
00:01:50,148 --> 00:01:53,562
are the ones who feel the pain of a failure in production.

32
00:01:53,706 --> 00:01:56,874
So if you're on call, Colton Andres,

33
00:01:56,922 --> 00:02:00,274
CEO at Gremlin, says it boils down to who gets paged. If that's an

34
00:02:00,312 --> 00:02:04,034
SRE or ops team, they have the most incentive to start doing this

35
00:02:04,072 --> 00:02:07,666
work and making their lives better. And this is how Colton personally

36
00:02:07,698 --> 00:02:11,126
started off doing chaos engineering when he was over at Netflix. So when

37
00:02:11,148 --> 00:02:14,994
you're thinking about roles and responsibilities, which typical responsibilities

38
00:02:15,122 --> 00:02:19,100
do the folks who have that are interested in chaos have?

39
00:02:20,350 --> 00:02:23,718
So we have chaos specialists, those vanity roles.

40
00:02:23,814 --> 00:02:27,226
You have a dedicated team for chaos engineering, and it might actually be

41
00:02:27,248 --> 00:02:31,120
a youre competency for your business. Other companies

42
00:02:31,490 --> 00:02:34,794
have sres or production engineers. They handle

43
00:02:34,842 --> 00:02:38,558
continuous deployment and production support. So postman engineering, we have

44
00:02:38,564 --> 00:02:42,366
a microservice architecture and the ones that are responsible for

45
00:02:42,388 --> 00:02:46,274
deployment and uptime are the developers that are building the services themselves.

46
00:02:46,472 --> 00:02:49,806
If your team has a traditional DevOps department,

47
00:02:49,998 --> 00:02:52,930
they might be doing the deployment and uptime.

48
00:02:53,590 --> 00:02:56,834
Other people who care about chaos might be responsible for

49
00:02:56,872 --> 00:03:00,054
incident management. So Russ called it earlier this morning, he called

50
00:03:00,092 --> 00:03:03,126
it a post mortem analysis. Right. But the

51
00:03:03,148 --> 00:03:06,626
difference here between incident management and chaos is that you're shifting

52
00:03:06,658 --> 00:03:10,374
the focus from the post mortem to the pre mortem, and you're actively proactively

53
00:03:10,422 --> 00:03:13,740
trying to prevent errors from happening.

54
00:03:14,510 --> 00:03:18,454
So companies that have chaos engineers,

55
00:03:18,502 --> 00:03:21,814
there are some companies that have domain knowledge,

56
00:03:21,862 --> 00:03:25,390
right? So you're talking about the data, the storage, or the networking teams.

57
00:03:26,050 --> 00:03:29,598
And lastly, we think about folks that. Who, who, who is responsible for

58
00:03:29,604 --> 00:03:32,830
chaos? Responsible for, and this one might be a little bit controversial here,

59
00:03:32,980 --> 00:03:36,238
but those that have responsibility for testing and production,

60
00:03:36,414 --> 00:03:38,210
who here test in production?

61
00:03:39,990 --> 00:03:41,860
Okay, I see, like seven hands.

62
00:03:42,950 --> 00:03:46,742
So this is the best environment for this. It has the most

63
00:03:46,796 --> 00:03:50,210
information to accurately recreate situations

64
00:03:50,290 --> 00:03:53,430
and demonstrate the true consequences of your attacks.

65
00:03:53,770 --> 00:03:57,698
But some companies can't test in production. So if you have

66
00:03:57,804 --> 00:04:01,334
fincare or healthcare, you might have compliance

67
00:04:01,382 --> 00:04:04,954
issues. You can't take down customer data or it's very,

68
00:04:04,992 --> 00:04:09,370
very costly. So these are the general responsibilities of folks who do chaos.

69
00:04:10,830 --> 00:04:14,762
Which roles tend to have these responsibilities? When you translate these responsibilities

70
00:04:14,826 --> 00:04:18,078
to roles, a lot of the people doing chaos tend to

71
00:04:18,084 --> 00:04:22,030
be quality driven or production focused operations engineers.

72
00:04:24,470 --> 00:04:28,302
So here's my question. This is all good. Chaos engineers

73
00:04:28,366 --> 00:04:31,758
are running chaos tests. They're identifying vulnerabilities,

74
00:04:31,854 --> 00:04:34,050
and they're automating these experiments.

75
00:04:34,970 --> 00:04:38,242
My question, why aren't testers doing chaos?

76
00:04:38,386 --> 00:04:41,030
Does anyone also identify as a tester?

77
00:04:43,610 --> 00:04:46,118
Okay. About the same amount of hands.

78
00:04:46,284 --> 00:04:50,146
Okay. So before there was chaos engineering, there was chaos

79
00:04:50,178 --> 00:04:53,558
testing. So if you go back and look at the earliest blog posts,

80
00:04:53,574 --> 00:04:57,142
when Netflix first introduced Chaos monkey, they actually called it chaos

81
00:04:57,206 --> 00:05:01,194
testing, and they introduced it to the test community. So it makes

82
00:05:01,232 --> 00:05:04,746
sense if you think about the traditional software development lifecycle,

83
00:05:04,858 --> 00:05:08,862
youre should be introducing the responsibility of resilience or quality

84
00:05:08,996 --> 00:05:12,270
earlier in that cycle, when the cost of bugs is the lowest.

85
00:05:12,930 --> 00:05:16,814
That's a noble goal. But as we talked about earlier, the testers

86
00:05:16,862 --> 00:05:20,254
aren't the ones on call. They're not rolling out hot fixes

87
00:05:20,302 --> 00:05:23,746
in production. So this is the reason why we see a bunch of

88
00:05:23,768 --> 00:05:27,410
sres and ops people pioneering the work in chaos engineering.

89
00:05:28,230 --> 00:05:31,634
But because you want to build resilience a little bit earlier in the software

90
00:05:31,682 --> 00:05:34,946
development lifecycle, we actually see a very new trend

91
00:05:34,978 --> 00:05:37,778
of testers, people who solely identify as tester,

92
00:05:37,874 --> 00:05:41,674
who focus, are focused now on production testing in addition to

93
00:05:41,712 --> 00:05:45,078
what we imagine that they focus on pre release testing.

94
00:05:45,254 --> 00:05:48,726
So one such test engineer said the biggest

95
00:05:48,758 --> 00:05:51,994
limitation in the fear of delivering software faster is the focus

96
00:05:52,032 --> 00:05:54,250
on adding more pre release testing.

97
00:05:55,710 --> 00:05:59,006
Abby Bangser says chaos engineering is all about building trust, that your

98
00:05:59,028 --> 00:06:02,222
systems are resilient and the meantime to recovery is

99
00:06:02,276 --> 00:06:05,986
acceptable. She goes on further to say chaos engineering is

100
00:06:06,008 --> 00:06:09,170
all about building confidence that we aren't fragile.

101
00:06:09,670 --> 00:06:13,042
We have less fear that any one change will bring down our system.

102
00:06:13,176 --> 00:06:16,786
And when issues do occur, we know how to triage and

103
00:06:16,808 --> 00:06:20,866
deploy fixes faster. This is Abby Bangzer, based in London

104
00:06:20,898 --> 00:06:24,818
here, one of the very few testers I found that was approaching

105
00:06:24,914 --> 00:06:28,262
and trying to get a Chaos program launched at her company. So why

106
00:06:28,316 --> 00:06:31,994
aren't more testers doing chaos today? Have you even heard of such a thing?

107
00:06:32,112 --> 00:06:35,702
So I've talked to testers at events like these that are curious

108
00:06:35,766 --> 00:06:38,966
about chaos, but they're still spending

109
00:06:38,998 --> 00:06:41,630
most of their time on pre release testing.

110
00:06:41,970 --> 00:06:46,286
And it's very rare, but especially at events like these, the people that have a

111
00:06:46,468 --> 00:06:49,742
side project or a passion project. We're starting now

112
00:06:49,796 --> 00:06:53,626
to see cast experiments created by sres

113
00:06:53,818 --> 00:06:57,426
and then run and automated by testers. So you can

114
00:06:57,448 --> 00:07:00,818
see that this is an anonymous attribution here, but I've talked to a

115
00:07:00,824 --> 00:07:04,546
few very large companies that do have this kind of workflow. And so we see

116
00:07:04,568 --> 00:07:08,626
these emerging programs that are being pushed

117
00:07:08,738 --> 00:07:12,454
by the testing function. But job titles aside, very few people

118
00:07:12,492 --> 00:07:15,762
here identify solely as being tester. Job titles aside,

119
00:07:15,906 --> 00:07:19,226
who can start a chaos program? Who gets the ball rolling on

120
00:07:19,248 --> 00:07:22,886
chaos? Okay, so who has the insights?

121
00:07:23,078 --> 00:07:26,314
Who knows about potential vulnerabilities and

122
00:07:26,352 --> 00:07:28,934
how to properly structure a chaos experiment?

123
00:07:29,062 --> 00:07:32,926
Insights. Who has the access to pull the plug and in

124
00:07:32,948 --> 00:07:36,590
case you need to roll it back, who has the insights to access?

125
00:07:36,660 --> 00:07:40,494
And lastly, who has the organizations pull to

126
00:07:40,532 --> 00:07:43,902
convince management and adjacent teams to support

127
00:07:43,956 --> 00:07:48,606
this chaos program? So this one's probably going to be the hardest

128
00:07:48,638 --> 00:07:52,626
lever to pull. And it doesn't matter where you are, what function you're in,

129
00:07:52,648 --> 00:07:56,574
what industry you're in, what company you're at, it becomes

130
00:07:56,622 --> 00:08:00,038
actually a lot easier if you have a catastrophic failure. So, at the

131
00:08:00,044 --> 00:08:03,942
last chaos event that I was at, I met somebody who told me

132
00:08:04,076 --> 00:08:07,586
that there's now a directive from our CTO to start a Chaos

133
00:08:07,698 --> 00:08:11,554
program. Note this is a director of test after they lost

134
00:08:11,602 --> 00:08:14,906
$600 million in 22 minutes. Not going to talk about this,

135
00:08:14,928 --> 00:08:17,638
but come grab me later to hear the gory details.

136
00:08:17,814 --> 00:08:21,018
So this is the easiest way to start a chaos program when you

137
00:08:21,024 --> 00:08:24,398
have a catastrophic failure. But for the rest of us,

138
00:08:24,564 --> 00:08:27,840
do I need to wait for this? No. Clearly no.

139
00:08:28,770 --> 00:08:31,886
Start thinking about chaos in order to prevent it.

140
00:08:31,988 --> 00:08:35,954
And for you, if you're thinking about starting a Chaos program,

141
00:08:36,152 --> 00:08:39,934
Casey Rosenthal has some advice for you. Casey says perhaps

142
00:08:39,982 --> 00:08:43,714
aggregate bits and pieces from different frameworks that appeal to you and then create

143
00:08:43,752 --> 00:08:47,234
a practice around it. You'll likely be the first person to

144
00:08:47,272 --> 00:08:50,726
create a similar practice in your particular context. And he

145
00:08:50,748 --> 00:08:55,090
goes on further to say, I wish you the best of luck in that undertaking,

146
00:08:55,170 --> 00:08:57,946
but I wouldn't wager that you get it right on your first try or your

147
00:08:57,968 --> 00:09:01,130
second. So be prepared for failure.

148
00:09:02,110 --> 00:09:05,580
Who owns Chaos? Final thoughts here.

149
00:09:08,030 --> 00:09:12,474
More teams and functions new functions are thinking about chaos engineering

150
00:09:12,602 --> 00:09:15,930
because, to use Russ's buzz phrase from earlier,

151
00:09:16,010 --> 00:09:18,990
they're going cloud native stuff is getting complicated,

152
00:09:19,730 --> 00:09:23,534
and they're thinking about how chaos testing can complement or

153
00:09:23,572 --> 00:09:27,122
augment traditional testing. So as youre

154
00:09:27,176 --> 00:09:30,878
teams begin to cover the bases when it comes to pre release testing,

155
00:09:31,054 --> 00:09:35,198
we see them spending more time in production, testing in production.

156
00:09:35,374 --> 00:09:38,614
And now we start to see chaos experiments created by

157
00:09:38,652 --> 00:09:41,750
sres and then run and automated by testers.

158
00:09:42,410 --> 00:09:45,606
And lastly, a valuable chaos test.

159
00:09:45,788 --> 00:09:49,154
Villas was talking about this a little bit earlier, alluding to it, a valuable

160
00:09:49,202 --> 00:09:53,142
chaos test will not only teach you about your systems, but also your team.

161
00:09:53,276 --> 00:09:57,094
So as you're thinking about building more resilient software, also think

162
00:09:57,132 --> 00:09:59,978
about building resilience into your organization,

163
00:10:00,114 --> 00:10:03,626
with your people, with your culture, celebrating the failures instead of hiding

164
00:10:03,658 --> 00:10:07,546
them and sweeping them under the rug. That will impact the overall

165
00:10:07,658 --> 00:10:10,800
resilience of your systems. Thank you.

