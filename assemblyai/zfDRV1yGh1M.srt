1
00:00:27,730 --> 00:00:30,950
Okay guys thank you for joining this hasom talk.

2
00:00:31,020 --> 00:00:34,614
We take a look very quick or

3
00:00:34,652 --> 00:00:38,326
not could be not about observability. Also we focus it

4
00:00:38,348 --> 00:00:41,926
on QR nets that is focused for this talk and

5
00:00:42,028 --> 00:00:45,878
we take a look more deeper about how

6
00:00:45,964 --> 00:00:50,046
we can check an instrument and focus it observability in

7
00:00:50,108 --> 00:00:53,760
our application. So please join to this awesome

8
00:00:54,770 --> 00:00:58,234
journey for today. That is me, that is Jonathan

9
00:00:58,282 --> 00:01:02,720
Jill and let me change the landscape here so

10
00:01:03,670 --> 00:01:07,426
we can start here at this part we talk about

11
00:01:07,528 --> 00:01:11,602
for this little

12
00:01:11,656 --> 00:01:15,170
presentation about observability

13
00:01:15,510 --> 00:01:19,318
and this is me Jonathan Chavez. But let me move here.

14
00:01:19,484 --> 00:01:22,850
So who is Jonathan? Who is Johnny Palm?

15
00:01:22,930 --> 00:01:26,370
Who is Jaden 24? Just a human that loves

16
00:01:26,450 --> 00:01:30,950
share knowledge about instrumentation, about Linux,

17
00:01:31,030 --> 00:01:34,870
about ecosystem, about cloud, about DevOps, about sire,

18
00:01:34,950 --> 00:01:38,074
about something that I

19
00:01:38,112 --> 00:01:41,678
learned I want and I love share that.

20
00:01:41,844 --> 00:01:45,758
That is my social network on GitHub, on YouTube and also for

21
00:01:45,844 --> 00:01:49,022
Twitter of X. And I love this

22
00:01:49,076 --> 00:01:52,898
little quote. Life is really simple but we insist on making it

23
00:01:52,904 --> 00:01:56,434
complicated. That is really true because when we

24
00:01:56,632 --> 00:02:00,434
start for this journey on it journey we

25
00:02:00,472 --> 00:02:03,794
have a lot of challenge every day. So that

26
00:02:03,832 --> 00:02:08,102
is our preposition. I think this talk

27
00:02:08,236 --> 00:02:12,006
observability in kubernetes also we

28
00:02:12,028 --> 00:02:16,290
talk in deep about metrics, logs and traces with open source tools.

29
00:02:16,370 --> 00:02:20,554
That is the best part the open source tools for

30
00:02:20,672 --> 00:02:24,314
our companies on also every part of

31
00:02:24,352 --> 00:02:28,314
the implementation here that is of content for today we talk

32
00:02:28,352 --> 00:02:32,650
about for PSS scope, for introduction observability,

33
00:02:32,810 --> 00:02:36,414
what is CNCF, what kind of tools we

34
00:02:36,452 --> 00:02:39,310
can check for open source tools,

35
00:02:40,450 --> 00:02:44,062
what we have challenged here using observability

36
00:02:44,126 --> 00:02:47,940
on kubernetes and also we take a look in a little demo here.

37
00:02:48,390 --> 00:02:51,858
So start with the introduction site. We need

38
00:02:51,864 --> 00:02:55,022
to take a look very quick about

39
00:02:55,096 --> 00:02:58,902
the QR nets architecture right at this

40
00:02:58,956 --> 00:03:01,526
moment. So we have this part,

41
00:03:01,628 --> 00:03:05,094
the information about how to the QR net

42
00:03:05,132 --> 00:03:08,522
is internally works because we need to take a look here

43
00:03:08,576 --> 00:03:11,706
the control plane and also the worker node that is

44
00:03:11,728 --> 00:03:16,374
related here. And also if we deploy this cluster

45
00:03:16,502 --> 00:03:20,574
using some cloud providers we need to communicate our

46
00:03:20,612 --> 00:03:24,462
cluster using this cloud provider and also we have a little

47
00:03:24,596 --> 00:03:27,390
here also these components.

48
00:03:27,890 --> 00:03:31,662
So we need to take a look more in depth about the

49
00:03:31,796 --> 00:03:34,994
internal worker nodes components that is

50
00:03:35,032 --> 00:03:38,818
related here we have internal for the node we have

51
00:03:38,984 --> 00:03:42,286
container runtime, Docker container

52
00:03:42,318 --> 00:03:45,714
D or something like that. That is part of the node not

53
00:03:45,752 --> 00:03:49,206
for the control plane. Control plane must focus it for the

54
00:03:49,228 --> 00:03:52,834
brain behind of especially for ETCD

55
00:03:52,882 --> 00:03:56,262
and scale part. That is pretty awesome job here

56
00:03:56,316 --> 00:03:59,622
because using the reconciliation process they

57
00:03:59,676 --> 00:04:03,814
mentioned how we can deploy our chain, our workloads

58
00:04:03,862 --> 00:04:06,326
inside of the cluster of kubernetes.

59
00:04:06,518 --> 00:04:10,566
So this part of cube left and Kuberoxy internal

60
00:04:10,598 --> 00:04:15,426
for kubernetes. The Kubernetes is how do we can response

61
00:04:15,478 --> 00:04:19,006
all requests from the control plane side and also using the

62
00:04:19,028 --> 00:04:22,734
Kube proxy for how we can communicate one

63
00:04:22,852 --> 00:04:26,226
process for another. I means how do we

64
00:04:26,248 --> 00:04:30,002
can communicate one port for another port or

65
00:04:30,056 --> 00:04:33,858
one service for another service that is part of the

66
00:04:34,024 --> 00:04:37,254
Kubernetes proxy internal deployed here.

67
00:04:37,452 --> 00:04:41,298
The another scope here are related for the pod.

68
00:04:41,394 --> 00:04:45,030
The pod that is the minimal part that we can check inside

69
00:04:45,100 --> 00:04:48,538
of kubernetes but is the most important I think because

70
00:04:48,624 --> 00:04:52,540
that is related for our application. That is related for

71
00:04:53,070 --> 00:04:57,046
all demon set that we can generate using depends

72
00:04:57,078 --> 00:05:01,020
of our needs current

73
00:05:01,490 --> 00:05:05,390
crds behind of kubernetes. So we need to take a look

74
00:05:05,460 --> 00:05:08,974
for this. That is at the end of the day the world that

75
00:05:09,092 --> 00:05:12,854
was executed and contains our applications

76
00:05:13,002 --> 00:05:15,540
for service all our customers.

77
00:05:16,150 --> 00:05:19,618
So we have here one container or couple

78
00:05:19,704 --> 00:05:22,754
more than one container inside. Here we have one

79
00:05:22,792 --> 00:05:26,278
part for the network, another part for the volume that

80
00:05:26,444 --> 00:05:29,926
you attach for your pod. Depends for your

81
00:05:29,948 --> 00:05:33,490
needs that you need to deploy inside of kubernetes.

82
00:05:33,650 --> 00:05:37,522
Also we have at this moment kubernetes add ons

83
00:05:37,586 --> 00:05:41,446
like DNS like metric server

84
00:05:41,558 --> 00:05:45,142
that you added to the node and you can expose

85
00:05:45,206 --> 00:05:49,850
and communicate and generate this relation between another tools

86
00:05:50,350 --> 00:05:54,234
and another part. We have demons jobs and another objects

87
00:05:54,282 --> 00:05:57,566
inside of kubernetes that will be deployed inside of

88
00:05:57,588 --> 00:06:01,614
the node. But depends exactly for

89
00:06:01,732 --> 00:06:04,670
what kind of object you implemented for your clusters.

90
00:06:04,750 --> 00:06:08,686
Right. So that is a big scope about the architecture

91
00:06:08,718 --> 00:06:12,946
for kubernetes. We have here a lot of challenge if you try to

92
00:06:13,048 --> 00:06:16,226
observe what happened in your cluster, what happened with

93
00:06:16,248 --> 00:06:20,066
your application. The focus for today and this tolkie is focused

94
00:06:20,098 --> 00:06:23,222
for pod that is related for our application.

95
00:06:23,356 --> 00:06:26,742
Right. So we need take a look

96
00:06:26,876 --> 00:06:30,602
very quick about what is observability we have

97
00:06:30,656 --> 00:06:34,458
here observability that is related for the property

98
00:06:34,544 --> 00:06:38,026
for the system. And we can take an

99
00:06:38,048 --> 00:06:41,310
actionable insight for our application that

100
00:06:41,380 --> 00:06:44,670
allow to us to understand the system.

101
00:06:44,820 --> 00:06:49,162
That is the current state depends for the external

102
00:06:49,226 --> 00:06:53,790
inputs and how to these inputs modify

103
00:06:53,870 --> 00:06:58,082
the behavior internal for their application. Right. So I

104
00:06:58,136 --> 00:07:02,446
take this definition from the glossary that is related for CNCF

105
00:07:02,638 --> 00:07:06,878
that we need take a look more in

106
00:07:06,904 --> 00:07:10,918
deep about in this talk. So at this part

107
00:07:11,084 --> 00:07:14,790
we define the oily and white. The oily and white

108
00:07:14,860 --> 00:07:18,918
is related for o for this o and the

109
00:07:19,004 --> 00:07:22,166
eleven characters here and the y that is

110
00:07:22,188 --> 00:07:25,946
the n very fancy. Very similar for the QR. Net scope that

111
00:07:25,968 --> 00:07:29,434
is for Kus. So we have the

112
00:07:29,472 --> 00:07:33,246
same correlation here. Please explore if

113
00:07:33,268 --> 00:07:36,910
you can take a look from some article, something like that you

114
00:07:36,980 --> 00:07:40,346
find observability, you could be you find the oil

115
00:07:40,378 --> 00:07:44,478
and white at the same part that is very common internally.

116
00:07:44,654 --> 00:07:48,402
Depends of your teams or depends of your advantage that you have

117
00:07:48,456 --> 00:07:52,978
internally for all your application that you have currently.

118
00:07:53,144 --> 00:07:55,880
Right. So move for the next.

119
00:07:56,890 --> 00:08:00,198
We start in deep about the

120
00:08:00,284 --> 00:08:03,814
observability equal in triangle. That is very

121
00:08:03,852 --> 00:08:06,886
important for us especially because at

122
00:08:06,908 --> 00:08:10,566
this part we define what kind of information we

123
00:08:10,588 --> 00:08:13,866
can get from the everyday application. We have for one

124
00:08:13,888 --> 00:08:17,900
part once defined for logs, that is

125
00:08:18,350 --> 00:08:22,234
an obstructor data that the application start to execute.

126
00:08:22,362 --> 00:08:25,994
When we execute one application generate

127
00:08:26,122 --> 00:08:29,114
a lot of data behind of the implementation framework,

128
00:08:29,162 --> 00:08:33,102
the implementation languages. So you have the name

129
00:08:33,156 --> 00:08:36,898
for the application could be on something like that and you can store

130
00:08:36,984 --> 00:08:40,706
and get that information. At the end of the day that is one part.

131
00:08:40,808 --> 00:08:44,146
The second part is the metrics that is related for

132
00:08:44,248 --> 00:08:47,890
quantitative information around the components

133
00:08:47,970 --> 00:08:51,586
that support your application. What components? The cpu,

134
00:08:51,698 --> 00:08:55,154
the memory and also the disk that you attach

135
00:08:55,202 --> 00:08:59,082
it for this case for the pod. And also we

136
00:08:59,136 --> 00:09:02,986
can take a look about the traces. That could be

137
00:09:03,008 --> 00:09:06,860
the most challenge here because we have

138
00:09:07,390 --> 00:09:10,426
one request that comes from our application and how do

139
00:09:10,448 --> 00:09:14,890
we can measure that request

140
00:09:14,970 --> 00:09:18,494
jump to another application, how do we can take a look

141
00:09:18,532 --> 00:09:22,046
for that and we can see what happened with this request and what

142
00:09:22,068 --> 00:09:26,430
happened with another response for the autonomous systems or the implementation

143
00:09:26,510 --> 00:09:30,066
and also the communication side that we

144
00:09:30,088 --> 00:09:33,854
need to take a look. How do we can adopt this challenge

145
00:09:33,902 --> 00:09:38,262
for us and how do we can move this challenge also for our

146
00:09:38,316 --> 00:09:42,118
teams internally for take more deep about

147
00:09:42,204 --> 00:09:45,686
information from our systems, right. But we need to take

148
00:09:45,708 --> 00:09:48,906
a look for these three information site

149
00:09:49,088 --> 00:09:52,554
for our applications. So why

150
00:09:52,592 --> 00:09:57,340
we need observability, that is an awesome part because

151
00:09:57,710 --> 00:10:00,586
we take a look very quick for our application.

152
00:10:00,688 --> 00:10:03,534
There is our customers at this site,

153
00:10:03,732 --> 00:10:07,790
we have our cloud provider, something like that or could be environmental.

154
00:10:08,130 --> 00:10:11,098
And this request comes to our firewall.

155
00:10:11,194 --> 00:10:14,466
This request jump to the load balancer, this request jump to

156
00:10:14,488 --> 00:10:18,354
the application, the front application or back end application, I don't know.

157
00:10:18,472 --> 00:10:21,570
And this application queries some data

158
00:10:21,640 --> 00:10:25,198
to the database side and also get information

159
00:10:25,304 --> 00:10:28,930
for our archive. So that is a normal

160
00:10:29,010 --> 00:10:33,030
architecture that you could deploy for your

161
00:10:33,180 --> 00:10:36,982
super or your system at this site. And also we have

162
00:10:37,036 --> 00:10:40,454
here one challenge because we have this spider

163
00:10:40,502 --> 00:10:44,074
guy, right? We have this application and we

164
00:10:44,272 --> 00:10:49,270
generate this application and split this application using the microservices

165
00:10:49,350 --> 00:10:53,246
or services or nanoservices behind off depends of the

166
00:10:53,268 --> 00:10:56,846
architectural definition that you have internally. So you

167
00:10:56,868 --> 00:11:00,814
have this challenge right? Because we are the spidey guy,

168
00:11:01,012 --> 00:11:04,814
but what happened one day to this

169
00:11:04,852 --> 00:11:08,062
Spidey guy happens. The database

170
00:11:08,126 --> 00:11:11,662
wrong. Database fail, the firewall

171
00:11:11,726 --> 00:11:15,358
fail, the application fail, the archive fail,

172
00:11:15,534 --> 00:11:19,446
our cloud provider failed or could be load balancer fail. How do we

173
00:11:19,468 --> 00:11:22,934
can check if these components works well

174
00:11:22,972 --> 00:11:26,758
or not? We need is inside of

175
00:11:26,844 --> 00:11:30,714
our infrastructure, inside of our

176
00:11:30,832 --> 00:11:34,954
application also because if we don't take

177
00:11:34,992 --> 00:11:38,700
a look for these components inside of our application that it's very

178
00:11:39,310 --> 00:11:41,680
huge problem here.

179
00:11:42,930 --> 00:11:46,814
Identify exactly the root cause here.

180
00:11:46,932 --> 00:11:50,606
That is one part that we need to take up our separability because we

181
00:11:50,628 --> 00:11:55,026
don't have these eyes inside of application.

182
00:11:55,208 --> 00:11:58,494
We don't have these eyes normally for the infrastructure

183
00:11:58,542 --> 00:12:02,978
side we need generate this eyes for our

184
00:12:03,144 --> 00:12:07,334
little spider guy. So we need to pray for this

185
00:12:07,372 --> 00:12:10,614
little guy because at the end of the day this is the man

186
00:12:10,652 --> 00:12:14,998
that we need to take a look for what happened internally for this application,

187
00:12:15,164 --> 00:12:18,486
right? So we move from the

188
00:12:18,508 --> 00:12:22,454
spidey guy to instrumentation. Why? Because we

189
00:12:22,492 --> 00:12:26,310
need to use a couple of definition

190
00:12:26,390 --> 00:12:30,334
behind of that. We talk about for one

191
00:12:30,372 --> 00:12:34,174
part for the pod we need to talk for one part for

192
00:12:34,212 --> 00:12:37,774
these little architecture definitions. But when

193
00:12:37,812 --> 00:12:41,690
we move for the instrumentation we take one spar

194
00:12:41,770 --> 00:12:45,246
from the Wikipedia and this Wikipedia mentions

195
00:12:45,278 --> 00:12:48,718
to us, hey, we define the instrumentation

196
00:12:48,814 --> 00:12:52,514
as part for the physical drives and you

197
00:12:52,632 --> 00:12:57,602
most could be for the customer's

198
00:12:57,746 --> 00:13:02,402
site. How do we can get this measure internally

199
00:13:02,466 --> 00:13:03,400
for your,

200
00:13:09,150 --> 00:13:12,858
sorry, your granary or something like that or your farm. How do

201
00:13:12,864 --> 00:13:16,234
we can explore these physical devices for

202
00:13:16,432 --> 00:13:19,322
obtain information about the environment, right?

203
00:13:19,456 --> 00:13:22,894
If the environment is well or not or it could be wrong

204
00:13:22,932 --> 00:13:27,594
with deploying all these focuses

205
00:13:27,722 --> 00:13:31,454
all these data that you can be

206
00:13:31,492 --> 00:13:35,294
collected from your side on also what happened internally

207
00:13:35,342 --> 00:13:39,538
for the farm. So we need to take a look very quick

208
00:13:39,624 --> 00:13:43,646
and very in a same way for observability

209
00:13:43,758 --> 00:13:47,922
because we need to instrument our application. We need to generate

210
00:13:48,066 --> 00:13:51,938
this metrology automation

211
00:13:52,034 --> 00:13:55,766
for our application. Also how do we define exactly

212
00:13:55,948 --> 00:13:59,302
the physical or in our case

213
00:13:59,356 --> 00:14:02,458
the software devices for take a

214
00:14:02,464 --> 00:14:05,754
look for this instrumentation. We need to define how do we can

215
00:14:05,792 --> 00:14:09,258
instrument the application, how do we can call it this information

216
00:14:09,344 --> 00:14:13,322
about the log stresses and metrics for every part of our

217
00:14:13,376 --> 00:14:17,214
application. So we can define how do we can take a

218
00:14:17,252 --> 00:14:21,406
look for this application or how do we can obtain this information

219
00:14:21,588 --> 00:14:26,820
and also how we can send that information for

220
00:14:27,830 --> 00:14:31,106
a correlation side and also how we

221
00:14:31,128 --> 00:14:35,314
can store that information. Also at this

222
00:14:35,352 --> 00:14:39,394
point we need to take a look for this the CNCF

223
00:14:39,522 --> 00:14:43,122
the CNCF is related for the clonetic computer foundation

224
00:14:43,186 --> 00:14:46,790
that is behind of one of the biggest projects here. That is once

225
00:14:46,860 --> 00:14:50,682
for Q A. The second one is open telemetry. That is

226
00:14:50,816 --> 00:14:54,186
pretty huge projects behind of that

227
00:14:54,208 --> 00:14:58,634
the community, support for the community and also deploy and support

228
00:14:58,832 --> 00:15:03,050
to the community that it's very nice ecosystem

229
00:15:03,130 --> 00:15:07,646
because when we talk about the

230
00:15:07,828 --> 00:15:11,550
community we talk for one part of the biggest

231
00:15:12,370 --> 00:15:16,562
smart guys behind us. That is the biggest challenge here

232
00:15:16,616 --> 00:15:20,580
and also that is the biggest impact for the community, from the community.

233
00:15:21,030 --> 00:15:25,082
So as part of the CNCF

234
00:15:25,246 --> 00:15:28,498
behind of are the Linux Foundation,

235
00:15:28,674 --> 00:15:32,440
Linux foundation could be, you know, could be done that is

236
00:15:33,850 --> 00:15:39,246
the Linux behind of the open source operation

237
00:15:39,378 --> 00:15:43,226
system that you could be implemented for your internal application

238
00:15:43,328 --> 00:15:47,034
or could be your docker, AI set application or something

239
00:15:47,072 --> 00:15:51,038
like that. So now in that online

240
00:15:51,204 --> 00:15:55,098
we have at this point we have the landscape

241
00:15:55,194 --> 00:15:58,858
that is the address here you can explore

242
00:15:58,954 --> 00:16:03,102
also and we have one chapter here related for observability

243
00:16:03,166 --> 00:16:06,530
and analysis. And also when we

244
00:16:06,600 --> 00:16:10,370
start to explore that we have a lot of tools

245
00:16:10,950 --> 00:16:14,980
that day from the pay side also and also

246
00:16:15,830 --> 00:16:19,174
the open source side we have at this

247
00:16:19,212 --> 00:16:22,962
moment 98 tools here focused for monitoring.

248
00:16:23,106 --> 00:16:26,482
We have at these 21 tools

249
00:16:26,546 --> 00:16:30,170
focused for lodging and we have at this point

250
00:16:30,320 --> 00:16:33,798
18 tools for tracing. So it's

251
00:16:33,814 --> 00:16:36,970
just two more ecosystem here that I don't have

252
00:16:37,040 --> 00:16:41,034
in this presentation. But if you explore the landscape you can

253
00:16:41,072 --> 00:16:45,626
check that's one for chaos engineering

254
00:16:45,738 --> 00:16:49,978
and also another one is for the optimization

255
00:16:50,074 --> 00:16:53,754
part. So when we start for observability we

256
00:16:53,812 --> 00:16:57,090
can enable a lot of components behind

257
00:16:57,160 --> 00:17:01,822
of the application, a lot of components behind of our structure

258
00:17:01,886 --> 00:17:05,702
and also for our companies how do we can move very quick for

259
00:17:05,756 --> 00:17:09,366
another practice internal for our companies that

260
00:17:09,388 --> 00:17:13,206
is pretty nice because when you start seeing

261
00:17:13,388 --> 00:17:17,442
what happened internally for your company, you can start to move and

262
00:17:17,516 --> 00:17:20,826
start to generate more focus for another part that

263
00:17:20,848 --> 00:17:24,938
you could be done take a look in deep for some case,

264
00:17:25,104 --> 00:17:29,562
right. So with

265
00:17:29,616 --> 00:17:33,134
this part we need to take a look very quick about these open

266
00:17:33,172 --> 00:17:37,146
source tools. I recommend for instrumentation using open telemetry

267
00:17:37,178 --> 00:17:41,054
you can use another SDK depends for

268
00:17:41,092 --> 00:17:45,022
your cloud provider also you added the SDK

269
00:17:45,166 --> 00:17:48,654
libraries and you can deploy these libraries

270
00:17:48,702 --> 00:17:52,286
and implement and you define

271
00:17:52,478 --> 00:17:56,738
with the development team how do we can start this journey

272
00:17:56,914 --> 00:18:00,498
for the instrumentation side. But I recommend that it's

273
00:18:00,514 --> 00:18:04,326
very quick with open telemetry because with open telemetry you

274
00:18:04,348 --> 00:18:07,538
have the two possibilities for instrument your application,

275
00:18:07,644 --> 00:18:11,530
the auto instrumentation that is part for adding just

276
00:18:11,680 --> 00:18:15,718
one line or could be in QR net is adding the sidecar pattern

277
00:18:15,894 --> 00:18:19,658
and also this take a look about the

278
00:18:19,744 --> 00:18:22,962
information from your application deployed

279
00:18:23,046 --> 00:18:26,798
and take this information from your application and

280
00:18:26,884 --> 00:18:30,842
start tracing these metrics inside for logs

281
00:18:30,986 --> 00:18:34,254
for logs traces some metrics. That is one

282
00:18:34,292 --> 00:18:37,918
part. The second part is related for manual instrumentation.

283
00:18:38,014 --> 00:18:41,586
The manual instrumentation are related for hey I need to take a

284
00:18:41,608 --> 00:18:45,314
look how do we can call it that information about the

285
00:18:45,352 --> 00:18:49,334
log about traces or metrics and I

286
00:18:49,532 --> 00:18:52,806
split this little site could

287
00:18:52,828 --> 00:18:56,310
be this is more difficult but depends exactly

288
00:18:56,380 --> 00:19:00,678
for your maturity appliance for observability

289
00:19:00,774 --> 00:19:04,714
internal for your teams right.

290
00:19:04,912 --> 00:19:08,300
But I recommend exactly open telemetry is

291
00:19:08,990 --> 00:19:12,942
a nice framework. Sorry also for collect logs I recommend

292
00:19:12,996 --> 00:19:16,922
file lock that is supported for biopentelemetry

293
00:19:16,986 --> 00:19:20,682
and also for traces Jaeger and for qualities

294
00:19:20,746 --> 00:19:24,226
metrics I recommend Prometheus. So that is

295
00:19:24,248 --> 00:19:27,886
the path that comes from observability.

296
00:19:27,998 --> 00:19:32,094
We instrument the application the instrument applies

297
00:19:32,222 --> 00:19:35,870
to the application then the application generate logs

298
00:19:35,950 --> 00:19:39,570
the application generate traces application generate metrics

299
00:19:39,650 --> 00:19:43,170
and export that metrics the traces and logs

300
00:19:43,250 --> 00:19:47,074
for one side using opentelemetry framework

301
00:19:47,202 --> 00:19:50,486
and you can collect this information and also

302
00:19:50,668 --> 00:19:54,522
seeing and take a look inside of Grafana for one side

303
00:19:54,576 --> 00:19:58,122
we need to how do we can store logs how do we can store

304
00:19:58,176 --> 00:20:02,794
the traces and what is the lifecycle

305
00:20:02,842 --> 00:20:06,254
that you have internally for this quantity of traces or

306
00:20:06,292 --> 00:20:09,934
times could be one month or six months or one

307
00:20:09,972 --> 00:20:13,954
year or something like that depends on the object for the company

308
00:20:14,072 --> 00:20:17,298
site and also you can take a look

309
00:20:17,384 --> 00:20:21,470
inside on the top of these collected metrics

310
00:20:21,550 --> 00:20:24,718
you can drop using Grafana. Right.

311
00:20:24,904 --> 00:20:28,210
So what happened with observability

312
00:20:28,370 --> 00:20:31,794
site on Kubernetes we have these two approach internally.

313
00:20:31,842 --> 00:20:35,174
For Kubernetes site we have for one site open

314
00:20:35,212 --> 00:20:38,954
telemetry that I recommend and also sees another part

315
00:20:38,992 --> 00:20:42,294
that is related for EBPF. But EBPF

316
00:20:42,342 --> 00:20:46,022
is more focused for implementation and efficiency.

317
00:20:46,166 --> 00:20:49,466
And if you want take a look more in deep you

318
00:20:49,488 --> 00:20:52,666
can check this article and also read another resources.

319
00:20:52,778 --> 00:20:56,254
I check this article and I see that

320
00:20:56,292 --> 00:20:59,642
it's pretty awesome how today explain the differences

321
00:20:59,706 --> 00:21:02,400
between from one side and another side.

322
00:21:04,550 --> 00:21:08,014
And I appreciate exactly this part of open telemetry

323
00:21:08,062 --> 00:21:11,314
that is very easy to use and also all

324
00:21:11,352 --> 00:21:15,102
the compatibility that currently have for all languages

325
00:21:15,166 --> 00:21:18,050
that you call implemented your microservices.

326
00:21:18,870 --> 00:21:22,594
If you want to take a look for open telemetry or OBPF

327
00:21:22,642 --> 00:21:26,758
please take a look and please feel free to doing that

328
00:21:26,844 --> 00:21:29,960
and also start this journey for observability side.

329
00:21:30,350 --> 00:21:34,042
So that is the best part for our site.

330
00:21:34,096 --> 00:21:37,180
That is the demo site, right?

331
00:21:38,270 --> 00:21:42,590
We have here the achieve tourist behind

332
00:21:42,660 --> 00:21:46,282
off. Let me out for the presentation mode

333
00:21:46,426 --> 00:21:50,478
and also we can take a look very quick for this demo

334
00:21:50,644 --> 00:21:54,960
for open telemetry we can access here

335
00:21:55,810 --> 00:21:59,482
exactly opentelemetry define how

336
00:21:59,556 --> 00:22:03,186
you can implement opentelemetry and

337
00:22:03,288 --> 00:22:07,542
this part of the architecture site add to you

338
00:22:07,676 --> 00:22:10,870
exactly this kind of frameworks for that

339
00:22:10,940 --> 00:22:14,898
site. And also this is the architecture deployed

340
00:22:14,994 --> 00:22:18,902
for this demo. We have on one site these

341
00:22:19,036 --> 00:22:21,320
microservices deployed here.

342
00:22:21,690 --> 00:22:25,046
This microservices was wrote

343
00:22:25,158 --> 00:22:28,102
on. Net, C plus Plus, Erlang,

344
00:22:28,166 --> 00:22:31,094
Golang, Java, Javascript, Kotlin,

345
00:22:31,142 --> 00:22:34,926
PHP, Python, Ruby, ROS and TypeScript. That is the

346
00:22:34,948 --> 00:22:39,358
common languages on

347
00:22:39,364 --> 00:22:42,834
the current scope for we have and also when

348
00:22:42,872 --> 00:22:46,734
we have this microservice here we define

349
00:22:46,782 --> 00:22:50,466
exactly how to the data comes and

350
00:22:50,488 --> 00:22:54,594
how to the data flow internally for our application.

351
00:22:54,712 --> 00:22:58,134
Right. When we export and we try

352
00:22:58,172 --> 00:23:01,366
to call it these metrics what happened internally we

353
00:23:01,388 --> 00:23:05,080
need to take a look for Prometheus from one side that is related for the

354
00:23:05,450 --> 00:23:09,130
EPM site exactly for cpu,

355
00:23:09,870 --> 00:23:13,274
memory and disk, right? And then other side

356
00:23:13,312 --> 00:23:16,246
that is related for JK that is for traces.

357
00:23:16,438 --> 00:23:20,186
If you want to add the part of the log please go

358
00:23:20,208 --> 00:23:24,606
ahead and take a look for this instrumentation, how you

359
00:23:24,628 --> 00:23:28,126
can store the log and how you can define this flow for

360
00:23:28,148 --> 00:23:32,270
the log site. So from Prometheus you collect this information

361
00:23:32,340 --> 00:23:36,470
for the microcycle site, this part for the oddband

362
00:23:36,490 --> 00:23:39,714
telemetry collector. That is the configuration internally for your

363
00:23:39,752 --> 00:23:43,410
application and you explore this part. That is

364
00:23:43,480 --> 00:23:46,946
how do you can receive that information, how do you can

365
00:23:46,968 --> 00:23:50,486
process that information and how do you can export that information

366
00:23:50,668 --> 00:23:54,182
from the open telemetry configuration. That is pretty

367
00:23:54,236 --> 00:23:57,554
awesome here because if you want to generate could be a leaf

368
00:23:57,602 --> 00:24:01,258
and chief and I don't like Prometheus, I use another

369
00:24:01,344 --> 00:24:04,650
tool, I don't like jigger, I want to use another

370
00:24:04,720 --> 00:24:08,794
tool you can remove from here and you

371
00:24:08,992 --> 00:24:12,622
added your flow and you can move very

372
00:24:12,676 --> 00:24:16,142
quick for start using another tool. That is pretty

373
00:24:16,196 --> 00:24:19,662
awesome because you don't need exactly change more

374
00:24:19,796 --> 00:24:23,086
internally for your teams or your development team,

375
00:24:23,188 --> 00:24:26,930
you just need change the configuration site that it's pretty awesome

376
00:24:27,000 --> 00:24:30,834
because at the end of the day you remove this responsibility for

377
00:24:30,872 --> 00:24:33,986
the development team and you add

378
00:24:34,008 --> 00:24:37,698
this responsibility for the it guy. But you need to know

379
00:24:37,784 --> 00:24:40,982
more in depth what happened internally for your traces and how

380
00:24:41,036 --> 00:24:44,562
you can call it the traces for every signals

381
00:24:44,626 --> 00:24:48,346
that you have internally for your system, right? So that

382
00:24:48,368 --> 00:24:52,154
is internally for Prometheus. Prometheus received that information

383
00:24:52,352 --> 00:24:56,374
using this URL

384
00:24:56,502 --> 00:24:59,906
and also this information will be storage on the Prometheus

385
00:24:59,958 --> 00:25:03,550
transactional database and at the end of the day when

386
00:25:03,620 --> 00:25:07,674
the data was storaged, the Prometheus reflects

387
00:25:07,722 --> 00:25:11,470
that spark for export that metrics and also you can

388
00:25:11,540 --> 00:25:14,926
see that metrics using Grafana that is part for Prometheus

389
00:25:15,038 --> 00:25:19,442
and it's the same way for Jake. Jaker comes here

390
00:25:19,576 --> 00:25:23,778
using the GRPC protocol and comes that

391
00:25:23,944 --> 00:25:28,074
tracing here Jaker store that information and jagger

392
00:25:28,142 --> 00:25:31,942
export that information that will be consumed from Grafana site.

393
00:25:32,076 --> 00:25:35,638
That is pretty awesome because at the end of the day you have

394
00:25:35,804 --> 00:25:39,386
this site that you can take a

395
00:25:39,408 --> 00:25:42,794
look for like a pipeline, something like that internally for

396
00:25:42,832 --> 00:25:46,566
open telemetry configuration site and you can drop

397
00:25:46,598 --> 00:25:50,314
here one tool that is Prometheus and you drop here another

398
00:25:50,432 --> 00:25:53,594
tool that is called jigger. And also you can use

399
00:25:53,632 --> 00:25:57,546
Grafana internally at this point for explore

400
00:25:57,578 --> 00:26:01,310
your metrics and also generate this awesome dashboard that you can

401
00:26:01,460 --> 00:26:05,266
share with your it guys or could be for more

402
00:26:05,368 --> 00:26:08,558
than for your CTo or CEO

403
00:26:08,734 --> 00:26:13,298
guys. And also when you drive

404
00:26:13,384 --> 00:26:17,062
to this dashboard you need to take a look what kind of

405
00:26:17,196 --> 00:26:20,550
the customer end user need to

406
00:26:20,620 --> 00:26:24,294
see this dashboard. There is another journey but

407
00:26:24,332 --> 00:26:27,930
you need to take a look internally for that, right? So that

408
00:26:28,000 --> 00:26:32,022
part for the architecture site and also that is related

409
00:26:32,086 --> 00:26:35,446
for the ingest flow or the telemetry data flow

410
00:26:35,478 --> 00:26:39,180
or the signals flow for store that information.

411
00:26:40,130 --> 00:26:44,000
So we can take a look very quick this demo,

412
00:26:44,370 --> 00:26:49,006
this demo actually is currently on

413
00:26:49,188 --> 00:26:52,346
my GitHub and also if you want

414
00:26:52,468 --> 00:26:56,094
to explore and generate this information also and explore

415
00:26:56,142 --> 00:26:59,282
that demo internally for you pretty

416
00:26:59,336 --> 00:27:02,706
well. Currently I deploy all my

417
00:27:02,728 --> 00:27:06,198
infrastructure using AWS. So let me move here

418
00:27:06,284 --> 00:27:09,670
very quick to our

419
00:27:09,740 --> 00:27:12,982
demo site. So previously I

420
00:27:13,036 --> 00:27:18,134
don't run exactly the part of the cluster

421
00:27:18,182 --> 00:27:22,010
generation. Let me start the cluster. So at this side

422
00:27:22,080 --> 00:27:26,134
we need to take a look here. Eks create cluster

423
00:27:26,182 --> 00:27:29,834
here and also drop here. At this

424
00:27:29,872 --> 00:27:33,482
point we start to create the clusters

425
00:27:33,546 --> 00:27:37,054
site. So let us wait for

426
00:27:37,092 --> 00:27:41,134
create this cluster. Okay, so we

427
00:27:41,172 --> 00:27:44,526
take a look for this cluster recently created,

428
00:27:44,638 --> 00:27:48,462
that was created from using the EKCTL

429
00:27:48,606 --> 00:27:52,210
CLI version from AWS generated.

430
00:27:52,550 --> 00:27:56,294
We send here the cluster information related for

431
00:27:56,332 --> 00:28:00,278
version that is 1.27

432
00:28:00,444 --> 00:28:04,022
and the name of this cluster will be conf 42

433
00:28:04,076 --> 00:28:07,480
qa native. So if we take a look here,

434
00:28:07,930 --> 00:28:11,882
Betty queen for elastic Kubernetes service that is internal for

435
00:28:11,936 --> 00:28:16,086
kubernetes for AWS on Saclier

436
00:28:16,118 --> 00:28:20,186
region USA. Two we have also the

437
00:28:20,208 --> 00:28:23,790
possibility to check what kind of component was deployed on this

438
00:28:23,860 --> 00:28:26,938
command. This command deployed

439
00:28:27,114 --> 00:28:30,906
the wall cluster that we talked internally on previously

440
00:28:30,938 --> 00:28:34,542
slides that is related for the control plane and workers node

441
00:28:34,606 --> 00:28:38,750
site and also another capabilities that AWS

442
00:28:38,830 --> 00:28:42,834
needs to manage this clusters because when

443
00:28:42,872 --> 00:28:46,326
we deploy using the EKS CTl or using the

444
00:28:46,428 --> 00:28:51,234
eks provisioning way we deliver

445
00:28:51,362 --> 00:28:55,158
some responsibilities for AWS. That is pretty awesome

446
00:28:55,324 --> 00:28:59,258
because when you define a cluster you

447
00:28:59,344 --> 00:29:02,506
have to define exactly what kind of part of

448
00:29:02,528 --> 00:29:05,994
the cluster you generate here. So let me move

449
00:29:06,032 --> 00:29:12,042
because I select the wrong part

450
00:29:12,096 --> 00:29:15,490
here. So move pretty quick to AKS.

451
00:29:15,670 --> 00:29:19,694
Again let's secure network services and

452
00:29:19,732 --> 00:29:23,890
also take a look for the clusters create. At this point you

453
00:29:23,960 --> 00:29:27,282
have the possibility to check what happened

454
00:29:27,336 --> 00:29:31,374
with your cluster. We just have the empty cluster

455
00:29:31,502 --> 00:29:35,134
because we don't drop here any kind of

456
00:29:35,192 --> 00:29:37,240
components at the moment.

457
00:29:38,010 --> 00:29:42,440
So let's check. Meanwhile Qctl get

458
00:29:43,130 --> 00:29:47,346
pods when we send

459
00:29:47,468 --> 00:29:50,794
this information we connect from the API side

460
00:29:50,912 --> 00:29:54,042
and request all pods from

461
00:29:54,096 --> 00:29:57,274
this API. And with this

462
00:29:57,472 --> 00:30:01,706
option hyphen a in uppercase

463
00:30:01,898 --> 00:30:05,018
we request

464
00:30:05,114 --> 00:30:08,846
that was focused for all namespace internal of

465
00:30:08,868 --> 00:30:12,462
Q a, right. So we have here the part of the

466
00:30:12,516 --> 00:30:16,526
Kubernetes side, the Qrnet is deployed

467
00:30:16,718 --> 00:30:19,938
on AWS and also

468
00:30:20,104 --> 00:30:24,018
you can see here the command end the

469
00:30:24,104 --> 00:30:28,182
all pods internally deployed on Kubernetes side,

470
00:30:28,316 --> 00:30:32,566
right. That is our decode deployed git current service

471
00:30:32,668 --> 00:30:36,406
API. That is timeout here

472
00:30:36,588 --> 00:30:40,506
that it's very uncommon part but could be you

473
00:30:40,528 --> 00:30:44,150
don't have to see that we create this cluster

474
00:30:44,310 --> 00:30:47,530
20 minutes ago. And also if we can take

475
00:30:47,600 --> 00:30:50,714
a look for the compute here we

476
00:30:50,752 --> 00:30:54,310
have these worker nodes that is part of the q and

477
00:30:54,320 --> 00:30:58,350
a site exactly for the worker nodes side

478
00:30:58,420 --> 00:31:02,222
when they supported the deployed here all

479
00:31:02,276 --> 00:31:06,146
pods that we need to deploy it. So we continue

480
00:31:06,248 --> 00:31:09,454
here with our cluster definition.

481
00:31:09,582 --> 00:31:13,634
We can use this alias, this alias that is very helpful for

482
00:31:13,672 --> 00:31:18,674
you. If you want to send more quick comments

483
00:31:18,722 --> 00:31:22,550
inside of kubernetes you just send Kubectl get bots

484
00:31:22,890 --> 00:31:26,514
open a and that's it. And it's

485
00:31:26,562 --> 00:31:30,122
more quick for generate and send that request for

486
00:31:30,176 --> 00:31:34,426
the API side. Okay we need to take a look

487
00:31:34,608 --> 00:31:38,678
for another tool that is called helm. Helm is a package manager Internet

488
00:31:38,694 --> 00:31:42,958
of kubernetes and also we start using

489
00:31:43,044 --> 00:31:46,654
this tool that is part for the

490
00:31:46,692 --> 00:31:50,414
components deployed and that's it. They take

491
00:31:50,452 --> 00:31:54,274
a look from the pod site and end and

492
00:31:54,312 --> 00:31:57,694
we pass here the command. With this command

493
00:31:57,742 --> 00:32:01,234
we added the repo with

494
00:32:01,272 --> 00:32:05,306
these commands here the repo called it open telemetry.

495
00:32:05,358 --> 00:32:09,222
And this take from this helm chart that

496
00:32:09,276 --> 00:32:12,822
are storage on GitHub site. Open telemetry already

497
00:32:12,876 --> 00:32:16,866
exists because we added previously helm

498
00:32:16,898 --> 00:32:20,314
repo update because in some cases you need

499
00:32:20,352 --> 00:32:24,042
to update the reference instantly on your system,

500
00:32:24,176 --> 00:32:27,530
that is on your local environment nor

501
00:32:27,600 --> 00:32:31,594
currently yet for the cluster site just update

502
00:32:31,722 --> 00:32:35,486
this repository on your site. So that

503
00:32:35,508 --> 00:32:39,886
is the important command. The one is the important command here because

504
00:32:39,988 --> 00:32:43,922
we added this configuration site because if you

505
00:32:43,976 --> 00:32:47,714
sense the first one here you have our

506
00:32:47,752 --> 00:32:51,006
own definition for helm file because depends

507
00:32:51,038 --> 00:32:54,974
exactly for the version for qrnettes also and we deploy the Kubernetes

508
00:32:55,022 --> 00:32:58,402
using the API deployed on use

509
00:32:58,456 --> 00:33:02,920
Qrnate site for 1.27.

510
00:33:03,370 --> 00:33:06,854
So at this site we install a

511
00:33:06,892 --> 00:33:10,694
package management for qrnates that we

512
00:33:10,732 --> 00:33:14,682
will call it my hotel demo. And also we

513
00:33:14,736 --> 00:33:18,426
use the open telemetry, open telemetry demo. So we have here the

514
00:33:18,448 --> 00:33:22,318
open telemetry site and we use from this

515
00:33:22,484 --> 00:33:26,560
package management the open telemetry demo using the version exactly

516
00:33:30,850 --> 00:33:34,510
that is the components that will be deployed inside

517
00:33:34,580 --> 00:33:38,274
of the Kubernetes site. So we need to wait here

518
00:33:38,392 --> 00:33:42,274
little time because they need to download this

519
00:33:42,312 --> 00:33:47,182
package for this version and start deploying all packages

520
00:33:47,246 --> 00:33:51,586
inside of Kubernetes. What kind of packages? We talk about the pods,

521
00:33:51,618 --> 00:33:55,638
we talk about the services. We need to deploy a lot of components behind of

522
00:33:55,724 --> 00:33:59,546
the part that as part for this architecture that was

523
00:33:59,728 --> 00:34:02,746
defined for the open telemetry site right.

524
00:34:02,928 --> 00:34:06,618
Also that is very quick if you want to install

525
00:34:06,784 --> 00:34:11,178
your applications because you install

526
00:34:11,344 --> 00:34:15,438
don't want an installed site that it's awesome

527
00:34:15,524 --> 00:34:18,970
for your application and start your network observability

528
00:34:19,050 --> 00:34:22,962
using open telemetry site that it's very quick for

529
00:34:23,016 --> 00:34:27,220
start your PoC or spikes depends of the maturity of

530
00:34:27,670 --> 00:34:31,826
your teams. So we need to take a long

531
00:34:32,008 --> 00:34:35,858
little time here wait for this appliance

532
00:34:35,954 --> 00:34:39,430
internal for the Kubernetes side. When these components are

533
00:34:39,500 --> 00:34:43,798
already deployed we can send

534
00:34:43,884 --> 00:34:48,066
this and prepare this command

535
00:34:48,098 --> 00:34:51,602
here and also these references internally

536
00:34:51,666 --> 00:34:55,306
for the Kubernetes side okay hence the

537
00:34:55,328 --> 00:34:59,290
installation site and we can open using

538
00:34:59,360 --> 00:35:02,554
the port forward configuration

539
00:35:02,602 --> 00:35:06,302
site here and we drive this port

540
00:35:06,356 --> 00:35:10,014
forwarding for the service internally for the

541
00:35:10,052 --> 00:35:14,414
service call it my hotel demo and we generate

542
00:35:14,462 --> 00:35:18,290
this port forward from 80 80 locally and

543
00:35:18,360 --> 00:35:21,806
they take from the internal site for 80

544
00:35:21,838 --> 00:35:25,266
82. So we can send this for

545
00:35:25,288 --> 00:35:28,646
the Qrctl port forward site and

546
00:35:28,748 --> 00:35:32,760
this granted to us access to this

547
00:35:33,210 --> 00:35:36,866
information that we return from the helm

548
00:35:36,898 --> 00:35:40,394
installation site. So open the first part

549
00:35:40,432 --> 00:35:44,186
that is related for the one deployed here. That is for

550
00:35:44,208 --> 00:35:47,814
the web store that is the application that we deployed

551
00:35:47,942 --> 00:35:51,134
using the architecture here. And also we

552
00:35:51,172 --> 00:35:55,134
need to take a look for Grafana that is the part that

553
00:35:55,172 --> 00:35:58,960
we start to check what happened here.

554
00:35:59,410 --> 00:36:02,560
So meanwhile the port rewards start,

555
00:36:03,110 --> 00:36:07,042
we wait also. So that is our

556
00:36:07,096 --> 00:36:11,058
application side. And this jump for every

557
00:36:11,144 --> 00:36:15,174
request that was returned for our web

558
00:36:15,212 --> 00:36:18,886
browser here that is the part for our application that is

559
00:36:18,908 --> 00:36:23,446
a hue application. When you down the products

560
00:36:23,628 --> 00:36:27,582
start to load then the requests start to generate

561
00:36:27,666 --> 00:36:31,690
also. And when we move to Grafana we

562
00:36:31,760 --> 00:36:35,974
have that part for the once configuration

563
00:36:36,022 --> 00:36:41,242
site. If we move pretty quick here for the configuration,

564
00:36:41,386 --> 00:36:45,690
just for the data source, we have here the jigger configuration

565
00:36:45,770 --> 00:36:50,266
that we mentioned that is related for the traces and also for Prometheus

566
00:36:50,378 --> 00:36:54,590
that is related for this

567
00:36:54,740 --> 00:36:57,874
cpu and memory site for our application.

568
00:36:57,992 --> 00:37:01,970
Right. So we take a look here very quick

569
00:37:02,040 --> 00:37:05,366
for the default browse the

570
00:37:05,388 --> 00:37:08,450
full dashboard that was created on this deployed.

571
00:37:08,610 --> 00:37:12,514
So open and open and open this four dashboard.

572
00:37:12,642 --> 00:37:15,910
And also we can take a look pretty quick about

573
00:37:15,980 --> 00:37:20,102
these dashboards. If you saw that it's

574
00:37:20,246 --> 00:37:23,818
very quick this installation, just one

575
00:37:23,904 --> 00:37:27,754
couple of minutes for start your journey to

576
00:37:27,792 --> 00:37:30,922
observability using Q a site. Also you can

577
00:37:30,976 --> 00:37:33,774
start the journey using other tools. Yeah,

578
00:37:33,892 --> 00:37:37,214
but could be you need take a look more in deep about these

579
00:37:37,252 --> 00:37:42,254
concepts and also generate this implementation in

580
00:37:42,292 --> 00:37:47,762
your application site. So that you

581
00:37:47,816 --> 00:37:51,442
need to take a look internally with your development team.

582
00:37:51,576 --> 00:37:55,846
Right. So we saw here information

583
00:37:55,948 --> 00:37:58,360
related for this service,

584
00:37:59,210 --> 00:38:02,566
right? We have the feature flag service

585
00:38:02,748 --> 00:38:06,726
and also we jump for every service here and

586
00:38:06,748 --> 00:38:10,682
these graphics update for that service and what kind

587
00:38:10,736 --> 00:38:14,378
of service and also how this service

588
00:38:14,464 --> 00:38:17,610
was deployed inside of the Kubernetes,

589
00:38:18,350 --> 00:38:22,414
right. You can jump and explore all service here and

590
00:38:22,452 --> 00:38:26,526
you can see here what happened with the cpu. What is the recommendation here,

591
00:38:26,628 --> 00:38:30,874
the recommendation for memory, the recommendation for scout, the error

592
00:38:30,922 --> 00:38:36,226
rate, the service latency, what kind of times,

593
00:38:36,328 --> 00:38:39,394
what's generated for every service and from

594
00:38:39,432 --> 00:38:42,978
the request to response the times between of that

595
00:38:43,144 --> 00:38:47,018
and the error rate that is related for the errors

596
00:38:47,054 --> 00:38:50,534
that you have internally for your application site that

597
00:38:50,572 --> 00:38:55,366
it's pretty awesome because you have using the

598
00:38:55,388 --> 00:38:58,474
traces that comes from open telemetry you have

599
00:38:58,512 --> 00:39:02,166
this dashboard. And also if you added your microservice

600
00:39:02,198 --> 00:39:05,738
you can drop here and identify your service and you start

601
00:39:05,824 --> 00:39:10,842
this journey using your open telemetry instrumentation

602
00:39:10,906 --> 00:39:14,094
site that you can enable for that.

603
00:39:14,292 --> 00:39:18,558
For that site we have for this dashboard we have information

604
00:39:18,724 --> 00:39:22,454
from receivers from exactly this component

605
00:39:22,522 --> 00:39:25,666
that we call it here. Let us move,

606
00:39:25,768 --> 00:39:29,442
I close this part but when we

607
00:39:29,496 --> 00:39:33,122
talk about the configuration side, we talk about the

608
00:39:33,176 --> 00:39:36,680
one flow here, let us load again

609
00:39:37,130 --> 00:39:41,000
the open telemetry page.

610
00:39:41,690 --> 00:39:45,634
Oh that is here this auto configuration,

611
00:39:45,762 --> 00:39:49,606
right. We have internally deployed on Kubernetes,

612
00:39:49,798 --> 00:39:53,546
one components on Kubernetes. So we

613
00:39:53,568 --> 00:39:56,870
need to take a look what happened with this component.

614
00:39:56,950 --> 00:40:01,082
What is the behavior for every request that comes from our application

615
00:40:01,216 --> 00:40:03,910
or for the flow that I ingested?

616
00:40:04,070 --> 00:40:07,662
From Prometheus and also for Jagger and

617
00:40:07,716 --> 00:40:11,118
what kind of behavior we can check here,

618
00:40:11,204 --> 00:40:15,106
right? What is the cons requested for and what

619
00:40:15,128 --> 00:40:18,606
is the response and what is supported for that. But it's

620
00:40:18,638 --> 00:40:22,222
pretty awesome because enable the observability

621
00:40:22,366 --> 00:40:26,214
also for your components deployed for that. The another part

622
00:40:26,252 --> 00:40:31,538
that is the traces baseline that is the complete opentelemetry

623
00:40:31,554 --> 00:40:34,882
collector data flow that is related

624
00:40:34,946 --> 00:40:38,310
for this part, the TS flow, how do they

625
00:40:38,380 --> 00:40:42,282
jump from one side to another site? The collector here,

626
00:40:42,336 --> 00:40:45,994
the processor here, the batch here and the sporter here and for

627
00:40:46,032 --> 00:40:49,126
logging are also for open telemetry.

628
00:40:49,318 --> 00:40:52,630
That is for the traces pipeline at

629
00:40:52,640 --> 00:40:55,710
this part for the metrics pipeline, right.

630
00:40:55,860 --> 00:40:59,950
We have currently obtained that information from

631
00:41:00,020 --> 00:41:04,638
one part for the trace from metrics

632
00:41:04,734 --> 00:41:08,178
and what happened with Prometheus. If we open

633
00:41:08,264 --> 00:41:10,850
this view here,

634
00:41:11,000 --> 00:41:14,654
we saw the Prometheus collect

635
00:41:14,702 --> 00:41:18,198
information for these services. That is

636
00:41:18,364 --> 00:41:22,098
all pods deployed on the current deployed

637
00:41:22,114 --> 00:41:25,926
cluster, right? So we have here exactly

638
00:41:26,028 --> 00:41:29,970
what happened with these components for this configuration

639
00:41:30,050 --> 00:41:33,238
side that is related for this diagram

640
00:41:33,334 --> 00:41:37,082
and that we can take a look here and also what happened

641
00:41:37,136 --> 00:41:41,254
internally for these components it was accepted or refused.

642
00:41:41,382 --> 00:41:45,134
What is the total, what is the batch site, what is the total for this

643
00:41:45,172 --> 00:41:48,814
batch and what happened here for logs and also for the pen

644
00:41:48,852 --> 00:41:52,142
telemetry configuration site. The next is

645
00:41:52,196 --> 00:41:56,260
related for the span metrics team. That is

646
00:41:58,950 --> 00:42:02,766
all traces that currently we have from opentelemetry

647
00:42:02,798 --> 00:42:06,550
site. And also we saw here what happened

648
00:42:06,620 --> 00:42:10,086
exactly with these components. What is the jumps, what is

649
00:42:10,108 --> 00:42:13,634
exactly the request times, what is the endpoint

650
00:42:13,682 --> 00:42:17,078
latency for every component that you currently have.

651
00:42:17,244 --> 00:42:20,666
And it's pretty awesome because when you start this journey you

652
00:42:20,688 --> 00:42:24,490
need to identify exactly what kind of components are behind

653
00:42:24,560 --> 00:42:28,438
of your application and what kind of these components

654
00:42:28,454 --> 00:42:32,762
you need. Take a look more in deep for this implementation

655
00:42:32,826 --> 00:42:36,686
that you currently have. So that is the exactly

656
00:42:36,788 --> 00:42:40,474
configuration for that. If you want to take more in deep

657
00:42:40,602 --> 00:42:44,658
about these metrics you can move very quick here

658
00:42:44,744 --> 00:42:48,770
and also you can run these metrics and you generate the metric

659
00:42:49,430 --> 00:42:54,210
for that case we use the request,

660
00:42:54,970 --> 00:42:58,214
you run the query here and

661
00:42:58,252 --> 00:43:01,622
you take a look that information from this and

662
00:43:01,676 --> 00:43:05,670
also you want to take a look what happened with your

663
00:43:05,740 --> 00:43:09,830
jumps using for Jagger you can hey please

664
00:43:09,900 --> 00:43:12,920
load this information from the jigger site.

665
00:43:13,690 --> 00:43:17,594
Run query. No, we need to take a look for this search and

666
00:43:17,632 --> 00:43:21,258
generate and select one service here and

667
00:43:21,344 --> 00:43:24,942
execute the query and you start seeing what

668
00:43:24,996 --> 00:43:29,022
happened with the trace internally and when you select this

669
00:43:29,076 --> 00:43:33,040
trace you have the possibility to show

670
00:43:33,430 --> 00:43:37,278
what kind of jumps this request generated.

671
00:43:37,454 --> 00:43:41,540
This request generated one request for

672
00:43:42,150 --> 00:43:43,940
let us open here,

673
00:43:47,210 --> 00:43:51,026
open here this request generate

674
00:43:51,058 --> 00:43:54,406
another request for checkout services, for car services,

675
00:43:54,508 --> 00:43:58,022
for product service catalog, for currency, for product catalog

676
00:43:58,086 --> 00:44:01,962
service again for current and these all

677
00:44:02,016 --> 00:44:05,980
jumps that you are currently had with this

678
00:44:06,430 --> 00:44:10,018
instrumentation site for your metrics that it's

679
00:44:10,054 --> 00:44:14,238
pretty awesome I think because at the end of the day you

680
00:44:14,324 --> 00:44:18,030
could enable this demo for start your journey

681
00:44:18,930 --> 00:44:21,440
to observability site.

682
00:44:21,810 --> 00:44:25,118
So that is part for the demo

683
00:44:25,204 --> 00:44:28,834
site and also you can take a look more in deep for

684
00:44:28,872 --> 00:44:32,274
your site. And also if you want to deploy a clusters or could

685
00:44:32,312 --> 00:44:35,906
be you have your cluster, you have the possibility to

686
00:44:35,928 --> 00:44:39,654
deploy that using your current cluster. You don't need exactly to

687
00:44:39,692 --> 00:44:43,378
generate a new cluster also. So that is a brief

688
00:44:43,394 --> 00:44:46,626
resume that we talk for today that is from metrics

689
00:44:46,658 --> 00:44:50,230
loss and traces with open source tools. We have on one side

690
00:44:50,380 --> 00:44:54,170
the Kubernetes architecture in a pick scope. The observability what,

691
00:44:54,240 --> 00:44:57,542
why, where and how the instrumentation

692
00:44:57,606 --> 00:45:01,226
site that is part of the how site, the golden triangle

693
00:45:01,338 --> 00:45:06,062
that we need to take a look with

694
00:45:06,116 --> 00:45:09,518
our development team the CNCF what is

695
00:45:09,524 --> 00:45:13,234
the scope from CNCF, what is the community for the community and

696
00:45:13,272 --> 00:45:17,362
also the open source tools that we take a look for doing and

697
00:45:17,416 --> 00:45:21,380
start for this awesome journey to observability using

698
00:45:22,550 --> 00:45:26,226
Kubernetes site. So thank you,

699
00:45:26,408 --> 00:45:30,950
I appreciate your time. I appreciate you learn something new.

700
00:45:31,100 --> 00:45:34,294
And also if you want to contact me you can

701
00:45:34,332 --> 00:45:38,006
send me a message using GitHub or could be using YouTube or

702
00:45:38,108 --> 00:45:42,006
X or Twitter like you mentioned you have here exactly

703
00:45:42,108 --> 00:45:45,798
what kind of reference that you can read.

704
00:45:45,884 --> 00:45:48,982
Also for take more in deep about this

705
00:45:49,036 --> 00:45:53,054
research about process, about the terminology behind us.

706
00:45:53,172 --> 00:45:56,220
So I appreciate your time. See you soon. Thank you.

