1
00:00:34,530 --> 00:00:37,778
Hi everyone, I'm Iska, a software engineer at Armo,

2
00:00:37,874 --> 00:00:41,282
and I'm here to talk about security posture and the good management

3
00:00:41,426 --> 00:00:44,934
of security issues in open resources projects, specifically in

4
00:00:44,972 --> 00:00:48,790
graduated CNCF projects. I'm going to compare them based on some research

5
00:00:48,860 --> 00:00:52,014
we did at Armo using our own statistics. So,

6
00:00:52,052 --> 00:00:55,146
Armo is a Kubernetes security company. We're the creators

7
00:00:55,178 --> 00:00:58,990
of Kubescape, which I'm one of the container of. And Kubescape is a security

8
00:00:59,060 --> 00:01:02,666
posture platform which shows you misconfigurations inside your cluster

9
00:01:02,698 --> 00:01:06,330
and guides you on how you can improve your security inside your cluster.

10
00:01:06,490 --> 00:01:09,714
It's both a CLI tool and an operator, which you can use in different

11
00:01:09,752 --> 00:01:12,974
ways. It also scans your images running inside your Kubernetes

12
00:01:13,022 --> 00:01:16,690
cluster and can tell you what kind of vulnerabilities your containers have.

13
00:01:16,840 --> 00:01:20,226
It also works in what we call shift left. So when you're preparing

14
00:01:20,258 --> 00:01:23,314
your deployments in your GitHub repository or in your vs

15
00:01:23,362 --> 00:01:26,978
code using our Kubescape extension, you can scan your yamls and helm

16
00:01:26,994 --> 00:01:30,770
charts and your container registries to find out things about security posture

17
00:01:30,850 --> 00:01:34,506
before they're deployed. Now a thing I want to note here is

18
00:01:34,528 --> 00:01:37,626
that one of the most important goals we had in this project is not

19
00:01:37,648 --> 00:01:40,906
to just dump data on you and have you try to work out how to

20
00:01:40,928 --> 00:01:44,526
solve these issues on your own, but also to prioritize them and show

21
00:01:44,548 --> 00:01:48,142
you how to fix these issues. So Armo provides a platform behind

22
00:01:48,196 --> 00:01:51,886
cubescape in order to store the data of the results in these scans and help

23
00:01:51,908 --> 00:01:55,090
you analyze them even further and give you a bigger perspective.

24
00:01:55,750 --> 00:01:59,138
So now that we're collecting all this data, we need to

25
00:01:59,144 --> 00:02:01,940
analyze it. What type of data do we have?

26
00:02:02,390 --> 00:02:06,100
Armo platform we're receiving data from Kubescape, which is basically,

27
00:02:06,490 --> 00:02:10,614
on the one hand, configuration issues of Kubernetes objects that

28
00:02:10,652 --> 00:02:14,466
comes from git registries and from objects in the Kubernetes cluster

29
00:02:14,498 --> 00:02:18,386
itself. And on the other hand, vulnerabilities from image scans,

30
00:02:18,578 --> 00:02:22,662
again from the actual cluster and also from container registries.

31
00:02:22,806 --> 00:02:26,902
Today we're going to focus on data that we get from objects before they're deployed,

32
00:02:26,966 --> 00:02:30,410
from git repositories and mainly container registries.

33
00:02:31,730 --> 00:02:34,890
What the data that we have today includes

34
00:02:34,970 --> 00:02:39,242
is we've scanned container images from nearly 180 registries

35
00:02:39,306 --> 00:02:42,394
and scanned nearly 44,000 container images.

36
00:02:42,522 --> 00:02:46,002
We've seen nearly 2000 git registries and inside of which

37
00:02:46,056 --> 00:02:49,358
are nearly 165 YAML files and helm charts.

38
00:02:49,454 --> 00:02:52,498
So it's not a small data set and it can bring us some really interesting

39
00:02:52,584 --> 00:02:56,702
things, starting with the container image scans.

40
00:02:56,846 --> 00:03:00,662
Like I mentioned, we're going to compare two samples, one against the other. The first

41
00:03:00,716 --> 00:03:04,326
is the general population, if you will, and the second is the

42
00:03:04,348 --> 00:03:07,858
sample of CNCF graduated projects. We're going to look at what

43
00:03:07,884 --> 00:03:11,254
are the most common vulnerabilities in both samples, the distribution

44
00:03:11,302 --> 00:03:14,474
of severities, and we're going to dive into the relevancy of these

45
00:03:14,512 --> 00:03:18,234
vulnerabilities. So looking

46
00:03:18,272 --> 00:03:21,770
at the most prevalent image repositories in the general

47
00:03:21,840 --> 00:03:25,546
sample, we see ArgoCd, which is a CNCF

48
00:03:25,578 --> 00:03:30,110
graduated project itself appears in nearly 20,000 images.

49
00:03:30,850 --> 00:03:33,810
Then we have Redis, which is also an open source project,

50
00:03:33,880 --> 00:03:37,134
but not under the CNCF umbrella. Then we have Armo

51
00:03:37,182 --> 00:03:40,626
again. We have Prometheus a few times, also a

52
00:03:40,648 --> 00:03:44,450
graduated project. We have cool, interesting project,

53
00:03:44,520 --> 00:03:48,390
the sidecar again open source, but not under CNCF.

54
00:03:49,050 --> 00:03:52,440
MongoDB, Prometheus again, and the datadog agent.

55
00:03:53,210 --> 00:03:56,914
Then we have the top ten among the graduated

56
00:03:56,962 --> 00:04:00,534
sample. Obviously the top repositories are

57
00:04:00,572 --> 00:04:04,218
again armo CD and promisus, which makes sense. We saw them leading in

58
00:04:04,224 --> 00:04:07,942
the general sample, and after that we can see some core images of Kubernetes

59
00:04:08,006 --> 00:04:11,670
itself. So we're going to start by comparing

60
00:04:11,750 --> 00:04:15,006
the distribution of severities. This chart is ordered by the

61
00:04:15,028 --> 00:04:18,686
distribution of severities inside the general sample. You can

62
00:04:18,708 --> 00:04:22,298
see that most of the vulnerabilities were medium in the general sample,

63
00:04:22,394 --> 00:04:25,358
and then the second is what we called negligible.

64
00:04:25,534 --> 00:04:28,942
Might be a bit confusing. Most image scanners mark vulnerabilities

65
00:04:29,006 --> 00:04:32,274
with CVS's score of zero to four as low.

66
00:04:32,392 --> 00:04:35,686
Cubescape is using gripe which differentiates between low and

67
00:04:35,708 --> 00:04:39,046
negligible severities, where negligible is zero to

68
00:04:39,068 --> 00:04:42,722
two and low is two to four. For graduated

69
00:04:42,786 --> 00:04:46,786
projects, the most common vulnerability severity is negligible.

70
00:04:46,978 --> 00:04:50,838
Both have more or less the same amount of critical vulnerabilities,

71
00:04:51,014 --> 00:04:54,826
and in general we can see that there's a slight difference in the

72
00:04:54,848 --> 00:04:58,060
distribution in favor of the CNCF projects,

73
00:04:58,510 --> 00:05:02,222
but honestly it didn't really make a lot of sense yet,

74
00:05:02,276 --> 00:05:04,160
didn't give us a lot to work with.

75
00:05:07,970 --> 00:05:11,610
Let's look at the top ten vulnerabilities in the general sample.

76
00:05:11,770 --> 00:05:15,486
You can see that the first vulnerability is above

77
00:05:15,518 --> 00:05:18,702
all else in terms of numbers. It's a relatively new vulnerability

78
00:05:18,766 --> 00:05:22,530
in busybox, which we saw in nearly 37,000

79
00:05:22,600 --> 00:05:26,046
images that we scanned to high severity vulnerability.

80
00:05:26,238 --> 00:05:29,638
Then we have libgCrypt, which was in nearly 15,000

81
00:05:29,724 --> 00:05:33,046
and high as well after that we have a few, which are

82
00:05:33,068 --> 00:05:36,646
also around 15,000 images. And after that,

83
00:05:36,748 --> 00:05:40,118
from eight and down, we have a bit less. For the sake of

84
00:05:40,124 --> 00:05:42,700
this talk, we're only looking at high and critical issues.

85
00:05:43,470 --> 00:05:47,082
And now to try and make sense of this data, we went over

86
00:05:47,136 --> 00:05:50,394
each one of these vulnerabilities manually to try and understand are

87
00:05:50,432 --> 00:05:54,506
they really exploitable and how relevant are they. So let's

88
00:05:54,538 --> 00:05:58,522
start with the first one, the busybox CVE busybox

89
00:05:58,586 --> 00:06:01,838
contains all sorts of tools that we use in our containers. One of

90
00:06:01,844 --> 00:06:05,490
them is Netstap, which can be used to read your DNS record,

91
00:06:05,640 --> 00:06:08,660
except most people don't really use it.

92
00:06:09,030 --> 00:06:13,138
This vulnerability is pretty severe. If you're using Netstep to read

93
00:06:13,224 --> 00:06:16,774
your DNS record, an attacker with a malcrafted DNS record can

94
00:06:16,812 --> 00:06:20,454
take over your terminal. Alternatively, the attacker can also

95
00:06:20,492 --> 00:06:24,166
change the colors of your terminal. Cute. But the

96
00:06:24,188 --> 00:06:27,710
risk of it being exploited is very, very low. This vulnerability

97
00:06:27,810 --> 00:06:31,674
is not very relevant. Next we

98
00:06:31,712 --> 00:06:35,974
have Libgcrypt, which in specific versions mishandles

99
00:06:36,022 --> 00:06:39,706
a cryptographic algorithm called El Jamal. And it enables the

100
00:06:39,728 --> 00:06:43,114
attacker to extract the private key from a side channel, which is

101
00:06:43,152 --> 00:06:46,526
actually a very serious problem. The point is that the reason this

102
00:06:46,548 --> 00:06:50,234
image vulnerability is so high in our list is because it's part of the GPG

103
00:06:50,282 --> 00:06:53,970
protocol in our package manager. But when we install packages,

104
00:06:54,550 --> 00:06:58,206
their signatures are verified with public keys, not private

105
00:06:58,238 --> 00:07:01,326
keys. So it's a very bad practice to have private

106
00:07:01,358 --> 00:07:03,890
keys in containers, but most don't.

107
00:07:04,550 --> 00:07:08,146
They'll just have public keys. So again, this is a vulnerability that's

108
00:07:08,178 --> 00:07:13,286
not really exploitable in about 99.99%

109
00:07:13,388 --> 00:07:17,334
of kubernetes clusters, and yet it's still up here in our top ten

110
00:07:17,372 --> 00:07:19,878
list. Next,

111
00:07:20,044 --> 00:07:23,674
Sqlite. A heap based attack.

112
00:07:23,872 --> 00:07:27,574
So SQLite had a critical vulnerability which enabled an attacker

113
00:07:27,622 --> 00:07:31,002
to take over the process which runs SQlite with a very specific

114
00:07:31,136 --> 00:07:34,286
crafted SQL query. Again, this is

115
00:07:34,308 --> 00:07:38,302
a very serious issue, but if you think about it again, even before taking

116
00:07:38,356 --> 00:07:42,826
over the container, the attacker needed to have an SQL injection beforehand.

117
00:07:42,938 --> 00:07:46,398
So again, this is something that, it's really hard to see how it's

118
00:07:46,414 --> 00:07:50,066
going to be exploited. So if we look again at

119
00:07:50,088 --> 00:07:53,298
this top ten list and sort of filter out

120
00:07:53,384 --> 00:07:55,380
the less relevant ones,

121
00:07:56,470 --> 00:08:00,162
we came out that these two are the lightly

122
00:08:00,226 --> 00:08:03,670
exploitable ones. Again, it's not based on very hard

123
00:08:03,740 --> 00:08:08,002
facts, but sort of a manual check and looking over the

124
00:08:08,076 --> 00:08:11,574
cvs, these are the two that we thought are likely

125
00:08:11,622 --> 00:08:15,802
exploitable. So it goes to show that the original data

126
00:08:15,856 --> 00:08:19,450
we got from the image scanner was not completely relevant.

127
00:08:21,570 --> 00:08:25,070
So let's look now at the top ten vulnerabilities in the graduated project

128
00:08:25,140 --> 00:08:28,522
sample. We have protobuff library

129
00:08:28,586 --> 00:08:31,646
leading by far, which dates back to 2015,

130
00:08:31,668 --> 00:08:34,810
a high vulnerability which was around for a

131
00:08:34,820 --> 00:08:38,494
long time. We have some Golang issues and some Prometheus

132
00:08:38,542 --> 00:08:42,066
issues, which again makes sense because Prometheus was one

133
00:08:42,088 --> 00:08:45,370
of the most common images we scanned, and also armo CD.

134
00:08:45,550 --> 00:08:49,826
And at the end of the list you can see the same libgcrypt

135
00:08:49,858 --> 00:08:51,720
and escalite issues we had before.

136
00:08:53,370 --> 00:08:57,350
Let's look now at this proto Bruf vulnerability.

137
00:08:57,690 --> 00:09:01,510
It was very surprising. It's really strange that in the graduated

138
00:09:01,590 --> 00:09:05,286
CNCF projects you have a high vulnerability which is so old and it's

139
00:09:05,318 --> 00:09:08,506
been around for so long. But what we realize is that

140
00:09:08,528 --> 00:09:11,926
there's actually a bug open on this issue. The image

141
00:09:11,958 --> 00:09:15,134
scanner actually misinterprets a Golang package as a C

142
00:09:15,172 --> 00:09:18,430
package here. In other words, this is a false positive.

143
00:09:18,850 --> 00:09:22,458
Actually, Gripe has come out with a new version since, so it might even be

144
00:09:22,484 --> 00:09:26,530
fixed again. We're looking at the filtered list

145
00:09:26,600 --> 00:09:28,820
now, as we did before.

146
00:09:30,310 --> 00:09:34,206
These are the five vulnerabilities out of the original

147
00:09:34,238 --> 00:09:38,274
ten that we marked as actually exploitable

148
00:09:38,322 --> 00:09:39,910
in some circumstances.

149
00:09:41,690 --> 00:09:45,282
If we look at this distribution of the average of vulnerabilities

150
00:09:45,346 --> 00:09:48,534
per severity in both samples, it looks like if we take

151
00:09:48,572 --> 00:09:52,314
a random image from a graduated project, it'll most likely have way

152
00:09:52,352 --> 00:09:55,958
less vulnerabilities than an image from that of the general sample.

153
00:09:56,134 --> 00:09:59,514
So this graph is very complementing and it looks great and

154
00:09:59,552 --> 00:10:03,302
it's easy to think okay, cool. We're doing an awesome job here in CNCF,

155
00:10:03,366 --> 00:10:07,166
and I want to believe that. But we still raise the question of is

156
00:10:07,188 --> 00:10:09,710
it really true that the situation is that good?

157
00:10:09,860 --> 00:10:13,166
Because we learned something during this process, and that is,

158
00:10:13,188 --> 00:10:16,894
like we mentioned, a vulnerability that an image scanner has returned

159
00:10:16,942 --> 00:10:19,700
is not always an exploitable security issue.

160
00:10:20,390 --> 00:10:23,822
So we're trying to fix that. I'd like to show you a work in progress

161
00:10:23,886 --> 00:10:27,606
project called Sneefer, which will soon be integrated into cubescape and will

162
00:10:27,628 --> 00:10:30,726
look a bit different. But the idea is to enable us to

163
00:10:30,748 --> 00:10:34,294
use EBPF to understand which software packages are loaded into

164
00:10:34,332 --> 00:10:37,398
the memory of the container. Basically,

165
00:10:37,564 --> 00:10:41,310
using this information, we can filter out the s bomb of the container image

166
00:10:41,330 --> 00:10:45,302
and show the software packages that are actually inside our running container.

167
00:10:45,446 --> 00:10:48,794
Then if we feed this back to the vulnerability scanner, we'll get a better

168
00:10:48,832 --> 00:10:52,186
result, a more relevant result. So just returning here

169
00:10:52,208 --> 00:10:55,658
for a minute, you can see that in this NginX container,

170
00:10:55,754 --> 00:10:58,906
the image scanner returns nearly 400 vulnerabilities,

171
00:10:59,018 --> 00:11:02,722
but only four of them are actually in memory, which is amazing. It makes

172
00:11:02,776 --> 00:11:06,626
a huge difference. So if

173
00:11:06,648 --> 00:11:11,022
we look again at this top ten vulnerabilities and recalculated

174
00:11:11,166 --> 00:11:14,900
the images with this relevancy taken into account,

175
00:11:15,270 --> 00:11:18,614
what we found is that still the graduated projects are much

176
00:11:18,652 --> 00:11:22,534
better in the general sense, but the difference is not that big.

177
00:11:22,732 --> 00:11:26,086
If we just focus on the critical and high vulnerabilities, we see

178
00:11:26,108 --> 00:11:29,674
that there's no big difference in the numbers, which again

179
00:11:29,712 --> 00:11:33,562
made us think that the graduated projects are doing better, but maybe not

180
00:11:33,696 --> 00:11:36,060
by that much like we thought before.

181
00:11:37,630 --> 00:11:40,886
Now why is this happening? One of the reasons

182
00:11:40,918 --> 00:11:44,526
we came up with for the fact that in the graduated projects and in

183
00:11:44,548 --> 00:11:47,934
general the CNCF projects have much less vulnerabilities is

184
00:11:47,972 --> 00:11:51,566
because we're using newer technologies. Most of our projects are

185
00:11:51,668 --> 00:11:55,426
really created for this ecosystem. They're using go. They're usually built

186
00:11:55,528 --> 00:11:59,250
upon base images which are empty, not like base images of

187
00:11:59,320 --> 00:12:03,026
different Linux distributions which are bringing in their own vulnerabilities even

188
00:12:03,048 --> 00:12:05,860
before you've added your own file systems into them.

189
00:12:06,230 --> 00:12:09,634
Also, if we look at the way we're managing things at CNCF

190
00:12:09,682 --> 00:12:13,382
and these projects, the transparency has a big effect on solving issues

191
00:12:13,436 --> 00:12:16,626
really fast. On the other hand, most of the projects,

192
00:12:16,658 --> 00:12:19,766
like we said, are written in go, which is loaded into memory, so it's harder

193
00:12:19,798 --> 00:12:21,690
to detect what's unused.

194
00:12:23,710 --> 00:12:26,854
So we'll talk briefly also about configuration

195
00:12:26,902 --> 00:12:30,234
scanning of kubernetes objects. So again,

196
00:12:30,272 --> 00:12:34,122
what we're going to do is compare these two samples of repositories of graduated

197
00:12:34,186 --> 00:12:37,758
projects and registries of the general population, and we're going to look at what kind

198
00:12:37,764 --> 00:12:39,950
of issues we're seeing in both samples.

199
00:12:41,810 --> 00:12:45,646
Kubescape uses controls which are basically tests of

200
00:12:45,668 --> 00:12:49,022
different properties of kubernetes objects.

201
00:12:49,166 --> 00:12:52,770
For example, checking whether you're using an immutable file system

202
00:12:52,840 --> 00:12:56,454
in your Kubernetes workloads is one of the tests which, as we can see,

203
00:12:56,492 --> 00:13:00,120
is the control that the general population failed on the most.

204
00:13:01,210 --> 00:13:04,354
A lot of workloads don't use immutable file systems,

205
00:13:04,482 --> 00:13:08,294
which kind of makes sense because immutable file systems are not easy

206
00:13:08,332 --> 00:13:11,786
to configure. And although it's a good thing from a security

207
00:13:11,888 --> 00:13:15,482
perspective to have, it's probably not the most important thing

208
00:13:15,536 --> 00:13:19,322
in terms of priority. So that did make sense for us.

209
00:13:19,456 --> 00:13:22,870
What was a bit more surprising is that number two is resource limits. A lot

210
00:13:22,880 --> 00:13:26,414
of workloads don't have resource limits in our sample we

211
00:13:26,452 --> 00:13:29,706
have a lot that are running as root container, therefore they are failing.

212
00:13:29,738 --> 00:13:33,794
The control of non root containers around the same number

213
00:13:33,912 --> 00:13:37,378
are allowing privilege escalations. After that you

214
00:13:37,384 --> 00:13:41,570
can see a lot are not configuring memory limits, resource limits,

215
00:13:41,910 --> 00:13:45,234
common label usage, which is not a security issue per

216
00:13:45,272 --> 00:13:48,598
se, but we have a lot of cis compliant issues down at the end of

217
00:13:48,604 --> 00:13:52,434
the sample. Moving on to the graduated

218
00:13:52,482 --> 00:13:55,862
CNCF project, again, number one,

219
00:13:55,916 --> 00:13:59,654
which is quite surprising, is the most common issue here, is the resources limits

220
00:13:59,702 --> 00:14:03,222
are not configured. After that we have readiness probes

221
00:14:03,286 --> 00:14:07,014
missing, and again immutable file systems not configured.

222
00:14:07,142 --> 00:14:11,022
Then memory limits are missing. Then the next two

223
00:14:11,076 --> 00:14:14,922
non root containers are configured more here in graduated

224
00:14:14,986 --> 00:14:18,442
projects, and so are containers that don't allow privilege escalations,

225
00:14:18,506 --> 00:14:22,046
but not by a lot more. In general.

226
00:14:22,148 --> 00:14:25,134
Again, we see that this distribution is a bit different,

227
00:14:25,252 --> 00:14:27,060
but we still have a lot of issues.

228
00:14:28,230 --> 00:14:31,870
We tried to compare what if we were to take a random workload

229
00:14:31,950 --> 00:14:35,806
from each of these samples? What percent of our controls would fail?

230
00:14:35,998 --> 00:14:39,238
And as it turns out, 35 of our controls would fail if we

231
00:14:39,244 --> 00:14:43,286
chose a random workload from the graduated project, and 38 would fail if

232
00:14:43,308 --> 00:14:46,498
we chose one from the Java sample. So it's

233
00:14:46,514 --> 00:14:50,860
clear that these numbers are quite close and we don't see such a huge difference.

234
00:14:51,950 --> 00:14:55,370
So to wrap up in terms of misconfigurations,

235
00:14:55,710 --> 00:15:00,522
CNCF graduate projects are only slightly better in

236
00:15:00,576 --> 00:15:03,914
terms of vulnerabilities. Again, it's hard to say that graduated

237
00:15:03,962 --> 00:15:07,338
CNCF projects are meaningfully less vulnerable,

238
00:15:07,514 --> 00:15:10,814
especially when we're taking into account that, as we saw, not all

239
00:15:10,852 --> 00:15:14,526
vulnerabilities that we get from an image scanner are exploitable, but it

240
00:15:14,548 --> 00:15:18,398
seems that they are slightly less vulnerable. In general, there's a

241
00:15:18,404 --> 00:15:21,690
lot of work to be done to make vulnerability

242
00:15:21,770 --> 00:15:24,670
scanners more effective and more relevant.

243
00:15:25,850 --> 00:15:28,850
Thanks very much for listening and enjoy the rest of the conference.

