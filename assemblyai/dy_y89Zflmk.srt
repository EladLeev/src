1
00:00:20,410 --> 00:00:24,174
Hello everyone, I am Myron Giannakis and I

2
00:00:24,212 --> 00:00:27,654
hope you are as excited as I am to join my

3
00:00:27,692 --> 00:00:31,430
talk on implementing quantum algorithms using Qiskit.

4
00:00:32,010 --> 00:00:34,360
First of all, let me introduce myself.

5
00:00:34,890 --> 00:00:38,010
I come from Greece where I am studying computer

6
00:00:38,080 --> 00:00:41,914
engineering and for the last two years I

7
00:00:41,952 --> 00:00:46,138
am the coordinator of the Quantum Computing Students group

8
00:00:46,304 --> 00:00:50,250
pertain of the IEEE brands of the University of Padres.

9
00:00:51,170 --> 00:00:55,194
There we try to introduce and get involved

10
00:00:55,242 --> 00:00:59,120
into quantum computing more of our university students,

11
00:00:59,650 --> 00:01:03,674
and what I'm going to talk about today is

12
00:01:03,812 --> 00:01:07,822
a game I developed in order to make this task

13
00:01:07,886 --> 00:01:11,220
more interesting and easier for the new members.

14
00:01:11,910 --> 00:01:15,038
I will be more than happy to get in touch with any

15
00:01:15,064 --> 00:01:19,686
of you via either LinkedIn or email so

16
00:01:19,788 --> 00:01:23,410
you can find both of them on this first slide.

17
00:01:23,570 --> 00:01:27,094
And please do not hesitate to send

18
00:01:27,132 --> 00:01:27,880
a message.

19
00:01:31,310 --> 00:01:34,822
My talk comprises two main parts.

20
00:01:34,966 --> 00:01:37,686
The first one is more theoretical,

21
00:01:37,798 --> 00:01:42,110
providing an abstract of quantum git distribution

22
00:01:42,530 --> 00:01:45,838
and the protocol BB 84

23
00:01:46,004 --> 00:01:50,030
that I'm going to talk about. And the second

24
00:01:50,100 --> 00:01:53,486
part will be code oriented where I

25
00:01:53,508 --> 00:01:57,134
will present more practical concepts

26
00:01:57,182 --> 00:02:00,450
of the project, the main idea,

27
00:02:00,520 --> 00:02:03,460
the code and the game.

28
00:02:04,970 --> 00:02:08,694
First, I would like to briefly introduce some

29
00:02:08,732 --> 00:02:12,486
of the prerequisite theoretical aspects just

30
00:02:12,508 --> 00:02:16,200
to make sure that we're all starting on the same page.

31
00:02:17,050 --> 00:02:20,426
The subject I will focus on is, as I

32
00:02:20,448 --> 00:02:24,234
said, quantum gear distribution, or QKD for sort,

33
00:02:24,432 --> 00:02:28,780
and specifically the protocol BB 84,

34
00:02:29,230 --> 00:02:33,950
a scheme developed by Charles Bennett and Zilbrasard

35
00:02:34,290 --> 00:02:38,174
in their paper published in 1984.

36
00:02:38,372 --> 00:02:41,790
Being the first quantum cryptograph protocol,

37
00:02:42,550 --> 00:02:46,226
QKD aims at the creating of a

38
00:02:46,248 --> 00:02:50,430
secret key shared between authorized partners connected

39
00:02:50,510 --> 00:02:54,386
via both a quantum channel and a

40
00:02:54,408 --> 00:02:56,600
classical authenticated channel.

41
00:02:57,370 --> 00:03:00,950
The security of the key relies on two conditions.

42
00:03:01,370 --> 00:03:04,838
First, the existence of an authenticated public

43
00:03:04,924 --> 00:03:08,714
classical channel and second, and most more

44
00:03:08,752 --> 00:03:13,402
important, the no cloning theorem that

45
00:03:13,536 --> 00:03:17,158
states that unlike classical computing

46
00:03:17,254 --> 00:03:21,354
in quantum, it is impossible to copy a quantum

47
00:03:21,402 --> 00:03:25,038
state. It is a quantum property that

48
00:03:25,124 --> 00:03:29,178
information gain is only possible at the expense

49
00:03:29,274 --> 00:03:31,550
of disturbing the signal.

50
00:03:32,950 --> 00:03:37,042
Talking about security the uncertainty principle of

51
00:03:37,096 --> 00:03:41,422
quantum physics gives rise to new cryptographic phenomena

52
00:03:41,486 --> 00:03:45,278
unachievable with traditional transmission media.

53
00:03:45,464 --> 00:03:49,014
For example, the communication channel described in

54
00:03:49,132 --> 00:03:52,962
BB 84 protocol is impossible

55
00:03:53,026 --> 00:03:56,534
in principle to be eavesdropped without a

56
00:03:56,572 --> 00:03:59,926
high probability and really high probability

57
00:04:00,118 --> 00:04:03,722
of disturbing the transmission in such

58
00:04:03,776 --> 00:04:07,082
a way as to be detected, making it

59
00:04:07,216 --> 00:04:11,066
secure against any traditional kind of creating without

60
00:04:11,168 --> 00:04:15,294
putting any restriction on an eavedropper's power.

61
00:04:15,492 --> 00:04:19,134
So it is basically unbreakable, we would

62
00:04:19,172 --> 00:04:19,760
say.

63
00:04:22,850 --> 00:04:26,226
Now let's see what exactly is adjusted by the

64
00:04:26,248 --> 00:04:30,034
protocol. Here you can see the

65
00:04:30,072 --> 00:04:32,980
circuit as well as a demonstrative example,

66
00:04:34,230 --> 00:04:37,762
we consider two users called Alice and bob,

67
00:04:37,826 --> 00:04:41,286
a and b, and let Alice choose a

68
00:04:41,308 --> 00:04:45,030
random bit string and a random sequence of quantum games

69
00:04:45,450 --> 00:04:48,330
had the mart's or identity.

70
00:04:49,230 --> 00:04:53,798
She then creates a train of qubits. It's initialized

71
00:04:53,894 --> 00:04:57,126
to one bit of the string and passed

72
00:04:57,158 --> 00:05:00,446
through the respective gate. Bob on the

73
00:05:00,468 --> 00:05:04,094
other end of the channel, receives these qubits and

74
00:05:04,132 --> 00:05:07,214
decides at random whether to apply on

75
00:05:07,252 --> 00:05:10,158
each of them a hadamard gate or not,

76
00:05:10,324 --> 00:05:13,890
before measuring it and collapsing its state

77
00:05:14,040 --> 00:05:17,234
into a classical zero or one

78
00:05:17,272 --> 00:05:21,186
a classical bit. It is not hard to understand

79
00:05:21,288 --> 00:05:24,722
that in the case where Bob uses the same

80
00:05:24,776 --> 00:05:28,358
quantum gate as Alice, he will certainly get

81
00:05:28,444 --> 00:05:31,894
the bits he initially sent, while when

82
00:05:31,932 --> 00:05:35,286
they use different games he will get a random bit

83
00:05:35,388 --> 00:05:39,798
that doesn't contain any information thats

84
00:05:39,974 --> 00:05:44,234
Bob obtains meaningful data only from

85
00:05:44,352 --> 00:05:48,010
half the qubits on average that he receives

86
00:05:48,830 --> 00:05:52,910
those for which he guessed the correct gate

87
00:05:55,010 --> 00:05:58,894
exactly. These bits are the

88
00:05:58,932 --> 00:06:02,470
ones thats are going to form the key at the end of the protocol,

89
00:06:02,650 --> 00:06:06,530
but the users do not know yet which ones

90
00:06:06,600 --> 00:06:10,322
they are. Each one knows only the gates they

91
00:06:10,376 --> 00:06:14,030
used and the bits they sent or received,

92
00:06:14,110 --> 00:06:16,230
whether they're Alice or Bob.

93
00:06:17,210 --> 00:06:21,510
So they have to communicate through a classical channel

94
00:06:21,660 --> 00:06:23,320
to pass the needed information.

95
00:06:24,650 --> 00:06:28,522
Though since this channel will

96
00:06:28,576 --> 00:06:32,010
be susceptible to eavesdropping,

97
00:06:32,430 --> 00:06:36,950
they should not reveal the bits values, but communicate

98
00:06:37,030 --> 00:06:39,290
only the games they applied.

99
00:06:40,130 --> 00:06:44,142
In that way, any eavesdropper would

100
00:06:44,196 --> 00:06:48,302
know which bits have been transmitted correctly, but not their

101
00:06:48,356 --> 00:06:51,742
actual values. The security

102
00:06:51,876 --> 00:06:55,442
of the process during both

103
00:06:55,496 --> 00:06:59,346
the quantum and the classical communication is guaranteed in

104
00:06:59,368 --> 00:07:02,894
the quantum since an IFS dropper would disturb

105
00:07:02,942 --> 00:07:06,626
the quantum state and thus be detected. According to

106
00:07:06,648 --> 00:07:09,990
the no cloning theorem, he cannot

107
00:07:10,570 --> 00:07:14,322
replicate the state. So Bob would extract

108
00:07:14,466 --> 00:07:17,746
wrong data and understand that there would

109
00:07:17,788 --> 00:07:21,434
be a problem in the classical case.

110
00:07:21,632 --> 00:07:23,900
In the classical channel,

111
00:07:26,510 --> 00:07:31,066
the security is guaranteed because there's

112
00:07:31,098 --> 00:07:34,734
not using transmitted any information about the key,

113
00:07:34,932 --> 00:07:39,242
the data thats is transmitted the games. It is useless

114
00:07:39,306 --> 00:07:43,390
to someone that does not have access to either Alice's

115
00:07:43,470 --> 00:07:45,730
or Bob's bits.

116
00:07:47,670 --> 00:07:50,930
At the bottom here of the slide,

117
00:07:51,990 --> 00:07:58,526
I provide an example of

118
00:07:58,568 --> 00:08:01,906
application of the protocol where I demonstrated

119
00:08:02,018 --> 00:08:05,030
all the before mentioned steps.

120
00:08:05,530 --> 00:08:10,230
On the first row, there are the initial bits

121
00:08:10,310 --> 00:08:14,262
that Alice sent, then Alice's and Bob's gates,

122
00:08:14,326 --> 00:08:18,746
and the received bits, and at

123
00:08:18,768 --> 00:08:22,400
the bottom part is the communication through the classical channel.

124
00:08:23,250 --> 00:08:27,226
We're finally keeping only the correctly transmitted

125
00:08:27,258 --> 00:08:30,474
bits to form the secret

126
00:08:30,522 --> 00:08:31,120
key.

127
00:08:35,350 --> 00:08:39,314
Now that we have seen the theory of the protocol, let's try

128
00:08:39,352 --> 00:08:42,514
to think of a way to motivate students to

129
00:08:42,552 --> 00:08:46,214
get involved into learning it. My idea

130
00:08:46,332 --> 00:08:49,766
was to use Qiskit to implement the

131
00:08:49,788 --> 00:08:53,378
protocol and organize a competition,

132
00:08:53,474 --> 00:08:56,774
a competitive game where I

133
00:08:56,812 --> 00:09:00,714
would send a secret message to all the students and

134
00:09:00,752 --> 00:09:04,154
they would have to write their own code to decrypt it as

135
00:09:04,192 --> 00:09:07,078
fast as possible. Qiskit,

136
00:09:07,174 --> 00:09:11,146
for anyone that doesn't know, is an open source

137
00:09:11,258 --> 00:09:14,862
quantum software development kit provided by

138
00:09:14,916 --> 00:09:18,254
IBM. It is available as

139
00:09:18,292 --> 00:09:22,446
a Python library, which makes it really easy to

140
00:09:22,468 --> 00:09:26,654
implement, and it simulates the operations

141
00:09:26,702 --> 00:09:30,242
of a quantum computer while also

142
00:09:30,296 --> 00:09:35,006
allowing operations that would not even be possible on

143
00:09:35,048 --> 00:09:38,360
a real quantum machine, for example,

144
00:09:38,970 --> 00:09:42,838
peaking in a superposed state without

145
00:09:42,924 --> 00:09:44,120
disturbing it.

146
00:09:45,610 --> 00:09:49,402
I exploited this fact to make

147
00:09:49,456 --> 00:09:52,506
my game easier to implement and more interesting,

148
00:09:52,688 --> 00:09:56,026
and add more learning

149
00:09:56,128 --> 00:09:58,780
value to it.

150
00:10:01,010 --> 00:10:04,286
Let me now describe the structure, the main idea of

151
00:10:04,308 --> 00:10:08,314
the program. While it is based on the BB

152
00:10:08,362 --> 00:10:11,854
84 protocol, it differs from it on

153
00:10:11,972 --> 00:10:14,820
two main points.

154
00:10:15,830 --> 00:10:18,994
First, Alice does not

155
00:10:19,032 --> 00:10:23,454
send a bit string, but a character string. Its character

156
00:10:23,582 --> 00:10:26,994
is represented by a quantum circuit

157
00:10:27,122 --> 00:10:31,174
of seven qubits instead of one qubit, and they

158
00:10:31,212 --> 00:10:34,470
correspond to the seven bits of its

159
00:10:34,540 --> 00:10:37,682
ascii code. And in order

160
00:10:37,756 --> 00:10:41,590
to not complicate things, all games

161
00:10:41,670 --> 00:10:45,622
that are applied to any circuit

162
00:10:45,686 --> 00:10:49,482
or qubit are applied to all

163
00:10:49,536 --> 00:10:51,120
seven qubits of it.

164
00:10:53,090 --> 00:10:56,714
The second difference is that the data transmitted

165
00:10:56,762 --> 00:11:00,254
through the whole process is not a key like in

166
00:11:00,292 --> 00:11:02,758
the BB 84 protocol,

167
00:11:02,954 --> 00:11:05,620
but it is the whole message.

168
00:11:06,230 --> 00:11:10,402
This requires retransmitting many

169
00:11:10,456 --> 00:11:11,060
times.

170
00:11:13,830 --> 00:11:17,894
Probably it has a complexity of log of x,

171
00:11:18,012 --> 00:11:21,526
since each time half of the

172
00:11:21,548 --> 00:11:25,362
characters are expected to be received correctly.

173
00:11:25,506 --> 00:11:28,810
So it should be a complexity of

174
00:11:28,880 --> 00:11:32,410
Big O of log x, where x is the

175
00:11:32,560 --> 00:11:35,610
length of the message, and each

176
00:11:35,680 --> 00:11:39,066
time the new message is games as the

177
00:11:39,088 --> 00:11:43,870
previous one, excluding the correctly received characters.

178
00:11:44,610 --> 00:11:47,806
We will see it in more detail in a

179
00:11:47,828 --> 00:11:52,240
few minutes. The initial program is

180
00:11:52,550 --> 00:11:56,434
composed of three main parts of code that

181
00:11:56,632 --> 00:12:00,306
are those that you can see in

182
00:12:00,328 --> 00:12:03,714
the image in the slide. The first is the

183
00:12:03,752 --> 00:12:07,218
crypto circuit class, which inherits

184
00:12:07,394 --> 00:12:09,910
Kiskid's quantum circuit.

185
00:12:11,130 --> 00:12:15,062
The characters that I talked about are encoded in

186
00:12:15,116 --> 00:12:17,160
instances of this class.

187
00:12:20,890 --> 00:12:25,014
Second is the class protocol BB

188
00:12:25,062 --> 00:12:25,900
84.

189
00:12:29,230 --> 00:12:33,002
It contains the static methods

190
00:12:33,146 --> 00:12:36,122
that implement the sender, the receiver,

191
00:12:36,266 --> 00:12:39,230
and the classical channel of the protocol.

192
00:12:39,650 --> 00:12:43,842
And finally, there's also the main function which

193
00:12:43,976 --> 00:12:48,478
controls the whole program and processes

194
00:12:48,574 --> 00:12:52,782
the data that are sent and received

195
00:12:52,926 --> 00:12:54,340
transmitted in general.

196
00:12:56,650 --> 00:12:59,798
Let's get into the details of the program's code.

197
00:12:59,964 --> 00:13:03,942
Starting with the main function here,

198
00:13:03,996 --> 00:13:06,360
you can see the whole code of it,

199
00:13:06,810 --> 00:13:10,266
and the main part of the function is this

200
00:13:10,368 --> 00:13:13,542
while loop, which repeats the transmission

201
00:13:13,606 --> 00:13:16,970
until the whole message has been received correctly.

202
00:13:18,110 --> 00:13:22,218
Then the methods of the protocol

203
00:13:22,314 --> 00:13:25,680
BB 84 class get called,

204
00:13:26,370 --> 00:13:31,102
each one provided with the information that

205
00:13:31,156 --> 00:13:34,580
it should have access to, and only this information.

206
00:13:35,670 --> 00:13:39,634
So the receiver gets

207
00:13:39,672 --> 00:13:42,850
us input only the circuit because we're talking about

208
00:13:42,920 --> 00:13:46,162
the quantum channel. And then the classical

209
00:13:46,226 --> 00:13:50,150
channel method gets us inputs the games

210
00:13:50,570 --> 00:13:54,486
of Alice and Bob's that

211
00:13:54,508 --> 00:13:57,770
Alice and Bob have applied. Finally,

212
00:13:57,840 --> 00:14:01,820
at the end of the function, we get the part

213
00:14:03,070 --> 00:14:07,434
of the message that Bob received and calculate the

214
00:14:07,472 --> 00:14:11,550
message that Alice will have to resend in order to

215
00:14:11,700 --> 00:14:15,822
continue this process in the while

216
00:14:15,876 --> 00:14:16,990
loop loop.

217
00:14:19,090 --> 00:14:22,694
Now let's dive a bit deeper,

218
00:14:22,762 --> 00:14:25,998
looking at how the previous static methods

219
00:14:26,094 --> 00:14:29,586
are actually implemented. On the left you

220
00:14:29,608 --> 00:14:33,666
can see the sender method, whose input is only the

221
00:14:33,688 --> 00:14:38,134
message for its character of the message it

222
00:14:38,252 --> 00:14:42,422
creates. The quantum circuit initializes it

223
00:14:42,556 --> 00:14:45,320
to the correspondent ASCII code,

224
00:14:45,930 --> 00:14:49,370
applies at random the Hadamart or

225
00:14:49,440 --> 00:14:53,494
identity games, and returns an array

226
00:14:53,542 --> 00:14:57,370
of the circuits and one of the gates that

227
00:14:57,440 --> 00:15:00,220
were used. On the right.

228
00:15:01,650 --> 00:15:05,162
The receiver method gets as input

229
00:15:05,306 --> 00:15:08,670
the list of the circuits received by Bob,

230
00:15:09,170 --> 00:15:13,710
and for each one of them applies his random gate

231
00:15:13,870 --> 00:15:17,970
and measures the result, getting an ascii character.

232
00:15:18,310 --> 00:15:21,790
This method returns the received characters

233
00:15:21,950 --> 00:15:25,170
as well as the array of Bob supplied games.

234
00:15:27,690 --> 00:15:31,574
Finally, the method of

235
00:15:31,692 --> 00:15:35,362
classical channel receives as inputs

236
00:15:35,506 --> 00:15:39,622
the two lists of Alice's and Bob's games,

237
00:15:39,766 --> 00:15:43,606
and returns the indices of the correctly

238
00:15:43,638 --> 00:15:48,330
transmitted characters, the indices and not the actual characters.

239
00:15:49,390 --> 00:15:53,646
Of course, for the reasons that I mentioned

240
00:15:53,828 --> 00:15:57,146
before, these methods

241
00:15:57,178 --> 00:16:01,280
are not complicated and don't do anything more than

242
00:16:01,810 --> 00:16:05,810
implementing what was described in the theory.

243
00:16:06,950 --> 00:16:10,834
Finally, the class for

244
00:16:10,872 --> 00:16:14,770
the circuit, the class where r encoded

245
00:16:16,230 --> 00:16:20,040
all the characters that are to be sent is the

246
00:16:20,970 --> 00:16:24,786
cryptocurcuit class, I'm sorry. Which extends

247
00:16:24,818 --> 00:16:28,346
the kiskit's quantum circuit and adds the

248
00:16:28,368 --> 00:16:31,500
necessary methods for the program. For the game.

249
00:16:32,030 --> 00:16:35,414
The methods initialize, add, gate,

250
00:16:35,542 --> 00:16:39,762
and get measurements are asked to respectively

251
00:16:39,926 --> 00:16:43,054
set the circuit to an initial state,

252
00:16:43,252 --> 00:16:46,602
add or not Hadamard gate,

253
00:16:46,746 --> 00:16:50,750
and get measurements for the circuit's qubits.

254
00:16:51,730 --> 00:16:55,186
The interesting method here though is

255
00:16:55,288 --> 00:16:58,674
the visualize, which displays the

256
00:16:58,712 --> 00:17:00,530
multivector of the circuit.

257
00:17:01,910 --> 00:17:05,638
Here I have added a simple example of a

258
00:17:05,724 --> 00:17:09,654
circuit to make it easier to imagine how the

259
00:17:09,692 --> 00:17:13,654
circuits would look like this one comprises of

260
00:17:13,692 --> 00:17:17,670
only three qubits representing

261
00:17:18,430 --> 00:17:22,426
the bits zero, one and zero as

262
00:17:22,528 --> 00:17:27,194
it can be seen from them if

263
00:17:27,232 --> 00:17:30,814
we read the visualization. And on

264
00:17:30,852 --> 00:17:34,362
the right I have added

265
00:17:34,506 --> 00:17:37,966
a hadamard gate on the circuit so you

266
00:17:37,988 --> 00:17:42,390
can see the 90 degrees rotation

267
00:17:42,570 --> 00:17:45,410
of the three block vectors.

268
00:17:46,310 --> 00:17:49,954
This is the case that was mentioned before where

269
00:17:50,072 --> 00:17:53,250
Bob doesn't get any information about the characters,

270
00:17:54,390 --> 00:17:58,066
about the character since he thats the same probability

271
00:17:58,258 --> 00:18:01,830
to get any character. Each one has

272
00:18:01,980 --> 00:18:05,734
50% probability to give measurement of zero or

273
00:18:05,772 --> 00:18:09,238
one. You can see under the block spheres

274
00:18:09,414 --> 00:18:12,826
that the result of the measurement is a

275
00:18:12,848 --> 00:18:16,554
random triplet of bits and not the

276
00:18:16,592 --> 00:18:20,366
initial 3010. Getting to

277
00:18:20,388 --> 00:18:24,254
the last part of my talk, how did I get from the

278
00:18:24,292 --> 00:18:28,574
program to the game? For that? Instead of

279
00:18:28,692 --> 00:18:32,542
calling the main function, I called directly the

280
00:18:32,596 --> 00:18:35,790
sender method and saved the results.

281
00:18:35,950 --> 00:18:40,082
The lists of circuits and games in two

282
00:18:40,136 --> 00:18:44,414
files representing the two channels respectively,

283
00:18:44,542 --> 00:18:48,450
quantum and classical for the circuits and gates

284
00:18:48,530 --> 00:18:51,766
in each one you

285
00:18:51,788 --> 00:18:55,270
can again see the code here. It is

286
00:18:55,420 --> 00:18:57,990
nothing too complicated.

287
00:18:59,630 --> 00:19:03,674
And then I shared these files with

288
00:19:03,712 --> 00:19:08,118
the students along with Jupiter notebook

289
00:19:08,214 --> 00:19:11,406
containing the basic codes, but leaving a

290
00:19:11,428 --> 00:19:15,520
big part of the protocol to be implemented by them.

291
00:19:17,650 --> 00:19:21,840
More specifically, the crypto circuit class

292
00:19:22,310 --> 00:19:25,794
was provided so they

293
00:19:25,832 --> 00:19:29,838
can properly use the circuits and the protocol

294
00:19:29,934 --> 00:19:33,890
BB 84 class is as

295
00:19:33,960 --> 00:19:36,898
it can be seen here in the image.

296
00:19:37,074 --> 00:19:41,010
It missed entirely the sender method

297
00:19:41,090 --> 00:19:44,760
since it wouldn't be of any need for them,

298
00:19:45,130 --> 00:19:49,094
and the receiver and classical channel methods

299
00:19:49,222 --> 00:19:53,110
were empty to be implemented

300
00:19:53,190 --> 00:19:56,842
by the participants. The participants also

301
00:19:56,896 --> 00:20:00,310
had to write some kind of a main function

302
00:20:00,480 --> 00:20:03,310
that would call the methods process.

303
00:20:03,380 --> 00:20:07,230
The outputs take the needed actions in order

304
00:20:07,300 --> 00:20:09,200
to get to a result.

305
00:20:11,730 --> 00:20:15,810
This whole thing was done in the form of a

306
00:20:15,880 --> 00:20:19,874
competitive game where winner would be the

307
00:20:19,912 --> 00:20:24,286
first person to manage to decrypt my initial

308
00:20:24,398 --> 00:20:28,342
message. So this

309
00:20:28,396 --> 00:20:31,878
was how I implemented a variant of the

310
00:20:31,964 --> 00:20:35,080
BB 84 protocol in a game,

311
00:20:35,450 --> 00:20:39,302
hopefully fun, that engaged many of my

312
00:20:39,356 --> 00:20:42,870
fellow undergraduate students in quantum computing.

313
00:20:43,530 --> 00:20:47,462
Thank you very much for listening. If you are interested to know

314
00:20:47,516 --> 00:20:51,306
more about this and other projects,

315
00:20:51,418 --> 00:20:55,790
please check out my team's GitHub repository

316
00:20:56,290 --> 00:21:00,094
and I am looking forward to connecting with

317
00:21:00,132 --> 00:21:03,550
you for further and deeper discussions.

318
00:21:04,450 --> 00:21:04,860
See you.

