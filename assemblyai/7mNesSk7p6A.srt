1
00:00:00,410 --> 00:00:05,360
Jamaica makes on these

2
00:00:05,810 --> 00:00:09,610
real time feedback into the behavior of your distributed systems

3
00:00:09,690 --> 00:00:13,146
and observing changes exceptions errors

4
00:00:13,178 --> 00:00:16,746
in real time allows you to not only experiment with confidence,

5
00:00:16,858 --> 00:00:20,560
but respond instantly to get things working again.

6
00:00:24,610 --> 00:00:47,834
Close today

7
00:00:47,872 --> 00:00:51,038
I wanted to walk you through how I built

8
00:00:51,124 --> 00:00:54,766
interactive commandline tutorials using Webassembly. So the

9
00:00:54,788 --> 00:00:58,378
application I want to focus on today is sandbox bio,

10
00:00:58,474 --> 00:01:02,282
and this is an application that features interactive

11
00:01:02,346 --> 00:01:05,454
commandline tutorials. It's mostly aimed at bioinformaticians,

12
00:01:05,502 --> 00:01:09,246
but it also has tutorials for general command

13
00:01:09,278 --> 00:01:12,578
line usage. So here I have an octututorial. On the left you

14
00:01:12,584 --> 00:01:16,498
have the instructions, and on the right you have this playground where you

15
00:01:16,504 --> 00:01:19,906
can start writing commandline and executing

16
00:01:19,938 --> 00:01:23,922
them right away. So here I'm taking the first few lines of a file.

17
00:01:23,986 --> 00:01:27,890
I can also make more complex commands, like taking the output

18
00:01:27,970 --> 00:01:31,254
of awk that prints the third column and piping

19
00:01:31,302 --> 00:01:34,854
it into the head command. And what's

20
00:01:34,902 --> 00:01:38,650
interesting about this is that not only is it running

21
00:01:38,720 --> 00:01:42,170
the real know, this is not a simulation,

22
00:01:42,590 --> 00:01:46,250
it's running AUC in the browser. There are no servers

23
00:01:46,330 --> 00:01:50,174
that do any of this computation. How, you ask?

24
00:01:50,292 --> 00:01:53,390
Well, that's where Webassembly comes in.

25
00:01:53,540 --> 00:01:57,534
And so let me start by telling you a bit more about webassembly

26
00:01:57,582 --> 00:02:01,278
itself. To me, Webassembly is just another language

27
00:02:01,374 --> 00:02:04,922
that you can use in the browser. We can use HTML, CSS,

28
00:02:05,006 --> 00:02:07,910
Javascript. Now we can also use Webassembly.

29
00:02:08,330 --> 00:02:12,118
The key difference though, is that Webassembly looks a

30
00:02:12,124 --> 00:02:15,654
little strange. So here's a very simple piece of

31
00:02:15,692 --> 00:02:19,058
code in Webassembly that defines a function,

32
00:02:19,244 --> 00:02:23,642
and this function returns a string that has.com

33
00:02:23,696 --> 00:02:26,794
42 in it. That's all these does. This looks pretty

34
00:02:26,832 --> 00:02:30,538
complicated, but the thing about Webassembly is that you don't write

35
00:02:30,624 --> 00:02:33,850
this code directly. It's a compilation target,

36
00:02:33,930 --> 00:02:37,086
meaning that you write code in another language, or you

37
00:02:37,108 --> 00:02:40,430
take existing code in another language like c,

38
00:02:40,580 --> 00:02:44,206
and then you compile it to webassembly so that you can run it

39
00:02:44,228 --> 00:02:47,326
in the browser. So that's why people talk about Webassembly

40
00:02:47,358 --> 00:02:50,834
as being a compilation target. The best support that

41
00:02:50,872 --> 00:02:53,886
we have today is c and c in rust,

42
00:02:53,918 --> 00:02:57,894
but there's other languages that you can absolutely compile to

43
00:02:57,932 --> 00:03:01,000
Webassembly. So why?

44
00:03:01,770 --> 00:03:05,174
The reason webassembly has been really powerful so far is three

45
00:03:05,212 --> 00:03:08,554
things. Number one, reusing code. All these are

46
00:03:08,592 --> 00:03:12,278
examples of tools that were on a desktop

47
00:03:12,454 --> 00:03:16,330
or on the command line that have been ported to the web without

48
00:03:16,400 --> 00:03:19,146
having to start from scratch. Number two,

49
00:03:19,248 --> 00:03:22,922
performance. In some cases you can replace

50
00:03:23,066 --> 00:03:26,926
slow, heavy Javascript computation with

51
00:03:27,028 --> 00:03:30,314
faster, more optimized webassembly, and you can get speed

52
00:03:30,362 --> 00:03:34,242
ups. And number three, there's this idea that you can really

53
00:03:34,296 --> 00:03:38,398
run webassembly wherever a runtime for it exists.

54
00:03:38,574 --> 00:03:41,602
So there's webassembly runtime in the browser, but there's also

55
00:03:41,656 --> 00:03:45,630
webassembly runtime outside the browser, right? If you do edge computing

56
00:03:45,710 --> 00:03:49,478
like Cloudflare or fastly, if you use node or Dino, you can run it

57
00:03:49,484 --> 00:03:52,566
there was. Well, or you can run it on small devices. Now, how do

58
00:03:52,588 --> 00:03:55,638
you concretely get started?

59
00:03:55,804 --> 00:03:59,690
How do you compile things to webassembly practically,

60
00:04:00,030 --> 00:04:03,274
and if you're compiling c and C plus plus

61
00:04:03,312 --> 00:04:07,050
tools, I would say by far the best choice is

62
00:04:07,120 --> 00:04:11,282
unscripted. It's a fantastic toolkit. It helps simplify

63
00:04:11,366 --> 00:04:15,178
this compilation and offers a whole bunch of utilities

64
00:04:15,354 --> 00:04:18,846
that I will mention in a bit. All right, so let's take

65
00:04:18,868 --> 00:04:22,094
a look at a concrete example. We have

66
00:04:22,132 --> 00:04:25,258
this commandline utility called CPK. This is

67
00:04:25,284 --> 00:04:29,234
a tool commonly used in bioinformatics, and what you should

68
00:04:29,272 --> 00:04:32,450
note is, number one, it's a useful tool, number two,

69
00:04:32,520 --> 00:04:36,078
it's written in c, and number three, I want to run it in the browser,

70
00:04:36,174 --> 00:04:39,714
how do I do that? And so if we put webassembly aside

71
00:04:39,762 --> 00:04:43,478
for a second, how do you compile this tool

72
00:04:43,564 --> 00:04:47,634
in order to run it on your own computer outside the browser?

73
00:04:47,762 --> 00:04:51,734
Well, you would use a C compiler like GCC. And so

74
00:04:51,772 --> 00:04:55,574
here you tell the compiler I want to output a binary file called Ctk,

75
00:04:55,622 --> 00:04:59,066
and I have a whole bunch of flags. If you want to do the

76
00:04:59,088 --> 00:05:03,006
same thing, but compile it to webassembly, what you can

77
00:05:03,028 --> 00:05:06,250
do is use Mscripton's eMCc.

78
00:05:06,410 --> 00:05:10,362
So this stands for mscripton C compiler. It's basically a wrapper

79
00:05:10,506 --> 00:05:14,734
around Gcc that makes these compilation to webassembly easier.

80
00:05:14,862 --> 00:05:18,706
So it looks fairly similar. Instead of outputting a

81
00:05:18,728 --> 00:05:22,654
binary file, you output ctk js.

82
00:05:22,782 --> 00:05:26,318
Note here is that these actually asks MScripton

83
00:05:26,334 --> 00:05:29,970
to output both a wasm and a JS file.

84
00:05:30,050 --> 00:05:33,286
So you may be wondering, what do I need the js file? I thought

85
00:05:33,308 --> 00:05:37,014
this was webassembly, and it is. But one

86
00:05:37,052 --> 00:05:40,454
thing that mscripton does is give you this Javascript

87
00:05:40,502 --> 00:05:43,958
file if you want it, that helps you initialize the module,

88
00:05:44,054 --> 00:05:47,590
helps you deal with calling various functions,

89
00:05:47,670 --> 00:05:51,638
has a bunch of utilities around file systems that I'll

90
00:05:51,654 --> 00:05:55,406
mention in a second. So that could be really powerful to avoid having to

91
00:05:55,508 --> 00:05:58,926
rewrite all that yourself. And so you can see the other flags are

92
00:05:58,948 --> 00:06:02,458
fairly similar, except when we get to Lz.

93
00:06:02,554 --> 00:06:05,854
So this means I want the zealib library. And so

94
00:06:05,892 --> 00:06:09,774
instead of using that you tell these script and use zlilib equals

95
00:06:09,822 --> 00:06:13,586
one. Because the alternative is you would have to bring in

96
00:06:13,608 --> 00:06:16,834
the zlib code and have it also be compiled to

97
00:06:16,872 --> 00:06:20,486
webassembly. And you don't have to figure that, but you

98
00:06:20,508 --> 00:06:23,746
can just tell inscription yeah, I want zlib, and mscripton

99
00:06:23,778 --> 00:06:27,042
does that for a whole bunch of other libraries that are commonly

100
00:06:27,106 --> 00:06:30,294
used. Zlib is very commonly used for compression,

101
00:06:30,422 --> 00:06:34,534
but if you use Png files, you can use png.

102
00:06:34,662 --> 00:06:38,234
If you do a lot of graphics or games, you can ask

103
00:06:38,272 --> 00:06:42,300
emscript to load sdl the same way.

104
00:06:42,830 --> 00:06:45,950
And the last thing I'll mention is this force file system.

105
00:06:46,100 --> 00:06:49,326
You technically don't need to tell these script in that it will figure it

106
00:06:49,348 --> 00:06:53,374
out. But I just want to make it explicit here that most

107
00:06:53,412 --> 00:06:57,074
command line tools expect there to be a file system like

108
00:06:57,112 --> 00:07:00,994
they operate on files, these output files. And so to

109
00:07:01,032 --> 00:07:04,354
make it possible to use that tool as

110
00:07:04,392 --> 00:07:08,274
is in the browser, mscripton creates a virtual file

111
00:07:08,322 --> 00:07:11,826
system in the browser in memory. It doesn't affect

112
00:07:11,858 --> 00:07:14,886
your real files, it's just a mock file system,

113
00:07:15,068 --> 00:07:18,722
but it helps you do things like you could ask the user

114
00:07:18,866 --> 00:07:22,138
to give you a local file and then you can

115
00:07:22,224 --> 00:07:25,386
mount that file on the virtual file system,

116
00:07:25,488 --> 00:07:29,130
giving it a path that you can then give to your command line

117
00:07:29,200 --> 00:07:33,342
utility. And so then it can work the same way normally does.

118
00:07:33,476 --> 00:07:36,510
And so this is another thing that you get out of

119
00:07:36,660 --> 00:07:40,478
outputting this js file. Okay, so how

120
00:07:40,484 --> 00:07:43,806
do I actually call ctk then? Well, if I'm on

121
00:07:43,828 --> 00:07:47,006
the command line, I just call ctk like this and give it the

122
00:07:47,028 --> 00:07:50,930
parameter within scripton you would do

123
00:07:51,000 --> 00:07:54,434
module call main and this is Javascript code, right? And then you

124
00:07:54,472 --> 00:07:57,766
give it an array of parameters that you want to give the

125
00:07:57,788 --> 00:08:01,206
webassembly module. And then behind the scenes mscripton will

126
00:08:01,228 --> 00:08:05,046
figure out how to convert this to something that the

127
00:08:05,068 --> 00:08:08,380
webassembly module will understand. Because keep in mind,

128
00:08:08,750 --> 00:08:11,862
webassembly only understands numbers, right? So you can't

129
00:08:11,926 --> 00:08:15,594
pass in strings, you have to do this transformation. So this

130
00:08:15,632 --> 00:08:19,254
was using Gcc, but mscripton

131
00:08:19,302 --> 00:08:22,998
has a whole bunch of wrappers for other build tools. If you users g,

132
00:08:23,104 --> 00:08:26,234
you can use em. If you're making a library emar,

133
00:08:26,362 --> 00:08:28,910
same thing for make cmake and configure,

134
00:08:29,810 --> 00:08:33,194
you can use these wrappers from mscriptin to do

135
00:08:33,252 --> 00:08:36,946
the compilation. Now one thing to keep in mind is that I

136
00:08:36,968 --> 00:08:39,060
just showed you a pretty simple example.

137
00:08:40,390 --> 00:08:43,634
It can get pretty complex to compile something to

138
00:08:43,672 --> 00:08:46,550
webassembly. Some things use threads.

139
00:08:47,450 --> 00:08:51,574
Encryption has some tools to make that easier to use web workers for that.

140
00:08:51,772 --> 00:08:55,318
Some tools use SIMD. Now that's not

141
00:08:55,484 --> 00:08:59,586
entirely supported. Webassembly. Net currently supports

142
00:08:59,778 --> 00:09:03,402
SIMD 128 bits, but if you're using something

143
00:09:03,456 --> 00:09:07,494
different, it might not work. If you have assembly

144
00:09:07,542 --> 00:09:10,960
code, actual assembly code in your c program,

145
00:09:11,730 --> 00:09:15,422
you absolutely cannot compile that, right? And so in those

146
00:09:15,476 --> 00:09:19,518
cases, if that code is only there for optimizations, there's usually

147
00:09:19,604 --> 00:09:23,582
flags that you can use to disable that to get around it.

148
00:09:23,716 --> 00:09:27,538
And these are other things like this that make it a little harder to

149
00:09:27,624 --> 00:09:30,946
compile it. Or if you have sockets, that's really tricky. You have to work

150
00:09:30,968 --> 00:09:33,460
around that. Anyway,

151
00:09:34,390 --> 00:09:37,970
if you're curious about learning more about how to compile things

152
00:09:38,040 --> 00:09:41,366
to webassembly for use in these browser, I wrote a book

153
00:09:41,388 --> 00:09:45,394
a few years ago focusing on that called level up with webassembly,

154
00:09:45,442 --> 00:09:48,726
and you can check it out@levelupwasm.com okay,

155
00:09:48,748 --> 00:09:52,394
so now back to sandbox bio. We have these

156
00:09:52,432 --> 00:09:55,974
tools that I want to be able to run in the browser, like awk,

157
00:09:56,022 --> 00:09:59,226
grepJq, and a whole bunch of core utils like ls and head and

158
00:09:59,248 --> 00:10:03,006
tail. These are all written in c and c plus plus,

159
00:10:03,188 --> 00:10:06,890
so I can use the process I talked about earlier

160
00:10:07,050 --> 00:10:10,714
and compile these tools from c to webassembly.

161
00:10:10,842 --> 00:10:14,082
And now I'm able to run these

162
00:10:14,136 --> 00:10:17,714
tools in the browser. So just to put it into

163
00:10:17,752 --> 00:10:21,346
the context of the application, where do I

164
00:10:21,368 --> 00:10:24,622
actually execute these webassembly modules?

165
00:10:24,766 --> 00:10:28,334
So the first thing is we're going to use exterm js,

166
00:10:28,462 --> 00:10:31,830
which is a library that helps you simulate the look and feel

167
00:10:31,980 --> 00:10:35,926
of a command line. But of course this library will only make

168
00:10:35,948 --> 00:10:39,418
it look like a terminal. You still have to interpret the commands and

169
00:10:39,504 --> 00:10:42,970
do something with it. And so what I do is essentially

170
00:10:43,390 --> 00:10:47,590
parse the user's input into an abstract syntax tree.

171
00:10:47,670 --> 00:10:51,434
So this lets me get a clear view of what are these

172
00:10:51,472 --> 00:10:55,406
programs that are running, what are the parameters that we give the program.

173
00:10:55,588 --> 00:10:59,134
And we need to be able to handle computations such as

174
00:10:59,172 --> 00:11:02,750
piping, right where the output of command is the input of another process.

175
00:11:02,820 --> 00:11:07,230
Substitution is also common on the command line. Things like variables,

176
00:11:07,310 --> 00:11:09,954
you need to be able to handle that. And so you need to parse that

177
00:11:09,992 --> 00:11:13,634
ahead of time, have it in data structure that you can

178
00:11:13,672 --> 00:11:17,510
then go through one step at a time. And for example,

179
00:11:17,580 --> 00:11:20,886
were you say, okay, first I start with Auc I'm going

180
00:11:20,908 --> 00:11:25,190
to run call the main function from AuC wasm,

181
00:11:25,690 --> 00:11:29,194
I'm going to give it these parameters and then I

182
00:11:29,232 --> 00:11:32,554
want the output of this to be the input of

183
00:11:32,752 --> 00:11:36,220
the head wasm module that I will call.

184
00:11:36,830 --> 00:11:41,098
So that's kind of how this webassembly fits

185
00:11:41,194 --> 00:11:45,022
in to the application. And then

186
00:11:45,076 --> 00:11:48,638
in the background I have a process that

187
00:11:48,724 --> 00:11:52,830
stores the file system state in indexdb.

188
00:11:53,350 --> 00:11:56,642
So this is because I want

189
00:11:56,696 --> 00:12:00,014
users to be able to make modifications to these files

190
00:12:00,062 --> 00:12:03,554
on abscripton's virtual file system, but still be able

191
00:12:03,592 --> 00:12:07,602
to see them when they refresh the page. So if I modify this orders

192
00:12:07,666 --> 00:12:11,698
Tsv file for example, I want that to be maintained

193
00:12:11,794 --> 00:12:15,750
across sessions. So why

194
00:12:15,820 --> 00:12:19,718
use webassembly for this use case? What are the alternatives?

195
00:12:19,894 --> 00:12:23,702
Well, so here's what it looks like with Webassembly.

196
00:12:23,846 --> 00:12:27,146
You have a browser, you have a server. All the

197
00:12:27,168 --> 00:12:31,050
server needs to do really is give static assets to the browser.

198
00:12:31,130 --> 00:12:34,926
This is the Javascript for the app logic and the

199
00:12:34,948 --> 00:12:38,862
utility code that we get from mscript, and it also has

200
00:12:38,916 --> 00:12:43,102
the wasm binaries. So then once these

201
00:12:43,156 --> 00:12:47,150
are in the browser, anytime you need to run a command,

202
00:12:47,310 --> 00:12:50,834
you just need to execute it in the browser. You don't have to reach out

203
00:12:50,872 --> 00:12:54,610
to the server at all. And also like I mentioned,

204
00:12:54,680 --> 00:12:58,674
we keep track of the file system state in the browser

205
00:12:58,722 --> 00:13:02,406
itself. And so here's what it would look like

206
00:13:02,588 --> 00:13:06,262
without Webassembly. If we can't run

207
00:13:06,316 --> 00:13:10,374
things in the browser, then we have to run them in the server. And so

208
00:13:10,412 --> 00:13:13,766
the server would provide the browser with some application logic.

209
00:13:13,878 --> 00:13:17,514
And now every time you want to run a command, let's say it's an op

210
00:13:17,552 --> 00:13:21,530
command, you have to go to the server. The server has to be managing,

211
00:13:21,610 --> 00:13:25,374
spinning up and down some sort of workers that

212
00:13:25,412 --> 00:13:29,226
can execute arbitrary user commandline on demand,

213
00:13:29,418 --> 00:13:31,950
give the answer back to the browser.

214
00:13:33,170 --> 00:13:37,246
But now this is a lot more complicated if you want to maintain

215
00:13:37,438 --> 00:13:40,962
file system state, and in a way you have to,

216
00:13:41,016 --> 00:13:44,386
because in the browser the state is

217
00:13:44,408 --> 00:13:47,766
at least maintained until refresh, even if you don't have these

218
00:13:47,788 --> 00:13:51,494
system. But on a server you would need

219
00:13:51,532 --> 00:13:54,882
another way to track which users is making which request

220
00:13:54,946 --> 00:13:58,890
and on which files and what is the state of each one of those files.

221
00:13:59,470 --> 00:14:03,126
So the advantages of using webassembly

222
00:14:03,158 --> 00:14:06,250
is first of all it's a lot cheaper.

223
00:14:06,590 --> 00:14:11,046
In the Webassembly case all I'm doing is serving static assets.

224
00:14:11,238 --> 00:14:14,586
These is very cheap to do. I can put that behind a CDN and I'm

225
00:14:14,618 --> 00:14:18,122
done on the server. Side, I would have to be managing

226
00:14:18,186 --> 00:14:21,770
a lot of computer resources and a lot of storage resources,

227
00:14:21,850 --> 00:14:25,426
and so that would get quite expensive. And because of that

228
00:14:25,448 --> 00:14:29,358
it's a lot easier to scale this webassembly.

229
00:14:29,534 --> 00:14:32,622
Side, I can easily support millions of users,

230
00:14:32,766 --> 00:14:35,810
whereas without webassembly this would be trickier.

231
00:14:36,250 --> 00:14:40,082
The other advantage is that it's more secure

232
00:14:40,146 --> 00:14:44,066
to execute arbitrary commands within the sandbox

233
00:14:44,258 --> 00:14:47,698
of the browser and webassembly, whereas if you

234
00:14:47,724 --> 00:14:51,322
want to do the same thing on your servers, you have to absolutely make

235
00:14:51,376 --> 00:14:55,446
sure that users are not escaping

236
00:14:55,558 --> 00:14:59,478
the sandbox that you have. It's also more responsive

237
00:14:59,654 --> 00:15:02,986
to use Webassembly because it doesn't need to reach out to

238
00:15:03,008 --> 00:15:06,762
the server, wait for a worker to be ready, execute the request,

239
00:15:06,826 --> 00:15:10,122
go back to the browser. That makes it a lot slower

240
00:15:10,186 --> 00:15:13,986
and so we can make it more responsive with Webassembly and

241
00:15:14,008 --> 00:15:17,774
it's a lot easier to maintain the state. With Webassembly,

242
00:15:17,822 --> 00:15:21,666
I just store the state in each user's browser. It could

243
00:15:21,688 --> 00:15:24,754
be temporary, that's fine, but on the

244
00:15:24,792 --> 00:15:28,454
server I have to associate a file system to each

245
00:15:28,492 --> 00:15:32,422
user because if you send me a command that modifies a certain

246
00:15:32,476 --> 00:15:36,262
file, that file may be different depending on where

247
00:15:36,316 --> 00:15:39,980
the user is. In these tutorial right

248
00:15:40,510 --> 00:15:44,186
now, there are disadvantages. The first one

249
00:15:44,368 --> 00:15:48,038
is that data size is limited

250
00:15:48,134 --> 00:15:52,510
in the sense that the files that you users in the tutorials

251
00:15:53,730 --> 00:15:56,926
can be too large. If they're too large and you're doing

252
00:15:56,948 --> 00:16:00,526
too much computation, the browser just won't support it.

253
00:16:00,548 --> 00:16:04,846
It's going to take too long. It's going to lag things down very

254
00:16:05,028 --> 00:16:09,242
dramatically. And so the way around that is

255
00:16:09,396 --> 00:16:12,930
the tutorials use a very small subset of

256
00:16:13,000 --> 00:16:16,370
large data sets to illustrate the point

257
00:16:16,440 --> 00:16:19,894
of using some of these tools. And that's okay, that's not that

258
00:16:19,932 --> 00:16:23,686
big of a disadvantage. These are tutorials, after all. They're meant to show how

259
00:16:23,708 --> 00:16:27,202
to use the tools, not necessarily to fully

260
00:16:27,266 --> 00:16:30,220
analyze hundreds of gigabytes of data.

261
00:16:30,830 --> 00:16:34,502
The biggest disadvantage, I would say, is that all the tools

262
00:16:34,566 --> 00:16:38,934
that are featured in the tutorials have to be compilable to webassembly

263
00:16:38,982 --> 00:16:42,654
somehow. And like I mentioned earlier, that can get

264
00:16:42,692 --> 00:16:46,686
really tricky in some cases. It's just not practical to

265
00:16:46,708 --> 00:16:50,730
do so. To me, that's the biggest disadvantage

266
00:16:50,810 --> 00:16:54,014
for this website. Now, I've talked

267
00:16:54,052 --> 00:16:58,274
a lot about how awesome webassembly can be. I think it's important to

268
00:16:58,392 --> 00:17:01,954
keep in mind when it doesn't make sense to

269
00:17:01,992 --> 00:17:05,874
use webassembly. I want to say three things. Number one,

270
00:17:06,072 --> 00:17:09,490
too little or too much computation in the browser.

271
00:17:09,650 --> 00:17:12,726
When you're facing that situation, it's probably not a

272
00:17:12,748 --> 00:17:15,906
good use case for Webassembly. So concretely,

273
00:17:15,938 --> 00:17:19,402
let me give you an example of too little computation is if you

274
00:17:19,456 --> 00:17:22,614
use a language like rust,

275
00:17:22,662 --> 00:17:26,006
for example, to write front end UI,

276
00:17:26,118 --> 00:17:30,134
and then that gets compiled to Webassembly, to me that's

277
00:17:30,182 --> 00:17:33,866
too little computation. It adds a lot of complexity,

278
00:17:33,898 --> 00:17:37,290
first of all, but also adds a lot of overhead of webassembly.

279
00:17:37,450 --> 00:17:41,230
And you're absolutely not going to get speed up

280
00:17:41,380 --> 00:17:45,266
for this sort of simple UI. And so

281
00:17:45,288 --> 00:17:49,170
for that, I would say probably not a good use case for

282
00:17:49,240 --> 00:17:52,866
using Webassembly. The other example is too

283
00:17:52,888 --> 00:17:56,594
much computation. If you're running some analysis that takes two dozen

284
00:17:56,642 --> 00:17:58,950
cpus and 50 gigs of ram,

285
00:17:59,450 --> 00:18:02,674
probably stay clear from using webassembly

286
00:18:02,722 --> 00:18:06,150
for that purpose as well. I think really

287
00:18:06,220 --> 00:18:09,814
the sweet spot for WebAssembly in the browser

288
00:18:09,862 --> 00:18:12,534
is things like audio and video processing,

289
00:18:12,662 --> 00:18:16,474
gaming, it's been users by games a lot, simulations and

290
00:18:16,592 --> 00:18:20,406
subset of computations, playgrounds like sandbox Bio

291
00:18:20,438 --> 00:18:24,602
and these sorts of things where you're not doing too little or too much computation,

292
00:18:24,666 --> 00:18:28,238
but just enough that makes sense given what you're doing in

293
00:18:28,244 --> 00:18:31,694
the browser and given the complexity that you're introducing into

294
00:18:31,732 --> 00:18:35,362
your code by bringing in webassembly. So number two

295
00:18:35,496 --> 00:18:39,154
is, you don't need to use webassembly yourself if someone

296
00:18:39,192 --> 00:18:43,010
has already done the hard work of compiling the tool you're interested

297
00:18:43,080 --> 00:18:46,414
in to webassembly. So make sure you leverage

298
00:18:46,542 --> 00:18:50,294
these libraries like SQLJs or Pyadye if you

299
00:18:50,332 --> 00:18:53,970
want to use SQLite or Python in the browser.

300
00:18:54,130 --> 00:18:57,846
The idea being that now you're just using an off the

301
00:18:57,868 --> 00:19:01,606
shelf JavaScript library. As far as you're

302
00:19:01,638 --> 00:19:05,622
concerned, whether they use Webassembly or not is kind of irrelevant.

303
00:19:05,686 --> 00:19:09,354
And that is a great place to be in because

304
00:19:09,392 --> 00:19:12,762
it means that you don't have to deal with all the maintenance burden

305
00:19:12,826 --> 00:19:16,080
and these compilation burden. And number three,

306
00:19:17,170 --> 00:19:21,150
don't try to replace containers, right? When we talk about using

307
00:19:21,220 --> 00:19:24,526
WebAssembly. So far I've mostly talked about webassembly in these

308
00:19:24,548 --> 00:19:28,610
browser. You can also use Webassembly outside the browser.

309
00:19:29,030 --> 00:19:32,420
And so here's a hypothetical example.

310
00:19:33,350 --> 00:19:37,446
You have a whole bunch of containers that are used for your

311
00:19:37,628 --> 00:19:41,366
Python web application. You have an Nginx postgres for the

312
00:19:41,388 --> 00:19:45,282
database, and then you have the python side of things that uses

313
00:19:45,346 --> 00:19:47,030
G, Unicorn and flask.

314
00:19:48,030 --> 00:19:51,434
You're not going to compile every single one of

315
00:19:51,472 --> 00:19:55,126
these containers into a webassembly

316
00:19:55,158 --> 00:19:59,450
binary instead. First of all, that's going to be really complicated.

317
00:20:00,270 --> 00:20:04,094
Dealing with things like especially postgres, sockets and such

318
00:20:04,132 --> 00:20:08,794
is going to be nontrivial. But also when you compile Python to webassembly,

319
00:20:08,922 --> 00:20:12,554
that adds a significant amount of overhead and typically you'll see

320
00:20:12,692 --> 00:20:16,850
a lot of slowdown. And also the benefits just

321
00:20:17,000 --> 00:20:22,190
aren't really there. And so to me, this blind

322
00:20:22,270 --> 00:20:25,954
replacement of containers with webassembly does not make sense.

323
00:20:25,992 --> 00:20:30,002
And I think most people in the field agree that webassembly

324
00:20:30,066 --> 00:20:34,470
will not replace containers. It's just that in certain situations,

325
00:20:35,130 --> 00:20:38,794
webassembly becomes another option. So to

326
00:20:38,832 --> 00:20:43,258
me, where it really makes sense to use webassembly outside

327
00:20:43,344 --> 00:20:46,586
the browser is first if

328
00:20:46,608 --> 00:20:49,900
you want to safely run user provided code.

329
00:20:50,350 --> 00:20:53,998
And so what this means is if you have an application and you want to

330
00:20:54,004 --> 00:20:58,042
let users write code to extend the functionality,

331
00:20:58,186 --> 00:21:01,774
using a sandbox like webassembly outside the browser makes

332
00:21:01,812 --> 00:21:05,826
a ton of sense, and that's a really good use case. Another one

333
00:21:05,848 --> 00:21:09,346
is edge computing. Edge computing is

334
00:21:09,368 --> 00:21:13,026
the idea that you can spread your code all over these world,

335
00:21:13,128 --> 00:21:16,466
and depending on where your users are,

336
00:21:16,568 --> 00:21:20,486
they will execute the code on a data center that is closest to them.

337
00:21:20,588 --> 00:21:23,862
And so there clearly speed matters if you're doing that.

338
00:21:23,916 --> 00:21:28,166
And so one thing that's nice about webassembly is that

339
00:21:28,348 --> 00:21:32,182
it is more lightweight than containers, and so it can initialize

340
00:21:32,246 --> 00:21:35,722
a lot more quickly. So that's another use case where it kind of

341
00:21:35,776 --> 00:21:39,642
makes sense. Finally, I wanted to share some

342
00:21:39,696 --> 00:21:42,842
resources with you that I thought could be useful.

343
00:21:42,986 --> 00:21:46,000
The first one I'll mention is sandboxbio itself.

344
00:21:46,690 --> 00:21:50,074
It is primarily focused on bioinformatics,

345
00:21:50,122 --> 00:21:53,586
but it also has interesting command line tutorials that would be

346
00:21:53,608 --> 00:21:56,770
applicable to a general audience like AUC and JQ.

347
00:21:57,590 --> 00:22:01,266
We also have playgrounds. So I often find myself

348
00:22:01,368 --> 00:22:05,462
writing an AUC or said command where I want to write

349
00:22:05,516 --> 00:22:09,174
something that I want to test really quickly without having

350
00:22:09,212 --> 00:22:13,106
to type something. Pressing enter up, arrow key modify,

351
00:22:13,218 --> 00:22:17,154
enter up modify. And so this playground

352
00:22:17,202 --> 00:22:21,094
lets you do that very easily. So anything that you type in here gets immediately

353
00:22:21,142 --> 00:22:24,934
executed in the browser and shows you the output

354
00:22:25,062 --> 00:22:29,130
of the command. And this obviously also uses Webassembly,

355
00:22:29,890 --> 00:22:33,422
another resource. So I have this

356
00:22:33,476 --> 00:22:36,974
open source package called bioasm. This is a

357
00:22:37,012 --> 00:22:40,574
library of mostly bioinformatics tools that are

358
00:22:40,692 --> 00:22:44,910
compiled from C to Webassembly, but I think

359
00:22:44,980 --> 00:22:48,542
it could be a useful resource if you're looking for other examples of

360
00:22:48,596 --> 00:22:52,426
compiling complex applications to webassembly.

361
00:22:52,618 --> 00:22:56,550
And finally, there's also my book levelupwasm.com

362
00:22:56,620 --> 00:23:00,210
and I also have a whole bunch of free articles

363
00:23:00,290 --> 00:23:03,720
and other talks that I've given that you might find interesting.

364
00:23:04,330 --> 00:23:07,380
And with that, thank you very much for being here.

