1
00:01:42,610 --> 00:01:46,174
Hey everyone, thanks for joining my talk. I'm happy to be were with

2
00:01:46,212 --> 00:01:49,422
great other force that shares the knowledge with others.

3
00:01:49,556 --> 00:01:53,102
Our talk today is how do we utilize chaos engineering to become

4
00:01:53,156 --> 00:01:57,150
better cloud native engineers and improve incident responding.

5
00:01:57,890 --> 00:02:01,246
Let me first introduce myself. My name is Iran and I'm

6
00:02:01,268 --> 00:02:05,542
leading cyren security engineering at Tyrant. I'm an engineer problem

7
00:02:05,596 --> 00:02:08,280
solver. I love sharing my knowledge with others.

8
00:02:09,690 --> 00:02:12,886
So before we start, I would like to start with this one. What are you

9
00:02:12,908 --> 00:02:16,166
going to gain out of this talk? I would like to share with you how

10
00:02:16,188 --> 00:02:20,034
we leverage chaos engineering principles

11
00:02:20,082 --> 00:02:23,674
to achieve other things besides its main goal. We wanted

12
00:02:23,712 --> 00:02:27,146
at the beginning to bring more confidence to our engineers who are responding to

13
00:02:27,168 --> 00:02:30,682
production incidents and in addition to that train

14
00:02:30,736 --> 00:02:34,106
them to become better cloud native engineers as it requires

15
00:02:34,138 --> 00:02:37,866
additional expertise which isn't just the actual programming

16
00:02:37,898 --> 00:02:41,086
to ship your code. Somewhere I would like to share with

17
00:02:41,108 --> 00:02:44,366
you how we got there, what we arent doing and how it improves

18
00:02:44,398 --> 00:02:48,018
our engineers team's expertise. And one more thing

19
00:02:48,104 --> 00:02:51,266
you might ask yourself, why is these title on

20
00:02:51,288 --> 00:02:54,814
Kolaki King? It's a series of workshops I composed

21
00:02:54,862 --> 00:02:58,534
of Tyrone which at the beginning I must admit meant to bring more

22
00:02:58,572 --> 00:03:02,950
confidence for engineers during their encore shifts.

23
00:03:03,450 --> 00:03:07,014
But later on it became great playground to train the

24
00:03:07,052 --> 00:03:11,046
cloud native engineers practices and train knowledge around it. During this session

25
00:03:11,078 --> 00:03:15,322
I'm going to share with you what we are doing in such workshops. So stay

26
00:03:15,376 --> 00:03:19,398
with me. Let's start with the buzzword cloud native

27
00:03:19,494 --> 00:03:23,694
as a definition. I copied from the sensitive documentation which

28
00:03:23,732 --> 00:03:27,166
cause I call it the cloud native definition. I've highlighted some of the

29
00:03:27,188 --> 00:03:30,522
word there. While you read the definition, you see the word scalable,

30
00:03:30,586 --> 00:03:33,242
dynamic, loosely couple, resilient, manageable,

31
00:03:33,306 --> 00:03:36,770
observable. At the end you see something that I truly believe

32
00:03:36,840 --> 00:03:40,434
in and I'm trying to make it in part of every

33
00:03:40,472 --> 00:03:43,810
culture of any engineers team that I join.

34
00:03:44,310 --> 00:03:47,586
As engineers, we deliver products for

35
00:03:47,608 --> 00:03:50,630
the definition. As you see, this is what it brings. As a result,

36
00:03:50,780 --> 00:03:54,466
engineers can make high impact changes. These is my opinion,

37
00:03:54,578 --> 00:03:58,222
what every engineers culture should believe in. Make an impact

38
00:03:58,306 --> 00:04:00,540
and as a result you will have happy customers.

39
00:04:02,030 --> 00:04:05,654
The evolution of the cloud native technologies and the need to scale

40
00:04:05,702 --> 00:04:09,286
engineering leading organizations to restructure their teams

41
00:04:09,318 --> 00:04:13,950
and embrace new architectural approaches such as microservices.

42
00:04:14,450 --> 00:04:18,174
We are using cloud environments that are pretty dynamic and

43
00:04:18,212 --> 00:04:21,466
we might choose building in microservices to achieve better engineering

44
00:04:21,498 --> 00:04:25,118
scale. You should remember just as a side note,

45
00:04:25,214 --> 00:04:29,266
microservices are not these goal but we use that the cloud and

46
00:04:29,288 --> 00:04:32,962
other stuff as tools to scale our engineering and end

47
00:04:33,016 --> 00:04:36,790
product was your system scales, your system

48
00:04:36,860 --> 00:04:40,962
probably becomes more and more distributed. Distributed systems

49
00:04:41,026 --> 00:04:44,530
are by nature challenging. They arent not easy to debug,

50
00:04:44,610 --> 00:04:48,746
they arent not easy to maintain. Why it's not easy just because we

51
00:04:48,768 --> 00:04:52,118
ship these pieces in a larger puzzle.

52
00:04:52,294 --> 00:04:55,734
Two years ago I wrote blog that is trying to describe the engineers

53
00:04:55,782 --> 00:04:59,866
production. At a glance I'm feeling that the

54
00:04:59,888 --> 00:05:03,486
role of the engineers grown to be much more bigger. We're not

55
00:05:03,508 --> 00:05:07,006
just shipping code anymore. We design it, we develop it,

56
00:05:07,028 --> 00:05:10,398
we release it supporting production. The days that

57
00:05:10,404 --> 00:05:13,120
we had to throw artifacts on operations are over.

58
00:05:13,430 --> 00:05:16,846
As engineers we are accountable for the full relief

59
00:05:16,878 --> 00:05:20,734
cycle. If you think about it, it's mind blowing. We brought

60
00:05:20,782 --> 00:05:24,498
so much power to the engineers and with regard

61
00:05:24,584 --> 00:05:27,190
power we should be much more responsible.

62
00:05:28,090 --> 00:05:31,574
You might be interested in the blog that I just mentioned and

63
00:05:31,612 --> 00:05:33,640
I wrote back in 2020.

64
00:05:35,530 --> 00:05:38,566
I just talked about the changes and the complexity,

65
00:05:38,758 --> 00:05:42,602
but we should embrace these changes. These changes

66
00:05:42,736 --> 00:05:46,346
enable teams to take an endtoend ownership of their deliveries and

67
00:05:46,368 --> 00:05:50,438
enhance their velocity. As a result of these evolutions,

68
00:05:50,614 --> 00:05:54,878
engineers these days are closer to the product than the customer needs.

69
00:05:55,044 --> 00:05:58,446
In my opinion. There is still a long way to go and companies are

70
00:05:58,468 --> 00:06:01,886
still struggling. How to get engineers closer to the

71
00:06:01,908 --> 00:06:06,050
customer to understand in depth what is their business

72
00:06:06,120 --> 00:06:10,066
impact. We talked about impact, but what is

73
00:06:10,088 --> 00:06:13,710
this impact engineers need to know? What do they solve,

74
00:06:13,790 --> 00:06:17,640
what they influence on the customer and know these impact on the product.

75
00:06:18,010 --> 00:06:21,638
There is transition in the engineers mindset. We ship products

76
00:06:21,724 --> 00:06:25,126
and not just code. We embrace these

77
00:06:25,308 --> 00:06:28,806
transition which brings with it so many benefit to the

78
00:06:28,828 --> 00:06:32,282
companies that are adopting them. On the other end,

79
00:06:32,416 --> 00:06:36,394
as a team at the system scales, it becomes challenging to write new

80
00:06:36,432 --> 00:06:40,178
features that offer certain business problem and even understanding

81
00:06:40,214 --> 00:06:44,014
the service behavior is much more complex. Let's see

82
00:06:44,052 --> 00:06:47,866
why it's complex. These best approaches that I've

83
00:06:47,898 --> 00:06:51,102
just mentioned bring arent value.

84
00:06:51,236 --> 00:06:55,006
But as engineers we are now writing apps that are part of

85
00:06:55,028 --> 00:06:58,978
a wider collection of other services that are built on a certain platform

86
00:06:59,064 --> 00:07:02,834
in the cloud. I really like what Ben is sharing his

87
00:07:02,872 --> 00:07:06,866
slides. I would like to share it with you. He's calling them deep systems.

88
00:07:07,058 --> 00:07:11,062
Images are better than words and these experiments in the slide explain

89
00:07:11,116 --> 00:07:15,074
it all. You can see that as your service scales

90
00:07:15,122 --> 00:07:19,274
you need to be responsible to a deep chain of other services

91
00:07:19,392 --> 00:07:23,194
that this service actually depends on. These is what it

92
00:07:23,232 --> 00:07:27,062
means. We are maintaining deep systems. Obviously microservices

93
00:07:27,126 --> 00:07:29,690
and distributed systems are deep.

94
00:07:30,190 --> 00:07:34,186
Let's try to imagine just a certain service you have.

95
00:07:34,288 --> 00:07:37,902
Let's say that this is the auto service. What do you do in this order

96
00:07:37,956 --> 00:07:41,566
service. You fetch data from one service and then you

97
00:07:41,588 --> 00:07:45,114
need to fetch data from another service and you might produce

98
00:07:45,162 --> 00:07:49,234
an event to a third service. The storage is on your own, but you

99
00:07:49,272 --> 00:07:53,422
understand the concept. It's just complex. Deep systems are complex

100
00:07:53,486 --> 00:07:55,880
and you should know how to deal with them.

101
00:07:57,210 --> 00:08:01,202
As part of transitioning into being more cloud native distributed

102
00:08:01,266 --> 00:08:04,774
and relying on orchestrators such as kubernetes at your

103
00:08:04,812 --> 00:08:08,486
foundation, engineers face more and more challenges that

104
00:08:08,508 --> 00:08:11,958
they didn't have to deal with before. Just imagine

105
00:08:12,054 --> 00:08:15,814
this scenario. You are on call, there is some back pressure

106
00:08:15,862 --> 00:08:19,420
that bring your slo target, there is some issue

107
00:08:20,050 --> 00:08:24,350
with one of your availability zones, and third of your deployment

108
00:08:25,090 --> 00:08:28,894
couldn't reschedule due to some node availability issues.

109
00:08:29,092 --> 00:08:30,320
What do you do?

110
00:08:32,370 --> 00:08:36,286
You need to find it out and you might need to point that

111
00:08:36,388 --> 00:08:39,746
to your on call DevOps on colleague. By the

112
00:08:39,768 --> 00:08:43,166
way, DevOps may be working on that already was. It might trigger

113
00:08:43,198 --> 00:08:47,362
their slos as well. This kind of incident happened

114
00:08:47,496 --> 00:08:50,758
and as a cloud native engineer you should be aware of the platform you

115
00:08:50,764 --> 00:08:54,230
are running. What does it mean to be aware of that?

116
00:08:54,380 --> 00:08:57,794
You should know that there are AZ in every region.

117
00:08:57,922 --> 00:09:01,802
Your pod affinities are defined in some way and these pods that

118
00:09:01,936 --> 00:09:06,006
are scheduled have some status. That are scheduled have some status.

119
00:09:06,198 --> 00:09:09,434
These cluster events and how you read

120
00:09:09,472 --> 00:09:12,910
the cluster event in case of such a failure.

121
00:09:13,650 --> 00:09:17,294
This was just a particular scenario that happened to me and that

122
00:09:17,332 --> 00:09:20,430
happened to many of you before. As you see,

123
00:09:20,580 --> 00:09:24,078
it is not just your service anymore,

124
00:09:24,254 --> 00:09:27,662
it's more than that. And this is what it means to be a cloud native

125
00:09:27,726 --> 00:09:31,714
engineer. Was I said already. Being cloud

126
00:09:31,752 --> 00:09:35,422
native engineer is fun, but also challenging. These days

127
00:09:35,496 --> 00:09:39,442
engineers arent got just writing code and bidding packages,

128
00:09:39,586 --> 00:09:43,618
but are expected to know how to write these own Kubernetes resource yamls

129
00:09:43,714 --> 00:09:46,950
use helm, containerize their app

130
00:09:47,020 --> 00:09:50,810
and ship it to a variety of environments. It is not enough

131
00:09:50,880 --> 00:09:54,822
to know it at a high level. Being cloud native engineers

132
00:09:54,966 --> 00:09:58,614
means that it's not enough to just know the programming

133
00:09:58,662 --> 00:10:02,574
language you are working on well, but you should also keep adapting in

134
00:10:02,612 --> 00:10:06,954
knowledge and understanding of the cloud native technology that you are depending

135
00:10:07,002 --> 00:10:10,718
on. Besides the tools you are using.

136
00:10:10,884 --> 00:10:14,162
Building cloud native applications involves taking into

137
00:10:14,216 --> 00:10:17,346
account many moving parts such as the

138
00:10:17,368 --> 00:10:20,658
platform you are building on, the database you are using,

139
00:10:20,744 --> 00:10:24,606
and much more. Obviously there are great tools and frameworks

140
00:10:24,638 --> 00:10:28,246
out there that abstract some of the complexity out from you

141
00:10:28,268 --> 00:10:32,166
was engineer, but being blind to them might hurt you

142
00:10:32,268 --> 00:10:34,120
someday or maybe night.

143
00:10:35,770 --> 00:10:39,858
If you haven't heard of these fallacies of the distributed computing

144
00:10:39,954 --> 00:10:42,666
I really suggest you to read further on them.

145
00:10:42,848 --> 00:10:46,806
They are here to stay and you should be aware of them and be prepared.

146
00:10:46,918 --> 00:10:50,434
In cloud things will happen, things will fail.

147
00:10:50,582 --> 00:10:53,966
Don't think you know what to expect, just make

148
00:10:53,988 --> 00:10:58,026
sure you understand them. You handle them carefully and embrace

149
00:10:58,058 --> 00:11:00,960
them. As I said, these would just happen.

150
00:11:02,390 --> 00:11:05,906
We talked a lot about the great benefits and also the

151
00:11:05,928 --> 00:11:09,394
challenges, so we had to deal

152
00:11:09,432 --> 00:11:11,250
with these challenges.

153
00:11:12,390 --> 00:11:15,506
Let me explain to you what did we do to cope with these

154
00:11:15,528 --> 00:11:18,854
challenges. So we utilized chaos engineering for that

155
00:11:18,892 --> 00:11:22,034
propose we have found this method pretty useful

156
00:11:22,082 --> 00:11:25,986
and I think that this can be nice to share with you the practices

157
00:11:26,178 --> 00:11:28,200
and also with others.

158
00:11:29,470 --> 00:11:33,590
Let's first give a quick brief what is chaos engineers?

159
00:11:33,750 --> 00:11:36,902
The main goal of Chaos engineering is as explained in the slide

160
00:11:36,966 --> 00:11:40,478
that I just copied from the Chaos principle website. The idea of the

161
00:11:40,484 --> 00:11:44,058
chaos engineering is to identify weaknesses and reduce uncertainty

162
00:11:44,154 --> 00:11:47,502
when bidding a distributed system. As I already

163
00:11:47,556 --> 00:11:51,066
mentioned in previous slides, bidding distributed systems at scale

164
00:11:51,098 --> 00:11:54,526
is challenging and since such systems tend

165
00:11:54,558 --> 00:11:58,286
to be composed of many moving parts, leveraging chaos engineering

166
00:11:58,318 --> 00:12:01,598
practices to reduce the plus radius of such failures

167
00:12:01,774 --> 00:12:05,830
improves itself as a great method for that proposed.

168
00:12:06,890 --> 00:12:10,306
So I created a series of workshops called on Karaki King.

169
00:12:10,418 --> 00:12:13,750
These workshops intend to achieve two main objectives.

170
00:12:16,410 --> 00:12:20,502
Train engineers on product ferros that we had recently

171
00:12:20,646 --> 00:12:24,346
and train engineers on cloud native practices turing and how to

172
00:12:24,368 --> 00:12:28,458
become better cloud native engineers a

173
00:12:28,464 --> 00:12:32,314
bit on our own core procedure before we proceed, we have weekly engineer

174
00:12:32,362 --> 00:12:36,174
shifts and an octeam that monitors our systems with these four seven

175
00:12:36,372 --> 00:12:40,094
there are these alert severities defined severity one, severity two

176
00:12:40,132 --> 00:12:43,714
and severity three which actually define from these

177
00:12:43,752 --> 00:12:47,570
business impact alerts to the actual service owner alert monitor.

178
00:12:47,990 --> 00:12:51,906
We have alert playbooks that assist these oncology responding to an

179
00:12:51,928 --> 00:12:55,106
event. I will elaborate on them a

180
00:12:55,128 --> 00:12:58,470
bit later. In the case of a severity one,

181
00:12:58,620 --> 00:13:01,880
the first priority is to got the system back to normal state.

182
00:13:02,250 --> 00:13:06,070
Don't call engineer that is leading these incidents shall understand

183
00:13:06,140 --> 00:13:09,978
the high level business impact to communicate. In any case

184
00:13:10,144 --> 00:13:14,186
that there needs to be a specific expertise to bring back into the

185
00:13:14,208 --> 00:13:17,386
functional state, the engineer is making sure the

186
00:13:17,408 --> 00:13:20,554
relevant team or service owner are on

187
00:13:20,592 --> 00:13:24,158
keyboard to lead it. These are

188
00:13:24,164 --> 00:13:27,774
the tools that the engineer got in the box to utilize in case of an

189
00:13:27,812 --> 00:13:31,534
incident. Pretty nice tool set. Now that we understand

190
00:13:31,652 --> 00:13:35,860
the picture, let's read down into the workshop itself.

191
00:13:37,190 --> 00:13:40,734
The workshop sessions are composed into three parts.

192
00:13:40,862 --> 00:13:44,980
We have the production and the goal setting. Then we might have

193
00:13:45,670 --> 00:13:48,914
to share some important stuff that have been

194
00:13:48,952 --> 00:13:51,958
changed lately and some that change right away.

195
00:13:52,124 --> 00:13:55,714
Let's dive into each one of them the session

196
00:13:55,762 --> 00:13:59,254
starts with a quick production of the motivation. Why do we have

197
00:13:59,292 --> 00:14:02,874
the session? What are we going to do in the upcoming session and

198
00:14:02,912 --> 00:14:06,330
make sure the audience are aligned on the flow and agenda.

199
00:14:07,470 --> 00:14:10,986
It's very important to show that every time as it

200
00:14:11,008 --> 00:14:14,666
makes people more connected to their motivation and understand what is going

201
00:14:14,688 --> 00:14:18,158
to happen. This is part of the main goal. You should try

202
00:14:18,244 --> 00:14:22,014
keep the people focused and concentrated so make sure

203
00:14:22,052 --> 00:14:25,666
the things are clear and concise. Sometimes we

204
00:14:25,688 --> 00:14:29,406
utilize the session as a great opportunity to communicate some architectural

205
00:14:29,438 --> 00:14:33,122
aspects, platform improves or process changes

206
00:14:33,176 --> 00:14:37,186
that we had recently, for example to

207
00:14:37,208 --> 00:14:40,854
don call process or core service flow adaptations and

208
00:14:40,892 --> 00:14:44,134
much more. We work on maximum two

209
00:14:44,172 --> 00:14:48,006
production incident simulations and overall session time shouldn't

210
00:14:48,038 --> 00:14:52,186
be longer than 60 minutes. We have found out that

211
00:14:52,288 --> 00:14:56,358
we lose engineers concentration for longer sessions.

212
00:14:56,534 --> 00:15:00,138
If you walk hybrid it's better to do these session when you are in

213
00:15:00,144 --> 00:15:04,350
the same workspace as we have found this much more productive.

214
00:15:04,690 --> 00:15:07,280
The communication is making a great difference.

215
00:15:08,530 --> 00:15:12,414
Let me share with you what we arent doing specifically in

216
00:15:12,452 --> 00:15:15,170
this part which is the code of the workshop.

217
00:15:16,230 --> 00:15:18,980
I think that this is one of the most important thing.

218
00:15:19,990 --> 00:15:23,666
Our Nkolaki King workshops sessions are usually trying to

219
00:15:23,688 --> 00:15:27,842
be was close to real life production scenarios as possible by simulating

220
00:15:27,906 --> 00:15:30,950
real production scenarios in one of the environments.

221
00:15:31,450 --> 00:15:35,858
Such real life scenarios enable engineers to build confidence

222
00:15:35,954 --> 00:15:38,718
while taking care of real production incidents.

223
00:15:38,914 --> 00:15:42,630
Try to have an environments that you can simulate that incident

224
00:15:42,710 --> 00:15:46,602
on and let the people play in real time. As we always

225
00:15:46,656 --> 00:15:50,458
say, there is no identical environment

226
00:15:50,554 --> 00:15:54,970
to production and since we are doing specific experiment,

227
00:15:55,130 --> 00:15:58,814
it's not necessary to have a production environment in

228
00:15:58,852 --> 00:16:02,174
place. Obviously as more as you

229
00:16:02,212 --> 00:16:05,954
advance it might be better to work on production, but it's much more

230
00:16:05,992 --> 00:16:08,500
complex and we have never done this before.

231
00:16:09,910 --> 00:16:12,420
Since we utilize chaos engineers here,

232
00:16:12,870 --> 00:16:16,598
I suggest having a real experiments that you can execute within a

233
00:16:16,604 --> 00:16:20,594
few clicks. We are using one of our load test environments

234
00:16:20,642 --> 00:16:24,374
for that proposal. We started manually. If you don't have any

235
00:16:24,412 --> 00:16:28,166
tool, I suggest do not spend time on that.

236
00:16:28,268 --> 00:16:32,362
Don't rush to a specific chaos engineers tool. Just recently we started

237
00:16:32,416 --> 00:16:35,814
using litmus chaos to run these chaos experiments,

238
00:16:35,942 --> 00:16:39,354
but you can use anything else you would like to or

239
00:16:39,392 --> 00:16:42,926
you can just simulate these incident manually. I think

240
00:16:42,948 --> 00:16:46,814
that the most important thing is, as I said before, we need to have a

241
00:16:46,852 --> 00:16:50,462
playground for the engineer to actually exercise and got

242
00:16:50,516 --> 00:16:54,290
just hearing someone talking on a presentation slide,

243
00:16:55,190 --> 00:16:59,026
you will be convinced that when they are practicing and

244
00:16:59,048 --> 00:17:02,478
not just listening to someone explaining something on a slide,

245
00:17:02,574 --> 00:17:05,570
it makes the session much more productive.

246
00:17:06,630 --> 00:17:10,738
Right after these introduction slides we drill down into the first challenge.

247
00:17:10,834 --> 00:17:14,690
The session starts with a slide explaining a certain incident

248
00:17:14,770 --> 00:17:18,450
that we are going to simulate. Usually give some background

249
00:17:18,610 --> 00:17:22,454
of what is going to happen. For example there is some back pressure

250
00:17:22,582 --> 00:17:26,074
that we couldn't handle since specific UTC time

251
00:17:26,272 --> 00:17:29,702
represent some metrics of the current behavior. For instance

252
00:17:29,766 --> 00:17:33,630
we present the alerts and the corresponding Grafana dashboard.

253
00:17:34,450 --> 00:17:38,222
You should present something very minimal because

254
00:17:38,276 --> 00:17:41,870
this is how it actually happens during a real production incident.

255
00:17:43,030 --> 00:17:46,306
Then we give engineers some time to review these incidents by

256
00:17:46,328 --> 00:17:49,762
themselves. Give them the time to think about it

257
00:17:49,816 --> 00:17:53,970
is crucial they arent exercising alone thinking

258
00:17:54,040 --> 00:17:57,902
if they haven't code and suffering similar before these

259
00:17:58,056 --> 00:18:01,958
very important step it will encourage them to try find

260
00:18:02,044 --> 00:18:05,782
out more information and utilize these know how to get more information

261
00:18:05,916 --> 00:18:09,334
such as gather cluster

262
00:18:09,382 --> 00:18:13,322
metrics, view the relevant dashboard, read the logs and

263
00:18:13,376 --> 00:18:16,634
service status. It is very

264
00:18:16,672 --> 00:18:19,946
important aspect you should understand the customer

265
00:18:20,048 --> 00:18:23,642
impact and it's even more important specifically when you are

266
00:18:23,696 --> 00:18:27,150
in an on call in case of a security one.

267
00:18:27,300 --> 00:18:30,606
You should communicate these impact on the customers and see if

268
00:18:30,628 --> 00:18:34,494
there is any walkaround until the incidents resolved

269
00:18:34,542 --> 00:18:38,114
completely. Engineers not always aware of

270
00:18:38,152 --> 00:18:42,420
the actual customer impact. It's very good time to discuss it,

271
00:18:44,310 --> 00:18:48,534
put their analysis from time to time and encourage them to ask questions.

272
00:18:48,732 --> 00:18:52,374
We have found out that discussions around the incidents is

273
00:18:52,412 --> 00:18:56,086
a great place for knowledge sharing. Knowledge sharing can

274
00:18:56,108 --> 00:18:59,682
be anything from design diagrams to some specific Kubernetes

275
00:18:59,746 --> 00:19:03,386
command line. If you are sitting together in the same space it

276
00:19:03,408 --> 00:19:07,002
can be pretty nice because you can see who is doing what

277
00:19:07,136 --> 00:19:11,194
and then you can ask them to show which tools these use and how

278
00:19:11,232 --> 00:19:14,766
they got there. What I really like on those sessions is

279
00:19:14,788 --> 00:19:18,606
that it triggers conversations engineers tell to each other

280
00:19:18,708 --> 00:19:22,142
to send some of their Clis or tools that

281
00:19:22,196 --> 00:19:25,490
make their life easier while debugging an incident.

282
00:19:27,830 --> 00:19:31,458
The workshop sessions will teach you a lot on these know how

283
00:19:31,544 --> 00:19:35,058
that people have and I encourage you to update the

284
00:19:35,064 --> 00:19:38,802
playbook based on that. If you don't have such playbook,

285
00:19:38,866 --> 00:19:42,054
I really recommend you to have such we have a variety of

286
00:19:42,092 --> 00:19:45,480
ECL playbooks. Most of them arent composed for major

287
00:19:46,090 --> 00:19:49,946
services. One alerts they provide don't call engineers with some

288
00:19:49,968 --> 00:19:53,194
gotchas and high level flows that is important to look

289
00:19:53,232 --> 00:19:56,090
at when dealing with different scenarios.

290
00:19:57,070 --> 00:20:00,880
These are how our playbook templates looks like.

291
00:20:02,770 --> 00:20:06,254
Drive the conversation by asking questions that will enable you to

292
00:20:06,292 --> 00:20:10,320
share some of the topics that you would like to train on. For example,

293
00:20:13,030 --> 00:20:16,594
some examples that I have proved to be efficient ask

294
00:20:16,632 --> 00:20:19,522
an engineer to present a group final to look at.

295
00:20:19,656 --> 00:20:23,474
Ask an engineer to share his

296
00:20:23,512 --> 00:20:27,062
keybanolog inquiries or ask someone else

297
00:20:27,116 --> 00:20:30,614
to present its drag tracing and how to find such

298
00:20:30,652 --> 00:20:34,598
a trace. You sometimes need to moderate the

299
00:20:34,604 --> 00:20:38,106
conversation a bit as the time flies pretty fast and

300
00:20:38,128 --> 00:20:42,522
you need to bring back the focus a bit during

301
00:20:42,576 --> 00:20:46,614
the discussion. Point your finger or interest on interacting architectural

302
00:20:46,662 --> 00:20:49,610
aspects that you would like the genie to know about.

303
00:20:49,760 --> 00:20:53,166
Maybe you can talk on a specific async channel that you might want to

304
00:20:53,188 --> 00:20:56,798
share your thoughts about. Encourage the audience to speak

305
00:20:56,884 --> 00:21:00,606
by asking questions around these areas of interest that will

306
00:21:00,628 --> 00:21:04,702
enable them to even suggest new design approaches or highlight

307
00:21:04,766 --> 00:21:08,590
challenges they were thinking about lately. You might be surprised

308
00:21:08,670 --> 00:21:13,218
and even add them to your technical debug at

309
00:21:13,224 --> 00:21:16,494
the end of every challenge. Ask somebody to present these endtoend

310
00:21:16,542 --> 00:21:19,686
analysis. It makes things clear for the people that might

311
00:21:19,708 --> 00:21:23,282
not feel comfortable enough to ask questions in large forums

312
00:21:23,346 --> 00:21:27,446
or engineers that have been judged joined the teams or junior engineers that

313
00:21:27,628 --> 00:21:29,260
might want to learn more.

314
00:21:31,230 --> 00:21:34,954
It's a great source for people to get back into what has

315
00:21:34,992 --> 00:21:38,042
been done and also fantastic part of the knowledge base

316
00:21:38,096 --> 00:21:42,046
where you can share onboarding training process to

317
00:21:42,068 --> 00:21:46,062
new engineers that just joined the team. I found

318
00:21:46,116 --> 00:21:50,074
out that people sometimes just watch these recording afterwards.

319
00:21:50,202 --> 00:21:53,794
It becomes handy even just for the engineers to get some

320
00:21:53,832 --> 00:21:57,330
of you of the tools that are in their best.

321
00:21:58,150 --> 00:22:01,794
So just make sure you record and share the meeting notes right

322
00:22:01,832 --> 00:22:05,300
after the session. As you can see,

323
00:22:06,330 --> 00:22:08,920
chaos engineering for training is pretty cool.

324
00:22:09,290 --> 00:22:13,350
Leverage that to invest in your engineering team knowledge and skills

325
00:22:13,770 --> 00:22:16,870
and it seems to be successful and at least

326
00:22:16,940 --> 00:22:18,700
it was successful for us.

327
00:22:20,270 --> 00:22:22,730
So to summarize some of the key takeaways,

328
00:22:23,150 --> 00:22:26,694
we found out that these sessions arent an awesome playground

329
00:22:26,742 --> 00:22:30,778
for engineers. I must admit that I

330
00:22:30,784 --> 00:22:34,590
didn't think about was engineers for this simulation at the first place.

331
00:22:34,740 --> 00:22:38,654
We started with just a manual simulation of

332
00:22:38,692 --> 00:22:42,586
our incidents or just presented some of the evidence we gathered

333
00:22:42,618 --> 00:22:46,100
during a time of fellow to drive conversation around them.

334
00:22:46,470 --> 00:22:50,254
As we move forward we leverage the usage of chaos tools

335
00:22:50,302 --> 00:22:53,794
for that proposal. Besides the training to

336
00:22:53,832 --> 00:22:57,186
become a better cloud native engineers, donco engineers are

337
00:22:57,208 --> 00:23:01,254
feeling much more comfortable in their shifts and

338
00:23:01,292 --> 00:23:04,200
understand the tools available to them to respond quickly.

339
00:23:05,290 --> 00:23:09,254
I thought it can be good to share as

340
00:23:09,292 --> 00:23:13,490
we always talk about chaos engineers experiments

341
00:23:13,570 --> 00:23:16,690
to make better reliable systems, but you can leverage

342
00:23:16,770 --> 00:23:20,058
them also to invest in your engineers

343
00:23:20,114 --> 00:23:23,774
teams training. Thanks for your time and

344
00:23:23,812 --> 00:23:27,150
hope it was a fruitful session. Feel free to ask me

345
00:23:27,220 --> 00:23:31,182
any questions anytime. I will be very happy to share

346
00:23:31,236 --> 00:23:32,380
more. Thank you.

