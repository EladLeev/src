1
00:00:40,930 --> 00:00:44,386
Hi everybody, thank you for joining me today. I'm aviat,

2
00:00:44,418 --> 00:00:47,606
CTO co founder at Lumigo, and we're going to

3
00:00:47,628 --> 00:00:51,486
talk about observability in services applications with a

4
00:00:51,508 --> 00:00:54,890
special focus on those asynchronous parts

5
00:00:54,970 --> 00:00:57,930
which are much harder to observe.

6
00:00:58,010 --> 00:01:01,406
Today what we're going to do is see how actually

7
00:01:01,508 --> 00:01:05,394
serverless changes everything. Why serverless environments are

8
00:01:05,432 --> 00:01:08,930
different that's very important to understand so we can

9
00:01:09,000 --> 00:01:13,214
understand why we need a special tool in order CTO have serverless

10
00:01:13,262 --> 00:01:16,486
observability. What we used to have until now isn't good

11
00:01:16,508 --> 00:01:20,230
enough. Today we'll talk about the main challenges when doing

12
00:01:20,300 --> 00:01:24,150
observability, but more importantly, we're going to talk about different

13
00:01:24,220 --> 00:01:27,494
solutions. So there's different solutions that you can use

14
00:01:27,612 --> 00:01:31,402
for services observability and we'll go over them so

15
00:01:31,456 --> 00:01:35,050
you can decide what's best for your own usage. Now,

16
00:01:35,120 --> 00:01:39,286
before we continue, a few words about myself. As I said, I'm CTO

17
00:01:39,318 --> 00:01:42,974
at Lumigo. Lumigo is a serverless monitoring platform,

18
00:01:43,092 --> 00:01:47,054
serverless observability platform, and not only do we do

19
00:01:47,092 --> 00:01:50,974
observability for serverless users, but our own back

20
00:01:51,012 --> 00:01:54,526
end is also serverless. So I've been in the software companies for

21
00:01:54,548 --> 00:01:58,558
the last 15 years, and in the last three years I've been doing serverless

22
00:01:58,654 --> 00:02:02,594
all day long and usually all night long as well. At Lumigo we

23
00:02:02,632 --> 00:02:06,018
work with a lot of different companies. Some of them are very big

24
00:02:06,104 --> 00:02:09,334
and known out there like the ones you see here, but also a lot of

25
00:02:09,372 --> 00:02:12,914
small startups, sometimes like four person startups.

26
00:02:12,962 --> 00:02:17,298
As long as you have a serverless or any cloud native environment,

27
00:02:17,394 --> 00:02:21,138
we like to be there and try to help you out. When we say serverless,

28
00:02:21,234 --> 00:02:24,874
what do we mean? I'm sure that you know what serverless is, but let's see

29
00:02:24,912 --> 00:02:28,922
that we're all on the same page because a lot of times different people mean

30
00:02:28,976 --> 00:02:32,894
different things when they say serverless. So I'll keep it short.

31
00:02:33,012 --> 00:02:36,606
Serverless is not only lambda in the meaning that it can

32
00:02:36,628 --> 00:02:40,858
also be function as a service from other cloud vendors

33
00:02:40,954 --> 00:02:44,622
like Google or Azure. It also includes managed

34
00:02:44,686 --> 00:02:48,018
cloud services. So when you're building an application,

35
00:02:48,184 --> 00:02:51,810
compute is not enough. Of course lambda is

36
00:02:51,960 --> 00:02:55,042
the main glue that everything is surrounded by,

37
00:02:55,096 --> 00:02:58,886
but you also need a dynamodb for example, for your data,

38
00:02:58,988 --> 00:03:03,030
s, three for your files and so on. So all those

39
00:03:03,100 --> 00:03:06,454
different services that you get from AWS or any

40
00:03:06,492 --> 00:03:10,406
other cloud. For me, that's an integral part of serverless

41
00:03:10,518 --> 00:03:14,762
and the last part, but also very important, those third

42
00:03:14,816 --> 00:03:18,154
party SaaS so when you build your own

43
00:03:18,192 --> 00:03:21,642
application today, almost any application uses some

44
00:03:21,696 --> 00:03:25,594
third party. And the way I see it, it's part of your serverless

45
00:03:25,642 --> 00:03:29,262
environment. You need to know what's going on there. So if your

46
00:03:29,316 --> 00:03:32,986
call to PayPal, or if you're using Twilio,

47
00:03:33,018 --> 00:03:36,802
for example, and you have errors there, you need to understand that it

48
00:03:36,856 --> 00:03:40,782
doesn't matter that it's a third party, you still need to understand how it's affecting

49
00:03:40,846 --> 00:03:44,338
your overall application. So now that we talked about

50
00:03:44,424 --> 00:03:48,450
what we mean by serverless, let's see how going serverless

51
00:03:48,530 --> 00:03:52,210
impacts your application. There's a lot of impact.

52
00:03:52,290 --> 00:03:55,414
I want to talk about three main ones. First one

53
00:03:55,452 --> 00:03:58,738
is you have nanoservices in your environment.

54
00:03:58,834 --> 00:04:03,782
What does that mean? It means that you can call it microservices

55
00:04:03,846 --> 00:04:07,962
on steroids, you can call it whatever you want. But now you have a lot

56
00:04:08,016 --> 00:04:10,902
of very small parts, a lot of small lambdas,

57
00:04:10,966 --> 00:04:14,742
dynamodb tables, all of those atomic parts which

58
00:04:14,816 --> 00:04:18,094
each and every one of them runs on its own. And you need

59
00:04:18,132 --> 00:04:21,966
to know what's going on with each and every one of them. But also in

60
00:04:21,988 --> 00:04:25,554
order to enjoy these services, the fact

61
00:04:25,592 --> 00:04:29,774
that they're separated one from each other, you need CTO make sure that they're

62
00:04:29,902 --> 00:04:33,326
connected in the right way. That usually means they're

63
00:04:33,358 --> 00:04:37,842
connected in some asynchronous way. This allows you to decouple

64
00:04:37,986 --> 00:04:41,398
your services. So if something goes wrong

65
00:04:41,484 --> 00:04:45,266
with one of them or one of them has a high load, it doesn't

66
00:04:45,298 --> 00:04:48,610
mean that all your environment is now affected.

67
00:04:48,690 --> 00:04:52,662
A second impact is you're using a lot of fully managed

68
00:04:52,726 --> 00:04:56,314
services. So again, that's great. It helps you

69
00:04:56,432 --> 00:05:01,046
to focus on what you want to focus and not on all the infrastructure

70
00:05:01,158 --> 00:05:05,006
under it, under the hood. But it does mean that you have a lot less

71
00:05:05,108 --> 00:05:08,970
control. The third impact is the change in the cost paradigm

72
00:05:09,050 --> 00:05:13,082
now that what you do has a very close impact

73
00:05:13,146 --> 00:05:16,962
on how much you pay. Since your pay as you go model means

74
00:05:17,016 --> 00:05:20,802
that any change in the code, even bugs in your code, can cause

75
00:05:20,856 --> 00:05:24,734
a spike in the payment. And of course, any improvement

76
00:05:24,782 --> 00:05:27,654
in the code means that you can now pay less.

77
00:05:27,772 --> 00:05:31,350
This brings with it new challenges. First challenge is

78
00:05:31,420 --> 00:05:35,014
identify and resolve issues. Now of course this is

79
00:05:35,052 --> 00:05:38,790
not new for serverless, but this challenge does

80
00:05:38,860 --> 00:05:42,714
take a new twist when going serverless. And I'll show you

81
00:05:42,752 --> 00:05:46,554
an example in two minutes. But it certainly makes how

82
00:05:46,592 --> 00:05:50,310
to find the issue, and especially the root cause much, much harder.

83
00:05:50,390 --> 00:05:54,382
And the second part is visibility. When I say visibility, I mean

84
00:05:54,436 --> 00:05:57,678
how does the application look like as a whole.

85
00:05:57,764 --> 00:06:01,422
So you have a lot of different components, but how do

86
00:06:01,476 --> 00:06:05,090
all these components combine into one single application?

87
00:06:05,240 --> 00:06:09,022
And what happens is, for example, one of those components

88
00:06:09,086 --> 00:06:12,446
stops working. Does that mean that my application stopped

89
00:06:12,478 --> 00:06:15,862
working? Does it mean that my application is fine and it doesn't really

90
00:06:15,916 --> 00:06:19,474
matter? So getting that visibility on the holistic

91
00:06:19,522 --> 00:06:22,530
part of my application became much harder.

92
00:06:22,610 --> 00:06:25,922
So before we continue, I mentioned asynchronous.

93
00:06:25,986 --> 00:06:29,482
I just want to say again to make sure that we're all on the same

94
00:06:29,536 --> 00:06:33,114
page. When I say asynchronous, I mean not only when

95
00:06:33,152 --> 00:06:36,390
a single lambda calls another lambda asynchronously,

96
00:06:36,470 --> 00:06:40,002
but I also mean when it's implicitly asynchronously,

97
00:06:40,086 --> 00:06:44,074
usually when there's a service between two lambdas. And although

98
00:06:44,122 --> 00:06:47,498
each lambda is being called synchronously,

99
00:06:47,594 --> 00:06:51,326
together, we have an asynchronous system. So in this example,

100
00:06:51,428 --> 00:06:55,310
this is pattern taken from Jeremy Daly's

101
00:06:55,470 --> 00:06:58,754
website, which I really recommend. So here we have

102
00:06:58,792 --> 00:07:02,798
a lambda, first one calling synchronously a dynamodb.

103
00:07:02,894 --> 00:07:06,354
But because that dynamodb has a dynamodb

104
00:07:06,402 --> 00:07:10,466
stream, it means that a second lambda will also be called, and there's

105
00:07:10,498 --> 00:07:13,862
an asynchronous connection between them.

106
00:07:13,916 --> 00:07:17,702
So just to be clear, asynchronous doesn't mean that the lambda itself

107
00:07:17,756 --> 00:07:20,938
is calling another thing asynchronously. Now, let's see,

108
00:07:21,024 --> 00:07:24,342
when we troubleshoot serverless, what are those challenges

109
00:07:24,406 --> 00:07:28,026
that we talked about, how they are implemented and how we

110
00:07:28,048 --> 00:07:31,802
can solve them? Let's be a little bit dramatic. It's 02:00 a.m.

111
00:07:31,856 --> 00:07:36,042
At night and something is going wrong. You're getting a notification

112
00:07:36,186 --> 00:07:40,126
that a lambda has stopped working. That lambda. Okay, this is all

113
00:07:40,148 --> 00:07:43,646
you know about that lambda, that it stopped working. Maybe you also know

114
00:07:43,668 --> 00:07:46,786
that that lambda sends email and you want

115
00:07:46,808 --> 00:07:50,418
to understand how severe the fact that that lambda is not working.

116
00:07:50,504 --> 00:07:54,046
How is it affecting your system? So let's even say that it's

117
00:07:54,078 --> 00:07:57,746
not only 02:00 a.m. It's also Saturday night. So you

118
00:07:57,768 --> 00:08:01,142
really want to know if this is something that you need to solve right

119
00:08:01,196 --> 00:08:04,934
away. Or maybe you can wait a little bit till the morning or

120
00:08:04,972 --> 00:08:08,546
till Monday morning until you decide to solve

121
00:08:08,578 --> 00:08:12,390
it. So first thing you want to know is how this lambda

122
00:08:12,470 --> 00:08:16,554
impact your customers. So maybe you have a lot of services that

123
00:08:16,672 --> 00:08:20,074
your customers are using. So you want to know which

124
00:08:20,112 --> 00:08:23,246
one of those services are being affected. In this example,

125
00:08:23,348 --> 00:08:26,538
this lambda, which all it does is send emails,

126
00:08:26,634 --> 00:08:30,190
actually is being used by two different services.

127
00:08:30,340 --> 00:08:34,206
The first one is process payment, which is processing

128
00:08:34,238 --> 00:08:37,698
all the payments of your customers. So that's very,

129
00:08:37,784 --> 00:08:41,662
very important. You're losing money if it's not working correctly.

130
00:08:41,726 --> 00:08:46,062
But it's also used by another service, the launchbot.

131
00:08:46,206 --> 00:08:49,622
Launchbot. Actually all it does is even used

132
00:08:49,676 --> 00:08:53,670
internally by your developers to make sure that they remember to go

133
00:08:53,740 --> 00:08:57,078
and eat lunch every day, so it sends them an email.

134
00:08:57,164 --> 00:09:00,746
So of course, if it's the second services, it's not that important. You can

135
00:09:00,768 --> 00:09:04,426
wait for Monday morning. You somehow need to know this lambda, how is

136
00:09:04,448 --> 00:09:08,454
it connected? So you start looking, who invokes this lambda?

137
00:09:08,502 --> 00:09:11,562
So you see maybe some sort of queues, and then you

138
00:09:11,616 --> 00:09:15,354
look for a lambda that uses this queues and you get up to this lambda,

139
00:09:15,402 --> 00:09:19,278
but very quickly you understand this is taking too long.

140
00:09:19,364 --> 00:09:22,410
If you're going to try out and understand the connection,

141
00:09:22,490 --> 00:09:26,190
you're going to waste all night to understand it. So hopefully

142
00:09:26,350 --> 00:09:29,858
you have some sort of drawing, a schema of your

143
00:09:29,944 --> 00:09:33,586
entire environment. So let's say you have a

144
00:09:33,608 --> 00:09:37,714
great architect, which is very diligent and keeps an

145
00:09:37,832 --> 00:09:41,202
up to date picture of your entire environment.

146
00:09:41,266 --> 00:09:45,282
And by the way, this is a real environment, published by Jan Kui.

147
00:09:45,346 --> 00:09:48,006
And this is, by the way, only a part of the environment. So you can

148
00:09:48,028 --> 00:09:51,798
see very quickly it's not a simple one, it's a little bit complex,

149
00:09:51,894 --> 00:09:55,370
but if you have a drawing up to date now, you can maybe start

150
00:09:55,440 --> 00:09:58,826
CTO, understand how this lambda is related to

151
00:09:58,848 --> 00:10:02,718
the different services. But still you need something that makes

152
00:10:02,804 --> 00:10:06,334
this exact connection, right? So it's not only the

153
00:10:06,372 --> 00:10:10,346
fact that there is a connection, you want to know how is it connected,

154
00:10:10,458 --> 00:10:14,314
through which different services is it going through? Now, once you've

155
00:10:14,362 --> 00:10:18,174
made this connection and you know that this lambda right now is failing

156
00:10:18,222 --> 00:10:21,714
for process payment, maybe you'll be able to still

157
00:10:21,752 --> 00:10:25,438
go to sleep. If it's affecting only, let's say, a test user

158
00:10:25,534 --> 00:10:29,954
and not a real user. So you want to know the exposure, so you somehow

159
00:10:30,002 --> 00:10:33,490
want to understand how many users are now being affected.

160
00:10:33,570 --> 00:10:37,170
Maybe only one is this owned user somehow,

161
00:10:37,250 --> 00:10:41,110
maybe not an important one, but maybe it's a vip user.

162
00:10:41,190 --> 00:10:45,014
So it's not enough to know that this lambda is failing

163
00:10:45,062 --> 00:10:48,860
process payment. You also somehow want to know exactly

164
00:10:49,310 --> 00:10:53,278
what was happening in this API call every time

165
00:10:53,364 --> 00:10:56,606
this lambda failed. Okay, let's say you checked it and you

166
00:10:56,628 --> 00:11:00,334
see there's a vip customer, and you know you need to fix it as

167
00:11:00,372 --> 00:11:04,046
quickly as possible. Let's try to debug it. What do you need in

168
00:11:04,068 --> 00:11:07,474
order to debug it? You need to zoom in on the specific

169
00:11:07,592 --> 00:11:11,506
failure. Okay, try to find not only the

170
00:11:11,528 --> 00:11:15,314
fact that there was a failure, you want to understand from all

171
00:11:15,352 --> 00:11:19,222
the different invocations this lambda had. What are the different

172
00:11:19,276 --> 00:11:23,218
points of data that maybe it outputted during its failure.

173
00:11:23,314 --> 00:11:26,838
So you can go for example, to cloud watch and take a

174
00:11:26,844 --> 00:11:30,426
look at the metrics of that lambda, see if there was a failure in

175
00:11:30,448 --> 00:11:33,914
a specific time, and then go to the logs. Now,

176
00:11:33,952 --> 00:11:37,146
there's no direct connection, so maybe based on the

177
00:11:37,168 --> 00:11:40,842
timestamp of the failures you see here, you can try and

178
00:11:40,896 --> 00:11:44,254
find the specific logs. Hopefully there is not a lot of

179
00:11:44,292 --> 00:11:48,062
invocations at the same time, so maybe you'll be able to find

180
00:11:48,116 --> 00:11:52,346
that. And then next thing you want to do is to extract debugging

181
00:11:52,378 --> 00:11:56,066
info, because just taking the logs is usually not enough. So maybe you

182
00:11:56,088 --> 00:11:59,906
need to somehow add some more logs and then get

183
00:12:00,008 --> 00:12:03,842
that lambda running again, hopefully getting same error very

184
00:12:03,896 --> 00:12:07,362
quickly, and then understanding what's going on. So again,

185
00:12:07,416 --> 00:12:11,302
you'll be doing that using the cloud watch logs. And then the

186
00:12:11,356 --> 00:12:15,126
last thing is you probably need distributed tracing, because if

187
00:12:15,148 --> 00:12:18,406
you find the issue in the lambda itself, that would be easy.

188
00:12:18,508 --> 00:12:22,518
But a lot of times in this very distributed environment,

189
00:12:22,614 --> 00:12:25,658
where serverless is usually very distributed, the issue,

190
00:12:25,744 --> 00:12:29,434
the root cause, is not exactly the same lambda where you

191
00:12:29,472 --> 00:12:32,846
see the issue. So you need to somehow start going up the

192
00:12:32,868 --> 00:12:36,110
system and finding the exact problem,

193
00:12:36,260 --> 00:12:39,386
maybe in different parts, in different components.

194
00:12:39,498 --> 00:12:43,182
Again, you'll be able CTO do some quick looks through

195
00:12:43,236 --> 00:12:46,666
Cloudwatch logs and Cloudwatch insights, and we'll

196
00:12:46,698 --> 00:12:50,066
also see how x ray can hopefully help you do that.

197
00:12:50,168 --> 00:12:53,630
Distributed tracing. As I said, we talked about the challenges,

198
00:12:53,710 --> 00:12:57,538
we started talking about the solutions, and now I want to show you different types

199
00:12:57,554 --> 00:13:00,722
of solutions which you can use in your environment.

200
00:13:00,786 --> 00:13:04,402
So the first option, the first family of solutions,

201
00:13:04,466 --> 00:13:08,566
is Cloudwatch and friends. Cloudwatch is actually a

202
00:13:08,588 --> 00:13:11,622
number of different services which you can use, metrics,

203
00:13:11,686 --> 00:13:15,194
logs, insights. There's also x ray, which is not

204
00:13:15,232 --> 00:13:19,062
exactly Cloudwatch, but goes together. They're not easily connected,

205
00:13:19,126 --> 00:13:22,514
but they're out of the box. We saw those examples

206
00:13:22,582 --> 00:13:25,694
right before. In all these examples, these are

207
00:13:25,732 --> 00:13:29,518
actually all Cloudwatch, but there's also x ray allowing you

208
00:13:29,524 --> 00:13:33,182
to do some distributed tracing. X ray is a great place to start,

209
00:13:33,236 --> 00:13:36,574
but you'll see, especially around asynchronous connections,

210
00:13:36,622 --> 00:13:40,034
you won't be able to see all the different connections. So the

211
00:13:40,072 --> 00:13:43,666
main advantage of using Cloudwatch is it's out

212
00:13:43,688 --> 00:13:46,546
of the box, it's right there. If you're using AWS,

213
00:13:46,658 --> 00:13:50,214
it has AWS support, which is very cool. And the

214
00:13:50,252 --> 00:13:55,106
cons is it's complicated to use and it has only partial asynchronous

215
00:13:55,218 --> 00:13:58,278
support. And if you're looking for specific issues,

216
00:13:58,364 --> 00:14:01,674
it's not very easy to query. While it shows you

217
00:14:01,712 --> 00:14:05,370
the technical impact, a lot of times it's very hard to understand the

218
00:14:05,440 --> 00:14:09,194
high level business impact like to which API it

219
00:14:09,232 --> 00:14:12,590
was related. So now let's talk about option number two,

220
00:14:12,660 --> 00:14:16,250
homebrewed solutions. These solutions are the ability

221
00:14:16,330 --> 00:14:20,126
to add to your own code different data points, which in

222
00:14:20,148 --> 00:14:23,902
the end will allow you to correlate all that information

223
00:14:24,036 --> 00:14:27,266
on your own. So I won't go of course into the

224
00:14:27,288 --> 00:14:31,522
code, but usually what you'd want to do is add a combination id

225
00:14:31,656 --> 00:14:35,086
to all of your functions and CTO all the

226
00:14:35,128 --> 00:14:38,294
different services which are being used.

227
00:14:38,412 --> 00:14:43,042
So you need to make sure that that id is being passed somehow

228
00:14:43,186 --> 00:14:45,890
between your kinesis, sqs,

229
00:14:45,970 --> 00:14:49,226
SNS, dynamodb streams and so on.

230
00:14:49,328 --> 00:14:52,810
You generate it at the earliest stage, for example,

231
00:14:52,960 --> 00:14:56,566
when the lambda that is being called by API gateway

232
00:14:56,678 --> 00:15:00,694
runs for the first time, and then propagate it throughout your

233
00:15:00,752 --> 00:15:04,954
different transactions. You want to make sure that you're outputting

234
00:15:05,002 --> 00:15:09,054
that id to each and every log, or else that id of course

235
00:15:09,092 --> 00:15:12,126
has no meaning because you

236
00:15:12,148 --> 00:15:15,890
need to somehow consume that id. As I said,

237
00:15:15,960 --> 00:15:18,770
you'll be adding it to your code at some place,

238
00:15:18,840 --> 00:15:22,494
creating a unique id and then passing

239
00:15:22,542 --> 00:15:25,730
it to each and every function which is running,

240
00:15:25,800 --> 00:15:29,846
and also to all the different services that are being called and

241
00:15:29,948 --> 00:15:33,526
make sure to log it each and every time. And probably the

242
00:15:33,548 --> 00:15:37,218
easiest way to do that is to add it to your logger.

243
00:15:37,314 --> 00:15:41,450
And then when you look at your logs, you'll see that id in all

244
00:15:41,520 --> 00:15:44,410
your logs. So if you find for example,

245
00:15:44,560 --> 00:15:47,706
a log of an issue and you want to

246
00:15:47,728 --> 00:15:51,374
see all the different logs which are related to it, maybe even

247
00:15:51,412 --> 00:15:54,862
in different lambdas that are all related, you can search

248
00:15:54,916 --> 00:15:58,586
for that id in any elastic based solution

249
00:15:58,698 --> 00:16:02,650
like logs IO, elastic on AWS

250
00:16:02,810 --> 00:16:07,418
and so on, and you'll be able to make your life easier.

251
00:16:07,514 --> 00:16:11,010
Now, if you were going to do it, that means a lot of changes

252
00:16:11,080 --> 00:16:14,226
in your code. I highly recommend you use some kind

253
00:16:14,248 --> 00:16:17,694
of open source. There's the power tools open source,

254
00:16:17,742 --> 00:16:21,938
which is great for in this case we see it in NPM, meaning in node.

255
00:16:22,034 --> 00:16:25,206
You'll have it for different services and make sure you add it to

256
00:16:25,228 --> 00:16:29,530
all the services that you're using. And of course there's a second

257
00:16:29,600 --> 00:16:33,158
kind of those open sources, like open tracing

258
00:16:33,254 --> 00:16:36,794
opensensus, and of course the new open telemetry which

259
00:16:36,832 --> 00:16:40,490
you can add to your lambda now remember, it's not specific

260
00:16:40,560 --> 00:16:43,934
to lambda, so you'll need to add it on your own and

261
00:16:43,972 --> 00:16:47,962
make sure that you're adding it to all the different places

262
00:16:48,026 --> 00:16:51,374
that the services are being called. This is an example of

263
00:16:51,412 --> 00:16:55,026
yeager, and this is how a timeline, once you've added it to all

264
00:16:55,048 --> 00:16:58,030
the right places, you'll be able to see this timeline,

265
00:16:58,110 --> 00:17:02,014
which of course is very helpful when trying to troubleshoot

266
00:17:02,062 --> 00:17:05,150
an issue in a serverless, asynchronous environment.

267
00:17:05,230 --> 00:17:08,938
Let's talk about the pros and the cons. The pro is it's tailor

268
00:17:08,974 --> 00:17:12,374
fit. You added it to your own code, so of course it

269
00:17:12,412 --> 00:17:16,374
will be exactly the way that you need it. It's supported by

270
00:17:16,412 --> 00:17:20,362
many different vendors and it's not cloud specific. It's not

271
00:17:20,416 --> 00:17:23,818
something that you will get only on AWS, for example.

272
00:17:23,984 --> 00:17:27,626
And the cons is that it's very high touch. You need

273
00:17:27,648 --> 00:17:31,242
to add it to all your different lambdas, you need

274
00:17:31,296 --> 00:17:35,134
to make sure that it's added in all the right places. And for

275
00:17:35,172 --> 00:17:38,654
example, it's not good enough to do it one time because you need

276
00:17:38,692 --> 00:17:42,506
that every new lambda and every new team member remembers

277
00:17:42,538 --> 00:17:45,854
to add it. And of course if a different team starts to

278
00:17:45,972 --> 00:17:49,726
use it, you need to make sure that they use it as well. So keeping

279
00:17:49,758 --> 00:17:53,554
it up to date at all times is not that easy. And not

280
00:17:53,592 --> 00:17:56,738
all components are covered by these solutions.

281
00:17:56,834 --> 00:18:00,674
If you're going that way, I again highly recommend Jan

282
00:18:00,722 --> 00:18:04,054
Kuiz, also known as the Burning Monk. He has

283
00:18:04,092 --> 00:18:07,474
a great blog post about it. So look for this

284
00:18:07,612 --> 00:18:11,098
and it's very helpful. So let's talk about the third option,

285
00:18:11,184 --> 00:18:14,662
which is serverless monitoring platforms. These are SaaS

286
00:18:14,726 --> 00:18:18,550
platforms focused on these kinds of solutions.

287
00:18:18,630 --> 00:18:22,478
Basically the classic buy versus build. Instead of doing

288
00:18:22,564 --> 00:18:26,090
all of this on your own, you get it just integrating

289
00:18:26,170 --> 00:18:30,602
to these platforms. It does everything automatically.

290
00:18:30,746 --> 00:18:33,730
It automates the distributed tracing.

291
00:18:34,550 --> 00:18:38,046
Between these different platforms there's a common implementation,

292
00:18:38,158 --> 00:18:41,522
you add a library to your code, you have can

293
00:18:41,576 --> 00:18:45,042
im role and by doing that you're able

294
00:18:45,096 --> 00:18:49,014
to get a solution for the different challenges that we

295
00:18:49,052 --> 00:18:53,042
mentioned before. So the pros, this is serverless focused,

296
00:18:53,106 --> 00:18:56,162
it helps you, not as like a generic solution

297
00:18:56,226 --> 00:18:59,706
that is good for everything, but then when you need it for your own specific

298
00:18:59,808 --> 00:19:03,750
environment, it becomes very hard. It gives you the best of breed

299
00:19:03,830 --> 00:19:07,286
for serverless environments. It's more than just tracing,

300
00:19:07,398 --> 00:19:11,162
it does correlation for your logs and it

301
00:19:11,216 --> 00:19:14,958
identifies the issues automatically. It sends you the information

302
00:19:15,044 --> 00:19:18,446
that you need and it's very very low touch. All you need

303
00:19:18,468 --> 00:19:22,170
to do is the first integration and then you get all the rest automatically.

304
00:19:22,250 --> 00:19:26,174
The cons is you need to integrate with another third

305
00:19:26,212 --> 00:19:29,710
party, it's another screen you need to look at. And it's more than just tracing.

306
00:19:29,790 --> 00:19:33,522
So if you were looking only for the tracing part, you'll still be getting

307
00:19:33,576 --> 00:19:37,174
a lot of other parts with it. Now let's take a look at an

308
00:19:37,212 --> 00:19:40,774
example. So this is an example of Lumigo, which is this kind

309
00:19:40,812 --> 00:19:44,646
of platform, how it's being used at Medtronic under

310
00:19:44,748 --> 00:19:48,790
live environment, and these examples are from their dev environment.

311
00:19:48,870 --> 00:19:52,022
So for example, here you can see an automatically

312
00:19:52,086 --> 00:19:55,626
generated transaction. So if before we saw a

313
00:19:55,648 --> 00:19:59,322
schema of the architect drew of all the different

314
00:19:59,376 --> 00:20:03,274
components, how they're connected, this you get automatically.

315
00:20:03,322 --> 00:20:07,114
Once you integrate with Lumigo, you see how everything is connected

316
00:20:07,162 --> 00:20:11,134
to each other. For example, here s three, which triggers a

317
00:20:11,172 --> 00:20:13,838
lambda kinesis, dynamodb,

318
00:20:13,934 --> 00:20:17,970
another kinesis, and so on. So by seeing how everything

319
00:20:18,040 --> 00:20:21,966
is connected automatically, you have can up CTO date understanding

320
00:20:21,998 --> 00:20:25,778
of what's going on with your system. And if something

321
00:20:25,864 --> 00:20:29,750
goes wrong, you're able to follow the data. So, for example,

322
00:20:29,820 --> 00:20:33,414
if something goes wrong with a specific lambda, you can see what was

323
00:20:33,452 --> 00:20:36,886
the data that was passed to this invocation of the

324
00:20:36,908 --> 00:20:40,234
lambda, and see how it was in the kinesis, and then what

325
00:20:40,272 --> 00:20:43,978
exactly happened in that lambda. And by following that data,

326
00:20:44,144 --> 00:20:48,042
a lot of times you're able to understand what went wrong between

327
00:20:48,096 --> 00:20:51,686
the different asynchronous events. You can click on each

328
00:20:51,728 --> 00:20:55,342
and every lambda, and then you do a deep dive and

329
00:20:55,396 --> 00:20:59,726
understand exactly what was happening, what was the return value,

330
00:20:59,908 --> 00:21:03,230
how much time it took it to run, what was the event,

331
00:21:03,300 --> 00:21:06,866
meaning the input. You can also see the outputs of the lambda, and this you

332
00:21:06,888 --> 00:21:10,546
get automatically. With these platforms, you can

333
00:21:10,568 --> 00:21:13,938
also focus on the actions. Sometimes you don't want to

334
00:21:13,944 --> 00:21:17,798
see only the data, but also see exactly what happened,

335
00:21:17,884 --> 00:21:21,346
the story of what happened, by starting at this lambda

336
00:21:21,378 --> 00:21:24,854
right at the top, and knowing exactly how the

337
00:21:24,892 --> 00:21:27,906
story of this transaction rolled out.

338
00:21:28,028 --> 00:21:31,802
So a lot of times you maybe still start with,

339
00:21:31,936 --> 00:21:35,206
in this example, cloud watch insights.

340
00:21:35,318 --> 00:21:39,034
But then when you get to a specific issue, you can

341
00:21:39,072 --> 00:21:42,382
go and pinpoint that issue. In Medtronic case,

342
00:21:42,436 --> 00:21:46,270
they have 1 billion invocations, and very quickly they

343
00:21:46,340 --> 00:21:49,962
understood that using Lumigo was much, much easier

344
00:21:50,026 --> 00:21:53,474
for them, and they're able to do a specific

345
00:21:53,592 --> 00:21:57,394
search according to the issue, according to the request id

346
00:21:57,512 --> 00:22:01,874
or anything else, and get to that specific invocation and

347
00:22:01,912 --> 00:22:05,358
see all the information they need about that invocation.

348
00:22:05,454 --> 00:22:09,094
Another thing that you can do with these platforms is see the

349
00:22:09,132 --> 00:22:12,982
timeline so not only can you see exactly who

350
00:22:13,036 --> 00:22:16,498
called who, like a dynamodb called another lambda,

351
00:22:16,594 --> 00:22:20,682
but you can also see exactly how much time each call took.

352
00:22:20,816 --> 00:22:23,978
And then you can focus on the bottlenecks if you want.

353
00:22:23,984 --> 00:22:28,074
CTO improve the latency and not just spend your time

354
00:22:28,272 --> 00:22:31,694
maybe fixing something that took only one or two

355
00:22:31,732 --> 00:22:35,354
milliseconds. And you can also track deployment effects,

356
00:22:35,402 --> 00:22:38,650
because when you look at serverless environments,

357
00:22:38,810 --> 00:22:43,626
there are a lot of changes, because it's so easy to change each

358
00:22:43,668 --> 00:22:47,122
and every part on its own, there's a lot of changes.

359
00:22:47,256 --> 00:22:50,818
So you want an easy way CTO track those changes,

360
00:22:50,984 --> 00:22:54,260
see the exact point, like here you see

361
00:22:54,870 --> 00:22:58,150
of every deployment, and then you're able to see, for example

362
00:22:58,220 --> 00:23:01,554
here, okay, we deployed something and once we've

363
00:23:01,602 --> 00:23:05,046
deployed it, the issues stopped. So basically we understand

364
00:23:05,148 --> 00:23:08,922
that the fixed that we deployed actually did a job

365
00:23:09,056 --> 00:23:12,982
and now we can go back to sleep. So the main takeaways,

366
00:23:13,126 --> 00:23:16,460
serverless, like we said, changes everything.

367
00:23:17,150 --> 00:23:20,758
You have a lot of moving parts, a lot of nanoservices,

368
00:23:20,934 --> 00:23:25,610
there are a lot of asynchronous patterns, and the environments

369
00:23:25,690 --> 00:23:29,086
are highly distributed. There are different solutions which

370
00:23:29,108 --> 00:23:33,834
you can use. You have those out of the box, like AWs

371
00:23:33,962 --> 00:23:37,486
x ray, you have the homebrewed solutions,

372
00:23:37,598 --> 00:23:40,994
different open sources or things that you can do on your own.

373
00:23:41,112 --> 00:23:44,986
And then you can change your code and get that distributed

374
00:23:45,038 --> 00:23:48,198
tracing, and you have serverless monitoring platforms which you

375
00:23:48,204 --> 00:23:52,354
can use and integrate. And then all the monitoring

376
00:23:52,402 --> 00:23:56,370
observability, distributed tracing is done automatically

377
00:23:56,450 --> 00:23:59,398
for you and you can pick which one is best for you.

378
00:23:59,484 --> 00:24:02,934
Thank you. Because the way that conf fourty two is

379
00:24:02,972 --> 00:24:06,742
done, there won't be any questions. But feel free to reach

380
00:24:06,796 --> 00:24:10,350
out either through my email or my twitter her

381
00:24:10,420 --> 00:24:13,678
and ask any questions. I'm very happy to answer.

382
00:24:13,844 --> 00:24:16,302
So I hope you enjoyed and have a great day.

