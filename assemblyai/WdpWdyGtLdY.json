{"language_code": "en_us", "audio_url": "https://cdn.assemblyai.com/upload/15ae4d8a-8a39-4eb8-b5b1-e99bc7dc7aef", "punctuate": true, "format_text": true, "dual_channel": null, "webhook_url": null, "webhook_auth_header_name": null, "webhook_auth_header_value": null, "audio_start_from": null, "audio_end_at": null, "word_boost": ["adopting", "benefits", "challenges", "chaos", "charles akl", "citi", "citi bank", "citis", "compliance", "conf fourty two", "costs", "encountered", "etc", "factoring", "head of na sre nam", "inhouse", "products", "proposition", "sdlc", "tools", "touching"], "boost_param": "high", "filter_profanity": false, "redact_pii": false, "redact_pii_audio": false, "redact_pii_policies": null, "redact_pii_sub": null, "speaker_labels": false, "speakers_expected": null, "content_safety": false, "content_safety_confidence": null, "iab_categories": false, "custom_spelling": null, "disfluencies": false, "sentiment_analysis": false, "auto_chapters": false, "entity_detection": false, "summarization": true, "summary_model": "informative", "summary_type": "bullets_verbose", "auto_highlights": true, "language_detection": false, "speech_threshold": null, "speech_model": null, "id": "d05f1667-7929-421e-9163-7a52450bd2fd", "status": "completed", "error": null, "text": "My name is Charles Acol, and I work at Citibank. I manage the USPB SRE team. And our next phase is transforming our l two into production support, into an SRE cytrology engineering team. And as part of that, chaos engineering is a very core principle that we like to adopt. So chaos engineering really is a discipline of experimenting on a system in order to build confidence in the system's capability to withstand turbulent conditions in production. And really, this is, if you google that concept, it exists under principlesofchaos.org. But to give some background, chaos engineering was pioneered at Netflix roughly around 2010, when they migrated from their legacy hardware to AWS, and they started inducing artificial flavor. Or at least this is one avenue of where we see the initial views of it. And then fast forward to today, 2023. I mean, it's a common practice in the industry across tech giants like Google, LinkedIn, also the banking industry across. And you have Colton Andrews from Netflix and Matthew from Salesforce. They kind of merged forces and they started Gremlin. Gremlin is a tool we also use, which I'll briefly touch on. And then today also there is component of Lightspeed, which is harness. That's also another very nice tool that can be used for chaos engineering. Of course, there's other tools in the industry, there's other different flavors, but we also have in house tools. But in general, that's the idea behind it. So the benefits of chaos engineering is to promote innovation, elevate partnership, improve incident response, generate knowledge, and really increase the reliability and the resiliency to kind of measure the ecosystem from what does that mean to the customer? So different flavors that we do. We do a production game day. We do it once a month. As part of that exercise, we've written tons of ansible playbooks where through an in house tool, we do one touch failover, and then we run it through the entire day out of a single data center. So we're really doing a production stress test of the ecosystem to see what is the threshold that it can tolerate. And we have tons of applications that we do that, too. And then we get the results, we measure it, we have automated measurement, and then now we're working into an automated normalization of it as well. Another flavor that we do in production is called wheels of misfortune. Wheels of misfortune is a very fun exercise. And where what we do is we gather teams across sectors, from incident management, problem management products, sres, performance, and then we usually meet every couple of weeks for 30 minutes. We kind of pick topics, usually major outages, or we can go all the way to a cybersecurity. And then what happens after that? We conduct one exercise every quarter and then we record it and it helps build the stress level gets elevated. When you have outages, we have a lot of takeaways from meantime to recover. Do we have the right architecture diagram? Do we have the right factoring? Any opportunities for improvement? So it's kind of like a role play, and then you would have volunteers, non playing characters. So that's a fun exercise. And then we record it and measure it and kind of come out with certain results behind it to see what improvements can be done. We also do chaos engineering in the lower environment. So we do it in Gremlin. Gremlin is one of the industry standard platforms which is available in SAS. It allows to inject failures at various layers of the system. It can assess robustness using one of different attacks. Now you can do Gremlin on legacy physical jvms on Linux servers. And then you kind of measured. So let's say you have 100 transactions per second within a 30 minutes time frame. Then at the ten minute margin you're measuring the average response time. Then you invoke a high cpu attack, and then you kind of observe, is there any impact to the I o, so on and so forth. So we do that also on a quarterly basis. And now what we're doing is we're integrating Gremlin with Openshift, where you can kind of measure the pods and see the different types of attacks that can be done. The other tool that we use as well is chaos monkey. Chaos monkey is one of the original tools that was created by Netflix, and it's one of my favorite tools as well. It stimulates failures by randomly terminating instances. So you can stop one of the namespace instances in Openshift for example, or PCF, Google Cloud, foundry, dell or AWS, or whatever ecosystem you're in. And then you measure what happened to the other layers or what was the customer experience. We do have another tool which is called Ape army, that's an in house tool where we execute different types of costs to it. And then you can do basic manual tests where you can manually manipulate the environment. You can change the yaml file. If you have services that are Java based, you can change the configuration or the parameter to disable specific components, or do a restart and measure the behavior. So those are different types of attacks that can be done. You can do like resource attack, which has high cpu, high memory, high I o load. There's also some that are like state attacks where you can shut down process skill or do time travel. You can do network attacks, latency and packet loss, or a black hole network connectivity. One of the other tests that we do is not in production. We kind of shut down one of the core services, whether it's a major database or a core mainframe component, and we start measure. What does that mean to the end user? Did they get the right message? Was their data available for them? So there's different flavors around it. And if you have any questions, please let me know. But thank you for listening in and enjoy the conference. Cheers.", "words": [], "utterances": null, "confidence": 0.942891224489799, "audio_duration": 470.0, "webhook_status_code": null, "webhook_auth": false, "summary": "- Charles Acol: Chaos engineering really is a discipline of experimenting on a system in order to build confidence in the system's capability to withstand turbulent conditions in production. It's a common practice in the industry across tech giants like Google, LinkedIn, also the banking industry across.", "auto_highlights_result": {"status": "success", "results": [{"count": 1, "rank": 0.06, "text": "different attacks", "timestamps": [{"start": 296032, "end": 297286}]}, {"count": 1, "rank": 0.06, "text": "other tools", "timestamps": [{"start": 134898, "end": 135554}]}, {"count": 1, "rank": 0.06, "text": "other different flavors", "timestamps": [{"start": 136578, "end": 137726}]}, {"count": 1, "rank": 0.06, "text": "network attacks", "timestamps": [{"start": 429404, "end": 430738}]}, {"count": 1, "rank": 0.06, "text": "house tools", "timestamps": [{"start": 139712, "end": 140374}]}, {"count": 3, "rank": 0.05, "text": "different types", "timestamps": [{"start": 340048, "end": 340566}, {"start": 385746, "end": 386338}, {"start": 409572, "end": 410186}]}, {"count": 3, "rank": 0.05, "text": "different flavors", "timestamps": [{"start": 136812, "end": 137726}, {"start": 163030, "end": 164046}, {"start": 460378, "end": 461306}]}, {"count": 6, "rank": 0.05, "text": "chaos engineering", "timestamps": [{"start": 46652, "end": 47714}, {"start": 52436, "end": 53434}, {"start": 75190, "end": 76218}, {"start": 132748, "end": 134002}, {"start": 145248, "end": 146246}, {"start": 277692, "end": 278706}]}, {"count": 1, "rank": 0.05, "text": "resource attack", "timestamps": [{"start": 414648, "end": 415618}]}, {"count": 1, "rank": 0.05, "text": "incident response", "timestamps": [{"start": 150522, "end": 151674}]}, {"count": 1, "rank": 0.05, "text": "legacy physical jvms", "timestamps": [{"start": 300212, "end": 303114}]}, {"count": 2, "rank": 0.05, "text": "high cpu", "timestamps": [{"start": 323288, "end": 324094}, {"start": 416776, "end": 417502}]}, {"count": 1, "rank": 0.05, "text": "state attacks", "timestamps": [{"start": 422936, "end": 423998}]}, {"count": 6, "rank": 0.05, "text": "production", "timestamps": [{"start": 41068, "end": 41586}, {"start": 63364, "end": 63918}, {"start": 165736, "end": 166718}, {"start": 184108, "end": 184594}, {"start": 205828, "end": 206266}, {"start": 441132, "end": 441794}]}, {"count": 1, "rank": 0.05, "text": "incident management", "timestamps": [{"start": 217288, "end": 218590}]}]}, "content_safety_labels": null, "iab_categories_result": null, "chapters": null, "sentiment_analysis_results": null, "entities": null}