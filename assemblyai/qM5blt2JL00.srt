1
00:00:26,610 --> 00:00:30,306
Hi everyone. Today we're going to talk about Kubernetes scheme of validation.

2
00:00:30,418 --> 00:00:34,486
We're going to understand what is exactly the schema validation process

3
00:00:34,668 --> 00:00:39,122
and why it's important and what are the tools natively

4
00:00:39,186 --> 00:00:41,800
and open source that you can use to do that.

5
00:00:42,650 --> 00:00:46,530
But first, let me introduce myself. My name is Yazil Berman.

6
00:00:46,610 --> 00:00:50,734
I'm leading the product and co founder at the tree. I'm also

7
00:00:50,852 --> 00:00:54,398
one of the organizers of the biggest GitHub community in the world

8
00:00:54,484 --> 00:00:57,934
right here in Israel. I hate SQL built, I do

9
00:00:57,972 --> 00:01:01,294
love Regex, and I'm also fully aware that I

10
00:01:01,332 --> 00:01:05,118
have pink bunny ears. Yes, let's put it on the

11
00:01:05,124 --> 00:01:08,482
table. It's a gimmick. But I promise you, if you're going to stay

12
00:01:08,536 --> 00:01:11,826
until the end of this presentation, you understand exactly why I'm

13
00:01:11,848 --> 00:01:15,870
doing it. So the tree is an open source tool

14
00:01:15,960 --> 00:01:19,890
for developers or engineers, and it can help you prevent

15
00:01:20,050 --> 00:01:23,618
any Kubernetes misconfigurations the way that it's

16
00:01:23,634 --> 00:01:26,854
doing it. It's a CLI tool, so it's integrated inside your

17
00:01:26,892 --> 00:01:30,506
CI CD workflow and it will run automatically. Every time

18
00:01:30,528 --> 00:01:34,230
that someone is doing a change to your Kubernetes manifest,

19
00:01:34,390 --> 00:01:38,326
it will run to make sure that you don't have any misconfigurations

20
00:01:38,438 --> 00:01:42,080
that are introduced. When someone is making those changes,

21
00:01:42,530 --> 00:01:46,366
it will verify it against predefined policies that the

22
00:01:46,388 --> 00:01:49,614
organization is setting to make sure that

23
00:01:49,652 --> 00:01:53,786
everyone aligned on the same policy. So that's

24
00:01:53,818 --> 00:01:57,614
about the tree. But enough about the tree. Let's talk about Kubernetes schema validation.

25
00:01:57,742 --> 00:02:01,106
So what is it exactly? I like to refer it as a

26
00:02:01,128 --> 00:02:04,890
set of unit tests to verify that your manifest contain the correct properties,

27
00:02:04,990 --> 00:02:09,142
key and value. Think about it. Let's have

28
00:02:09,196 --> 00:02:12,246
this example. It's a subset of a

29
00:02:12,268 --> 00:02:16,150
Kubernetes manifest and have two misconfigurations inside this file.

30
00:02:18,190 --> 00:02:21,574
One, the world deployment need to start with a capital

31
00:02:21,622 --> 00:02:24,906
d. The key namespace should have

32
00:02:24,928 --> 00:02:26,060
a lower s,

33
00:02:28,110 --> 00:02:32,014
so the schema validation should catch those kind

34
00:02:32,052 --> 00:02:35,562
of misconfigurations. And you're probably wondering

35
00:02:35,626 --> 00:02:39,200
who is actually writing all those unit best. So it's the community.

36
00:02:39,570 --> 00:02:43,790
You can actually write a pull request and open it. In the Kubernetes

37
00:02:44,610 --> 00:02:48,478
community, if you have some kind of a unit

38
00:02:48,494 --> 00:02:51,678
test or another validation that you want to add to the schema

39
00:02:51,774 --> 00:02:55,570
and it will be checked and it can also be accepted.

40
00:02:57,690 --> 00:03:00,630
So what is not part of the schema validation?

41
00:03:00,970 --> 00:03:04,274
Everything that is related to making sure that it's a valid yaml

42
00:03:04,322 --> 00:03:07,640
file, or to make sure

43
00:03:09,150 --> 00:03:12,698
that it's actually holding the best practices. For example,

44
00:03:12,784 --> 00:03:16,090
making sure that you have memory and cpu limit. Yeah, those are

45
00:03:16,160 --> 00:03:19,626
the mandatory best practices. I know,

46
00:03:19,728 --> 00:03:23,626
but it's not really necessary to apply your manifest,

47
00:03:23,818 --> 00:03:28,080
so it's not part of the scheme of validation. It will also not check

48
00:03:28,450 --> 00:03:32,222
if you have team organization policy, for example,

49
00:03:32,276 --> 00:03:35,458
make sure that it's a really common one. Make sure that all the images are

50
00:03:35,464 --> 00:03:38,606
pulled from a private registry. It's not part of the schema validation,

51
00:03:38,638 --> 00:03:42,306
it's part of a different flow. So how do

52
00:03:42,328 --> 00:03:45,938
I use the schema validation? Good news, you don't need

53
00:03:45,944 --> 00:03:49,298
to do anything. It's activated by default every time that you're

54
00:03:49,314 --> 00:03:53,334
trying to apply a configuration into a cluster. Bad news,

55
00:03:53,532 --> 00:03:57,014
it's probably going to be too late. You're probably going to see those

56
00:03:57,052 --> 00:04:00,794
misconfigurations when you're trying to apply it. You want

57
00:04:00,832 --> 00:04:04,490
to see it much, much earlier in the process when

58
00:04:04,560 --> 00:04:08,106
they are introduced into your configuration. So how do

59
00:04:08,128 --> 00:04:10,846
I shift it left? Well,

60
00:04:11,028 --> 00:04:14,762
Kubectl have a flag for that. It's called Ryrun

61
00:04:14,826 --> 00:04:18,606
and it's have two mode, client and server, and you can run it

62
00:04:18,708 --> 00:04:21,280
before you do Kubectl apply.

63
00:04:22,390 --> 00:04:26,100
So what's the difference between those two modes? Let's check.

64
00:04:26,470 --> 00:04:30,078
So of course they both perform schema validation.

65
00:04:30,174 --> 00:04:33,566
Makes sense. Server mode

66
00:04:33,598 --> 00:04:38,082
also perform extra validations securing

67
00:04:38,136 --> 00:04:41,506
the presentation. I will go deeper into exactly which kind of validation

68
00:04:41,538 --> 00:04:45,186
it's making, but it's only supported on the server mode. It's not supported

69
00:04:45,218 --> 00:04:48,918
on the client mode because those validations are not part of

70
00:04:48,924 --> 00:04:52,266
the schema. The server mode and

71
00:04:52,288 --> 00:04:55,526
both the client mode are not supporting different Kubernetes schema versions.

72
00:04:55,638 --> 00:04:59,302
So let's think about our use case for that. Let's say that your Kubernetes

73
00:04:59,366 --> 00:05:02,942
version is 118 and you want to upgrade to version 120.

74
00:05:03,076 --> 00:05:06,720
So you want to make sure that all the manifests that you already have

75
00:05:07,890 --> 00:05:11,114
don't contain something that's going to be deprecated in version

76
00:05:11,162 --> 00:05:14,414
120. So the downside with this flag is

77
00:05:14,452 --> 00:05:18,094
that you can do it. You can only check against a predefined

78
00:05:18,222 --> 00:05:21,746
schema for a specific version. In this case you can only check it

79
00:05:21,768 --> 00:05:23,490
against the version 118.

80
00:05:25,510 --> 00:05:28,646
How about requiring a connection to your cluster? So in the

81
00:05:28,668 --> 00:05:32,102
server mode you have to have a connection. Makes sense.

82
00:05:32,236 --> 00:05:35,558
And in the client mode you also need to have a

83
00:05:35,564 --> 00:05:37,880
connection. Wait, what? Why?

84
00:05:38,490 --> 00:05:42,122
So it's a bug. So you probably think to yourself, oh,

85
00:05:42,176 --> 00:05:46,234
that's a nice bug, it's going to be fixed really soon. The answer is no,

86
00:05:46,352 --> 00:05:50,074
it's a bug, and this bug is actually open for a long time.

87
00:05:50,272 --> 00:05:54,330
Last time that I checked they have more than 1000 open bugs

88
00:05:54,410 --> 00:05:57,706
on the Kubernetes project. So don't have a high expectation

89
00:05:57,738 --> 00:06:01,310
on that. So this make the client mode

90
00:06:01,650 --> 00:06:04,610
unnecessary. I don't see any reason to use it.

91
00:06:04,680 --> 00:06:08,594
This was the only reason to actually use the client mode because

92
00:06:08,632 --> 00:06:11,790
it's not supposed to require the connection to your cluster.

93
00:06:11,950 --> 00:06:15,990
So the question is what should I do?

94
00:06:16,140 --> 00:06:20,034
Open source to the rescue we have two great projects

95
00:06:20,082 --> 00:06:23,938
that can help you verify your schema,

96
00:06:23,954 --> 00:06:27,686
your Kubernetes schema in offline mode. One of

97
00:06:27,708 --> 00:06:30,518
them is called Kubevival, the other one is called Kubecon.

98
00:06:30,694 --> 00:06:33,914
They are both working in the same way.

99
00:06:34,032 --> 00:06:37,766
So inside the Kubernetes project you have a swagger

100
00:06:37,798 --> 00:06:41,546
file. It's an open API definition of all the schema

101
00:06:41,578 --> 00:06:45,358
definitions. So there is another process

102
00:06:45,444 --> 00:06:48,970
that is happening by both of those projects

103
00:06:49,050 --> 00:06:53,330
that's converting this swagger file into

104
00:06:53,480 --> 00:06:56,398
different JSON schema files.

105
00:06:56,494 --> 00:07:00,050
I'm not going to get into why they are doing it and why it's happening,

106
00:07:00,200 --> 00:07:04,034
I'm just going to mention it then.

107
00:07:04,152 --> 00:07:07,574
The CLI tools cubival and cube perform, they are both doing

108
00:07:07,612 --> 00:07:10,758
the same way. They are checking those

109
00:07:10,844 --> 00:07:15,366
manifest, sorry, they are checking those schemas when

110
00:07:15,388 --> 00:07:18,506
you're running it offline. So this is why you don't need to have a

111
00:07:18,528 --> 00:07:22,646
connection because they actually have their own local copy of the schema

112
00:07:22,678 --> 00:07:26,362
definition inside those repositories when they converted it from

113
00:07:26,416 --> 00:07:28,970
the open API into a JSON schema.

114
00:07:30,690 --> 00:07:34,026
So which one should I use? Kubectl server

115
00:07:34,058 --> 00:07:36,030
mode or the open source tools?

116
00:07:37,410 --> 00:07:41,514
Let's do Qa. So this is a manifest,

117
00:07:41,562 --> 00:07:45,390
and inside this manifest there's an invalid label value. You see

118
00:07:45,460 --> 00:07:49,038
the app label so it's

119
00:07:49,054 --> 00:07:53,214
not valid. And if you try to apply it, you get this nasty arrow

120
00:07:53,262 --> 00:07:56,834
with basically saying that you can't start your label with

121
00:07:56,872 --> 00:08:00,390
a dash, it needs to start with either alphanumeric letter or

122
00:08:00,460 --> 00:08:03,814
a number. So if

123
00:08:03,852 --> 00:08:07,106
you try to run it with Kubectl server

124
00:08:07,138 --> 00:08:10,086
mode, it will catch it. If you try to run it with one of the

125
00:08:10,108 --> 00:08:13,706
open source, it will not catch it. The reason for that is that, remember that

126
00:08:13,728 --> 00:08:17,402
we talked about extra validation that is performed on the server side.

127
00:08:17,536 --> 00:08:21,450
So this is one of those extra validations,

128
00:08:22,110 --> 00:08:26,314
you expect it to be part of the schema, but it's not, it's another validation

129
00:08:26,362 --> 00:08:29,854
that is happening. I really don't know what's the reason for that.

130
00:08:29,972 --> 00:08:33,426
And if someone have an answer for it I will be more

131
00:08:33,448 --> 00:08:36,260
than happy to know why is that like that?

132
00:08:37,430 --> 00:08:41,060
So let's do another qa. Okay, take two.

133
00:08:41,430 --> 00:08:45,106
This manifest is missing an image. You see that

134
00:08:45,128 --> 00:08:47,426
I have the name and I have the pod, so I don't have the image

135
00:08:47,458 --> 00:08:48,040
itself.

136
00:08:51,280 --> 00:08:54,844
If I try to apply it with dry run

137
00:08:54,882 --> 00:08:57,390
server mode, Kubectl will catch it.

138
00:08:58,160 --> 00:09:01,810
Open source will not catch it again. From the same reason

139
00:09:02,980 --> 00:09:06,656
it's not performing those extra validations that you expect to be

140
00:09:06,678 --> 00:09:11,010
part of the schema. Same thing. I don't know why not.

141
00:09:12,200 --> 00:09:15,844
So who is the winner in this case? If you

142
00:09:15,882 --> 00:09:19,556
have a connection to your cluster, of course Kubectl is

143
00:09:19,578 --> 00:09:22,836
the winner, but in the

144
00:09:22,858 --> 00:09:26,276
majority of cases you don't. And if this

145
00:09:26,298 --> 00:09:29,716
is also the case for you, and you don't have a connection

146
00:09:29,748 --> 00:09:33,284
to your cluster, because you either don't want to have your developers

147
00:09:33,332 --> 00:09:36,544
to have a direct connection to the cluster, or you don't want your CI

148
00:09:36,612 --> 00:09:39,980
machines to have a connection into your production environments,

149
00:09:41,200 --> 00:09:44,904
it's not probably, but it's necessary that Cube

150
00:09:44,952 --> 00:09:48,670
Eval and Kubeconform are the winner if this is your use case.

151
00:09:50,160 --> 00:09:53,200
But which one is better, Kubeval or Kubeconform?

152
00:09:54,820 --> 00:09:57,970
So we talked about the version support use case.

153
00:09:59,060 --> 00:10:03,190
The thing is that Cube Eval, the last commit was in 2020.

154
00:10:03,800 --> 00:10:07,392
So that's saying that the latest version

155
00:10:07,456 --> 00:10:11,232
of Kubernetes version schema that it's supporting is 118

156
00:10:11,376 --> 00:10:15,044
one, which is pretty shame because

157
00:10:15,242 --> 00:10:18,824
Kubeconform is supporting up to version 122

158
00:10:18,862 --> 00:10:22,424
four, which is the latest right now. So you remember the use case

159
00:10:22,462 --> 00:10:26,168
that I described, that if you want to actually check your

160
00:10:26,254 --> 00:10:29,988
manifest before you upgrade your cluster. So Kubeconfol

161
00:10:30,004 --> 00:10:33,244
and Kube eval, you can pass this parameter and tell

162
00:10:33,282 --> 00:10:36,856
it locally to tell you if there are any API that are deprecated

163
00:10:36,968 --> 00:10:40,530
in the new version that you want to upgrade to. It's really really nice

164
00:10:41,700 --> 00:10:44,924
CRD support. Kubeval is not supporting

165
00:10:44,972 --> 00:10:48,416
crds. Actually this is

166
00:10:48,438 --> 00:10:51,904
exactly the reason. One, the maintainer of Kubeconform, it's a guy

167
00:10:51,942 --> 00:10:55,412
named can, he's a really cool guy,

168
00:10:55,546 --> 00:10:58,676
and this is the reason why he started this project, it's because it

169
00:10:58,698 --> 00:11:02,768
was missing this CRD support. And today crds

170
00:11:02,784 --> 00:11:06,036
are more and more popular. So it's pretty shame that Cube

171
00:11:06,068 --> 00:11:09,576
eval is not supporting that. Let's look at

172
00:11:09,598 --> 00:11:13,352
the community. So Cubaval have a really big community,

173
00:11:13,486 --> 00:11:16,600
more than 2000 styles, more than 200 folks.

174
00:11:17,740 --> 00:11:21,504
Again, the last commit was on April 26,

175
00:11:21,652 --> 00:11:25,164
which indicate that this project is not

176
00:11:25,202 --> 00:11:30,060
maintained that much with Kubeconform

177
00:11:30,640 --> 00:11:34,884
it only have 340 styles,

178
00:11:34,952 --> 00:11:38,272
which is a lot actually. But the good news

179
00:11:38,326 --> 00:11:41,616
that is still maintained by the container and by the

180
00:11:41,638 --> 00:11:45,396
community. Last commit was eight days ago. So in

181
00:11:45,418 --> 00:11:49,476
my opinion, yes, maybe Kubeval is more popular and more

182
00:11:49,498 --> 00:11:53,780
people are familiar with Kubeval, but I do think that Kubeconform

183
00:11:54,460 --> 00:11:57,210
still have a strong community to consider.

184
00:11:57,980 --> 00:12:01,512
So who is the winner in this case? Well you probably

185
00:12:01,566 --> 00:12:05,240
guessed it already, it's obviously kubeconfirm.

186
00:12:06,460 --> 00:12:10,076
Okay, so now that we understand the different tools that

187
00:12:10,098 --> 00:12:14,168
we have, let's think about different strategies to validate the Kubernetes schema.

188
00:12:14,344 --> 00:12:17,740
The first thing that you want to consider is shifting left.

189
00:12:17,810 --> 00:12:21,136
Like we said, you want to make sure that you can test it as soon

190
00:12:21,158 --> 00:12:24,268
as possible. So sometimes even the CI

191
00:12:24,364 --> 00:12:28,400
is too late in the flow. Try to think how you can implement those

192
00:12:28,470 --> 00:12:32,252
checks inside the developers

193
00:12:32,316 --> 00:12:36,150
environments. For example, it's a pre commit or GitHub or something like that.

194
00:12:37,400 --> 00:12:40,916
Don't forget to fill the gaps. What do I mean by that?

195
00:12:41,098 --> 00:12:44,532
So remember the extra validation that we talked about that

196
00:12:44,586 --> 00:12:48,680
are happening on the server side. Those validations also

197
00:12:48,750 --> 00:12:52,024
need to be checked when you are using it,

198
00:12:52,142 --> 00:12:55,272
the open source tools, because you don't want to find

199
00:12:55,326 --> 00:12:58,732
that you have misconfigurations when you want to apply it to your

200
00:12:58,786 --> 00:13:03,080
cluster. There's alternative

201
00:13:03,160 --> 00:13:06,716
that you can think to use, which is

202
00:13:06,818 --> 00:13:11,128
running a fake cluster locally

203
00:13:11,224 --> 00:13:14,944
or in your CI machines with kind or minikube or something

204
00:13:14,982 --> 00:13:18,880
like that. And then you can use the Kubectl

205
00:13:20,100 --> 00:13:24,600
Virans server mode because it will talk with the local cluster

206
00:13:24,780 --> 00:13:28,276
and this way you can still use this flag and you

207
00:13:28,298 --> 00:13:31,680
don't need to have a connection to your real environment. The downside

208
00:13:31,760 --> 00:13:35,316
of doing it like that is that you actually need

209
00:13:35,338 --> 00:13:38,804
to make sure that your fake cluster is synced

210
00:13:38,852 --> 00:13:42,552
with your real environment and it's actually replicating the same

211
00:13:42,606 --> 00:13:46,440
conditions. What do I mean? So it need to have the same namespaces,

212
00:13:46,940 --> 00:13:50,604
the same number of clusters and so on. Or what will happen

213
00:13:50,642 --> 00:13:54,012
is that when you try to apply the manifest it will get

214
00:13:54,066 --> 00:13:56,510
rejected by mini cube all kind.

215
00:13:58,160 --> 00:14:01,328
Also something to consider is by visas build. So there are a

216
00:14:01,334 --> 00:14:05,244
lot of open source tools to implement to overcome

217
00:14:05,372 --> 00:14:08,496
those challenges, but there's a lot of really good out

218
00:14:08,518 --> 00:14:12,716
of the shell solutions that you can just buy. Yes, the tree

219
00:14:12,748 --> 00:14:16,624
is also one of them, and in the tree

220
00:14:16,672 --> 00:14:20,196
we also perform the schema validation, but we're also helping you fill the

221
00:14:20,218 --> 00:14:22,996
gap with custom rules. So it's something that you can consider.

222
00:14:23,098 --> 00:14:26,496
There's no dark magic in what we are doing. You can do the same with

223
00:14:26,538 --> 00:14:30,472
different open source tools that you glue together, but think about

224
00:14:30,606 --> 00:14:34,424
if it's worth your time and effort to do that or just buy something out

225
00:14:34,462 --> 00:14:35,400
of the shelf.

226
00:14:38,220 --> 00:14:42,430
That's it. I hope you enjoyed the presentation. And now

227
00:14:42,880 --> 00:14:46,732
for me to reveal why I actually have those pink bunniers is because

228
00:14:46,786 --> 00:14:50,072
this is the name of the repository that inside this repository

229
00:14:50,136 --> 00:14:53,580
you're going to find this presentation. If you want to see this presentation,

230
00:14:53,660 --> 00:14:56,976
you want to see all the other resources that I talked about, you can find

231
00:14:56,998 --> 00:15:00,690
it all inside and probably

232
00:15:01,220 --> 00:15:03,744
if I will give it another name, you're going to forget it.

233
00:15:03,862 --> 00:15:07,404
But with the pink bunniers I hope that you think like I remember

234
00:15:07,462 --> 00:15:09,988
the bunny that told me that I need to do schema validation. What is the

235
00:15:09,994 --> 00:15:13,444
name of the repository? What is name? Oh yeah, it's pink bunniers and

236
00:15:13,482 --> 00:15:17,204
I already checked, this is the only repository all over

237
00:15:17,242 --> 00:15:20,776
GitHub that have this name. So I hope no one else

238
00:15:20,798 --> 00:15:23,992
is going to open it another repository in the same name.

239
00:15:24,046 --> 00:15:27,304
So you can just google it and you should also go to

240
00:15:27,422 --> 00:15:31,096
find this repository. And the last thing is that I also wrote a blog

241
00:15:31,128 --> 00:15:35,112
post about the same topic and everything that I discussed

242
00:15:35,176 --> 00:15:38,444
is also listed there so you can also check it out and we also

243
00:15:38,482 --> 00:15:42,316
put a link inside the repository. Thank you very much and I hope

244
00:15:42,338 --> 00:15:45,436
you enjoy it. Oh also by the way, if you have any questions you can

245
00:15:45,458 --> 00:15:48,940
open an issue inside this repository. I'm a watcher and I

246
00:15:49,090 --> 00:15:52,932
always reply if someone want to have more information about

247
00:15:53,066 --> 00:15:53,840
scheme of validation.

