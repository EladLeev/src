1
00:00:25,410 --> 00:00:29,080
You hi Conf 42,

2
00:00:29,770 --> 00:00:33,698
thanks for attending my talk. React is killing your performance

3
00:00:33,794 --> 00:00:37,574
and it's your fault. So a little bit

4
00:00:37,612 --> 00:00:40,886
about me I've been a

5
00:00:40,908 --> 00:00:44,534
developer professionally for the last ten years

6
00:00:44,652 --> 00:00:48,662
or so, and in

7
00:00:48,716 --> 00:00:51,870
the last year I've been a co founder of

8
00:00:51,940 --> 00:00:55,566
a company called Lifecycle IO, and we

9
00:00:55,668 --> 00:00:59,306
create live, ephemeral environments directly

10
00:00:59,338 --> 00:01:03,450
from code. So for every code change, every commit, in every branch,

11
00:01:03,610 --> 00:01:07,394
we create automatically a new environment. And the purpose of

12
00:01:07,432 --> 00:01:10,946
those environments is to allow stakeholders who

13
00:01:10,968 --> 00:01:14,594
are not developers, such as designers or

14
00:01:14,632 --> 00:01:18,534
product managers, to have a way to

15
00:01:18,572 --> 00:01:21,750
interact and experience with the product at a very early

16
00:01:21,820 --> 00:01:25,030
stage, before any deployment to any

17
00:01:25,100 --> 00:01:28,062
existing environment like staging or production.

18
00:01:28,226 --> 00:01:31,626
So those stakeholders will have a

19
00:01:31,648 --> 00:01:34,986
way to give feedback and experience the

20
00:01:35,008 --> 00:01:38,934
product at a very early stage like we as developers

21
00:01:38,982 --> 00:01:42,414
are used to, since we usually have a local

22
00:01:42,612 --> 00:01:45,934
environment running on our computer when we develop.

23
00:01:46,052 --> 00:01:50,410
So the same kind of experience just for other stakeholders.

24
00:01:50,570 --> 00:01:54,642
So please check us out at lifecycle IO and

25
00:01:54,696 --> 00:01:58,702
today we're going to talk about performance

26
00:01:58,766 --> 00:02:02,734
in reacts. So let's start by reminding

27
00:02:02,782 --> 00:02:05,490
ourselves why do we use react?

28
00:02:06,170 --> 00:02:09,746
And I just want to say that I'm

29
00:02:09,778 --> 00:02:13,794
going to address mostly examples

30
00:02:13,842 --> 00:02:17,074
of browser like the DOM,

31
00:02:17,122 --> 00:02:21,062
the document object model. But the same principles

32
00:02:21,126 --> 00:02:25,290
can be applied into every implementation of reacts like React native.

33
00:02:26,350 --> 00:02:30,606
So react is used to

34
00:02:30,708 --> 00:02:34,250
basically write complex web applications in a declarative

35
00:02:34,330 --> 00:02:38,958
way, right? So instead of having

36
00:02:39,044 --> 00:02:42,670
explicitly and imperatively

37
00:02:43,590 --> 00:02:47,666
use the DOM as an APIs and

38
00:02:47,848 --> 00:02:51,540
give comments to it, we can describe in a declarative way

39
00:02:53,110 --> 00:02:57,042
complex UI elements. For example, this element

40
00:02:57,106 --> 00:03:00,854
here is changing every time

41
00:03:00,892 --> 00:03:05,366
I click the button. So in

42
00:03:05,388 --> 00:03:08,598
order to do that in regular

43
00:03:08,694 --> 00:03:11,420
JavaScript, this is actually typescript here,

44
00:03:12,830 --> 00:03:18,090
we need to very explicitly,

45
00:03:18,990 --> 00:03:21,280
in an imperative way,

46
00:03:22,370 --> 00:03:26,430
call the DOM API like document create element

47
00:03:27,970 --> 00:03:30,560
and tell it what to do.

48
00:03:31,010 --> 00:03:34,558
And instead of that we can use react

49
00:03:34,654 --> 00:03:39,262
in a declarative way, and by declarative meaning

50
00:03:39,326 --> 00:03:43,250
that we described the outcome we want to use.

51
00:03:43,320 --> 00:03:47,734
So we actually use JSX and

52
00:03:47,772 --> 00:03:52,166
those tags here and

53
00:03:52,268 --> 00:03:54,950
use react state management solution,

54
00:03:55,530 --> 00:03:59,042
and we change this element according to the state,

55
00:03:59,116 --> 00:04:03,114
which is changed by the button click.

56
00:04:03,312 --> 00:04:06,874
So this is a very nice way of writing code, and we all love

57
00:04:06,912 --> 00:04:10,410
it. So that's why react is very, very popular.

58
00:04:12,370 --> 00:04:16,462
And unfortunately that

59
00:04:16,516 --> 00:04:20,094
comes with a price, because to enjoy

60
00:04:20,292 --> 00:04:23,570
this declarative way of programming,

61
00:04:24,070 --> 00:04:29,634
reacts has to do some work behind the scene at

62
00:04:29,672 --> 00:04:33,442
runtime. What react does it make sure

63
00:04:33,496 --> 00:04:36,886
that what we described in

64
00:04:36,908 --> 00:04:40,662
a declarative way, meaning what we

65
00:04:40,716 --> 00:04:45,160
told him the outcome should be, it makes sure it actually happens.

66
00:04:45,690 --> 00:04:48,970
And to do that, it comparison between

67
00:04:49,120 --> 00:04:52,922
the given state of the Dom and the

68
00:04:52,976 --> 00:04:54,940
description we provided it.

69
00:04:55,710 --> 00:04:59,402
So the actual comparison runs at

70
00:04:59,456 --> 00:05:02,750
runtime. So it has an overhead.

71
00:05:03,170 --> 00:05:06,814
And let's have

72
00:05:06,852 --> 00:05:10,234
a very quick and very simplified overview

73
00:05:10,282 --> 00:05:15,170
of that algorithm that runs every time the

74
00:05:15,320 --> 00:05:18,706
app gets updated. Just so

75
00:05:18,728 --> 00:05:22,274
we have a sense of what it's doing. But the important thing

76
00:05:22,392 --> 00:05:26,130
to take from it is that it doesn't

77
00:05:26,210 --> 00:05:27,800
come free, right?

78
00:05:31,050 --> 00:05:34,486
It's doing some work. And even if this work is very

79
00:05:34,588 --> 00:05:38,220
efficient and it's written in the best way possible,

80
00:05:39,470 --> 00:05:42,682
it exists, right? So it can

81
00:05:42,736 --> 00:05:46,314
sometimes hurt us

82
00:05:46,352 --> 00:05:48,940
if we don't know how it works.

83
00:05:49,630 --> 00:05:53,134
So this is a representation of the

84
00:05:53,172 --> 00:05:57,434
tree. So a react application is basically a tree of elements,

85
00:05:57,562 --> 00:06:00,766
right? So every element can has its children,

86
00:06:00,948 --> 00:06:03,890
and each of those children can have their children.

87
00:06:04,040 --> 00:06:07,790
So basically it's a tree data structure.

88
00:06:07,950 --> 00:06:11,474
Every element has a parent. So this

89
00:06:11,512 --> 00:06:15,090
here is the drawing of the current react

90
00:06:16,650 --> 00:06:20,230
tree, right? So this can be like the app

91
00:06:20,300 --> 00:06:24,258
component, and maybe here is a left pane

92
00:06:24,434 --> 00:06:27,800
and this is the right pane, those are buttons or something.

93
00:06:28,110 --> 00:06:31,500
Every react application can be described in that way.

94
00:06:31,870 --> 00:06:35,514
So let's say an update happened. So when

95
00:06:35,552 --> 00:06:39,034
we say an update happened in a react application, we mean

96
00:06:39,072 --> 00:06:43,226
that either one of the components

97
00:06:43,418 --> 00:06:46,830
prop has changed or its internal state

98
00:06:46,900 --> 00:06:50,554
has changed. So that triggers a render

99
00:06:50,682 --> 00:06:54,514
and that render function goes across and creates a new

100
00:06:54,552 --> 00:06:57,986
tree. And this is

101
00:06:58,008 --> 00:07:02,354
our new tree. And we can see that the new tree does

102
00:07:02,392 --> 00:07:06,070
not have that c element here, and that element value

103
00:07:06,140 --> 00:07:10,230
has changed, right? So react what it does, it takes the

104
00:07:10,300 --> 00:07:13,654
previous tree and this current tree and it computes the

105
00:07:13,692 --> 00:07:17,454
difference, the diff, right? So the magic

106
00:07:17,522 --> 00:07:21,290
is that it only takes the diff and then

107
00:07:21,440 --> 00:07:25,174
from it it creates the necessary DOM

108
00:07:25,222 --> 00:07:28,490
updates, as we saw in the explicit

109
00:07:29,230 --> 00:07:32,942
code example. Right? So it

110
00:07:32,996 --> 00:07:38,410
produces only the necessary DOM

111
00:07:38,570 --> 00:07:41,870
API calls. So this is great,

112
00:07:42,020 --> 00:07:46,130
but it actually needs to run

113
00:07:46,200 --> 00:07:50,340
that tree comparison algorithm every time something changes.

114
00:07:51,350 --> 00:07:55,070
And as we said, it creates an overhead and it's better to

115
00:07:55,240 --> 00:07:56,760
avoid it if we can.

116
00:07:58,970 --> 00:08:02,642
So we don't have performance

117
00:08:02,706 --> 00:08:06,454
issues, right? So let's talk

118
00:08:06,492 --> 00:08:08,150
about applications,

119
00:08:09,310 --> 00:08:13,260
and let's start by saying that

120
00:08:14,030 --> 00:08:17,318
I things that generally only optimize

121
00:08:17,414 --> 00:08:21,022
when you need to. So I

122
00:08:21,076 --> 00:08:24,382
think that programmers that are using

123
00:08:24,436 --> 00:08:28,442
React should basically know what's going on behind the scene, but we shouldn't

124
00:08:28,506 --> 00:08:32,062
really optimize every single

125
00:08:32,116 --> 00:08:33,540
thing ahead of time.

126
00:08:35,270 --> 00:08:39,122
The better approach is to maybe keep in mind that

127
00:08:39,176 --> 00:08:42,740
those stuff happens, but only optimize it when they cause a problem.

128
00:08:43,190 --> 00:08:46,660
Because sometimes optimizing stuff

129
00:08:47,110 --> 00:08:51,574
can actually hurt you. It can create bugs and can create a

130
00:08:51,612 --> 00:08:55,302
complex code and it can, even if they are not done

131
00:08:55,356 --> 00:08:58,970
right, decrease the performance,

132
00:09:00,750 --> 00:09:04,140
which is not good. Obviously it's the opposite of what we want.

133
00:09:04,670 --> 00:09:08,220
And also another thing is that

134
00:09:09,230 --> 00:09:12,158
when trying to optimize a front end application,

135
00:09:12,324 --> 00:09:15,998
whether it's in the dom or mobile app

136
00:09:16,084 --> 00:09:19,338
or any other things, usually the most expensive

137
00:09:19,434 --> 00:09:23,658
stuff in terms of what I experienced

138
00:09:23,754 --> 00:09:26,994
is stuff that having to do with DOm changes.

139
00:09:27,112 --> 00:09:30,494
So it's not like react's fault,

140
00:09:30,542 --> 00:09:34,642
it's some other things

141
00:09:34,696 --> 00:09:38,390
that we do that causes the performance degradation.

142
00:09:39,690 --> 00:09:43,782
So we might want to make sure that we

143
00:09:43,836 --> 00:09:46,966
eliminated the other causes of

144
00:09:46,988 --> 00:09:50,650
the performance degradation before we start optimizing reacts.

145
00:09:51,550 --> 00:09:55,894
And another tip

146
00:09:55,942 --> 00:09:59,514
here is using the devtools to

147
00:09:59,552 --> 00:10:02,830
investigate. So react has a very good extension,

148
00:10:03,170 --> 00:10:06,474
reacts devtools, which you can add to your browser

149
00:10:06,602 --> 00:10:10,366
and use that to investigate. And we'll see an example for

150
00:10:10,388 --> 00:10:12,800
it later on.

151
00:10:13,750 --> 00:10:18,994
So first thing we

152
00:10:19,032 --> 00:10:23,220
might want to check when we come across

153
00:10:24,150 --> 00:10:28,002
a poorly performant component is checking

154
00:10:28,066 --> 00:10:32,822
whether we're running it in dev mode. When we run

155
00:10:32,876 --> 00:10:36,614
react apps, we usually do it in

156
00:10:36,652 --> 00:10:41,174
development time using a local development

157
00:10:41,222 --> 00:10:44,326
server. And that development server,

158
00:10:44,438 --> 00:10:48,838
it actually does a lot of stuff behind the scene,

159
00:10:49,014 --> 00:10:52,702
like for example to provide us warnings and

160
00:10:52,756 --> 00:10:56,080
so on. And that stuff has

161
00:10:57,810 --> 00:11:00,350
performance impact.

162
00:11:00,770 --> 00:11:04,746
So when we build the application with a production

163
00:11:04,778 --> 00:11:08,434
flag, it's way more performant. So this is an example here. I created this

164
00:11:08,472 --> 00:11:11,922
application, this component, and what it does,

165
00:11:11,976 --> 00:11:16,926
it only creates some random

166
00:11:17,038 --> 00:11:20,226
circles with the random colors and random position on

167
00:11:20,248 --> 00:11:25,526
the screen. And it does that every frame. So I

168
00:11:25,548 --> 00:11:29,402
don't know if you can see it, but it's not running very smoothly. It's not

169
00:11:29,456 --> 00:11:33,194
60 FPS. So we can actually check how

170
00:11:33,232 --> 00:11:36,986
smooth it actually is by going over here to

171
00:11:37,008 --> 00:11:40,350
the devtools. And I click control

172
00:11:40,420 --> 00:11:43,322
P and then FPS.

173
00:11:43,466 --> 00:11:46,654
And I have an FPS meter. So yeah, it's not even

174
00:11:46,692 --> 00:11:50,080
close to 60, it's 11.4, right.

175
00:11:50,450 --> 00:11:54,530
And actually this is entire presentation, it runs

176
00:11:55,990 --> 00:11:59,346
in a dev server, right? So this is

177
00:11:59,368 --> 00:12:03,010
a development server using

178
00:12:03,160 --> 00:12:06,166
webpack, using create react app.

179
00:12:06,348 --> 00:12:10,310
So also I build things app

180
00:12:10,380 --> 00:12:14,182
ahead of time and serve it using just

181
00:12:14,236 --> 00:12:17,366
a very simple HTTP server. So if I

182
00:12:17,388 --> 00:12:20,962
go to this exact URL,

183
00:12:21,026 --> 00:12:25,234
but in the port of, I think it was 80

184
00:12:25,282 --> 00:12:28,918
80, I get the same thing,

185
00:12:29,004 --> 00:12:32,798
but built for production. So I can already

186
00:12:32,884 --> 00:12:36,126
see that it's way faster. But let's be

187
00:12:36,148 --> 00:12:39,550
scientific about it. And we can see it's like

188
00:12:39,620 --> 00:12:41,280
almost twice as fast,

189
00:12:45,190 --> 00:12:48,686
maybe not twice, but sometimes it's close to twice,

190
00:12:48,718 --> 00:12:52,580
maybe 50%, but between 50 and 100% more

191
00:12:53,670 --> 00:12:55,960
frames per second, which is a lot.

192
00:12:57,290 --> 00:12:59,670
And it's actually very noticeable,

193
00:13:00,890 --> 00:13:04,902
at least in my screen. So first

194
00:13:04,956 --> 00:13:09,142
thing I recommend doing, because I always forget

195
00:13:09,206 --> 00:13:12,442
that, is checking whether you're running

196
00:13:12,496 --> 00:13:13,770
in dev mode.

197
00:13:17,150 --> 00:13:20,350
Another thing which is a very

198
00:13:20,420 --> 00:13:24,474
common way of optimizing things in react, is using react

199
00:13:24,522 --> 00:13:25,310
memo.

200
00:13:27,890 --> 00:13:31,920
1. Second, let me get back to the

201
00:13:33,650 --> 00:13:36,900
slide I've been at. Right,

202
00:13:38,390 --> 00:13:42,162
so react memo is

203
00:13:42,216 --> 00:13:46,214
a way to tell react not

204
00:13:46,252 --> 00:13:49,720
to under stuff. And how does that work?

205
00:13:50,970 --> 00:13:53,190
If a component is pure,

206
00:13:53,850 --> 00:13:58,090
and by a pure component, we mean that given

207
00:13:58,160 --> 00:14:01,946
the same state and props, it will produce the

208
00:14:01,968 --> 00:14:05,850
exact same thing. So given

209
00:14:05,920 --> 00:14:10,206
that what

210
00:14:10,228 --> 00:14:14,154
react does, if we encapsulate

211
00:14:14,202 --> 00:14:17,582
that component using a thing called

212
00:14:17,636 --> 00:14:21,520
react memo, which reacts is giving us,

213
00:14:21,970 --> 00:14:23,890
we can avoid renders.

214
00:14:25,990 --> 00:14:29,426
Because what it does

215
00:14:29,528 --> 00:14:33,858
is every time it gets rendered, it compares the

216
00:14:33,944 --> 00:14:38,402
props currently and the previous props.

217
00:14:38,546 --> 00:14:41,590
And if those has not been changed,

218
00:14:41,930 --> 00:14:45,382
then it just doesn't trigger a render. Because since

219
00:14:45,436 --> 00:14:49,194
it's a pure component, we know that only when the

220
00:14:49,232 --> 00:14:54,086
props has changed, then it should be rerendered.

221
00:14:54,278 --> 00:14:58,218
So if it's not

222
00:14:58,304 --> 00:15:02,062
encapsulated using reacts memo, it will rerender it,

223
00:15:02,116 --> 00:15:06,094
even though props are maybe the

224
00:15:06,132 --> 00:15:06,720
same.

225
00:15:09,410 --> 00:15:13,300
So this is an example here. This is a component that

226
00:15:13,750 --> 00:15:17,298
it can be dragged, right? I can drag it with my

227
00:15:17,384 --> 00:15:21,570
mouse and it's very slow.

228
00:15:22,150 --> 00:15:25,462
And let's see why. If I go back

229
00:15:25,516 --> 00:15:29,366
to the code here, this is

230
00:15:29,388 --> 00:15:33,894
the component. And we

231
00:15:33,932 --> 00:15:37,774
see that we have this wrapper component,

232
00:15:37,842 --> 00:15:41,222
this div here, which is the things that's being dragged.

233
00:15:41,366 --> 00:15:44,730
And inside there's things. Long triggering component

234
00:15:45,070 --> 00:15:48,842
with the text. And the slow rendering, as its name

235
00:15:48,896 --> 00:15:51,310
suggests, is very slow.

236
00:15:52,290 --> 00:15:55,374
I just did an artificial way of

237
00:15:55,412 --> 00:15:59,454
making it slow just by doing nothing for a certain amount of

238
00:15:59,492 --> 00:16:03,038
time. But it's just for the sake of demonstration.

239
00:16:03,134 --> 00:16:06,610
Imagine that you're like computing something or

240
00:16:06,680 --> 00:16:12,130
getting stuff on the network or doing I o stuff during

241
00:16:12,280 --> 00:16:13,700
the render function.

242
00:16:15,450 --> 00:16:18,726
But the thing is that this component is

243
00:16:18,748 --> 00:16:21,960
actually pure, right? Because this

244
00:16:23,530 --> 00:16:27,666
output only changes by this prop, the change

245
00:16:27,788 --> 00:16:31,674
the text prop. So it

246
00:16:31,712 --> 00:16:35,014
only changes if the prop, the text prop

247
00:16:35,062 --> 00:16:38,886
is changed. So we can actually use reacts memo.

248
00:16:38,998 --> 00:16:42,270
So let's do it over here. React memo.

249
00:16:42,610 --> 00:16:46,302
And then parentheses save

250
00:16:46,356 --> 00:16:49,882
it. Hopefully it broke

251
00:16:50,026 --> 00:16:53,886
refresh, right? So as

252
00:16:53,908 --> 00:16:57,562
you can see, it's very smooth. Very smooth.

253
00:16:57,626 --> 00:17:00,750
We can actually check that again using the FPS. Better.

254
00:17:01,490 --> 00:17:03,040
Let's do it real quick.

255
00:17:04,690 --> 00:17:13,058
And it refreshed.

256
00:17:13,154 --> 00:17:14,600
Now what? Never mind.

257
00:17:18,170 --> 00:17:22,022
But we can just see it in the presentation.

258
00:17:22,086 --> 00:17:25,638
If I drag it right now, it's very smooth. If I take out the react

259
00:17:25,734 --> 00:17:29,494
memo, it should be. Let's update,

260
00:17:29,622 --> 00:17:34,830
let's refresh. It should be. Yeah, it's way slower because

261
00:17:34,900 --> 00:17:39,054
again, react memo compares this

262
00:17:39,172 --> 00:17:43,102
text. And since we

263
00:17:43,156 --> 00:17:47,982
update the wrapper every time we drag, which is basically 60

264
00:17:48,036 --> 00:17:51,986
times per seconds, every time I drag my mouth around the

265
00:17:52,008 --> 00:17:55,300
screen, it updates this one because it's a child.

266
00:17:56,250 --> 00:18:02,226
But this prop never changes. So it's

267
00:18:02,258 --> 00:18:05,880
a waste to rerender this entire thing.

268
00:18:06,890 --> 00:18:09,420
Great, so let's move on.

269
00:18:11,870 --> 00:18:15,530
Another thing we can do is not mutating

270
00:18:15,870 --> 00:18:21,134
prop values. So the

271
00:18:21,172 --> 00:18:24,830
comparison done by react memo is shallow,

272
00:18:25,330 --> 00:18:31,774
meaning that it

273
00:18:31,812 --> 00:18:35,410
compares object by reference, right? So if you have

274
00:18:35,480 --> 00:18:38,914
a prop called o, which is an

275
00:18:38,952 --> 00:18:42,654
object, it compares its reference, it doesn't compare its internal

276
00:18:42,702 --> 00:18:46,614
values. So if

277
00:18:46,652 --> 00:18:49,350
you mutate internal values,

278
00:18:50,010 --> 00:18:54,006
it wouldn't help you. Using react memo, it will actually cause

279
00:18:54,188 --> 00:18:56,070
bugs in your uI.

280
00:18:57,390 --> 00:19:00,662
So if you're using react

281
00:19:00,726 --> 00:19:04,826
memo, you should not change

282
00:19:05,008 --> 00:19:08,700
the internal values. So this is an example here.

283
00:19:09,630 --> 00:19:13,134
So size is actually an object, right? It has

284
00:19:13,332 --> 00:19:21,470
the height and width values.

285
00:19:22,610 --> 00:19:24,640
And in this case,

286
00:19:26,130 --> 00:19:29,310
since I wrapped it in rec memo, it will actually cause a bug

287
00:19:29,390 --> 00:19:33,586
because it doesn't compare the

288
00:19:33,608 --> 00:19:37,560
internal values of the size, only the reference of it.

289
00:19:38,330 --> 00:19:40,360
So in order to fix that,

290
00:19:43,610 --> 00:19:46,882
we create a new object. Every time we change the props,

291
00:19:47,026 --> 00:19:50,314
we use the spread operator, we create a new object. And now when

292
00:19:50,352 --> 00:19:53,754
it compares the prop, it compares it by

293
00:19:53,792 --> 00:19:57,498
reference. Since it's a new object, it will

294
00:19:57,664 --> 00:20:00,910
trigger a rerender and will fix the bug.

295
00:20:04,530 --> 00:20:08,318
So react memo is great and it helps in a

296
00:20:08,324 --> 00:20:12,080
lot of cases, but it's not always the best thing to do.

297
00:20:12,950 --> 00:20:19,138
We can sometimes do better than that because

298
00:20:19,304 --> 00:20:22,580
in some cases prop are always

299
00:20:24,890 --> 00:20:28,790
different. There are components

300
00:20:29,130 --> 00:20:32,120
like components that uses children, for example,

301
00:20:32,570 --> 00:20:36,774
that don't matter what you do, the children will

302
00:20:36,812 --> 00:20:40,586
always under because the

303
00:20:40,608 --> 00:20:44,202
children are being created every

304
00:20:44,256 --> 00:20:46,570
time by react as a new element.

305
00:20:47,390 --> 00:20:49,100
And in that case,

306
00:20:51,890 --> 00:20:56,510
the comparison function will always fail, which actually will

307
00:20:56,660 --> 00:21:00,186
damage the performance a little bit because it adds

308
00:21:00,218 --> 00:21:03,070
an extra layer of checking the props.

309
00:21:03,910 --> 00:21:07,042
You can avoid that in that case by making sure

310
00:21:07,096 --> 00:21:10,434
that this component is

311
00:21:10,472 --> 00:21:15,206
memoized. You can use memo if

312
00:21:15,228 --> 00:21:18,438
you want, but if you're doing it like that, then keep in

313
00:21:18,444 --> 00:21:21,714
mind that children are always new objects.

314
00:21:21,762 --> 00:21:25,074
So using react

315
00:21:25,122 --> 00:21:28,040
memo wouldn't actually help in this case.

316
00:21:29,390 --> 00:21:30,460
For example,

317
00:21:34,830 --> 00:21:38,314
this component here, whenever I

318
00:21:38,352 --> 00:21:42,000
click the button, it set this discount, right?

319
00:21:46,210 --> 00:21:47,470
And discount.

320
00:21:50,450 --> 00:21:54,118
This is a component that accept

321
00:21:54,154 --> 00:21:57,634
children, right? So if I click

322
00:21:57,672 --> 00:22:00,786
this button, I see that it renders every time,

323
00:22:00,888 --> 00:22:04,450
even though I wrap the entire thing in your act memo.

324
00:22:06,730 --> 00:22:09,926
So a better thing that we

325
00:22:09,948 --> 00:22:18,438
can do sometimes is wrapping decoupling

326
00:22:18,454 --> 00:22:20,730
from children instead of using memo.

327
00:22:21,790 --> 00:22:25,866
So finding which component needs to

328
00:22:25,888 --> 00:22:29,606
be memoized and wrap it with react memo. It can be annoying.

329
00:22:29,638 --> 00:22:32,814
Sometimes you need to add

330
00:22:32,852 --> 00:22:36,286
a little bit of boilerplate and you need to mess with it.

331
00:22:36,308 --> 00:22:42,474
And sometimes the flow of the code is

332
00:22:42,532 --> 00:22:46,514
not right. Instead of that

333
00:22:46,632 --> 00:22:51,522
we can actually decouple the

334
00:22:51,576 --> 00:22:55,318
child from its parents. So in this case,

335
00:22:55,404 --> 00:22:56,600
let's see an example.

336
00:22:58,970 --> 00:23:02,594
This is the draggable component

337
00:23:02,642 --> 00:23:08,140
we saw before. We can use

338
00:23:09,630 --> 00:23:13,900
the children property over here

339
00:23:16,750 --> 00:23:20,798
and instead

340
00:23:20,884 --> 00:23:24,734
of doing it

341
00:23:24,772 --> 00:23:30,094
inside, because this slow component is

342
00:23:30,132 --> 00:23:34,062
not directly coupled to this draggable, this can be a generic

343
00:23:34,126 --> 00:23:38,834
draggable component. We can use it for every

344
00:23:38,872 --> 00:23:42,466
kind of draggable thing we want. We can actually plug in

345
00:23:42,488 --> 00:23:45,910
here every kind of component we would like.

346
00:23:45,980 --> 00:23:49,666
So you shouldn't limit it only to the slow rendering component,

347
00:23:49,858 --> 00:23:52,280
right. So it will also,

348
00:23:53,130 --> 00:23:56,920
by generalizing it will solve the performance issue

349
00:23:57,370 --> 00:24:01,474
since this wouldn't

350
00:24:01,522 --> 00:24:06,566
trigger a rerender for the slow triggering surrendering

351
00:24:06,598 --> 00:24:12,046
component every time we run it, because the

352
00:24:12,068 --> 00:24:15,120
children is passed to it as a prop, right.

353
00:24:15,970 --> 00:24:21,280
So for example, I can create const

354
00:24:22,470 --> 00:24:29,170
slow rendering draggable

355
00:24:31,990 --> 00:24:35,746
and we can take the

356
00:24:35,768 --> 00:24:39,542
draggable here and as a child

357
00:24:39,676 --> 00:24:43,030
we can provide it with a slow running component.

358
00:24:43,850 --> 00:24:47,682
This will solve the

359
00:24:47,756 --> 00:24:49,020
performant issue.

360
00:24:52,750 --> 00:24:56,070
The reason that I think it's not compiling

361
00:24:56,230 --> 00:25:00,114
is because it's a forward ref component,

362
00:25:00,262 --> 00:25:03,774
but it doesn't matter, I need to provide it with the ref. Right,

363
00:25:03,812 --> 00:25:07,760
like this. But the concept is the same.

364
00:25:08,370 --> 00:25:13,314
We just decouple this

365
00:25:13,352 --> 00:25:16,420
component from its inner child.

366
00:25:17,190 --> 00:25:20,974
So whenever this is being rerendered

367
00:25:21,022 --> 00:25:22,740
it doesn't affect this one.

368
00:25:26,250 --> 00:25:29,720
Another thing we should keep in mind is

369
00:25:30,170 --> 00:25:33,240
we should avoid passing state around.

370
00:25:34,250 --> 00:25:37,978
So let's see an example

371
00:25:38,064 --> 00:25:43,900
here. This is a component that changes.

372
00:25:46,190 --> 00:25:49,980
Actually I think this is.

373
00:25:51,490 --> 00:25:52,240
Yeah,

374
00:25:55,090 --> 00:25:57,440
slow rendering. Yeah,

375
00:25:59,250 --> 00:26:03,714
I want to unoptimize it for a second so we can see

376
00:26:03,752 --> 00:26:06,766
that things example should be slower.

377
00:26:06,958 --> 00:26:11,330
Right, let's go back to that slide.

378
00:26:14,310 --> 00:26:18,120
Here we go. So when I click this button,

379
00:26:22,170 --> 00:26:26,390
it renders this drag me component

380
00:26:27,630 --> 00:26:31,370
because of the way I programming this component.

381
00:26:32,030 --> 00:26:34,460
So let's see how it works.

382
00:26:38,430 --> 00:26:39,820
Yeah, here we go.

383
00:26:42,290 --> 00:26:45,210
It's actually already optimized,

384
00:26:45,370 --> 00:26:48,590
so let me stop for a second. The recording.

385
00:26:50,610 --> 00:26:54,094
So another example here is avoiding

386
00:26:54,222 --> 00:26:58,420
passing state around. So the idea is that

387
00:27:00,310 --> 00:27:05,054
if component is

388
00:27:05,192 --> 00:27:08,674
not actually using a state that is being provided

389
00:27:08,722 --> 00:27:10,070
by a parent component,

390
00:27:11,770 --> 00:27:15,126
we should avoid passing it around since

391
00:27:15,308 --> 00:27:19,450
each change of the state triggers a new render.

392
00:27:20,430 --> 00:27:23,866
So let me demonstrate what I mean in

393
00:27:23,888 --> 00:27:27,594
this case. There is a button here

394
00:27:27,632 --> 00:27:32,346
that changes color. It changes this text color

395
00:27:32,528 --> 00:27:36,442
randomly every time I press the button. And we can see it's very slow.

396
00:27:36,586 --> 00:27:40,542
And the reason it's slow is because I plugged in this component, which is,

397
00:27:40,596 --> 00:27:44,478
as you can recall, is a very slow rendered component.

398
00:27:44,574 --> 00:27:48,082
So pressing that button takes

399
00:27:48,136 --> 00:27:51,278
a long time until things is getting updated. So let's

400
00:27:51,294 --> 00:27:54,020
see what's going on in this code.

401
00:27:55,450 --> 00:27:59,494
Every time I click the button, it sets the color to

402
00:27:59,532 --> 00:28:03,286
some random values. And this is the state of

403
00:28:03,308 --> 00:28:07,910
the color, right? And this component

404
00:28:09,710 --> 00:28:13,850
is a child component of this entire thing.

405
00:28:14,000 --> 00:28:16,806
So every time this state is being changed,

406
00:28:16,918 --> 00:28:20,006
this entire thing is being rerendered, including the

407
00:28:20,048 --> 00:28:22,640
slow rendering. But in fact,

408
00:28:23,410 --> 00:28:27,146
the slow triggering component shouldn't be affected

409
00:28:27,258 --> 00:28:30,766
by all of this, because they

410
00:28:30,788 --> 00:28:34,306
don't have any connection between them. We can decouple those, we can do like

411
00:28:34,328 --> 00:28:38,290
this const, let's say random

412
00:28:39,110 --> 00:28:39,860
color,

413
00:28:45,450 --> 00:28:50,914
and then we can take this wrap

414
00:28:50,962 --> 00:28:53,510
it around, react fragment,

415
00:28:56,010 --> 00:28:57,160
use the state,

416
00:29:01,630 --> 00:29:05,114
right, and put it over

417
00:29:05,152 --> 00:29:05,740
here.

418
00:29:11,840 --> 00:29:13,870
Yeah, I forgot to return something.

419
00:29:14,580 --> 00:29:15,330
Return.

420
00:29:17,780 --> 00:29:21,152
And now we should

421
00:29:21,206 --> 00:29:23,570
see, if I go back,

422
00:29:25,140 --> 00:29:28,532
we should see that exact same

423
00:29:28,666 --> 00:29:32,630
component is being rendered very fast,

424
00:29:33,000 --> 00:29:36,310
because now whenever I change the state,

425
00:29:38,440 --> 00:29:41,800
it's only using the rendering color component,

426
00:29:42,460 --> 00:29:46,088
and the slow rendering is not being affected by the changes

427
00:29:46,174 --> 00:29:47,210
of the state.

428
00:29:51,180 --> 00:29:52,840
So in summary,

429
00:29:55,100 --> 00:29:58,780
react is an overhead when it's

430
00:29:59,440 --> 00:30:03,096
providing us with that declarative nice way of programming.

431
00:30:03,208 --> 00:30:06,944
It does that by running an

432
00:30:06,982 --> 00:30:10,812
algorithm at runtime, and that algorithm has some performance

433
00:30:10,876 --> 00:30:14,704
impact. Optimize only when

434
00:30:14,742 --> 00:30:18,292
needed, because most of the times

435
00:30:18,426 --> 00:30:20,180
those optimizations,

436
00:30:23,480 --> 00:30:26,596
they don't matter unless they do.

437
00:30:26,778 --> 00:30:30,552
Unless you actually have something that is not working

438
00:30:30,606 --> 00:30:32,010
properly in your application.

439
00:30:33,740 --> 00:30:37,540
Don't forget to use the production build before you start to optimize.

440
00:30:37,700 --> 00:30:41,784
Use react, memo, decouple the children from

441
00:30:41,822 --> 00:30:45,704
the wrapper, and keep the state as low

442
00:30:45,742 --> 00:30:49,876
as possible as we did in the last example. And that's

443
00:30:49,908 --> 00:30:51,880
it. Thank you for listening,

444
00:30:52,940 --> 00:30:56,464
and have a great rest of the

445
00:30:56,502 --> 00:30:56,780
conference.

