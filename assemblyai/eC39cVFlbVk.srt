1
00:00:27,250 --> 00:00:30,550
Hi, I am Sentul from Ericsson.

2
00:00:31,050 --> 00:00:34,866
Today my talk is going to be about patterns

3
00:00:34,978 --> 00:00:37,670
for encrypting data at rest.

4
00:00:37,820 --> 00:00:40,470
In cloud native applications,

5
00:00:41,050 --> 00:00:44,742
data at rest actually refers to data that

6
00:00:44,796 --> 00:00:47,910
resides in some sort of a storage.

7
00:00:48,730 --> 00:00:52,618
And nowadays several

8
00:00:52,714 --> 00:00:56,270
applications make use of a huge amount

9
00:00:56,340 --> 00:01:01,066
of data. For instance, machine learning applications.

10
00:01:01,258 --> 00:01:05,220
These applications have to process a huge amount of data

11
00:01:05,750 --> 00:01:09,362
and it is very vital from a security

12
00:01:09,496 --> 00:01:13,186
standpoint to encrypting the data

13
00:01:13,288 --> 00:01:18,130
at rest. And this is more or less a primary requirement

14
00:01:18,290 --> 00:01:21,720
for many organizations that handle data.

15
00:01:22,490 --> 00:01:26,358
So in these talk, I'm going to talk about

16
00:01:26,524 --> 00:01:29,420
what cloud native applications are,

17
00:01:29,870 --> 00:01:33,354
how to look at data encrypting data rest

18
00:01:33,472 --> 00:01:36,522
using a layered approach, and I will also be

19
00:01:36,576 --> 00:01:40,386
talking about patterns for encrypting

20
00:01:40,438 --> 00:01:44,160
data at rest. So let's get started.

21
00:01:45,570 --> 00:01:49,406
A brief introduction about me I

22
00:01:49,428 --> 00:01:52,782
work in Ericsson and my primary job

23
00:01:52,916 --> 00:01:57,322
is to architect and develop cloud native

24
00:01:57,466 --> 00:02:01,806
AI ML platforms. And by the way, these are platforms

25
00:02:01,838 --> 00:02:05,746
that are used for running different types of machine

26
00:02:05,778 --> 00:02:09,750
learning models in a highly distributed fashion

27
00:02:10,170 --> 00:02:12,150
and with massive scale.

28
00:02:13,370 --> 00:02:17,250
And many of the machine learning

29
00:02:17,420 --> 00:02:21,274
applications rely on huge amount of data. And this

30
00:02:21,312 --> 00:02:24,682
data can be in batch format or

31
00:02:24,736 --> 00:02:28,150
it could be in real time streaming format.

32
00:02:28,310 --> 00:02:31,918
So whatever it is, when data is

33
00:02:32,004 --> 00:02:34,960
processed by any cloud native application,

34
00:02:35,650 --> 00:02:39,226
it needs to be stored in some sort of a storage.

35
00:02:39,418 --> 00:02:42,654
And when data is stored, data needs

36
00:02:42,692 --> 00:02:46,420
to be encrypted in order to protect these sensitive information.

37
00:02:47,110 --> 00:02:49,700
So that is what I'm going to talk about today.

38
00:02:50,470 --> 00:02:53,998
And by the way, I am also the organizer

39
00:02:54,094 --> 00:02:57,434
for Kubernetes Community Days Chennai

40
00:02:57,502 --> 00:03:01,558
2022 that is coming up sometime next year

41
00:03:01,724 --> 00:03:06,114
and we are gearing up to hosting the very first event of KCD,

42
00:03:06,162 --> 00:03:09,734
Chennai 2022. I am maintainer

43
00:03:09,782 --> 00:03:13,754
of an open source project called as Cube Fledged which is

44
00:03:13,792 --> 00:03:17,478
all about caching container images

45
00:03:17,654 --> 00:03:20,770
directly on the Kubernetes worker nodes.

46
00:03:20,950 --> 00:03:24,874
I am a tech blogger and I am fairly active in Twitter

47
00:03:25,002 --> 00:03:28,222
and I am a big fan of the money

48
00:03:28,276 --> 00:03:31,806
heist series in Netflix. And by the way,

49
00:03:31,988 --> 00:03:35,202
season five part two is launching on third

50
00:03:35,256 --> 00:03:37,540
December. So don't miss it.

51
00:03:39,110 --> 00:03:42,482
The agenda for my talk is going to be three

52
00:03:42,536 --> 00:03:46,534
different sections. In the first section I will talk

53
00:03:46,572 --> 00:03:50,470
about what is a cloud native application. So why

54
00:03:50,540 --> 00:03:54,290
is cloud native application development

55
00:03:54,450 --> 00:03:57,618
very popular and how data

56
00:03:57,724 --> 00:04:01,910
is being stored, processed and transferred

57
00:04:01,990 --> 00:04:04,380
in a typical cloud native application.

58
00:04:05,710 --> 00:04:10,118
My second section of the talk is data

59
00:04:10,224 --> 00:04:13,582
encrypting at different layers of a cloud

60
00:04:13,636 --> 00:04:17,162
native application. This is where I will split

61
00:04:17,226 --> 00:04:21,322
these application into different layers

62
00:04:21,466 --> 00:04:25,886
and we will see how we can implement a data encryption solutions

63
00:04:25,998 --> 00:04:29,858
at these different layers. And third,

64
00:04:30,024 --> 00:04:33,166
I will be talking about various patterns

65
00:04:33,278 --> 00:04:35,860
for encrypting data at rest.

66
00:04:38,490 --> 00:04:41,494
So what is it? So you might have

67
00:04:41,532 --> 00:04:44,918
heard about the term cloud native quite often,

68
00:04:45,084 --> 00:04:48,470
right? So what exactly is cloud native?

69
00:04:48,550 --> 00:04:52,234
Is it just a jargon or does

70
00:04:52,272 --> 00:04:56,330
it has any real meaning? So what is cloud native?

71
00:04:57,310 --> 00:05:02,030
Cloud native application is fundamentally

72
00:05:03,650 --> 00:05:07,550
a way of developing applications, right?

73
00:05:07,620 --> 00:05:11,742
So it is not applications targeted for

74
00:05:11,796 --> 00:05:15,582
a specific deployment environment. It's not applications

75
00:05:15,646 --> 00:05:20,018
targeted for deploying into specific cloud

76
00:05:20,104 --> 00:05:23,998
providers, right? When we say cloudnative apps,

77
00:05:24,094 --> 00:05:28,310
applications, these are applications that predominantly

78
00:05:29,050 --> 00:05:32,690
have more or less these four elements

79
00:05:32,770 --> 00:05:36,614
inside in it, right? First of all,

80
00:05:36,812 --> 00:05:41,386
DevOps, right? So DevOps way

81
00:05:41,488 --> 00:05:45,340
of developing an application and

82
00:05:45,870 --> 00:05:49,494
adopting the DevOps principles in developing

83
00:05:49,542 --> 00:05:53,678
applications, in maintaining the application, and how different

84
00:05:53,764 --> 00:05:57,198
teams collaborate with each other

85
00:05:57,284 --> 00:06:00,654
to produce the final piece of application. So that is a key

86
00:06:00,692 --> 00:06:03,890
element of cloud native application. And second,

87
00:06:03,960 --> 00:06:07,902
you will always see a continuous integration and continuous

88
00:06:07,966 --> 00:06:11,282
delivery. So this is actually a

89
00:06:11,336 --> 00:06:15,194
process by which the software is developed incrementally

90
00:06:15,342 --> 00:06:19,142
and there is a high degree of automation so

91
00:06:19,196 --> 00:06:23,218
that you are able to develop features

92
00:06:23,314 --> 00:06:26,802
and push these features even into production on a continuous

93
00:06:26,866 --> 00:06:31,062
basis, right? So that is another salient

94
00:06:31,126 --> 00:06:34,170
feature of cloud native applications.

95
00:06:34,670 --> 00:06:38,218
And typically, cloud native applications are also

96
00:06:38,304 --> 00:06:42,778
containerized applications because of the benefits containers

97
00:06:42,874 --> 00:06:46,446
offer in delivering the

98
00:06:46,468 --> 00:06:49,930
various benefits that are required out of a cloud native

99
00:06:50,010 --> 00:06:53,266
application. Containers are quick to start,

100
00:06:53,368 --> 00:06:57,426
containers can be easily packaged and run in

101
00:06:57,448 --> 00:07:01,810
the same manner in a multitude of platforms and environments,

102
00:07:02,150 --> 00:07:06,294
and containers are now the defacto standard

103
00:07:06,412 --> 00:07:10,390
of packaging and distributing cloud native applications.

104
00:07:11,130 --> 00:07:15,702
And the fourth dimension of cloud native application are

105
00:07:15,756 --> 00:07:19,066
microservices. Cloud native applications are

106
00:07:19,088 --> 00:07:22,758
typically developed as decoupled

107
00:07:22,854 --> 00:07:26,534
microservices. So each and every microservice

108
00:07:26,662 --> 00:07:31,306
has the business logic and also the data store required

109
00:07:31,418 --> 00:07:35,290
for storing the data. And microservices

110
00:07:35,450 --> 00:07:39,482
expose their business logic to other microservices

111
00:07:39,626 --> 00:07:43,422
and also to the external environment via clearly defined

112
00:07:43,566 --> 00:07:46,990
APIs. So now you have an understanding

113
00:07:47,070 --> 00:07:50,500
of what cloud native applications are.

114
00:07:51,590 --> 00:07:54,290
Now let's talk about encryption.

115
00:07:54,970 --> 00:07:59,350
So in order to explain about encryption,

116
00:07:59,930 --> 00:08:03,782
so let me first dissect the entire cloudnative

117
00:08:03,836 --> 00:08:07,030
apps application into four different layers.

118
00:08:07,550 --> 00:08:11,350
At the topmost layer we have the microservice,

119
00:08:11,510 --> 00:08:15,062
which actually encapsulates the business logic

120
00:08:15,126 --> 00:08:18,220
or the programming logic of the application itself.

121
00:08:18,910 --> 00:08:22,734
And underneath the microservice layer, we have the

122
00:08:22,772 --> 00:08:27,166
database layer. This layer is responsible for

123
00:08:27,348 --> 00:08:30,270
storing these data. Invariably,

124
00:08:31,170 --> 00:08:35,570
microservices rely on some sort of storage

125
00:08:36,390 --> 00:08:40,226
for processing the information and for storing the

126
00:08:40,248 --> 00:08:44,794
state of the application. And microservices

127
00:08:44,942 --> 00:08:49,298
can also be developed as a stateless microservice,

128
00:08:49,474 --> 00:08:53,478
which means it will not be holding the state information

129
00:08:53,644 --> 00:08:56,360
or the data information in itself.

130
00:08:56,810 --> 00:09:00,534
But typically, microservices also have a

131
00:09:00,572 --> 00:09:04,186
database in which they store the state of the state of

132
00:09:04,208 --> 00:09:08,198
the application, and also sometimes the state of the environment

133
00:09:08,374 --> 00:09:12,110
in which the application is running. And the third

134
00:09:12,180 --> 00:09:14,670
layer is actually the volume,

135
00:09:15,170 --> 00:09:19,182
these volume on which the database is running.

136
00:09:19,316 --> 00:09:23,314
And this is typically a volume that is carved out of

137
00:09:23,352 --> 00:09:27,730
a physical disk or a virtual disk. And volumes

138
00:09:29,190 --> 00:09:33,426
are the point at which databases create

139
00:09:33,528 --> 00:09:36,520
files and store files. Right.

140
00:09:37,130 --> 00:09:42,402
And the fourth layer is the actual infrastructure

141
00:09:42,466 --> 00:09:46,054
layer, which consists of the disks themselves.

142
00:09:46,252 --> 00:09:50,646
And these could be physical disks that can be found in disk

143
00:09:50,678 --> 00:09:53,754
attached storage on a server, or it could be

144
00:09:53,792 --> 00:09:57,274
virtual disks that

145
00:09:57,312 --> 00:10:00,778
are created and supplied by the cloud service provider.

146
00:10:00,874 --> 00:10:03,886
So whatever it is, a disk is the

147
00:10:03,988 --> 00:10:08,906
undermost layer within the entire layered

148
00:10:09,018 --> 00:10:12,414
architecture. And when you

149
00:10:12,452 --> 00:10:15,778
see encryption through the prism of these different

150
00:10:15,864 --> 00:10:19,662
layers, right, data can be encrypted

151
00:10:19,726 --> 00:10:23,570
in any of these four layers. For instance,

152
00:10:23,990 --> 00:10:27,602
data can be encrypted by the microservice

153
00:10:27,666 --> 00:10:31,538
itself before it is stored in the database.

154
00:10:31,634 --> 00:10:35,286
So in this case, what happens is, apart from the

155
00:10:35,308 --> 00:10:38,762
business logic, the microservice will also have

156
00:10:38,816 --> 00:10:42,586
the logic for encrypting and decrypting the

157
00:10:42,608 --> 00:10:46,554
data by itself. And it will also rely on some

158
00:10:46,592 --> 00:10:49,226
sort of key management system.

159
00:10:49,408 --> 00:10:53,246
Either it will be managing the keys itself or it

160
00:10:53,268 --> 00:10:57,614
will be using the service of an external key management service in

161
00:10:57,652 --> 00:11:01,422
order to manage the keys. And the microservice itself

162
00:11:01,556 --> 00:11:04,850
will be capable of keeping track

163
00:11:04,920 --> 00:11:08,594
of what keys are used for

164
00:11:08,632 --> 00:11:11,780
encrypting certain piece of data.

165
00:11:12,150 --> 00:11:15,926
So it knows how to decrypt these data.

166
00:11:16,108 --> 00:11:20,214
So every logic of encrypting these data, and also the

167
00:11:20,252 --> 00:11:24,134
decrypting of data is taken care by

168
00:11:24,172 --> 00:11:28,186
the microservice itself and the database or

169
00:11:28,208 --> 00:11:32,634
any layer underneath it is not doing

170
00:11:32,752 --> 00:11:35,820
any sort of encryption or decryption. Okay?

171
00:11:36,670 --> 00:11:41,082
Whereas in the second case, where encrypting data, the database,

172
00:11:41,146 --> 00:11:46,080
right, the microservice doesn't perform

173
00:11:46,530 --> 00:11:50,330
any sort of encryption or decryption. It handles

174
00:11:50,410 --> 00:11:53,794
plain text data. And it is these

175
00:11:53,832 --> 00:11:57,886
responsibility of these database to do the encryption.

176
00:11:57,998 --> 00:12:02,050
And again, databases can offer many

177
00:12:02,120 --> 00:12:06,098
advanced features. For instance, certain databases

178
00:12:06,274 --> 00:12:10,022
will be able to generate and manage their own

179
00:12:10,076 --> 00:12:13,622
keys, whereas certain databases will

180
00:12:13,676 --> 00:12:17,320
again rely on an external service to do that.

181
00:12:18,430 --> 00:12:22,086
And again, if you are talking about databases

182
00:12:22,198 --> 00:12:25,546
that are consumed as a managed service

183
00:12:25,648 --> 00:12:29,126
from a cloud provider, there could be databases

184
00:12:29,318 --> 00:12:32,766
which support user managed keys, and there

185
00:12:32,788 --> 00:12:36,958
could be databases which support only the cloud

186
00:12:37,044 --> 00:12:40,590
provider way of managing the keys.

187
00:12:41,570 --> 00:12:45,554
And there could be also performance related implications that

188
00:12:45,592 --> 00:12:49,086
you have to keep in mind, because certain database engines

189
00:12:49,118 --> 00:12:52,482
are capable of offering very good

190
00:12:52,536 --> 00:12:56,162
performance even on encrypted data. But certain database

191
00:12:56,226 --> 00:13:00,214
engines are not that performance. So you will have to be

192
00:13:00,252 --> 00:13:03,734
very careful in determining whether the

193
00:13:03,772 --> 00:13:08,770
performance merits that is supported

194
00:13:08,850 --> 00:13:12,602
by the database will be suitable for you. And also

195
00:13:12,656 --> 00:13:16,346
you should take care of what is the overhead that

196
00:13:16,368 --> 00:13:20,006
you need to bear in terms of managing the keys and what

197
00:13:20,048 --> 00:13:24,026
are the repercussions if in case a database

198
00:13:24,138 --> 00:13:27,902
is getting breached. So those are

199
00:13:27,956 --> 00:13:31,840
the other considerations that you need to take care of.

200
00:13:33,510 --> 00:13:36,798
And the third thing is volume level encryption.

201
00:13:36,894 --> 00:13:39,922
This is where you simply run

202
00:13:39,976 --> 00:13:43,650
your database and microservice assets

203
00:13:44,070 --> 00:13:47,974
and both these layers will still be handling plain text

204
00:13:48,172 --> 00:13:52,134
and the entire responsibility of

205
00:13:52,252 --> 00:13:55,686
encrypting the data will be taking place

206
00:13:55,788 --> 00:13:59,546
at the volume level. So this is where you will be

207
00:13:59,568 --> 00:14:03,478
typically using a storage provider,

208
00:14:03,574 --> 00:14:07,910
a solution that is provided by these storage provider

209
00:14:08,070 --> 00:14:11,854
which will be responsible for encrypting and

210
00:14:11,892 --> 00:14:15,306
encrypting the data. And for instance,

211
00:14:15,418 --> 00:14:19,226
if you are talking about a Kubernetes environment,

212
00:14:19,338 --> 00:14:24,110
then you will probably make use of a CSI based provisioner

213
00:14:24,190 --> 00:14:27,950
for provisioning these volumes and provisioners

214
00:14:28,030 --> 00:14:31,506
come in different feature sets. So you

215
00:14:31,528 --> 00:14:36,082
may have to check whether a volume provisioner

216
00:14:36,226 --> 00:14:39,762
supports encryption at the volume

217
00:14:39,826 --> 00:14:43,442
level or they support the encrypting at a storage

218
00:14:43,506 --> 00:14:46,822
class level and what is suitable for your use case.

219
00:14:46,956 --> 00:14:49,850
And accordingly you will have to choose the solution.

220
00:14:50,910 --> 00:14:54,582
And finally, these last layer

221
00:14:54,726 --> 00:14:57,802
for doing the encryption is the disk itself.

222
00:14:57,936 --> 00:15:01,310
And these are disks that could be either

223
00:15:01,380 --> 00:15:04,570
physical disks or it could be virtual disks.

224
00:15:04,730 --> 00:15:08,542
So whatever it is, the encryption and decryption takes

225
00:15:08,596 --> 00:15:13,358
place at the disk level. Okay, so typically

226
00:15:13,534 --> 00:15:17,534
these are implemented by using certain kernel

227
00:15:17,582 --> 00:15:21,474
modules and these kernel modules will actually

228
00:15:21,592 --> 00:15:25,246
intercept the data that is actually getting written into the file

229
00:15:25,278 --> 00:15:28,486
system on the disk. And these kernel modules will

230
00:15:28,508 --> 00:15:32,294
be capable of managing the keys and encrypting and

231
00:15:32,332 --> 00:15:36,070
decrypting the data. So as you see, there are four

232
00:15:36,140 --> 00:15:39,770
different layers at which you can implement these

233
00:15:39,840 --> 00:15:43,130
encrypting at rest. And there are

234
00:15:43,200 --> 00:15:47,018
actually benefits, merits and demerits of

235
00:15:47,184 --> 00:15:49,130
each of these layers.

236
00:15:50,290 --> 00:15:53,882
So that is what we are going to talk about in the subsequent

237
00:15:53,946 --> 00:15:58,458
slides. So let's enter into the patterns

238
00:15:58,554 --> 00:16:01,600
for encrypting data at rest, right?

239
00:16:03,670 --> 00:16:07,454
And let's say encryption by the microservice

240
00:16:07,502 --> 00:16:11,250
itself. So what happens in this way

241
00:16:11,320 --> 00:16:13,700
of encrypting data at rest?

242
00:16:14,230 --> 00:16:18,120
So we saw that earlier. So this is the case in which these

243
00:16:18,570 --> 00:16:22,162
application microservice itself has the logic

244
00:16:22,226 --> 00:16:25,782
or the responsibility for encrypting and

245
00:16:25,836 --> 00:16:29,474
decrypting the data. So typically

246
00:16:29,602 --> 00:16:33,686
in these cases you will have to watch out for things like sorting

247
00:16:33,718 --> 00:16:37,338
and searching of data. So if your application is doing

248
00:16:37,424 --> 00:16:40,940
more amount of sorting and searching of data then

249
00:16:41,550 --> 00:16:45,246
this is not possible because the data is stored as

250
00:16:45,268 --> 00:16:49,066
an encrypted format in the database and the database engine doesn't

251
00:16:49,098 --> 00:16:52,686
know how to sort the data and it will not be capable of searching the

252
00:16:52,708 --> 00:16:56,642
data. So this is something that you will have to keep in mind whether

253
00:16:56,696 --> 00:17:00,386
your application can be written in such a fashion that

254
00:17:00,408 --> 00:17:03,826
it can tolerate this limitation. And by

255
00:17:03,848 --> 00:17:07,138
the way, if you are having existing applications

256
00:17:07,234 --> 00:17:10,550
which are already talking to a database,

257
00:17:10,890 --> 00:17:14,934
right, and it could be expensive for

258
00:17:14,972 --> 00:17:18,394
you to redesign applications for you to introduce the

259
00:17:18,432 --> 00:17:21,980
logic of encrypting and decrypting the data in your application.

260
00:17:22,830 --> 00:17:26,314
And by the way, this patterns of

261
00:17:26,352 --> 00:17:29,814
encrypting at the microservice level has the least

262
00:17:29,952 --> 00:17:33,838
attack surface. The reason being at the very first

263
00:17:33,924 --> 00:17:37,530
layer itself where the data is generated,

264
00:17:37,690 --> 00:17:41,854
the data is getting encrypted and as the data cases through

265
00:17:41,892 --> 00:17:45,694
the underneath layers it passes in an encrypted fashion,

266
00:17:45,742 --> 00:17:49,554
which means the attack surface in this case is the least.

267
00:17:49,672 --> 00:17:53,940
So you get a high degree of protection for your data.

268
00:17:54,550 --> 00:17:58,566
And of course using this pattern you should

269
00:17:58,588 --> 00:18:02,694
be very mindful of key management issues because the

270
00:18:02,732 --> 00:18:06,726
key management is now the responsibility of the application. And of

271
00:18:06,748 --> 00:18:10,838
course the application can rely on other microservices

272
00:18:10,934 --> 00:18:13,530
to perform the key management activities.

273
00:18:13,950 --> 00:18:17,722
But at the end of the day these application is still

274
00:18:17,776 --> 00:18:21,226
accountable and responsible for doing the

275
00:18:21,248 --> 00:18:24,766
key management related activities. So this is something that you will have

276
00:18:24,788 --> 00:18:28,270
to keep in mind if you are going to choose this pattern.

277
00:18:29,170 --> 00:18:32,640
The next pattern is encryption by the database itself.

278
00:18:33,510 --> 00:18:37,230
Now this is where the database itself has the necessary

279
00:18:37,310 --> 00:18:40,706
capability to do the encrypting and the

280
00:18:40,728 --> 00:18:42,658
decryption. And by the way,

281
00:18:42,824 --> 00:18:46,322
predominantly this requires the database

282
00:18:46,386 --> 00:18:49,990
containers to be run in privileged mode

283
00:18:50,330 --> 00:18:54,022
and this might not be suitable for special use

284
00:18:54,076 --> 00:18:58,410
cases, special security requirements. So your organization

285
00:18:58,830 --> 00:19:02,902
might be having some security guidelines

286
00:19:02,966 --> 00:19:06,714
which will prevent you from running privileged containers in

287
00:19:06,752 --> 00:19:07,530
production.

288
00:19:09,630 --> 00:19:12,938
This kind of patterns you will have to carefully

289
00:19:13,034 --> 00:19:17,242
choose and see whether the database is capable

290
00:19:17,306 --> 00:19:21,390
of performing the encrypting data when it is run without

291
00:19:21,540 --> 00:19:25,202
these privileged mode. And most of the

292
00:19:25,336 --> 00:19:29,762
databases that provide the encryption functionality use

293
00:19:29,816 --> 00:19:33,278
a tool called as Dmcrypt. And typically

294
00:19:33,374 --> 00:19:37,922
these databases have written some wrappers around Dmcrypt

295
00:19:38,066 --> 00:19:41,762
in order to provide some functions

296
00:19:41,826 --> 00:19:45,000
and key abilities that the database engine can use.

297
00:19:45,850 --> 00:19:49,366
So you will have to be aware

298
00:19:49,478 --> 00:19:53,590
what kind of mechanism that the database

299
00:19:53,670 --> 00:19:57,590
employs or what is the functionality

300
00:19:57,670 --> 00:20:01,614
that the database employs, whether it uses d encrypt kind

301
00:20:01,652 --> 00:20:05,742
of solutions or the database itself

302
00:20:05,876 --> 00:20:09,354
has its own solution for encrypting and decrypting

303
00:20:09,402 --> 00:20:12,554
data. And in these kind

304
00:20:12,612 --> 00:20:16,610
of pattern you will see limited support in

305
00:20:16,680 --> 00:20:20,354
open source software. So typically if you are

306
00:20:20,392 --> 00:20:23,922
used to using open source software as

307
00:20:23,976 --> 00:20:27,750
your database solution, you will see

308
00:20:27,820 --> 00:20:31,782
that not every open source solution has

309
00:20:31,836 --> 00:20:35,282
this capability and you will nevertheless

310
00:20:35,346 --> 00:20:39,766
have to invest in commercial plugins or enterprise

311
00:20:39,958 --> 00:20:43,706
licensed versions of your database, if at all

312
00:20:43,728 --> 00:20:47,980
you choose this pattern. But at the end of the day,

313
00:20:48,350 --> 00:20:51,758
it is a decision that you will have to make considering the benefits

314
00:20:51,844 --> 00:20:56,074
and benefits and the overhead

315
00:20:56,122 --> 00:20:59,390
that you will have to bear in terms of cost and complexity.

316
00:21:01,250 --> 00:21:04,962
And database encryption is very

317
00:21:05,016 --> 00:21:08,958
simplistic because you don't have to rewrite your applications

318
00:21:09,054 --> 00:21:12,978
and you don't have to also consider changes

319
00:21:13,064 --> 00:21:16,566
to your storage solution or challenges to

320
00:21:16,588 --> 00:21:20,290
your infrastructure in order to encrypting data addressed.

321
00:21:20,370 --> 00:21:23,778
So it is highly a plug and play solution

322
00:21:23,954 --> 00:21:28,006
if at all you find the right fit of database

323
00:21:28,038 --> 00:21:30,700
solution for your application's needs.

324
00:21:31,710 --> 00:21:35,098
The third pattern that I want to present is volume level

325
00:21:35,184 --> 00:21:39,066
encryption and you will typically find

326
00:21:39,168 --> 00:21:42,622
this pattern of encrypting widely used

327
00:21:42,676 --> 00:21:47,258
in public cloud environments. Public cloud providers invariably

328
00:21:47,434 --> 00:21:50,894
provide you with volume services which

329
00:21:50,932 --> 00:21:54,850
have inherent capability of encrypting and certain

330
00:21:54,920 --> 00:21:58,670
public cloud providers also provide you the mechanism

331
00:21:58,750 --> 00:22:01,842
of managing the keys yourself rather than

332
00:22:01,896 --> 00:22:05,366
the cloud provider managing the keys. So that could be

333
00:22:05,468 --> 00:22:08,630
another sweet spot for you to consider. Public cloud

334
00:22:08,700 --> 00:22:14,406
providers managed service for volume encryption and

335
00:22:14,508 --> 00:22:17,974
third party storage providers many of these storage

336
00:22:18,022 --> 00:22:23,482
providers support volume level encryption and

337
00:22:23,536 --> 00:22:26,794
these storage providers have encrypting. Sometimes they have

338
00:22:26,832 --> 00:22:30,482
implemented their own key management key management solution

339
00:22:30,646 --> 00:22:34,638
for managing the keys, or sometimes they allow you to

340
00:22:34,724 --> 00:22:38,080
bring your own key management solution which the

341
00:22:38,450 --> 00:22:41,360
storage provider will talk to.

342
00:22:42,050 --> 00:22:46,450
But invariably we are seeing many such storage providers

343
00:22:46,790 --> 00:22:50,034
supporting volume level encryption. So this could be

344
00:22:50,072 --> 00:22:53,122
a choice for you if you

345
00:22:53,176 --> 00:22:56,694
have the capability of choosing these

346
00:22:56,732 --> 00:23:00,354
storage provider and if you have the control over the infrastructure

347
00:23:00,402 --> 00:23:04,440
aspects of storage on which your application is running.

348
00:23:04,810 --> 00:23:08,586
And by these way, CSI plugins also have support

349
00:23:08,768 --> 00:23:12,602
for encrypting. By the way, they have exposed some

350
00:23:12,656 --> 00:23:16,806
APIs of the storage provider, but not all CSI

351
00:23:16,838 --> 00:23:21,338
plugins have exposed the complete encrypting

352
00:23:21,434 --> 00:23:25,018
feature of the storage provider. So there are some limitations

353
00:23:25,114 --> 00:23:28,154
that you might encounter in CSI

354
00:23:28,202 --> 00:23:32,670
plugins. So if you are deploying Kubernetes applications which rely on

355
00:23:32,820 --> 00:23:36,590
CSI plugins to provision volumes, then you will have to carefully

356
00:23:36,670 --> 00:23:39,986
see what is the support that is provided by

357
00:23:40,008 --> 00:23:43,554
the CSI plugin or sometimes you may have to

358
00:23:43,592 --> 00:23:47,346
write your own CSI plugin which has the complete functionality that

359
00:23:47,368 --> 00:23:51,410
you require for data encryption address and many OSS

360
00:23:51,490 --> 00:23:55,266
solutions are available which support volume level encryption.

361
00:23:55,298 --> 00:23:58,586
So if you are into open source software and this could

362
00:23:58,608 --> 00:24:02,330
be a very viable solution for you to do the volume level encrypting

363
00:24:03,230 --> 00:24:07,002
data. One key disadvantage in volume level

364
00:24:07,056 --> 00:24:10,686
encryption is that if you are deploying your application into an

365
00:24:10,708 --> 00:24:14,602
infrastructure or into an environment in which you don't

366
00:24:14,666 --> 00:24:17,390
have much of a control, right,

367
00:24:17,540 --> 00:24:21,342
then that environment might not have the ability of doing

368
00:24:21,396 --> 00:24:24,622
volume level encryption. Then your application cannot

369
00:24:24,686 --> 00:24:28,462
assume that whatever volumes that it consumes

370
00:24:28,526 --> 00:24:31,602
will be encrypted, right? So if you want to

371
00:24:31,656 --> 00:24:35,254
ensure an end to end security of

372
00:24:35,292 --> 00:24:40,342
the applications that you deliver to your customers,

373
00:24:40,476 --> 00:24:44,434
and if you want to enforce certain rules

374
00:24:44,562 --> 00:24:48,090
on how the storage provisioner should work,

375
00:24:48,240 --> 00:24:52,106
and if sometimes it might not be feasible for you to enforce those

376
00:24:52,128 --> 00:24:55,782
solutions, then you may have to consider the other previous

377
00:24:55,846 --> 00:24:59,530
patterns for applying encryption. The final

378
00:24:59,600 --> 00:25:02,750
pattern that you should consider is the disk level

379
00:25:02,820 --> 00:25:06,042
encryption. And again, this is not feasible

380
00:25:06,106 --> 00:25:10,110
sometimes because you will never have control over the disk

381
00:25:12,050 --> 00:25:15,634
disks, might not get fully exposed to

382
00:25:15,672 --> 00:25:18,734
your applications. You may have to consume

383
00:25:18,782 --> 00:25:22,574
only volumes at these application level. And if the encrypting

384
00:25:22,622 --> 00:25:26,322
is happening at these disk level, then unless

385
00:25:26,386 --> 00:25:30,038
you have a tight control or visibility into your

386
00:25:30,204 --> 00:25:34,214
infrastructure and environment, it might not be feasible to do

387
00:25:34,252 --> 00:25:38,074
disk level encryption for you. And this

388
00:25:38,112 --> 00:25:42,154
has the highest attack surface. That's because the

389
00:25:42,192 --> 00:25:46,790
encryption happens only at the bottom most layer,

390
00:25:46,950 --> 00:25:50,426
right? So at the microservice layer, at the

391
00:25:50,448 --> 00:25:54,414
database layer, at the volume layer, everything is plain text. Only when

392
00:25:54,452 --> 00:25:57,790
the data enters at the disk, then the data

393
00:25:57,860 --> 00:26:01,434
is encrypted. Okay, so which means the attack surface

394
00:26:01,482 --> 00:26:04,786
is high. The attacker can still steal the

395
00:26:04,808 --> 00:26:07,858
data at the microservice level, at the database level,

396
00:26:07,944 --> 00:26:12,526
or even at the volume level. And by the way, this is considered

397
00:26:12,558 --> 00:26:15,894
to be these most simplistic solution. The reason being

398
00:26:16,012 --> 00:26:19,494
disk level encrypting data been around for

399
00:26:19,532 --> 00:26:23,634
a while and many of the disk level encryption solutions

400
00:26:23,682 --> 00:26:27,314
are very mature and you have lots of tooling

401
00:26:27,362 --> 00:26:30,390
to automate this kind of encryption.

402
00:26:30,550 --> 00:26:33,994
And so this could turn out to be

403
00:26:34,032 --> 00:26:37,994
the most simplistic solution for your needs, if at all.

404
00:26:38,112 --> 00:26:41,614
You have the required amount of control and

405
00:26:41,652 --> 00:26:45,406
visibility on the environment. And by the way, you have the

406
00:26:45,428 --> 00:26:49,102
luxury of a standardized format for hard

407
00:26:49,156 --> 00:26:51,710
disk encryption. For instance luks,

408
00:26:52,470 --> 00:26:55,582
which is actually a Linux based format

409
00:26:55,646 --> 00:26:59,346
for disk encryption, which means your applications could

410
00:26:59,368 --> 00:27:02,594
be highly portable because then you rely on a

411
00:27:02,632 --> 00:27:05,534
standardized format of disk encryption.

412
00:27:05,662 --> 00:27:09,906
So these are some of the advantages that you gain out of disk level encryption.

413
00:27:09,938 --> 00:27:13,670
But again, as I said earlier, you will have to have

414
00:27:13,740 --> 00:27:17,638
good control and visibility on the infrastructure. So if

415
00:27:17,644 --> 00:27:21,626
you are deploying your application into an environment which you

416
00:27:21,648 --> 00:27:25,046
can design, in which the infrastructure portion

417
00:27:25,078 --> 00:27:28,826
is something that you can design upfront, in which you can

418
00:27:28,848 --> 00:27:32,794
enforce certain rules, in which you can bring in your disk level encryption

419
00:27:32,842 --> 00:27:36,602
solutions, then this could be a most simplistic solution.

420
00:27:36,666 --> 00:27:40,282
But again, the attack surface on this pattern

421
00:27:40,426 --> 00:27:44,094
is very high. So if you are looking for a highly

422
00:27:44,142 --> 00:27:48,434
sophisticated, highly secure solution, then this might not be

423
00:27:48,472 --> 00:27:52,190
suitable for you. Okay, so these are some of the considerations

424
00:27:52,270 --> 00:27:55,250
that you may want to consider. Okay,

425
00:27:55,400 --> 00:27:59,618
now that's it. I am more or less at the end of my presentation,

426
00:27:59,794 --> 00:28:03,126
so we talked about what cloud native applications are,

427
00:28:03,228 --> 00:28:07,262
what are the salient features of cloudnative apps applications.

428
00:28:07,426 --> 00:28:11,386
And then we saw what are the different layers of

429
00:28:11,408 --> 00:28:15,386
a cloud native application, and how encryption can app

430
00:28:15,488 --> 00:28:18,710
can happen in these different layers.

431
00:28:18,870 --> 00:28:22,446
And finally, we talked about the

432
00:28:22,468 --> 00:28:26,970
various patterns. And inside each of these patterns, what are the considerations

433
00:28:27,130 --> 00:28:31,198
that you should be aware of? What are the benefits and

434
00:28:31,284 --> 00:28:34,666
what are the disadvantages in each of these patterns.

435
00:28:34,778 --> 00:28:38,046
So using this information, I hope you will

436
00:28:38,068 --> 00:28:41,662
be able to choose what is the right

437
00:28:41,796 --> 00:28:46,022
type of data encryption at rest. So solution for

438
00:28:46,076 --> 00:28:48,838
your needs. So with that,

439
00:28:48,924 --> 00:28:52,662
I come to the end of this presentation. Thank you so much

440
00:28:52,716 --> 00:28:55,990
for watching this talk and please connect

441
00:28:56,060 --> 00:28:59,846
with me on Twitter and if you have any questions,

442
00:28:59,948 --> 00:29:03,206
you can reach out to me on Twitter itself. Thank you

443
00:29:03,228 --> 00:29:04,950
so much, have a nice day.

