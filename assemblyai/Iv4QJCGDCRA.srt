1
00:00:27,090 --> 00:00:30,690
Hello everyone. Let's talk about CI CD,

2
00:00:30,850 --> 00:00:34,086
but a little bit differently than just usually we

3
00:00:34,108 --> 00:00:37,490
do. So we will not talk about the tools, pipelines,

4
00:00:37,570 --> 00:00:41,382
integrations, at least not about the

5
00:00:41,436 --> 00:00:44,870
specific tools, pipelines and integrations, how to

6
00:00:45,020 --> 00:00:48,726
use them, how to configure them, et cetera. We will do

7
00:00:48,828 --> 00:00:52,538
something different it. So let's

8
00:00:52,554 --> 00:00:56,714
get started. My name is Pablo Pivosch. I am DevOps Institute

9
00:00:56,762 --> 00:01:00,730
ambassador, AWS community builder, and also CD foundation

10
00:01:00,810 --> 00:01:04,014
ambassador. I work as

11
00:01:04,212 --> 00:01:07,730
lead, lead systems engineer, EPAm systems.

12
00:01:08,150 --> 00:01:11,746
So on the beginning, let's think about

13
00:01:11,848 --> 00:01:15,006
how we usually create our

14
00:01:15,048 --> 00:01:18,520
CI CD, right? And this is,

15
00:01:19,850 --> 00:01:24,070
I would say, most common approach. And I found it everywhere

16
00:01:24,650 --> 00:01:28,300
during the discussions after talking

17
00:01:28,750 --> 00:01:32,666
with people about CI CD itself. So we

18
00:01:32,688 --> 00:01:36,938
have some code, we know

19
00:01:37,024 --> 00:01:39,900
what kind of environments we want to deploy to,

20
00:01:40,690 --> 00:01:43,120
and we know some specific tool,

21
00:01:43,810 --> 00:01:47,040
Jenkins, azure, DevOps, teamcity, whatever.

22
00:01:47,650 --> 00:01:52,614
And those three elements together creates

23
00:01:52,682 --> 00:01:54,770
for us the pipeline.

24
00:01:56,310 --> 00:01:59,714
We use this tool to provide or

25
00:01:59,752 --> 00:02:03,586
to deliver this code to these

26
00:02:03,688 --> 00:02:07,334
environments. And that's it, right? And we

27
00:02:07,372 --> 00:02:10,306
consider mainly the environments,

28
00:02:10,418 --> 00:02:14,150
as the previous slide showed, we consider

29
00:02:14,220 --> 00:02:17,754
the tools, we consider the tests. Sometimes, if we are

30
00:02:17,792 --> 00:02:21,610
advanced enough, those of us

31
00:02:21,760 --> 00:02:26,502
who are seniors considers

32
00:02:26,566 --> 00:02:30,206
even releases, how we do the releases. If you

33
00:02:30,228 --> 00:02:33,774
are even above this level

34
00:02:33,812 --> 00:02:36,960
of senior, you will think about branching and

35
00:02:37,410 --> 00:02:41,614
some kind of jedis during

36
00:02:41,812 --> 00:02:44,882
inside the team will think about the

37
00:02:44,936 --> 00:02:48,690
reverts, because this is also the part of the CI CD.

38
00:02:49,590 --> 00:02:52,980
Of course, I'm kidding a little bit, but not that much.

39
00:02:53,350 --> 00:02:57,270
All right, so let's think about

40
00:02:57,340 --> 00:03:01,286
this from a different perspective, because what can

41
00:03:01,308 --> 00:03:05,094
go wrong with this specific way of

42
00:03:05,132 --> 00:03:09,274
doing things? Is there anything what

43
00:03:09,472 --> 00:03:12,250
should be done a little bit differently?

44
00:03:13,390 --> 00:03:16,906
So today we will look on CI CD from

45
00:03:16,928 --> 00:03:21,134
different perspective, from the helicopter view, we will go back in

46
00:03:21,172 --> 00:03:25,840
space and we will look on it from completely

47
00:03:26,450 --> 00:03:30,046
different point of view. So we will not look on

48
00:03:30,068 --> 00:03:33,730
the topic from the engineer perspective, but from the organization,

49
00:03:34,230 --> 00:03:37,922
not from the pipeline perspective. Pipeline itself, how it is

50
00:03:37,976 --> 00:03:41,682
designed or implemented, will look

51
00:03:41,736 --> 00:03:45,394
on the process, right. And in order to start

52
00:03:45,432 --> 00:03:48,982
it properly, we need to, as a first

53
00:03:49,036 --> 00:03:52,070
point, we need to take organization.

54
00:03:53,050 --> 00:03:56,486
Why is that? Because a couple of things really,

55
00:03:56,668 --> 00:04:00,634
and this is very important, something what we very

56
00:04:00,672 --> 00:04:03,962
often maybe not

57
00:04:04,016 --> 00:04:07,814
forget, but we don't see it, we don't

58
00:04:07,862 --> 00:04:11,550
have it in our minds when we do

59
00:04:11,620 --> 00:04:15,950
our daily work. So why organization?

60
00:04:16,290 --> 00:04:19,774
Because of a couple of elements. And one of the most

61
00:04:19,812 --> 00:04:23,050
important is Convey's law. What is Convey's law?

62
00:04:23,220 --> 00:04:26,690
In simple terms, to explain

63
00:04:26,760 --> 00:04:30,530
it in simple terms, I will say that the design of the system,

64
00:04:30,680 --> 00:04:34,642
so what we developed and how we develop it is

65
00:04:34,696 --> 00:04:37,718
a mirror of the communication structure inside

66
00:04:37,804 --> 00:04:41,574
the organization. What it means,

67
00:04:41,692 --> 00:04:45,462
it means that if two components in our

68
00:04:45,596 --> 00:04:49,642
application have to be very

69
00:04:49,696 --> 00:04:53,580
close together, have to very closely and very

70
00:04:53,950 --> 00:04:57,434
intensively communicate with each

71
00:04:57,472 --> 00:05:00,846
other. And those teams who

72
00:05:00,868 --> 00:05:04,846
are responsible for those components will not talk together, it will

73
00:05:04,868 --> 00:05:08,046
not work. Okay. Those teams need

74
00:05:08,068 --> 00:05:12,094
to be also in that

75
00:05:12,132 --> 00:05:16,818
kind of communication pattern like system

76
00:05:16,904 --> 00:05:20,446
is, right. And this conveyor's law leads

77
00:05:20,478 --> 00:05:24,420
us to some great book and some great

78
00:05:25,030 --> 00:05:28,598
concept called Tim Topologies. And this is based

79
00:05:28,684 --> 00:05:32,230
on the book

80
00:05:32,300 --> 00:05:35,814
of two guys,

81
00:05:35,932 --> 00:05:41,926
Mr. Skelton and Pai. And they created

82
00:05:42,038 --> 00:05:45,974
an approach where we can see all those elements,

83
00:05:46,102 --> 00:05:49,354
how they work together, right? And we see here, for example, platform team

84
00:05:49,392 --> 00:05:53,502
and the platform engineering right now is a hype, but this

85
00:05:53,556 --> 00:05:57,310
hype is because some kind of misunderstanding what the platform

86
00:05:57,380 --> 00:06:01,466
team really is, right. We will not go into details

87
00:06:01,498 --> 00:06:05,326
here because we have only 25 minutes left. And so let's

88
00:06:05,358 --> 00:06:09,266
go further. So what we need to consider

89
00:06:09,448 --> 00:06:12,930
when we design, when we talked

90
00:06:13,000 --> 00:06:16,258
about CI CD, the first element,

91
00:06:16,354 --> 00:06:20,470
we already discussed quickly,

92
00:06:20,540 --> 00:06:23,800
shortly, but we discussed organization, what else?

93
00:06:24,410 --> 00:06:28,166
For example, branching strategy, right. Delivery strategy,

94
00:06:28,278 --> 00:06:29,610
artifact management,

95
00:06:30,190 --> 00:06:34,230
SDLC quality, gates capabilities,

96
00:06:34,390 --> 00:06:36,890
constraints, responsibilities,

97
00:06:37,390 --> 00:06:41,246
releases, and we are in

98
00:06:41,268 --> 00:06:43,680
the middle of the list at this point.

99
00:06:44,130 --> 00:06:47,230
Rollbacks. KPIs, yes, I know,

100
00:06:47,300 --> 00:06:50,634
all of us love KPIs.

101
00:06:50,762 --> 00:06:54,146
DevOps as a practice, monitoring and

102
00:06:54,168 --> 00:06:57,362
measurements, those two things are different.

103
00:06:57,496 --> 00:07:00,754
Monitoring is not equal. Measurements or measurements are not

104
00:07:00,792 --> 00:07:04,500
part of the monitoring. We will go into details a little bit later.

105
00:07:05,450 --> 00:07:09,154
What kind of environments we have value streams

106
00:07:09,282 --> 00:07:13,394
also more and more popular element. But honestly

107
00:07:13,442 --> 00:07:17,314
speaking, as DevOps is emerged

108
00:07:17,362 --> 00:07:20,090
somehow from lean,

109
00:07:21,070 --> 00:07:24,700
the value streams should be in our blood all the time,

110
00:07:25,630 --> 00:07:29,450
because value stream is one of the important part of lean,

111
00:07:29,870 --> 00:07:33,118
what tools we use. And last but not least,

112
00:07:33,204 --> 00:07:36,686
the security. And I always have the fun to talk about security

113
00:07:36,788 --> 00:07:38,720
on the end because,

114
00:07:39,650 --> 00:07:43,534
yeah, why not, right? Something need to stay in our

115
00:07:43,572 --> 00:07:46,594
head. So most often it is the

116
00:07:46,632 --> 00:07:49,966
last topic, last element, right? So let's

117
00:07:49,998 --> 00:07:53,730
go through the details, right? So we have environments and

118
00:07:53,800 --> 00:07:57,526
here we can say it's easy, right?

119
00:07:57,548 --> 00:08:02,230
We have dev, we have QA, we have pre prod release, candidate production.

120
00:08:02,570 --> 00:08:05,846
What's the problem is here? What is

121
00:08:05,868 --> 00:08:09,722
the problem? And the problem is very easy to touch,

122
00:08:09,856 --> 00:08:13,290
because we have many environments,

123
00:08:13,630 --> 00:08:17,340
this number can change. We need to

124
00:08:18,830 --> 00:08:22,986
understand what is the ownership

125
00:08:23,178 --> 00:08:27,310
of each environment, what is the structure of each environment,

126
00:08:28,130 --> 00:08:32,882
what kind of access we have to each environment. Because it

127
00:08:32,936 --> 00:08:36,642
may happen that you have the full control on dev

128
00:08:36,696 --> 00:08:39,954
environment and QA environment, but no

129
00:08:39,992 --> 00:08:42,450
control at all on production.

130
00:08:43,990 --> 00:08:49,698
Production is deployed and monitored only by automated structures

131
00:08:49,874 --> 00:08:53,666
like CI CD, like infrastructure, as code, like monitoring

132
00:08:53,698 --> 00:08:57,014
platforms, et cetera, et cetera. So those

133
00:08:57,052 --> 00:09:00,026
elements areas important to understand. And also,

134
00:09:00,128 --> 00:09:03,882
as we know how many environments we have,

135
00:09:04,016 --> 00:09:07,674
we know what is the transition between them. We are

136
00:09:07,712 --> 00:09:12,142
able to design our test strategy through

137
00:09:12,196 --> 00:09:16,010
the chain where specific lets

138
00:09:16,090 --> 00:09:19,438
will be executed. Next part,

139
00:09:19,524 --> 00:09:22,000
branching strategy. This is like a most common,

140
00:09:22,870 --> 00:09:29,006
most understand element,

141
00:09:29,118 --> 00:09:31,410
definitely more than just the environments.

142
00:09:32,230 --> 00:09:36,610
And the branching strategy means generally

143
00:09:36,770 --> 00:09:40,550
what we do with the code in our

144
00:09:40,700 --> 00:09:45,542
version control system, right? So this is where this

145
00:09:45,596 --> 00:09:49,290
CI CD somehow starts, right? This is the first point

146
00:09:49,440 --> 00:09:53,020
where the code from different developers meet together.

147
00:09:54,430 --> 00:09:58,278
And we have a couple of strategies, right? We have trunk, we have Gitflow,

148
00:09:58,374 --> 00:10:01,706
we have stories, tasks,

149
00:10:01,898 --> 00:10:05,530
kind of strategy. We can have even environments,

150
00:10:05,610 --> 00:10:09,386
right? If you are not familiar with this approach, please think about git

151
00:10:09,418 --> 00:10:13,490
flow and multiply it by number of your environments.

152
00:10:13,910 --> 00:10:16,500
And yes, it goes crazy.

153
00:10:17,750 --> 00:10:21,460
What is the code structure, what is the repository design,

154
00:10:22,310 --> 00:10:25,782
how we provide access to the code

155
00:10:25,836 --> 00:10:29,510
there. So for example, who is

156
00:10:29,580 --> 00:10:32,386
and how we design pull requests,

157
00:10:32,498 --> 00:10:36,454
how we design the communication about

158
00:10:36,492 --> 00:10:40,106
pull requests, how we provide approvers to

159
00:10:40,128 --> 00:10:42,730
those pull requests. Do we have protected branches?

160
00:10:43,070 --> 00:10:46,282
How we do escalations? Because yes,

161
00:10:46,336 --> 00:10:50,038
again, we all love escalations, but let's be honest with

162
00:10:50,144 --> 00:10:54,958
each other, right? Escalations path is

163
00:10:55,044 --> 00:10:58,160
needed because if something happened,

164
00:10:58,770 --> 00:11:02,254
and it will happen in some point, we need to know

165
00:11:02,292 --> 00:11:04,610
what to do and who to notify,

166
00:11:04,950 --> 00:11:08,546
right? What kind of integrations we have,

167
00:11:08,648 --> 00:11:12,580
do we use feature toggles or not? And how we design

168
00:11:13,350 --> 00:11:17,334
those feature toggles, do we do tests? And here

169
00:11:17,372 --> 00:11:21,910
I'm not thinking about unit testing like this,

170
00:11:22,060 --> 00:11:25,426
but more like TDD, BDD approach, et cetera, et cetera.

171
00:11:25,458 --> 00:11:28,966
Because this also will somehow influence

172
00:11:28,998 --> 00:11:33,146
how we code and why this is important because

173
00:11:33,328 --> 00:11:37,098
for example, if we have very small

174
00:11:37,184 --> 00:11:41,930
code, do we want to use Gitflow?

175
00:11:43,090 --> 00:11:46,910
Maybe not, right? If we use specific

176
00:11:47,060 --> 00:11:50,526
tool for our deployments, like for example,

177
00:11:50,628 --> 00:11:54,354
AWS code deploy, probably we would

178
00:11:54,392 --> 00:11:57,730
like to go with specific branching strategy

179
00:11:58,870 --> 00:12:02,562
and those are interconnected somehow. So,

180
00:12:02,616 --> 00:12:06,274
branching strategy, this is the first or the one

181
00:12:06,312 --> 00:12:09,826
side of the stick, the opposite side of the stick

182
00:12:09,858 --> 00:12:15,046
is the delivery strategy, right? And here we need to talk about not

183
00:12:15,068 --> 00:12:18,506
only delivery itself, but also the CI, right? What is the

184
00:12:18,528 --> 00:12:22,810
trigger, what is the build process,

185
00:12:22,960 --> 00:12:26,218
what kind of steps we have inside? What are the

186
00:12:26,224 --> 00:12:30,010
responsibilities of team members? What is the communication pattern?

187
00:12:30,450 --> 00:12:34,014
Do we use continuous delivery on continuous or

188
00:12:34,052 --> 00:12:37,470
continuous deployment? Small change, but really,

189
00:12:37,540 --> 00:12:41,434
really big difference. Small change in the wording

190
00:12:41,482 --> 00:12:44,734
at least. Because continuous delivery

191
00:12:44,782 --> 00:12:48,450
means that we have some stop inside

192
00:12:48,520 --> 00:12:51,954
the process when some manual action can be taken,

193
00:12:52,072 --> 00:12:56,114
continuous deployment means that there is no manual action,

194
00:12:56,162 --> 00:12:59,874
no stop. You commit the code, you have it on production,

195
00:13:00,002 --> 00:13:03,830
right? So this

196
00:13:03,900 --> 00:13:07,750
also influence

197
00:13:08,110 --> 00:13:11,926
other choices. What kind of testing strategies

198
00:13:11,958 --> 00:13:15,638
we have? Do we have manual testing? If we have manual testing,

199
00:13:15,734 --> 00:13:19,260
we will never have continuous deployment, right?

200
00:13:21,470 --> 00:13:25,418
Unit test, integration, end to end smoke acceptance performance.

201
00:13:25,514 --> 00:13:29,246
There is a lot of different tests, right? What are the environments, when we

202
00:13:29,268 --> 00:13:31,680
need to deploy our code,

203
00:13:32,790 --> 00:13:36,466
what we do between stages, what will happen between,

204
00:13:36,648 --> 00:13:39,886
for example, QA and release candidate,

205
00:13:39,998 --> 00:13:43,860
release candidate and production. This is also important,

206
00:13:44,390 --> 00:13:48,082
what kind of deployment strategies we have. Blue, green, blue, violet.

207
00:13:48,226 --> 00:13:50,710
Probably you could hear blue,

208
00:13:51,050 --> 00:13:54,642
something else, some other color. For me it is Violet,

209
00:13:54,706 --> 00:13:57,962
for me it doesn't make any difference because

210
00:13:58,016 --> 00:14:02,554
I have tendency to be colorblind. So who cares ab

211
00:14:02,672 --> 00:14:06,646
a deployment strategy, canary rolling, even recreate,

212
00:14:06,758 --> 00:14:10,060
right? And now think about if one team,

213
00:14:10,850 --> 00:14:14,254
we have these two components, which are talking with each other

214
00:14:14,372 --> 00:14:18,830
very closely, and one team deploys using canary

215
00:14:19,650 --> 00:14:22,510
and second deploys using recreate,

216
00:14:23,750 --> 00:14:27,380
right? What can happen?

217
00:14:30,230 --> 00:14:34,066
Because something may happen. So how you

218
00:14:34,088 --> 00:14:36,520
will deal with that? All right.

219
00:14:37,530 --> 00:14:41,426
In between somewhere we have artifact management. And here it's

220
00:14:41,458 --> 00:14:45,398
important, what kind of tools we use, how we create the

221
00:14:45,484 --> 00:14:48,886
naming conversion, how we version our naming conversion,

222
00:14:48,918 --> 00:14:52,250
how we version our artifacts,

223
00:14:52,750 --> 00:14:57,398
how we inform others about artifacts,

224
00:14:57,574 --> 00:15:01,834
what is the access management to those artifact storages, what is the integration?

225
00:15:01,962 --> 00:15:05,102
And here I was thinking

226
00:15:05,156 --> 00:15:08,958
a lot about that and I found that the best description for

227
00:15:09,044 --> 00:15:12,974
the integration in terms of artifacts management

228
00:15:13,022 --> 00:15:17,278
system is to say that it can be loosely integrated.

229
00:15:17,374 --> 00:15:20,734
Like for example, you have code pipeline,

230
00:15:20,782 --> 00:15:24,580
code deployment code deploy and you keep

231
00:15:25,370 --> 00:15:29,190
your artifacts in the s free storage, right? This is not part

232
00:15:29,260 --> 00:15:32,966
of the code pipeline service itself. Or we

233
00:15:32,988 --> 00:15:36,994
can have highly integrated, like for example in Azure

234
00:15:37,042 --> 00:15:40,522
DevOps, where you have the

235
00:15:40,576 --> 00:15:44,140
part of the tool itself is this artifact management system.

236
00:15:45,150 --> 00:15:48,474
And this may be also important because if you have this

237
00:15:48,512 --> 00:15:51,982
loosely integrated, probably there is

238
00:15:52,036 --> 00:15:58,842
a lot more actions

239
00:15:58,906 --> 00:16:02,602
needed. Let's say this as actions, right? Security access,

240
00:16:02,676 --> 00:16:05,646
et cetera, et cetera, et cetera, SDLC.

241
00:16:05,838 --> 00:16:09,630
In other words, do you use agile

242
00:16:09,790 --> 00:16:13,970
waterfall? What is the approach?

243
00:16:15,130 --> 00:16:18,946
And is this approach valid for your CI

244
00:16:18,978 --> 00:16:23,480
CD lifecycle? Is the CI CD itself

245
00:16:24,730 --> 00:16:28,518
treated as an internal or external product

246
00:16:28,604 --> 00:16:32,698
platform part, right. So this is also important

247
00:16:32,784 --> 00:16:36,250
to know, quality gates. This is quite simple,

248
00:16:36,320 --> 00:16:39,542
right? So what kind of type of quality gates we have? If we have manual

249
00:16:39,606 --> 00:16:42,960
quality gates, we do not have continuous deployment. I said that already.

250
00:16:43,570 --> 00:16:47,520
How we notify how we test

251
00:16:48,130 --> 00:16:52,202
stuff in gates, what kind of metrics we

252
00:16:52,356 --> 00:16:56,226
provide from those tests, what kind of delays we

253
00:16:56,248 --> 00:16:59,582
can allow, because some tests

254
00:16:59,646 --> 00:17:03,186
which are in quality grades, can be quite long and

255
00:17:03,208 --> 00:17:07,094
time consuming and even resource consuming. And if

256
00:17:07,132 --> 00:17:11,030
we have, let's say, the project to deliver

257
00:17:11,370 --> 00:17:15,126
every five minutes, we cannot allow to have 4 hours

258
00:17:15,228 --> 00:17:18,450
long tests, simple like that.

259
00:17:18,620 --> 00:17:22,490
So quality gates, understand the quality gates is also important,

260
00:17:22,640 --> 00:17:26,154
what kind of capabilities we have. And here we talk

261
00:17:26,192 --> 00:17:30,210
about the team composition, about the team maturity, team knowledge,

262
00:17:30,390 --> 00:17:33,818
it means experience, knowing of tools, et cetera,

263
00:17:33,834 --> 00:17:37,662
et cetera, collaboration between the teams and between the people

264
00:17:37,716 --> 00:17:41,278
inside the team, the topology of the

265
00:17:41,444 --> 00:17:45,170
organization, right? We talk about this in terms of organization,

266
00:17:45,750 --> 00:17:49,460
people constraints, what kind of tooling we have.

267
00:17:51,030 --> 00:17:55,380
So those are elements which we need to consider

268
00:17:56,090 --> 00:17:59,042
before we even go to the next slide,

269
00:17:59,186 --> 00:18:03,170
which is constraints, because honestly,

270
00:18:03,250 --> 00:18:07,538
all of those elements can be also your constraint.

271
00:18:07,714 --> 00:18:11,366
So your business type can be constraint. Probably you

272
00:18:11,388 --> 00:18:15,354
will have different approach to CICD when you own

273
00:18:15,392 --> 00:18:18,694
the company who presents the pictures of the cats

274
00:18:18,742 --> 00:18:22,382
in the Internet than you have,

275
00:18:22,436 --> 00:18:26,270
for example, I don't know, space mission

276
00:18:26,850 --> 00:18:30,286
company, right? And you are responsible for some kind

277
00:18:30,308 --> 00:18:33,970
of space mission when

278
00:18:34,040 --> 00:18:37,838
you cannot just use exactly the same tooling

279
00:18:37,934 --> 00:18:42,882
and the same approach or different

280
00:18:42,936 --> 00:18:46,166
constraints. For example, you need

281
00:18:46,188 --> 00:18:50,470
to keep your artifacts, you need to keep your backward compatibility

282
00:18:51,690 --> 00:18:54,742
for 20 years, because why not,

283
00:18:54,876 --> 00:18:59,126
right? Or your delivery process is quite heavy.

284
00:18:59,238 --> 00:19:03,542
For example, you need to deliver new software to all IoT

285
00:19:03,606 --> 00:19:07,110
devices in cars,

286
00:19:07,270 --> 00:19:10,778
and you have like millions of cars around the world. Your CI

287
00:19:10,794 --> 00:19:14,446
CD probably will look a little bit differently than just new part of

288
00:19:14,468 --> 00:19:17,422
the code in your PHP script for your site.

289
00:19:17,476 --> 00:19:20,800
For pictures of cut.

290
00:19:23,350 --> 00:19:26,146
What is the time constraint? This is also important,

291
00:19:26,248 --> 00:19:29,566
right? What is the security constraint?

292
00:19:29,678 --> 00:19:33,490
Tooling constraint, technical constraints

293
00:19:33,830 --> 00:19:37,154
for security. For example, if you are not

294
00:19:37,192 --> 00:19:40,546
allowed to use cloud based environments,

295
00:19:40,658 --> 00:19:44,178
you will not go with Travis Circle, CI, et cetera, et cetera, et cetera,

296
00:19:44,194 --> 00:19:46,280
because you cannot simple,

297
00:19:48,350 --> 00:19:51,546
what are the responsibilities? And here we talk

298
00:19:51,568 --> 00:19:55,578
about people, we talk about processes, we talk about contact

299
00:19:55,664 --> 00:19:58,566
points, escalations, path policies,

300
00:19:58,758 --> 00:20:01,886
times, procedures, et cetera, et cetera, et cetera, everything.

301
00:20:01,988 --> 00:20:05,806
What prepares us to

302
00:20:05,908 --> 00:20:09,774
act quickly and effectively, let's say this way

303
00:20:09,892 --> 00:20:14,958
releases. So release.

304
00:20:15,134 --> 00:20:19,346
Please have this in mind. Release doesn't mean

305
00:20:19,528 --> 00:20:23,330
deploy, right? Because you can have

306
00:20:23,400 --> 00:20:27,030
the SDLC constructed in that way that you, for example,

307
00:20:27,100 --> 00:20:31,160
have some kind of committee who accept or

308
00:20:31,690 --> 00:20:35,238
reject the changes, right? And if you have something

309
00:20:35,324 --> 00:20:39,350
like that in your SDLC, it will mean that you will never

310
00:20:39,420 --> 00:20:44,518
have continuous deployment. Simple rollbacks.

311
00:20:44,614 --> 00:20:48,314
And this is interesting part, because rollbacks generally we

312
00:20:48,352 --> 00:20:51,726
understand, like we have the code in version X,

313
00:20:51,828 --> 00:20:55,706
we have the code in version X, plus one, we deploy

314
00:20:55,738 --> 00:20:59,518
the version X plus one and something happened.

315
00:20:59,604 --> 00:21:02,762
We just come back to version X, right?

316
00:21:02,916 --> 00:21:06,802
And yes, this is correct. This is something,

317
00:21:06,856 --> 00:21:10,766
what we called rollback back, but we also have rollback

318
00:21:10,798 --> 00:21:14,610
forwards. That's interesting, right? And that

319
00:21:14,680 --> 00:21:17,800
sounds a little bit scary. Roll back forward,

320
00:21:19,050 --> 00:21:22,966
but okay, now if

321
00:21:22,988 --> 00:21:26,520
you have two microservices and one is

322
00:21:27,470 --> 00:21:31,180
treated with rollback back and second we roll back forward,

323
00:21:34,670 --> 00:21:37,580
right. You see my point here?

324
00:21:38,510 --> 00:21:42,310
But this is not only, but this, this is about rtos,

325
00:21:42,390 --> 00:21:46,190
rpos, restore time objective restore point objectives.

326
00:21:46,850 --> 00:21:49,950
Are we allowed to have any data loss?

327
00:21:50,770 --> 00:21:54,670
Do we need to have zero downtime event for rollbacks?

328
00:21:55,250 --> 00:21:58,722
What kind of granularity we have, right. Do we roll back everything

329
00:21:58,856 --> 00:22:02,580
or do we roll back just the one service or part of the service?

330
00:22:03,110 --> 00:22:06,486
What we do with databases, those questions we need to

331
00:22:06,508 --> 00:22:11,634
know and those questions should be answered

332
00:22:11,682 --> 00:22:15,522
on the organization level, really KPIs

333
00:22:15,666 --> 00:22:19,562
and here this topic is quite again

334
00:22:19,696 --> 00:22:23,020
beloved by us. Generally it means about,

335
00:22:23,710 --> 00:22:27,334
it is about the service level agreement, service level objectives,

336
00:22:27,462 --> 00:22:32,014
service level indicators, right? So if

337
00:22:32,052 --> 00:22:35,198
our process allows us to restore, for example,

338
00:22:35,284 --> 00:22:38,462
something or do some action in 4

339
00:22:38,516 --> 00:22:41,742
hours and there is no way to have

340
00:22:41,796 --> 00:22:45,506
this shorter, or we need to

341
00:22:45,608 --> 00:22:48,994
use these 4 hours for SLA, or we need to

342
00:22:49,032 --> 00:22:53,726
change our approach to fulfill shorter

343
00:22:53,758 --> 00:22:56,600
SLA, right. Simple like that.

344
00:22:56,970 --> 00:23:02,598
DevOps. And here we talk about composition of

345
00:23:02,604 --> 00:23:06,114
the DevOps part, let's say. So do we use this, what I hate

346
00:23:06,162 --> 00:23:09,786
really, DevOps engineer. So do we have DevOps engineer in

347
00:23:09,808 --> 00:23:14,266
the team? Do we have like a separate DevOps team

348
00:23:14,448 --> 00:23:17,946
outside the single teams? Maybe there is no

349
00:23:17,968 --> 00:23:21,194
DevOps at all as our role, what should be done.

350
00:23:21,232 --> 00:23:24,486
But anyway, what we do with automation,

351
00:23:24,598 --> 00:23:27,978
right? What we do with cooperation,

352
00:23:28,074 --> 00:23:31,920
feedbacks, how we treat feedback loops. Feedback loops and

353
00:23:32,470 --> 00:23:36,066
how we work with them. What kind of measurements in

354
00:23:36,088 --> 00:23:41,342
terms of DevOps, we have monitoring.

355
00:23:41,406 --> 00:23:45,158
And this is quite simple, how we monitor our pipelines, how we

356
00:23:45,164 --> 00:23:49,138
monitor the effectiveness

357
00:23:49,234 --> 00:23:52,498
of our pipelines, how we monitor stability

358
00:23:52,594 --> 00:23:55,894
of our pipelines. So here we talk about

359
00:23:55,932 --> 00:23:59,306
metrics, tools, responsibilities as well, what kind

360
00:23:59,328 --> 00:24:02,646
of events, actions, alerts and how we areas logs

361
00:24:02,678 --> 00:24:06,762
and metrics, right? And this part

362
00:24:06,816 --> 00:24:11,098
is technical when measurements

363
00:24:11,194 --> 00:24:14,862
are operational. Okay. And here we talk about something,

364
00:24:14,916 --> 00:24:19,086
what is called for example, Dora. So this

365
00:24:19,108 --> 00:24:23,406
is quite nice set of metrics created

366
00:24:23,438 --> 00:24:27,074
to measure DevOps. And Dora has four metrics, form based

367
00:24:27,112 --> 00:24:30,738
metrics which we can set up into two

368
00:24:30,824 --> 00:24:34,526
categories. One is throughput and here we have deployment

369
00:24:34,558 --> 00:24:38,214
frequency and lead cycle time. And the

370
00:24:38,252 --> 00:24:41,814
second is stability, where we

371
00:24:41,852 --> 00:24:44,600
have time to recover and change failure rate,

372
00:24:46,010 --> 00:24:49,862
those are taken from the monitoring

373
00:24:49,926 --> 00:24:53,334
stuff, partially at least, but are treated

374
00:24:53,382 --> 00:24:56,614
a little bit differently and the value stream.

375
00:24:56,742 --> 00:25:00,526
So generally if you look on

376
00:25:00,628 --> 00:25:05,454
CICD in most of the organizations and

377
00:25:05,492 --> 00:25:09,854
you will map your

378
00:25:09,892 --> 00:25:14,080
process, the big part of this process

379
00:25:16,130 --> 00:25:20,820
will be taken by CICD. What means really that

380
00:25:21,510 --> 00:25:25,706
you need to look on the CICD

381
00:25:25,758 --> 00:25:29,400
as a very integrated part of your

382
00:25:31,850 --> 00:25:35,190
whole chain of your value stream.

383
00:25:35,770 --> 00:25:38,726
So looking for all wasters,

384
00:25:38,838 --> 00:25:43,370
looking for all bottlenecks,

385
00:25:43,790 --> 00:25:47,162
problems, et cetera, et cetera, here will help you also

386
00:25:47,216 --> 00:25:50,670
to improve the value stream itself. All right,

387
00:25:50,820 --> 00:25:54,398
tools, it's quite simple,

388
00:25:54,484 --> 00:25:57,280
right? So what kind of tools we use,

389
00:25:57,650 --> 00:26:01,360
but not only that. For example,

390
00:26:01,810 --> 00:26:06,114
if you have three teams and those three teams areas using

391
00:26:06,232 --> 00:26:09,490
completely different tools, and what even worse,

392
00:26:09,830 --> 00:26:14,402
those free teams pay the licenses for

393
00:26:14,456 --> 00:26:19,286
those free tools, probably a

394
00:26:19,308 --> 00:26:22,934
lot of money is wasted. First of

395
00:26:22,972 --> 00:26:26,950
all, you have the kind of disintegrated

396
00:26:27,790 --> 00:26:31,420
common knowledge because all teams are using something else.

397
00:26:32,270 --> 00:26:35,898
And also you pay for three different licenses where you

398
00:26:35,904 --> 00:26:38,934
can pay only for one potentially,

399
00:26:39,062 --> 00:26:42,640
right? And this brings us back to

400
00:26:43,090 --> 00:26:47,326
convey slope to organization, to setup of

401
00:26:47,428 --> 00:26:50,234
everything around communication, et cetera.

402
00:26:50,282 --> 00:26:52,640
Right. Security. Finally,

403
00:26:53,830 --> 00:26:57,698
I published, not that recently, a couple of weeks ago,

404
00:26:57,784 --> 00:27:01,794
an update to my framework, this framework which I'm talking about

405
00:27:01,912 --> 00:27:05,750
right now, and there is a lot

406
00:27:05,820 --> 00:27:09,430
about the security, it becomes the biggest

407
00:27:10,090 --> 00:27:13,426
branch in this framework.

408
00:27:13,538 --> 00:27:17,046
But security is really important, right? And we have

409
00:27:17,068 --> 00:27:20,250
a couple of aspects here and

410
00:27:20,320 --> 00:27:23,530
this is the aspect of the security of the tool

411
00:27:23,600 --> 00:27:26,858
itself, of course, and this is the most obvious for us.

412
00:27:26,944 --> 00:27:30,640
But there is something else during the

413
00:27:32,050 --> 00:27:35,486
or inside the chain, we are

414
00:27:35,508 --> 00:27:39,150
somehow forced, at least part of some of us

415
00:27:39,220 --> 00:27:43,200
which are working for us government, for example,

416
00:27:43,810 --> 00:27:46,330
we are forced to generate s bombs,

417
00:27:46,490 --> 00:27:50,658
right? So software bill of materials and

418
00:27:50,744 --> 00:27:55,090
as this is already a law in us, this will be spread,

419
00:27:55,510 --> 00:27:58,854
this will be spread and more

420
00:27:58,892 --> 00:28:02,360
and more clients will expect

421
00:28:03,130 --> 00:28:06,546
to generate this kind of document

422
00:28:06,658 --> 00:28:09,210
into the pipeline. Inside the pipeline,

423
00:28:09,790 --> 00:28:10,860
what else?

424
00:28:13,710 --> 00:28:17,062
How we deal with the pipeline to secure

425
00:28:17,206 --> 00:28:21,230
any kind of injection, any kind of issue during

426
00:28:21,300 --> 00:28:22,830
the pipeline execution,

427
00:28:25,810 --> 00:28:30,670
how we deal with all required

428
00:28:31,250 --> 00:28:34,706
dependencies, how many of

429
00:28:34,728 --> 00:28:38,740
you are checking your dependencies in terms of security

430
00:28:39,190 --> 00:28:41,730
and dependencies of those dependencies,

431
00:28:42,630 --> 00:28:46,262
you know what I mean? Right. Especially when we talk about

432
00:28:46,396 --> 00:28:49,910
Python, when we talk about node js or JavaScript.

433
00:28:52,330 --> 00:28:57,154
In a broader perspective, there is tons

434
00:28:57,202 --> 00:29:00,426
of dependent libraries which

435
00:29:00,448 --> 00:29:03,980
you need to download, how often you check them,

436
00:29:04,590 --> 00:29:08,186
if they are secure or not. And all

437
00:29:08,208 --> 00:29:12,720
of this provides us into

438
00:29:13,170 --> 00:29:17,018
kind of mind map. And we can use this mind map

439
00:29:17,194 --> 00:29:20,366
to talk about the CI CD on the

440
00:29:20,388 --> 00:29:23,842
organization level and to

441
00:29:23,896 --> 00:29:27,602
see all elements which are

442
00:29:27,736 --> 00:29:31,602
needed to be taken into consideration, needed to be taken into the focus,

443
00:29:31,736 --> 00:29:35,178
needed to be improved, et cetera, et cetera, et cetera.

444
00:29:35,374 --> 00:29:39,126
And why I say that this is kind of architecture of

445
00:29:39,148 --> 00:29:42,680
the CI CD because it is very simple

446
00:29:43,930 --> 00:29:47,126
as we have on this side,

447
00:29:47,228 --> 00:29:52,982
all of those elements

448
00:29:53,126 --> 00:29:56,810
we discussed very shortly, but we discussed, we have

449
00:29:56,880 --> 00:30:01,226
also all of the quality attributes

450
00:30:01,418 --> 00:30:02,910
of the architecture,

451
00:30:04,450 --> 00:30:08,042
all those ETS capacities,

452
00:30:08,106 --> 00:30:10,830
scalability, interoperability,

453
00:30:11,250 --> 00:30:14,842
usability, security, et cetera, et cetera,

454
00:30:14,986 --> 00:30:19,294
right? So we can architect

455
00:30:19,342 --> 00:30:23,746
the vision from

456
00:30:23,768 --> 00:30:27,586
different perspectives, right? So the CI

457
00:30:27,618 --> 00:30:31,254
CD itself can look completely differently from different

458
00:30:31,292 --> 00:30:35,030
point of view. And why

459
00:30:35,100 --> 00:30:38,746
we would like to use this approach. And believe me, I use this

460
00:30:38,768 --> 00:30:41,130
a couple of times in real environment,

461
00:30:42,190 --> 00:30:45,226
in real action, let's say. And it works.

462
00:30:45,328 --> 00:30:49,174
It works perfectly fine. So why this approach?

463
00:30:49,302 --> 00:30:53,054
Because we can architect the vision, right? We can

464
00:30:53,172 --> 00:30:56,654
put all those points together in

465
00:30:56,692 --> 00:30:59,360
some relation to other points,

466
00:30:59,730 --> 00:31:03,938
to align the projects, to align the stakeholders and business together,

467
00:31:04,104 --> 00:31:08,082
to build a common understanding what is possible and

468
00:31:08,136 --> 00:31:11,954
what is not possible, right? And to unify the tech

469
00:31:11,992 --> 00:31:15,414
stack knowledge and to unify the people. And please

470
00:31:15,452 --> 00:31:19,794
remember, this is not about ordering all teams to use Jenkins.

471
00:31:19,922 --> 00:31:23,782
No. Right. It is about to think

472
00:31:23,916 --> 00:31:28,166
how we can improve the collaboration in

473
00:31:28,188 --> 00:31:29,900
terms of tooling as well.

474
00:31:31,470 --> 00:31:35,046
And I tend to call it as kind of Rosetta Stone of CICD.

475
00:31:35,078 --> 00:31:38,938
And I see that they have typo here because

476
00:31:39,024 --> 00:31:42,670
this is a translation point. This is translation point for business.

477
00:31:42,740 --> 00:31:47,002
This is translation point for the stakeholders, for engineers,

478
00:31:47,146 --> 00:31:50,574
for architects, and also for the security. And you can

479
00:31:50,612 --> 00:31:54,114
bring all those people in one room and talk with

480
00:31:54,152 --> 00:31:57,634
them at the same time. All right? And this is also

481
00:31:57,672 --> 00:32:00,980
what I've done and this is very

482
00:32:01,830 --> 00:32:05,362
valuable here to have the broad

483
00:32:05,426 --> 00:32:09,240
understanding on, let's call it

484
00:32:10,090 --> 00:32:13,622
enough level for all those

485
00:32:13,676 --> 00:32:17,800
parties which are participating in your organization success.

486
00:32:18,270 --> 00:32:21,994
Because on the end of the day, it's not the team or

487
00:32:22,032 --> 00:32:25,846
DevOps or QA or whatever, the one team who sells

488
00:32:25,878 --> 00:32:29,994
the product organization does it.

489
00:32:30,112 --> 00:32:33,454
Right? So thank you very much. I hope it was

490
00:32:33,492 --> 00:32:37,390
useful for you. If you have any questions, you can

491
00:32:37,540 --> 00:32:40,766
reach me on my LinkedIn. And if

492
00:32:40,788 --> 00:32:45,280
you are interested in this framework, if I make any

493
00:32:46,530 --> 00:32:50,560
thinking process happening in your minds right now,

494
00:32:51,010 --> 00:32:54,170
you can go into WW CICD

495
00:32:54,250 --> 00:32:57,926
run and there is this framework where you

496
00:32:57,948 --> 00:33:01,670
can download this mind map in the most current version.

497
00:33:02,410 --> 00:33:06,422
So thank you very much and enjoy rest

498
00:33:06,556 --> 00:33:09,974
of the day and see

499
00:33:10,012 --> 00:33:13,526
you somewhere else very soon. Thank you

500
00:33:13,548 --> 00:33:13,780
very much.

