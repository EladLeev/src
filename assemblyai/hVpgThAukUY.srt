1
00:00:17,690 --> 00:00:20,926
Hello, my name is Joe Carlson and you

2
00:00:20,948 --> 00:00:24,506
are here for an introduction to IoT Internet

3
00:00:24,538 --> 00:00:27,906
of Toy. This is supposed to be a gentle introduction

4
00:00:27,938 --> 00:00:31,366
to the Internet of things or like how to get started

5
00:00:31,388 --> 00:00:35,602
with programming with hardware, with JavaScript

6
00:00:35,666 --> 00:00:39,890
and Nodejs. What quick introduction?

7
00:00:40,050 --> 00:00:43,058
We don't have a lot of time here today, but I thought, hey, my name

8
00:00:43,084 --> 00:00:46,278
is Joe, I work for a company called MongodB and I'm a developer

9
00:00:46,294 --> 00:00:49,806
advocate and software engineer. If you want to hang out with me, I'm going to

10
00:00:49,808 --> 00:00:51,946
be posting at the end, but you can find me on Twitter. It's the best

11
00:00:51,968 --> 00:00:53,966
way to get a hold of me. And actually this may be the first time

12
00:00:53,988 --> 00:00:57,440
you see this, but I'm also on TikTok. Who knew?

13
00:00:58,050 --> 00:01:01,146
If you want to follow along with any of the resources, include the slides,

14
00:01:01,258 --> 00:01:04,946
recording of this video, any resources, and the code I use in

15
00:01:04,968 --> 00:01:08,526
this deck. You can totally check that out at that QR code in the upper

16
00:01:08,558 --> 00:01:11,620
right hand corner, or at that bitly link.

17
00:01:12,870 --> 00:01:16,094
And most importantly, if I say anything controversial

18
00:01:16,142 --> 00:01:19,698
today, just know that those opinions are my own and not my employer. Please don't

19
00:01:19,714 --> 00:01:23,014
get me fired. And let's jump in here.

20
00:01:23,132 --> 00:01:25,766
So what are we going to talk about today? First thing, I just want to

21
00:01:25,788 --> 00:01:29,238
introduce IoT, like what is it? How do we use it? Then I want

22
00:01:29,244 --> 00:01:32,470
to talk about why you should be considering JavaScript and node for your next IoT

23
00:01:32,550 --> 00:01:36,522
project. I'm also going to be talking about a practical project

24
00:01:36,576 --> 00:01:40,294
I recently built. It's my Internet connected smart

25
00:01:40,342 --> 00:01:43,280
kitty litter box. What?

26
00:01:43,730 --> 00:01:47,150
And then lastly, I love making wild speculations about the future.

27
00:01:47,300 --> 00:01:50,778
So we're going to be talking about my predictions for the future of IoT.

28
00:01:50,954 --> 00:01:54,478
So stick around if you want to check that out. You can

29
00:01:54,484 --> 00:01:57,682
play this back in five years from now to see how embarrassingly wrong

30
00:01:57,736 --> 00:02:01,106
I was about all these two, which is fun. So what the

31
00:02:01,128 --> 00:02:04,562
heck is IoT? What is this thing? What is this Iot thing? Well,

32
00:02:04,616 --> 00:02:08,046
basically it's just anything. It's basically anything you put a chip in.

33
00:02:08,088 --> 00:02:11,762
Anything you put a chip in. It's just the Internet, but we put physical hardware

34
00:02:11,826 --> 00:02:14,966
and stuff on it. You've probably seen a bunch of it.

35
00:02:14,988 --> 00:02:18,554
Fitbit smartwatches, rings, google nests and homes, whatever,

36
00:02:18,592 --> 00:02:21,750
right? But my favorite part about IoT,

37
00:02:21,830 --> 00:02:25,238
it's the stupid shit. I love the stupid parts about IoT.

38
00:02:25,334 --> 00:02:27,610
I love the weird little dumb project.

39
00:02:29,470 --> 00:02:32,766
I love straddling that line between something that's kind of like totally ridiculous and

40
00:02:32,788 --> 00:02:36,110
dumb and totally smart. I think that there is

41
00:02:36,180 --> 00:02:39,934
actually kind of a new wave of art coming

42
00:02:39,972 --> 00:02:44,214
about from Internet connected devices, and I think us as developers and programmers

43
00:02:44,282 --> 00:02:47,140
are uniquely positioned to explore that space.

44
00:02:47,910 --> 00:02:51,940
A lot of artists don't know how to actually do programming, but we do.

45
00:02:52,310 --> 00:02:55,902
I think that that's fascinating. I think that's absolutely fascinating,

46
00:02:56,046 --> 00:02:59,006
and I love exploring that line. I have a bunch of projects,

47
00:02:59,038 --> 00:03:02,678
you can check those out on my website, joecarlson.com, if you're curious. We don't

48
00:03:02,684 --> 00:03:06,246
have time to get into those today though. Okay, so why should

49
00:03:06,268 --> 00:03:09,500
you be considering Javascript for your next IoT project?

50
00:03:10,670 --> 00:03:12,380
Let's dig into it together.

51
00:03:13,470 --> 00:03:17,178
So did you know that actually 58%

52
00:03:17,264 --> 00:03:20,506
of IoT developers self identify as

53
00:03:20,528 --> 00:03:23,814
node JS developers? What? It's huge. That's a quorum.

54
00:03:23,862 --> 00:03:26,400
I think that's what that word means, but that's a lot of people, right?

55
00:03:26,930 --> 00:03:30,314
I would also argue this is total opinion, but JavaScript

56
00:03:30,362 --> 00:03:33,706
makes a great choice for new developers. A lot of developers

57
00:03:33,738 --> 00:03:36,658
are coming out of boot camps and colleges are learning node and JavaScript. It's a

58
00:03:36,664 --> 00:03:39,314
great language to learn. I know there's Python and Java heads all over the place

59
00:03:39,352 --> 00:03:42,974
too, but traditionally embedded software

60
00:03:43,022 --> 00:03:46,834
has typically been programmed with a lower level programming language like C

61
00:03:46,872 --> 00:03:50,046
or C plus plus or now with rust. And these

62
00:03:50,088 --> 00:03:53,954
are really difficult to develop for because you have to worry. But memory management JavaScript

63
00:03:54,002 --> 00:03:57,526
has a garbage collector built into the language, so we don't have to worry about

64
00:03:57,548 --> 00:04:00,442
that, and it makes it a great choice for new developers to pick up.

65
00:04:00,496 --> 00:04:03,114
So if you want to learn hardware, JavaScript is a great place to start.

66
00:04:03,152 --> 00:04:07,978
And you can build IoT devices, servers and full

67
00:04:08,144 --> 00:04:10,780
service web pages on top of that.

68
00:04:11,230 --> 00:04:14,906
Let's talk about updating. So traditionally with an embedded

69
00:04:14,938 --> 00:04:18,366
device, you have to actually secure the actual device, plug it in,

70
00:04:18,388 --> 00:04:21,806
and reflash that with a new code on it to get it updated IoT.

71
00:04:21,828 --> 00:04:24,698
So with JavaScript, right, with JavaScript all I have to do is do a git

72
00:04:24,714 --> 00:04:27,778
pull and NPM install and boom, it's done. If it's connected to

73
00:04:27,784 --> 00:04:30,978
the Internet already, if you have a git client installed on there, which with a

74
00:04:30,984 --> 00:04:34,370
raspberry PI is totally doable, it's mega easy to do updates.

75
00:04:35,270 --> 00:04:38,260
Internet's already speaking JavaScript, this is my opinion. Right,

76
00:04:38,630 --> 00:04:41,766
but why not just use the language you're already using for

77
00:04:41,788 --> 00:04:45,670
speaking on the web and transfer to this new

78
00:04:45,740 --> 00:04:48,650
frontier of devices? I think that's kind of exciting.

79
00:04:49,230 --> 00:04:52,902
And did you know there's actually a vibrant ecosystem

80
00:04:52,966 --> 00:04:56,714
of JavaScript tools, libraries and APIs available to

81
00:04:56,752 --> 00:05:00,486
make hardware projects? The two big ones on the market today are Cylon

82
00:05:00,518 --> 00:05:04,118
Js and Johnny five. For my Internet connected smart kitty

83
00:05:04,134 --> 00:05:07,694
litter box, I'm actually using Johnny five. We're digging into that hello world

84
00:05:07,732 --> 00:05:11,518
together as well. I wanted you to

85
00:05:11,524 --> 00:05:14,746
think about a typical use case for a IoT device.

86
00:05:14,938 --> 00:05:18,734
Typically what you have is some sort of Internet connected chip or hardware

87
00:05:18,782 --> 00:05:21,906
that has a sensors out in the real world. And when that sensor detects some

88
00:05:21,928 --> 00:05:26,446
sort of event, something happens. For example, maybe you have a luminescent

89
00:05:26,478 --> 00:05:29,746
sensors that determines how bright something is. And when

90
00:05:29,768 --> 00:05:33,222
it reaches some sort of level of luminescence, then you want to have something

91
00:05:33,276 --> 00:05:36,086
happen, like a light bulb turn on or off or something like that.

92
00:05:36,188 --> 00:05:40,460
But if you think about it, it's an event driven app

93
00:05:40,830 --> 00:05:44,246
node. At its core is an event driven app programming

94
00:05:44,278 --> 00:05:48,294
language, right? We use callback functions and promises, and now async await,

95
00:05:48,342 --> 00:05:51,610
which is just async tactical trigger for promises, right?

96
00:05:51,680 --> 00:05:54,926
But for handling asynchronous events that

97
00:05:54,948 --> 00:05:58,334
are happening even on the front end, right? We have some sort of click

98
00:05:58,372 --> 00:06:01,440
event triggers, a callback function to do some sort of thing.

99
00:06:02,530 --> 00:06:06,622
JavaScript and Nodejs core structure directly

100
00:06:06,686 --> 00:06:09,906
translates how we develop applications with hardware and

101
00:06:09,928 --> 00:06:12,846
sensors. It's a perfect marriage,

102
00:06:12,878 --> 00:06:16,174
honestly. Okay, that's a bunch of great reasons

103
00:06:16,222 --> 00:06:19,640
why I personally think that Javascript is a great language for using it.

104
00:06:20,410 --> 00:06:23,766
And there are other considerations too, like memory management, other things which

105
00:06:23,788 --> 00:06:27,926
you might want to consider other languages for. But if

106
00:06:27,948 --> 00:06:31,274
it's your first project, just do what you know, just go out there and try

107
00:06:31,312 --> 00:06:34,282
it. Okay, my favorite part,

108
00:06:34,336 --> 00:06:37,562
let's talk about my Internet connect litter box. I love

109
00:06:37,616 --> 00:06:40,742
jumping into some practical projects while doing these presentations,

110
00:06:40,886 --> 00:06:44,982
but what does things thing actually look like? Here's actually the real

111
00:06:45,136 --> 00:06:49,006
finished product. I've got a little mid century fancy little box,

112
00:06:49,108 --> 00:06:51,534
and you can see a little cable coming out of the back of that thing,

113
00:06:51,572 --> 00:06:55,006
but it's actually pretty hidden in there, right? Like I said,

114
00:06:55,028 --> 00:06:58,754
I'm obsessed with the stupid ideas, but I did some homework after I built

115
00:06:58,792 --> 00:07:01,938
this, and it turns out this actually might Iot be a bad idea, right?

116
00:07:02,024 --> 00:07:05,774
People actually are spending up to $500 on decently well reviewed

117
00:07:05,822 --> 00:07:09,634
Internet connected smart kitty litter boxes. Mine's not quite as fancy as this,

118
00:07:09,672 --> 00:07:12,818
but Iot could be with a little bit more effort, right? I don't

119
00:07:12,834 --> 00:07:16,006
know, I think that there's something uniquely special about that. Okay, so what

120
00:07:16,028 --> 00:07:19,880
does my box actually do? So how does this work?

121
00:07:20,490 --> 00:07:23,846
There's a switch on the door, and when that lid is lifted

122
00:07:23,878 --> 00:07:27,546
off it goes into maintenance mode. Maintenance mode basically means I'm either cleaning or

123
00:07:27,568 --> 00:07:30,966
adding additional litter to the box. This basically means that the box weight

124
00:07:30,998 --> 00:07:34,206
is going to be changing when this lid is open. So once I put

125
00:07:34,228 --> 00:07:37,502
that lid back on, what I do is I have basically a really

126
00:07:37,556 --> 00:07:41,326
fancy Internet connected bathroom scale. And what IoT does is

127
00:07:41,348 --> 00:07:45,200
it reinitializes the base weight once that lid has been back on the box.

128
00:07:45,650 --> 00:07:49,698
Then we do the waiting game and we wait for some sort of cat size

129
00:07:49,784 --> 00:07:53,278
object to enter the box. I'm not smart

130
00:07:53,294 --> 00:07:57,282
enough to determine if it's like an opossum or raccoon or whatever, a small

131
00:07:57,336 --> 00:08:00,790
human, I don't know. But we're waiting for a small cats

132
00:08:00,860 --> 00:08:04,326
sized object to enter that box. We're waiting for that weight to be

133
00:08:04,348 --> 00:08:08,146
placed on the actual litter pad to detect it. So let's

134
00:08:08,178 --> 00:08:11,338
assume we have an actual cat and it's detected in the

135
00:08:11,344 --> 00:08:14,634
box. We have that weight gain on it. It does its business,

136
00:08:14,752 --> 00:08:18,470
and it does two things. It takes a passive measurement of my cat's weight

137
00:08:18,550 --> 00:08:22,106
and a timestamp of when that bathroom event happens.

138
00:08:22,208 --> 00:08:25,998
So I can passively keep track of my cat's weight over time, and I

139
00:08:26,004 --> 00:08:28,606
can keep track of the number of times he's using the restroom to see if

140
00:08:28,628 --> 00:08:31,950
there is drastic changes over time with these health

141
00:08:32,020 --> 00:08:35,674
indicators. Right. So once the cat has evacuated

142
00:08:35,722 --> 00:08:39,154
the box, done as biz, what we do is we reset with a brand new

143
00:08:39,192 --> 00:08:41,810
base weight of the box, and then we just wait for a new event,

144
00:08:41,880 --> 00:08:45,426
whether it is a maintenance event or a cat or cat

145
00:08:45,448 --> 00:08:49,054
size object entering the box. Again. Oh,

146
00:08:49,112 --> 00:08:52,598
let's check out some code. Nice. All right, again, if you

147
00:08:52,604 --> 00:08:56,038
want to check out all the code, bitly link or that QR code in

148
00:08:56,044 --> 00:08:59,862
the upper right hand corner. So, hello world, it's our first thing we always

149
00:08:59,916 --> 00:09:03,050
do with a Internet connected device or IoT device.

150
00:09:03,470 --> 00:09:07,046
An IoT equivalent of a hello world is just making that dang

151
00:09:07,078 --> 00:09:10,582
led blink. And this is actually my real pie, making a real led blink

152
00:09:10,646 --> 00:09:14,314
with a real Johnny five code base just blinking on and

153
00:09:14,352 --> 00:09:17,342
off. That's all we do. You can see my sensors and stuff all the side

154
00:09:17,396 --> 00:09:21,422
getting ready to go, but we just have that initial making

155
00:09:21,476 --> 00:09:24,640
sure everything's set up correctly. But what does that actually look like with the code?

156
00:09:25,010 --> 00:09:28,706
So we're requiring our Johnny five package. Johnny five works a bunch of

157
00:09:28,728 --> 00:09:32,110
different chips and cards and hardware.

158
00:09:32,190 --> 00:09:35,726
So we're actually telling Johnny five, hey, you're going to be interacting with a raspberry

159
00:09:35,758 --> 00:09:39,506
PI today. I said, okay, cool. So we want to initiate instantiate,

160
00:09:39,538 --> 00:09:43,574
a brand new instance that board of a raspberry PI board. So we can start

161
00:09:43,612 --> 00:09:47,414
working with that board in memory. And we have a callback function,

162
00:09:47,532 --> 00:09:51,346
an event driven right. And when that board has been ready to start receiving

163
00:09:51,378 --> 00:09:54,874
events, we instantiate a brand new led. And on the P

164
00:09:54,912 --> 00:09:58,234
113, I have no idea what that is, but I have to google every single

165
00:09:58,272 --> 00:10:01,526
time. Literally, I'm messing with a PI. But it's what GPIO pin

166
00:10:01,558 --> 00:10:05,254
or the general purpose input output pins? Those basically allow us to

167
00:10:05,392 --> 00:10:08,606
interact with the real world on a pie. But we're saying on

168
00:10:08,628 --> 00:10:11,306
the 13th pin, on this pie, what I want you to do is just blink

169
00:10:11,338 --> 00:10:15,246
on and off. Johnny five is a built in functions for leds

170
00:10:15,278 --> 00:10:17,698
that can do a bunch of different stuff. But all we're saying is there's an

171
00:10:17,704 --> 00:10:22,370
Led on the 13th pin. Make it blank easy.

172
00:10:22,440 --> 00:10:25,746
Right? That's it. That's it. That's how you get

173
00:10:25,768 --> 00:10:28,120
an Led to blank with Johnny five on a pie.

174
00:10:29,130 --> 00:10:32,822
That's all it took. Super easy. Okay,

175
00:10:32,876 --> 00:10:37,160
let's get to some fun stuff, huh? We gotta go through this again.

176
00:10:37,530 --> 00:10:40,582
All right, let's make a toilet. So we got the hello world.

177
00:10:40,636 --> 00:10:44,138
Our board's initialized. We good, right? We good. So what do

178
00:10:44,144 --> 00:10:47,366
we do? We got to wait for our board to be ready. But all I'm

179
00:10:47,398 --> 00:10:50,694
doing now, instead of an LEd, I'm using that switch, right? That magnetic

180
00:10:50,742 --> 00:10:54,614
switch on the door that determines whether it's in maintenance mode. And when that event

181
00:10:54,672 --> 00:10:58,334
is either open or closed, I just change the state of the application whether

182
00:10:58,372 --> 00:11:02,094
it's in maintenance mode or not. So let's actually see things in practice. Sorry,

183
00:11:02,132 --> 00:11:05,770
this is a terrible video, but it's all I got. I'm so sorry. So you're

184
00:11:06,270 --> 00:11:08,378
going to see the little white thing on the board there. That's the magnetic switch

185
00:11:08,394 --> 00:11:11,066
I got screwed into the side there. And I'm opening and closing the door.

186
00:11:11,098 --> 00:11:14,238
And on my laptop, you can see that those open and closed events are being

187
00:11:14,244 --> 00:11:17,330
triggered by Johnny five. Woohoo.

188
00:11:17,410 --> 00:11:21,062
Right? Okay, here's the fun

189
00:11:21,116 --> 00:11:24,054
part. I love this. I learned a lot. It's going to have to go fast,

190
00:11:24,092 --> 00:11:26,418
so we only got 10 minutes left. I'm so sorry, y'all.

191
00:11:26,514 --> 00:11:30,274
But load cells again, this is a fancy Internet connected

192
00:11:30,322 --> 00:11:33,850
bathroom scales type things that measures the cat's weight. I actually couldn't find

193
00:11:33,920 --> 00:11:37,110
a node package that could interact with the load cells I bought.

194
00:11:37,270 --> 00:11:40,346
Whoops. But I did find a python package. And I've messed around

195
00:11:40,368 --> 00:11:42,586
with a bunch of stuff for a long time, but I actually got to play

196
00:11:42,608 --> 00:11:45,946
with the spongehold. Process nodejs function. It's a core

197
00:11:45,978 --> 00:11:49,694
function, right? It allows you to spin off on a separate thread, other stuff

198
00:11:49,732 --> 00:11:53,362
that's not even node. Right? I'm spinning off a python script from

199
00:11:53,416 --> 00:11:57,234
the main event loop on a separate thread to

200
00:11:57,272 --> 00:12:00,686
run this constantly. And what it's doing is this python

201
00:12:00,718 --> 00:12:04,526
script. It just reads the weight

202
00:12:04,558 --> 00:12:06,740
from the load cells every 10th of a second,

203
00:12:07,910 --> 00:12:11,414
and you're sending that out as standard input on the python script, and it is

204
00:12:11,452 --> 00:12:14,694
received by the process that spawned it on node as

205
00:12:14,732 --> 00:12:18,114
data. And I just parse the int or parse the float,

206
00:12:18,242 --> 00:12:21,378
and we update the weight for that thing every 10th

207
00:12:21,394 --> 00:12:24,758
of a second, constantly reading it. You can

208
00:12:24,764 --> 00:12:28,054
do error enclosed states, whatever, not a big deal, right? But the cool part is

209
00:12:28,092 --> 00:12:31,758
using that spawn child process and mixing languages to get this actually work. It's a

210
00:12:31,764 --> 00:12:33,998
little bit of a hack to admit, but it's super cool. And I love that.

211
00:12:34,004 --> 00:12:36,400
I got to explain things for real this time.

212
00:12:37,090 --> 00:12:39,614
Okay, so let's see what this looks like in practice. You can see the actual

213
00:12:39,652 --> 00:12:42,318
piece of plywood has the load cells underneath of it. That's why we put the

214
00:12:42,324 --> 00:12:46,734
box on. You can see here it's reading numbers. And I'm pressing

215
00:12:46,782 --> 00:12:49,826
on there and I'll show you. Just a second. Press. Right,

216
00:12:50,008 --> 00:12:53,710
press. And you can see that those weight measurements are being registered on my laptop

217
00:12:53,790 --> 00:12:57,220
every single time I'm pressing on that board.

218
00:12:57,910 --> 00:13:01,538
Not the greatest for you. I'm so sorry, but those load cells

219
00:13:01,554 --> 00:13:05,202
are being received by our node application. So now we have the maintenance

220
00:13:05,266 --> 00:13:08,726
mode, that switch, and we have that load cells registering weight from the

221
00:13:08,748 --> 00:13:11,754
box. Awesome. What are we going to do with all this

222
00:13:11,792 --> 00:13:15,226
data? What I'm doing is actually, I'm going to show you quickly an

223
00:13:15,248 --> 00:13:18,506
IoT time series data. I'm saving this,

224
00:13:18,528 --> 00:13:22,166
obviously in a MongoDB database because it works super well for IoT time series

225
00:13:22,198 --> 00:13:25,614
projects. And I'm saving it in a time series project because typically if you think

226
00:13:25,652 --> 00:13:29,134
about this, most IoT projects are being saved and

227
00:13:29,172 --> 00:13:32,462
reported on some sort of dashboard, so you can see real time results of

228
00:13:32,516 --> 00:13:36,126
whatever's happening. I'm doing the same thing. We have a web application that shows

229
00:13:36,148 --> 00:13:40,020
you a real time stats of my cat's bathroom behavior over time.

230
00:13:40,390 --> 00:13:43,426
I design the schema based on how I'm going to be reading that data,

231
00:13:43,528 --> 00:13:46,466
and the time series makes a lot of sense. So what does it actually look

232
00:13:46,488 --> 00:13:49,938
like with a MongoDB document? I'm glad you asked. We have a bunch

233
00:13:49,954 --> 00:13:53,414
of metadata about what's going on, but I make a brand new

234
00:13:53,452 --> 00:13:57,446
document in MongoDB every single day. And what

235
00:13:57,468 --> 00:14:00,806
I'm doing is I have an array of events, right, that events thing there at

236
00:14:00,828 --> 00:14:04,522
the bottom. And I'm keeping track of a timestamp and a weight and the type

237
00:14:04,576 --> 00:14:07,690
of event that's occurring, whether it's a maintenance event,

238
00:14:07,760 --> 00:14:11,306
a bathroom event. And I want to keep track of, passively keep track of my

239
00:14:11,328 --> 00:14:14,470
weights, my cat's weight, and the time that he went

240
00:14:14,480 --> 00:14:17,566
to the bathroom. And this can go as

241
00:14:17,588 --> 00:14:20,702
much as possible, right? We're going to probably only have a couple

242
00:14:20,756 --> 00:14:24,826
events per day. We're not going to have infinite amount, but the something's probably seriously

243
00:14:24,858 --> 00:14:28,900
wrong. But this is a perfect use case for how I'm reading that data.

244
00:14:29,590 --> 00:14:32,494
The other thing that works really well with this too, is MongoDB has a flexible

245
00:14:32,542 --> 00:14:36,254
schema. So I added that additional door sensor to keep track of the maintenance

246
00:14:36,302 --> 00:14:39,766
weight. I just updated that time series schema and it was

247
00:14:39,788 --> 00:14:42,040
super easy. I didn't even care about the old data.

248
00:14:43,050 --> 00:14:46,726
From now on, if I added additional sensors in the future, I would

249
00:14:46,748 --> 00:14:50,034
just update the time series data. It takes literally seconds,

250
00:14:50,082 --> 00:14:52,566
right? I don't have to worry about the old data. I can if I want

251
00:14:52,588 --> 00:14:55,754
to. I could update everything else if I wanted to, but I don't have to.

252
00:14:55,792 --> 00:14:58,346
And for a time series day like this, it makes so much sense that I

253
00:14:58,368 --> 00:15:01,914
don't have to do that. Okay, let's see the whole

254
00:15:01,952 --> 00:15:05,466
thing put together. Iot.

255
00:15:05,488 --> 00:15:09,120
That raspberry got that

256
00:15:10,130 --> 00:15:13,438
sliding doors back on and plug it in and you're done, right? I think it

257
00:15:13,444 --> 00:15:16,850
hides away pretty good. It's pretty easy to see, and it looks great.

258
00:15:17,000 --> 00:15:21,410
You could use a cheaper box if you wanted, but like, hey, I'm extra

259
00:15:21,480 --> 00:15:23,860
and I wanted something fancy for my cat, so sue me.

260
00:15:24,950 --> 00:15:27,894
There he is at the end. I added bribe matrix to sit on there.

261
00:15:28,012 --> 00:15:31,158
There he is at the end. I added bribe matrix to sit on there at

262
00:15:31,164 --> 00:15:34,758
the end of the photo shoot. Okay,

263
00:15:34,924 --> 00:15:36,790
time for some wild speculation.

264
00:15:38,730 --> 00:15:42,458
We're using to see smaller and more powerful hardware devices. I think this

265
00:15:42,464 --> 00:15:45,414
is going to mean that we're going to see additional compute power on the edge,

266
00:15:45,462 --> 00:15:49,340
which basically means right now what's happening. A lot of our devices are

267
00:15:49,710 --> 00:15:53,142
sending the raw data back to a central server in the cloud somewhere

268
00:15:53,206 --> 00:15:55,838
to actually process that data. I think we're going to actually see more of that

269
00:15:55,844 --> 00:15:59,406
data processing happening on the edge in the actual IoT devices in

270
00:15:59,428 --> 00:16:02,542
the field as they get more powerful. It's already happening.

271
00:16:02,676 --> 00:16:06,146
I did it with this project, we're going to see a continued increase in that

272
00:16:06,168 --> 00:16:10,462
happening. I think we're going to see Javascript more optimized for hardware

273
00:16:10,526 --> 00:16:14,546
devices, right? Smaller, lighter, smaller footprints, easier to

274
00:16:14,568 --> 00:16:18,514
run. I think there's incentive because there's just such a massive

275
00:16:18,562 --> 00:16:22,358
developer community devoted to JavaScript that it's going to continue to

276
00:16:22,364 --> 00:16:26,082
get more optimized for these specialty use cases. We'll see additional

277
00:16:26,146 --> 00:16:29,426
hardware support. I already ran into this issue with the load

278
00:16:29,458 --> 00:16:31,834
cells not working the way I expected them to. I think we're going to see

279
00:16:31,872 --> 00:16:35,226
additional support growing in the future as more and more developers are

280
00:16:35,248 --> 00:16:39,206
using node and JavaScript to interact with hardware. And lastly,

281
00:16:39,238 --> 00:16:41,980
this is true for just hardware in general.

282
00:16:42,750 --> 00:16:46,538
The batteries are and will continue to be the bottleneck. It will not be compute

283
00:16:46,554 --> 00:16:50,158
power. As the devices get more and more powerful, we're going to

284
00:16:50,164 --> 00:16:53,294
see continued reliance. It's going to get hotter and hotter and do more stuff,

285
00:16:53,332 --> 00:16:56,306
and it's going to require more energy to do that. We're seeing but their cell

286
00:16:56,328 --> 00:16:59,966
phones too, right? Like they're getting more and more powerful, but battery

287
00:16:59,998 --> 00:17:03,762
life is not getting better. There's optimizations of software to make them

288
00:17:03,816 --> 00:17:07,682
last longer, but it's still enormously difficult. And bottlenecks

289
00:17:07,826 --> 00:17:09,990
continue to be on the batteries.

290
00:17:10,890 --> 00:17:14,978
All right, we're almost done here, but let's say hypothetically,

291
00:17:15,074 --> 00:17:18,466
I've inspired you to want to try but some IoT and some hardware

292
00:17:18,498 --> 00:17:21,020
for your next project. How do you go about doing that?

293
00:17:22,670 --> 00:17:25,738
I might have a weird brain, but how I do it, I just do it.

294
00:17:25,824 --> 00:17:29,398
Get out there, pick a dumb project, just go buy a raspberry

295
00:17:29,414 --> 00:17:33,018
PI flex $35 and just try making an led blink. Try making

296
00:17:33,104 --> 00:17:36,510
a plant moisture sensor. Make something Google.

297
00:17:36,580 --> 00:17:39,614
There's a ton of raspberry PI projects out there, but try to make one.

298
00:17:39,732 --> 00:17:42,734
And every time you get stuck in something, just google IoT and try to figure

299
00:17:42,772 --> 00:17:46,274
it out. I think the best way to learn how to do something is to

300
00:17:46,312 --> 00:17:50,130
program and actually get your hands dirty. Also,

301
00:17:50,200 --> 00:17:53,646
if you are planning on using a project, you should totally

302
00:17:53,678 --> 00:17:56,734
check out MongoDB. It's so optimized for IoT

303
00:17:56,862 --> 00:17:59,998
types of data, including time series data and schemas.

304
00:18:00,094 --> 00:18:02,790
If you have any questions about things, stuff or want to chat about it,

305
00:18:02,940 --> 00:18:05,286
Twitter is the best way to get a hold of me and I'd love to

306
00:18:05,308 --> 00:18:08,280
talk about it with you and try to figure out your situation.

307
00:18:09,290 --> 00:18:12,614
But I just want to say thank you so much for having me here.

308
00:18:12,652 --> 00:18:15,846
I so much appreciate being a part of this community. It's incredible and I'm so

309
00:18:15,868 --> 00:18:19,158
honored to be invited to be here. It's incredible. And I'm so honored to

310
00:18:19,164 --> 00:18:22,654
be invited to be here. You again. If you want any of the resources I

311
00:18:22,692 --> 00:18:26,014
chatted about, including slides, this video code,

312
00:18:26,132 --> 00:18:29,150
whatever, you can check it out at that. And please,

313
00:18:29,220 --> 00:18:31,918
please, best way to get a hold of me is on Twitter, so I'd love

314
00:18:31,924 --> 00:18:35,978
to see you there and resources.

315
00:18:36,154 --> 00:18:39,774
But thank you so much, everyone. You're the best. I had so much fun.

316
00:18:39,972 --> 00:18:41,390
Hopefully to see you soon.

