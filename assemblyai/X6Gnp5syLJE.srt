1
00:00:27,410 --> 00:00:30,834
Good day ladies and gentlemen. I extend my heartfelt gratitude

2
00:00:30,882 --> 00:00:33,778
for joining me today. My name is Akshay Bhat.

3
00:00:33,874 --> 00:00:37,814
I am genuinely thrilled to be your guide on a fascinating journey where

4
00:00:37,852 --> 00:00:41,574
we explore the profound fusion of GraphQl and Kubernetes under

5
00:00:41,612 --> 00:00:45,042
the theme empowering Kubernetes workloads with GraphQl

6
00:00:45,186 --> 00:00:48,070
while unleashing efficiency and flexibility.

7
00:00:48,890 --> 00:00:51,950
So let's embark on this expedition.

8
00:00:56,210 --> 00:00:59,370
Before we embark on this journey,

9
00:00:59,530 --> 00:01:02,834
let me just give you a brief background of my

10
00:01:02,872 --> 00:01:05,870
own past. I'm Akshay Bhat.

11
00:01:05,950 --> 00:01:09,726
I wear many hats in the technology world. I'm a developer advocate

12
00:01:09,758 --> 00:01:13,074
at Hasura, a regular speaker at

13
00:01:13,112 --> 00:01:16,600
tech conferences. I'm a developer by heart

14
00:01:17,210 --> 00:01:20,962
and I've been a serial tech entrepreneur and I'm a staunch

15
00:01:21,026 --> 00:01:23,750
advocate for open source software.

16
00:01:24,170 --> 00:01:27,734
I've had the privilege of being immersed in the world of technology for a number

17
00:01:27,772 --> 00:01:31,770
of years and I've witnessed firsthand the remarkable evolution of

18
00:01:31,840 --> 00:01:34,170
Kubernetes and graphQl.

19
00:01:34,510 --> 00:01:37,814
My journey in the tech industry has been a thrilling adventure,

20
00:01:37,942 --> 00:01:41,466
rooted in a deep passion for coding and a strong commitment

21
00:01:41,498 --> 00:01:44,190
to fostering community driven innovation.

22
00:01:45,330 --> 00:01:49,166
Beyond my work with Hasura and public speaking, I have ventured into

23
00:01:49,188 --> 00:01:52,954
the realm of entrepreneurship. I've founded and co founded

24
00:01:53,002 --> 00:01:56,862
several tech startups, each with a mission to solve unique challenges

25
00:01:56,926 --> 00:02:00,174
using technology. And as an open source

26
00:02:00,222 --> 00:02:03,618
champion, I actively contribute to and promote the

27
00:02:03,624 --> 00:02:07,126
use of open source technologies, fostering a sense of

28
00:02:07,148 --> 00:02:10,440
community and collaboration wherever I can.

29
00:02:11,050 --> 00:02:14,294
Please connect with me on either LinkedIn or email to

30
00:02:14,332 --> 00:02:18,058
discuss more. Now let's move on

31
00:02:18,064 --> 00:02:19,290
to our agenda.

32
00:02:21,790 --> 00:02:25,340
So today I'll be talking about,

33
00:02:25,790 --> 00:02:29,974
firstly, sort of seeing the outline of

34
00:02:30,032 --> 00:02:32,458
graphQl, demystifying graphQl,

35
00:02:32,634 --> 00:02:36,794
elucidating its pivotal importance and illustrating its primary

36
00:02:36,842 --> 00:02:40,426
facets. Then we'll make the transition into scrutinizing

37
00:02:40,458 --> 00:02:44,130
the challenges that typically besiege Kubernetes developers.

38
00:02:44,710 --> 00:02:48,546
Crucially, we'll dissect how graphql emerges as the

39
00:02:48,568 --> 00:02:51,810
veritable solution to these conundrums.

40
00:02:52,150 --> 00:02:55,790
Then we'll spend some time talking about the efficiency of Kubernetes

41
00:02:55,870 --> 00:02:59,906
clusters and containers, and then we'll discuss why GraphQL

42
00:02:59,938 --> 00:03:03,506
is a great complement with its flexibility. I'll showcase

43
00:03:03,538 --> 00:03:07,320
some real world use cases and examples where this combination works best.

44
00:03:07,630 --> 00:03:11,014
Finally, we'll explore a bit about Hasura and how it can be an ideal

45
00:03:11,062 --> 00:03:15,370
tool when you're running GraphQL and kubernetes.

46
00:03:18,190 --> 00:03:21,370
So let's look at the power of GraphQL,

47
00:03:22,510 --> 00:03:26,174
right? So at

48
00:03:26,212 --> 00:03:30,254
its essence, GraphQL represents a query language for

49
00:03:30,292 --> 00:03:34,258
APIs. However, it's unequally. More than that,

50
00:03:34,344 --> 00:03:38,194
GraphQL is can emblem of flexibility, efficiency and real

51
00:03:38,232 --> 00:03:41,918
time capabilities. This section aims to unveil the bedrock

52
00:03:41,934 --> 00:03:45,470
of GraphQL, its core tenants and its critical

53
00:03:45,550 --> 00:03:49,622
attributes. So GraphQL is a specification for

54
00:03:49,676 --> 00:03:53,314
how to talk to an API. It's typically used over HTTP,

55
00:03:53,362 --> 00:03:57,422
where the key idea is to post a query to an HTTP endpoint

56
00:03:57,506 --> 00:04:01,718
instead of hitting different HTTP endpoints for different resources.

57
00:04:01,894 --> 00:04:05,642
GraphQL is designed for developers of web

58
00:04:05,696 --> 00:04:09,574
or mobile applications, essentially HTTP

59
00:04:09,622 --> 00:04:12,954
clients, to be able to make API calls to fetch

60
00:04:13,002 --> 00:04:17,070
exactly the data they need from their backend APIs.

61
00:04:17,650 --> 00:04:21,566
Before going further in understanding GraphQL, it's useful to get

62
00:04:21,588 --> 00:04:26,130
a sense of how GraphQL is actually used in an HTTP client.

63
00:04:26,710 --> 00:04:30,130
When we talk about GraphQL versus rest APIs,

64
00:04:30,790 --> 00:04:34,990
let's say we are fetching a user's profile and their address.

65
00:04:35,160 --> 00:04:39,682
In a typical rest scenario, you would essentially

66
00:04:39,746 --> 00:04:43,554
be querying or requesting various endpoints

67
00:04:43,602 --> 00:04:47,262
for different resources, different endpoints for different resources.

68
00:04:47,426 --> 00:04:51,542
So the core of rest API involves around resources.

69
00:04:51,606 --> 00:04:55,290
Resources are identified by URLs and request type, it may be get,

70
00:04:55,360 --> 00:04:58,300
post, et cetera. However,

71
00:04:58,990 --> 00:05:02,400
if your API server was a GraphQL server instead,

72
00:05:03,010 --> 00:05:06,878
this is what your API call would look like. As you

73
00:05:06,884 --> 00:05:10,762
can see, you're querying for a user

74
00:05:10,906 --> 00:05:14,494
and you're querying the iD, the name,

75
00:05:14,612 --> 00:05:18,238
the address and the street, or even let's

76
00:05:18,254 --> 00:05:21,986
say the name of the hotel or the city. And you get the response in

77
00:05:22,008 --> 00:05:27,398
a very similar JSON kind of format as your

78
00:05:27,484 --> 00:05:29,880
request is right.

79
00:05:31,290 --> 00:05:38,266
And also we

80
00:05:38,288 --> 00:05:42,538
are changing the way we think about API calls. So instead of making different

81
00:05:42,624 --> 00:05:46,220
APIs calls to different URLs to fetch data,

82
00:05:48,750 --> 00:05:51,930
what we're doing is instead of getting a resource,

83
00:05:52,010 --> 00:05:55,438
you post a query that describes what data you want.

84
00:05:55,524 --> 00:05:59,466
You think of the data your API returns as a graph.

85
00:05:59,658 --> 00:06:03,118
This allows you to make ad hoc queries to

86
00:06:03,124 --> 00:06:06,242
a single URL endpoint that returns data based

87
00:06:06,296 --> 00:06:09,458
on the query. And in the example above you

88
00:06:09,464 --> 00:06:13,538
can see that we fetched for a particular user and

89
00:06:13,624 --> 00:06:17,526
their id, all that. So the query you send as

90
00:06:17,548 --> 00:06:20,802
a data in the post request has a structure and syntax.

91
00:06:20,946 --> 00:06:24,434
And in GraphQl we have mutations and subscriptions.

92
00:06:24,482 --> 00:06:30,182
I'll tell you how it looks like GraphQl

93
00:06:30,246 --> 00:06:34,682
queries look very neat as you can see, and they are easy to read because

94
00:06:34,816 --> 00:06:38,234
the shape of the query is very similar to the

95
00:06:38,352 --> 00:06:41,440
data that we actually end up getting with.

96
00:06:42,770 --> 00:06:46,702
So now let's look at some of the benefits of

97
00:06:46,756 --> 00:06:50,494
graphql. Number one,

98
00:06:50,692 --> 00:06:55,570
we avoid overfetching, so we avoid overfetching

99
00:06:56,390 --> 00:07:00,622
more data than we need because we can specify the exact fields

100
00:07:00,686 --> 00:07:04,958
we need, we can prevent multiple API calls

101
00:07:05,054 --> 00:07:08,630
in case you need more data. You can also avoid making

102
00:07:08,780 --> 00:07:12,546
multiple calls to your API. In the case above, you don't

103
00:07:12,578 --> 00:07:16,550
need to make two API calls to fetch user and address separately.

104
00:07:17,370 --> 00:07:19,850
Lesser communication with API developers.

105
00:07:20,590 --> 00:07:24,586
So sometimes to fetch the exact data you need, especially if

106
00:07:24,608 --> 00:07:28,342
you need to fetch more data and want to avoid multiple API calls,

107
00:07:28,486 --> 00:07:31,646
you will need to ask your API developers to build a

108
00:07:31,668 --> 00:07:34,814
new API. With GraphQL. Your work is

109
00:07:34,852 --> 00:07:39,360
independent of the API team. This allows you to work much faster and

110
00:07:40,050 --> 00:07:43,422
focus on building your product instead of worrying about all the

111
00:07:43,556 --> 00:07:46,814
backend stuff. And every

112
00:07:46,852 --> 00:07:50,414
GraphQL API conforms to a schema which is graph

113
00:07:50,462 --> 00:07:53,874
data model and what kinds of queries a client can

114
00:07:53,912 --> 00:07:57,414
make. This allows the community to build lets of

115
00:07:57,452 --> 00:08:01,254
cool tools to explore and visualize your API, or create

116
00:08:01,372 --> 00:08:05,074
ide plugins that autocorrect your graphQl queries

117
00:08:05,122 --> 00:08:08,854
and even do code Gen. We'll understand this in more detail. So essentially

118
00:08:08,902 --> 00:08:11,020
it's a very self documenting kind of system.

119
00:08:12,030 --> 00:08:15,994
So here is

120
00:08:16,032 --> 00:08:19,338
a small chart showing how

121
00:08:19,504 --> 00:08:23,070
GraphQL and rest API would

122
00:08:23,140 --> 00:08:27,006
look like. So in rest API you have get for

123
00:08:27,028 --> 00:08:30,960
the same you have queries in graphQL for

124
00:08:31,570 --> 00:08:35,538
writing data, you have post in rest, you have mutations for

125
00:08:35,704 --> 00:08:39,426
writing and updating data in GraphQL and you

126
00:08:39,448 --> 00:08:42,706
have subscriptions for watching or subscribing to data which

127
00:08:42,808 --> 00:08:47,314
does not have a very clear analogy or parallel

128
00:08:47,362 --> 00:08:48,790
in rest APIs.

129
00:08:54,570 --> 00:08:57,794
Now let's look at unleashing the

130
00:08:57,932 --> 00:09:01,654
efficiency of kubernetes. Now that we have the foundation

131
00:09:01,702 --> 00:09:04,806
of GraphQL laid, let's transition to kubernetes.

132
00:09:04,918 --> 00:09:08,506
So Kubernetes is an open source container management tool that

133
00:09:08,528 --> 00:09:11,194
automates container deployment, container scaling,

134
00:09:11,242 --> 00:09:15,358
descaling and container load balancing. Also called as

135
00:09:15,524 --> 00:09:18,826
orchestration. Along with automated deployment

136
00:09:18,858 --> 00:09:22,094
and scaling of containers, it provides healing by

137
00:09:22,212 --> 00:09:25,826
automatically restarting failed containers and rescheduling them when

138
00:09:25,848 --> 00:09:29,970
their hosts die. This capability improves the application's availability.

139
00:09:30,470 --> 00:09:33,778
Kubernetes follows the client server architecture as you can see

140
00:09:33,784 --> 00:09:37,634
in this architecture diagram where we have the master installed

141
00:09:37,682 --> 00:09:41,890
on one machine and the node on separate Linux machines.

142
00:09:42,050 --> 00:09:45,830
It follows the master slave model which uses a master to manage

143
00:09:45,980 --> 00:09:49,462
docker containers across multiple Kubernetes nodes.

144
00:09:49,606 --> 00:09:53,734
A master and its control nodes constitute a Kubernetes cluster.

145
00:09:53,862 --> 00:09:57,382
A developer can deploy an application in the docker containers with the assistance

146
00:09:57,446 --> 00:09:59,450
of the Kubernetes master.

147
00:10:00,290 --> 00:10:04,746
Kubernetes, while being a marvelous tool for container orchestration

148
00:10:04,938 --> 00:10:08,782
confronts its fair share of challenges in terms of

149
00:10:08,916 --> 00:10:12,906
API complexity and data retrieval. These are big challenges and

150
00:10:12,948 --> 00:10:16,286
as the scale of the cluster grows, the complexity

151
00:10:16,318 --> 00:10:19,950
of data retrieval grows more than linearly.

152
00:10:20,030 --> 00:10:23,598
Right. But GraphQL,

153
00:10:23,694 --> 00:10:27,154
as I found, was a solution and I've seen multiple use cases

154
00:10:27,202 --> 00:10:31,234
where GraphQL was used to address these challenges. So let's

155
00:10:31,282 --> 00:10:34,866
understand how GraphQL

156
00:10:34,898 --> 00:10:35,960
solves these problems.

157
00:10:40,900 --> 00:10:44,384
So first of

158
00:10:44,422 --> 00:10:48,050
all, GraphQL solves the

159
00:10:48,500 --> 00:10:51,280
data retrieval problem. So it's very flexible.

160
00:10:51,860 --> 00:10:56,144
That sets apart graphql from the rest APIs is its

161
00:10:56,262 --> 00:10:59,444
finesse in data retrieval. Rest APIs often lead

162
00:10:59,482 --> 00:11:03,824
to the pitfalls of overfetching or underfetching data, causing unnecessary

163
00:11:03,872 --> 00:11:07,560
data transfer and inefficiency. So however,

164
00:11:07,630 --> 00:11:11,160
with GraphQL, we'll see how it empowering people

165
00:11:11,230 --> 00:11:15,130
to wield data in a much more effective way.

166
00:11:15,660 --> 00:11:18,780
The other thing is efficient resource manipulation.

167
00:11:20,000 --> 00:11:23,070
It's not just confined to data retrieval, but also

168
00:11:24,240 --> 00:11:28,552
if you want to do manipulation or updation of data mutations

169
00:11:28,616 --> 00:11:32,956
are in. GraphQL are our trusted companions in this simplifying

170
00:11:32,988 --> 00:11:37,664
the intricate tasks of modifying data within Kubernetes so

171
00:11:37,862 --> 00:11:41,688
you can essentially update, create, delete resources

172
00:11:41,884 --> 00:11:45,200
all within a single well orchestrated,

173
00:11:45,280 --> 00:11:50,932
well constructed query. The other thing is real

174
00:11:50,986 --> 00:11:54,496
time insights with GraphQL subscriptions, which is a very

175
00:11:54,538 --> 00:11:59,092
core feature of GraphQL. It's a game changer in Kubernetes

176
00:11:59,156 --> 00:12:03,044
scenarios. So real time updates can completely revolutionize

177
00:12:03,092 --> 00:12:06,896
monitoring and management within Kubernetes.

178
00:12:07,028 --> 00:12:10,872
And we'll see how this subscriptions

179
00:12:10,936 --> 00:12:14,510
can manifest and how we can use them. Exactly.

180
00:12:18,140 --> 00:12:21,980
Now let's come to Hasura and see

181
00:12:22,130 --> 00:12:25,356
how in a graphql and

182
00:12:25,538 --> 00:12:29,436
Kubernetes environment, it shines. So Hasura is a powerful and

183
00:12:29,458 --> 00:12:33,564
versatile technology that serves as a graphQL engine and data platform.

184
00:12:33,762 --> 00:12:37,504
It has gained immense popularity in the world of application development for

185
00:12:37,542 --> 00:12:41,644
several compelling reasons, and it's an excellent fit for Kubernetes and graphql

186
00:12:41,692 --> 00:12:44,764
environments. Some of the reasons are that it's

187
00:12:44,812 --> 00:12:47,900
built on GraphQL. Number one, it's a GraphQL

188
00:12:47,980 --> 00:12:51,536
score. So it's a modern query language which is modern query language

189
00:12:51,568 --> 00:12:55,264
for APIs. With Hasura, you can create a GraphQL API

190
00:12:55,312 --> 00:12:58,688
for your data with minimal effort. This aligns perfectly with the principles

191
00:12:58,704 --> 00:13:02,052
of Kubernetes, which emphasizes container orchestration

192
00:13:02,116 --> 00:13:06,276
and scalability, and graphQl, which optimizes data fetching and manipulation.

193
00:13:06,308 --> 00:13:10,360
So it's a very good combination. The other thing is real time capabilities.

194
00:13:10,780 --> 00:13:15,096
Hasura excels in providing this for GraphQL subscriptions

195
00:13:15,288 --> 00:13:18,604
and this means that you can easily implement features like live

196
00:13:18,642 --> 00:13:22,408
updates, notifications and interactive user experiences,

197
00:13:22,504 --> 00:13:26,416
and in a Kubernetes environment where you might have a dynamic scaling and a

198
00:13:26,438 --> 00:13:30,396
distributed architecture. Hasura's real time functionality seamlessly

199
00:13:30,428 --> 00:13:33,856
integrates, ensuring that your applications remain responsive and up

200
00:13:33,878 --> 00:13:37,520
to date. Hasura also simplifies

201
00:13:37,600 --> 00:13:41,284
data access and authorization. It connects to your data sources such

202
00:13:41,322 --> 00:13:45,108
as databases and rest APIs, and generates a

203
00:13:45,114 --> 00:13:48,848
graphQL schema automatically. This means you

204
00:13:48,874 --> 00:13:52,564
don't have to write complex boilerplate code for data fetching,

205
00:13:52,612 --> 00:13:55,796
filtering and pagination. With Kubernetes managing

206
00:13:55,828 --> 00:13:59,736
your containers, you can ensure that the data layer is scalable and

207
00:13:59,758 --> 00:14:03,988
highly available. In Kubernetes and GraphQL

208
00:14:04,004 --> 00:14:07,408
setups. Security is very important, so Hasura

209
00:14:07,444 --> 00:14:10,856
also offers robust authentication and authorization mechanisms

210
00:14:10,888 --> 00:14:14,224
out of the box. You can easily define fine

211
00:14:14,262 --> 00:14:17,836
grained access controls and permissions for your GraphQL schema,

212
00:14:17,948 --> 00:14:21,200
ensuring that only authorized users can access specific data

213
00:14:21,350 --> 00:14:23,600
and perform certain actions.

214
00:14:24,660 --> 00:14:27,748
Also the other thing is it reduces the time and

215
00:14:27,754 --> 00:14:31,216
effort required to set up a robust GraphQL API, enabling faster

216
00:14:31,248 --> 00:14:34,564
development cycles and easier maintenance. This is

217
00:14:34,602 --> 00:14:38,580
particularly valuable in Kubernetes environment where agility and scalability are essential.

218
00:14:39,480 --> 00:14:43,556
The other thing is it provides built in monitoring and observability tools

219
00:14:43,588 --> 00:14:47,124
that help you keep an eye on your API's

220
00:14:47,172 --> 00:14:50,456
performance, GraphQL API's performance and usage and in

221
00:14:50,478 --> 00:14:53,836
a Kubernetes cluster with a big size where monitoring and debugging can

222
00:14:53,858 --> 00:14:57,944
be complex, these observability features simplify

223
00:14:57,992 --> 00:15:01,676
the process and enable you to productively address issues.

224
00:15:01,858 --> 00:15:05,356
So in summary, Hasura is a great fit for kubernetes and graphql

225
00:15:05,388 --> 00:15:08,944
environments because it simplifies data access and

226
00:15:08,982 --> 00:15:12,720
enhances developer productivity and offers real time capabilities.

227
00:15:13,220 --> 00:15:16,820
So let's take a small demo and see how things

228
00:15:16,890 --> 00:15:17,750
look like.

229
00:15:21,960 --> 00:15:26,448
So this is a documentation regarding how you can run Hasura

230
00:15:26,464 --> 00:15:29,020
GraphQL engine on Kubernetes.

231
00:15:29,200 --> 00:15:32,410
So this is how it looks like.

232
00:15:33,820 --> 00:15:38,580
Essentially these are the many different attributes

233
00:15:38,660 --> 00:15:42,604
and data that exists and you can query them with

234
00:15:42,642 --> 00:15:46,012
GraphQL. And getting the data is very simple. You just

235
00:15:46,066 --> 00:15:49,736
connect the database whether it's postgres, in this case it's

236
00:15:49,768 --> 00:15:53,212
postgres and you can just track those

237
00:15:53,266 --> 00:15:56,848
tables and the data is available.

238
00:15:56,934 --> 00:16:01,056
For example here the orders and assignment table is

239
00:16:01,238 --> 00:16:05,888
available directly here to query and you

240
00:16:05,894 --> 00:16:08,630
can just run the query and fetch the data.

241
00:16:13,400 --> 00:16:16,628
So this is some of

242
00:16:16,634 --> 00:16:20,856
the documentation for the talk that

243
00:16:20,878 --> 00:16:24,696
I used here. There is introduction to GraphQL, there is

244
00:16:24,798 --> 00:16:29,512
deployment guide and also do check out the

245
00:16:29,646 --> 00:16:32,956
blogs that I've written on this topic. I've written some on

246
00:16:33,058 --> 00:16:36,296
Kubernetes and how you can deploy GraphQl

247
00:16:36,328 --> 00:16:40,472
APIs very fast for very scalable

248
00:16:40,536 --> 00:16:41,150
application.

249
00:16:44,340 --> 00:16:48,316
So thank you for joining

250
00:16:48,348 --> 00:16:52,060
this talk. As we near the conclusion, let's sort of recap

251
00:16:52,140 --> 00:16:55,696
what we talked about. So GraphQL isn't a

252
00:16:55,718 --> 00:16:59,396
merely a technological innovation, it's a paradigm shift that can

253
00:16:59,418 --> 00:17:03,456
reinvigorate your Kubernetes workloads, elevate user experiences,

254
00:17:03,488 --> 00:17:07,476
and kindle innovation. I urge each of you to embrace this opportunity

255
00:17:07,578 --> 00:17:11,204
to experiment and discover how GraphQL and Kubernetes can transform

256
00:17:11,252 --> 00:17:15,124
your projects. So while we looked at both GraphQL and Kubernetes,

257
00:17:15,172 --> 00:17:19,000
we also saw how Hasura, as a powerful graphql engine,

258
00:17:19,150 --> 00:17:22,756
plays a pivotal role in empowering Kubernetes workloads.

259
00:17:22,868 --> 00:17:26,692
It simplifies the creation and management of GraphQL APIs within Kubernetes,

260
00:17:26,836 --> 00:17:30,056
making it accessible and efficient. I implore you

261
00:17:30,078 --> 00:17:34,108
to take a closer look and see the benefits of Hasura

262
00:17:34,124 --> 00:17:37,936
firsthand. With that, I hope you're eager to take a

263
00:17:37,958 --> 00:17:41,696
plunge. Feel free to seek out any clarification you

264
00:17:41,718 --> 00:17:45,216
need on these and reach out to me to discuss more on these

265
00:17:45,238 --> 00:17:46,350
topics. See you.

