1
00:00:25,570 --> 00:00:28,818
Hi everyone, my name is Mahindra Bagul.

2
00:00:28,914 --> 00:00:32,402
Today we are going to play with kind kubernetes in Docker, Nginx Ingress

3
00:00:32,466 --> 00:00:35,586
controller and secured GrPC server. So let's

4
00:00:35,618 --> 00:00:39,154
get started. So a little bit about me. My name is Mahindra Bagul.

5
00:00:39,202 --> 00:00:43,206
I am senior software engineer at Infracloud Technologies, India. You can

6
00:00:43,228 --> 00:00:47,142
find me on GitHub on this link. My user id is Mahendra Bagul and

7
00:00:47,196 --> 00:00:51,930
my interests are basically around kubernetes, Golang and cloud native technologies.

8
00:00:52,090 --> 00:00:55,418
So for today we are going to have this agenda.

9
00:00:55,514 --> 00:00:58,346
So the presentation has been divided into two parts,

10
00:00:58,458 --> 00:01:02,174
theory and demo. In the theory part we will be talking

11
00:01:02,212 --> 00:01:06,174
about kubernetes architecture, kind kubernetes

12
00:01:06,222 --> 00:01:09,998
in Docker, Nginx ingress controller, kubernetes and ingress

13
00:01:10,094 --> 00:01:13,794
deployment, how they both usually work,

14
00:01:13,992 --> 00:01:17,814
and certificates and mtls and

15
00:01:17,852 --> 00:01:22,966
then architecture of the final deployment. So this architecture of the final deployment is

16
00:01:22,988 --> 00:01:26,822
related to the demo which I have. And in the demo

17
00:01:26,876 --> 00:01:30,934
part we will see the kind and NgInx ingress

18
00:01:30,982 --> 00:01:34,778
deployment, ingress controller deployment and we will also try to run

19
00:01:34,864 --> 00:01:38,300
secured GrPC server behind the ingress. Okay,

20
00:01:38,990 --> 00:01:43,326
this is a typical kubernetes architecture. So you have a

21
00:01:43,348 --> 00:01:47,434
control plane or master nodes and then you have a set of worker nodejs,

22
00:01:47,482 --> 00:01:51,354
okay, on control plane or on master nodes

23
00:01:51,402 --> 00:01:55,714
you will see API server, scheduler, controller, manager and HD these

24
00:01:55,752 --> 00:01:59,438
components. Whereas on the worker nodes you will see Docker,

25
00:01:59,614 --> 00:02:02,866
I mean any container runtime like Docker or

26
00:02:02,888 --> 00:02:06,054
container D and Kubernetes and

27
00:02:06,092 --> 00:02:09,634
Kubeproxy, right? So whenever

28
00:02:09,682 --> 00:02:13,446
you are trying to hit the kubernetes, whenever you

29
00:02:13,468 --> 00:02:16,946
are trying to reach to the pods or any kubernetes objects,

30
00:02:16,978 --> 00:02:20,586
you are basically using Kubectl commands, right? So your Kubectl commands are

31
00:02:20,608 --> 00:02:24,058
basically handled by the API server. So you can see

32
00:02:24,144 --> 00:02:28,246
it is just like a ClI client for the API server,

33
00:02:28,358 --> 00:02:31,706
right? And when you have a docker container, when you

34
00:02:31,728 --> 00:02:35,294
have a container runtime on your worker nodes, you are able to

35
00:02:35,412 --> 00:02:39,310
create the pods, right? On that worker code and inside

36
00:02:39,380 --> 00:02:42,800
your pod you will have multiple containers, right? So pod is basically

37
00:02:43,330 --> 00:02:46,626
like just a wrapper over containers and the

38
00:02:46,648 --> 00:02:50,238
relationship is one too many. Like one pod can have multiple containers.

39
00:02:50,334 --> 00:02:54,174
So in this diagram you can see pod one has three containers whereas pod

40
00:02:54,222 --> 00:02:57,534
two has just one container, right? The same

41
00:02:57,592 --> 00:03:00,694
scenario you can see here in worker node two as well,

42
00:03:00,732 --> 00:03:03,846
right? There are many user interfaces available in the market as

43
00:03:03,868 --> 00:03:07,206
well for your API server. So when

44
00:03:07,228 --> 00:03:10,486
you deploy your application on a Kubernetes cluster,

45
00:03:10,598 --> 00:03:14,730
that time you need to expose it to the outside world

46
00:03:14,880 --> 00:03:17,690
so that your users can reach to your application, right?

47
00:03:17,760 --> 00:03:21,898
So that can be done using services or using ingresses.

48
00:03:21,994 --> 00:03:25,486
So ingress also makes use of services.

49
00:03:25,668 --> 00:03:28,894
But node port is like a raw or crude way

50
00:03:28,932 --> 00:03:32,414
of exposing your application to the outside world. And that is again

51
00:03:32,452 --> 00:03:35,566
not the preferred way to do in the production. So when you

52
00:03:35,588 --> 00:03:39,566
use node port that time you basically open a port on your worker

53
00:03:39,598 --> 00:03:43,186
nodes. So here you can see in the diagram that there are set

54
00:03:43,208 --> 00:03:47,282
of pods which are wrapped by a service and then that

55
00:03:47,416 --> 00:03:51,334
service is of type node port. And now your user is able to reach

56
00:03:51,372 --> 00:03:54,534
to your application right through the node port type

57
00:03:54,572 --> 00:03:58,086
service. And you can create code port type service using

58
00:03:58,108 --> 00:04:01,626
this command. So to use this command you need

59
00:04:01,648 --> 00:04:05,146
to have a hello world deployment in place. And then you can

60
00:04:05,168 --> 00:04:09,478
use expose command of Kubectl to expose the hello world deployment.

61
00:04:09,574 --> 00:04:12,694
Then you can specify the type of the service and then you can also specify

62
00:04:12,742 --> 00:04:16,174
the name of the service, right? And then example service, service of type

63
00:04:16,212 --> 00:04:20,458
node port will be created, whereas ingress, which is again another object of kubernetes

64
00:04:20,554 --> 00:04:23,598
here, what you do is you also need to create it

65
00:04:23,684 --> 00:04:27,518
using Kubectl command or using YaML files or JSON files.

66
00:04:27,614 --> 00:04:31,138
And it is just, again, you can say in the layman's terms, it is

67
00:04:31,144 --> 00:04:34,434
just a URL map, right? So there are two services behind

68
00:04:34,472 --> 00:04:38,498
the ingress and the URL map is basically like a decision maker

69
00:04:38,674 --> 00:04:42,498
to which service the user's request should be forwarded

70
00:04:42,514 --> 00:04:45,810
to, right? So for example, if I'm trying to hit blue,

71
00:04:45,890 --> 00:04:49,718
then service blue will be called. If I'm trying to hit

72
00:04:49,884 --> 00:04:52,650
green, then that time service green will be called,

73
00:04:52,720 --> 00:04:56,134
right. When you make use of ingress in your kubernetes

74
00:04:56,182 --> 00:04:59,706
control in your Kubernetes cluster, then that time you also need

75
00:04:59,728 --> 00:05:03,182
to install ingress controller to handle your or to manage

76
00:05:03,236 --> 00:05:06,862
your ingresses. So there are many types of ingress controllers available

77
00:05:06,916 --> 00:05:11,002
in the market. So Nginx ingress controller is one of them. So controller

78
00:05:11,066 --> 00:05:14,410
or like glue. These are a few examples of ingress controllers.

79
00:05:14,490 --> 00:05:17,806
So here in the diagram you can see there is a user and then user

80
00:05:17,838 --> 00:05:20,974
is trying to reach to your applications through ingress.

81
00:05:21,102 --> 00:05:24,850
Then again the request will first come to service and then service will

82
00:05:24,920 --> 00:05:28,466
then forward the request to your ports, right? And then pods

83
00:05:28,498 --> 00:05:32,102
are again running some containers, right where your actual application

84
00:05:32,156 --> 00:05:35,526
is running. We are going to make use of the same diagram in the

85
00:05:35,548 --> 00:05:39,014
next slide. But just before that, let me talk

86
00:05:39,052 --> 00:05:42,778
about a little bit about Kubernetes in Docker as well. So it's just a

87
00:05:42,784 --> 00:05:46,746
tool for running local Kubernetes clusters, right. And the

88
00:05:46,768 --> 00:05:50,154
nodes are nothing but the docker containers. When you create a

89
00:05:50,192 --> 00:05:53,706
Kubernetes cluster using kind nodes

90
00:05:53,738 --> 00:05:57,146
are just docker containers. So earlier it was just designed for testing

91
00:05:57,178 --> 00:06:01,054
kubernetes, but later, due to its popularity, it is now being used for

92
00:06:01,092 --> 00:06:04,634
local development or inside the CI as well. Continuous integration

93
00:06:04,682 --> 00:06:07,986
tools. As part of my demos I

94
00:06:08,008 --> 00:06:11,806
have GRPC server and client as well. So my GRPC server

95
00:06:11,838 --> 00:06:15,366
is in Golang and GRPC client is in node js and they

96
00:06:15,388 --> 00:06:19,350
are both talking over HTTP two and they are

97
00:06:19,500 --> 00:06:23,234
sharing this file, employee serverside definition. So that's a proto file.

98
00:06:23,362 --> 00:06:26,770
A protobop is a contract defining

99
00:06:26,930 --> 00:06:29,766
mechanism, I would say. And due to that,

100
00:06:29,868 --> 00:06:33,254
server knows in what format data needs to be sent and client

101
00:06:33,302 --> 00:06:36,518
also knows in what format the data will be received.

102
00:06:36,614 --> 00:06:39,834
So protofile is nothing but the contract. Right. Our main

103
00:06:39,872 --> 00:06:43,606
motive of this presentation is to achieve mtls between these two components because

104
00:06:43,648 --> 00:06:46,986
our GRPC server is going to be running inside the Kubernetes

105
00:06:47,018 --> 00:06:50,378
cluster, whereas our node js client will be running on my local machine

106
00:06:50,474 --> 00:06:53,866
and we need to have server certificates for the GrPC

107
00:06:53,898 --> 00:06:57,986
server. We also need to have the client certificates for the GRPC client which

108
00:06:58,008 --> 00:07:01,710
is in node js and then they will be able to establish the communication.

109
00:07:01,790 --> 00:07:05,038
Right. To understand more mtls,

110
00:07:05,134 --> 00:07:08,438
let's go through this diagram. So here also you can see there is a

111
00:07:08,444 --> 00:07:11,794
client and then there is a server. Client has its client

112
00:07:11,842 --> 00:07:15,302
cert and then server has its server cert, right.

113
00:07:15,356 --> 00:07:18,754
And then there is a common entity who knows clients

114
00:07:18,802 --> 00:07:21,958
and server's identity. Right. And it is called as a certificate authority.

115
00:07:22,054 --> 00:07:25,286
Okay, so this is basically a component which again provides

116
00:07:25,318 --> 00:07:28,778
the certificates to these two components. So when

117
00:07:28,864 --> 00:07:32,762
client tries to access protected resource on a server,

118
00:07:32,826 --> 00:07:36,090
server will send or present its server certificate.

119
00:07:36,170 --> 00:07:39,854
So server is trying to now say who is it actually?

120
00:07:39,972 --> 00:07:43,102
So client will then validate server certificate with the CA.

121
00:07:43,236 --> 00:07:46,834
Once that check pass, then client will now try to present its

122
00:07:46,872 --> 00:07:50,466
client cert. Now serverside also needs to verify whether the client cert

123
00:07:50,568 --> 00:07:54,466
presented by client is valid or not, and that is done through the

124
00:07:54,488 --> 00:07:57,598
can. And then once these both things are passed,

125
00:07:57,694 --> 00:08:01,554
these both checks are passed, client is able to access the protected resource.

126
00:08:01,682 --> 00:08:04,726
Okay, so this is how the mtls flow works and we

127
00:08:04,748 --> 00:08:08,070
will be seeing or observing the same flow in the demo as well.

128
00:08:08,220 --> 00:08:12,214
So this is going to be my final deployment. So I have a

129
00:08:12,412 --> 00:08:15,578
node GRPC client which I already talked about and it

130
00:08:15,584 --> 00:08:19,462
is going to run on my local machine. And then we have a kubernetes cluster

131
00:08:19,526 --> 00:08:22,746
created using kind kubernetes in Docker tool.

132
00:08:22,928 --> 00:08:26,490
And then we have a namespace called Golang 2021 meetup.

133
00:08:26,570 --> 00:08:29,866
And then in that namespace you can see I have a GRPC

134
00:08:29,898 --> 00:08:33,450
server in Greece which is running just next to

135
00:08:33,460 --> 00:08:37,314
the service called Golang GrPC server. And then I have a

136
00:08:37,352 --> 00:08:40,978
Golang GRPC server deployment and pod, right?

137
00:08:41,064 --> 00:08:44,782
And then this deployment and pod. These are using two config maps,

138
00:08:44,846 --> 00:08:48,066
Golang JRPC config and employee database. So employee

139
00:08:48,098 --> 00:08:51,362
database is like just containing the JSON.

140
00:08:51,426 --> 00:08:54,566
I will be showing you the exact content of it when

141
00:08:54,588 --> 00:08:57,974
I will be walking you through the demo. And then it is also

142
00:08:58,012 --> 00:09:00,926
making use of a secret. So GrPC server certificates.

143
00:09:00,978 --> 00:09:04,826
So as this is my server component and it

144
00:09:04,848 --> 00:09:08,506
should run with its server certificates, right? So the certificates are

145
00:09:08,528 --> 00:09:12,218
stored in a secret and then that secret is mounted on the pod,

146
00:09:12,314 --> 00:09:15,646
right? And then here in ingress you can also see it is also

147
00:09:15,668 --> 00:09:19,086
referring to the secret. So that is because we are

148
00:09:19,108 --> 00:09:22,938
Golang to send the client certificates from the

149
00:09:22,964 --> 00:09:26,434
client through the ingress, through the service to the pod, okay?

150
00:09:26,472 --> 00:09:30,110
And we don't want TLS offloading or SLS

151
00:09:30,270 --> 00:09:33,746
offloading on the ingress level. We are golang to

152
00:09:33,848 --> 00:09:37,830
pass through the TLS request directly

153
00:09:38,170 --> 00:09:41,526
to the pod or to the container. Right? So that's why

154
00:09:41,628 --> 00:09:45,218
here ingress is also referring to the secret.

155
00:09:45,314 --> 00:09:48,986
I will be talking more on this one in the demo. So let's move on

156
00:09:49,008 --> 00:09:52,982
to the first demo. So we are here going to create kind cluster

157
00:09:53,046 --> 00:09:57,260
and install Nginx ingress controller. So just before that

158
00:09:57,870 --> 00:10:01,326
I want to walk

159
00:10:01,348 --> 00:10:04,874
you through the directory structure,

160
00:10:04,922 --> 00:10:08,670
okay, so I have a folder called code, okay, you can ignore this part

161
00:10:08,740 --> 00:10:12,606
because I'm going to push this whole repository to

162
00:10:12,628 --> 00:10:15,678
the GitHub. And then in the code you can see there is a

163
00:10:15,684 --> 00:10:19,166
config. So inside kind there are commands and then kind config,

164
00:10:19,198 --> 00:10:22,782
yaml, and then mtls you will see a bunch of certificates

165
00:10:22,846 --> 00:10:26,306
because we are going to need client certificates as well as server

166
00:10:26,338 --> 00:10:29,366
certificates, right? And also there will be CA component also.

167
00:10:29,548 --> 00:10:33,426
And in the Golang grPC server I have the grPC

168
00:10:33,458 --> 00:10:37,174
server related code, and in the node grPC client I

169
00:10:37,212 --> 00:10:40,854
have the code Js grpC client.

170
00:10:40,902 --> 00:10:44,620
Right? So this is the structure I have let us first

171
00:10:45,790 --> 00:10:49,114
go through the first demo, right? And that is

172
00:10:49,152 --> 00:10:53,946
about creating kind based cluster, right? So what

173
00:10:53,968 --> 00:10:57,194
I will do is I will create a kind based Kubernetes

174
00:10:57,242 --> 00:11:00,506
cluster. So the command is kind create cluster. And it is referring

175
00:11:00,538 --> 00:11:04,274
to the kind config yaml, right. So let me open kind config yaml and

176
00:11:04,312 --> 00:11:07,170
let me walk you through that. So kind is a cluster.

177
00:11:11,430 --> 00:11:14,722
So this cluster will be three node cluster. So there is a control

178
00:11:14,776 --> 00:11:18,018
plane. So one master node

179
00:11:18,034 --> 00:11:21,880
and two worker nodes, okay. And few things

180
00:11:22,490 --> 00:11:26,466
which you should be noticing is that I'm specifying these node

181
00:11:26,498 --> 00:11:30,650
labels, right, so ingress ready. So these labels are required

182
00:11:31,390 --> 00:11:35,420
when you are going to install NgInx ingress controller because

183
00:11:37,390 --> 00:11:40,878
this is how you will be able to reach to

184
00:11:40,964 --> 00:11:43,598
your Kubernetes cluster from your local, okay.

185
00:11:43,684 --> 00:11:47,086
And I'm mapping few ports like 84,

186
00:11:47,108 --> 00:11:50,830
four, three, okay so let us move ahead

187
00:11:50,900 --> 00:11:52,510
with this command.

188
00:12:01,830 --> 00:12:13,414
I first need to move to the directory structure and

189
00:12:13,452 --> 00:12:15,720
then I will be firing the same command again,

190
00:12:19,390 --> 00:12:23,206
code, then configured,

191
00:12:23,398 --> 00:12:24,460
then kind.

192
00:12:27,310 --> 00:12:30,974
Yeah it should work now. So you can see it is trying

193
00:12:31,012 --> 00:12:34,430
to create a cluster kind. Okay.

194
00:12:34,500 --> 00:12:37,886
And then it is creating the nodes now. So meanwhile we

195
00:12:37,908 --> 00:12:41,726
will go through the next set of commands. So the

196
00:12:41,748 --> 00:12:45,618
next command will be, or the next step will be to install the

197
00:12:45,624 --> 00:12:49,074
NgInx ingress controller, right. So I'm just firing Kubectl apply command and

198
00:12:49,112 --> 00:12:52,738
the content

199
00:12:52,904 --> 00:12:56,214
of creating Nginx ingress controller is on this link. Okay,

200
00:12:56,332 --> 00:13:00,520
so let me just copy this command and wait for

201
00:13:01,130 --> 00:13:04,646
the cluster to

202
00:13:04,668 --> 00:13:05,400
be ready.

203
00:13:13,630 --> 00:13:17,146
So it will take some time because it is three node cluster. So it

204
00:13:17,168 --> 00:13:20,694
will try to spin three containers,

205
00:13:20,742 --> 00:13:24,794
right, because one container. So nodes in a kind based clusters

206
00:13:24,842 --> 00:13:26,670
are nothing but docker containers.

207
00:13:28,850 --> 00:13:32,014
We will also like let me walk you through the next commands as well.

208
00:13:32,052 --> 00:13:36,580
So the next command is just for waiting because

209
00:13:38,070 --> 00:13:41,940
when you fire this command, Kubectl apply and this

210
00:13:43,110 --> 00:13:46,590
Nginx ingress controller deployment file, right. So that time what happens,

211
00:13:46,680 --> 00:13:50,146
it takes some time to get all the pods

212
00:13:50,178 --> 00:13:53,682
up and running and you need to have all the pods,

213
00:13:53,746 --> 00:13:57,110
all the configurations ready. And the appropriate way to

214
00:13:57,180 --> 00:14:00,586
check is to fire this command. So here what we are

215
00:14:00,608 --> 00:14:04,726
doing is we are just waiting for namespace Ingress Nginx

216
00:14:04,838 --> 00:14:08,122
and then we are also waiting for the condition ready,

217
00:14:08,256 --> 00:14:11,946
right. And then selector is Kubernetes IO component controller,

218
00:14:11,978 --> 00:14:15,054
right? Yeah,

219
00:14:15,092 --> 00:14:19,066
here you can see now it wrote

220
00:14:19,098 --> 00:14:22,250
configuration, it started control plane,

221
00:14:22,330 --> 00:14:25,746
it also installed CNI, installed storage class and it is

222
00:14:25,768 --> 00:14:27,620
now joining the worker nodes, right,

223
00:14:29,110 --> 00:14:34,482
okay, coming back to this command, sorry for moving

224
00:14:34,536 --> 00:14:37,766
back and forth. So in the last command we are going

225
00:14:37,788 --> 00:14:41,702
to edit the deployment of Ingress NgInX controller as well.

226
00:14:41,756 --> 00:14:45,670
So I will tell you what we are going to modify here.

227
00:14:45,820 --> 00:14:49,206
So this flag, right, so enable SSl pass through. This needs to be

228
00:14:49,228 --> 00:14:53,654
added as an argument to the ingress NgINX controller, otherwise your SSl

229
00:14:53,702 --> 00:14:57,882
pass through mechanism will not work. And this was like a major

230
00:14:57,936 --> 00:15:01,210
blocker for me when I was working on a similar assignment.

231
00:15:01,550 --> 00:15:05,102
Yeah, here you can see now the cluster is ready. Let me try

232
00:15:05,156 --> 00:15:09,006
to list all the ports. So it

233
00:15:09,028 --> 00:15:11,998
will also take some time because the ports may not be,

234
00:15:12,164 --> 00:15:15,250
all the ports may not be in up and running state

235
00:15:15,400 --> 00:15:18,802
or in the ready state. So here you can see few pods like

236
00:15:18,856 --> 00:15:22,338
HCD kind control plane it is not in

237
00:15:22,344 --> 00:15:23,620
the ready state. Eight,

238
00:15:27,510 --> 00:15:31,734
let us watch. So controller manager kind

239
00:15:31,772 --> 00:15:35,206
control plane it's not in. Yeah it got up

240
00:15:35,228 --> 00:15:38,566
and in up and running state now. Yeah all the pods are in

241
00:15:38,588 --> 00:15:41,898
ready state. So let us do one thing. Let me go back

242
00:15:42,064 --> 00:15:45,866
in the commands, copy this line. And I need to

243
00:15:45,888 --> 00:15:49,126
fire this because now I'm going to install the Nginx

244
00:15:49,158 --> 00:15:53,146
Nginx ingress controller, the kind based Kubernetes cluster.

245
00:15:53,258 --> 00:15:56,254
So this link, right,

246
00:15:56,292 --> 00:15:59,582
it basically has a file and it has got namespace service

247
00:15:59,636 --> 00:16:02,282
account, config map and bunch of other kubernetes objects.

248
00:16:02,426 --> 00:16:06,386
And these are all required to have

249
00:16:06,408 --> 00:16:10,018
the Nginx ingress controller up and running right in your cluster. So I'm going to

250
00:16:10,024 --> 00:16:11,620
fire this wait command now.

251
00:16:13,190 --> 00:16:16,950
So it will wait till all the pods are up and running.

252
00:16:17,020 --> 00:16:20,482
So let me start another window for Tillix

253
00:16:20,546 --> 00:16:24,022
and increase the font. Let me try

254
00:16:24,076 --> 00:16:24,680
running,

255
00:16:43,610 --> 00:16:46,790
let me copy this command. Watch Kubectl.

256
00:16:52,450 --> 00:16:56,130
Yeah here also the Kubectl weight command,

257
00:16:58,630 --> 00:17:02,100
it succeeded. Here you can see the condition was made and then

258
00:17:02,950 --> 00:17:06,258
the command has ended. Right. So now moving back to

259
00:17:06,344 --> 00:17:10,214
the commands file and here

260
00:17:10,252 --> 00:17:13,042
you can see I now need to edit the deployment,

261
00:17:13,106 --> 00:17:18,994
right, which is in ingress Nginx namespace

262
00:17:19,122 --> 00:17:22,182
and the deployment name is Ingress Nginx controller.

263
00:17:22,246 --> 00:17:25,418
And I need to basically add this flag, right.

264
00:17:25,584 --> 00:17:29,382
So I will just end this window

265
00:17:29,446 --> 00:17:32,942
terminal and here editing the

266
00:17:32,996 --> 00:17:36,800
deployment. Okay, moving down.

267
00:17:41,480 --> 00:17:45,140
Yeah. So here you can see in the spec part containers,

268
00:17:45,640 --> 00:17:49,464
the container is Nginx Ingress controller. Right. And I now need to add

269
00:17:49,502 --> 00:17:52,696
one more argument over here.

270
00:17:52,798 --> 00:17:55,690
So what I will do is I will just copy and paste this.

271
00:17:59,260 --> 00:18:02,844
So I have added this now and I will just exit from this

272
00:18:02,882 --> 00:18:06,456
file. Yeah, the deployment was edited. Okay let's

273
00:18:06,488 --> 00:18:07,630
move back to,

274
00:18:11,120 --> 00:18:14,896
let's move back. Let me see whether all ports are

275
00:18:14,918 --> 00:18:18,604
up and running or not. So in the ingress

276
00:18:18,652 --> 00:18:22,208
Nginx namespace, the controller component should be up and running, right. So it

277
00:18:22,214 --> 00:18:27,364
is not in the ready state because after I

278
00:18:27,402 --> 00:18:30,976
modify the deployment, the container

279
00:18:31,008 --> 00:18:35,284
got restarted. Right. So yeah,

280
00:18:35,322 --> 00:18:39,210
now we can see that it is in the ready state. Right. One on one.

281
00:18:40,300 --> 00:18:43,320
Let's move back to the presentation. So this was like a demo one.

282
00:18:43,390 --> 00:18:46,904
So this is how we create a kind

283
00:18:46,942 --> 00:18:50,380
based kubernetes cluster and install NginX ingress controller on it.

284
00:18:50,450 --> 00:18:54,284
Okay then in the demo two, we have a

285
00:18:54,322 --> 00:18:58,472
GRPC serverside and then we need to run it on the kubernetes.

286
00:18:58,616 --> 00:19:02,620
And then we will basically expose this GRPC server through service

287
00:19:02,690 --> 00:19:06,224
through NginX ingress. Right, move back. And now we need to

288
00:19:06,262 --> 00:19:09,248
explore this MTLs part.

289
00:19:09,334 --> 00:19:13,288
But just before that, let me walk you through the Golang GrPC server.

290
00:19:13,404 --> 00:19:17,350
So this is a Golang based project. So here you can see

291
00:19:18,360 --> 00:19:21,536
in the protobops folder I have employee proto,

292
00:19:21,648 --> 00:19:25,556
okay, so this is the way to

293
00:19:25,578 --> 00:19:29,348
define the contract in protobops. So I'm using proto

294
00:19:29,364 --> 00:19:33,160
three, making use of employee package

295
00:19:33,740 --> 00:19:37,016
and then I have a service, okay, this service is basically,

296
00:19:37,198 --> 00:19:40,748
so service will basically have all the RPC methods in it. So get details is

297
00:19:40,754 --> 00:19:43,788
one of the RPC method which I have used in this demo.

298
00:19:43,954 --> 00:19:47,272
And then there are messages as well. So employee request

299
00:19:47,336 --> 00:19:50,204
has just one field called id.

300
00:19:50,322 --> 00:19:53,824
So whenever client will try to access the employee by

301
00:19:53,862 --> 00:19:57,330
id, the request needs to be formed in this way

302
00:19:57,860 --> 00:20:01,356
and the response will be of this type. So employee response,

303
00:20:01,388 --> 00:20:05,324
it has a nested message, employee details. And the employee details

304
00:20:05,452 --> 00:20:08,916
message has these four fields, id, email, first name, last name.

305
00:20:09,018 --> 00:20:12,548
Okay, and in the employee service you can see RPC is

306
00:20:12,554 --> 00:20:15,616
get details and the employee request is being passed

307
00:20:15,648 --> 00:20:18,468
from the client and it returns employee response.

308
00:20:18,564 --> 00:20:22,248
Right. So in the server package I have main

309
00:20:22,334 --> 00:20:26,516
go, okay, so just before that. So when you have employee

310
00:20:26,628 --> 00:20:29,976
proto, so you need to have some Golang code, right,

311
00:20:29,998 --> 00:20:33,656
because your server is in Golang. So you need to have some Golang implementation

312
00:20:33,688 --> 00:20:36,824
of this proto file. So there is a protocub

313
00:20:36,872 --> 00:20:40,856
compiler which you can use to create these files.

314
00:20:41,048 --> 00:20:44,880
Okay, so these files are auto generated. When you open it, you will notice

315
00:20:46,740 --> 00:20:50,060
this message code generated by protocin, right. Do not edit.

316
00:20:50,140 --> 00:20:53,990
So this is generated using the command and this code is like,

317
00:20:55,560 --> 00:20:59,204
so this code is basically generated as per

318
00:20:59,242 --> 00:21:03,188
the information you specify here. Okay, so both files are

319
00:21:03,274 --> 00:21:06,820
created using the protoc

320
00:21:07,160 --> 00:21:10,484
and it is as per the proto which you have created.

321
00:21:10,612 --> 00:21:14,296
Okay, so when you create these two files, you can now make use of

322
00:21:14,318 --> 00:21:17,752
these two files in your server main go. Okay,

323
00:21:17,806 --> 00:21:21,980
so let me walk you through what I have in the server.

324
00:21:22,960 --> 00:21:26,156
So I will not go into much details, but let me

325
00:21:26,178 --> 00:21:30,252
just show you the gate details. Right. So gate details is the server method here,

326
00:21:30,306 --> 00:21:33,872
right. And employee request, that is what I'm accepting here.

327
00:21:33,926 --> 00:21:37,820
Right. And then I'm checking for is valid certificate.

328
00:21:37,980 --> 00:21:41,740
Okay, that's the first check. And then inside that method

329
00:21:41,820 --> 00:21:45,164
I'm also checking for some c and common name and all.

330
00:21:45,302 --> 00:21:48,768
And then when that check is passed here in get employee

331
00:21:48,784 --> 00:21:53,184
details, I basically retry

332
00:21:53,232 --> 00:21:56,536
all the employees and then run

333
00:21:56,558 --> 00:21:59,816
a for loop and then just extract the

334
00:21:59,838 --> 00:22:03,080
employee by id, right. And then just return that employee.

335
00:22:04,300 --> 00:22:07,768
Few other things which you might be interested in

336
00:22:07,854 --> 00:22:12,090
are. So here you can see I'm trying to create a cert full

337
00:22:13,280 --> 00:22:17,644
which using the certificates present at this path. Okay. And then

338
00:22:17,842 --> 00:22:22,796
once I have all the certificates I

339
00:22:22,818 --> 00:22:26,896
need to add them to the TLS config here, right? So I

340
00:22:26,918 --> 00:22:30,256
get cert pool and certificate here and then I try to

341
00:22:30,278 --> 00:22:33,940
create TLS config. So I written tls config from here and then

342
00:22:34,010 --> 00:22:37,540
making use of it here. So in the main method

343
00:22:37,960 --> 00:22:41,104
you can see I'm trying to run GrPC

344
00:22:41,152 --> 00:22:44,480
server using this credits method

345
00:22:44,560 --> 00:22:47,430
and passing this TLS config. Right,

346
00:22:48,200 --> 00:22:51,764
okay, so the next thing would be the Kubernetes

347
00:22:51,812 --> 00:22:55,288
folder. So here I have config map. So I have got two

348
00:22:55,294 --> 00:22:58,696
config maps as I had shown you in the diagram, right? So one

349
00:22:58,718 --> 00:23:02,010
of them is to store the server data,

350
00:23:02,560 --> 00:23:05,976
server details. Like here you can see I have server address and server

351
00:23:06,008 --> 00:23:09,368
port in the config map. Okay. And in the next config map

352
00:23:09,384 --> 00:23:13,036
I just have employee database. So all the employees I have placed in the config

353
00:23:13,068 --> 00:23:17,116
map in the deployment I have just one container

354
00:23:17,148 --> 00:23:20,784
running and the container will be running this

355
00:23:20,822 --> 00:23:27,296
Golang GrPC server code. Right? So I have already got a docker image on

356
00:23:27,318 --> 00:23:31,110
this account, Mahindrabagal Golang 2020 1 meter and

357
00:23:32,840 --> 00:23:36,470
few things to notice here that I'm passing server port and

358
00:23:37,420 --> 00:23:40,788
employees from config map as an environment variable,

359
00:23:40,884 --> 00:23:44,436
right? And I will be mounting, so here down below you can see I'm

360
00:23:44,468 --> 00:23:48,296
mounting the certificates which are

361
00:23:48,318 --> 00:23:51,450
in the secret on a pod. Right,

362
00:23:55,580 --> 00:23:59,496
sorry. Yeah, so I don't have a yaml file

363
00:23:59,528 --> 00:24:03,720
for creating secrets here. I have got it in the MTLs directory,

364
00:24:03,800 --> 00:24:06,844
but I will show you when I will go in the MTLs directory.

365
00:24:06,972 --> 00:24:09,872
So I'm just mounting the secrets on a pod here, right.

366
00:24:10,006 --> 00:24:14,096
And in the ingress part you can see few things to notice

367
00:24:14,208 --> 00:24:18,116
are like. So you

368
00:24:18,138 --> 00:24:21,344
need to specify these annotations. Okay, so Auth TLS

369
00:24:21,392 --> 00:24:25,392
pass certificate to upstream. True. Then also you need to specify

370
00:24:25,536 --> 00:24:29,076
where you have your GRPC server certificates, right? Let me

371
00:24:29,098 --> 00:24:32,616
go back to the diagram so that it can get more clear. Yeah. So if

372
00:24:32,638 --> 00:24:36,250
you see here, then the ingress is referring to this secret, right? So here

373
00:24:36,780 --> 00:24:40,520
this annotation is referring to the secret. Also the

374
00:24:40,590 --> 00:24:44,640
backend protocol is GRPC right now and the GRPC backend

375
00:24:44,740 --> 00:24:47,896
true. That's what you need to mention. And this annotation

376
00:24:47,928 --> 00:24:51,916
needs to be specified. This needs

377
00:24:51,938 --> 00:24:55,676
to be specified because that's what we did when we installed NgINX

378
00:24:55,708 --> 00:24:59,328
Ingress controller as well, right? And here in the

379
00:24:59,334 --> 00:25:03,056
rules part you have Golang 2021 conf 42

380
00:25:03,078 --> 00:25:06,832
that's like etc. Host entry.

381
00:25:06,976 --> 00:25:10,816
And here in the service you can see Golang

382
00:25:10,848 --> 00:25:14,596
JRPC server. So this service I'm specifying from the ingress. So you can

383
00:25:14,618 --> 00:25:17,776
relate this diagram here. So I have opened Ingress yaml

384
00:25:17,808 --> 00:25:21,256
configuration here and this ingress is referring to service, right? So this

385
00:25:21,278 --> 00:25:25,304
is what I'm doing here. So Golang JrPC server this service I am referring over

386
00:25:25,342 --> 00:25:28,552
here, right? And the port is 50 00:51 okay?

387
00:25:28,606 --> 00:25:32,556
And then TSS host is Golang 2021

388
00:25:32,578 --> 00:25:36,428
again in the service it

389
00:25:36,434 --> 00:25:40,030
is just like a plain, any normal Kubernetes service

390
00:25:40,720 --> 00:25:44,770
definition over here. So Golang GrPC service I'm labeling over here.

391
00:25:45,380 --> 00:25:48,530
So just wrapping the deployment and pods, right?

392
00:25:49,540 --> 00:25:53,020
With this understanding let's move to the MTLs folder.

393
00:25:53,100 --> 00:25:56,944
So I have got few sales script, let me minimize

394
00:25:56,992 --> 00:25:59,190
this and then expand this one.

395
00:26:01,480 --> 00:26:04,672
I have got a few shell script files.

396
00:26:04,736 --> 00:26:07,510
So Jainserd sh and jainsecrets sh.

397
00:26:07,960 --> 00:26:12,196
So Janeserd sh has all the commands

398
00:26:12,228 --> 00:26:15,684
to create the root can server ca, then client

399
00:26:15,732 --> 00:26:19,444
CA server certificates, client certificates and the certificate

400
00:26:19,492 --> 00:26:22,956
chain as well, right? And when you do that, when you

401
00:26:22,978 --> 00:26:25,960
fire this command, the whole set of certificates will be generated.

402
00:26:26,120 --> 00:26:29,308
Then once you generate these certificates, you also need to

403
00:26:29,314 --> 00:26:34,028
now create secrets out of this file set so that the

404
00:26:34,114 --> 00:26:37,776
secret creation I have added Kubectl commands for them here, right? So you

405
00:26:37,798 --> 00:26:41,376
can see here kubectl delete namespace. If there is already namespace present for

406
00:26:41,398 --> 00:26:45,376
this Golang 2021 meetup, then it will be deleted. And I'm

407
00:26:45,408 --> 00:26:48,928
creating a new one and creating a bunch of certificates here, right? So just creating

408
00:26:48,944 --> 00:26:51,940
GrPC server certificates, okay?

409
00:26:52,090 --> 00:26:56,244
And in the Openssl CNF I have a few configurations for

410
00:26:56,282 --> 00:26:59,448
my certificates here. So I'm Golang to push this repository. You can have a

411
00:26:59,454 --> 00:27:04,276
detailed look at it or you can watch my another meetup

412
00:27:04,308 --> 00:27:08,292
video where I have gone through these files in detail level.

413
00:27:08,446 --> 00:27:12,044
Okay, so let us do one thing,

414
00:27:12,082 --> 00:27:16,204
let me move to code and

415
00:27:16,242 --> 00:27:21,740
then configs

416
00:27:23,300 --> 00:27:28,272
emtls and then gen

417
00:27:28,326 --> 00:27:29,200
certs.

418
00:27:32,260 --> 00:27:35,888
So it is now creating all the secrets,

419
00:27:35,984 --> 00:27:39,780
all the certificates. So once

420
00:27:39,930 --> 00:27:43,616
all the certificates are generated we will try firing

421
00:27:43,648 --> 00:27:55,808
this gensecrets sharonspace

422
00:27:55,844 --> 00:27:59,356
earlier because we created a fresh cluster and a namespace was created and also a

423
00:27:59,378 --> 00:28:03,148
secret got created. Right? So now once we have these certificates,

424
00:28:03,244 --> 00:28:06,896
once we have these secrets here, what we can do is we can move to

425
00:28:07,078 --> 00:28:08,400
another folder,

426
00:28:10,740 --> 00:28:15,120
that is Golang GrPC

427
00:28:15,200 --> 00:28:16,020
server,

428
00:28:18,200 --> 00:28:18,950
sorry.

429
00:28:22,820 --> 00:28:26,336
And then we will just try. So we first

430
00:28:26,358 --> 00:28:29,120
need to apply all the commands,

431
00:28:30,180 --> 00:28:32,450
sorry we need to apply all the,

432
00:28:33,620 --> 00:28:37,616
we need to do kubectl, apply for all this Kubectl, all these yaml files,

433
00:28:37,648 --> 00:28:41,544
right? So we will do this using this command k apply f

434
00:28:41,662 --> 00:28:45,284
kubernetes and it will basically create config

435
00:28:45,332 --> 00:28:48,568
map, two config maps, deployment, one ingress and one service.

436
00:28:48,654 --> 00:28:52,152
Right, for our objects that we just discussed. Right. These four.

437
00:28:52,286 --> 00:28:55,996
And let us now move back to the terminal window and let

438
00:28:56,018 --> 00:28:59,070
us watch the Kubectl get pods a.

439
00:29:00,000 --> 00:29:03,468
So here you can see a Golang 2021

440
00:29:03,554 --> 00:29:07,128
meetup, a namespace was created and a new server, a new pod

441
00:29:07,144 --> 00:29:09,790
is running, right. And it's not in the ready state eight.

442
00:29:10,100 --> 00:29:14,076
So it will take some time because this is a new cluster

443
00:29:14,188 --> 00:29:16,770
and I had removed all my images on my local.

444
00:29:18,820 --> 00:29:22,548
It will try to pull can image from Docker hub. So it's in

445
00:29:22,554 --> 00:29:25,350
the release state. Now let's do one thing.

446
00:29:27,160 --> 00:29:30,456
So our Golang server is up and

447
00:29:30,478 --> 00:29:33,816
running now inside a Kubernetes cluster. So what

448
00:29:33,838 --> 00:29:37,588
we will do is now we will move to node

449
00:29:37,604 --> 00:29:41,656
JrPC client and we

450
00:29:41,678 --> 00:29:45,096
will try to run it, right? So this node GrPC client,

451
00:29:45,128 --> 00:29:49,928
it will run on my local and it will talk to the Golang

452
00:29:49,944 --> 00:29:53,672
GrPC server running on a Kubernetes cluster behind the ingress.

453
00:29:53,736 --> 00:29:58,128
Right? So let me first run it and then we

454
00:29:58,134 --> 00:30:01,804
will walk through the code. Okay, so node

455
00:30:01,852 --> 00:30:07,750
GrPC client. So the command to run is node five.

456
00:30:10,840 --> 00:30:13,030
Oh, it's index js. Right?

457
00:30:16,360 --> 00:30:21,128
So there are just four employees. So when I specified two, the employee was

458
00:30:21,294 --> 00:30:25,764
retrieved. Right? So this message is coming from the Kubernetes

459
00:30:25,812 --> 00:30:29,656
cluster, a pod running on a Kubernetes cluster which was

460
00:30:29,678 --> 00:30:32,444
created using kind. So let me first,

461
00:30:32,482 --> 00:30:35,724
now walk you through the node GrPC client code,

462
00:30:35,762 --> 00:30:40,636
right? So I have index js which I ran basically let

463
00:30:40,658 --> 00:30:41,470
me close,

464
00:30:43,680 --> 00:30:47,376
it's taking some time because I have got two other clusters running on my

465
00:30:47,398 --> 00:30:51,920
local as well. Yeah. So here you can see in index js

466
00:30:52,340 --> 00:30:56,908
I'm using jrpcjs which is GrPC library.

467
00:30:57,084 --> 00:31:00,880
And then using helper methods from that library I'm

468
00:31:03,540 --> 00:31:06,836
loading the protobuff file. So in the protobob's directory we will

469
00:31:06,858 --> 00:31:09,364
have the same file here, right, can you see,

470
00:31:09,562 --> 00:31:12,756
right. So then once I

471
00:31:12,778 --> 00:31:15,784
read that file I create can employee service object Javascript object,

472
00:31:15,822 --> 00:31:19,176
right. Then I'm specifying this.

473
00:31:19,358 --> 00:31:23,416
So I'm trying to create a credentials, basically GRPC

474
00:31:23,448 --> 00:31:27,004
credentials. So createssl is a method helper method and it basically

475
00:31:27,122 --> 00:31:30,860
takes three parameters. So first parameter is a CA cert

476
00:31:30,930 --> 00:31:34,656
chain basically then the

477
00:31:34,678 --> 00:31:38,876
key and then the cert. So you can see GrPC client key and GrPC

478
00:31:38,908 --> 00:31:40,610
client cert, right?

479
00:31:41,620 --> 00:31:45,696
And using these generate credentials I

480
00:31:45,718 --> 00:31:48,988
will try to create a GrPC client. So here you can see,

481
00:31:49,094 --> 00:31:52,340
you can notice this URL, right Golang 2021

482
00:31:52,410 --> 00:31:56,516
com 42. Com four four three. So this is basically

483
00:31:56,618 --> 00:32:00,310
the URL configured on the ingress. So if I

484
00:32:00,760 --> 00:32:04,244
go and open the ingress yaml,

485
00:32:04,292 --> 00:32:08,132
right, so here you can see the host configuration. So this is the host specified

486
00:32:08,196 --> 00:32:11,092
over here, right. And as this is a TLS connection,

487
00:32:11,236 --> 00:32:14,780
it runs on the port four four three. And you might have

488
00:32:14,930 --> 00:32:18,024
also noticed when I had created kind based cluster,

489
00:32:18,152 --> 00:32:22,076
I had expose four four three,

490
00:32:22,098 --> 00:32:26,032
right, extra port mappings, that's what I had done. So this is like a way

491
00:32:26,086 --> 00:32:30,476
to run your mtls

492
00:32:30,508 --> 00:32:34,704
based applications on kind based Kubernetes cluster. Okay so

493
00:32:34,822 --> 00:32:39,584
the other file which you should be looking at this

494
00:32:39,622 --> 00:32:42,756
index js in the client folder. So here I'm just

495
00:32:42,778 --> 00:32:46,640
like trying to hit or trying to call this gate details. So this get details

496
00:32:46,720 --> 00:32:49,936
is a RPC method. Define the proto file

497
00:32:49,968 --> 00:32:53,720
right here. So I'm just trying to

498
00:32:53,870 --> 00:32:57,336
hit it over here and then once I get the response I'm just

499
00:32:57,358 --> 00:33:01,396
trying to log it here so you can see the employer

500
00:33:01,428 --> 00:33:04,776
details for employee id. That's the message printed over here and then

501
00:33:04,878 --> 00:33:08,376
the whole message, right? Yeah. So that is the end of the

502
00:33:08,398 --> 00:33:11,688
second demo at intracloud we are hiring. You can

503
00:33:11,774 --> 00:33:17,276
go and visit this link HTTPs slash

504
00:33:17,308 --> 00:33:20,768
careers or you can just send your resumes on this link clusters at the

505
00:33:20,774 --> 00:33:25,488
rate infracloud IO thank you. So this was a

506
00:33:25,494 --> 00:33:29,296
try from my end for explaining or for playing with kind

507
00:33:29,398 --> 00:33:33,740
Nginx ingress controller and secured GRPC server.

508
00:33:33,900 --> 00:33:34,960
Thank you everyone,

