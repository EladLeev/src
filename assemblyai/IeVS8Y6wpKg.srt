1
00:00:25,970 --> 00:00:29,334
Hi everyone, I'm Steven Kolawole all

2
00:00:29,372 --> 00:00:33,378
the way from Lagos, Nigeria, and I'll be speaking on Streamlit,

3
00:00:33,474 --> 00:00:36,920
the fastest way to build data apps. Let's get started.

4
00:00:37,290 --> 00:00:41,190
Here's my table of contents. I'll be explaining the problem

5
00:00:41,260 --> 00:00:44,534
being faced by data scientists and machine learning engineers in

6
00:00:44,572 --> 00:00:48,230
building web apps today. Then we'll move on to

7
00:00:48,380 --> 00:00:53,134
Streamlit. I will explain what Streamlit is all about and

8
00:00:53,172 --> 00:00:57,086
what it does afterwards. We'll play around with

9
00:00:57,108 --> 00:01:01,146
the storage process and we'll check out them. And then we'll

10
00:01:01,178 --> 00:01:04,526
move on to building the step by step process of building an

11
00:01:04,548 --> 00:01:07,986
interf and then I'll be showing you

12
00:01:08,008 --> 00:01:11,118
the building blocks that streamlit

13
00:01:11,134 --> 00:01:14,706
makes youre in the building of a data hub. Also, we have in a

14
00:01:14,728 --> 00:01:17,778
sneak peek at the different use cases of Streamlit.

15
00:01:17,874 --> 00:01:21,554
Finally, I'll be taking us to the console streamlit.

16
00:01:21,602 --> 00:01:25,346
Why? Streamlit might not be the ultimate solution to all data apps

17
00:01:25,378 --> 00:01:28,706
problem out there all right, so here's

18
00:01:28,738 --> 00:01:31,934
my profile. I'm currently a machine learning engineers.

19
00:01:32,082 --> 00:01:35,834
I'm currently looking for my next gig. I'm a computer science undergrad at

20
00:01:35,872 --> 00:01:38,838
Federal University of Agriculture Abiocuta.

21
00:01:38,934 --> 00:01:42,958
I'm a finalist. I mean, I'm in my final year of school and also

22
00:01:43,044 --> 00:01:47,162
I consider my skill set to be somewhere in the intersection of software

23
00:01:47,226 --> 00:01:50,762
engineering and data science. I'm also a Liverpool citizen

24
00:01:50,826 --> 00:01:54,574
since I've been a kid. And yeah, I'm a python freak. I use Python

25
00:01:54,622 --> 00:01:58,510
for most of my stuff. I use Python for web development,

26
00:01:58,590 --> 00:02:01,858
for data science, for machine learning

27
00:02:01,944 --> 00:02:05,522
at home. Yeah, I'm also a foodie. Yeah, I like my food.

28
00:02:05,656 --> 00:02:08,854
Okay, so let's get down to business. What's our

29
00:02:08,892 --> 00:02:12,246
problem statement? If you've asked to build a

30
00:02:12,268 --> 00:02:15,606
data hub or a data driven web app before, this is

31
00:02:15,628 --> 00:02:19,734
the issue process, right? The first step is usually the

32
00:02:19,772 --> 00:02:23,190
data processing and data analysis, which is done in

33
00:02:23,260 --> 00:02:26,586
iPOIMB files, right? And then if

34
00:02:26,608 --> 00:02:30,270
you want to share your findings with others, you might want to do that using

35
00:02:30,340 --> 00:02:32,880
notebooks, right? Or better still,

36
00:02:34,770 --> 00:02:38,266
if you want to reach a wider audience, that you might want to copy

37
00:02:38,298 --> 00:02:42,282
all the relevant functions into a Py scripts

38
00:02:42,346 --> 00:02:46,082
into a Python script. You can then create an app

39
00:02:46,216 --> 00:02:49,934
using flask, right? And then if you're using flux,

40
00:02:49,982 --> 00:02:53,490
you need to build a front end part too. And for you to do that

41
00:02:53,560 --> 00:02:57,474
you need to use HTML, CSS, JavaScript and JSON.

42
00:02:57,522 --> 00:03:01,430
At very least you might want to use a JavaScript framework also,

43
00:03:01,500 --> 00:03:06,054
right? But let's say your work is part of an organization process.

44
00:03:06,252 --> 00:03:09,894
So it is an organization, then you most

45
00:03:09,932 --> 00:03:12,838
likely have a dedicated software engineering team,

46
00:03:12,924 --> 00:03:16,106
right? So that means you don't have to build the web app yourself. So you

47
00:03:16,128 --> 00:03:19,270
could give the requirements, the specifications

48
00:03:19,350 --> 00:03:22,540
to the engineering team. And of course

49
00:03:22,930 --> 00:03:26,894
the engineering team will take care of the designing. And of course

50
00:03:26,932 --> 00:03:30,974
let's say in a week or two you might have a state of

51
00:03:31,012 --> 00:03:34,634
the heart hub and then the team lead for the engineering

52
00:03:34,682 --> 00:03:37,906
team might probably tell you able only be able to

53
00:03:37,928 --> 00:03:41,506
carry out updates on your hub in let's say two or

54
00:03:41,528 --> 00:03:45,234
three months, right? So that leads us to the pain point.

55
00:03:45,352 --> 00:03:49,974
Now, depending upon the software engineering team

56
00:03:50,172 --> 00:03:53,734
to do this for you is nice, but also take up

57
00:03:53,772 --> 00:03:55,000
a bunch of our time,

58
00:03:56,330 --> 00:03:59,846
this sort of back and forth and they need to get

59
00:03:59,868 --> 00:04:03,146
the specification right. Communication can

60
00:04:03,168 --> 00:04:06,634
really be stressed at times and you probably won't want

61
00:04:06,672 --> 00:04:10,166
that. And also you won't be able to create new features

62
00:04:10,198 --> 00:04:14,206
and updates on a web, right? Because youre

63
00:04:14,228 --> 00:04:17,854
need to talk to the software development team. And of course doing

64
00:04:17,892 --> 00:04:21,262
that take time and software development team. I also have lot of stuff

65
00:04:21,316 --> 00:04:25,694
on this page. Yeah we'd rather create this apps ourselves. But for

66
00:04:25,732 --> 00:04:29,326
one, most of us are not particular athletes. If you're like me, I can't

67
00:04:29,358 --> 00:04:32,100
recognize a blue color from a yellow color.

68
00:04:33,590 --> 00:04:37,646
I suck at UI designs. Of course creating

69
00:04:37,678 --> 00:04:41,238
web apps means you'll be spending a huge amount of time

70
00:04:41,324 --> 00:04:44,790
and most of us will rather use that amount of time to do something

71
00:04:44,860 --> 00:04:48,134
else. Also, if you're using Flask for your app, it also

72
00:04:48,172 --> 00:04:51,414
means that youre have to bother with JavaScript, with HTML,

73
00:04:51,462 --> 00:04:55,866
with CSS amongst others and of course learning. Those also

74
00:04:56,048 --> 00:05:00,426
take a while. And finally, most of us prefer to use our code

75
00:05:00,528 --> 00:05:04,094
to generate insights or building model. And then I use our

76
00:05:04,132 --> 00:05:07,342
code to provide user with a blizzard experience.

77
00:05:07,476 --> 00:05:11,342
And that leads us to the million dollar question, what if we can build

78
00:05:11,476 --> 00:05:14,734
apps as easy as writing Python script? That will probably change

79
00:05:14,772 --> 00:05:18,302
the world, right? So that leads us to streamlit.

80
00:05:18,446 --> 00:05:22,226
What is streamlit? So let's just say that Streamlit is the

81
00:05:22,248 --> 00:05:25,426
app that data scientists have been waiting for.

82
00:05:25,528 --> 00:05:28,594
Building apps with Streamlit is as easy as writing Python

83
00:05:28,642 --> 00:05:32,066
script. Let's say you have a particular Python script

84
00:05:32,098 --> 00:05:35,990
here, then you write in your functions, you sprinkle in a few public

85
00:05:36,060 --> 00:05:39,654
API call and calls and of course then youre go

86
00:05:39,692 --> 00:05:43,018
back to your browser. Of course you'll be able to see your

87
00:05:43,104 --> 00:05:45,962
new beautiful web app. Is that easy, right?

88
00:05:46,096 --> 00:05:49,914
Yeah, and it covers most UI used in data hub think.

89
00:05:49,952 --> 00:05:54,302
But the check the select post you

90
00:05:54,356 --> 00:05:59,594
have in a chart you have in a drag

91
00:05:59,642 --> 00:06:03,282
button, right? And all this would probably take

92
00:06:03,336 --> 00:06:07,042
minutes or hours. You try to implement them on the front

93
00:06:07,096 --> 00:06:10,894
end side, but with streamlit they already made functions,

94
00:06:10,942 --> 00:06:14,562
not even functions ready made. Readymade. Okay, lets me use

95
00:06:14,616 --> 00:06:17,560
methods. They are readymade methods that you could use.

96
00:06:18,570 --> 00:06:21,910
You could do them in less than maybe a line or two of code

97
00:06:21,980 --> 00:06:25,570
and I think that's quite fun. Also, streamlit supports

98
00:06:25,650 --> 00:06:29,746
multiple interaction visualization libraries. Talk of plotty

99
00:06:29,858 --> 00:06:33,666
bokeh, Pydec or mathplotly seaborne.

100
00:06:33,698 --> 00:06:36,954
Yeah, streamlit supports every one of them. And also your

101
00:06:36,992 --> 00:06:40,826
favorite machine learning tools like pandas, psychics, all of

102
00:06:40,848 --> 00:06:44,142
them are fully supported by Streamlit. Having said that,

103
00:06:44,196 --> 00:06:47,662
let's go through the installation process and maybe play with it then.

104
00:06:47,796 --> 00:06:51,214
All right, so for you to install streamlit you need to do

105
00:06:51,252 --> 00:06:54,766
app stop pp stuff streamlit. And afterwards you

106
00:06:54,788 --> 00:06:57,810
can best on it using Streamlit. Hello.

107
00:06:57,880 --> 00:07:01,506
I'm going to try it out. So I already have

108
00:07:01,528 --> 00:07:05,300
streamlit installed. So I'll just do streamlit. Hello.

109
00:07:07,990 --> 00:07:11,314
So it's coming up and got

110
00:07:11,352 --> 00:07:13,570
this up on my browser.

111
00:07:14,870 --> 00:07:18,534
You can see the documentation. Feel free to try this out on your phone later

112
00:07:18,652 --> 00:07:22,134
and just have fun with it. So I could

113
00:07:22,252 --> 00:07:25,820
just to play analyze the demo. I'm going to try this plot and demo.

114
00:07:26,670 --> 00:07:29,802
Okay. You can see it's loading up and you can see the nice animation over

115
00:07:29,856 --> 00:07:34,080
there. And I can zoom in. I can zoom but

116
00:07:35,170 --> 00:07:38,622
so you could try this out. It's quite nice.

117
00:07:38,676 --> 00:07:42,346
And the animation is just for 5 seconds,

118
00:07:42,378 --> 00:07:45,758
I think. And let's go further.

119
00:07:45,854 --> 00:07:49,666
Let's go down. Yeah. So everything youre seeing up there

120
00:07:49,688 --> 00:07:53,522
is implemented with this, I think less than 15 online

121
00:07:53,576 --> 00:07:56,260
support. I think that's pretty amazing.

122
00:07:56,710 --> 00:07:59,990
Feel free to try out all the other DevOps.

123
00:08:00,890 --> 00:08:04,694
So let's move on. Now I'm going to walk us through the process of

124
00:08:04,732 --> 00:08:07,894
getting the data upstream. Let's assume that we

125
00:08:07,932 --> 00:08:11,414
have a file called hello Py file. And of

126
00:08:11,452 --> 00:08:15,670
course you have to input streamlit it as ST and then style.

127
00:08:15,830 --> 00:08:19,686
Now then you go back to your bash or your command

128
00:08:19,718 --> 00:08:23,546
prompt on windows and try streamlit on lo PI. And of

129
00:08:23,568 --> 00:08:26,842
course it's going to bring this up in your browser automatically.

130
00:08:26,986 --> 00:08:30,346
And I think this is pretty amazing because if you are doing this in flask,

131
00:08:30,378 --> 00:08:34,030
you'll be doing it in I think, five or seven lines of code.

132
00:08:34,180 --> 00:08:37,902
I feel this task quite wonderful. Yeah. So moving

133
00:08:37,956 --> 00:08:41,886
on, let's try that part. All right, so I'm

134
00:08:41,918 --> 00:08:43,860
going to open up the other five,

135
00:08:46,810 --> 00:08:49,974
but I think it's straightforward. So I'm not going to try it

136
00:08:50,012 --> 00:08:53,394
out. I'm going to try out a slightly more complex

137
00:08:53,522 --> 00:08:54,200
example.

138
00:08:57,550 --> 00:09:01,354
Here we are. Now, this file you're looking at, the idea behind

139
00:09:01,392 --> 00:09:05,306
this is this. I have a younger sister who is starting

140
00:09:05,408 --> 00:09:09,434
with data science journey. So she

141
00:09:09,472 --> 00:09:13,566
was busy with the statistics and probability part, and I

142
00:09:13,668 --> 00:09:17,742
felt that it would make much more sense. She gets to see

143
00:09:17,796 --> 00:09:21,246
what she's learning. She gets to see it

144
00:09:21,268 --> 00:09:24,820
in parties and get to

145
00:09:25,190 --> 00:09:28,322
know and see how it works. So that's the idea

146
00:09:28,376 --> 00:09:31,714
behind this scripts. So of course, I have to import

147
00:09:31,832 --> 00:09:35,446
it as sd, import numpy as mp. I expect most of

148
00:09:35,468 --> 00:09:39,510
you to be familiar with that. Numpy is a numerical

149
00:09:40,970 --> 00:09:44,966
computational library, Python. All right, so ST

150
00:09:45,068 --> 00:09:48,534
title, I think that's self explanatory. We are going to have a pick

151
00:09:48,572 --> 00:09:51,814
title distribution test as the words and

152
00:09:51,852 --> 00:09:55,914
ST threads means that we might have a line of code with

153
00:09:55,952 --> 00:09:58,954
this particular test. Pick a distribution from the list,

154
00:09:58,992 --> 00:10:01,802
and we shall draw the line chart from blah, blah, blah. Okay?

155
00:10:01,856 --> 00:10:05,246
Yeah. So here's another line of code. We have the

156
00:10:05,268 --> 00:10:09,022
keys, which is actually a list and number. We have number

157
00:10:09,076 --> 00:10:12,414
and uniform elements in the list. I have

158
00:10:12,452 --> 00:10:16,266
this key, which is actually a symbolic

159
00:10:16,298 --> 00:10:19,810
method, and it's a select, but you can see a sticker select,

160
00:10:19,880 --> 00:10:23,486
but which distribution do you want to plot? And I passed

161
00:10:23,518 --> 00:10:27,282
in the key list variable as an argument.

162
00:10:27,426 --> 00:10:30,614
Now, if this key is equals to

163
00:10:30,652 --> 00:10:33,878
number, right, I'm going to have nums. And nums is going to

164
00:10:33,884 --> 00:10:37,026
be a randomly generated number within the range

165
00:10:37,058 --> 00:10:40,198
of zero to 1000.

166
00:10:40,284 --> 00:10:44,502
To 1000. Of course, if this key

167
00:10:44,556 --> 00:10:48,810
is uniform, right, they're going to have a list of range

168
00:10:49,230 --> 00:10:52,778
zero to 1000. Then it's going to be a

169
00:10:52,784 --> 00:10:56,414
randomly generated number. It says zero to one. Now, the highland line of

170
00:10:56,452 --> 00:10:59,934
code is a line chart, right. And we are passing in the

171
00:10:59,972 --> 00:11:03,554
nums list or elements as

172
00:11:03,592 --> 00:11:07,154
an argument. All right, so I'm going to go over to

173
00:11:07,192 --> 00:11:10,962
my browser. I'm going to go over to my terminal and run

174
00:11:11,016 --> 00:11:11,620
this.

175
00:11:16,470 --> 00:11:19,640
All right, so let's see what comes up. Now,

176
00:11:20,090 --> 00:11:23,622
you can see the editor, you can see the line of code. You can see

177
00:11:23,676 --> 00:11:27,190
our select boss right. Now it's at number

178
00:11:27,260 --> 00:11:31,526
by default. Now, let's say I change this to uniform.

179
00:11:31,718 --> 00:11:33,180
Let's see what happens.

180
00:11:36,350 --> 00:11:40,442
Okay. You can see the difference between

181
00:11:40,496 --> 00:11:44,058
normal and uniform. And it's quite amazing that we're

182
00:11:44,074 --> 00:11:47,774
able to come up with this little app in less than six

183
00:11:47,892 --> 00:11:51,054
lines of code. I think that's pretty amazing. I know the

184
00:11:51,092 --> 00:11:54,706
amount of code I'll probably use on this if I'm

185
00:11:54,728 --> 00:11:59,154
on flush, right? Yeah. So let's move on so

186
00:11:59,272 --> 00:12:03,390
let's have a look at the different use cases of streamlit.

187
00:12:03,550 --> 00:12:07,218
Here's the streamlit demo that lets youre perform the

188
00:12:07,304 --> 00:12:11,278
semantic search across the entire odor city self driving car

189
00:12:11,304 --> 00:12:14,738
for the data set. And you can run a complete neural

190
00:12:14,754 --> 00:12:18,714
net in real time from within the app in less

191
00:12:18,752 --> 00:12:22,346
than 300 lines of code. I think that's pretty amazing.

192
00:12:22,528 --> 00:12:26,362
Yeah, but we get to see that later. All right,

193
00:12:26,416 --> 00:12:29,180
so let's come here.

194
00:12:29,710 --> 00:12:32,800
So if you want to try it out, I think it's here.

195
00:12:33,490 --> 00:12:37,614
I'm going to open it up. Okay. Yeah, so it's actually

196
00:12:37,732 --> 00:12:41,040
build by the streamlit itself.

197
00:12:43,490 --> 00:12:46,786
You could check it out on your own. All you have

198
00:12:46,808 --> 00:12:50,446
to do to run it is just copy paste

199
00:12:50,478 --> 00:12:53,442
this following comments in your browser all right,

200
00:12:53,496 --> 00:13:00,086
so I want to show you another demo. This is an

201
00:13:00,108 --> 00:13:03,926
apartment pricing app and it was developed by a friend of

202
00:13:03,948 --> 00:13:07,894
mine, Moyo. All right, let's check

203
00:13:07,932 --> 00:13:11,740
back on this later. I'm going to open up this. This is another

204
00:13:12,190 --> 00:13:15,206
use case. This is streamlit gallery.

205
00:13:15,318 --> 00:13:18,986
And the gallery contains app built by streamlit developers all

206
00:13:19,008 --> 00:13:22,486
over the world. I'm going to open this up. So the outstandwise

207
00:13:22,518 --> 00:13:26,442
an app is build for major cities in Lagos. Lagos State is like the financial

208
00:13:26,506 --> 00:13:30,078
capital of Nigeria and

209
00:13:30,244 --> 00:13:33,182
the data was created from Propertypro ng.

210
00:13:33,246 --> 00:13:36,546
And you can select the particular city you

211
00:13:36,568 --> 00:13:40,290
want to live in. Lackey is I twelve

212
00:13:40,440 --> 00:13:44,258
city in Lagos states. And let's select Lakey. And of

213
00:13:44,264 --> 00:13:47,638
course you can choose the type of area you want to live in and

214
00:13:47,724 --> 00:13:51,170
you can choose the number of bedroom, number of bathrooms.

215
00:13:51,250 --> 00:13:55,510
So I'm picking two for youre number of toilets and device.

216
00:13:58,090 --> 00:14:01,626
Do you want to live in an estate? Do you want to live in

217
00:14:01,648 --> 00:14:04,934
a Tegus apartment? Do youre prefer a new apartment?

218
00:14:05,062 --> 00:14:08,586
All these are choices that you can make so that the

219
00:14:08,608 --> 00:14:13,546
apartment is tailored to your preferences. Now, once I press evaluate,

220
00:14:13,738 --> 00:14:17,390
so it's going to give me an estimation of

221
00:14:17,460 --> 00:14:20,462
all that particular kind of house is going to cost,

222
00:14:20,596 --> 00:14:24,146
right? So I have

223
00:14:24,168 --> 00:14:29,940
an estimation of 1,050,000.

224
00:14:30,950 --> 00:14:34,882
Then it's giving me the range of

225
00:14:34,936 --> 00:14:38,326
outfits you can see

226
00:14:38,348 --> 00:14:42,198
5 million for the ones that cost quite

227
00:14:42,284 --> 00:14:45,974
much, and then youre could have 1.5 million for

228
00:14:46,012 --> 00:14:48,440
those that cost lets.

229
00:14:49,210 --> 00:14:52,438
And I think this is actually a nice use case of

230
00:14:52,524 --> 00:14:56,346
streamlit. And don't be surprised the amount of code that is needed to

231
00:14:56,368 --> 00:15:00,346
do this particular evaluation to build this app in

232
00:15:00,368 --> 00:15:03,246
a space Daniel of 100 lines of code.

233
00:15:03,348 --> 00:15:06,862
So let's move on. Now, looking at this gallery, you can see

234
00:15:06,916 --> 00:15:10,766
apps that have been built by sending developers all over the world you

235
00:15:10,788 --> 00:15:13,874
can see New York City, Uber right?

236
00:15:13,912 --> 00:15:17,678
Sharing. There are lots youre can see computer vision,

237
00:15:17,774 --> 00:15:22,130
images, finance and business, and others buying Tesla

238
00:15:24,550 --> 00:15:27,918
predictor. I think this was which I think commodity

239
00:15:28,014 --> 00:15:31,060
market price predictor and others.

240
00:15:31,610 --> 00:15:35,654
I will include a link in the comment section, so feel free to check

241
00:15:35,692 --> 00:15:39,338
out all of this on your own account. And I particularly feel that

242
00:15:39,424 --> 00:15:43,062
Student is awesome. Yeah, so let's

243
00:15:43,126 --> 00:15:46,166
move on. What are the cons of Streamlit?

244
00:15:46,198 --> 00:15:49,514
Why Streamlit might not be the ultimate solution to

245
00:15:49,632 --> 00:15:52,986
all our web problems, but there, number one

246
00:15:53,008 --> 00:15:56,862
is the convenience. Let's make it fade up. This means that most of those

247
00:15:56,916 --> 00:16:00,410
checkboxes, most of the uis are automated,

248
00:16:00,490 --> 00:16:03,518
right? You don't have to worry about them. So that means that you

249
00:16:03,524 --> 00:16:07,554
can't make custom changes to them. I mean, you can't just decide to

250
00:16:07,672 --> 00:16:11,646
place the chart side by side. Actually strength

251
00:16:11,678 --> 00:16:15,526
of stream rate, but what you get in terms of time and speed of

252
00:16:15,548 --> 00:16:19,014
execution, you have to compensate for it

253
00:16:19,052 --> 00:16:22,854
in terms of flexibility. And also there is a cap on

254
00:16:22,892 --> 00:16:26,214
the size of data impute and it's 50

255
00:16:26,332 --> 00:16:29,766
megabytes. Yeah, that might be a con

256
00:16:29,868 --> 00:16:33,606
for youre too. Also there's limited support for video and animation.

257
00:16:33,718 --> 00:16:37,878
Finally, you can build an app with functionalities with complex functionalities.

258
00:16:38,054 --> 00:16:41,942
Think of user dedication, newsletter subscription,

259
00:16:42,086 --> 00:16:45,434
chatbots, you can do that. If you're thinking

260
00:16:45,472 --> 00:16:48,858
of building a web app with functionalities like that,

261
00:16:48,944 --> 00:16:52,142
you might want to consider flask or jungle for that.

262
00:16:52,276 --> 00:16:56,346
All right, so moving on. Even with all the consoles streamlit,

263
00:16:56,378 --> 00:17:00,494
it is simple enough to use for every Python program, which is portable with Python

264
00:17:00,542 --> 00:17:04,162
Basic, and it's superb if you want

265
00:17:04,216 --> 00:17:07,986
an interactive data very quickly. I've done this,

266
00:17:08,088 --> 00:17:11,686
me working on an NLP projects. I just want to see how my model is

267
00:17:11,708 --> 00:17:15,320
performing. So far it's easier. I mean, I could spin up

268
00:17:16,170 --> 00:17:19,818
a web app in less than 30 minutes and I feel that's actually

269
00:17:19,904 --> 00:17:23,462
quite good. And also, if staff flux

270
00:17:23,526 --> 00:17:26,614
developer, you need flask, you need JavaScript, HTML,

271
00:17:26,662 --> 00:17:29,100
CSS and JSON. At the very least,

272
00:17:29,870 --> 00:17:34,670
you might still have to bother with JavaScript frameworks like angular.

273
00:17:36,450 --> 00:17:40,638
And I think that's quite a lot, might take a month or maybe years.

274
00:17:40,724 --> 00:17:43,338
Master all those, but with Streamlit,

275
00:17:43,514 --> 00:17:47,230
all youre ever going to need is just streamlit it. And then

276
00:17:47,300 --> 00:17:51,134
if you're thinking of containerization, that you might need docker too.

277
00:17:51,252 --> 00:17:54,494
Having said that, thank you for taking your time to listen to my

278
00:17:54,532 --> 00:17:57,160
talk and that youre feel free to say.

279
00:18:00,010 --> 00:18:05,380
Also you can buy.

