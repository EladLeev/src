1
00:00:25,570 --> 00:00:29,046
You. Hello guys, welcome back.

2
00:00:29,148 --> 00:00:32,162
Thanks for joining. My name is Gaston Cacheffo.

3
00:00:32,226 --> 00:00:35,462
I'm a tech manager at Globant. Globant is

4
00:00:35,516 --> 00:00:39,794
a digitally native company. We help organizations

5
00:00:39,842 --> 00:00:43,910
to brainbend themselves and unleash their potential. We are

6
00:00:43,980 --> 00:00:47,814
plus 2020 6000 employees and we are present

7
00:00:47,932 --> 00:00:51,102
in more than 20 countries. We work for

8
00:00:51,156 --> 00:00:54,266
companies like Google, Electronic Arts,

9
00:00:54,378 --> 00:00:57,582
Santander, among others. So thanks for having

10
00:00:57,636 --> 00:01:01,134
me today and let's jump into our

11
00:01:01,172 --> 00:01:04,258
topic which is microservices from a DevOps point of

12
00:01:04,264 --> 00:01:08,590
view. Before to begin, I want to thanks to Luis Pulido.

13
00:01:08,670 --> 00:01:11,966
He is a solution architect at Globant and helped

14
00:01:11,998 --> 00:01:14,698
me a lot to elaborate these topics.

15
00:01:14,894 --> 00:01:18,482
Next, setting your expectations. About this presentation

16
00:01:18,626 --> 00:01:22,850
we will introduce the concepts of microservices

17
00:01:22,930 --> 00:01:27,026
and DevOps in order to discuss about its challenges

18
00:01:27,138 --> 00:01:30,406
and how to get the most from them, avoiding falling

19
00:01:30,438 --> 00:01:33,882
into high complex operability scenarios. Let's move

20
00:01:33,936 --> 00:01:38,394
on. Let's begin with the topics that we are going to address.

21
00:01:38,592 --> 00:01:42,414
What are microservices and why use them? What is

22
00:01:42,452 --> 00:01:46,270
DevOps and its relation? What are the challenges?

23
00:01:46,850 --> 00:01:50,974
Where to start or CI CD planification? What to consider and

24
00:01:51,012 --> 00:01:54,994
where to go? Microservices let's introduce the

25
00:01:55,032 --> 00:01:58,414
concept. According to Wikipedia, a microservice

26
00:01:58,462 --> 00:02:01,774
architecture is an architectural pattern that arranged

27
00:02:01,822 --> 00:02:05,498
an application as a collection of loosely complex, fine grained

28
00:02:05,534 --> 00:02:08,818
services communicating through lightweight protocols.

29
00:02:08,914 --> 00:02:12,950
Anyway you can find many others consider as

30
00:02:13,020 --> 00:02:17,106
an evolvement from monolithics a method to breaks

31
00:02:17,138 --> 00:02:20,554
down software into smaller pieces, et cetera. What is

32
00:02:20,592 --> 00:02:23,962
important is not here in its benefits as

33
00:02:24,016 --> 00:02:27,366
anything. Benefits carries complex challenges.

34
00:02:27,478 --> 00:02:30,974
Also, we will see later on then why to

35
00:02:31,012 --> 00:02:34,480
use them. Well, let's illuminate a series of

36
00:02:35,490 --> 00:02:39,086
advantages. Bot isolation as simple

37
00:02:39,188 --> 00:02:42,974
as the idea that in a distributed service architecture,

38
00:02:43,022 --> 00:02:46,526
the affectation of one of them does not imply the total loss

39
00:02:46,558 --> 00:02:49,778
of the service. Your application will still work,

40
00:02:49,864 --> 00:02:53,426
probably data isolation, probably the root idea

41
00:02:53,528 --> 00:02:57,394
for microservices architecture design. I'm not a theorist

42
00:02:57,442 --> 00:03:00,742
on microservices. Anyway, each of them will own

43
00:03:00,876 --> 00:03:04,210
an information or data domain and its related logic.

44
00:03:04,290 --> 00:03:07,234
You get benefits such as smaller schemas,

45
00:03:07,282 --> 00:03:10,442
changes, isolated risks and perhaps the base

46
00:03:10,496 --> 00:03:13,398
for loosely complex concepts or expectations.

47
00:03:13,494 --> 00:03:17,510
At least then scalability, the ability to independently

48
00:03:17,590 --> 00:03:21,098
escalate different part of your infrastructure, either using

49
00:03:21,184 --> 00:03:24,814
shared escalation rules or customized one. This carry with

50
00:03:24,852 --> 00:03:28,458
a significant increase in resource consumption efficiency.

51
00:03:28,554 --> 00:03:32,142
Independent deployment well, microservices is about having

52
00:03:32,196 --> 00:03:35,310
independent lifecycles, so microservices

53
00:03:35,390 --> 00:03:38,594
modifications can independently be promoted to

54
00:03:38,632 --> 00:03:42,894
higher environments. Without expecting a service disruption. We will rely

55
00:03:43,022 --> 00:03:46,934
on a battery of policies and tests to prevent merging and

56
00:03:46,972 --> 00:03:50,242
promoting faulty changes. What is DevOps?

57
00:03:50,386 --> 00:03:54,626
You may have heard about this duality. There exists.

58
00:03:54,818 --> 00:03:58,954
It is a fact on one side a tech industry position and

59
00:03:58,992 --> 00:04:03,034
in the other a more accurate approach. Consider DevOps as

60
00:04:03,072 --> 00:04:06,842
a q two movement. By definition, the cultural site

61
00:04:06,976 --> 00:04:10,702
is a set of practices that combine software development and it

62
00:04:10,756 --> 00:04:14,890
operations. It aims to shorten the system development

63
00:04:14,970 --> 00:04:18,234
lifecycle and provides continuous

64
00:04:18,282 --> 00:04:23,014
delivery with high software quality. Again, there are many others definitions.

65
00:04:23,162 --> 00:04:26,926
Then we have a tech industry software

66
00:04:27,118 --> 00:04:30,802
who implies have these roles personified and

67
00:04:30,856 --> 00:04:34,242
a team member who will care about integration and

68
00:04:34,296 --> 00:04:38,674
deployment automations among others. From operational models

69
00:04:38,802 --> 00:04:42,354
operational models we can find this position into a full DevOps

70
00:04:42,402 --> 00:04:45,894
team or a team member into an application development team.

71
00:04:46,012 --> 00:04:49,830
You may used to be part of one of these operational

72
00:04:49,910 --> 00:04:54,166
models. A center of excellence may also be there in order to centralize

73
00:04:54,198 --> 00:04:58,890
and standardize this discipline. Well, microservices and DevOps

74
00:04:59,390 --> 00:05:02,782
its relation either as part of an

75
00:05:02,916 --> 00:05:06,462
application team in a DevOps position or an app team

76
00:05:06,516 --> 00:05:09,726
which embrace DevOps as culture will have to

77
00:05:09,748 --> 00:05:13,874
lead with the software development lifecycle right of

78
00:05:13,912 --> 00:05:17,554
many microservices and many could be a really big number. It will

79
00:05:17,592 --> 00:05:21,390
become a multiply factor for the architecture components.

80
00:05:21,550 --> 00:05:24,974
Your team will have to deal with the

81
00:05:25,032 --> 00:05:28,834
microservices the more components in your architecture

82
00:05:28,962 --> 00:05:32,386
let's jump now into challenges with microservices

83
00:05:32,498 --> 00:05:36,134
and let's begin with promoting code. And this is a very

84
00:05:36,172 --> 00:05:39,482
good question you have to make yourself have you ever

85
00:05:39,536 --> 00:05:43,510
thought about how much time a developer dedicates to exclusively

86
00:05:43,590 --> 00:05:47,322
code new features? I understand this is the DevOps side

87
00:05:47,376 --> 00:05:50,826
of the force, but from a cultural perspective everyone have to

88
00:05:50,848 --> 00:05:53,974
embrace DevOps, mostly in multi repository.

89
00:05:54,102 --> 00:05:58,378
App teams will lead with merging code between many branches,

90
00:05:58,554 --> 00:06:02,234
feature hot fix, dev release, main, et cetera.

91
00:06:02,362 --> 00:06:06,062
And depending on how deployment are triggered, this frequently

92
00:06:06,126 --> 00:06:08,994
could consume an important amount of provision time.

93
00:06:09,112 --> 00:06:12,514
High complex deployment scenarios who haven't been

94
00:06:12,552 --> 00:06:15,714
there. Well, this is a situation where you can easily

95
00:06:15,762 --> 00:06:19,554
fall with microservices packing smaller changes by grouping

96
00:06:19,602 --> 00:06:22,662
them in a giant release and those groups have to

97
00:06:22,716 --> 00:06:26,386
consistently travel through different environments.

98
00:06:26,498 --> 00:06:30,650
Consider the time and the effort this consider retro compatibility.

99
00:06:31,310 --> 00:06:34,922
This is a challenge, but one you should be having.

100
00:06:35,056 --> 00:06:39,018
Retro compatibility is a must, a way to code your change

101
00:06:39,104 --> 00:06:42,218
considering they are going to be promoted independently

102
00:06:42,314 --> 00:06:45,358
and current service consumers will stay working.

103
00:06:45,524 --> 00:06:49,630
Next quality assurance the main challenge with this is

104
00:06:49,780 --> 00:06:53,122
constant validation. This is not just

105
00:06:53,176 --> 00:06:56,690
about a single environment. You will need your QA team

106
00:06:56,840 --> 00:07:00,270
and tools available on demand. The more manual

107
00:07:00,350 --> 00:07:03,822
the validation and group the changes, the greater the QA

108
00:07:03,886 --> 00:07:07,862
bottleneck. Database updates well

109
00:07:07,916 --> 00:07:11,714
microservices iterations may imply more schemas and database

110
00:07:11,762 --> 00:07:15,126
updates than desired. From another point of view, this shouldn't be

111
00:07:15,148 --> 00:07:18,706
a problem to bring to the team. In any case, it's used to convert

112
00:07:18,738 --> 00:07:22,634
into one right due to manual script executions and code

113
00:07:22,672 --> 00:07:26,586
deployment. Extra coordination. This may involves finally

114
00:07:26,688 --> 00:07:30,362
debugging with monolithics. All logs are in the same

115
00:07:30,416 --> 00:07:34,378
place with distributed architectures, logs are not

116
00:07:34,464 --> 00:07:38,062
and obtained the root of a problem may become an slow process.

117
00:07:38,196 --> 00:07:41,886
The more components, the more difficult to trace. Finally, here we

118
00:07:41,908 --> 00:07:45,814
are. Planification Guide let's do what psychologists

119
00:07:45,882 --> 00:07:49,266
doesn't so just advice for you. We are

120
00:07:49,288 --> 00:07:52,882
going to describe these topics until the end of this

121
00:07:52,936 --> 00:07:56,306
presentation. This is just a quick overview

122
00:07:56,418 --> 00:08:00,102
branch strategy the base for automation something

123
00:08:00,156 --> 00:08:03,990
that you have to consent with your team lightweight microservices

124
00:08:04,410 --> 00:08:09,062
remove from microservices whatever role you can. Centralize CICD

125
00:08:09,126 --> 00:08:12,710
strategy tips to automate your software

126
00:08:12,790 --> 00:08:16,886
delivery lifecycle configuration establish policies

127
00:08:16,998 --> 00:08:21,194
secure and get governance off quality assurance align

128
00:08:21,242 --> 00:08:24,698
your QA with microservices objectives etwee

129
00:08:24,714 --> 00:08:28,590
tracing love this one. Get a tool to correlate everything

130
00:08:28,660 --> 00:08:32,560
related with monitoring your app and finally,

131
00:08:33,410 --> 00:08:37,374
feature flux possible the same grail

132
00:08:37,502 --> 00:08:41,026
with Microsoft, at least from my point

133
00:08:41,048 --> 00:08:43,300
of view. And Luis also.

134
00:08:44,390 --> 00:08:48,070
Well, let's begin with brand strategy.

135
00:08:48,410 --> 00:08:52,086
There is a great video you must watch on this topic from

136
00:08:52,108 --> 00:08:56,200
the great Victor Farsik. Probably you know him.

137
00:08:56,970 --> 00:09:00,454
He has a channel on YouTube called DevOps

138
00:09:00,502 --> 00:09:04,294
Toolkit. A great talk about branching

139
00:09:04,342 --> 00:09:08,794
strategy. Well, our first advice or

140
00:09:08,832 --> 00:09:12,634
topic here trunk based development. The main

141
00:09:12,672 --> 00:09:16,282
message here is not getting to complex right into complex

142
00:09:16,346 --> 00:09:19,006
branches strategies, right?

143
00:09:19,188 --> 00:09:22,702
The more branches, the more automation complexity or

144
00:09:22,756 --> 00:09:26,622
worst and extremely amount of dedication for getting

145
00:09:26,676 --> 00:09:30,510
your changes ongoing. Trunk based development

146
00:09:30,590 --> 00:09:34,174
or this kind of trunks. Similar ones like GitHub

147
00:09:34,222 --> 00:09:37,654
flow for instance, or the ones you want to

148
00:09:37,692 --> 00:09:41,542
customize based on any of those are

149
00:09:41,676 --> 00:09:45,398
fairly straightforward. You'll be able to quickly

150
00:09:45,484 --> 00:09:49,126
automate into your pipelines. Spend the necessary time with

151
00:09:49,148 --> 00:09:53,030
your team to decide, document the type, process and invoke

152
00:09:53,190 --> 00:09:56,700
this is important. Frequent talks to reinforce it.

153
00:09:57,950 --> 00:10:01,770
Use git tags for versioning a simple advice

154
00:10:01,850 --> 00:10:05,310
probably going too far here is using

155
00:10:05,380 --> 00:10:08,862
git tags for versioning. This doesn't require commits into

156
00:10:08,916 --> 00:10:13,114
your branches and you'll be able to code them everywhere from pipeline streakers

157
00:10:13,162 --> 00:10:16,594
to app configuration environments, logs, traces and so

158
00:10:16,632 --> 00:10:20,946
on. Build validation this

159
00:10:20,968 --> 00:10:24,420
is a key feature you have to look into.

160
00:10:24,970 --> 00:10:27,666
It's a key tool for code merge policies.

161
00:10:27,778 --> 00:10:30,470
When prs are created,

162
00:10:31,290 --> 00:10:35,346
a set of actions can be triggers, usually several

163
00:10:35,378 --> 00:10:39,190
pipelines who validate your code looking for vulnerabilities regressions,

164
00:10:39,270 --> 00:10:42,278
build integrity, performance, behavior, et cetera.

165
00:10:42,454 --> 00:10:45,914
This is the place where you want to deeply check your

166
00:10:45,952 --> 00:10:49,500
changes in search of faulty or unsecured code.

167
00:10:51,070 --> 00:10:54,410
Finally, version your APIs.

168
00:10:54,910 --> 00:10:59,870
Another architecture design converts into a tool close

169
00:10:59,940 --> 00:11:03,380
to us. It's a tool that you need to develop

170
00:11:04,070 --> 00:11:08,194
whenever our change doesn't go retro compatible and

171
00:11:08,232 --> 00:11:11,858
it will happen and you have to introduce a major change.

172
00:11:11,944 --> 00:11:15,402
You may deploy a new version of your API

173
00:11:15,486 --> 00:11:18,790
and getting your consumers with enough space

174
00:11:18,860 --> 00:11:22,258
for asynchronous migrations. Next topic

175
00:11:22,434 --> 00:11:25,894
lightweight microservices what it's all

176
00:11:25,932 --> 00:11:30,134
about the first one is remove

177
00:11:30,262 --> 00:11:34,342
unnecessary roles from microservices. Keep your microservices

178
00:11:34,406 --> 00:11:38,406
as the word suggest, remove whatever role

179
00:11:38,438 --> 00:11:42,266
you have the ability to centralize authentication

180
00:11:42,378 --> 00:11:46,394
and app roles is a great place to start. You can delegate

181
00:11:46,442 --> 00:11:48,750
this role to your API manager.

182
00:11:49,170 --> 00:11:53,038
Most of them will have the ability to handle the authentication layer,

183
00:11:53,134 --> 00:11:56,162
and if your microservices need token information,

184
00:11:56,296 --> 00:12:00,210
you can export this to headers or

185
00:12:00,280 --> 00:12:03,954
parameters, right? IDP this

186
00:12:03,992 --> 00:12:07,906
one is going to be quite obvious for majority. Do not waste

187
00:12:08,018 --> 00:12:11,320
time coding an identity provided for your application.

188
00:12:12,410 --> 00:12:16,166
Besides the invert amount of time, you'll probably stay at

189
00:12:16,268 --> 00:12:19,702
halfway with unsecure or vulnerable

190
00:12:19,766 --> 00:12:23,702
ones. Getting an external IDP, which nowadays

191
00:12:23,766 --> 00:12:27,834
isn't costly at all. Which pricing I guess

192
00:12:27,872 --> 00:12:31,514
pricing strategy based on traffic mount and premium

193
00:12:31,562 --> 00:12:35,054
features are totally affordable. You will

194
00:12:35,092 --> 00:12:39,258
obtain a considerable high security level by continuous

195
00:12:39,354 --> 00:12:44,050
security updates, those provider involved

196
00:12:44,390 --> 00:12:49,198
and lot of useful features you probably require further

197
00:12:49,294 --> 00:12:52,786
on for your application. To name

198
00:12:52,808 --> 00:12:55,582
a few of them. Google, Facebook, Microsoft,

199
00:12:55,646 --> 00:12:59,202
Okta there are many big

200
00:12:59,256 --> 00:13:01,650
ones abroads.

201
00:13:02,410 --> 00:13:05,846
Okay. Another annex in the

202
00:13:05,868 --> 00:13:09,846
line of the previous is to similarly deal with applications

203
00:13:09,878 --> 00:13:13,962
role. Most of the applications fall by design.

204
00:13:14,096 --> 00:13:18,154
With this requirement, then you can take advantage of

205
00:13:18,272 --> 00:13:22,362
core IDP features. JWT tokens related

206
00:13:22,426 --> 00:13:26,560
to OAuth authorization you are probably using.

207
00:13:27,730 --> 00:13:31,694
It's an authorization protocol can include app

208
00:13:31,732 --> 00:13:35,454
roles? Sure, for a given user.

209
00:13:35,582 --> 00:13:39,218
For instance, you can get information into

210
00:13:39,304 --> 00:13:43,234
the token user information and consider

211
00:13:43,352 --> 00:13:47,506
its roles from different sources like directory groups or

212
00:13:47,608 --> 00:13:51,486
specific declare application roles CI

213
00:13:51,518 --> 00:13:55,286
CD strategy let's begin by splitting them.

214
00:13:55,468 --> 00:13:59,382
It refers to pipelines. Of course your

215
00:13:59,436 --> 00:14:03,194
configuration strategy will have the different roles than

216
00:14:03,232 --> 00:14:07,206
your deployment and deal with them separately.

217
00:14:07,398 --> 00:14:11,530
Had the advantage to isolate simplify its configuration.

218
00:14:11,690 --> 00:14:15,070
You will rely on your triggers and merging policies to

219
00:14:15,140 --> 00:14:18,430
invocate them. Promote artifacts

220
00:14:18,930 --> 00:14:22,202
well, trust me, during a production incident

221
00:14:22,266 --> 00:14:26,098
you don't want to deal with the phrase that code shouldn't be there

222
00:14:26,184 --> 00:14:29,810
or this is not what I test as

223
00:14:29,880 --> 00:14:34,318
a counterpart. If you're not promoting then you are over integrating

224
00:14:34,494 --> 00:14:39,186
and these carry with several and critical disadvantages

225
00:14:39,378 --> 00:14:43,026
in one side. As introduced, you cannot guarantee

226
00:14:43,138 --> 00:14:46,994
that your artifacts will be the same worst

227
00:14:47,042 --> 00:14:50,410
case when you are including environment configuration.

228
00:14:51,150 --> 00:14:56,666
That happened a lot and on

229
00:14:56,688 --> 00:15:00,334
the other side the excessive time consuming either be short or

230
00:15:00,372 --> 00:15:04,282
large will be present by the number of microservices

231
00:15:04,346 --> 00:15:07,870
you are dealing with. Next one use templates.

232
00:15:09,170 --> 00:15:13,230
Avoid duplication as a cross rule for governance

233
00:15:13,310 --> 00:15:16,770
of distributed architecture is mandatory.

234
00:15:17,110 --> 00:15:21,102
Having said that, coding templates will centralize the most common tasks

235
00:15:21,166 --> 00:15:24,290
and expected CI CD automation behavior.

236
00:15:24,890 --> 00:15:29,094
When changes arrives, you can quickly iterate all

237
00:15:29,132 --> 00:15:32,950
your automation. Consider additional triggers.

238
00:15:35,690 --> 00:15:39,642
This is related with the idea of automate everything.

239
00:15:39,776 --> 00:15:43,510
Automate as much as possible. Call your agreed

240
00:15:43,590 --> 00:15:47,370
software delivery lifecycle policies, for instance,

241
00:15:47,710 --> 00:15:50,494
into your pipeline as much as you can.

242
00:15:50,612 --> 00:15:54,666
Triggers then will increase your automation alternatives. To invoke

243
00:15:54,698 --> 00:15:57,390
your pipelines, consider git tagging.

244
00:15:57,890 --> 00:16:02,090
Another pipeline succeeds. Commit over certain branches,

245
00:16:02,170 --> 00:16:06,142
artifact updates, et cetera. Automate your schemas

246
00:16:06,206 --> 00:16:09,554
iterations well here.

247
00:16:09,752 --> 00:16:13,502
Not having a tool to handle the schemas updates in an automated

248
00:16:13,566 --> 00:16:17,490
way into pipelines imply getting expert teams,

249
00:16:17,570 --> 00:16:20,962
probably externals, getting involved during deployment,

250
00:16:21,026 --> 00:16:24,534
planification and execution. Another pain to this

251
00:16:24,572 --> 00:16:28,086
approach with multiple environments and low frequent

252
00:16:28,118 --> 00:16:32,122
deployment is forgetting changes followed by

253
00:16:32,176 --> 00:16:37,114
deep debugging into incidents until you realize to

254
00:16:37,152 --> 00:16:41,802
name a few of them, I'm talking without sharing,

255
00:16:41,946 --> 00:16:45,418
sorry to name a few of them you have flyway

256
00:16:45,514 --> 00:16:49,374
or leaky base. Those are

257
00:16:49,492 --> 00:16:53,502
pretty commons. Automate your API's definition

258
00:16:53,566 --> 00:16:57,278
automation as code evolves,

259
00:16:57,454 --> 00:17:01,394
so do its endpoints or methods as you

260
00:17:01,432 --> 00:17:05,170
may probably have with microservices and API manager.

261
00:17:05,610 --> 00:17:08,838
Those iterations need to be considered. Get a

262
00:17:08,844 --> 00:17:12,070
tool to extract an API definition doing

263
00:17:12,140 --> 00:17:16,210
configuration this during the bail and use it to update

264
00:17:16,290 --> 00:17:20,010
your API into your API manager instance.

265
00:17:21,230 --> 00:17:25,530
For instance for net you have swashbackle

266
00:17:26,270 --> 00:17:29,286
for spring boot.

267
00:17:29,398 --> 00:17:32,970
In Java you have springdoc operap

268
00:17:33,050 --> 00:17:36,958
maven plugin configuration. This could be another

269
00:17:37,044 --> 00:17:40,734
chapter to discuss, but let's stick to some of the key

270
00:17:40,772 --> 00:17:45,090
ones. What was that? Variable policies

271
00:17:46,630 --> 00:17:50,350
third, you have an example. Do not commit sensitive

272
00:17:50,430 --> 00:17:54,450
information group or centralized common microservices variables.

273
00:17:54,810 --> 00:17:58,754
Take your time and agree with your team. The list of rules

274
00:17:58,802 --> 00:18:02,342
for variable governability well, in this example

275
00:18:02,476 --> 00:18:05,958
we mentioned four types of combinations for

276
00:18:06,044 --> 00:18:10,074
either sensitive variables as environment and

277
00:18:10,112 --> 00:18:13,878
its environment relation environment affect viables

278
00:18:13,974 --> 00:18:17,306
or not means its value change.

279
00:18:17,408 --> 00:18:20,300
When artifacts change from one environment to another,

280
00:18:20,990 --> 00:18:24,490
those sensitives needs to be hide

281
00:18:24,850 --> 00:18:28,778
of the variables. The sensitive variables needs to be high and should be stored

282
00:18:28,794 --> 00:18:33,742
into a vault. Nonsensitive environment

283
00:18:33,806 --> 00:18:37,358
effect can be stored into a library or group depending

284
00:18:37,374 --> 00:18:41,598
on your orchestration tool and finally nonsensitive

285
00:18:41,694 --> 00:18:45,346
and environment not related can remain into app property

286
00:18:45,448 --> 00:18:48,850
files. Of course, if you have common

287
00:18:48,920 --> 00:18:53,146
microservices values environment

288
00:18:53,198 --> 00:18:57,314
not related as condition, you can address that by also grouping

289
00:18:57,362 --> 00:19:00,902
into a project share configuration file environment

290
00:19:00,966 --> 00:19:04,506
variables for app properties kind

291
00:19:04,528 --> 00:19:08,122
of obvious for most of us. Let me say

292
00:19:08,176 --> 00:19:11,354
it is not obvious for everyone use environment

293
00:19:11,402 --> 00:19:15,354
variables for applications configuration. It will facilitate

294
00:19:15,402 --> 00:19:18,542
the promotion idea and you will find

295
00:19:18,596 --> 00:19:22,542
almost every hosting and orchestration tool is

296
00:19:22,596 --> 00:19:25,250
compatible with this approach.

297
00:19:26,630 --> 00:19:29,970
Common infrastructure environment variables in kubernetes

298
00:19:30,950 --> 00:19:35,242
well, sorry I have to say about pretending

299
00:19:35,326 --> 00:19:38,806
everyone is doing kubernetes. In any case,

300
00:19:38,908 --> 00:19:42,386
I found this quite interesting. Among other excellent features

301
00:19:42,498 --> 00:19:46,470
for kubernetes, besides being able to group applications common

302
00:19:46,540 --> 00:19:50,730
configurations into independent lifecycle by using

303
00:19:50,800 --> 00:19:54,778
config maps, you can also consider this to handle common

304
00:19:54,864 --> 00:19:58,522
infrastructure dependencies configuration. We can

305
00:19:58,576 --> 00:20:01,914
mention base URLs, domains,

306
00:20:02,042 --> 00:20:05,546
credentials, external service domains, et cetera.

307
00:20:05,738 --> 00:20:09,962
This allows to massively update infrastructure configuration

308
00:20:10,026 --> 00:20:13,790
change independently of your microservices software lifecycle.

309
00:20:14,230 --> 00:20:18,638
Quality assurance understanding limitations

310
00:20:18,814 --> 00:20:22,354
one of my favorites. If you discuss with your

311
00:20:22,392 --> 00:20:25,574
team and application stakeholders, you may

312
00:20:25,612 --> 00:20:29,510
find not everyone shares the same understanding about QA.

313
00:20:30,490 --> 00:20:33,814
If you have this role not automated, then you will

314
00:20:33,852 --> 00:20:37,030
find a trend to avoid continuous deployment.

315
00:20:37,790 --> 00:20:40,490
It kind of becomes a barrier.

316
00:20:40,990 --> 00:20:44,806
Distinguish between business detailed features

317
00:20:44,838 --> 00:20:47,750
validations over the need for code changes validation.

318
00:20:47,830 --> 00:20:51,694
You'll probably find space for improvement code your

319
00:20:51,732 --> 00:20:54,960
test. The more

320
00:20:55,890 --> 00:20:59,242
frequent and unattended site for deployments,

321
00:20:59,386 --> 00:21:03,314
the more testing automated needed. Stick with this,

322
00:21:03,512 --> 00:21:07,234
it's part of the mentioned problem. So for

323
00:21:07,272 --> 00:21:11,042
your microservices you don't want a bottleneck within

324
00:21:11,096 --> 00:21:15,018
your quality assurance, then go the tests and include

325
00:21:15,054 --> 00:21:20,118
them into build validation. We've covered this topic and

326
00:21:20,204 --> 00:21:24,278
also if you can, on environment validation. Also quality

327
00:21:24,364 --> 00:21:27,910
assurance versus user acceptable environment

328
00:21:28,670 --> 00:21:32,214
similar to the previous to the initial

329
00:21:32,262 --> 00:21:36,362
one kind of reminder for not

330
00:21:36,416 --> 00:21:39,260
as obvious situation that you may consider.

331
00:21:40,610 --> 00:21:44,574
I'm going to literally read it. Understand the

332
00:21:44,612 --> 00:21:47,918
purpose of each environment. Don't mix your roles during

333
00:21:48,004 --> 00:21:51,886
QA and UAT QA as near

334
00:21:51,988 --> 00:21:55,682
to developers and test automated as possible and

335
00:21:55,736 --> 00:21:59,810
UAT to dedicate business user validation if

336
00:21:59,880 --> 00:22:03,314
needed. E two e tracing use

337
00:22:03,352 --> 00:22:06,760
an application's performance monitoring tool.

338
00:22:07,130 --> 00:22:10,694
If you are not familiarized with this type of tools then you

339
00:22:10,732 --> 00:22:14,434
should. I totally find this more useful than plain

340
00:22:14,482 --> 00:22:17,618
logs. With a distributed architecture you

341
00:22:17,644 --> 00:22:21,274
will get the features you need to understand how your application

342
00:22:21,392 --> 00:22:24,342
is behaving with ITUI.

343
00:22:24,406 --> 00:22:28,170
It refers to the correlation of different

344
00:22:28,240 --> 00:22:31,758
types of traces, allowing a full visualization near

345
00:22:31,844 --> 00:22:35,386
real time of your microservices interactions to resolve

346
00:22:35,418 --> 00:22:39,338
their functionality. You may include your logs,

347
00:22:39,434 --> 00:22:42,350
business events, exceptions, et cetera.

348
00:22:42,790 --> 00:22:46,002
You will get code insights to understand where

349
00:22:46,136 --> 00:22:50,254
something brokes or what part of the response

350
00:22:50,302 --> 00:22:53,922
chain is consuming the higher amount of time real time

351
00:22:53,976 --> 00:22:57,202
business monitoring from APM a recall

352
00:22:57,266 --> 00:23:00,562
to something mentioned don't use your database

353
00:23:00,626 --> 00:23:04,166
for operative business monitoring. Don't compete with

354
00:23:04,188 --> 00:23:08,090
your microservices resources. Insert business

355
00:23:08,160 --> 00:23:13,578
traces into software like APM for

356
00:23:13,664 --> 00:23:17,482
executive business dashboards. You may need anyway access

357
00:23:17,536 --> 00:23:21,134
to the database, right? But in those cases you can

358
00:23:21,172 --> 00:23:24,702
recruit to your provided databases. Features like

359
00:23:24,756 --> 00:23:27,390
replication. In any case,

360
00:23:27,460 --> 00:23:31,150
avoid any direct access to the database could be

361
00:23:31,220 --> 00:23:35,390
prohibited. Finally, limit the amount of traces

362
00:23:35,470 --> 00:23:39,970
ingestion well this is related with ingestion and indexing.

363
00:23:40,790 --> 00:23:45,570
This is a perform and economic cost you want to efficiently delimit.

364
00:23:45,910 --> 00:23:50,658
Add daily caps into your ingestion services sampling

365
00:23:50,754 --> 00:23:53,990
on higher environments and avoid duplication.

366
00:23:54,490 --> 00:23:58,130
Sampling is a great way to deal with production.

367
00:23:58,290 --> 00:24:01,926
Your business events doesn't have to folder

368
00:24:02,038 --> 00:24:05,994
so you have full visibility of your business and

369
00:24:06,032 --> 00:24:10,022
you will have a great sampling for

370
00:24:10,096 --> 00:24:14,062
your applications behaving even

371
00:24:14,116 --> 00:24:17,566
you can create rules like

372
00:24:17,668 --> 00:24:21,306
having 100% of the errors, et cetera.

373
00:24:21,498 --> 00:24:25,458
Feature flags have the potential to be

374
00:24:25,624 --> 00:24:29,570
kind of sand grail or microservices,

375
00:24:31,030 --> 00:24:34,974
but that's my opinion and you are allowed

376
00:24:35,022 --> 00:24:39,122
not to take into consideration. You may have pretty better

377
00:24:39,256 --> 00:24:43,158
ideas than feature flags. It is something that it's been used a lot

378
00:24:43,244 --> 00:24:44,950
by the industry.

379
00:24:46,650 --> 00:24:51,014
A new paradigm. It will help on this continuous

380
00:24:51,062 --> 00:24:54,314
deployment idea. Consider this as

381
00:24:54,352 --> 00:24:58,534
a business tool by having flux to control the availability

382
00:24:58,662 --> 00:25:02,442
on your features that will allows you to separate

383
00:25:02,506 --> 00:25:05,482
business requirements from continuous deployment.

384
00:25:05,626 --> 00:25:09,694
It becomes important to convert business features into small

385
00:25:09,812 --> 00:25:14,318
microservices will detail technical user stories finally

386
00:25:14,404 --> 00:25:18,526
be able to unatten and independently deploy

387
00:25:18,638 --> 00:25:22,290
strong validated change automatically to production.

388
00:25:22,790 --> 00:25:25,974
Further considerations something that we

389
00:25:26,012 --> 00:25:30,194
have a list of enumerated features

390
00:25:30,242 --> 00:25:35,334
that we may include or consider within

391
00:25:35,452 --> 00:25:39,690
our application canary deployments.

392
00:25:40,910 --> 00:25:45,050
Consider blue, green or rollout also

393
00:25:45,120 --> 00:25:48,922
valid alternatives, right? In Canary case,

394
00:25:48,976 --> 00:25:52,442
you'll be able to add many stages into your deployment

395
00:25:52,506 --> 00:25:56,142
to production as you may have identified an

396
00:25:56,196 --> 00:26:00,142
isolated segment of users. Idea is

397
00:26:00,276 --> 00:26:03,630
iteratively increment your code changes or business

398
00:26:03,700 --> 00:26:07,874
features in a controlled and progressive way

399
00:26:08,072 --> 00:26:11,554
and not affecting all your consumers or user with

400
00:26:11,592 --> 00:26:14,850
a single deploy configuration server.

401
00:26:15,450 --> 00:26:20,018
As it's all about centralization and governance,

402
00:26:20,114 --> 00:26:24,082
this implementation will decrease your application configuration

403
00:26:24,146 --> 00:26:26,870
changes among other advantages.

404
00:26:27,710 --> 00:26:33,322
You want to go faster with

405
00:26:33,456 --> 00:26:37,270
configuration change. Either those configurations

406
00:26:37,350 --> 00:26:41,470
come from applications necessities or

407
00:26:41,540 --> 00:26:44,970
infrastructure necessities. A configuration server

408
00:26:45,050 --> 00:26:48,494
could be a key tool there infrastructure as

409
00:26:48,532 --> 00:26:50,990
code, another St Grail,

410
00:26:53,590 --> 00:26:57,106
another paradigm. You should get involved with

411
00:26:57,288 --> 00:27:00,722
coding. Your infrastructure will allow you to

412
00:27:00,776 --> 00:27:04,654
remove human errors when updating or deployment.

413
00:27:04,702 --> 00:27:09,030
New architecture components also reduce the orbital risk.

414
00:27:10,490 --> 00:27:13,846
You will have a real disaster recovery plan

415
00:27:13,948 --> 00:27:16,310
and a tool for reusability.

416
00:27:16,970 --> 00:27:19,510
Finally, center of Excellence,

417
00:27:20,250 --> 00:27:23,670
another favorite here. If you're

418
00:27:24,190 --> 00:27:28,170
part of one application team among others

419
00:27:28,240 --> 00:27:31,774
in your organizations with similar functions, then you

420
00:27:31,812 --> 00:27:36,478
may conform this office in order to standardize research,

421
00:27:36,644 --> 00:27:39,726
support and training in a particular area of

422
00:27:39,828 --> 00:27:43,386
knowledge. By definition, cross functional

423
00:27:43,418 --> 00:27:46,158
team who provides best practices, research,

424
00:27:46,244 --> 00:27:49,314
supports, trainings or focus area.

425
00:27:49,512 --> 00:27:53,214
You may have different kinds of knowledge

426
00:27:53,262 --> 00:27:56,486
areas. You can have an

427
00:27:56,508 --> 00:28:00,978
expert, an agile expert in order to promote

428
00:28:01,154 --> 00:28:04,840
your agile situation outside.

429
00:28:05,610 --> 00:28:09,494
You may have a net speciality

430
00:28:09,622 --> 00:28:12,650
with their improvements and their lifecycle.

431
00:28:13,630 --> 00:28:17,574
You can generate several of them and you can split

432
00:28:17,622 --> 00:28:20,842
them in terms not to occupy

433
00:28:20,906 --> 00:28:24,142
the same projects for instance, but a center

434
00:28:24,196 --> 00:28:27,850
of excellence will be a helpful

435
00:28:28,010 --> 00:28:31,918
tool for standardize your

436
00:28:32,084 --> 00:28:35,454
organization. So that's all for

437
00:28:35,492 --> 00:28:39,454
today. I want to again give the thanks to Luis for

438
00:28:39,492 --> 00:28:43,120
his collaboration. Here are information contact

439
00:28:43,490 --> 00:28:45,640
hopefully also in the option.

440
00:28:46,810 --> 00:28:50,262
I also want to thanks conf fourty

441
00:28:50,316 --> 00:28:53,750
two and globant for this invitation and

442
00:28:53,820 --> 00:28:56,230
finally to all of you for attending.

443
00:28:56,730 --> 00:29:00,134
Hope this will help in some way to

444
00:29:00,252 --> 00:29:02,820
make your DevOps life easier. Bye guys.

