1
00:00:34,530 --> 00:00:37,874
Hello everyone, thanks for joining my session today. I'm really excited

2
00:00:37,922 --> 00:00:41,494
to be here presenting at Conf 42 Cloud native, and today

3
00:00:41,532 --> 00:00:45,074
I'm going to be talking about how you can run multicloud deployments using GitHub

4
00:00:45,122 --> 00:00:48,774
actions. My name is Rob URL and I lead the developer advocacy team

5
00:00:48,812 --> 00:00:52,382
here at Sitecore and I've been writing software for a very long time.

6
00:00:52,516 --> 00:00:56,318
I'm originally from Manchester, back in the UK, but for about the past ten or

7
00:00:56,324 --> 00:00:59,934
eleven years or so I've been based in Melbourne, Australia. You can see a whole

8
00:00:59,972 --> 00:01:03,470
bunch of different social channels on the screen there, so if you've got any questions

9
00:01:03,540 --> 00:01:06,894
or if you just want to say hello, feel free to reach out after this.

10
00:01:07,012 --> 00:01:10,146
So what am I going to be talking about today? Well, I'm going to be

11
00:01:10,168 --> 00:01:13,554
going through a real world project that we've been running in the developer advocacy team

12
00:01:13,592 --> 00:01:17,106
here at Sitecore. And this was a migration project and this

13
00:01:17,128 --> 00:01:20,850
project covers a lot of the sites that we're responsible for as a department.

14
00:01:21,010 --> 00:01:24,866
If we look at how they were hosted previously, we actually had two separate

15
00:01:24,898 --> 00:01:28,882
monolith solutions we were maintaining and we were in the process of migrating

16
00:01:28,946 --> 00:01:32,294
from the first one into the second one. Now having our

17
00:01:32,332 --> 00:01:35,338
sites set up like this, it led to quite a few problems and

18
00:01:35,344 --> 00:01:38,886
I'm sure some of these are going to sound pretty familiar. We had two separate

19
00:01:38,918 --> 00:01:41,978
code bases to maintain, so that meant if we were working on one of the

20
00:01:41,984 --> 00:01:44,814
sites, we had to be sure we were in the correct code base when working

21
00:01:44,852 --> 00:01:48,346
on it. On top of that, the bottom one was open source

22
00:01:48,378 --> 00:01:51,786
and available for our community to learn from while the top one was closed

23
00:01:51,818 --> 00:01:55,754
source. So that different governance model also added a layer of complexity

24
00:01:55,802 --> 00:01:59,266
to the process. One of the biggest problems we had though was there

25
00:01:59,288 --> 00:02:03,534
was a whole heap of infrastructure powering these two completely separate instances.

26
00:02:03,662 --> 00:02:06,706
And I'm sure my manager wasn't all that happy with the reassure bill we were

27
00:02:06,728 --> 00:02:09,926
rebuilding each month. So we were kind of partway through this

28
00:02:09,948 --> 00:02:14,290
migration that we never actually ended up completing. But then what happened internally

29
00:02:14,370 --> 00:02:18,006
was sitecore released a new SaaS version of our CMS and that seemed to

30
00:02:18,028 --> 00:02:21,506
solve a lot of our problems for us. It allowed us to create

31
00:02:21,548 --> 00:02:25,546
a new target state architecture that we were working towards and this would allow us

32
00:02:25,568 --> 00:02:29,686
to unify all of these sites we were responsible for into a single location,

33
00:02:29,798 --> 00:02:33,686
both from a code perspective and from an architecture perspective as well.

34
00:02:33,808 --> 00:02:37,146
And that gave us some great benefits. First of all, it unified

35
00:02:37,178 --> 00:02:40,906
that developer experience, so no longer would we be dealing with two separate

36
00:02:40,938 --> 00:02:44,778
code repositories. We were going to work from a single Monorepo repository

37
00:02:44,874 --> 00:02:47,966
hosting all of the sites that we're working from. And we chose

38
00:02:47,998 --> 00:02:51,634
to operate in the open source model we'd used on the second repository before

39
00:02:51,752 --> 00:02:55,106
because we'd got a lot of great community interactions around that and we wanted to

40
00:02:55,128 --> 00:02:58,710
maintain that going forward. One of the big wins as well was also

41
00:02:58,780 --> 00:03:02,486
the drastically smaller application footprint here because we were

42
00:03:02,508 --> 00:03:05,638
now running off a SaaS CMS backend. We'd offloaded a lot

43
00:03:05,644 --> 00:03:08,886
of the infrastructure into that application instead. So all

44
00:03:08,908 --> 00:03:12,434
we're responsible for now is hosting these heads. It's a headless

45
00:03:12,482 --> 00:03:15,834
CMS. So each of the sites we're building is going to have its own head.

46
00:03:15,872 --> 00:03:18,854
We were going to deploy ourselves, but it gave us a lot of freedom.

47
00:03:18,902 --> 00:03:22,806
Then we could actually choose the best technology to host those heads. Completely different clouds

48
00:03:22,838 --> 00:03:26,090
depending on the head we're deploying and the technology it's built upon.

49
00:03:26,170 --> 00:03:28,602
And this finally would let us completed that migration,

50
00:03:28,746 --> 00:03:32,206
unifying everything into one single approach. So how

51
00:03:32,228 --> 00:03:36,074
did we set this up? Well, as we said, we wanted a Monorepo

52
00:03:36,122 --> 00:03:39,342
containing all of our code, but we still wanted to have the flexibility

53
00:03:39,406 --> 00:03:42,754
of where that code got deployed to. So this was the

54
00:03:42,792 --> 00:03:45,634
kind of high level architecture that we ended up going with.

55
00:03:45,752 --> 00:03:49,542
We'd have the four sites we talked about before we had our mvp site,

56
00:03:49,596 --> 00:03:52,886
which is an ASP. Net six application which we wanted to

57
00:03:52,908 --> 00:03:55,606
push out to an Azure web app being written in. Net.

58
00:03:55,628 --> 00:03:58,838
Azure is a fantastic host for that, but we

59
00:03:58,844 --> 00:04:02,406
had our other three sites which are now built with NextJs. So the

60
00:04:02,428 --> 00:04:06,218
Sukon Anz, the Subcon EU and the Subcon events site.

61
00:04:06,384 --> 00:04:10,106
These were built in next JS and Vercel is a fantastic host for those.

62
00:04:10,208 --> 00:04:13,242
So we wanted to be able to use the best technology for the job.

63
00:04:13,376 --> 00:04:16,958
The top three sites were powered by the new SAS CMS on the

64
00:04:16,964 --> 00:04:20,670
back end, and the bottom ones was the static site. There's no actual content

65
00:04:20,740 --> 00:04:24,014
management functionality in there, it's still in the same repo, but it's just

66
00:04:24,052 --> 00:04:27,886
static content in there. So our users would come along and then they'd

67
00:04:27,918 --> 00:04:31,474
be able to interact with these four different sites regardless of which cloud

68
00:04:31,512 --> 00:04:35,150
they're hosted in. And you may ask why we chose these different clouds.

69
00:04:35,230 --> 00:04:38,806
It mostly came back to the technology choice that we'd made in designing them and

70
00:04:38,828 --> 00:04:42,162
building them. The bottom three sites you see, they're really static

71
00:04:42,226 --> 00:04:45,766
content sites. There isn't much interaction on those. So using a

72
00:04:45,788 --> 00:04:49,462
static generator somewhere like NextJs was a really great fit for that.

73
00:04:49,596 --> 00:04:53,002
The MVP site on the other hand had a lot of interactivity in there,

74
00:04:53,056 --> 00:04:56,266
so we power application process through that. So building that

75
00:04:56,288 --> 00:04:59,478
in. Net was a great fit and it also allowed us just to migrate

76
00:04:59,494 --> 00:05:03,178
the existing code base over, drastically sharing our development time.

77
00:05:03,264 --> 00:05:06,654
So how did we configure the CI CD pipelines to deploy to

78
00:05:06,692 --> 00:05:10,874
all these different cloud architectures? Well, we ended up choosing GitHub actions

79
00:05:10,922 --> 00:05:14,282
to power this and there's a few reasons for this, but mainly

80
00:05:14,346 --> 00:05:18,274
it seems to be aware Microsoft's are pushing a lot of their activities nowadays and

81
00:05:18,312 --> 00:05:21,906
it gave us an opportunity to show our community how you could build out

82
00:05:21,928 --> 00:05:25,940
CI CD pipelines using that technology should they choose to do it as well.

83
00:05:26,630 --> 00:05:30,374
And we went through a few iterations for know much like with most things in

84
00:05:30,412 --> 00:05:33,400
software you kind of never get it right first time.

85
00:05:34,090 --> 00:05:37,814
Our first iteration was to have one big pipeline. So we had

86
00:05:37,852 --> 00:05:41,626
one big YaMl document which basically went and pushed our configuration and

87
00:05:41,648 --> 00:05:44,890
our content out to the SAS CMS XM cloud.

88
00:05:45,040 --> 00:05:48,666
It would then go and deploy the three different Versailles out with

89
00:05:48,688 --> 00:05:52,134
the different targets out of the mono repo and then finally it would also

90
00:05:52,192 --> 00:05:55,806
deploy our MVP site out our. Net application that was

91
00:05:55,828 --> 00:05:59,038
going out to our Azure web app. And it worked.

92
00:05:59,124 --> 00:06:02,346
It did, but it was really heavy. If I'm

93
00:06:02,378 --> 00:06:05,590
making a single line change to one of my JavaScript sites

94
00:06:05,610 --> 00:06:09,138
over here, why am I deploying my. Net site out over here?

95
00:06:09,224 --> 00:06:12,654
That they're not really related, they come from the same Monorepo

96
00:06:12,702 --> 00:06:16,110
repository. But we needed a more targeted deployments approach

97
00:06:16,190 --> 00:06:19,394
that allow us to iterate much more quickly when developers

98
00:06:19,442 --> 00:06:23,430
are committing changes into the repository. So what we ended up doing was

99
00:06:23,500 --> 00:06:26,726
splitting out the pipelines by the target system.

100
00:06:26,908 --> 00:06:30,630
So we have a different pipeline to deploy our changes to our SAS CMS.

101
00:06:30,790 --> 00:06:34,346
We have a different pipeline to deploy changes to the MVP application.

102
00:06:34,528 --> 00:06:38,662
We have a different pipeline to deploy changes to the different subcont applications

103
00:06:38,806 --> 00:06:42,566
and to power that. We created our own custom set of reusable

104
00:06:42,598 --> 00:06:45,840
workflows which are designed to make this more easy.

105
00:06:46,210 --> 00:06:49,326
So let's take a look over in vs code now we'll see how all this

106
00:06:49,348 --> 00:06:53,470
is created. Okay, so I've loaded up the repository here

107
00:06:53,620 --> 00:06:57,026
and what you'll see straight away is you get this

108
00:06:57,048 --> 00:07:00,494
GitHub folder, GitHub and this is where your GitHub actions

109
00:07:00,542 --> 00:07:04,798
are going to exist. And they all exist inside this workflows folder.

110
00:07:04,974 --> 00:07:08,546
And straight away you'll see we have a naming content here. You can see

111
00:07:08,568 --> 00:07:12,150
the files at the top with a build underscore prefix are there

112
00:07:12,220 --> 00:07:15,574
define how to build a certain type of application. So we have

113
00:07:15,612 --> 00:07:18,806
a shared workflow showing how to build a. Net app and we have a

114
00:07:18,828 --> 00:07:22,378
shared workflow describing how to build a nextjs application. If we

115
00:07:22,384 --> 00:07:25,974
hop down to the bottom next you'll see we have ones prefixed with a deploy

116
00:07:26,022 --> 00:07:29,658
underscore name. These ones are all designed to deploy to a specific

117
00:07:29,744 --> 00:07:32,786
cloud platform. So we have a reusable workflow

118
00:07:32,838 --> 00:07:36,542
that will deploy an asset to an Azure web app.

119
00:07:36,676 --> 00:07:40,538
We have a reusable workflow that will deploy an asset out of Versailles.

120
00:07:40,634 --> 00:07:44,146
And finally we have a reusable workflow that will deploy an asset out of our

121
00:07:44,168 --> 00:07:47,506
XM cloud, our SaaS CMS. Where all

122
00:07:47,528 --> 00:07:51,038
the action really happens though is that middle section, the CI CD

123
00:07:51,214 --> 00:07:55,054
prefixed pipelines. These are the ones that actually handle

124
00:07:55,182 --> 00:07:58,886
taking a commit from a repository, building an asset using the

125
00:07:58,908 --> 00:08:02,182
build underscore prefix workflows, and then

126
00:08:02,236 --> 00:08:05,510
deployments it using a deploy underscore prefix workflow.

127
00:08:05,930 --> 00:08:09,414
So let's start to take a look at how these work. I'm going to start

128
00:08:09,452 --> 00:08:12,874
off with the MVP one first. Remember the sites here is hosted in

129
00:08:12,912 --> 00:08:16,474
Azure. And if you think back what I said before,

130
00:08:16,592 --> 00:08:19,802
remember we had that one big pipeline that was triggering all the time

131
00:08:19,856 --> 00:08:23,274
for every commit deploying all these sites, all these assets,

132
00:08:23,402 --> 00:08:26,890
complete overkill. We needed to make this far more targeted.

133
00:08:26,970 --> 00:08:30,410
And you can do that in the top section here of your pipeline definition.

134
00:08:30,570 --> 00:08:34,046
So here's where we define when this specific pipeline is going to

135
00:08:34,068 --> 00:08:37,506
run. And what we do here is we basically set a set of

136
00:08:37,528 --> 00:08:41,250
paths within the repository that we want to monitor. And we're saying

137
00:08:41,320 --> 00:08:45,006
anytime anything changes in a commit in these paths,

138
00:08:45,118 --> 00:08:48,566
we want to execute this pipeline. And this is all in

139
00:08:48,588 --> 00:08:52,194
the on section up here. So you can see we have our push section

140
00:08:52,322 --> 00:08:55,958
and we have a pull request section. So whenever anything

141
00:08:56,044 --> 00:08:59,462
changes, either for these definitions by itself. So when anyone

142
00:08:59,516 --> 00:09:02,874
changes my build definition we're looking at here. This leverages the

143
00:09:02,912 --> 00:09:06,406
build net YaMl. So whenever anyone changes the build net YAml,

144
00:09:06,518 --> 00:09:10,234
or when anyone changes the deploy Azure web app Yaml, we also

145
00:09:10,272 --> 00:09:14,542
need to rerun this. We need to test those changes are correct inside

146
00:09:14,596 --> 00:09:17,642
the source folder we also have a series of subfolders

147
00:09:17,706 --> 00:09:20,974
all within rendering folders internally. That's where

148
00:09:21,012 --> 00:09:24,678
all the source code split up for this mvp application. So we're going to monitor

149
00:09:24,714 --> 00:09:28,270
all of those. And if any changes happen in any of those folders,

150
00:09:28,350 --> 00:09:30,850
again we're going to trigger this workflow.

151
00:09:31,590 --> 00:09:35,314
You might notice we also have a workflow dispatch trigger on

152
00:09:35,352 --> 00:09:38,978
here. All that means is that I can log into GitHub into the

153
00:09:38,984 --> 00:09:42,598
GitHub actions section. I'm going to show you shortly and I'll get a button that

154
00:09:42,684 --> 00:09:45,894
allows me to manually trigger a deployment. If you don't have that

155
00:09:45,932 --> 00:09:49,526
included, the only way to trigger Deployment will be through a

156
00:09:49,548 --> 00:09:53,354
push or a pull request in this case. So once

157
00:09:53,392 --> 00:09:56,586
we've defined when this is going to run, then we start to define what

158
00:09:56,608 --> 00:10:00,682
jobs we're actually going to execute. And this is very similar to most

159
00:10:00,736 --> 00:10:04,714
standard YAML based deployment pipelines you'll have seen in a lot of other systems.

160
00:10:04,842 --> 00:10:08,446
So we have our jobs download and then within there we define each

161
00:10:08,468 --> 00:10:11,614
of the jobs we're going to run. So we have our first job

162
00:10:11,652 --> 00:10:15,018
to build our net application. Then after that we're going to

163
00:10:15,044 --> 00:10:18,078
deploy to our staging site. And then finally after that we're

164
00:10:18,094 --> 00:10:21,618
going to deploy out to our production site. So let's start with our build

165
00:10:21,704 --> 00:10:24,754
net definition. You can see it

166
00:10:24,792 --> 00:10:28,550
pulls in the build net YAMl from the same location here

167
00:10:28,620 --> 00:10:31,462
and we're passing in the build config. This is a parameter we pass in.

168
00:10:31,516 --> 00:10:33,590
We want to build this in release mode.

169
00:10:35,770 --> 00:10:39,634
If we load up the build net YAml, you can see this is fairly straightforward.

170
00:10:39,682 --> 00:10:42,600
This is all just built out using MS build.

171
00:10:43,370 --> 00:10:46,346
We do have some old. Net framework code in there, which is why we've gone

172
00:10:46,368 --> 00:10:49,594
that way instead of the CLI. But you can see here

173
00:10:49,632 --> 00:10:53,098
you just end up with a step based action. So we start out by checking

174
00:10:53,114 --> 00:10:56,474
out the repository. We're going to basically install CMS

175
00:10:56,522 --> 00:11:00,810
build into our build runner. We install Nuget.

176
00:11:00,970 --> 00:11:04,206
We run a Nuget restore on our solution and

177
00:11:04,228 --> 00:11:07,794
then finally we're going to built the solution itself. Remember, we passed in the build

178
00:11:07,832 --> 00:11:11,374
configuration before allowing us to define that. This is going to be executed in release

179
00:11:11,422 --> 00:11:15,266
mode. So it's fairly straightforward. And what you get at the

180
00:11:15,288 --> 00:11:18,962
end of that is an asset which is basically the build output

181
00:11:19,026 --> 00:11:22,914
of your site. So once that's completed

182
00:11:22,962 --> 00:11:25,926
we can then move to the deployment stage. And as I said, we're going to

183
00:11:25,948 --> 00:11:29,538
deploy to staging site first, and then after that we're

184
00:11:29,554 --> 00:11:32,986
going to deploy out to our production site. So here's where we

185
00:11:33,008 --> 00:11:36,934
start to do that. We're again using this referenced reusable

186
00:11:36,982 --> 00:11:40,674
workflow, this time the deploy Azure web app workflow.

187
00:11:40,822 --> 00:11:44,206
And what we're saying here is this needs net. So here's how we're defining the

188
00:11:44,228 --> 00:11:48,126
ordering of these jobs. So this will only execute after the

189
00:11:48,308 --> 00:11:50,190
build net has executed.

190
00:11:52,610 --> 00:11:55,026
Then we're going to basically set some parameters again.

191
00:11:55,128 --> 00:11:59,038
So we're

192
00:11:59,054 --> 00:12:02,434
going to deploy in debug mode here. And that's because it's the staging sites.

193
00:12:02,472 --> 00:12:06,354
So we want different sites of logging to appear here. We want people

194
00:12:06,392 --> 00:12:09,670
to be able to debug easier in sharing than they do in production.

195
00:12:11,130 --> 00:12:14,498
We're going to choose the project itself we're deploying

196
00:12:14,674 --> 00:12:17,458
and then we're going to create the asset name and the web app name we're

197
00:12:17,474 --> 00:12:21,398
deploying to. Finally, we also pass in the secrets. We have some secrets

198
00:12:21,414 --> 00:12:25,082
here stored in GitHub and this is the publishing profile information,

199
00:12:25,216 --> 00:12:28,860
basically showing how to physically publish into that Azure web app.

200
00:12:29,630 --> 00:12:33,546
If we take a look at this deploy Azure web app shared

201
00:12:33,578 --> 00:12:37,018
pipeline here, you can see we first of all define all those parameters.

202
00:12:37,114 --> 00:12:40,686
So the build config, the project location, the asset name and the

203
00:12:40,708 --> 00:12:45,118
web app name. This one's a little simpler. In here

204
00:12:45,284 --> 00:12:49,070
we're just deploying net six code so we can use the net CLI.

205
00:12:49,150 --> 00:12:52,146
It becomes a lot easier. You can see we basically set this to run on

206
00:12:52,168 --> 00:12:55,646
a Windows machine. We start again by checking

207
00:12:55,678 --> 00:12:59,314
out the source code. After this we set the version of

208
00:12:59,352 --> 00:13:02,774
Net we're going to run so version six and we can then run a build

209
00:13:02,812 --> 00:13:06,326
and publish. So we CD into where the project location is.

210
00:13:06,428 --> 00:13:10,754
We run a. Net restore, we run a. Net build for the build configuration

211
00:13:10,802 --> 00:13:14,646
passed in, and then we run a. Net publish. And this is going to publish

212
00:13:14,678 --> 00:13:18,214
to a specific location inside of that built runner.

213
00:13:18,262 --> 00:13:21,718
So inside that Windows Runner and you can see the output param here and the

214
00:13:21,744 --> 00:13:24,480
location we've passed in with the asset name.

215
00:13:25,330 --> 00:13:28,074
Finally after that's completed, we could do a deployment.

216
00:13:28,202 --> 00:13:31,566
So we could take this deployment here and we can use

217
00:13:31,748 --> 00:13:35,486
the secrets that are passed in the publishing profile and publish that out

218
00:13:35,508 --> 00:13:38,914
to an actual web app. If we go and take a look

219
00:13:38,952 --> 00:13:42,446
back at our main CI CD pipeline, once that's completed,

220
00:13:42,478 --> 00:13:45,874
we'll then go to production. And you'll notice we have an if

221
00:13:45,912 --> 00:13:49,186
clause here and this basically only gets executed if it's

222
00:13:49,218 --> 00:13:52,630
running against main. So what that means is that when someone

223
00:13:52,700 --> 00:13:56,054
opens a PR against this repository, it'll build

224
00:13:56,092 --> 00:13:59,734
the net code first. So that steps there just to make sure everything's correct.

225
00:13:59,852 --> 00:14:03,930
Any source code changes are syntactically right and the solution still builds.

226
00:14:04,350 --> 00:14:08,278
After that we'll deploy to staging. Every commit always goes out to sharing.

227
00:14:08,374 --> 00:14:11,866
That's always where we need to test our code. But if we're just in a

228
00:14:11,888 --> 00:14:15,430
PR state, the GitHub reference won't be for Maino be for that branch.

229
00:14:15,510 --> 00:14:18,926
So we just stop there. Basically it'll just go to staging and allow people

230
00:14:18,948 --> 00:14:23,310
to test. Once that PR is merged into main,

231
00:14:23,460 --> 00:14:26,974
then this will execute again and it'll go all the way out to prod,

232
00:14:27,102 --> 00:14:31,058
running the exact same steps as before. But this time we're going to run in

233
00:14:31,064 --> 00:14:34,450
release mode because we need this to go out to production.

234
00:14:34,950 --> 00:14:38,578
Okay, so let's take a look at another example of these. Let's take

235
00:14:38,584 --> 00:14:40,450
a look at one of the Versaillesites.

236
00:14:43,110 --> 00:14:47,106
Okay, so I'm going to load up the Sukon AnZ definition here. This is

237
00:14:47,128 --> 00:14:49,666
a site that's built with next js and is going to be deployments out to

238
00:14:49,688 --> 00:14:53,462
Versaille. And again at the start you can see we have this same

239
00:14:53,516 --> 00:14:57,126
definition showing when we want to execute this. So we start off with a

240
00:14:57,148 --> 00:15:00,834
workflow dispatch which gives us the button in GitHub actions,

241
00:15:00,882 --> 00:15:04,534
allowing us to manually trigger a build. But then again we're monitoring pushes

242
00:15:04,582 --> 00:15:08,166
and pull requests. We monitor the three workflow

243
00:15:08,198 --> 00:15:11,990
definitions that this deployments is based on. So that's

244
00:15:12,070 --> 00:15:15,882
the config file we're looking at the CI CD for subcons. And this also

245
00:15:15,936 --> 00:15:19,646
leverages the builddexjs and deploy Versailles pipelines as

246
00:15:19,668 --> 00:15:23,294
well. On top of that, we need to monitor the source code

247
00:15:23,332 --> 00:15:27,374
for this site, and that's all located within this path, within the repository here.

248
00:15:27,492 --> 00:15:31,026
So if any of those assets change, that's when this pipeline is

249
00:15:31,048 --> 00:15:34,674
going to execute. And what does it do? Well, we start

250
00:15:34,712 --> 00:15:37,986
off a game by building the sites. We build the source code for

251
00:15:38,008 --> 00:15:41,398
the site to test that any code changes are correct and that

252
00:15:41,404 --> 00:15:44,726
we can move on to the deployment stage, if that's right. So if we take

253
00:15:44,748 --> 00:15:49,206
a look in the build next JS yaml in

254
00:15:49,228 --> 00:15:52,434
here, we can see we basically pass in the working directory

255
00:15:52,482 --> 00:15:55,754
because we have multiple next JS sites. So we need to pass in which sites

256
00:15:55,792 --> 00:15:59,034
it is we're building. And then we can run this on some really fast

257
00:15:59,072 --> 00:16:02,390
Ubuntu runners, really lightweight. We set some variable,

258
00:16:02,550 --> 00:16:05,994
we set some environment variables we need, and then we pass

259
00:16:06,032 --> 00:16:09,406
in things like the working directory as the parameter. Then we can start to

260
00:16:09,428 --> 00:16:12,398
execute. So we do a checkout of the code base,

261
00:16:12,564 --> 00:16:15,406
we choose which version of node we're working with.

262
00:16:15,588 --> 00:16:19,194
Then we run an NPM install to set up all the dependencies.

263
00:16:19,322 --> 00:16:23,326
We run an NPM build to check that the source code builds,

264
00:16:23,438 --> 00:16:26,786
and then we run an NPM lint to check that it's sync tactically correct

265
00:16:26,888 --> 00:16:29,090
and matches our development guidelines.

266
00:16:30,550 --> 00:16:33,894
If we hop back. Once that's completed successfully, we then

267
00:16:33,932 --> 00:16:37,506
go on to the deployment phase. And you'll notice here we only have one deployment

268
00:16:37,538 --> 00:16:41,574
phase, which is for preview and production. And that's because Vercel works

269
00:16:41,612 --> 00:16:44,726
a little differently than Azure. In Azure we have two different

270
00:16:44,748 --> 00:16:47,338
web apps. We have a staging web app and a production web app, which is

271
00:16:47,344 --> 00:16:49,658
what we saw before for our MVP site,

272
00:16:49,824 --> 00:16:53,066
infracell. How it handles it is the CLI which we'll look

273
00:16:53,088 --> 00:16:56,846
at in a sec, basically has a prod flag which is

274
00:16:56,868 --> 00:17:00,682
passed in, which is how you define whether you're doing a production

275
00:17:00,826 --> 00:17:04,846
or a preview build, basically. So all

276
00:17:04,868 --> 00:17:08,318
of that's handled inside this deploy Versel yaml. So what we do

277
00:17:08,324 --> 00:17:11,822
is we basically reference that one of our shared workflows we created,

278
00:17:11,886 --> 00:17:14,990
and then we pass in a bunch of secrets. So the versel token,

279
00:17:15,070 --> 00:17:18,562
our organization id and the project id for this site

280
00:17:18,616 --> 00:17:22,418
itself. Specifically, if we look in the deploy Versailles

281
00:17:22,434 --> 00:17:26,390
package here, here you can see again we're using these Ubuntu runners.

282
00:17:26,730 --> 00:17:30,166
We do a checkout, we set up node with the version that

283
00:17:30,188 --> 00:17:33,654
we're running on, and then afterwards we're going to use this

284
00:17:33,772 --> 00:17:37,034
aimon net versaille action. And this is one of the really nice things

285
00:17:37,072 --> 00:17:40,518
about GitHub actions. We haven't created this package. This is created

286
00:17:40,534 --> 00:17:44,614
by a member of the GitHub Actions community, and that allows us to automate

287
00:17:44,662 --> 00:17:48,186
deployments to Versailles. And there's thousands upon thousands

288
00:17:48,218 --> 00:17:51,582
of these packages out there, regardless of which language you're building,

289
00:17:51,636 --> 00:17:55,386
with, which cloud provider you're deploying for, there's a whole wealth of these libraries

290
00:17:55,418 --> 00:17:58,446
that you can build your scripts on top of. And if there isn't one,

291
00:17:58,468 --> 00:18:01,682
you can actually build your own and deploy for other people to use as well.

292
00:18:01,736 --> 00:18:05,726
So it's a really nice way of sharing code and deployment strategies

293
00:18:05,758 --> 00:18:09,358
with the community. We then basically pass in all the secrets

294
00:18:09,374 --> 00:18:13,158
we set. So our token, our id, our project id, and then we

295
00:18:13,164 --> 00:18:16,946
have our arguments. So here you can see we're going to pass the prod

296
00:18:16,978 --> 00:18:20,390
flag whenever we're merging into main,

297
00:18:20,460 --> 00:18:23,782
basically. So this is a merge into main, then we want to pass

298
00:18:23,836 --> 00:18:27,386
that flag in, and that is how we

299
00:18:27,408 --> 00:18:30,666
automate deployments out to a versel site. I'm not going to go through all of

300
00:18:30,688 --> 00:18:34,006
the different Versailles. The advantage of having these implemented via shared

301
00:18:34,038 --> 00:18:37,710
templates means that their definition is pretty much the same across anyway,

302
00:18:37,780 --> 00:18:40,350
just with different secrets and different values.

303
00:18:40,770 --> 00:18:44,254
So let's hop over to the browser now, and I'm going to show you how

304
00:18:44,292 --> 00:18:47,566
this actually looks inside of GitHub itself. If we go over

305
00:18:47,588 --> 00:18:51,106
to the actions tab here, we can see all of the different

306
00:18:51,208 --> 00:18:54,274
deployments that have actually been executed. The nice

307
00:18:54,312 --> 00:18:56,946
thing here is on the left you get to see all the different pipelines we

308
00:18:56,968 --> 00:19:00,702
defined before. So it even shows you the shared pipelines

309
00:19:00,766 --> 00:19:04,806
here. Now they're never actually going to be executed themselves, but the ones inside

310
00:19:04,908 --> 00:19:07,382
are. So you can now go and click on one of these, for example,

311
00:19:07,436 --> 00:19:11,574
the MVP site, and it'll then just show deployments to the MVP sites.

312
00:19:11,692 --> 00:19:14,958
Here's where you can see it says this workflow has a workflow dispatch

313
00:19:14,994 --> 00:19:18,218
trigger. So if we wanted to manually trigger this workflow, we could go and

314
00:19:18,224 --> 00:19:22,214
do that ourselves. Now if we go back to the all workflows

315
00:19:22,262 --> 00:19:26,346
view though, here you can see this is a deployment of the CI

316
00:19:26,378 --> 00:19:29,994
CD MVP site. Here's a deployment of the CI CD subcon

317
00:19:30,042 --> 00:19:33,774
EU site. So you can see it's really easy to see

318
00:19:33,892 --> 00:19:37,454
which assets have been deployed. On top of that we can see

319
00:19:37,492 --> 00:19:40,866
which branches have gone out. So here is a deployment all the way out to

320
00:19:40,888 --> 00:19:44,462
main for the subcontinent use site. Here's a deployment

321
00:19:44,526 --> 00:19:48,350
for XM cloud. This is deploying changes to our cloud cms

322
00:19:48,510 --> 00:19:51,826
and that's from a branch. So this will only be going out to our

323
00:19:51,848 --> 00:19:54,886
staging instance. It won't be going all the way to production ready for people to

324
00:19:54,908 --> 00:19:58,438
review those changes. If we take a look at one of these, we can

325
00:19:58,444 --> 00:20:01,526
see how it looks inside. So here's an example of an

326
00:20:01,548 --> 00:20:05,174
MVP change that went all the way out to production. So we can

327
00:20:05,212 --> 00:20:08,586
go and we can see where we've built the net solution. And these are the

328
00:20:08,608 --> 00:20:12,026
same steps that we looked at before. We can see how we set

329
00:20:12,048 --> 00:20:15,946
up the MS build. We installed Nuget. We ran a Nuget restore

330
00:20:15,978 --> 00:20:19,774
for our packages. We ran a build itself. And you can go and

331
00:20:19,892 --> 00:20:23,200
expand these and view detailed log files for all of them,

332
00:20:23,650 --> 00:20:27,006
showing exactly how that step executed and whether it

333
00:20:27,028 --> 00:20:30,466
was successful or not. After that, we went and did our deployments to

334
00:20:30,488 --> 00:20:33,806
our sharing site. So here we set up net, we ran

335
00:20:33,838 --> 00:20:38,226
our build and publish. So again, you're getting the full output from the CLI here.

336
00:20:38,408 --> 00:20:42,326
And then we took that asset and we published it out to our specific

337
00:20:42,428 --> 00:20:46,086
Azure web app. The same then happens for production as

338
00:20:46,108 --> 00:20:49,638
well. Here you can see we set up net the version that

339
00:20:49,644 --> 00:20:53,018
we needed to install into the runner. We then ran a

340
00:20:53,024 --> 00:20:56,586
build and publish and then

341
00:20:56,608 --> 00:20:59,754
we deployed it out to our Azure web app. So you can

342
00:20:59,792 --> 00:21:03,210
see how we have a single repository here we have four

343
00:21:03,280 --> 00:21:06,554
different sites, source code, it's all deploying

344
00:21:06,602 --> 00:21:10,286
to different cloud providers, different instances, all from

345
00:21:10,308 --> 00:21:14,206
a single CI CD instance. So this gives you a really nice

346
00:21:14,388 --> 00:21:17,650
single source of truth for all of your deployments.

347
00:21:19,750 --> 00:21:22,900
Okay, so I just want to finish up with a few conclusions here.

348
00:21:24,070 --> 00:21:27,582
GitHub actions itself as a platform is super flexible.

349
00:21:27,726 --> 00:21:30,658
You get a lot of pipelines out of the box,

350
00:21:30,744 --> 00:21:33,954
allowing you to do a lot of common tasks with common frameworks.

351
00:21:34,082 --> 00:21:37,426
But if you're working with a framework or a hosting provider

352
00:21:37,458 --> 00:21:40,854
where it isn't that common, there isn't something out of the box. You can see

353
00:21:40,892 --> 00:21:44,658
what community pipelines are available as well, like for example with the Versailles

354
00:21:44,674 --> 00:21:47,834
CLI wrapper that we used. On top of that, if you find

355
00:21:47,872 --> 00:21:51,366
something that hasn't already been automated by someone, you can create a pipeline

356
00:21:51,398 --> 00:21:54,910
yourself and you can share that for other people to benefit from. It's a really

357
00:21:54,980 --> 00:21:57,680
nice community driven CI CD platform.

358
00:21:59,010 --> 00:22:02,346
On top of that code reuse in your templates matters.

359
00:22:02,458 --> 00:22:06,346
The ability to use shared templates within these YAML definitions

360
00:22:06,458 --> 00:22:09,934
hugely reduced the actual amount of code that we wrote to deploy each of these

361
00:22:09,972 --> 00:22:13,646
sites. If we couldn't have done that, our three different Versailles

362
00:22:13,678 --> 00:22:17,186
sites when they got deployed would each have had to have duplicated each of that

363
00:22:17,208 --> 00:22:20,978
build code, each of that deploy code. And if we change that down the track,

364
00:22:21,064 --> 00:22:24,214
then we'd have to go and change it in each of those definitions, which is

365
00:22:24,252 --> 00:22:28,306
not that nicer way of working. The ability to create these shared templates

366
00:22:28,418 --> 00:22:31,894
makes it a much more nicer way of building out reuse into

367
00:22:31,932 --> 00:22:35,190
your CI CD pipelines. Finally,

368
00:22:35,260 --> 00:22:37,354
if you want to see all this in action, as I mentioned at the start,

369
00:22:37,392 --> 00:22:40,746
this repository is open source. We're still a work in

370
00:22:40,768 --> 00:22:43,626
progress. There's still jobs for us to do on this.

371
00:22:43,728 --> 00:22:47,322
You will have noticed, I think throughout this that there's actually multiple builds happening

372
00:22:47,376 --> 00:22:51,226
throughout. Next on my list is to share the build asset when we

373
00:22:51,248 --> 00:22:54,186
first do our build in our first step with the later steps to try and

374
00:22:54,208 --> 00:22:57,982
get our build time down. But yeah, you can go and check out a repository

375
00:22:58,046 --> 00:23:01,698
today and see how we're getting along. So thanks a lot for listening to

376
00:23:01,704 --> 00:23:05,586
my talk today. Again, you can see all my different social handles there on

377
00:23:05,608 --> 00:23:08,626
the screen. So if you've got any questions or just want to reach out and

378
00:23:08,648 --> 00:23:12,190
say hello, please get in touch. And apart from that, thanks for listening.

