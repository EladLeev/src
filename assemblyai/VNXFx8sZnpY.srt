1
00:00:23,170 --> 00:00:26,070
Hi everyone, thank you for joining my session.

2
00:00:26,570 --> 00:00:30,154
Today I'll be talking about how to secure your JavaScript

3
00:00:30,202 --> 00:00:34,586
applications. Before we get started, let me introduce

4
00:00:34,618 --> 00:00:38,606
myself. So I am Joshua Arvin Lat. I am the

5
00:00:38,628 --> 00:00:42,382
chief technology officer of Nuworks Interactive Labs.

6
00:00:42,526 --> 00:00:46,930
I am also an AWS machine Learning hero, and recently

7
00:00:47,350 --> 00:00:50,834
I am one of the five winners who

8
00:00:50,872 --> 00:00:53,970
were awarded the Digital Leader of the year award.

9
00:00:54,570 --> 00:00:58,342
I'm also the author of the following books, Machine Learning

10
00:00:58,396 --> 00:01:03,090
with Amazon Sagemaker, cookbook, machine learning engineering on AWS,

11
00:01:03,250 --> 00:01:06,802
and then the third book, building and automating penetration

12
00:01:06,866 --> 00:01:10,326
testing labs in the cloud. So without further

13
00:01:10,358 --> 00:01:14,042
ado, let's begin. So there's going to be three parts in this talk.

14
00:01:14,176 --> 00:01:18,502
So for part one let's start by talking about the

15
00:01:18,576 --> 00:01:22,126
reality. So what do you

16
00:01:22,148 --> 00:01:25,774
mean by the reality? So if

17
00:01:25,812 --> 00:01:29,486
we have been building JavaScript applications, whether it's

18
00:01:29,508 --> 00:01:34,126
in front end, in back end, using JavaScript for mobile applications,

19
00:01:34,318 --> 00:01:38,574
maybe you think that if you were an amazing developer

20
00:01:38,622 --> 00:01:41,982
or engineer, you would be able to automatically

21
00:01:42,046 --> 00:01:46,630
secure your applications in real life, in real projects.

22
00:01:47,130 --> 00:01:49,894
That's not really the case. Why?

23
00:01:50,092 --> 00:01:53,654
Because once you get to work in an organization or in

24
00:01:53,692 --> 00:01:57,846
a team, there's that reality that organizations,

25
00:01:57,958 --> 00:02:01,558
especially right now, would definitely prioritize,

26
00:02:01,734 --> 00:02:05,562
as you can see in the screen, the short term financial objectives as

27
00:02:05,616 --> 00:02:08,846
well as the long term financial objectives. At the

28
00:02:08,868 --> 00:02:12,430
same time, the overall goal is to make the clients and

29
00:02:12,500 --> 00:02:16,574
customers very happy. So what

30
00:02:16,612 --> 00:02:20,574
does that mean? What's the applications? The implication? There is,

31
00:02:20,772 --> 00:02:24,146
there's that chance, a very big chance,

32
00:02:24,328 --> 00:02:28,114
that we'll all be focusing on the features and less on

33
00:02:28,152 --> 00:02:32,114
the engineering best practices as well as the security best

34
00:02:32,152 --> 00:02:35,974
practices left alone compliance. So in

35
00:02:36,012 --> 00:02:40,226
order for the team to be able to build systems

36
00:02:40,258 --> 00:02:43,720
really quickly, a lot of the

37
00:02:44,090 --> 00:02:47,914
other items that's in your pipeline, it's probably the

38
00:02:47,952 --> 00:02:51,574
security checks, that's probably the other compliance

39
00:02:51,622 --> 00:02:54,950
requirements. Those will be deprioritized

40
00:02:55,110 --> 00:02:58,490
so that you'll be able to launch your product faster.

41
00:02:58,830 --> 00:03:02,094
It happens to all companies, whether big or small,

42
00:03:02,212 --> 00:03:05,534
whether you're in a startup, because right now a lot

43
00:03:05,572 --> 00:03:08,862
of the leaders and managers would say, well,

44
00:03:08,916 --> 00:03:12,850
there's nothing to secure if there's no business. So let's focus on the business first.

45
00:03:13,000 --> 00:03:16,706
However, in reality you need to take care

46
00:03:16,728 --> 00:03:20,066
of the security from day zero or day one,

47
00:03:20,248 --> 00:03:24,134
because security is kind of tricky to include once

48
00:03:24,172 --> 00:03:27,986
the app is already running. It's not just about adding firewalls

49
00:03:28,018 --> 00:03:32,134
to an existing JavaScript application. You have to make sure

50
00:03:32,332 --> 00:03:35,720
that the developers are already

51
00:03:36,670 --> 00:03:40,758
aware of the different security implications and risk and threats

52
00:03:40,854 --> 00:03:44,806
available so that when they build the system it's

53
00:03:44,838 --> 00:03:48,620
already secure and hardened. In addition to that,

54
00:03:48,930 --> 00:03:53,438
developers usually know a lot about

55
00:03:53,604 --> 00:03:57,326
the best practices from the development end they may

56
00:03:57,348 --> 00:04:00,078
know a few security best practices as well.

57
00:04:00,244 --> 00:04:03,870
However, in reality most developers

58
00:04:03,950 --> 00:04:07,780
have no idea how an attack really works

59
00:04:08,470 --> 00:04:12,146
because for one thing, being a developer is already hard enough and

60
00:04:12,168 --> 00:04:15,698
they have to learn a lot of things already. Right now,

61
00:04:15,784 --> 00:04:18,662
if you want to become a developer, it will probably take you two months,

62
00:04:18,716 --> 00:04:22,626
three months, six months or even a year of experience before you're

63
00:04:22,658 --> 00:04:26,082
really able to contribute to more complex

64
00:04:26,146 --> 00:04:29,546
projects. How about you spend another one to two years or

65
00:04:29,568 --> 00:04:33,274
three years trying to learn how to securing your

66
00:04:33,312 --> 00:04:37,290
JavaScript applications? So one of the ways to

67
00:04:37,360 --> 00:04:40,778
help us understand what to prioritize

68
00:04:40,954 --> 00:04:44,606
and what to do when it comes to security, one of

69
00:04:44,628 --> 00:04:48,446
the more important things is for us to understand what

70
00:04:48,468 --> 00:04:52,034
we call the cyber attack chain. So let's start

71
00:04:52,072 --> 00:04:56,322
with a simple example. Right now a developer would

72
00:04:56,376 --> 00:04:59,842
probably think that this is code which

73
00:04:59,896 --> 00:05:03,406
has harmless lines

74
00:05:03,438 --> 00:05:07,366
of code. In most cases they

75
00:05:07,388 --> 00:05:11,046
would say oh, there's that evil statement there

76
00:05:11,228 --> 00:05:14,998
which technically evaluates that expression and

77
00:05:15,084 --> 00:05:18,666
that could be used to compromise the entire application. So if

78
00:05:18,688 --> 00:05:21,500
this piece of code is part of an overall web application,

79
00:05:22,350 --> 00:05:25,542
developers would say that's

80
00:05:25,686 --> 00:05:29,550
risky. So before we go into that, let's first check

81
00:05:29,620 --> 00:05:32,862
how this application works. Let's start by

82
00:05:32,916 --> 00:05:35,230
entering a mathematical expression.

83
00:05:35,650 --> 00:05:39,374
So you input one plus one and your application

84
00:05:39,492 --> 00:05:43,186
behaves normally so it produces two. So amazing, right?

85
00:05:43,208 --> 00:05:47,086
So your application is supposed to do what it's supposed to do. That's the bare

86
00:05:47,118 --> 00:05:50,718
minimum requirement. However, most developers,

87
00:05:50,894 --> 00:05:55,666
even though they know that using the evil statement is not recommended,

88
00:05:55,858 --> 00:06:00,050
they don't know how their applications would be compromised

89
00:06:00,130 --> 00:06:03,160
because it's not really part of their training. However,

90
00:06:03,690 --> 00:06:07,034
somebody is just playing around and trying

91
00:06:07,072 --> 00:06:10,374
to input different things in your application, they could easily

92
00:06:10,422 --> 00:06:13,894
input something like this. And what would the output

93
00:06:13,942 --> 00:06:17,146
be? It would create a hello

94
00:06:17,248 --> 00:06:21,034
text file where the server

95
00:06:21,082 --> 00:06:24,826
files are running inside the production

96
00:06:24,858 --> 00:06:28,174
server. So very scary because

97
00:06:28,372 --> 00:06:32,034
this well crafted input is used

98
00:06:32,152 --> 00:06:36,900
by a potential attacker in order to perform something

99
00:06:37,270 --> 00:06:41,394
which shouldn't be happening in the first place. The application

100
00:06:41,512 --> 00:06:44,994
you built is just supposed to evaluate

101
00:06:45,042 --> 00:06:48,886
a mathematical expression. And for some reason your applications

102
00:06:48,988 --> 00:06:53,094
was used to misbehave or to do something which it

103
00:06:53,132 --> 00:06:56,682
shouldn't have, which is in this case to create a hello text

104
00:06:56,736 --> 00:07:00,538
file. Is it really that bad? I mean,

105
00:07:00,624 --> 00:07:04,700
what more can you do with this example? What if

106
00:07:05,150 --> 00:07:09,042
a potential attacker runs the following

107
00:07:09,206 --> 00:07:12,846
command in a different server? So let's call that the

108
00:07:12,868 --> 00:07:16,558
attacker machine. So the attacker machine is different

109
00:07:16,724 --> 00:07:20,794
from the target machine. So the target machine is your production

110
00:07:20,842 --> 00:07:24,194
server where this application is running. So again,

111
00:07:24,232 --> 00:07:28,206
this is kind of simplified because the lines of code I've

112
00:07:28,238 --> 00:07:31,762
added, they're basically just there as a standalone line of code.

113
00:07:31,816 --> 00:07:34,886
In reality, that evil statement, that block of

114
00:07:34,908 --> 00:07:38,600
code, may be part of a larger web applications.

115
00:07:39,130 --> 00:07:42,994
So going back to this example, if the hacker

116
00:07:43,042 --> 00:07:46,310
or the attacker runs the following command,

117
00:07:46,990 --> 00:07:50,486
what happens there is the attacker machine

118
00:07:50,518 --> 00:07:54,426
listens and waits for the malicious input to

119
00:07:54,448 --> 00:07:58,140
be pushed to your vulnerable application.

120
00:07:58,850 --> 00:08:02,078
So this time, the moment that that specific

121
00:08:02,164 --> 00:08:05,518
block of code is invoked again, and instead

122
00:08:05,604 --> 00:08:10,202
of entering or inputting a mathematical expression,

123
00:08:10,346 --> 00:08:13,874
you input this instead and the IP address

124
00:08:13,992 --> 00:08:18,446
is now replaced with the public IP address of the attacker machine.

125
00:08:18,638 --> 00:08:22,546
So what happens here is that the

126
00:08:22,568 --> 00:08:26,482
victim machine, the target machine, now connects

127
00:08:26,546 --> 00:08:28,950
back to the attacker machine.

128
00:08:29,290 --> 00:08:32,534
And what happens there is the attacker would now

129
00:08:32,572 --> 00:08:36,266
be able to run commands as if it

130
00:08:36,288 --> 00:08:40,070
was his or her own machine, similar to Ssh.

131
00:08:40,230 --> 00:08:43,690
So very scary, because the moment the attacker has direct

132
00:08:43,760 --> 00:08:47,290
access to your machine using something

133
00:08:47,360 --> 00:08:51,134
called a reverse shell, then it's technically game over for that

134
00:08:51,172 --> 00:08:54,606
machine. The next steps there would be for the

135
00:08:54,628 --> 00:08:58,302
attacker to perform other types of attacks, maybe look for

136
00:08:58,436 --> 00:09:01,794
other passwords, look for databases there,

137
00:09:01,912 --> 00:09:06,942
download the data and use the data collected

138
00:09:07,086 --> 00:09:10,370
to basically perform other malicious actions.

139
00:09:10,790 --> 00:09:15,110
In other cases, it's possible for the attacker to perform something called

140
00:09:15,260 --> 00:09:18,678
IAM privilege escalation. So if your application

141
00:09:18,764 --> 00:09:22,534
is deployed in the cloud and the server where your applications is

142
00:09:22,572 --> 00:09:26,374
running, there is a big chance that other attacks and

143
00:09:26,412 --> 00:09:30,374
chains and sequence of steps would be performed by the attacker

144
00:09:30,502 --> 00:09:34,890
after the initial set of actions. Again, it's a chain.

145
00:09:35,310 --> 00:09:39,214
It doesn't end with this simple set of steps. There would be other more

146
00:09:39,252 --> 00:09:43,070
steps that the attacker would do. So on your end.

147
00:09:43,220 --> 00:09:47,662
It's important that you practice code review.

148
00:09:47,796 --> 00:09:51,314
You have code review sessions in your team and you need to have

149
00:09:51,352 --> 00:09:55,426
someone knowledgeable about these types of security

150
00:09:55,528 --> 00:09:59,474
best practices. Because even if you guys know that

151
00:09:59,512 --> 00:10:03,658
it's not recommended why we should not use evil,

152
00:10:03,854 --> 00:10:07,106
you should be able to explain and demonstrate

153
00:10:07,298 --> 00:10:11,270
why that's the case. Now let's proceed with part

154
00:10:11,340 --> 00:10:15,154
number two. Let's now talk about how to secure machine

155
00:10:15,202 --> 00:10:17,660
learning powered JavaScript application.

156
00:10:18,350 --> 00:10:22,890
So right now there's a lot of innovations

157
00:10:23,390 --> 00:10:26,682
and new solutions when it comes

158
00:10:26,736 --> 00:10:29,982
to AI and machine learning. Right now

159
00:10:30,036 --> 00:10:33,902
you've probably heard about large language models and

160
00:10:33,956 --> 00:10:37,594
at the end of the day, these large language models would be deployed

161
00:10:37,642 --> 00:10:40,794
inside a server, right? However,

162
00:10:40,932 --> 00:10:44,814
in some cases when you have to build aipowered applications

163
00:10:44,942 --> 00:10:48,866
or machine learning powered applications, you usually

164
00:10:48,968 --> 00:10:52,914
no longer need to follow this set of steps. So when

165
00:10:52,952 --> 00:10:56,854
you have the time, the money, and your organization has

166
00:10:56,892 --> 00:11:00,822
their own data, they would be able to build machine learning

167
00:11:00,876 --> 00:11:03,926
models. So you start with data collection, you prepare the

168
00:11:03,948 --> 00:11:07,258
data, you do feature engineering, you perform a

169
00:11:07,264 --> 00:11:10,522
bit of analysis, and then after model training

170
00:11:10,576 --> 00:11:14,662
and hyperparameter tuning, you evaluate the model or models

171
00:11:14,806 --> 00:11:17,850
and then you choose the best one and then you deploy.

172
00:11:18,270 --> 00:11:21,466
So the moment you deploy the model, it's now usable

173
00:11:21,658 --> 00:11:24,846
by other applications so that they

174
00:11:24,868 --> 00:11:28,362
would be able to mimic human intelligence.

175
00:11:28,506 --> 00:11:32,146
So for example, let's say that there's an image of

176
00:11:32,168 --> 00:11:35,838
a cat and you uploaded that image

177
00:11:36,014 --> 00:11:38,660
of that cat to a mobile application,

178
00:11:39,510 --> 00:11:42,402
and then your mobile application pushes it,

179
00:11:42,536 --> 00:11:47,510
let's say to a JavaScript server. That JavaScript server utilizes

180
00:11:47,930 --> 00:11:51,606
a machine learning model to perform

181
00:11:51,788 --> 00:11:54,886
inference, basically to predict if it's a cat or

182
00:11:54,908 --> 00:11:58,886
not a cat, and then you return the response

183
00:11:58,918 --> 00:12:02,374
back to the mobile app and then there you go, the user

184
00:12:02,422 --> 00:12:05,914
would receive if it's a yes or a no. So the

185
00:12:05,952 --> 00:12:09,694
input would be image and then

186
00:12:09,732 --> 00:12:13,706
the output would be one or zero. So if it's

187
00:12:13,738 --> 00:12:17,598
one, it's a cat, if it's zero, it's not a cat. So basically

188
00:12:17,684 --> 00:12:21,780
that's how machine learning powered applications work.

189
00:12:22,390 --> 00:12:26,366
In the past you would generally have to deploy

190
00:12:26,398 --> 00:12:29,954
it inside a server using various different

191
00:12:30,072 --> 00:12:33,460
approaches or techniques. However, right now

192
00:12:33,930 --> 00:12:38,406
there's now an option to even deploy your machine learning

193
00:12:38,588 --> 00:12:42,022
model in the browser. So wow,

194
00:12:42,076 --> 00:12:45,814
right? So using javascript you would be able to deploy your

195
00:12:45,852 --> 00:12:48,726
machine learning model in the browser.

196
00:12:48,918 --> 00:12:52,346
So in the left hand side you can see that,

197
00:12:52,528 --> 00:12:56,058
yes, you can deploy your machine learning model on

198
00:12:56,064 --> 00:12:59,786
the server side, and then on the right hand side you can see that

199
00:12:59,888 --> 00:13:03,662
you can deploy your machine learning model in the front end side.

200
00:13:03,796 --> 00:13:07,774
So what happens there is the browser is able

201
00:13:07,812 --> 00:13:12,002
to download your machine learning model from the back end and

202
00:13:12,056 --> 00:13:16,386
then there from within the browser you

203
00:13:16,408 --> 00:13:19,646
can do a lot of awesome stuff there already. So there's

204
00:13:19,678 --> 00:13:23,690
no longer any more back and forth after the initial request

205
00:13:23,870 --> 00:13:27,746
because everything is going to happen inside the browser.

206
00:13:27,938 --> 00:13:32,022
So for example, continuing the example earlier about

207
00:13:32,076 --> 00:13:35,874
that cat being pushed

208
00:13:35,922 --> 00:13:39,340
CTo the machine learning model in the back end,

209
00:13:39,790 --> 00:13:43,462
instead of that image being pushed

210
00:13:43,526 --> 00:13:45,740
to the back end from the front end,

211
00:13:46,430 --> 00:13:50,174
what happens instead would be the

212
00:13:50,212 --> 00:13:53,680
image of that cat stays in the front end

213
00:13:54,050 --> 00:13:57,022
and the machine learning model in the front end.

214
00:13:57,076 --> 00:14:01,002
Also in the browser what happens there is

215
00:14:01,076 --> 00:14:04,754
the inference happens in the browser and the

216
00:14:04,792 --> 00:14:08,722
model responds whether it's a cat or not. A cat but this

217
00:14:08,776 --> 00:14:12,850
time that request no longer reaches

218
00:14:13,350 --> 00:14:18,166
the back end, the server, because the model is already in

219
00:14:18,188 --> 00:14:21,622
the client side, the browser. So why do this?

220
00:14:21,676 --> 00:14:24,946
What's the advantage of this approach? The advantage

221
00:14:24,978 --> 00:14:28,426
of this approach is that, number one, you can work offline and

222
00:14:28,448 --> 00:14:31,674
then there are no servers needed if the

223
00:14:31,792 --> 00:14:34,700
model is in the front end, right?

224
00:14:35,310 --> 00:14:39,466
Second, it helps with data privacy because the request from

225
00:14:39,488 --> 00:14:43,642
the browser no longer reaches the back end, and there's better latency.

226
00:14:43,706 --> 00:14:47,310
Also because there's no more back and forth from the front end

227
00:14:47,380 --> 00:14:50,000
to the back end and back to the front end.

228
00:14:50,450 --> 00:14:54,030
So in order for us to appreciate this further,

229
00:14:54,190 --> 00:14:57,886
it's basically your favorite libraries and frameworks

230
00:14:57,918 --> 00:15:01,554
in the front end combined with a

231
00:15:01,592 --> 00:15:05,094
specific machine learning library. And here, these are just a few

232
00:15:05,132 --> 00:15:09,990
examples on what you can use to perform this type of scenario.

233
00:15:10,570 --> 00:15:14,850
However, before you do that, there are several security considerations

234
00:15:14,930 --> 00:15:18,762
you have to research and think about before you

235
00:15:18,816 --> 00:15:22,140
have this type of architecture. Because for one thing,

236
00:15:22,830 --> 00:15:26,602
anything that is pushed to your browser can be

237
00:15:26,656 --> 00:15:30,094
downloaded by someone who knows how to do it.

238
00:15:30,292 --> 00:15:34,830
So let's say that you have a website and

239
00:15:34,900 --> 00:15:38,506
it's used by a lot of users. What if the machine

240
00:15:38,538 --> 00:15:42,480
learning model used and

241
00:15:42,850 --> 00:15:47,630
pushed to the browser for that browser? Side inference,

242
00:15:47,790 --> 00:15:51,314
what if it's downloaded by your users and they create a new

243
00:15:51,352 --> 00:15:55,400
website using the same model? So again,

244
00:15:55,770 --> 00:15:59,586
in most cases you would prefer the model being deployed

245
00:15:59,618 --> 00:16:03,400
in the back end. However, in some cases, if you're really okay with

246
00:16:03,930 --> 00:16:07,894
the security impact or risks, then that's

247
00:16:07,942 --> 00:16:11,354
fine as well. So if you're doing a demo, if you're not

248
00:16:11,392 --> 00:16:15,510
using data which is proprietary,

249
00:16:15,670 --> 00:16:19,146
if you're okay with your model being downloaded, or if

250
00:16:19,168 --> 00:16:22,846
you know how to further secure your model in the front end, then that's the

251
00:16:22,868 --> 00:16:26,462
time you deploy your model in a way

252
00:16:26,516 --> 00:16:29,738
that can easily be downloaded by the browser

253
00:16:29,834 --> 00:16:33,170
and perform this type of approach.

254
00:16:33,990 --> 00:16:37,300
Now let's proceed with part three, the last part.

255
00:16:38,230 --> 00:16:42,462
In order for us to secure our JavaScript applications

256
00:16:42,606 --> 00:16:46,134
again, in the previous examples we've focused more

257
00:16:46,172 --> 00:16:50,070
on the back end part, and in some cases you focus more

258
00:16:50,140 --> 00:16:52,710
on the specific JavaScript implementation.

259
00:16:53,210 --> 00:16:57,370
But in order for us to fully secure our applications,

260
00:16:57,790 --> 00:17:01,770
we need to be fully aware of how to secure

261
00:17:02,510 --> 00:17:05,658
the libraries and library configurations as well,

262
00:17:05,744 --> 00:17:09,686
the framework configurations as well. What I mean by that is, every time

263
00:17:09,728 --> 00:17:13,322
we use a library or a framework, we need to be well aware

264
00:17:13,386 --> 00:17:16,814
of the different vulnerabilities and risk involved with that

265
00:17:16,852 --> 00:17:20,650
specific framework. For example, if you accidentally

266
00:17:20,730 --> 00:17:24,522
forgot to enable production mode using a specific framework

267
00:17:24,586 --> 00:17:28,482
or a library, what would be the impact. So again,

268
00:17:28,536 --> 00:17:32,862
in addition to having a good understanding of the different vulnerabilities

269
00:17:32,926 --> 00:17:37,014
for the language, it's important that we have a good idea on

270
00:17:37,052 --> 00:17:40,742
what risk and vulnerabilities are also possible when

271
00:17:40,796 --> 00:17:43,986
using this specific libraries and frameworks.

272
00:17:44,098 --> 00:17:47,834
At the same time, when using libraries, be very careful because there

273
00:17:47,872 --> 00:17:51,286
may be some malicious libraries as well and you don't

274
00:17:51,318 --> 00:17:55,242
want your application to be compromised because there's some sort

275
00:17:55,296 --> 00:17:58,490
of backdoor in that library.

276
00:17:59,090 --> 00:18:01,520
So there are different tools available online,

277
00:18:01,970 --> 00:18:05,898
whether they're paid or free, and you can use that to further secure

278
00:18:05,994 --> 00:18:07,950
your JavaScript applications.

279
00:18:08,610 --> 00:18:12,366
Also, when it comes to vulnerability management,

280
00:18:12,478 --> 00:18:16,514
it's preferred number one for your organization or

281
00:18:16,552 --> 00:18:20,066
for your team to utilize something like this. This is what

282
00:18:20,088 --> 00:18:23,634
they call an automated vulnerability management service or

283
00:18:23,672 --> 00:18:26,998
tool. So there are different tools available online.

284
00:18:27,164 --> 00:18:30,614
And the great thing about this is every time there

285
00:18:30,652 --> 00:18:33,878
are changes in a server or there are changes

286
00:18:33,964 --> 00:18:37,786
in a container image, this automated tool

287
00:18:37,888 --> 00:18:41,830
would automatically scan those servers

288
00:18:41,910 --> 00:18:45,446
or containers and provide this output.

289
00:18:45,558 --> 00:18:49,374
So this output is a list of the different risk and

290
00:18:49,412 --> 00:18:53,360
vulnerabilities involved in that system.

291
00:18:54,210 --> 00:18:57,546
So in addition to having that code review layer,

292
00:18:57,658 --> 00:19:01,234
whether that's manual or automated, you can also have this

293
00:19:01,272 --> 00:19:05,214
layer which makes use of an automated vulnerability management

294
00:19:05,262 --> 00:19:09,026
tool. In addition to that,

295
00:19:09,208 --> 00:19:12,942
when dealing with network infrastructure where your JavaScript

296
00:19:13,006 --> 00:19:16,710
applications are hosted, it's important to

297
00:19:16,780 --> 00:19:20,534
practice this network solutions. So with

298
00:19:20,572 --> 00:19:23,894
network isolation, even if some

299
00:19:23,932 --> 00:19:27,018
of your servers get compromised, hopefully not.

300
00:19:27,184 --> 00:19:31,670
If some of your servers get compromised, the other systems

301
00:19:31,830 --> 00:19:34,614
in the same network would be protected.

302
00:19:34,742 --> 00:19:38,514
If there's network isolation in place, if you're

303
00:19:38,582 --> 00:19:42,010
able CTO properly design the subnets.

304
00:19:42,090 --> 00:19:45,646
If there's a private subnet here, if there's a public subnet here,

305
00:19:45,828 --> 00:19:49,370
then the damage can be limited

306
00:19:49,450 --> 00:19:53,054
only to a certain portion. So network isolation

307
00:19:53,102 --> 00:19:56,594
helps a lot because even if the

308
00:19:56,632 --> 00:19:59,570
attacker is able to fully compromise one machine,

309
00:20:00,230 --> 00:20:05,034
the other machines are not automatically compromised

310
00:20:05,102 --> 00:20:05,720
also.

311
00:20:07,850 --> 00:20:11,014
So my question for you guys is how

312
00:20:11,052 --> 00:20:14,134
about IAM privilege escalation? So for one thing,

313
00:20:14,172 --> 00:20:17,594
how does this work? So the first set of steps may

314
00:20:17,632 --> 00:20:20,650
involve your JavaScript application compromised,

315
00:20:21,310 --> 00:20:24,630
and then let's say there's that reversal

316
00:20:24,790 --> 00:20:28,726
and your attacker is able to access the server.

317
00:20:28,838 --> 00:20:32,350
It has the ability to run commands inside that server.

318
00:20:32,850 --> 00:20:36,122
Even if from a network standpoint the attacker

319
00:20:36,186 --> 00:20:40,010
is not able to attack other servers because of network isolation,

320
00:20:40,170 --> 00:20:44,050
it is still possible for an attacker to utilize

321
00:20:44,870 --> 00:20:48,382
something which is called an IAM role.

322
00:20:48,526 --> 00:20:52,494
So this IAM role is attached

323
00:20:52,542 --> 00:20:56,066
to the server when it's deployed

324
00:20:56,178 --> 00:20:59,718
in a cloud environment. So this

325
00:20:59,804 --> 00:21:03,158
IAM role is called

326
00:21:03,244 --> 00:21:06,854
differently in Azure, GCP and AWS,

327
00:21:06,982 --> 00:21:11,126
you can just think of it as a configuration

328
00:21:11,318 --> 00:21:14,906
which allows the scripts inside that

329
00:21:15,008 --> 00:21:18,862
server to run cloud

330
00:21:18,916 --> 00:21:22,560
computing actions or commands. So for example,

331
00:21:23,010 --> 00:21:26,650
this security IAM role

332
00:21:26,810 --> 00:21:30,650
allows the server or the scripts inside the server

333
00:21:30,810 --> 00:21:33,650
to create a new resource,

334
00:21:33,990 --> 00:21:38,002
or even to modify or delete resources from

335
00:21:38,056 --> 00:21:41,454
within that instance. So the scary

336
00:21:41,502 --> 00:21:45,510
thing there is what if that instance

337
00:21:46,090 --> 00:21:49,250
has an IAM role

338
00:21:49,410 --> 00:21:53,350
attached? CTo it, which allows any user

339
00:21:53,930 --> 00:21:57,402
to run a script inside it which

340
00:21:57,456 --> 00:22:01,002
deletes all the resources in that

341
00:22:01,056 --> 00:22:04,954
account. So no matter how secure the

342
00:22:04,992 --> 00:22:08,780
other applications are, the weakest link

343
00:22:09,170 --> 00:22:13,118
will be the weakest link. That will be the source of

344
00:22:13,204 --> 00:22:16,320
chaos from within that entire cloud account.

345
00:22:16,850 --> 00:22:20,526
So there are different ways to handle this, and there are

346
00:22:20,548 --> 00:22:24,162
different strategies to manage the risk and

347
00:22:24,216 --> 00:22:27,698
potential impact of that kind of attack. But one of

348
00:22:27,704 --> 00:22:30,610
the ways would be to restrict the IAM permissions.

349
00:22:31,110 --> 00:22:35,142
Never give too much power or

350
00:22:35,196 --> 00:22:38,070
permissions to a server.

351
00:22:38,570 --> 00:22:42,246
So in the past you give permissions to a human,

352
00:22:42,428 --> 00:22:45,686
but right now when you're deploying your applications in

353
00:22:45,708 --> 00:22:49,434
the cloud, you can either give permissions to a human

354
00:22:49,632 --> 00:22:53,610
or you might be able to give permissions to

355
00:22:53,760 --> 00:22:57,990
a machine resource, which is in this case a server. So limiting

356
00:22:58,070 --> 00:23:01,502
those permissions, or maybe not giving any

357
00:23:01,556 --> 00:23:05,054
permission at all would help improve the security of

358
00:23:05,092 --> 00:23:07,760
your application. So again,

359
00:23:09,010 --> 00:23:12,862
securing JavaScript applications is not just about securing

360
00:23:12,926 --> 00:23:16,542
the code, it's also securing where your JavaScript

361
00:23:16,606 --> 00:23:18,340
applications are running.

362
00:23:20,230 --> 00:23:24,294
So how about denial of wallet attacks when

363
00:23:24,332 --> 00:23:28,294
it comes to securing JavaScript applications right now you

364
00:23:28,332 --> 00:23:31,350
also need to understand the architecture aspect.

365
00:23:31,930 --> 00:23:35,730
What if you have a serverless implementation

366
00:23:35,810 --> 00:23:39,654
or architecture which uses AWS

367
00:23:39,702 --> 00:23:43,962
Lambda and JavaScript to process web

368
00:23:44,016 --> 00:23:48,060
request? So AWS Lambda is

369
00:23:48,830 --> 00:23:52,958
a function as a service which

370
00:23:53,044 --> 00:23:56,666
processes an event and provides a response

371
00:23:56,698 --> 00:24:00,142
or an output. So if you have a web API that

372
00:24:00,196 --> 00:24:03,582
can be your backend web server,

373
00:24:03,726 --> 00:24:08,142
but behind the scenes you have a serverless web API resource,

374
00:24:08,286 --> 00:24:12,146
and you also have serverless functions which processes each

375
00:24:12,168 --> 00:24:16,326
of the requests. Having a good idea on

376
00:24:16,348 --> 00:24:20,422
how the finance aspect works would help you, because if

377
00:24:20,476 --> 00:24:24,390
your application is not able to process denial of service

378
00:24:24,460 --> 00:24:27,558
attacks, well then you might encounter

379
00:24:27,734 --> 00:24:31,558
a similar issue here where you might be surprised

380
00:24:31,654 --> 00:24:35,210
that your cloud bill would be

381
00:24:35,360 --> 00:24:38,918
amazingly large. When I say amazingly large, you wouldn't

382
00:24:38,934 --> 00:24:42,506
be able to pay the bill at all because there's

383
00:24:42,538 --> 00:24:46,154
too much request which force your infrastructure

384
00:24:46,202 --> 00:24:49,758
to scale automatically. And then you have to pay a

385
00:24:49,764 --> 00:24:53,794
lot of money because you pay for what you used in

386
00:24:53,832 --> 00:24:57,250
a cloud platform. So this affects different cloud

387
00:24:57,320 --> 00:25:00,978
providers and it's important that you're aware that this attack

388
00:25:01,064 --> 00:25:05,166
is possible because it's going to really cost money which

389
00:25:05,208 --> 00:25:08,040
would then close that cloud account.

390
00:25:08,730 --> 00:25:12,658
So in order to protect against denial of wallet attacks

391
00:25:12,834 --> 00:25:16,346
number one you need to be aware that that's possible and second you need to

392
00:25:16,368 --> 00:25:20,490
be able to include in your plan and architecture how to deal

393
00:25:20,560 --> 00:25:24,330
with ddos and denial of wallet attacks.

394
00:25:25,150 --> 00:25:28,342
So that's pretty much it. In this session

395
00:25:28,406 --> 00:25:31,930
we learned a lot of things. There were three parts.

396
00:25:32,090 --> 00:25:35,134
The first part focusing more on the JavaScript code

397
00:25:35,252 --> 00:25:38,526
and making sure that the developers are well aware on

398
00:25:38,548 --> 00:25:42,346
how that JavaScript code can be used to compromise

399
00:25:42,378 --> 00:25:46,350
the overall system and server. The second part involves

400
00:25:46,690 --> 00:25:50,634
how to secure your JavaScript applications

401
00:25:50,682 --> 00:25:54,406
which are machine learning powered and part

402
00:25:54,588 --> 00:25:59,122
focuses more on the other aspects like securing the libraries

403
00:25:59,266 --> 00:26:03,042
and frameworks used as well as the other aspects

404
00:26:03,106 --> 00:26:06,450
like the infrastructure and the network

405
00:26:06,530 --> 00:26:10,310
as well. So thank you again for listening to my talk

406
00:26:10,380 --> 00:26:13,878
and hope you learned something new. Have a great day ahead guys.

407
00:26:13,964 --> 00:26:14,226
Bye.

