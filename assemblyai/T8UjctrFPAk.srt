1
00:01:54,330 --> 00:01:58,142
All right, well, welcome everybody. Thanks for joining. As I mentioned,

2
00:01:58,196 --> 00:02:01,758
diving into taking your DevOps tools to the dark side and stepping up your security

3
00:02:01,844 --> 00:02:05,218
game in the DevOps space. Quick back ground

4
00:02:05,234 --> 00:02:08,726
on who I am. I've done a mix of software development and DevOps for the

5
00:02:08,748 --> 00:02:12,902
past 13 years. I started in software engineering using

6
00:02:13,036 --> 00:02:16,786
support and web development. I moved on to infrastructure

7
00:02:16,818 --> 00:02:19,974
monitoring. I'd managed CICD for

8
00:02:20,012 --> 00:02:23,866
a shop that had over 100 DevOps, and it was just two

9
00:02:23,888 --> 00:02:27,274
or three of us DevOps guys trying to support 100 of them. So I'm used

10
00:02:27,312 --> 00:02:31,482
to things being busy and moving fast. After that, I moved on to building

11
00:02:31,536 --> 00:02:35,582
a site reliability department at a billion dollar company where

12
00:02:35,636 --> 00:02:38,846
we built a site reliability team. We built a NOC and all

13
00:02:38,868 --> 00:02:43,214
the visualizations and response procedures and so forth from the ground up.

14
00:02:43,412 --> 00:02:46,578
Currently, I'm leading the DevOps team at Netfoundry. We call it

15
00:02:46,584 --> 00:02:50,450
our Rav team, which stands for reliability, automation and visibility.

16
00:02:50,950 --> 00:02:54,594
And I've used a lot of DevOps tools over the years. I would

17
00:02:54,632 --> 00:02:57,986
say I'm generally pretty opinionated about which tools I like, which ones I don't.

18
00:02:58,018 --> 00:03:01,506
And that just comes from I've experienced both the gains

19
00:03:01,538 --> 00:03:05,074
and the pain from working from all sorts of different technology, ranging anywhere

20
00:03:05,122 --> 00:03:08,966
from config management, monitoring, automation, you name it.

21
00:03:09,068 --> 00:03:12,886
I love learning new tech. I love constantly growing and evolving

22
00:03:12,918 --> 00:03:16,138
my skill set and just continuing to learn about new tools that

23
00:03:16,144 --> 00:03:19,846
are out there and are available. So let's

24
00:03:19,878 --> 00:03:23,366
talk about zero trust networking. This is a term

25
00:03:23,398 --> 00:03:26,686
that is emerging in the industry, and a lot of people are

26
00:03:26,708 --> 00:03:30,206
throwing this word around. And what is tricky about

27
00:03:30,228 --> 00:03:33,514
it is it's become a marketing term. And so there's a lot of different definitions

28
00:03:33,562 --> 00:03:37,518
out there. And so it's one of those things, it's like DevOps to where it's

29
00:03:37,534 --> 00:03:41,026
almost grown into a term that has no real meaning. But I'd like

30
00:03:41,048 --> 00:03:44,434
to cover how we define it at Netfoundry just because

31
00:03:44,472 --> 00:03:48,002
we're in the business of zero trust networking. So traditionally,

32
00:03:48,066 --> 00:03:51,350
with network security, the security

33
00:03:51,420 --> 00:03:54,966
is built around a perimeter based model. It's the

34
00:03:54,988 --> 00:03:58,486
idea that I've got a firewall and I put everything that's important and needs

35
00:03:58,508 --> 00:04:01,050
to be protected inside of that firewall.

36
00:04:01,790 --> 00:04:04,842
It's kind of like a castle model where it's like I've got a castle wall.

37
00:04:04,896 --> 00:04:08,700
Everything inside it I just consider to be safe. I trust it,

38
00:04:09,070 --> 00:04:12,826
and I don't need to worry too much as long as I've got the firewall

39
00:04:12,858 --> 00:04:16,926
up and my doors closed to things that are

40
00:04:16,948 --> 00:04:20,506
on the outside that are threats. In a zero trust networking

41
00:04:20,538 --> 00:04:23,986
world, what we assume is that the network itself is

42
00:04:24,008 --> 00:04:25,250
already compromised.

43
00:04:26,790 --> 00:04:29,662
There's already bad actors inside the castle walls,

44
00:04:29,806 --> 00:04:33,326
and we should not assume that anything inside those walls

45
00:04:33,358 --> 00:04:36,946
are safe. And so it's assuming compromise in those resources

46
00:04:36,978 --> 00:04:40,278
already, and it forces you to think about security differently in

47
00:04:40,284 --> 00:04:43,158
terms of what really needs access to what.

48
00:04:43,244 --> 00:04:47,234
And let's not assume that these resources

49
00:04:47,282 --> 00:04:49,862
inside the perimeter are safe. All right?

50
00:04:49,916 --> 00:04:53,978
So in the DevOps world, in the Devsecops world,

51
00:04:54,064 --> 00:04:57,194
why do we care about zero trust networking? Why does this matter?

52
00:04:57,312 --> 00:05:00,826
Why is this important? Why are you even here at this talk? So we have

53
00:05:00,848 --> 00:05:04,966
a problem in DevOps, and a lot of us are not necessarily conscious

54
00:05:04,998 --> 00:05:07,646
of it, or we just kind of close our eyes to it and we're not

55
00:05:07,668 --> 00:05:10,974
really thinking about it. But the problem in the DevOps space is

56
00:05:11,092 --> 00:05:14,798
pretty much every single tool that we use is an absolute gold mine

57
00:05:14,814 --> 00:05:18,050
for an attacker. Let's take our CI CD system.

58
00:05:18,120 --> 00:05:21,982
Well, that is a fantastic way for an intruder

59
00:05:22,046 --> 00:05:25,810
to compromise that. And they can begin to inject code

60
00:05:25,960 --> 00:05:29,826
anywhere throughout the infrastructure, pretty much anywhere where our deployment systems

61
00:05:29,858 --> 00:05:33,206
go. Those are the places that matter in our infrastructure. Imagine if

62
00:05:33,228 --> 00:05:36,834
that was compromised. Now you got somebody that can deploy and execute

63
00:05:36,882 --> 00:05:40,446
their own code anywhere throughout your infrastructure. That's a critical

64
00:05:40,498 --> 00:05:44,106
problem. Let's take monitoring. Well, monitoring is

65
00:05:44,128 --> 00:05:47,706
just a data mining platform for your infrastructure. Anything that's important is

66
00:05:47,728 --> 00:05:50,766
going to be monitored. And so you've got one central stop where all your data

67
00:05:50,788 --> 00:05:54,590
is going to give you a fantastic inventory

68
00:05:54,930 --> 00:05:58,954
with various forensics about your systems and generally IP addresses,

69
00:05:59,002 --> 00:06:02,602
address information. It's fantastic way to gather

70
00:06:02,666 --> 00:06:06,340
everything important about your infrastructure and store all that data in one place.

71
00:06:07,590 --> 00:06:10,930
Let's talk about etls. For those of you who work in data warehousing,

72
00:06:11,430 --> 00:06:15,586
it is a collection of loosely hacked together scripts, typically all

73
00:06:15,608 --> 00:06:19,894
sorts of jobs that mine data from all your important data sources and store that

74
00:06:20,092 --> 00:06:24,102
typically into a data warehouse, which is a one stop shop for all your data.

75
00:06:24,236 --> 00:06:27,942
Again, fantastic target, because this needs all sorts of access

76
00:06:27,996 --> 00:06:31,334
to everything. All of your important data sources are exposed

77
00:06:31,382 --> 00:06:35,178
to your ETL system, to your data warehousing system, and brought together into one place.

78
00:06:35,264 --> 00:06:38,970
If any of those get compromised, somebody's pretty much got your whole infrastructure.

79
00:06:39,790 --> 00:06:43,582
Config management. This one's my favorite because it's your one stop shop,

80
00:06:43,636 --> 00:06:47,214
typically for root access to everything. If you want to take everything down in your

81
00:06:47,252 --> 00:06:51,470
infrastructure or exploit the infrastructure,

82
00:06:52,050 --> 00:06:55,470
plant something, whether it be crypto mining,

83
00:06:55,810 --> 00:06:59,398
a rootkit, you name it, config management is a fantastic targo.

84
00:06:59,434 --> 00:07:03,460
Once they get into the config management system, you're done. They've got everything.

85
00:07:04,310 --> 00:07:07,566
And then the last one is developer access management.

86
00:07:07,758 --> 00:07:10,946
Most people that I talk to are not comfortable with how they've

87
00:07:10,978 --> 00:07:14,614
set up their developer access. Typically, people are having

88
00:07:14,652 --> 00:07:17,906
to grant all or nothing. They got to give prod access to it, and there's

89
00:07:17,938 --> 00:07:21,154
not a great way to specify any kind of granularity and so forth.

90
00:07:21,202 --> 00:07:24,234
So if you ask them, are you comfortable with the way all your developers have

91
00:07:24,272 --> 00:07:27,578
access to your systems, most people will give you kind

92
00:07:27,584 --> 00:07:32,438
of a look and shake their head and so forth, or give they're

93
00:07:32,454 --> 00:07:36,766
not comfortable with it. And you wouldn't turn an auditor loose on your

94
00:07:36,788 --> 00:07:40,554
developer access or even your support access half the time. Typically, you grant

95
00:07:40,602 --> 00:07:43,214
a whole lot of access to the people that you know need it, because when

96
00:07:43,252 --> 00:07:46,366
things broken, you don't want to introduce friction. So what do you do? You open

97
00:07:46,388 --> 00:07:50,174
the gates wide open to a point to where everybody's a little uncomfortable,

98
00:07:50,222 --> 00:07:52,674
but at the end of the day, you got to get your job done.

99
00:07:52,872 --> 00:07:56,498
All right, so how do we deal with security in this world where at the

100
00:07:56,504 --> 00:07:59,606
end of the day, things move fast, we got to get stuff done, we have

101
00:07:59,628 --> 00:08:03,346
to move forward? Well, we've got audits and so forth

102
00:08:03,378 --> 00:08:07,238
to try and protect our systems, and we

103
00:08:07,244 --> 00:08:11,226
got to pass checkboxes for security team. And so what

104
00:08:11,248 --> 00:08:15,126
do we do to get it to survive the audits? Well, typically, most places

105
00:08:15,158 --> 00:08:19,020
I've seen, they apply the audits to the production application.

106
00:08:19,630 --> 00:08:23,466
So in DevOps, we're often in charge of deployments and monitoring,

107
00:08:23,498 --> 00:08:26,240
but usually we're monitoring some sort of production system.

108
00:08:27,010 --> 00:08:30,126
And that production system, typically is

109
00:08:30,148 --> 00:08:33,838
where we apply the scope of our audits. And we don't usually

110
00:08:33,924 --> 00:08:37,298
include the DevOps tools and the monitoring tools and things like

111
00:08:37,304 --> 00:08:40,482
that. Those are peripheral systems. And at some point it's fair,

112
00:08:40,536 --> 00:08:43,540
because you have to apply a logical scope to things.

113
00:08:45,670 --> 00:08:49,638
You can't just include your entire ecosystem into a security

114
00:08:49,724 --> 00:08:53,426
audit. It's too hard. You got to separate non prod and prod.

115
00:08:53,458 --> 00:08:56,582
You got to separate CICD and so forth. You have to create

116
00:08:56,636 --> 00:09:00,598
some sort of scope as a safety net. I've seen a

117
00:09:00,604 --> 00:09:04,250
lot of liberty taken at some places more than others to where

118
00:09:04,320 --> 00:09:08,198
they will make that scope really narrow to pass the audit. Most places

119
00:09:08,214 --> 00:09:11,642
are not doing a really broad scope that includes all of their DevOps tools because

120
00:09:11,696 --> 00:09:15,406
they're support systems. They're not actually the production applications as exposed to

121
00:09:15,428 --> 00:09:19,086
the public. And so we do what we need to do to pass the

122
00:09:19,108 --> 00:09:22,782
audit. But really, I want you to think about as kind of a gut check.

123
00:09:22,836 --> 00:09:25,810
Would you turn a pen tester loose on your monitoring system?

124
00:09:25,880 --> 00:09:29,586
Would you turn a pen tester loose on your CI CD system or your

125
00:09:29,608 --> 00:09:33,634
data warehousing? Would you be comfortable with

126
00:09:33,752 --> 00:09:37,026
introducing somebody that was looking for exploits throughout your system?

127
00:09:37,128 --> 00:09:40,520
And most people would probably say no.

128
00:09:41,610 --> 00:09:45,206
And the same thing with your developer access. Are we comfortable with the way

129
00:09:45,228 --> 00:09:49,142
that we've specified that when we lock down their permissions, most people

130
00:09:49,196 --> 00:09:52,614
are not, because these are things that we use for support. And again,

131
00:09:52,652 --> 00:09:55,818
they're just things that we use to get the job done. But they're not the

132
00:09:55,824 --> 00:09:58,490
things that we want to show to the world we put out there in public.

133
00:09:58,560 --> 00:10:02,502
Because at the end of the day, we need to access systems,

134
00:10:02,646 --> 00:10:05,886
we need to fix things when they're broken, we need to monitor them,

135
00:10:05,908 --> 00:10:09,230
we need to wire systems together. It's a lot of what we do within DevOps.

136
00:10:09,570 --> 00:10:13,214
So what I'm introducing is we start to think about this problem

137
00:10:13,332 --> 00:10:16,686
differently. The way that

138
00:10:16,708 --> 00:10:20,466
we secure our DevOps tools in particular, because every one

139
00:10:20,488 --> 00:10:22,914
of them is a gold mine, we got to figure out a way to step

140
00:10:22,952 --> 00:10:26,934
up our game. Because the truth is, in the industry, this is how

141
00:10:27,052 --> 00:10:30,360
people are getting into systems. This happened with

142
00:10:31,770 --> 00:10:35,126
forgetting the name of it now, but we've seen it where they got in

143
00:10:35,148 --> 00:10:38,722
through the monitoring system to where they injected

144
00:10:38,786 --> 00:10:42,646
exploits through the monitoring system through automatic updates. I've seen

145
00:10:42,748 --> 00:10:46,646
a major breach get in through the CI CD system. Why? Because it allowed

146
00:10:46,678 --> 00:10:50,726
them to inject code in all sorts of people's infrastructure.

147
00:10:50,918 --> 00:10:54,174
It's just a fantastic way to get in. So how do we secure these things

148
00:10:54,212 --> 00:10:58,590
and lock them down and step the game and make them more secure?

149
00:10:59,090 --> 00:11:02,862
The context, which I am talking about, zero trust and making these things

150
00:11:02,916 --> 00:11:06,130
dark, is a tool that I've learned to use called OpenZD.

151
00:11:06,550 --> 00:11:09,586
It is a zero trust networking platform. It's a

152
00:11:09,608 --> 00:11:12,914
way to connect systems together while stepping up security.

153
00:11:13,112 --> 00:11:15,060
The idea behind it is that,

154
00:11:16,170 --> 00:11:20,194
first and foremost, stop leaving ports open, stop leaving

155
00:11:20,242 --> 00:11:24,182
ips open. Make it dark means we basically cut

156
00:11:24,236 --> 00:11:28,066
off all ingress. You start with the firewall rule or

157
00:11:28,108 --> 00:11:32,140
security group policy that says no ingress, nothing gets in.

158
00:11:33,310 --> 00:11:37,206
And some people ask about zero trust. VPC peering,

159
00:11:37,238 --> 00:11:41,158
is that zero trust? No. If you've got vpcs peered

160
00:11:41,174 --> 00:11:44,378
together or peering between your private data center and

161
00:11:44,384 --> 00:11:47,694
a cloud data center, if one of those gets compromised, the other one

162
00:11:47,732 --> 00:11:51,006
gets compromised. We got to step up, we got to lock things down tighter than

163
00:11:51,028 --> 00:11:54,722
this, we can't leave it like this anymore. So the key concept with zero

164
00:11:54,776 --> 00:11:59,090
trust is that you get away from ips and ports entirely.

165
00:11:59,910 --> 00:12:03,346
The only thing that matters in the zero trust world is you've got services

166
00:12:03,448 --> 00:12:06,814
and you've got identities. You've got basically destination

167
00:12:06,862 --> 00:12:10,802
addresses that people need to access. And then you've got some form of identity,

168
00:12:10,866 --> 00:12:14,310
whether it's a cell phone, whether it's a laptop, whether it's a server,

169
00:12:15,450 --> 00:12:19,446
everything's an identity. And the only thing that matters is that certain identities need to

170
00:12:19,468 --> 00:12:23,642
talk to certain services. And so we manage that access through

171
00:12:23,696 --> 00:12:27,398
service policies or at netfoundry we call them applans.

172
00:12:27,574 --> 00:12:31,450
So in a zero trust world like this, with no ingress, how do things actually

173
00:12:31,520 --> 00:12:34,846
talk? So what we've got here is

174
00:12:34,868 --> 00:12:38,394
a diagram. So I want you to imagine that this is a diagram

175
00:12:38,442 --> 00:12:41,742
of simply connecting one data center to another data

176
00:12:41,796 --> 00:12:45,006
center without peering them, without compromising both

177
00:12:45,028 --> 00:12:48,162
of them, if you've got a compromised entity. So the idea is that,

178
00:12:48,216 --> 00:12:52,126
imagine ZD fabric is you've got this fabric mesh,

179
00:12:52,158 --> 00:12:56,114
it's running in a public cloud. And the idea is that everything dials into

180
00:12:56,152 --> 00:12:59,558
this mesh. And initially it may dial in, it's got a

181
00:12:59,564 --> 00:13:03,046
connection to it, a persistent connection, but nothing can talk

182
00:13:03,148 --> 00:13:06,514
as of yet. You still have to create policies that define

183
00:13:06,562 --> 00:13:09,830
what talks to what. Kubernetes has things like this,

184
00:13:09,900 --> 00:13:12,714
but it only has it within the cluster. This is something that you can put

185
00:13:12,752 --> 00:13:16,054
anywhere, across any cloud, across any region,

186
00:13:16,102 --> 00:13:19,354
across any cluster, anywhere that you need it to be.

187
00:13:19,472 --> 00:13:23,002
You can place this type of mesh and define policies, because again,

188
00:13:23,056 --> 00:13:26,766
everything is trust, a service and an identity. You define what needs to talk

189
00:13:26,788 --> 00:13:29,790
to what. And zero trust comes in. So that,

190
00:13:29,860 --> 00:13:32,554
for example, in this image where I've got a compromised entity,

191
00:13:32,682 --> 00:13:35,874
it's not explicitly defined in the policy, therefore it's not

192
00:13:35,912 --> 00:13:39,378
able to access the private resource on the right. So on the

193
00:13:39,384 --> 00:13:42,494
data center on the right, imagine you've got no inbound ports

194
00:13:42,542 --> 00:13:45,970
open at all. There's no ingress at all into the entire

195
00:13:46,040 --> 00:13:49,906
data center. The only thing that can get in are identities that are explicitly

196
00:13:49,938 --> 00:13:53,880
listed in the policy. So the way a service policy works,

197
00:13:54,330 --> 00:13:58,006
ZD is built around a concept of using tags to

198
00:13:58,028 --> 00:14:01,538
tie things together. So what I would do is if I've got a set of

199
00:14:01,564 --> 00:14:05,194
identities that I wanted to talk to my data warehouse, I might tag them

200
00:14:05,232 --> 00:14:09,206
with a data warehouse tag. And then I've got various services related

201
00:14:09,238 --> 00:14:12,586
to the data warehouse. I'm going to tag those with data warehouse. All I'm doing

202
00:14:12,608 --> 00:14:15,950
in creating an applan or a service policy is just saying, okay,

203
00:14:16,020 --> 00:14:19,546
this is my policy. Data warehouse talks to data warehouse, and I'm

204
00:14:19,578 --> 00:14:23,178
done. If you've ever worked with active directory groups

205
00:14:23,194 --> 00:14:26,266
or permissions for users, it's the same kind of thing. You put them in groups

206
00:14:26,298 --> 00:14:28,994
and that determines their permissions. It's the same kind of thing,

207
00:14:29,112 --> 00:14:32,018
except you're doing it at the network access level.

208
00:14:32,184 --> 00:14:34,914
All right, so just how dark can we get with this?

209
00:14:35,112 --> 00:14:38,680
Typically, there's three different models. We call it

210
00:14:39,290 --> 00:14:43,400
the network access, host access, or application access.

211
00:14:44,170 --> 00:14:46,966
And each one of these gets a little bit more secure, gets a little bit

212
00:14:46,988 --> 00:14:50,220
tighter lockdown the farther we go. But let's dig into this.

213
00:14:50,590 --> 00:14:53,820
All right. The first one, I would define it as good.

214
00:14:54,510 --> 00:14:58,058
It's the idea of creating controlled access

215
00:14:58,144 --> 00:15:00,540
between data centers or between,

216
00:15:01,390 --> 00:15:05,422
we'll say you can access from anywhere, but you want to grant access inside

217
00:15:05,476 --> 00:15:08,510
of a private data center. You don't want to open up firewalls.

218
00:15:09,090 --> 00:15:12,046
So the way that this would work is that you'd put a tunneler or an

219
00:15:12,068 --> 00:15:15,418
edge router in a data center. There's no ingress and there's

220
00:15:15,434 --> 00:15:19,618
no peering between the two. But at ZD, that's actually granting access

221
00:15:19,704 --> 00:15:23,346
through that. And so anything that's the

222
00:15:23,368 --> 00:15:26,930
device or the host on the left can talk to specified

223
00:15:27,010 --> 00:15:30,920
services on the right. It's a decent level of access.

224
00:15:31,850 --> 00:15:35,158
It lets you grant access to identities. So at a

225
00:15:35,164 --> 00:15:39,046
previous place that I was at, everything that was important was inside the

226
00:15:39,068 --> 00:15:42,858
private data center. Where it was tricky was when, say we

227
00:15:42,944 --> 00:15:46,854
acquire a new company or we brought in outside contractors,

228
00:15:46,982 --> 00:15:50,890
how do we get them in? Well, typically we'd use something like VPN

229
00:15:51,790 --> 00:15:55,230
was probably the most common method, but these got really difficult to manage,

230
00:15:55,300 --> 00:15:58,190
really clunky very quickly. They weren't very reliable,

231
00:15:58,530 --> 00:16:02,426
and they were very broad in terms of the access they granted.

232
00:16:02,618 --> 00:16:06,578
What ZD offers as a major improvement with this is that everything

233
00:16:06,664 --> 00:16:10,226
is explicit access, so that if you

234
00:16:10,248 --> 00:16:14,194
just need an identity to be able to talk to one specific service inside

235
00:16:14,232 --> 00:16:17,426
of that data center, you can set up your policy to do that. They only

236
00:16:17,448 --> 00:16:20,706
have access to the things that are specifically granted. You're not exposing

237
00:16:20,738 --> 00:16:24,294
your entire data center in this model. So it's a massive step

238
00:16:24,332 --> 00:16:28,054
up from traditional networking or traditional VPN. This is

239
00:16:28,092 --> 00:16:30,170
totally like a VPN on steroids,

240
00:16:31,550 --> 00:16:35,014
but a lot easier to manage as well, because, again, you're not managing ips

241
00:16:35,062 --> 00:16:38,810
and ports, you're just creating simple policies that say these

242
00:16:38,880 --> 00:16:42,446
identities can talk to these services. A better model

243
00:16:42,548 --> 00:16:46,074
we'll call this the host access model. This is where you've

244
00:16:46,122 --> 00:16:49,886
got tunnelers installed on the

245
00:16:49,908 --> 00:16:53,662
hosts or identities themselves. And so this is where

246
00:16:53,716 --> 00:16:57,794
you might have a ZD tunneler running as like a system D

247
00:16:57,832 --> 00:17:00,738
service on a Linux box, or it might be running as an agent on a

248
00:17:00,744 --> 00:17:04,734
Windows machine. And you actually set up your services to terminate

249
00:17:04,782 --> 00:17:09,174
on local host. So the traffic is never going

250
00:17:09,212 --> 00:17:13,266
around unencrypted anywhere. So it terminates on the host, so it gets tunneled

251
00:17:13,298 --> 00:17:16,866
through the mesh, which is completely encrypted. It exits

252
00:17:16,898 --> 00:17:20,278
on local holes. You can use this for SSH access, you can use

253
00:17:20,284 --> 00:17:24,246
this for web access, you name it. If you're running a container,

254
00:17:24,358 --> 00:17:28,214
you'd set this up as a sidecar container. And again, your service is terminating

255
00:17:28,262 --> 00:17:32,334
on a local host address, so it's never going outside of the host itself.

256
00:17:32,452 --> 00:17:36,414
This is a better model because you never have

257
00:17:36,452 --> 00:17:39,918
kind of a period of time to where your traffic can

258
00:17:39,924 --> 00:17:43,502
be intercepted unless something is on the host and the host itself

259
00:17:43,556 --> 00:17:46,978
is already compromised. Well, how do we get around that scenario if we need

260
00:17:46,984 --> 00:17:50,386
to go even further? That's where the best model holes in,

261
00:17:50,488 --> 00:17:53,490
and that is a fully application embedded implementation.

262
00:17:53,990 --> 00:17:57,134
One thing that's cool about ZD, and this is something that's pretty unique to ZD,

263
00:17:57,182 --> 00:18:00,390
is that there's an SDK to where, if you want to

264
00:18:00,460 --> 00:18:04,246
create full end to end encryption from one application to another,

265
00:18:04,348 --> 00:18:07,830
you can actually do that. Each application becomes an identity,

266
00:18:08,570 --> 00:18:12,730
and it can access a service that is essentially inside

267
00:18:12,800 --> 00:18:16,438
of the other application. You never have a point of unencrypted

268
00:18:16,454 --> 00:18:20,506
traffic ever. You never have to open up any ports ever. There's no

269
00:18:20,528 --> 00:18:24,142
ingress anywhere in this model. And essentially everything is dark the whole

270
00:18:24,196 --> 00:18:28,638
time. This is what we at netfoundry and

271
00:18:28,724 --> 00:18:31,662
developers of OpenZD, this is what we consider to be true.

272
00:18:31,796 --> 00:18:35,806
Zero trust, where nothing has access. There's never a

273
00:18:35,828 --> 00:18:39,166
point where you trust the traffic to be floating around in the open. The traffic

274
00:18:39,198 --> 00:18:42,466
is always encrypted from the source all the way to

275
00:18:42,488 --> 00:18:46,180
the destination. And this is the ideal scenario in a zero trust world.

276
00:18:46,630 --> 00:18:49,910
All right, so our internal use cases at Netfoundry,

277
00:18:50,810 --> 00:18:54,962
we were challenged to try to dog food OpenZD

278
00:18:55,026 --> 00:18:58,690
and figure out how to use it internally

279
00:18:58,850 --> 00:19:01,386
and learn from it. And what are the gains, what are the strengths? What are

280
00:19:01,408 --> 00:19:05,674
the weaknesses? And how do we leverage this

281
00:19:05,792 --> 00:19:09,434
and learn from it? And so I

282
00:19:09,472 --> 00:19:13,680
was admittedly a little bit skeptical when tasked with doing this.

283
00:19:14,770 --> 00:19:18,154
Just as a full disclaimer, I'm not a sales guy. I'm not an Openziti

284
00:19:18,202 --> 00:19:20,800
developer, I'm a DevOps guy. And so for me,

285
00:19:21,410 --> 00:19:24,846
I'm constantly trying to keep up with the

286
00:19:24,868 --> 00:19:27,906
rat rates of everything that needs to be done and constantly under deadlines. I need

287
00:19:27,928 --> 00:19:31,074
to get things done, I need to wire systems together, I need to automate stuff,

288
00:19:31,112 --> 00:19:34,322
and I need to move fast. That's the nature of my job.

289
00:19:34,376 --> 00:19:38,086
And so when tasked with things like, okay,

290
00:19:38,268 --> 00:19:41,750
we need to lock things down and tighten up security inside,

291
00:19:41,820 --> 00:19:45,474
I'm groaning because historically, this has always been like a really painful

292
00:19:45,522 --> 00:19:48,578
process for me. So I

293
00:19:48,604 --> 00:19:51,882
went and started looking at my systems, but taking an honest

294
00:19:51,936 --> 00:19:57,226
look in terms of what do we have and how

295
00:19:57,248 --> 00:20:00,858
can we make our systems more secure, and what systems do we need to

296
00:20:00,864 --> 00:20:03,994
make more secure. So I began to go through the lists,

297
00:20:04,042 --> 00:20:07,646
and these are the lists that we kind of chose internally to try

298
00:20:07,668 --> 00:20:11,146
and dog food. We did a data warehouse, we did our CI

299
00:20:11,178 --> 00:20:15,330
CD system, we did our SSH access. With ZD,

300
00:20:15,910 --> 00:20:19,410
we actually moved away from slack and used an open source tool

301
00:20:19,480 --> 00:20:23,486
replacement called Mattermost to where our internal

302
00:20:23,518 --> 00:20:27,170
chat for our company is actually accessible only with ZD.

303
00:20:27,750 --> 00:20:31,714
Grafana was something that we made dark. It's tied to lots of different data sources

304
00:20:31,762 --> 00:20:35,314
that are important. And so because it's a one stop shop for data, we decided

305
00:20:35,362 --> 00:20:39,446
to lock that down and make it dark. And then we've begun

306
00:20:39,478 --> 00:20:42,934
using ZD internally for support access to applications.

307
00:20:42,982 --> 00:20:46,154
We're running ZD in a sidecar so that we can get to

308
00:20:46,192 --> 00:20:50,166
things without opening up additional ports and security groups.

309
00:20:50,198 --> 00:20:52,782
We don't have to make any security group changes. If we need to access something,

310
00:20:52,836 --> 00:20:56,286
we just grant access through ZD instead. All right,

311
00:20:56,308 --> 00:21:00,190
so my reactions to doing this, like I said, I was skeptical.

312
00:21:00,610 --> 00:21:03,966
I'm not a huge kool Aid drinker, even of places that I work most

313
00:21:03,988 --> 00:21:07,006
of the time. Like I said, I'm super opinionated about the tools that I like

314
00:21:07,028 --> 00:21:10,066
and that I don't like. I like tools that allow me to get a lot

315
00:21:10,088 --> 00:21:13,282
of mileage. They allow me to get a lot of things done

316
00:21:13,336 --> 00:21:16,662
quickly, and I can reuse it for lots of different

317
00:21:16,716 --> 00:21:20,374
projects. What I found when I started working

318
00:21:20,412 --> 00:21:24,454
with OpenZD was trust, that it

319
00:21:24,492 --> 00:21:28,466
allowed me to massively step up my security game without introducing

320
00:21:28,498 --> 00:21:32,674
all kinds of friction in previous

321
00:21:32,722 --> 00:21:36,426
places and more traditional networking shops. Typically when

322
00:21:36,448 --> 00:21:39,254
we would lock down things and introduce more access controls,

323
00:21:39,302 --> 00:21:42,800
that inevitably meant breaking things and

324
00:21:43,410 --> 00:21:46,814
making our job a lot harder. And what I found

325
00:21:46,852 --> 00:21:50,446
as we started to shift towards this, was that we

326
00:21:50,468 --> 00:21:53,774
could actually do it very easily and we could

327
00:21:53,812 --> 00:21:57,338
actually pre validate everything ahead of time, because the way ZD works was

328
00:21:57,364 --> 00:22:00,206
that we would set up all the policies and set up all the networking,

329
00:22:00,238 --> 00:22:03,442
and that everything would work prior to us locking it down.

330
00:22:03,496 --> 00:22:06,822
So even though we were moving towards zero

331
00:22:06,876 --> 00:22:10,274
trust in a brownfield environment where we had existing deployments,

332
00:22:10,402 --> 00:22:14,966
it really wasn't difficult to migrate into it because we

333
00:22:14,988 --> 00:22:18,518
were able to enroll everybody. We got all the identities set up, we got all

334
00:22:18,524 --> 00:22:21,834
the policies set up, and we were actually able to verify was the

335
00:22:21,872 --> 00:22:25,514
zero trust networking working, using the traffic as an indicator to where

336
00:22:25,552 --> 00:22:29,034
we could actually see are people migrated and

337
00:22:29,072 --> 00:22:32,266
are they using ZD to access things instead? And we could see based on the

338
00:22:32,288 --> 00:22:36,158
traffic that they were. And so what happened on the

339
00:22:36,164 --> 00:22:39,886
switchover day, which typically I was used to this being like a

340
00:22:39,908 --> 00:22:43,440
really fireworks intensive day where there was lots of broken stuff.

341
00:22:43,890 --> 00:22:46,862
When we switched over our first tool, which was the data warehouse,

342
00:22:46,926 --> 00:22:50,178
to zero trust, it was a complete non event because we

343
00:22:50,184 --> 00:22:53,586
were able to validate everything ahead of time, and we were able to

344
00:22:53,608 --> 00:22:57,122
see, based on the traffic patterns, that everybody was already using the zero

345
00:22:57,176 --> 00:23:00,614
trust model to access it. And we already

346
00:23:00,652 --> 00:23:04,342
knew that it was working because the traffic was going by. And so

347
00:23:04,476 --> 00:23:07,826
when realizing that this was really not a big deal, that's when we moved

348
00:23:07,858 --> 00:23:11,058
on to our CI CD system and Grafana and other such

349
00:23:11,084 --> 00:23:14,842
things, to where now that's trust, how we set up access from day one

350
00:23:14,976 --> 00:23:18,490
to where every new tool that we stand up, every support

351
00:23:18,560 --> 00:23:22,254
system that we stand up, is zero trust from day one. And it really

352
00:23:22,292 --> 00:23:26,254
doesn't make the job any harder, because in terms

353
00:23:26,292 --> 00:23:30,000
of the user's ability to access it, as long as they have

354
00:23:31,410 --> 00:23:33,790
their ZD agent running on their machine,

355
00:23:34,690 --> 00:23:38,580
the way that they access systems is really no different than it was before.

356
00:23:39,430 --> 00:23:43,550
But the systems for anybody who don't have ZD are completely dark

357
00:23:43,710 --> 00:23:46,818
most of the time. You can't even resolve the DNS for the addresses that they

358
00:23:46,824 --> 00:23:50,706
need to access, because with ZD you can use fake

359
00:23:50,738 --> 00:23:54,086
DNS addresses for your intercept, and so you

360
00:23:54,108 --> 00:23:57,430
can have completely phony addresses where people don't even. You don't even know the actual

361
00:23:57,500 --> 00:24:01,450
ips and you don't even know the actual addresses of the services that you're accessing.

362
00:24:01,870 --> 00:24:05,306
The other thing I think that I've appreciated with all this too, is that when

363
00:24:05,328 --> 00:24:07,340
I need to set up access to things,

364
00:24:09,390 --> 00:24:12,986
I minimize the amount of red tape that is needed, because I'm no

365
00:24:13,008 --> 00:24:16,298
longer punching holes in firewall or opening up security groups,

366
00:24:16,474 --> 00:24:19,834
because with ZD, if anything, you can lock things down further. And so it's

367
00:24:19,882 --> 00:24:23,454
really easy to pass an audit using Openziti because you

368
00:24:23,492 --> 00:24:27,394
say, yeah, here's my security audit, my security group

369
00:24:27,432 --> 00:24:30,290
rules and my firewall rules are no ingress,

370
00:24:30,710 --> 00:24:34,318
nothing can get in. So I would feel perfectly comfortable turning

371
00:24:34,334 --> 00:24:37,682
a pen tester loose on my CDI CD system

372
00:24:37,736 --> 00:24:40,518
now because I can look at it and say, yeah, go ahead and try to

373
00:24:40,524 --> 00:24:44,166
attack it. There's no open ports, you can't get in unless you've been issued an

374
00:24:44,188 --> 00:24:48,070
identity and issued trust within the ZD network.

375
00:24:48,730 --> 00:24:52,266
So if you're more interested in learning about OpenZD in terms of

376
00:24:52,288 --> 00:24:56,342
what it can do, this is an open source project. It's OpenZD

377
00:24:56,406 --> 00:24:59,590
GitHub IO. There's also a blog at OpenZD

378
00:24:59,670 --> 00:25:03,110
IO if you're interested in more of a cloud hosted solution.

379
00:25:03,190 --> 00:25:07,050
We've got Cloudhostedzd at nfconsol IO,

380
00:25:07,210 --> 00:25:10,618
and there's a free sign up option, up to ten endpoints

381
00:25:10,634 --> 00:25:13,258
that you can try it out, as well as a getting started wizard and so

382
00:25:13,284 --> 00:25:16,594
forth. But the idea is that get started

383
00:25:16,632 --> 00:25:21,570
with it, try it. And when you realize that you can tie systems together very

384
00:25:21,640 --> 00:25:24,946
quickly without production, allows you to still

385
00:25:24,968 --> 00:25:28,638
be in a world where you're moving fast, you're tying systems together and you're not

386
00:25:28,664 --> 00:25:32,182
creating this classic security problem and you're not opening up your tools to the world.

387
00:25:32,316 --> 00:25:35,746
So I challenge you. As you work in the DevOps

388
00:25:35,778 --> 00:25:39,270
space and the DevOps space, lock down your tools,

389
00:25:39,610 --> 00:25:43,286
treat them as a first class citizen. Stop leaving them open to

390
00:25:43,308 --> 00:25:46,290
the world. The way that people are still getting into systems,

391
00:25:46,370 --> 00:25:49,606
more commonly than anything else, is scan and exploit. When you

392
00:25:49,628 --> 00:25:52,640
leave your ip is open, and when you leave your ports open to the world,

393
00:25:53,010 --> 00:25:56,030
assume somebody's going after them. Even if it's inside of,

394
00:25:56,100 --> 00:25:59,790
even if it's inside the firewall, assume something's inside

395
00:25:59,860 --> 00:26:03,822
already scanning and exploiting. So step up your security game.

396
00:26:03,956 --> 00:26:06,320
And that concludes my talk for today.

397
00:26:07,090 --> 00:26:08,330
Thanks for everybody for joining.

