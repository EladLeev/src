1
00:00:25,650 --> 00:00:29,766
Hi, my name is Ishuah Kariuki and welcome to

2
00:00:29,788 --> 00:00:33,874
my talk in this session. Today we're Golang to cover terminal

3
00:00:33,922 --> 00:00:37,302
emulator basics in Golang. A bit

4
00:00:37,356 --> 00:00:40,962
about myself I am the principal backend

5
00:00:41,026 --> 00:00:44,758
engineer at hover. The mission at hover is to create

6
00:00:44,844 --> 00:00:48,802
an inclusive Internet. This entails

7
00:00:48,866 --> 00:00:53,050
creating technology and services that enable developers

8
00:00:53,130 --> 00:00:56,478
in emerging markets to actually build for the community

9
00:00:56,564 --> 00:01:00,110
around them. I am also a triathlete in

10
00:01:00,180 --> 00:01:04,174
active training. Makes most of my mornings miserable,

11
00:01:04,302 --> 00:01:06,930
but also goal oriented.

12
00:01:07,510 --> 00:01:11,570
And finally, I am an untenable troublemaker.

13
00:01:11,990 --> 00:01:16,098
First thing we're going to deal with is the Linux Tty subsystem.

14
00:01:16,194 --> 00:01:19,526
The Linux tty has a very rich history and

15
00:01:19,548 --> 00:01:22,280
I'm glad for this opportunity to talk about it.

16
00:01:22,810 --> 00:01:27,206
TTY stands for teletype, and the

17
00:01:27,228 --> 00:01:30,886
definition of the word teletype is a printing device

18
00:01:30,998 --> 00:01:34,662
resembling a typewriter that is used to send and receive

19
00:01:34,726 --> 00:01:38,586
telephonic signals. This is the image you get to see when you

20
00:01:38,608 --> 00:01:42,206
google the word teletype. It was mostly used in

21
00:01:42,228 --> 00:01:45,690
the early to mid 20th century and was developed

22
00:01:45,770 --> 00:01:49,534
as an improvement on telegraphs. So how

23
00:01:49,572 --> 00:01:53,162
did this typewriter looking device end up being an essential

24
00:01:53,226 --> 00:01:56,754
part of the Linux operating system? So earlier computers could

25
00:01:56,792 --> 00:01:59,938
only run one program at a time. But in

26
00:01:59,944 --> 00:02:04,094
the 1960s computers were powerful enough to interact with users

27
00:02:04,142 --> 00:02:07,762
in real time. So pragmatic engineers

28
00:02:07,826 --> 00:02:11,670
at the time thought about the situation and instead

29
00:02:11,740 --> 00:02:14,550
of creating new input output machines,

30
00:02:14,970 --> 00:02:18,966
they reused teletypes as input

31
00:02:18,998 --> 00:02:22,922
output machines for computers to enhance the

32
00:02:23,056 --> 00:02:26,954
real time interaction of users with computers. The main

33
00:02:26,992 --> 00:02:29,820
reasons were teletypes already in the market.

34
00:02:30,290 --> 00:02:33,930
People knew how to use them and technically

35
00:02:34,010 --> 00:02:37,982
they fit the bill. You could input by a keyboard and

36
00:02:38,036 --> 00:02:41,518
output by a printing paper. The image you

37
00:02:41,524 --> 00:02:45,774
see on the right is an output

38
00:02:45,822 --> 00:02:49,918
from the game. The Oregon trail. The very first version

39
00:02:50,014 --> 00:02:53,074
I'm pretty sure you've heard of, or you

40
00:02:53,112 --> 00:02:56,418
played the game at least, the Oregon trail.

41
00:02:56,514 --> 00:02:59,922
But the first version of the Oregon Trail

42
00:02:59,986 --> 00:03:03,830
was created in 1971 and it ran on

43
00:03:03,900 --> 00:03:08,358
a mainframe computer and user interaction was via teletype.

44
00:03:08,454 --> 00:03:12,250
This is actual output from the game on a teletype.

45
00:03:12,990 --> 00:03:17,030
So as technology improved, video terminals

46
00:03:17,190 --> 00:03:21,158
replaced hard copy terminals as paper terminals.

47
00:03:21,334 --> 00:03:25,118
And the teletype that you see here, the terminals that

48
00:03:25,124 --> 00:03:28,782
you see here is the VT 100. It's one of the most popular ones

49
00:03:28,836 --> 00:03:32,746
and it's also one of the first terminals to support unseen escape

50
00:03:32,778 --> 00:03:36,354
codes. Focuser control now we get

51
00:03:36,392 --> 00:03:39,982
to see how physical terminals is connected

52
00:03:40,126 --> 00:03:43,262
to computer. From the image.

53
00:03:43,326 --> 00:03:47,094
From diagram you can see that the terminal has a

54
00:03:47,212 --> 00:03:50,806
direct connection to the computer via a

55
00:03:50,828 --> 00:03:54,454
UART module UART stands for

56
00:03:54,572 --> 00:03:58,210
universal asynchronous receiver and

57
00:03:58,380 --> 00:04:02,614
transmitter, and the main purpose is to receive and transmit

58
00:04:02,662 --> 00:04:06,374
serial data. Now, from the diagram above,

59
00:04:06,422 --> 00:04:09,818
you can see now the TTY device consists of

60
00:04:09,904 --> 00:04:13,386
the UART driver, line discipline, and the

61
00:04:13,408 --> 00:04:17,870
TTY driver. Let's dig a bit into this component.

62
00:04:18,450 --> 00:04:21,806
The UART driver manages the transmission of

63
00:04:21,828 --> 00:04:26,030
bytes between the teletype via UART

64
00:04:26,190 --> 00:04:30,162
and line discipline. What it does is transfer

65
00:04:30,296 --> 00:04:34,174
keystrokes from UART to the line discipline.

66
00:04:34,302 --> 00:04:37,702
It also sends back anything that's sent from the line

67
00:04:37,756 --> 00:04:41,586
discipline back to the teletype. So that's

68
00:04:41,618 --> 00:04:45,602
it. That's basically command execution, sends characters

69
00:04:45,666 --> 00:04:49,330
in and characters out. The second part is a

70
00:04:49,340 --> 00:04:53,062
line discipline, and the line discipline maintains

71
00:04:53,126 --> 00:04:57,238
a character buffer. This is anything that's typed

72
00:04:57,334 --> 00:05:01,610
on the teletype is buffered on the line discipline until

73
00:05:01,760 --> 00:05:06,122
the user prints enter and the characters

74
00:05:06,186 --> 00:05:09,386
are sent forward to the TTY driver.

75
00:05:09,578 --> 00:05:13,310
Line discipline also handles special editing events.

76
00:05:13,470 --> 00:05:16,946
Backspace, enter, clear line,

77
00:05:17,128 --> 00:05:20,466
and then final thing, it echoes back,

78
00:05:20,648 --> 00:05:24,066
keystrokes back to the URT driver so that

79
00:05:24,088 --> 00:05:27,714
the user can see what they're typing. Then the final component

80
00:05:27,762 --> 00:05:32,054
is the TTY driver, which sends characters to the foreground process.

81
00:05:32,252 --> 00:05:36,274
Any program that's waiting on the foreground will receive user

82
00:05:36,322 --> 00:05:40,198
inputs. Most of the time you'll find that that program is

83
00:05:40,364 --> 00:05:43,850
either shell or a subprocess of the shell.

84
00:05:44,350 --> 00:05:47,110
This model, the TTY device,

85
00:05:47,190 --> 00:05:50,410
the whole of the TGI device resides in the kernel.

86
00:05:50,930 --> 00:05:55,022
So again, technology improved and

87
00:05:55,156 --> 00:05:59,066
processing power really improved on computers. Also, computers shrank

88
00:05:59,098 --> 00:06:03,102
in size, so there was really no longer a need to have physical terminals

89
00:06:03,166 --> 00:06:07,090
connected to the computer. Instead of having

90
00:06:07,160 --> 00:06:10,574
physical terminals replaced with software terminals,

91
00:06:10,622 --> 00:06:14,766
software emulated terminals. That's where the term terminal emulators

92
00:06:14,798 --> 00:06:18,274
comes from. A point of note is that terminal

93
00:06:18,322 --> 00:06:22,258
emulator basics not be confused with a shell,

94
00:06:22,434 --> 00:06:27,026
and we're coming to that in a bit. Terminal emulators

95
00:06:27,058 --> 00:06:30,070
just work in the same way as their physical counterparts,

96
00:06:30,150 --> 00:06:34,006
with the biggest difference being that there's no uart

97
00:06:34,198 --> 00:06:38,214
connection, there's no physical Linux between terminal emulator

98
00:06:38,262 --> 00:06:41,710
and the line discipline. So again, in this model

99
00:06:41,780 --> 00:06:45,150
as well, the terminal emulators exists in the kernel.

100
00:06:45,570 --> 00:06:49,066
One of the biggest constraints with having the terminal emulators

101
00:06:49,098 --> 00:06:52,698
in the kernel is that it was a rigid design.

102
00:06:52,884 --> 00:06:56,926
Programmers could not build on top terminal emulators basics

103
00:06:57,038 --> 00:06:59,330
since it resides in the kernel.

104
00:07:01,110 --> 00:07:04,786
An idea came about where the terminal emulator should

105
00:07:04,808 --> 00:07:07,962
be moved from the kernel and maintain

106
00:07:08,126 --> 00:07:11,410
the rest of the TtY subsystem still in the kernel.

107
00:07:11,490 --> 00:07:15,346
So line discipline, session management still remains

108
00:07:15,378 --> 00:07:19,298
in the kernel and then move terminal emulator basics user

109
00:07:19,314 --> 00:07:23,238
land and that's where we have pseudo

110
00:07:23,254 --> 00:07:26,070
terminals. That's how we have pseudo terminals.

111
00:07:26,230 --> 00:07:29,290
It's an improvement on the existing design.

112
00:07:29,440 --> 00:07:33,130
So terminal emulation moves into understand and the Tty

113
00:07:33,210 --> 00:07:37,422
subsystem remains in the kernel. This diagram explains how

114
00:07:37,556 --> 00:07:41,022
the pseudo terminal works. Pseudo terminal consists of

115
00:07:41,076 --> 00:07:44,942
two files, the Pty master and the Pty

116
00:07:45,006 --> 00:07:48,814
slave. The Pty master is attached to the terminal emulators

117
00:07:48,942 --> 00:07:52,754
and the Pty slave is attached to the foreground program

118
00:07:52,872 --> 00:07:55,300
or the program that you want to control.

119
00:07:56,010 --> 00:07:59,814
A note about shells. A shell is a program that resides in

120
00:07:59,852 --> 00:08:03,186
user land and manages user computer interactions.

121
00:08:03,298 --> 00:08:06,978
A good example is z shell. Fish bash,

122
00:08:07,154 --> 00:08:09,978
you're all familiar with this. So yeah,

123
00:08:10,064 --> 00:08:13,766
this is the basic history of terminal emulator

124
00:08:13,798 --> 00:08:16,970
basics. Why we have pseudo terminals. The next

125
00:08:17,040 --> 00:08:20,286
part we're going to dig deep into how

126
00:08:20,308 --> 00:08:23,550
to create a terminal with Golan.

127
00:08:25,010 --> 00:08:28,798
Cool. So this is a very simple

128
00:08:28,884 --> 00:08:33,054
program that draws a UI with

129
00:08:33,092 --> 00:08:37,700
awards. Hello, conf Golan 2021.

130
00:08:38,390 --> 00:08:42,180
When you run this program, this is what you get,

131
00:08:43,270 --> 00:08:46,866
just a simple print. This is a user interface,

132
00:08:46,978 --> 00:08:50,598
a very simple user interface that is by the end of

133
00:08:50,604 --> 00:08:53,954
this code lab will be somewhat interactive.

134
00:08:54,002 --> 00:08:57,946
Terminal a basic terminal that's interactive. So the

135
00:08:57,968 --> 00:09:01,258
first thing we're going to do is connect

136
00:09:01,424 --> 00:09:03,850
to the pseudo terminal.

137
00:09:04,830 --> 00:09:07,942
The pseudo terminal we're going to use a package

138
00:09:08,006 --> 00:09:12,278
called Pty. It's an amazing package.

139
00:09:12,374 --> 00:09:16,140
It's very intuitive to use and

140
00:09:17,890 --> 00:09:21,194
we're just going to dig in. There's really no introduction

141
00:09:21,242 --> 00:09:25,460
to a codelab. You get into it

142
00:09:26,230 --> 00:09:28,610
and start with my imports.

143
00:09:33,830 --> 00:09:35,960
So this is what I'm going to use.

144
00:09:38,330 --> 00:09:42,726
Going to create a command execution and

145
00:09:42,828 --> 00:09:45,830
I'm going to use the time package.

146
00:09:47,550 --> 00:09:53,130
And then let's import the Pty

147
00:09:53,630 --> 00:09:57,770
package creek Pty

148
00:09:58,830 --> 00:09:59,770
GitHub.

149
00:10:09,490 --> 00:10:12,480
It's very intuitive. The documentation is amazing.

150
00:10:12,790 --> 00:10:16,580
If you want to work with pseudo terminals you can check it out

151
00:10:16,950 --> 00:10:18,900
if you haven't used it before.

152
00:10:20,310 --> 00:10:23,614
Cool. So first things first, let's create a command

153
00:10:23,662 --> 00:10:26,962
execution with the bash.

154
00:10:27,106 --> 00:10:30,434
The shell create a command execution

155
00:10:30,482 --> 00:10:34,710
of the shell so that we can actually connect

156
00:10:34,780 --> 00:10:38,726
the pseudo terminal slave to the shell and get a reference

157
00:10:38,758 --> 00:10:40,490
to the pseudo terminal master.

158
00:10:43,070 --> 00:10:44,780
Let's start with this.

159
00:10:48,670 --> 00:10:52,782
If I sound a bit out of breath just

160
00:10:52,836 --> 00:10:55,200
from my evening run,

161
00:11:00,050 --> 00:11:03,860
so do not hold it against me.

162
00:11:05,910 --> 00:11:08,980
Bear with me. That's what best time to use.

163
00:11:10,230 --> 00:11:12,610
Ben Bash.

164
00:11:14,230 --> 00:11:17,960
This is a path to the actual

165
00:11:18,330 --> 00:11:23,254
executable bash. And this

166
00:11:23,292 --> 00:11:26,914
line creates a command execution command

167
00:11:26,962 --> 00:11:30,540
struct that

168
00:11:30,990 --> 00:11:34,134
specifies we want to execute the bash,

169
00:11:34,182 --> 00:11:37,466
we want to execute bash. Cool.

170
00:11:37,648 --> 00:11:41,902
And then the next thing we're going to do is

171
00:11:41,956 --> 00:11:45,706
now we're going to assign a Pty slave

172
00:11:45,738 --> 00:11:47,230
to this command execution.

173
00:11:49,250 --> 00:11:50,320
Like so.

174
00:11:52,930 --> 00:11:57,146
This function will assign

175
00:11:57,178 --> 00:12:00,126
the Pty slave to the command execution of the bash.

176
00:12:00,318 --> 00:12:03,826
In simple terms, we're going to attach the bash to the

177
00:12:03,848 --> 00:12:07,990
pty slip and this function returns

178
00:12:08,490 --> 00:12:11,926
reference to the Pty master. That's what

179
00:12:11,948 --> 00:12:15,810
we're going to call P. P is now the Pty master.

180
00:12:15,970 --> 00:12:19,430
And if you can remember, pseudo terminal does contain

181
00:12:19,510 --> 00:12:22,086
two files, the Pty slave and the Pty master.

182
00:12:22,198 --> 00:12:25,594
Pty slave is connected to a

183
00:12:25,632 --> 00:12:29,906
process you want to control, which is now bash. And then Ptymaster

184
00:12:29,958 --> 00:12:33,198
is attached to the Terminal emulator and that's what we're going

185
00:12:33,204 --> 00:12:36,830
to use every single time we want to run a command execution.

186
00:12:41,330 --> 00:12:45,090
Let's just check if this fails.

187
00:12:49,430 --> 00:12:53,010
If that fails, what do we do? We red quit,

188
00:12:53,990 --> 00:13:01,640
we say log the error could

189
00:13:02,010 --> 00:13:08,714
not open Pty and

190
00:13:08,752 --> 00:13:15,450
then we're going to exit infrastructure.

191
00:13:17,230 --> 00:13:21,614
And finally we want to make

192
00:13:21,652 --> 00:13:24,270
sure that when we quit,

193
00:13:24,770 --> 00:13:28,234
when we finish, when we terminate our terminal

194
00:13:28,282 --> 00:13:30,750
emulator, we also terminate,

195
00:13:33,110 --> 00:13:37,374
we as well terminate the bash execution struct

196
00:13:37,422 --> 00:13:40,500
that we created earlier. Cool.

197
00:13:41,190 --> 00:13:44,274
That's that. So we have this, we have P,

198
00:13:44,472 --> 00:13:49,222
which is now P

199
00:13:49,276 --> 00:13:53,714
is tty

200
00:13:53,762 --> 00:13:57,480
master. So we have P.

201
00:13:58,650 --> 00:14:02,598
What do we do with Ptymaster? You send commands

202
00:14:02,614 --> 00:14:06,458
to it. So let's just write a simple

203
00:14:06,544 --> 00:14:07,370
command,

204
00:14:14,290 --> 00:14:16,590
a very simple command,

205
00:14:17,010 --> 00:14:17,760
right,

206
00:14:20,450 --> 00:14:21,200
sorry,

207
00:14:23,110 --> 00:14:24,130
bytes.

208
00:14:30,470 --> 00:14:33,634
So this sends a command lf and

209
00:14:33,672 --> 00:14:36,994
the return courage, return courage is a presenter.

210
00:14:37,042 --> 00:14:41,446
This tells the

211
00:14:41,468 --> 00:14:45,282
line execution that, okay, we are ready to send this command

212
00:14:45,346 --> 00:14:50,746
to the foreground process and

213
00:14:50,848 --> 00:14:51,980
let's do this,

214
00:14:57,230 --> 00:15:03,054
let's wait for a second and

215
00:15:03,092 --> 00:15:06,480
then read from the

216
00:15:07,010 --> 00:15:10,478
Pty master. So we do that,

217
00:15:10,644 --> 00:15:11,360
make,

218
00:15:35,370 --> 00:15:38,726
create a slice of bytes, we read from the

219
00:15:38,748 --> 00:15:42,582
Pty master into this slice of bytes and check

220
00:15:42,636 --> 00:15:43,990
if there's an error.

221
00:15:45,450 --> 00:15:46,200
New,

222
00:15:48,890 --> 00:16:09,762
we do have an mention

223
00:16:09,816 --> 00:16:13,730
that we can't read and yeah,

224
00:16:13,880 --> 00:16:20,726
last thing we want to do is this

225
00:16:20,748 --> 00:16:24,722
is what sets the text that you see on the Ui.

226
00:16:24,866 --> 00:16:28,700
Let's remove this and say

227
00:16:30,190 --> 00:16:34,250
what do we want to print? We want to print a string

228
00:16:35,470 --> 00:16:38,806
of the slice of bytes, convert the slice of bytes

229
00:16:38,838 --> 00:16:42,350
to a string and then print it to the Ui.

230
00:16:43,730 --> 00:16:44,800
That's it.

231
00:16:47,010 --> 00:16:51,098
So what happens when we execute

232
00:16:51,274 --> 00:16:54,866
this program? This is what we

233
00:16:54,888 --> 00:16:58,478
get. You can see the command

234
00:16:58,574 --> 00:17:00,770
ls and the return carries,

235
00:17:02,550 --> 00:17:05,330
which has unfortunately been also printed.

236
00:17:06,150 --> 00:17:10,070
And then that's the only file in that directory.

237
00:17:11,450 --> 00:17:15,926
Boom, that's it. So we

238
00:17:15,948 --> 00:17:19,578
have a connection to the pseudo terminals we can send

239
00:17:19,744 --> 00:17:24,086
commands to pseudo terminals. At this point we haven't

240
00:17:24,198 --> 00:17:27,866
attached the keyboard yet, so that should be our next step

241
00:17:27,968 --> 00:17:30,780
to make it interactive in real time.

242
00:17:31,550 --> 00:17:33,820
So next step,

243
00:17:34,370 --> 00:17:38,446
connecting, reading from the keyboard, the better way

244
00:17:38,468 --> 00:17:39,520
of putting it.

245
00:17:42,050 --> 00:17:44,130
When reading from the keyboard,

246
00:17:44,870 --> 00:17:48,930
we need two callbacks.

247
00:17:50,550 --> 00:17:54,654
One that reads, that listens

248
00:17:54,702 --> 00:17:57,670
on events on special keys,

249
00:17:58,330 --> 00:18:01,894
specifically the enter button. When the

250
00:18:01,932 --> 00:18:05,474
enter button is pressed, we know we're ready to execute the command.

251
00:18:05,522 --> 00:18:08,620
Send the command to the foreground process and see what happens.

252
00:18:10,110 --> 00:18:14,010
The second callback function is going to read runes.

253
00:18:14,590 --> 00:18:18,570
This is any other character, any other key that's pressed on the keyboard

254
00:18:18,910 --> 00:18:23,466
that's not a special key, any other key that's not either, enter shift,

255
00:18:23,658 --> 00:18:27,040
backspace, deletes, arrow keys, all that.

256
00:18:27,490 --> 00:18:31,550
So that's going to also, we're going to listen

257
00:18:31,620 --> 00:18:35,106
for all those key events. Anything that's pressed, we are

258
00:18:35,128 --> 00:18:38,210
going to write it directly to the pseudo terminal master.

259
00:18:39,030 --> 00:18:43,540
Boom. Let's start. Start with special

260
00:18:44,630 --> 00:18:49,890
key. Press callback.

261
00:18:52,710 --> 00:18:56,390
It's going to be called untyped rune.

262
00:18:57,290 --> 00:18:59,080
Sorry, untyped key.

263
00:19:07,610 --> 00:19:11,280
Fine key. The event.

264
00:19:12,530 --> 00:19:16,000
This also relies on the fine.

265
00:19:17,170 --> 00:19:21,018
That's what I'm using to draw the user interface.

266
00:19:21,114 --> 00:19:25,450
Sorry if I did not mention this before. Fine ui toolkit.

267
00:19:25,610 --> 00:19:28,834
It's amazing. If you haven't used it before, you can check it out,

268
00:19:28,872 --> 00:19:32,706
tinker with it. If you're building any front end user interface and you

269
00:19:32,728 --> 00:19:36,200
haven't bumped into this yet, please tty it out.

270
00:19:40,170 --> 00:19:40,920
Sorry,

271
00:19:44,650 --> 00:19:48,220
it's meant to be that. Okay,

272
00:19:48,910 --> 00:19:49,660
here,

273
00:20:17,430 --> 00:20:19,380
what do we do? We write,

274
00:20:21,350 --> 00:20:25,734
we write to the pseudo terminal master and

275
00:20:25,772 --> 00:20:33,670
we say we are ready to executed.

276
00:20:40,970 --> 00:20:46,326
Cool. That's the return carriage tells

277
00:20:46,358 --> 00:20:49,834
the line discipline that we are ready to send this to the

278
00:20:49,872 --> 00:20:53,486
foreground process, toi driver and to the

279
00:20:53,508 --> 00:20:57,360
foreground process. Second, callback function is

280
00:20:58,530 --> 00:21:04,610
character callback.

281
00:21:05,750 --> 00:21:11,762
Going to call this untyped rune and

282
00:21:11,816 --> 00:21:14,500
it's going to do this.

283
00:21:21,290 --> 00:21:25,080
Take that rune and just send it directly to the

284
00:21:25,850 --> 00:21:27,670
pseudo terminals muscle.

285
00:21:40,210 --> 00:21:44,030
We're converting it to a string and send it to the pseudo terminals master

286
00:21:44,450 --> 00:21:49,726
as a string. So we

287
00:21:49,748 --> 00:21:53,630
need to bind these two callback functions

288
00:21:54,690 --> 00:21:57,818
so that anytime a key is pressed,

289
00:21:57,994 --> 00:22:01,294
this callback functions are called so on.

290
00:22:01,332 --> 00:22:05,120
Type key on type key.

291
00:22:22,510 --> 00:22:23,260
Okay,

292
00:22:25,870 --> 00:22:29,574
now we've set callback functions. Anytime you type on the keyboard,

293
00:22:29,622 --> 00:22:32,926
it's going to type anything.

294
00:22:33,028 --> 00:22:36,590
Press enter. That command or

295
00:22:36,660 --> 00:22:39,886
whatever string you've typed is going to be sent to

296
00:22:39,908 --> 00:22:43,714
the pseudo terminals master, to the line discipline and

297
00:22:43,832 --> 00:22:46,500
tty driver into the program process.

298
00:22:47,270 --> 00:22:50,094
Now we also need to see what we've printed.

299
00:22:50,142 --> 00:22:53,486
So let's write a very simple go routine that's

300
00:22:53,518 --> 00:22:59,750
going to refresh the Ui. So Ui.

301
00:23:00,090 --> 00:23:08,374
So this is function and

302
00:23:08,412 --> 00:23:09,960
then sorry,

303
00:23:12,090 --> 00:23:18,614
we're going to sleep for 1

304
00:23:18,652 --> 00:23:21,120
second it,

305
00:23:25,890 --> 00:23:32,622
sleep for 1 second it.

306
00:23:32,676 --> 00:23:35,230
And then make a slice of bytes.

307
00:23:38,930 --> 00:23:42,910
Let's make a slice of two wondered and 56 bytes,

308
00:23:43,490 --> 00:23:50,950
then read from the Ptymaster error

309
00:23:52,730 --> 00:23:58,934
equal and

310
00:23:58,972 --> 00:24:04,646
then we

311
00:24:04,668 --> 00:24:09,998
log that error you

312
00:24:10,044 --> 00:24:16,430
it's

313
00:24:23,250 --> 00:24:29,710
log it's.

314
00:24:30,290 --> 00:24:36,226
And then just update

315
00:24:36,258 --> 00:24:37,110
the Ui.

316
00:24:45,690 --> 00:24:49,046
Convert the slice of bytes to a

317
00:24:49,068 --> 00:24:52,566
string and update the UI. And of

318
00:24:52,588 --> 00:24:58,102
course make sure this is called and

319
00:24:58,156 --> 00:25:03,902
then write it Linux

320
00:25:03,956 --> 00:25:25,878
64 I

321
00:25:25,964 --> 00:25:29,800
have something. Sorry, this is

322
00:25:32,570 --> 00:25:33,880
meant to be.

323
00:25:36,650 --> 00:25:40,246
Anyway, we're not doing this anymore, but ideally

324
00:25:40,358 --> 00:25:41,740
this should be.

325
00:25:59,090 --> 00:26:02,640
And remove this to use this.

326
00:26:03,970 --> 00:26:05,860
We're Golang to use this.

327
00:26:11,190 --> 00:26:14,660
Think we're good now,

328
00:26:16,250 --> 00:26:19,320
are we? Yes, should be good.

329
00:26:20,170 --> 00:26:26,680
So cool.

330
00:26:34,910 --> 00:26:39,018
So when you execute, when you run this program,

331
00:26:39,184 --> 00:26:42,000
you're going to get this.

332
00:26:42,850 --> 00:26:46,334
And this should

333
00:26:46,372 --> 00:26:50,526
be slightly more interactive than what

334
00:26:50,548 --> 00:26:51,600
we had before.

335
00:26:54,710 --> 00:26:58,050
Yes, you can see the output, but it's mangled.

336
00:26:58,470 --> 00:27:01,954
It doesn't make sense because

337
00:27:01,992 --> 00:27:06,002
you are basically waiting. The go routine is sleeping

338
00:27:06,146 --> 00:27:09,334
for a second. Let's go back to this,

339
00:27:09,372 --> 00:27:12,566
probably sleeping for 1 second,

340
00:27:12,748 --> 00:27:16,630
reading everything and then setting the updating the UI

341
00:27:17,950 --> 00:27:20,982
so it's chaotic,

342
00:27:21,126 --> 00:27:24,970
but it sort of works. Now let's try running a program

343
00:27:25,040 --> 00:27:32,540
that will stick to the foreground, let's say ping h.

344
00:27:36,770 --> 00:27:42,106
Yeah, UI is updating, but it's

345
00:27:42,138 --> 00:27:45,154
not making sense. There's no command history.

346
00:27:45,272 --> 00:27:48,494
We can't see a buffer of commands, of outputs.

347
00:27:48,542 --> 00:27:52,786
We're only seeing the last line that was written to

348
00:27:52,808 --> 00:27:56,466
the PTy, to the sudo Terminal master.

349
00:27:56,658 --> 00:28:00,754
And yeah, it's just chaotic. So let's

350
00:28:00,802 --> 00:28:04,194
try and make a more legible user

351
00:28:04,242 --> 00:28:07,320
interface. Let's print better to the screen.

352
00:28:08,350 --> 00:28:09,820
That's the next step.

353
00:28:11,950 --> 00:28:15,450
So in order to get this working

354
00:28:15,520 --> 00:28:18,634
correctly, we're going to do two

355
00:28:18,672 --> 00:28:21,310
things. We're going to have two go routines.

356
00:28:21,890 --> 00:28:25,674
We're going to update this go routine that refreshes

357
00:28:25,722 --> 00:28:29,326
the UI, and we are also going to create a new go

358
00:28:29,348 --> 00:28:34,314
routine that reads from the properly

359
00:28:34,362 --> 00:28:37,502
reads and puts everything in a buffer.

360
00:28:37,566 --> 00:28:41,294
First of all, you're going to have a buffer and the buffer

361
00:28:41,342 --> 00:28:45,060
size. Let's say we're going to have a buffer size of ten

362
00:28:45,370 --> 00:28:48,742
and that

363
00:28:48,796 --> 00:28:52,406
buffer is going to be updated every single time. So when

364
00:28:52,428 --> 00:28:55,526
we get to a buffer size of

365
00:28:55,548 --> 00:28:59,486
ten, if it's at the max size, the first item

366
00:28:59,538 --> 00:29:02,906
at the top, the item at the top is going to be popped and then

367
00:29:02,928 --> 00:29:06,922
we're going to append the new line at the bottom.

368
00:29:07,056 --> 00:29:11,082
So this buffer is going to be updated.

369
00:29:11,226 --> 00:29:14,590
So it's going to look much better, much nicer,

370
00:29:14,930 --> 00:29:16,640
and we're going to have,

371
00:29:21,490 --> 00:29:24,910
it's going to be more orderly semblance of orderliness,

372
00:29:25,830 --> 00:29:29,380
if that makes sense. Awesome.

373
00:29:31,830 --> 00:29:35,702
So let's start with this first

374
00:29:35,756 --> 00:29:39,334
go routine. Let's ignore that and

375
00:29:39,372 --> 00:29:44,150
have this read Rome

376
00:29:45,930 --> 00:29:52,840
Ptymaster function.

377
00:29:56,650 --> 00:29:59,918
Sorry then.

378
00:30:00,044 --> 00:30:00,720
Now.

379
00:30:03,330 --> 00:30:06,160
Cool. What do we do?

380
00:30:06,930 --> 00:30:10,622
Before we create that, let's declare two

381
00:30:10,676 --> 00:30:13,070
variables. The buffer,

382
00:30:14,230 --> 00:30:17,794
which is going to be a

383
00:30:17,832 --> 00:30:20,660
slice of a slice of room,

384
00:30:21,350 --> 00:30:24,642
of slices of runes. Let me just

385
00:30:24,696 --> 00:30:29,778
explain this. So it's

386
00:30:29,794 --> 00:30:33,954
a slice of a slice of runes. Each slice of runes represents

387
00:30:34,082 --> 00:30:37,478
a line in

388
00:30:37,484 --> 00:30:41,180
the terminal output. So every time there's a new

389
00:30:41,870 --> 00:30:45,174
line character, we're going to move to a new line and then happens

390
00:30:45,222 --> 00:30:48,060
all the new rooms that we read to that new line.

391
00:30:49,150 --> 00:30:52,830
Then let's have a better reader.

392
00:30:53,730 --> 00:30:58,190
Let's have a more orderly reader.

393
00:30:58,610 --> 00:31:03,730
We're going to use buffyo

394
00:31:06,150 --> 00:31:08,450
new reader.

395
00:31:12,950 --> 00:31:15,910
And this is, we are reading from the Pty master.

396
00:31:18,890 --> 00:31:22,262
Let me also take the time to update my

397
00:31:22,396 --> 00:31:27,480
imports and

398
00:31:30,510 --> 00:31:36,300
just make sure I have all this

399
00:31:36,830 --> 00:31:40,300
looks good. Cool.

400
00:31:41,570 --> 00:31:45,360
Let's go back to it. So once again,

401
00:31:47,410 --> 00:31:50,846
this is the buffer. This is what we're going to

402
00:31:50,868 --> 00:31:55,314
use to maintain a history of lines of

403
00:31:55,432 --> 00:31:59,294
output on our user interface, on our terminal.

404
00:31:59,342 --> 00:32:02,770
This is going to hold the history of command outputs

405
00:32:03,750 --> 00:32:07,382
and the reader is a much better

406
00:32:07,436 --> 00:32:10,850
reader. We're going to read runes now from the Pty

407
00:32:10,930 --> 00:32:14,150
master. Okay.

408
00:32:14,300 --> 00:32:17,686
So first thing let's happens a

409
00:32:17,708 --> 00:32:23,894
line to our

410
00:32:23,932 --> 00:32:24,710
buffer.

411
00:32:30,450 --> 00:32:33,550
Buffer is initialized. It's empty.

412
00:32:34,210 --> 00:32:37,280
This just adds one line,

413
00:32:38,690 --> 00:32:41,950
an pty line as well. It's just empty.

414
00:32:42,470 --> 00:32:47,778
So this

415
00:32:47,784 --> 00:32:51,266
is a loop that does a lot of the

416
00:32:51,288 --> 00:32:57,720
heavy lifting. All of the heavy lifting actually read

417
00:33:01,610 --> 00:33:04,934
rune. This just

418
00:33:04,972 --> 00:33:08,694
reads a rune from the

419
00:33:08,732 --> 00:33:10,870
Pty. Reads a rune.

420
00:33:11,530 --> 00:33:12,280
If,

421
00:33:20,050 --> 00:33:25,454
because you have an error and if

422
00:33:25,492 --> 00:33:29,534
that error is

423
00:33:29,652 --> 00:33:31,070
ten file,

424
00:33:33,590 --> 00:33:36,338
then we stop,

425
00:33:36,504 --> 00:33:37,700
we just return.

426
00:33:39,350 --> 00:33:41,810
Otherwise we exit.

427
00:33:46,490 --> 00:33:49,746
Now, if it's an end of file error,

428
00:33:49,778 --> 00:33:55,106
we return and then regardless,

429
00:33:55,218 --> 00:33:57,910
whichever error we receive, we're going to exit.

430
00:34:00,190 --> 00:34:03,994
Cool. Then the next

431
00:34:04,032 --> 00:34:09,114
step is to append the

432
00:34:09,152 --> 00:34:12,366
line, the rune that we just read to

433
00:34:12,388 --> 00:34:16,080
the current active line and then

434
00:34:17,730 --> 00:34:21,742
updates the buffer with this

435
00:34:21,876 --> 00:34:25,134
new line updates the buffer

436
00:34:25,182 --> 00:34:30,146
index. We know this is the active buffer index because it's

437
00:34:30,168 --> 00:34:32,130
the length of the buffer.

438
00:34:33,910 --> 00:34:38,354
It's the last available element

439
00:34:38,402 --> 00:34:41,442
in the buffer. So, for instance,

440
00:34:41,506 --> 00:34:44,600
if this is a brand new buffer and this is the first line,

441
00:34:45,450 --> 00:34:50,060
we're going to update that first line to this

442
00:34:50,670 --> 00:34:56,362
line that we've just appended the room thread and

443
00:34:56,416 --> 00:35:00,706
then. Okay, I'm using spacefam.

444
00:35:00,758 --> 00:35:04,640
Spacefam is amazing. It might make you lazy, but it's awesome.

445
00:35:08,530 --> 00:35:14,206
We just checking if the

446
00:35:14,228 --> 00:35:18,114
rune that we just read. Check if the rune that

447
00:35:18,152 --> 00:35:21,378
you just read is a new line character. If it is,

448
00:35:21,544 --> 00:35:25,466
then we move to a new line on the buffer.

449
00:35:25,598 --> 00:35:28,694
So first we check if

450
00:35:28,812 --> 00:35:32,662
the length of the buffer is

451
00:35:32,716 --> 00:35:36,454
greater than, let's say our maximum size is

452
00:35:36,492 --> 00:35:41,260
ten. If it's greater than ten, then we pop

453
00:35:41,710 --> 00:35:44,730
the last item in the buffer.

454
00:35:45,550 --> 00:35:49,530
The first line that we appended to the buffer is popped.

455
00:35:50,850 --> 00:35:54,414
That is if you've got into the maximum size of the buffer. Then you

456
00:35:54,452 --> 00:35:58,510
pop that first item. And then to that we

457
00:35:58,580 --> 00:36:15,720
append a new line that

458
00:36:16,810 --> 00:36:20,418
we just created a new line. And then we append

459
00:36:20,514 --> 00:36:22,230
that new line to the buffer.

460
00:36:23,130 --> 00:36:26,760
Cool. That's it

461
00:36:27,550 --> 00:36:31,290
then. The next part is

462
00:36:31,360 --> 00:36:36,426
now updating this go

463
00:36:36,448 --> 00:36:40,254
routine that renders to the screen. Let's reduce this

464
00:36:40,292 --> 00:36:43,870
time to 100 milliseconds

465
00:36:50,450 --> 00:36:54,190
and then let's

466
00:37:00,130 --> 00:37:04,020
clear everything, blow everything up,

467
00:37:05,450 --> 00:37:08,646
and then we're not going to use this line.

468
00:37:08,748 --> 00:37:12,422
Sorry, I am breaking so many

469
00:37:12,476 --> 00:37:16,390
vim rules right now. If you're a vim user, bear with

470
00:37:16,460 --> 00:37:19,580
me. Just bear with me.

471
00:37:21,790 --> 00:37:23,660
So instead of reading from.

472
00:37:27,390 --> 00:37:30,954
Instead of reading from pseudo terminal

473
00:37:31,002 --> 00:37:34,606
master, we created a go routine to do

474
00:37:34,628 --> 00:37:38,046
that above. So what we are going to do now is read from the

475
00:37:38,068 --> 00:37:41,322
buffer, our existing buffer.

476
00:37:41,386 --> 00:37:45,810
So let's say string

477
00:37:47,270 --> 00:37:50,020
explaining this in 1 second.

478
00:37:54,070 --> 00:37:58,370
Sorry, line range,

479
00:37:59,770 --> 00:38:02,790
we're workings through all the elements in the buffer.

480
00:38:03,450 --> 00:38:07,094
All the lines in the buffer, the slice of

481
00:38:07,132 --> 00:38:11,066
runes in the buffer, all the slices of workings in the buffer and

482
00:38:11,088 --> 00:38:15,354
then lines is

483
00:38:15,392 --> 00:38:19,530
going to be. We are just creating one long string

484
00:38:20,930 --> 00:38:26,814
from all the elements in the buffer and

485
00:38:26,852 --> 00:38:32,400
then setting this.

486
00:38:36,790 --> 00:38:40,020
Sorry. And then set

487
00:38:41,510 --> 00:38:47,394
that as we

488
00:38:47,512 --> 00:38:51,074
look to the buffer, append all the lines into one long string

489
00:38:51,122 --> 00:38:54,918
and then write that to the user interface. And that's it.

490
00:38:55,004 --> 00:38:57,766
Those are two go routines that we need.

491
00:38:57,868 --> 00:39:00,870
First is create a buffer.

492
00:39:02,170 --> 00:39:05,994
Read drones from the pseudo terminal master while

493
00:39:06,032 --> 00:39:09,878
we happens it to the append all these drones

494
00:39:09,894 --> 00:39:13,898
to the buffer, to a line and then all these lines to the buffer.

495
00:39:13,994 --> 00:39:17,562
And then second go routine reads everything from this buffer

496
00:39:17,626 --> 00:39:20,080
and then prints everything to the screen.

497
00:39:20,610 --> 00:39:24,910
It makes the

498
00:39:24,980 --> 00:39:28,366
interface a lot nicer than what we had before the chaos that

499
00:39:28,388 --> 00:39:32,014
we had before. So when you run this, this is what

500
00:39:32,052 --> 00:39:36,040
you get. And let's say

501
00:39:37,450 --> 00:39:41,126
type a command. There we

502
00:39:41,148 --> 00:39:44,706
have it. The user interface

503
00:39:44,738 --> 00:39:50,074
is a bit glitty because the refresh rate might

504
00:39:50,112 --> 00:39:53,654
be a little slower than the way we are reading from the pseudo terminal

505
00:39:53,702 --> 00:39:56,710
mass, the way we are reading from the buffer,

506
00:39:56,790 --> 00:39:59,974
and it's a bit

507
00:40:00,032 --> 00:40:02,960
glitchy. So let's say. Let's type something else.

508
00:40:04,370 --> 00:40:08,190
A new command. New command.

509
00:40:10,690 --> 00:40:14,430
Let's say cow. Say moon.

510
00:40:16,610 --> 00:40:19,794
There we have it. Let's do what you did

511
00:40:19,832 --> 00:40:23,554
before. Run a program that will stay

512
00:40:23,592 --> 00:40:24,770
in the foreground.

513
00:40:26,570 --> 00:40:30,258
Boom, boom, boom. And that's

514
00:40:30,274 --> 00:40:33,926
it. The user interface is refreshing. We can

515
00:40:33,948 --> 00:40:37,414
type commands from the keyboard. They're being executed as we

516
00:40:37,452 --> 00:40:40,730
expect. Foreground programs are remaining in the foreground.

517
00:40:41,710 --> 00:40:45,434
And this is a basic terminal. This is a

518
00:40:45,472 --> 00:40:48,906
very rudimental terminal. Of course,

519
00:40:49,008 --> 00:40:53,306
elements that are missing. We're not interpreting

520
00:40:53,498 --> 00:40:58,858
ansi escape codes. We're not interpreting

521
00:40:59,034 --> 00:41:04,542
a lot of special key presses like tab backspace,

522
00:41:04,606 --> 00:41:06,290
delete the arrow keys.

523
00:41:09,190 --> 00:41:13,618
We're not interpreting signal interrupts. Control C, control Q, control Z.

524
00:41:13,784 --> 00:41:16,742
There's a lot more to build on top of this,

525
00:41:16,796 --> 00:41:20,102
but this is the basics. This is how you can

526
00:41:20,156 --> 00:41:23,830
start off with a terminal emulator in go.

527
00:41:23,980 --> 00:41:27,270
Yes, and that

528
00:41:27,340 --> 00:41:30,982
has been my time. Thank you so much

529
00:41:31,036 --> 00:41:33,974
for having me. It was a joy having this talk.

530
00:41:34,172 --> 00:41:37,314
My handle is at issuer.

531
00:41:37,362 --> 00:41:40,846
Understand on Twitter. Reach out if you can. If you have any

532
00:41:40,868 --> 00:41:44,446
questions or any comments about this talk, best way

533
00:41:44,468 --> 00:41:48,140
to reach out to me is via Twitter. Thank you so much.

