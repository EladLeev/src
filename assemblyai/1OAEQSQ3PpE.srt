1
00:01:28,450 --> 00:01:32,130
Hi, I'm Nick Bergam, solutions engineer at Teleport.

2
00:01:32,290 --> 00:01:35,160
Today my talk is going to be on zero trust,

3
00:01:35,530 --> 00:01:39,962
particularly zero trust accessing and why we should consider implementation.

4
00:01:40,066 --> 00:01:43,802
You we'll also be taking a look at how traditional

5
00:01:43,866 --> 00:01:47,566
accessing solutions stack up against this framework. And at the

6
00:01:47,588 --> 00:01:50,942
end, I'll give some recommendations for implementation of zero

7
00:01:50,996 --> 00:01:53,806
trust access in your own infrastructure.

8
00:01:53,998 --> 00:01:57,060
So, intros aside, let's get started.

9
00:01:59,590 --> 00:02:03,074
If you've ever worked in information security or has some

10
00:02:03,112 --> 00:02:06,594
colleagues in the field, you'll understand pretty intimately that

11
00:02:06,712 --> 00:02:10,802
the field is constantly evolving in order to keep up with technology and modern

12
00:02:10,866 --> 00:02:14,610
threats. With the introduction of cloud native technologies,

13
00:02:14,690 --> 00:02:18,426
a new frontier is opening up before us, and the access threats to

14
00:02:18,448 --> 00:02:21,914
this environment are very real and very much a challenge for

15
00:02:21,952 --> 00:02:25,382
professionals. This challenge seems daunting.

16
00:02:25,446 --> 00:02:28,726
You're not alone. The United States Army's

17
00:02:28,758 --> 00:02:32,442
CIO Raj Eir attributed the inconsistent

18
00:02:32,506 --> 00:02:36,400
application of configurations and architecture for cloud security

19
00:02:36,930 --> 00:02:41,006
has one of the biggest concerns during an interview he gave back

20
00:02:41,028 --> 00:02:45,342
in October, this is why government organizations

21
00:02:45,406 --> 00:02:49,518
such as NASA, NSA, and DoD

22
00:02:49,694 --> 00:02:53,250
are making this transition to zero trust frameworks a real priority.

23
00:02:53,750 --> 00:02:57,094
So to paint a clear picture of what

24
00:02:57,132 --> 00:03:00,502
zero trust is, why we need to actually

25
00:03:00,636 --> 00:03:04,022
implement it, it's more important to see

26
00:03:04,076 --> 00:03:07,160
first where we came from, and that is perimeter security.

27
00:03:07,950 --> 00:03:11,766
For the past 30 years or so, this model has dominated

28
00:03:11,878 --> 00:03:15,194
security architecture design. Local area

29
00:03:15,232 --> 00:03:18,694
networks and wide area networks were created using partial

30
00:03:18,742 --> 00:03:21,886
trust philosophy or us versus them,

31
00:03:22,068 --> 00:03:25,646
and like investing heavily in strong walls and

32
00:03:25,668 --> 00:03:28,270
other fortifications to keep out intruders,

33
00:03:29,570 --> 00:03:33,118
the idea behind this was to create a moat that insulates

34
00:03:33,214 --> 00:03:37,650
your interior network from the dangers beyond your defenses.

35
00:03:38,790 --> 00:03:42,674
Vpns were forged during this era and were

36
00:03:42,712 --> 00:03:45,982
first developed by Microsoft back in the late 1990s

37
00:03:46,056 --> 00:03:49,734
using point to point tunneling protocols. While first

38
00:03:49,772 --> 00:03:53,958
used for tunneling information between one trusted network to another,

39
00:03:54,124 --> 00:03:58,310
the application and use of this technology has become much more broad in scope

40
00:03:58,390 --> 00:04:01,210
and has been really stretched by security organizations.

41
00:04:01,950 --> 00:04:05,498
This is due in part to the increased remote working

42
00:04:05,584 --> 00:04:09,770
environments as well as the rise of cloud infrastructure.

43
00:04:10,770 --> 00:04:14,810
But this perimeter security model and the technologies associated,

44
00:04:14,890 --> 00:04:18,394
such as VPN, pose a significant challenge

45
00:04:18,442 --> 00:04:22,030
for remote and cloud computing. For instance,

46
00:04:22,450 --> 00:04:25,802
how do we know that the person trying to gain access

47
00:04:25,876 --> 00:04:30,018
through our walls or defenses are who they say they are?

48
00:04:30,184 --> 00:04:34,226
And how do we know that once they make it past our castle walls or

49
00:04:34,248 --> 00:04:37,990
we admit them in, they're not going to run amok in our infrastructure?

50
00:04:38,570 --> 00:04:41,830
Well, that's precisely the question that Forrester Research

51
00:04:41,900 --> 00:04:45,574
group out of Cambridge, Massachusetts challenged when they submitted the

52
00:04:45,612 --> 00:04:49,834
zero trust security model to the public domain this

53
00:04:49,872 --> 00:04:54,102
framework was outlined in response to the NIST's request

54
00:04:54,166 --> 00:04:57,958
for feedback on a document called developing a framework

55
00:04:58,054 --> 00:05:01,390
to improve critical infrastructure cybersecurity.

56
00:05:01,890 --> 00:05:05,854
What Forrester said in this research paper is look,

57
00:05:05,972 --> 00:05:09,934
our whole approach to security is a misconception and

58
00:05:09,972 --> 00:05:14,178
our current trust models are broken. We trust first everything

59
00:05:14,264 --> 00:05:17,682
that is already on our network, and we need to be looking at

60
00:05:17,736 --> 00:05:21,566
security, assuming that the bears and other dangerous animals

61
00:05:21,678 --> 00:05:25,490
are already beyond our castle defenses and

62
00:05:25,640 --> 00:05:28,886
running around in our infrastructure. They united in

63
00:05:28,908 --> 00:05:32,934
their report that more than half the breaches they surveyed could,

64
00:05:32,972 --> 00:05:36,694
at least in part, be attributed to internal actors in

65
00:05:36,732 --> 00:05:40,874
the form of either theft or loss of corporate assets or

66
00:05:40,912 --> 00:05:44,282
the misuse of information by insiders and business

67
00:05:44,336 --> 00:05:47,210
partners, either maliciously or inadvertently.

68
00:05:48,270 --> 00:05:52,174
Here, a trust to verify approach does not

69
00:05:52,212 --> 00:05:55,706
compensate for these types of intrusions because the threat

70
00:05:55,738 --> 00:05:59,790
would come from what is already considered to be a trusted source.

71
00:06:00,290 --> 00:06:03,954
So the focus of the zero trust model is

72
00:06:03,992 --> 00:06:07,474
on strict identity verification for each person,

73
00:06:07,672 --> 00:06:11,586
bot, service or device trying to access

74
00:06:11,688 --> 00:06:15,358
resources on the private network, regardless of

75
00:06:15,384 --> 00:06:19,158
where they're sitting, either inside or outside of those defenses on

76
00:06:19,164 --> 00:06:22,882
your perimeter. By imposing these strict authentication

77
00:06:22,946 --> 00:06:26,454
requirements, we are able to better enforce the

78
00:06:26,492 --> 00:06:30,780
principle of least privilege. Another comes pillar of zero trust.

79
00:06:31,630 --> 00:06:35,482
This framework also calls for the inspection and logging of

80
00:06:35,536 --> 00:06:39,890
all network traffic. Each of these fundamental requirements

81
00:06:39,990 --> 00:06:43,646
must be applied to every level of the OSI model as well

82
00:06:43,748 --> 00:06:47,054
to limit lateral movement across your infrastructure as

83
00:06:47,092 --> 00:06:50,958
much has possible. So legacy access

84
00:06:51,044 --> 00:06:55,154
technologies such as traditional vpns were

85
00:06:55,192 --> 00:06:58,754
never designed, or they're definitely not equipped to

86
00:06:58,792 --> 00:07:02,894
take on these responsibilities. While encrypted

87
00:07:02,942 --> 00:07:06,246
tunnels and access through encrypted tunnels used

88
00:07:06,268 --> 00:07:10,120
to be synonymous with security, this is no longer the case.

89
00:07:11,450 --> 00:07:15,622
So the first challenge that zerotrust takes on is

90
00:07:15,676 --> 00:07:19,594
this over reliance on the security perimeter and

91
00:07:19,632 --> 00:07:22,650
the technologies associated, such as vpns.

92
00:07:23,630 --> 00:07:28,140
Vpns were never designed, first off, for continuous use.

93
00:07:29,070 --> 00:07:32,890
With the massive shift happening to a remote or hybrid workforce,

94
00:07:32,970 --> 00:07:37,118
existing VPN structures were forced to support

95
00:07:37,284 --> 00:07:40,814
a continuous workload that it wasn't intended for, and this

96
00:07:40,852 --> 00:07:44,686
creates an environment where the VPN servers are subject to excessive

97
00:07:44,718 --> 00:07:47,822
loads that often negatively impact performance

98
00:07:47,886 --> 00:07:51,794
and user experience. Today, we've all

99
00:07:51,832 --> 00:07:55,254
come to expect high levels of availability and

100
00:07:55,292 --> 00:07:59,314
quality, especially when it comes to interruptions

101
00:07:59,362 --> 00:08:01,030
that can kill efficiency.

102
00:08:01,850 --> 00:08:05,794
Inconsistency or latency at peak hours can be especially frustrating

103
00:08:05,842 --> 00:08:10,278
as a result, and it makes little sense to direct all your network traffic

104
00:08:10,374 --> 00:08:14,182
onto your corporate infrastructure via VPN,

105
00:08:14,326 --> 00:08:17,500
only to transfer it from there onto the cloud.

106
00:08:17,950 --> 00:08:22,320
Further, VPN's most glaring fault is

107
00:08:23,250 --> 00:08:27,870
their authentication and authorization and audit are nonexistent.

108
00:08:28,530 --> 00:08:31,790
When coupled with other security tools, you do have

109
00:08:31,860 --> 00:08:34,734
these requirements of zero trust fulfilled,

110
00:08:34,862 --> 00:08:38,882
but you end up spending more resources on more

111
00:08:38,936 --> 00:08:41,742
software, adding more overhead,

112
00:08:41,886 --> 00:08:46,150
and ultimately adding more to your configuration burden.

113
00:08:46,970 --> 00:08:50,566
Finally, the criminal organizations that are

114
00:08:50,588 --> 00:08:54,002
targeting remote workers are doing so more frequently,

115
00:08:54,146 --> 00:08:58,154
and new security challenges present themselves that

116
00:08:58,272 --> 00:09:01,610
traditional work accessing solutions weren't designed to solve.

117
00:09:02,190 --> 00:09:06,406
The common vulnerabilities and exposure system lists

118
00:09:06,438 --> 00:09:09,366
all the known vulnerabilities and exposures,

119
00:09:09,558 --> 00:09:12,794
obviously, but at the time of this recording,

120
00:09:12,842 --> 00:09:17,150
there are over 560 that could be attributed to VPN

121
00:09:17,650 --> 00:09:20,240
vulnerabilities in the technology itself.

122
00:09:21,330 --> 00:09:25,042
VPNs are totally blind also to content level

123
00:09:25,096 --> 00:09:28,322
attacks, so it doesn't know if it's being

124
00:09:28,376 --> 00:09:31,694
used to upload ransomware into a corporate

125
00:09:31,742 --> 00:09:35,640
environment or a cloud infrastructure. It also doesn't know

126
00:09:36,170 --> 00:09:40,470
if it's being used to siphon information out of these resources.

127
00:09:41,930 --> 00:09:46,178
So a better approach is to have strong authentication,

128
00:09:46,274 --> 00:09:50,570
authorization, and audit within your network defenses.

129
00:09:51,630 --> 00:09:55,290
Continuous authentication is perhaps the most important piece of this

130
00:09:55,360 --> 00:09:58,726
zero trust puzzle, and it's no secret

131
00:09:58,758 --> 00:10:02,094
by now that a single sign on is critical to

132
00:10:02,132 --> 00:10:06,222
today's cloud infrastructure. But also having a strong

133
00:10:06,276 --> 00:10:09,934
IDP and MFA is imperative to ensuring that you

134
00:10:09,972 --> 00:10:13,422
do have identity controls in place when authenticating

135
00:10:13,486 --> 00:10:17,074
access. This is arguably the most

136
00:10:17,112 --> 00:10:20,754
important piece of zero trust because authorization and

137
00:10:20,792 --> 00:10:25,278
audit are reliant on this control being solved and

138
00:10:25,464 --> 00:10:29,000
constantly applied at the lowest level of the OSI model.

139
00:10:29,530 --> 00:10:33,030
Principle of least privilege is at the heart of authorization,

140
00:10:33,770 --> 00:10:37,458
and being able to further divide access

141
00:10:37,564 --> 00:10:41,430
by roles or attributes is needed in today's

142
00:10:41,510 --> 00:10:44,410
cloud native environment. For obvious reasons,

143
00:10:45,310 --> 00:10:48,662
the practice of provisioning access by roles

144
00:10:48,726 --> 00:10:51,694
is widely implemented in some form already,

145
00:10:51,892 --> 00:10:56,590
and it's important to prevent users from amassing too broader privileges.

146
00:10:58,690 --> 00:11:01,342
Now I love me some ancient history,

147
00:11:01,476 --> 00:11:05,278
so one of my favorite stories is that of Cincinnati's

148
00:11:05,294 --> 00:11:09,406
who, as you might have guessed, is the namesake of Cincinnati,

149
00:11:09,438 --> 00:11:13,762
Ohio, among other things. So the story comes that

150
00:11:13,896 --> 00:11:16,514
when the Roman Empire was being threatened,

151
00:11:16,562 --> 00:11:20,434
Cincinnatius was approached by the Senate and granted

152
00:11:20,482 --> 00:11:23,794
powers of a dictator in order to guide

153
00:11:23,842 --> 00:11:27,894
the empire through the crisis. Once he successfully did

154
00:11:27,932 --> 00:11:31,254
so, he ceded those powers back to the Senate

155
00:11:31,302 --> 00:11:33,980
and returned to the farm where he came from.

156
00:11:34,670 --> 00:11:38,538
So just in time access is the fundamental security

157
00:11:38,624 --> 00:11:42,602
practice where the privilege granted to access applications

158
00:11:42,666 --> 00:11:46,494
or systems is limited to a predetermined period of

159
00:11:46,532 --> 00:11:49,982
time, and also on a per need

160
00:11:50,036 --> 00:11:53,426
basis. This helps to minimize the

161
00:11:53,448 --> 00:11:57,374
risk of scanning privileges that attackers or malicious insiders

162
00:11:57,422 --> 00:12:00,990
can readily exploit. Zero trust relies

163
00:12:01,070 --> 00:12:04,750
heavily on the ability to see what's happening within your environments

164
00:12:04,830 --> 00:12:08,742
at all times so alerting mechanisms such as Sim

165
00:12:08,796 --> 00:12:12,902
tools directly enable this has long as there are

166
00:12:13,036 --> 00:12:16,614
strong identities that cloud be used to

167
00:12:16,652 --> 00:12:20,986
attribute entities to each action. For example,

168
00:12:21,168 --> 00:12:24,614
knowing who sshed into a server as the root user

169
00:12:24,662 --> 00:12:28,442
when executing a command, or knowing who

170
00:12:28,496 --> 00:12:32,334
deleted or altered a table within a database has the

171
00:12:32,372 --> 00:12:36,526
admin user provide that transparency needed

172
00:12:36,628 --> 00:12:40,078
for a healthy cloud infrastructure. The next

173
00:12:40,164 --> 00:12:44,654
challenge that zero trust takes on is that of shared

174
00:12:44,702 --> 00:12:48,174
secrets, primarily secret

175
00:12:48,222 --> 00:12:51,906
keys and passwords. So one

176
00:12:51,928 --> 00:12:55,602
of the keys to securing your infrastructure is well eliminating

177
00:12:55,666 --> 00:12:59,270
keys. Shared secrets have become

178
00:12:59,340 --> 00:13:02,934
the natural progression to cope with requirements for

179
00:13:02,972 --> 00:13:06,790
complicated passwords, tokens and secret keys.

180
00:13:08,190 --> 00:13:11,494
Besides the obvious threat of brute force attacks,

181
00:13:11,622 --> 00:13:14,854
hackers can intercept and steal passwords

182
00:13:14,982 --> 00:13:18,378
well become any breach is detected. If a

183
00:13:18,384 --> 00:13:21,934
malicious actor previously exploited a vulnerability to

184
00:13:21,972 --> 00:13:25,646
collect legitimate credentials, those credentials could still

185
00:13:25,668 --> 00:13:29,230
be valid months, possibly after patching.

186
00:13:30,770 --> 00:13:34,514
Many organizations also keep a repository of some

187
00:13:34,552 --> 00:13:38,434
sort, which are landmines if discovered by the wrong

188
00:13:38,552 --> 00:13:42,354
individuals. Additionally, the temptation to

189
00:13:42,392 --> 00:13:45,654
circumvent proper security controls can be

190
00:13:45,692 --> 00:13:48,680
strong at times of urgency and occur all too often.

191
00:13:49,210 --> 00:13:53,510
One example would be sharing credentials with a team or business partners

192
00:13:54,250 --> 00:13:57,470
who need access into urgent

193
00:13:57,570 --> 00:14:00,934
environments or sharing them via slack

194
00:14:00,982 --> 00:14:05,286
or teams. It cloud also happen via unencrypted mediums

195
00:14:05,398 --> 00:14:08,330
in the worst case scenario, such as emails.

196
00:14:09,070 --> 00:14:12,606
If the use of these repositories that I

197
00:14:12,628 --> 00:14:16,734
mentioned earlier sounds familiar, it's because it

198
00:14:16,772 --> 00:14:19,950
does rely on the same premise as perimeter security,

199
00:14:20,100 --> 00:14:23,998
that a hardened wall in the form of an encrypted

200
00:14:24,094 --> 00:14:27,982
vault can protect the soft interior of your environment.

201
00:14:28,126 --> 00:14:32,046
And if you recall what over reliance on walls

202
00:14:32,158 --> 00:14:36,418
for security leads to. Well, as you can imagine,

203
00:14:36,514 --> 00:14:40,086
if you're a fan of Lord of the Rings, bad things can happen.

204
00:14:40,268 --> 00:14:44,226
So for the use case for short lived

205
00:14:44,258 --> 00:14:47,946
certificates is very strong. In this example, when used in

206
00:14:47,968 --> 00:14:52,182
tandem with a strong identity control, they not only eliminate

207
00:14:52,246 --> 00:14:55,798
both the overhead associated with shared secrets,

208
00:14:55,894 --> 00:14:59,162
but also much of the security concerns associated with

209
00:14:59,216 --> 00:15:02,926
exposure. For example, damage is limited by

210
00:15:02,948 --> 00:15:06,430
the hard time to live restrictions on each

211
00:15:06,500 --> 00:15:09,694
certificate, and the ability to escalate or

212
00:15:09,732 --> 00:15:13,534
laterally shift using a certificate is greatly hindered

213
00:15:13,662 --> 00:15:17,182
by these devices and service accounts

214
00:15:17,246 --> 00:15:21,374
that may be compromised. They also provide the foundation

215
00:15:21,422 --> 00:15:25,146
for security verification each time an access request

216
00:15:25,198 --> 00:15:29,030
is made within your segmented network. The final

217
00:15:29,100 --> 00:15:33,286
challenge that zerotrust takes on is the

218
00:15:33,308 --> 00:15:36,854
challenge of too many restrictions. So as you start to

219
00:15:36,892 --> 00:15:40,860
evolve as a security, you start to see maybe

220
00:15:41,390 --> 00:15:44,966
there's a use case for risk avoidance. So odds

221
00:15:44,998 --> 00:15:48,650
are you could secure your infrastructure by removing certain access

222
00:15:48,720 --> 00:15:52,190
types altogether, a practice known as risk avoidance.

223
00:15:53,010 --> 00:15:57,098
But while removing access types such as SSH

224
00:15:57,274 --> 00:16:00,506
sounds great to a security professional.

225
00:16:00,618 --> 00:16:04,034
You'll rarely meet an engineers who agrees in the

226
00:16:04,072 --> 00:16:07,986
value added in that position. The value of

227
00:16:08,008 --> 00:16:11,220
having a unified access plane in this example

228
00:16:11,590 --> 00:16:15,086
allows you to pipe all your access to your

229
00:16:15,128 --> 00:16:18,114
various cloud compute resources such as databases,

230
00:16:18,242 --> 00:16:21,494
servers, kubernetes or applications through

231
00:16:21,532 --> 00:16:24,806
a single choke point using a proxy or

232
00:16:24,828 --> 00:16:28,602
gateway. Now this proxy is a great

233
00:16:28,656 --> 00:16:32,326
place to attach any restrictions or requests

234
00:16:32,438 --> 00:16:36,026
modifications to your SSO identities to

235
00:16:36,048 --> 00:16:39,206
provide accountability for those who are performing

236
00:16:39,238 --> 00:16:43,294
actions in your cloud environment. It also ensures that

237
00:16:43,332 --> 00:16:46,430
you only allow SSo users who are

238
00:16:46,500 --> 00:16:50,510
authenticated to pass through and onto your resources,

239
00:16:50,850 --> 00:16:54,594
while at the same time associating their identity to

240
00:16:54,632 --> 00:16:58,530
each of their requests. Each time

241
00:16:58,680 --> 00:17:02,590
you are using generic logins such as admin

242
00:17:02,670 --> 00:17:06,646
or root, you could tie this activity to

243
00:17:06,668 --> 00:17:10,418
the users and groups that you created within your resources.

244
00:17:10,594 --> 00:17:14,434
Ideally, it would integrate with your current infrastructure and improve

245
00:17:14,482 --> 00:17:18,154
your user experience while allowing you to provide

246
00:17:18,272 --> 00:17:21,786
detailed monitoring activity. There are a

247
00:17:21,808 --> 00:17:25,820
couple solutions that, when used on their own or

248
00:17:27,230 --> 00:17:30,558
in tandem with existing tools, make up a very

249
00:17:30,644 --> 00:17:33,520
strong zero trust defense system.

250
00:17:34,050 --> 00:17:38,314
And one of them, and probably the most well known implementations

251
00:17:38,362 --> 00:17:42,058
of Zero Trust was Google's Beyond Corp initiative,

252
00:17:42,154 --> 00:17:46,174
which has released back in 2014. So Google's goal

253
00:17:46,222 --> 00:17:50,174
was to allow employees to work efficiently on any network

254
00:17:50,222 --> 00:17:54,082
without the use of vpns when they created this. And today,

255
00:17:54,216 --> 00:17:57,746
Google also offers the identity aware proxy solution,

256
00:17:57,858 --> 00:18:01,250
which is similar to the access plane. It allows

257
00:18:01,330 --> 00:18:05,122
for continuous authorization checks

258
00:18:05,266 --> 00:18:08,954
against an identity aware proxy and is

259
00:18:08,992 --> 00:18:13,034
relatively straightforward to set up and use when integrating with an all

260
00:18:13,072 --> 00:18:16,954
GCP cloud stack. Now, there are some

261
00:18:17,072 --> 00:18:21,046
cloud agnostic and open resources tools designed

262
00:18:21,078 --> 00:18:25,358
to tackle this problem as well, such as teleport. So yes,

263
00:18:25,444 --> 00:18:28,366
we made it this far in the talk. It's time to talk a little bit

264
00:18:28,388 --> 00:18:31,662
about teleport. Teleport goes deep into

265
00:18:31,716 --> 00:18:34,974
the OSI model to provide you authentication,

266
00:18:35,102 --> 00:18:38,686
authorization and audit, and it provides

267
00:18:38,718 --> 00:18:42,846
that amongst all your cloud resources at the networking layer,

268
00:18:43,038 --> 00:18:46,966
teleport also uses short lived certificates and

269
00:18:47,068 --> 00:18:50,998
best of all, it's open source. So if you are interested

270
00:18:51,084 --> 00:18:55,640
in exploring some more about how teleport can provision across

271
00:18:56,170 --> 00:18:59,786
your infrastructure, I encourage you to have a look at

272
00:18:59,808 --> 00:19:03,274
our open source community and GitHub, and we also

273
00:19:03,312 --> 00:19:05,850
have some resources available on our website,

274
00:19:06,000 --> 00:19:09,354
teleport.com. I hope that

275
00:19:09,392 --> 00:19:13,170
this talk empowers you to take some of the practices we covered

276
00:19:13,190 --> 00:19:16,634
today and implement them in your own cloud environment.

277
00:19:16,762 --> 00:19:20,366
The transition to zero trust framework is undeniably a

278
00:19:20,388 --> 00:19:23,698
challenge that is rarely a one size fits all,

279
00:19:23,784 --> 00:19:27,346
but I promise you that the investment is always going

280
00:19:27,368 --> 00:19:31,406
to be worth the trouble. Legacy technologies like vpns

281
00:19:31,438 --> 00:19:34,878
and other perimeter access tools are quickly being replaced

282
00:19:34,974 --> 00:19:38,674
with increasingly agile tools to fit the cloud native

283
00:19:38,722 --> 00:19:41,926
environment. The benefits you'll see once you

284
00:19:41,948 --> 00:19:45,382
move over to a zero trust approach are truly worth it,

285
00:19:45,436 --> 00:19:49,378
and being able to reduce your attack surface from the inside threats

286
00:19:49,474 --> 00:19:53,746
is something that every company grapples with. Secure access planes

287
00:19:53,858 --> 00:19:57,734
that enforce strong identity requirements for access are

288
00:19:57,772 --> 00:20:01,742
a win win here, because not only do they improve your

289
00:20:01,796 --> 00:20:05,246
infrastructure and update it from legacy equipment, but also by

290
00:20:05,268 --> 00:20:08,366
doing so, you'll find an increase in user experience and

291
00:20:08,388 --> 00:20:11,774
efficiency. That's all I have today. Thanks again

292
00:20:11,812 --> 00:20:14,846
for tuning in, and I hope that you cloud apply some of these lessons to

293
00:20:14,868 --> 00:20:15,738
your organization.

