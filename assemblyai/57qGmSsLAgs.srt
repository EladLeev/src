1
00:02:15,080 --> 00:02:18,500
Hello everyone, welcome to the Conf

2
00:02:18,650 --> 00:02:22,470
42 site Reliability Engineering 2022 event.

3
00:02:23,160 --> 00:02:27,380
Today I will be talking about SRE antipatterns.

4
00:02:27,960 --> 00:02:31,216
We will talk about ten different antipatterns

5
00:02:31,248 --> 00:02:35,376
that I have seen and that every day while interacting

6
00:02:35,408 --> 00:02:37,980
with people who are practicing SRE.

7
00:02:38,720 --> 00:02:42,716
The first that we are going to talk about is

8
00:02:42,898 --> 00:02:46,716
renaming operations to SRE and continue to do the

9
00:02:46,738 --> 00:02:50,784
same work that you do. Please understand

10
00:02:50,902 --> 00:02:54,016
that sres are for a

11
00:02:54,038 --> 00:02:57,900
specific objective. Google created SRE

12
00:02:57,980 --> 00:03:02,272
because at that point of time, others was a need for tremendous

13
00:03:02,336 --> 00:03:06,004
scaling and it was not possible to

14
00:03:06,042 --> 00:03:09,712
use the traditional methods of maintaining

15
00:03:09,856 --> 00:03:11,860
the operations.

16
00:03:12,840 --> 00:03:16,984
And hence what Benjamin trainer's class had to do was bring

17
00:03:17,022 --> 00:03:19,800
in the sres.

18
00:03:21,340 --> 00:03:25,544
Sres are not there to do the regular work.

19
00:03:25,662 --> 00:03:29,550
What operations does operations will continue to do it.

20
00:03:30,560 --> 00:03:35,112
The main focus of SRE, first of all is about reliability.

21
00:03:35,256 --> 00:03:38,220
And not only reliability as of today,

22
00:03:38,370 --> 00:03:41,276
but reliability when it scales.

23
00:03:41,468 --> 00:03:45,024
SRE will make a benefit only if there is

24
00:03:45,062 --> 00:03:48,208
scaling in the organization. So they are looking

25
00:03:48,294 --> 00:03:51,620
at a perspective from the future

26
00:03:51,690 --> 00:03:55,492
point of view. And for that they need

27
00:03:55,546 --> 00:03:59,056
to learn from failures. So SRE learns

28
00:03:59,088 --> 00:04:03,088
from failures. There's a lot of psychological safety that is required

29
00:04:03,184 --> 00:04:07,000
to implement SRE. People should be able to break

30
00:04:07,070 --> 00:04:10,904
things, learn from it, because what

31
00:04:10,942 --> 00:04:14,932
Google believes is that if something breaks,

32
00:04:15,076 --> 00:04:19,164
it is the system's problem. For example,

33
00:04:19,362 --> 00:04:22,748
if I am not in a good mood and I come to

34
00:04:22,754 --> 00:04:25,870
the office and I do something which breaks the system,

35
00:04:26,960 --> 00:04:30,284
it's not my fault. It's a system

36
00:04:30,402 --> 00:04:33,824
which needs to be changed. Because if I could break the

37
00:04:33,862 --> 00:04:37,312
system in a particular manner, everybody else

38
00:04:37,366 --> 00:04:40,896
will be able to break it in that way. So the learning has

39
00:04:40,918 --> 00:04:45,300
to come so that nobody is able to break the system in the same manner.

40
00:04:47,400 --> 00:04:50,100
So we have to learn from failure.

41
00:04:51,400 --> 00:04:55,256
And again, as I said, that scalability is

42
00:04:55,278 --> 00:04:59,332
the main objective. How can we scale

43
00:04:59,476 --> 00:05:03,048
at a very fast growing scenario? It can be a

44
00:05:03,214 --> 00:05:06,472
scale in terms of amount of new

45
00:05:06,526 --> 00:05:10,552
users joining in, like what happened to zoom after the lockdown

46
00:05:10,616 --> 00:05:13,630
started, so many different people started using it.

47
00:05:14,320 --> 00:05:17,996
It can be in terms of your unstability in the

48
00:05:18,018 --> 00:05:22,640
system, so more and more increases happening for your incidents

49
00:05:22,980 --> 00:05:26,976
and it can be in terms of newer technology

50
00:05:27,078 --> 00:05:30,624
that you are going into. It can

51
00:05:30,662 --> 00:05:34,416
be new features that are coming up very frequently.

52
00:05:34,608 --> 00:05:38,196
Whatever is the way that scaling happens, if there

53
00:05:38,218 --> 00:05:42,164
is scaling, there is need for site reliability engineers and

54
00:05:42,202 --> 00:05:45,624
they have to focus on that, not running the day to day

55
00:05:45,662 --> 00:05:48,916
operation. So do not expect sres

56
00:05:49,028 --> 00:05:53,748
to do your regular operations work in terms of monitoring,

57
00:05:53,844 --> 00:05:57,764
in terms of doing some automation

58
00:05:57,892 --> 00:06:01,468
to do your regular work. They are going to do it,

59
00:06:01,554 --> 00:06:04,824
but for example, they will automate to reduce

60
00:06:04,872 --> 00:06:08,556
toil, to free up time for people, so that they can focus

61
00:06:08,738 --> 00:06:12,556
on making things better, on increasing

62
00:06:12,588 --> 00:06:16,770
the reliability of the system. And believe Google

63
00:06:18,100 --> 00:06:22,544
in their book, the latest book, which was published in 2020 January,

64
00:06:22,672 --> 00:06:26,324
called Building Reliable and Secure system.

65
00:06:26,522 --> 00:06:30,292
Google believes that a

66
00:06:30,426 --> 00:06:33,536
system is not reliable if it is not secure.

67
00:06:33,648 --> 00:06:37,028
So they have to think from all of these perspectives.

68
00:06:37,204 --> 00:06:41,224
So don't just rename your operation and continue to

69
00:06:41,262 --> 00:06:45,048
do what you used to do. That's not the case. And that's why

70
00:06:45,134 --> 00:06:49,070
the skill set required of an SRE is also not the same.

71
00:06:49,840 --> 00:06:51,870
The second one that we see,

72
00:06:53,440 --> 00:06:56,796
users should not notice an issue before you

73
00:06:56,818 --> 00:07:00,896
do. A lot of times we sre that there is problems

74
00:07:00,998 --> 00:07:04,224
that comes up in production and users gets

75
00:07:04,262 --> 00:07:08,176
to know of it before we get to know. So the

76
00:07:08,198 --> 00:07:12,550
first thing that we need to do is identify proper,

77
00:07:13,080 --> 00:07:17,812
appropriate slos and

78
00:07:17,866 --> 00:07:21,444
then define the alerts, which is

79
00:07:21,562 --> 00:07:25,668
actionable. We lose ourselves

80
00:07:25,844 --> 00:07:28,890
in the noise of alerts. That happens.

81
00:07:29,260 --> 00:07:32,440
Everything doesn't need to be alerted,

82
00:07:32,780 --> 00:07:36,504
everything needs to be logged, everything needs to be traced, but not

83
00:07:36,542 --> 00:07:40,680
alerted. We all have got onto the aircraft

84
00:07:41,020 --> 00:07:43,980
and in the aircrafts, when we are standing there,

85
00:07:44,050 --> 00:07:47,724
before it takes off, the cockpit door is open and we can see that

86
00:07:47,762 --> 00:07:50,770
there are hundreds of different meters that are there.

87
00:07:51,620 --> 00:07:55,152
Do you think that the pilot and the copilot looks at each and

88
00:07:55,206 --> 00:07:58,572
every meter that is there on their dashboard?

89
00:07:58,716 --> 00:08:02,820
No, they look at only a handful,

90
00:08:03,720 --> 00:08:07,364
four or five different meters that they need to look at

91
00:08:07,562 --> 00:08:10,884
to ensure that everything is going fine.

92
00:08:11,082 --> 00:08:15,860
You can think of the Dora metrics, you can think of the Google's

93
00:08:15,940 --> 00:08:20,424
golden signal, but we

94
00:08:20,462 --> 00:08:23,944
need to capture everything that is happening. So what we

95
00:08:23,982 --> 00:08:26,688
do, we look at these signals.

96
00:08:26,804 --> 00:08:30,124
If anything is not working as per

97
00:08:30,162 --> 00:08:33,996
expectation, then we go to the others relevant to that to

98
00:08:34,018 --> 00:08:37,676
diagnose the problem. So alerts has to

99
00:08:37,698 --> 00:08:41,440
be on the service, not on the metrics.

100
00:08:42,420 --> 00:08:46,000
Obviously, we need to increase observability,

101
00:08:47,300 --> 00:08:50,876
we have to know each and everything. And observability

102
00:08:50,988 --> 00:08:56,000
here we mean melt, melt metrics,

103
00:08:56,080 --> 00:08:58,340
events, logs and traces,

104
00:09:00,360 --> 00:09:03,684
everything we should be able to know and

105
00:09:03,722 --> 00:09:07,788
we should be able to detect faster, because to us the objective

106
00:09:07,824 --> 00:09:11,396
is MTTR. Meantime to recover should be shorter

107
00:09:11,588 --> 00:09:14,820
and for meantime to recover to be shorter.

108
00:09:14,900 --> 00:09:18,424
We need meantime to detect to be shorter. If you need

109
00:09:18,462 --> 00:09:21,660
meantime to detect to be shorter, you need to have better

110
00:09:21,730 --> 00:09:25,496
understanding of the system. The end to end domain knowledge.

111
00:09:25,688 --> 00:09:29,144
You may not be a subject matter expert, but that knowledge is required.

112
00:09:29,272 --> 00:09:32,752
You may need to have a better understanding of your it

113
00:09:32,806 --> 00:09:36,656
system and your entire journey of

114
00:09:36,678 --> 00:09:40,236
the different customer personas. It is not a one size fits

115
00:09:40,268 --> 00:09:44,276
all approach. We need to know what each one is doing, what is normal for

116
00:09:44,298 --> 00:09:47,652
each of them. We need to bring

117
00:09:47,706 --> 00:09:51,076
that observability into it. And finally,

118
00:09:51,258 --> 00:09:54,900
we need to have better fault tolerance to achieve

119
00:09:54,980 --> 00:09:58,376
the slos that we have promised. And that is from

120
00:09:58,398 --> 00:10:00,650
the point of view of the customer experience,

121
00:10:03,660 --> 00:10:05,610
what we are doing.

122
00:10:07,360 --> 00:10:10,972
So we need to increase our

123
00:10:11,026 --> 00:10:15,420
monitoring, our telemetry, our application performance management,

124
00:10:15,920 --> 00:10:20,064
all these and move towards observability so

125
00:10:20,102 --> 00:10:23,536
that we can get each and every aspect when we

126
00:10:23,558 --> 00:10:27,836
need that information, but not drown

127
00:10:27,948 --> 00:10:30,160
in the noise of alerts.

128
00:10:31,300 --> 00:10:35,760
The third one is measuring until my age. Now this is a common traditional

129
00:10:35,840 --> 00:10:40,260
scenario where we are bothered about a 99.99%

130
00:10:40,330 --> 00:10:43,824
availability of our servers. We are looking at

131
00:10:43,962 --> 00:10:47,544
latency and all but all from within the four

132
00:10:47,582 --> 00:10:51,240
walls of our organization. The things that

133
00:10:51,390 --> 00:10:55,272
we are in control, but that is

134
00:10:55,326 --> 00:10:58,492
not okay. Customer is

135
00:10:58,546 --> 00:11:02,236
happy only when their experience

136
00:11:02,338 --> 00:11:06,652
is better. I can have a 99.99%

137
00:11:06,706 --> 00:11:10,576
availability on my servers, but I

138
00:11:10,598 --> 00:11:15,116
am going through some last mile network

139
00:11:15,308 --> 00:11:18,800
which the customer is using a mobile data which is giving

140
00:11:18,870 --> 00:11:22,260
a 95% availability. Now that

141
00:11:22,330 --> 00:11:26,580
is not giving the customer a 99.99%

142
00:11:26,650 --> 00:11:30,736
availability. And that's why having the appropriate

143
00:11:30,768 --> 00:11:34,552
level of Slo is very important. We should

144
00:11:34,606 --> 00:11:38,724
never target 100% because it is not possible unless

145
00:11:38,772 --> 00:11:42,024
we are a manufacturer of pacemaker or

146
00:11:42,062 --> 00:11:45,690
something like aircraft, that it should work.

147
00:11:46,160 --> 00:11:49,436
Most probably everything

148
00:11:49,538 --> 00:11:52,030
else doesn't need to be 100%.

149
00:11:52,480 --> 00:11:56,476
So we need to understand what is normal, what is the customer

150
00:11:56,578 --> 00:12:00,364
really looking at, what they really need

151
00:12:00,562 --> 00:12:03,664
and joint become. Sres work together with

152
00:12:03,702 --> 00:12:07,452
the product, others with the users to define the slos

153
00:12:07,596 --> 00:12:11,010
based on facts and figures. What is happening today.

154
00:12:11,320 --> 00:12:15,700
So again, observability is important to even have this discussion

155
00:12:16,840 --> 00:12:20,788
we need SRE are responsible for better customer

156
00:12:20,874 --> 00:12:24,184
experience. And today customers experience is not just

157
00:12:24,222 --> 00:12:27,320
delivering some components or it elements.

158
00:12:27,740 --> 00:12:31,144
It is a journey that they sre looking at, as I

159
00:12:31,182 --> 00:12:34,970
call it. We are looking at servitized products.

160
00:12:36,320 --> 00:12:39,820
Today we don't buy songs in a CD.

161
00:12:40,400 --> 00:12:43,996
We buy a musical experience that also on a pay as you

162
00:12:44,018 --> 00:12:46,510
go model from a Spotify.com.

163
00:12:47,680 --> 00:12:51,424
And the entire journey is important for the customer experience,

164
00:12:51,542 --> 00:12:55,410
not a specific song. We look at

165
00:12:55,860 --> 00:12:59,324
how easy is it to search for the different types of song,

166
00:12:59,372 --> 00:13:02,130
the different genre of songs that we want to listen.

167
00:13:02,820 --> 00:13:06,352
We look at how easy it is to run it,

168
00:13:06,406 --> 00:13:09,348
whether I am in the house, whether I am in the office, whether I'm on

169
00:13:09,354 --> 00:13:13,092
the car, whether I'm in the camping site, am I able to do it?

170
00:13:13,146 --> 00:13:16,504
Can I use any type of devices to listen for it?

171
00:13:16,702 --> 00:13:20,104
What is the kind of recommendations that

172
00:13:20,142 --> 00:13:23,448
the system is throwing based on my

173
00:13:23,614 --> 00:13:27,390
listening habits? Can I pay as you go?

174
00:13:27,760 --> 00:13:30,750
Can I pay only when I'm listening and not every time.

175
00:13:32,240 --> 00:13:35,740
All these together gives the customer experience.

176
00:13:35,890 --> 00:13:39,544
If we look at Uber, Uber is not delivering a cab

177
00:13:39,592 --> 00:13:42,816
service. They are giving us a travel experience.

178
00:13:42,918 --> 00:13:46,892
And that's why the customer is looking at that entire journey,

179
00:13:46,956 --> 00:13:51,024
starting from the time they are booking the cab till the time they

180
00:13:51,062 --> 00:13:54,560
pay the money and get off the cab.

181
00:13:55,400 --> 00:13:57,910
That entire journey has to be good.

182
00:13:59,800 --> 00:14:03,572
That is the kind of thought process that we have to start looking

183
00:14:03,626 --> 00:14:07,064
at. Sres have to look at and then find out

184
00:14:07,102 --> 00:14:10,580
ways to make it better. That is the job of SRE.

185
00:14:10,660 --> 00:14:14,900
Not again, not running your day to day operations

186
00:14:14,980 --> 00:14:18,364
work. And obviously we have

187
00:14:18,402 --> 00:14:21,996
to look at end user performance. We need to look at

188
00:14:22,018 --> 00:14:25,992
the end user performance not from within our edge,

189
00:14:26,136 --> 00:14:29,984
not from within what is within our control, how it is

190
00:14:30,022 --> 00:14:33,356
happening at the customer site. There are tools

191
00:14:33,388 --> 00:14:37,440
like Catchpoint which allows you to do end user performance management.

192
00:14:38,420 --> 00:14:41,680
We need to look at the web analytics,

193
00:14:43,460 --> 00:14:47,036
how fast the page is opening

194
00:14:47,068 --> 00:14:49,060
up or how slow it is opening.

195
00:14:51,000 --> 00:14:54,128
We need to look at it from that point of view,

196
00:14:54,234 --> 00:14:57,944
keeping in mind that the customer, how they

197
00:14:57,982 --> 00:15:01,960
are getting there is a situation when I was talking

198
00:15:02,030 --> 00:15:05,476
to the founder of Catchpoint, Mehti Daudi,

199
00:15:05,508 --> 00:15:09,548
and he was mentioning about a situation where they had

200
00:15:09,714 --> 00:15:13,516
seen that there was a speed which was slowing down

201
00:15:13,618 --> 00:15:16,940
in an AWS situation of their client in

202
00:15:17,010 --> 00:15:21,312
California. The client put the customer

203
00:15:21,446 --> 00:15:24,850
complaint in AWS. AWS sent them the

204
00:15:25,700 --> 00:15:28,944
server logs and said everything is fine now.

205
00:15:29,142 --> 00:15:32,996
The customer then sent the catchpoint report and then they looked at it

206
00:15:33,018 --> 00:15:37,172
and took five days for AWS to find

207
00:15:37,226 --> 00:15:41,332
out where the problem is. The traffic from California was supposed

208
00:15:41,386 --> 00:15:45,408
to go to a north american server.

209
00:15:45,504 --> 00:15:48,664
It was not going to that. Some change had been done

210
00:15:48,702 --> 00:15:52,330
earlier because of which it was going to some server in Asia back

211
00:15:53,100 --> 00:15:56,368
now. If you now look at the server, North America

212
00:15:56,404 --> 00:15:59,660
server and give the statistics of that, the details of that,

213
00:15:59,730 --> 00:16:03,420
it will not show anything. But is your customer

214
00:16:03,490 --> 00:16:07,950
happy? Is your customer getting your promised service?

215
00:16:08,400 --> 00:16:11,712
No. So we have to move out of our

216
00:16:11,766 --> 00:16:14,530
edge and go till the customer.

217
00:16:15,220 --> 00:16:17,650
That is what SRE is going to look at.

218
00:16:18,820 --> 00:16:22,120
The next important point is false positives

219
00:16:22,140 --> 00:16:25,540
are worse than no alerts. And today we find

220
00:16:25,610 --> 00:16:29,364
that with the traditional monitoring and all, we find a lot of

221
00:16:29,402 --> 00:16:33,616
false positives which are going and ultimately affecting

222
00:16:33,648 --> 00:16:36,824
us in our production. Customers are finding those

223
00:16:36,862 --> 00:16:40,648
problems. So we cannot look at

224
00:16:40,734 --> 00:16:44,810
individual host alerts and think that everything is fine,

225
00:16:45,420 --> 00:16:48,792
even for that matter, if we are looking at the HTTP request,

226
00:16:48,936 --> 00:16:52,956
if you look at from the server point of view, is one thing,

227
00:16:53,058 --> 00:16:56,748
but what happens to those HTTP requests which are failing even at the

228
00:16:56,754 --> 00:17:00,144
load balancer level? So we have

229
00:17:00,182 --> 00:17:04,064
to look at everything starting from the

230
00:17:04,102 --> 00:17:07,330
customer experience, and then go backwards to see

231
00:17:07,940 --> 00:17:11,304
what needs to be done to achieve

232
00:17:11,452 --> 00:17:15,236
what the customer has been promised in

233
00:17:15,258 --> 00:17:18,976
terms of slos. So alerts

234
00:17:19,008 --> 00:17:22,804
has to be very, very specific with respect to the services and

235
00:17:22,842 --> 00:17:25,944
not with respect to some components. Yes, we will have to

236
00:17:25,982 --> 00:17:28,250
track different things in the component side,

237
00:17:29,340 --> 00:17:32,920
but the ultimate objective has to be about the service

238
00:17:32,990 --> 00:17:36,536
that the customer is getting. Response fatigue and

239
00:17:36,558 --> 00:17:40,156
information overload of time series data is not good. So as

240
00:17:40,178 --> 00:17:44,204
I said, too much of alerts is not good. If people have to

241
00:17:44,242 --> 00:17:47,736
keep moving from one to the other because the pager

242
00:17:47,768 --> 00:17:51,200
is ringing very often, it is not a good thing.

243
00:17:51,270 --> 00:17:53,600
It is actually reducing productivity.

244
00:17:55,940 --> 00:17:59,292
We cannot do multitasking. Our brains.

245
00:17:59,356 --> 00:18:03,680
Neuroscience has proven that our brains are not wired

246
00:18:03,760 --> 00:18:07,824
to do multitasking. We do things faster. We think we are doing multitasking,

247
00:18:07,872 --> 00:18:11,524
but that's not the case. So we need

248
00:18:11,642 --> 00:18:15,332
to look at only actionable

249
00:18:15,396 --> 00:18:19,384
alerts, not look at everything and

250
00:18:19,422 --> 00:18:22,970
get disturbed. Every time we are moving from one to the other,

251
00:18:24,060 --> 00:18:27,740
the brain is taking time to shift.

252
00:18:28,960 --> 00:18:33,324
Alerts should have great diagnostic information that

253
00:18:33,362 --> 00:18:37,036
is again very, very important. Just telling that something is wrong

254
00:18:37,058 --> 00:18:40,796
is not good enough. So when we are putting the alerts, we have to make

255
00:18:40,818 --> 00:18:45,440
sure that at that point of time we can collect as much health

256
00:18:45,510 --> 00:18:49,820
related information of the system and pass it on in the alert.

257
00:18:49,900 --> 00:18:53,652
So that whoever looks at the alert, looking at it is

258
00:18:53,706 --> 00:18:57,190
able to faster diagnose, that is

259
00:18:57,720 --> 00:19:01,700
lesser MTTD, which leads to lesser MTTR.

260
00:19:03,000 --> 00:19:06,280
Because if MTTR is more,

261
00:19:06,350 --> 00:19:10,280
that means meantime to recovery is more, that means your outage is

262
00:19:10,430 --> 00:19:14,440
longer. That means you are going to eat up on your error budget.

263
00:19:15,420 --> 00:19:19,260
You will have lesser time to do things, better things

264
00:19:19,330 --> 00:19:23,164
like releasing new features, like putting some

265
00:19:23,202 --> 00:19:27,324
security patches, like doing chaos engineering. You will not

266
00:19:27,362 --> 00:19:30,956
have time if you are having outages

267
00:19:31,148 --> 00:19:33,010
already from something else.

268
00:19:34,260 --> 00:19:37,040
The next is configuration management trap.

269
00:19:38,500 --> 00:19:41,964
So traditional infrastructure is not suitable in today's

270
00:19:42,012 --> 00:19:45,476
world, because there are so many moving parts, there are so many different things.

271
00:19:45,578 --> 00:19:48,880
It is so much of distributed system. That traditional

272
00:19:48,960 --> 00:19:52,772
way of doing infrastructure is not going to help. I remember long

273
00:19:52,826 --> 00:19:56,584
time back when I used to, I started working. So that

274
00:19:56,622 --> 00:20:00,184
time the desktops had those

275
00:20:00,222 --> 00:20:03,896
motherboards which had only two slots for memory. So you

276
00:20:03,918 --> 00:20:07,396
can put two mb, not gb, two mb

277
00:20:07,428 --> 00:20:11,544
memory or two four mb memory, or two eight mb memory or 216

278
00:20:11,592 --> 00:20:15,148
mb memory. That was the maximum that you

279
00:20:15,154 --> 00:20:18,644
could do. So I had a four mb memory,

280
00:20:18,792 --> 00:20:22,080
one in the slot. I wanted to make it eight mb.

281
00:20:22,660 --> 00:20:26,080
Submitted the request, got all those approvals.

282
00:20:26,900 --> 00:20:30,204
The engineer comes to me, opens my desktop,

283
00:20:30,252 --> 00:20:34,116
sees there is a four mb slot, which is empty, and others is one

284
00:20:34,218 --> 00:20:36,500
with four mb ram.

285
00:20:37,720 --> 00:20:40,964
He opens the desktop beside me,

286
00:20:41,002 --> 00:20:45,136
because that desktop, nobody was sitting there. Because the person who was sitting,

287
00:20:45,168 --> 00:20:48,090
he has gone to a client location for a month or so.

288
00:20:48,780 --> 00:20:52,516
He opens that, takes up out his four MB memory,

289
00:20:52,628 --> 00:20:55,796
puts that ram chip into my machine, my machine

290
00:20:55,828 --> 00:20:59,692
becomes eight MB, closes both the machines, goes away after

291
00:20:59,746 --> 00:21:03,448
one month. When he comes, when this person comes, whose machine

292
00:21:03,624 --> 00:21:07,340
was opened, his machine is not booting,

293
00:21:07,920 --> 00:21:11,836
his desktop is not booting. And by that time, we have forgotten

294
00:21:11,948 --> 00:21:15,360
what happened. Imagine that happening

295
00:21:15,430 --> 00:21:19,168
in today's world with millions of different

296
00:21:19,254 --> 00:21:21,788
components that are there.

297
00:21:21,974 --> 00:21:25,476
It's impossible. So we have to make sure that

298
00:21:25,578 --> 00:21:29,392
we get into infrastructure as code, configuration management

299
00:21:29,456 --> 00:21:32,724
as code. We have to have a very,

300
00:21:32,762 --> 00:21:36,376
very strong configuration management, not only because of the

301
00:21:36,398 --> 00:21:39,544
stability, but also, as I said

302
00:21:39,582 --> 00:21:43,284
earlier, that reliability means security, even for security purpose.

303
00:21:43,332 --> 00:21:46,520
We need everything to be automated.

304
00:21:46,960 --> 00:21:50,540
We need to move into that immutable infrastructure scenario,

305
00:21:51,680 --> 00:21:54,780
the pets versus cattle versus poultry scenario.

306
00:21:56,240 --> 00:21:59,904
Pets means it's a kind

307
00:21:59,942 --> 00:22:03,744
of idea which

308
00:22:03,782 --> 00:22:07,184
has been brought in. But the main thing is that we have to

309
00:22:07,222 --> 00:22:10,684
servers, huge servers. We have seen those servers

310
00:22:10,732 --> 00:22:13,824
with names like John and Thomas and Paul

311
00:22:13,872 --> 00:22:17,604
and so on. We are

312
00:22:17,642 --> 00:22:23,824
so emotionally attached to those servers that we want to keep treating

313
00:22:23,872 --> 00:22:27,450
those servers as much as possible so that it keeps running.

314
00:22:28,620 --> 00:22:31,732
But that is not cost friendly.

315
00:22:31,876 --> 00:22:35,336
That is not giving us the kind of result that

316
00:22:35,358 --> 00:22:38,780
we sre looking for to satisfy the current

317
00:22:38,850 --> 00:22:41,950
needs of the customer, the ever changing needs of the customer.

318
00:22:43,920 --> 00:22:47,804
So we move to cattle, which is less

319
00:22:47,842 --> 00:22:51,744
emotional attachment, more numbers, more work

320
00:22:51,782 --> 00:22:55,292
can be done if the cattle is sick,

321
00:22:55,356 --> 00:22:59,104
and we just put down the cattle and replace. So this is the

322
00:22:59,142 --> 00:23:02,832
VM. But in today's evolving

323
00:23:02,896 --> 00:23:06,324
world, it is not also good enough. So what we are

324
00:23:06,362 --> 00:23:10,100
moving towards is poultry. Like chickens, huge numbers

325
00:23:10,170 --> 00:23:13,476
can be put in one place, lot of

326
00:23:13,498 --> 00:23:16,040
work can be done, less expensive,

327
00:23:17,580 --> 00:23:21,304
and that is your containers. So we are moving

328
00:23:21,422 --> 00:23:25,892
into a immutable scenario, with automation,

329
00:23:25,956 --> 00:23:29,564
with containers. And immutable means that you cannot change.

330
00:23:29,682 --> 00:23:33,470
So in today's world, we cannot change. What we can do is

331
00:23:34,080 --> 00:23:37,692
replace. We kill the old one

332
00:23:37,746 --> 00:23:41,024
and replace it with a new one. That way it

333
00:23:41,062 --> 00:23:45,010
is also much more secure. It is much easier to

334
00:23:45,620 --> 00:23:48,450
detect problems and rectify problems.

335
00:23:50,020 --> 00:23:53,764
So sre don't spend much time on

336
00:23:53,882 --> 00:23:57,524
changing. Rather, they automate in such

337
00:23:57,562 --> 00:24:01,664
a manner to homogenize the ecosystem, to make it in such a manner

338
00:24:01,712 --> 00:24:05,656
that it becomes much more easier for people to

339
00:24:05,758 --> 00:24:09,704
take care of it. Lot of it automated, lot of it.

340
00:24:09,822 --> 00:24:12,410
Getting into a self healing kind of a situation,

341
00:24:14,700 --> 00:24:18,284
that is your work that

342
00:24:18,322 --> 00:24:22,476
needs to be done. Next important

343
00:24:22,578 --> 00:24:26,780
aspect is incident response.

344
00:24:27,520 --> 00:24:30,304
We all know we are doing incident. Yes.

345
00:24:30,422 --> 00:24:35,200
Sre also have to be part of incident response.

346
00:24:36,740 --> 00:24:40,690
Couple of reasons. First, if they sre coming

347
00:24:41,240 --> 00:24:45,824
as the expert, as the advisor,

348
00:24:45,872 --> 00:24:49,040
as the consultant to the entire delivery lifecycle,

349
00:24:49,200 --> 00:24:52,310
bringing the wisdom of production from the right to left,

350
00:24:53,160 --> 00:24:56,804
they need to know what is happening on the ground. They cannot be an advisor

351
00:24:56,852 --> 00:25:00,856
without knowing what is happening. So they have to be hands on.

352
00:25:01,038 --> 00:25:03,930
But here the incident response is different.

353
00:25:05,180 --> 00:25:08,984
First of all, SRE do not

354
00:25:09,102 --> 00:25:12,476
look at a tiered support model. If you have

355
00:25:12,498 --> 00:25:15,388
to implement SRE, you have to move from that level one,

356
00:25:15,474 --> 00:25:19,048
level two, level three, level four support. It has to be one

357
00:25:19,154 --> 00:25:22,336
single team responsible for the entire system.

358
00:25:22,518 --> 00:25:26,080
End to end. We have to move from a project to product

359
00:25:26,150 --> 00:25:29,692
approach. One single cross

360
00:25:29,756 --> 00:25:33,828
functional, self sufficient, self organized team

361
00:25:33,914 --> 00:25:36,150
where all the capabilities are there.

362
00:25:37,800 --> 00:25:41,556
So we are looking at a comb shaped skill set of

363
00:25:41,578 --> 00:25:42,630
the whole team.

364
00:25:45,340 --> 00:25:48,980
And here, if a problem happens, if an incident

365
00:25:49,060 --> 00:25:53,412
happens, you need to swarm.

366
00:25:53,556 --> 00:25:57,752
So everybody that is there comes together, that is relevant,

367
00:25:57,896 --> 00:26:01,500
comes together and solves the problem, because everybody

368
00:26:01,570 --> 00:26:06,252
looks at it from the same point of view and

369
00:26:06,306 --> 00:26:09,896
solve it. That's subject. It's not that handing

370
00:26:09,928 --> 00:26:13,072
it over from one unit to the other to the other. No.

371
00:26:13,206 --> 00:26:16,816
So no tiered support. We have to get into swarming now.

372
00:26:16,838 --> 00:26:20,384
When incidents are bigger, we need to have a

373
00:26:20,422 --> 00:26:24,176
proper framework for incident command.

374
00:26:24,368 --> 00:26:28,560
And Google has defined an incident command framework with incident

375
00:26:28,640 --> 00:26:32,804
commander and various other roles which you need

376
00:26:32,842 --> 00:26:37,016
to look at, and that facilitates the

377
00:26:37,118 --> 00:26:40,664
smooth flow of work. A lot of it

378
00:26:40,702 --> 00:26:44,388
has to be automated. So SREs

379
00:26:44,484 --> 00:26:47,400
looks for opportunities of automating,

380
00:26:47,920 --> 00:26:52,220
whatever can be done, because on call anyway, is not something

381
00:26:52,290 --> 00:26:55,884
which we look forward to. Do a lot

382
00:26:55,922 --> 00:26:59,256
of it. Now, you can use chat bots, you can use ibRs,

383
00:26:59,288 --> 00:27:02,464
you can use many automated system, you can create a lot of

384
00:27:02,502 --> 00:27:05,568
runbooks to take care of it.

385
00:27:05,734 --> 00:27:09,856
And what is also very important is the learning

386
00:27:09,958 --> 00:27:13,636
from it. We talked about the learn from the failure. So if

387
00:27:13,658 --> 00:27:17,492
the incident has happened, it's an opportunity

388
00:27:17,626 --> 00:27:20,630
to learn. So how do we learn?

389
00:27:21,160 --> 00:27:24,916
Through blameless postmortem. So SRe are the ones who are going

390
00:27:24,938 --> 00:27:28,852
to facilitate and conduct the blameless postmortem with the people

391
00:27:28,906 --> 00:27:32,808
who Sre actually involved during that, because they have the information

392
00:27:32,974 --> 00:27:36,468
as to what happened at that point of time. What was the sequence

393
00:27:36,484 --> 00:27:39,804
of activities that happened? What was their expectation, what were their

394
00:27:39,842 --> 00:27:42,510
assumptions, what were the things that they have done?

395
00:27:43,600 --> 00:27:46,824
That's a learning. And this blameless postmortem

396
00:27:46,872 --> 00:27:51,068
has to be documented and it has to be circulated

397
00:27:51,164 --> 00:27:54,416
to everybody in the organization, not just within the

398
00:27:54,438 --> 00:27:57,712
team. We have seen incidents where

399
00:27:57,766 --> 00:28:01,564
even organizations like banks have not only shared

400
00:28:01,612 --> 00:28:06,356
postmortem within themselves, they have shared that to

401
00:28:06,378 --> 00:28:09,716
the outside world in social media, because there is still somebody who is

402
00:28:09,738 --> 00:28:13,684
going to be benefited out of it, number one. Number two, in a

403
00:28:13,722 --> 00:28:17,076
specific case, as you see in a video by Monzo

404
00:28:17,108 --> 00:28:20,216
based, one of the problems

405
00:28:20,318 --> 00:28:24,410
because of that incident was it was due to some

406
00:28:24,780 --> 00:28:28,392
open source product, certain aspect

407
00:28:28,456 --> 00:28:32,012
in that which had changed in a new version which

408
00:28:32,066 --> 00:28:36,332
created the problem. Now, people in the social media

409
00:28:36,466 --> 00:28:39,984
were also people who are creating and maintaining those open

410
00:28:40,022 --> 00:28:42,530
source codes, products.

411
00:28:43,540 --> 00:28:46,432
They got back and said, great,

412
00:28:46,566 --> 00:28:49,472
we have got this information. Sorry to hear this.

413
00:28:49,606 --> 00:28:53,430
We will take care of it in the next change.

414
00:28:54,280 --> 00:28:56,870
So everybody gains out of it.

415
00:28:59,480 --> 00:29:02,870
SRe are involved in all of these.

416
00:29:05,100 --> 00:29:08,952
As sres, we have to start thinking beyond point

417
00:29:09,006 --> 00:29:09,880
fixing.

418
00:29:12,300 --> 00:29:16,090
Point fixing means that we are looking at only the

419
00:29:16,720 --> 00:29:20,190
problem from immediate point of view and solving it.

420
00:29:20,560 --> 00:29:24,076
But Sres doesn't look at that. SREs looks at it in

421
00:29:24,098 --> 00:29:27,470
a much bigger context, in a much

422
00:29:28,240 --> 00:29:32,124
long term kind of a scenario. So minimize

423
00:29:32,172 --> 00:29:35,776
outage with automated alerts and solid paging mechanisms and

424
00:29:35,798 --> 00:29:39,196
quick workarounds, faster rollback,

425
00:29:39,228 --> 00:29:42,976
failover and fixed follow. So you have to,

426
00:29:42,998 --> 00:29:46,516
when you sre creating anything, you have to think through all of these, how you

427
00:29:46,538 --> 00:29:50,356
can do it, how you can automate it. If there

428
00:29:50,378 --> 00:29:54,836
is any new release, that new release will not be released unless

429
00:29:55,028 --> 00:29:58,952
there is also

430
00:29:59,086 --> 00:30:01,796
the script ready for rollback.

431
00:30:01,908 --> 00:30:04,440
And all of these has to be tested,

432
00:30:05,820 --> 00:30:08,940
analyze and eliminate the class of design errors.

433
00:30:09,840 --> 00:30:13,756
As SREs, we have to design

434
00:30:13,938 --> 00:30:17,612
and analyze what is happening and based

435
00:30:17,666 --> 00:30:20,290
on that, automate things,

436
00:30:22,180 --> 00:30:26,028
short term fixes followed by preventive, long term fixes leading

437
00:30:26,044 --> 00:30:29,536
to predictive methods. So as I said, sres are

438
00:30:29,558 --> 00:30:32,164
not looking at a situation, what is happening today.

439
00:30:32,282 --> 00:30:36,084
SRE are looking at a situation in

440
00:30:36,122 --> 00:30:39,776
future. They are looking to be ready for the unknown

441
00:30:39,808 --> 00:30:42,580
unknowns, not only the known unknowns.

442
00:30:43,400 --> 00:30:47,016
So they have to look at the observability, they have to look at everything that

443
00:30:47,038 --> 00:30:50,216
is happening and also analyze and do

444
00:30:50,238 --> 00:30:54,152
the what if analysis for the scaling that might

445
00:30:54,206 --> 00:30:57,132
happen in the future. And be ready for that.

446
00:30:57,186 --> 00:31:00,812
For example, something may work in your current

447
00:31:00,866 --> 00:31:04,072
situation. Let's say a small latency delay,

448
00:31:04,136 --> 00:31:08,172
but that same small latency delay when it is happening with

449
00:31:08,306 --> 00:31:11,010
millions of users, can crash the system.

450
00:31:12,580 --> 00:31:16,220
In your environment, there can be an automated

451
00:31:16,300 --> 00:31:19,984
system where you are transferring some data from some

452
00:31:20,022 --> 00:31:23,220
files from one point to the other, and then working

453
00:31:23,290 --> 00:31:26,564
on that file, processing that file. But if

454
00:31:26,602 --> 00:31:29,830
there is a delay when you are doing it over a distributed system,

455
00:31:30,680 --> 00:31:32,740
the whole process gets stuck.

456
00:31:33,980 --> 00:31:37,256
So those are kind of things that SREs are going to

457
00:31:37,278 --> 00:31:40,596
look at. So aim for auto

458
00:31:40,628 --> 00:31:45,028
remediation and closed loop remediations without human intervention.

459
00:31:45,204 --> 00:31:48,764
What is repetitive, what can be done should

460
00:31:48,802 --> 00:31:49,820
be automated,

461
00:31:51,440 --> 00:31:55,096
what machines cannot do, like refactoring

462
00:31:55,128 --> 00:31:58,008
of technical data. So like rearchitecting,

463
00:31:58,184 --> 00:32:01,984
like bringing in new features. Those SRE things

464
00:32:02,182 --> 00:32:06,080
which human beings has to do, people will focus

465
00:32:06,150 --> 00:32:09,756
on that, the rest of it will be automated. That is what toil

466
00:32:09,788 --> 00:32:13,692
is about. Production readiness

467
00:32:13,756 --> 00:32:18,224
gatekeeper SREs are not the gatekeepers in

468
00:32:18,262 --> 00:32:22,208
DevOps and Devsecops. We want things to move faster.

469
00:32:22,384 --> 00:32:26,596
SRE complements DevOps. So SRE cannot be a gatekeeper

470
00:32:26,628 --> 00:32:29,800
where it is stopping from faster releases.

471
00:32:30,780 --> 00:32:34,516
So any process that increases the length of time between the creation

472
00:32:34,548 --> 00:32:38,556
of a change and its production release without adding definitive value

473
00:32:38,658 --> 00:32:41,896
is a gatekeeper that functions as a choke point or a speed

474
00:32:41,928 --> 00:32:45,420
bump. So we have to make sure that

475
00:32:45,570 --> 00:32:49,516
the whole activity is such that it is helping in improving the

476
00:32:49,538 --> 00:32:53,056
flow rather than stopping the flow. So if

477
00:32:53,078 --> 00:32:56,604
you are looking at a release and deployment, you are as an SRE

478
00:32:56,652 --> 00:33:00,192
going to put that automation and release and deployment not only

479
00:33:00,246 --> 00:33:04,710
on production, but also at each and every other

480
00:33:06,120 --> 00:33:09,684
stages in every other environment. So that

481
00:33:09,802 --> 00:33:13,540
that release and automation is tested throughout.

482
00:33:15,980 --> 00:33:19,716
And it helps the users, it helps

483
00:33:19,748 --> 00:33:23,284
the developers. So SRE will enable and enhance

484
00:33:23,332 --> 00:33:27,112
the velocity like they will use the error budgets,

485
00:33:27,176 --> 00:33:31,352
build platforms and provide dev teams with the development

486
00:33:31,496 --> 00:33:35,720
frameworks and templatized configurations to speed up reviews.

487
00:33:35,880 --> 00:33:39,164
So they will create the infrastructure as code, they will give

488
00:33:39,202 --> 00:33:42,432
it to the developers, to the testers, so that with a push of a button,

489
00:33:42,486 --> 00:33:47,296
they can create those environments and test it on

490
00:33:47,318 --> 00:33:51,320
those environments. The same release and deployment automation

491
00:33:51,420 --> 00:33:55,424
which they can use to deploy in each environment

492
00:33:55,472 --> 00:33:58,960
to test. So SRE

493
00:33:59,120 --> 00:34:02,704
shift left to build in resilience by design in the development

494
00:34:02,752 --> 00:34:06,584
lifecycle. So they are involved in bringing that

495
00:34:06,622 --> 00:34:10,292
wisdom in production, the wisdom of production

496
00:34:10,436 --> 00:34:14,200
to the entire deliveries lifecycle. Starting from ideation.

497
00:34:15,420 --> 00:34:18,872
They will help and guide the developers,

498
00:34:18,936 --> 00:34:22,556
the testers, so that when they complete the work in

499
00:34:22,578 --> 00:34:26,872
that stage, it is something which is deployable

500
00:34:27,016 --> 00:34:30,416
in the production, and it is not going to affect the

501
00:34:30,438 --> 00:34:33,920
production in a negative manner.

502
00:34:35,380 --> 00:34:38,560
As I said, everything is a systems problem,

503
00:34:38,630 --> 00:34:42,252
not a human error. So SRes will strive

504
00:34:42,316 --> 00:34:45,876
not to have a cause of an outage repeated. That means there is

505
00:34:45,898 --> 00:34:49,296
no learning. The desire to prevent

506
00:34:49,328 --> 00:34:53,380
such recurrent failure is a very powerful incentive to identify causes.

507
00:34:53,740 --> 00:34:56,676
So sres are responsible for reliability.

508
00:34:56,788 --> 00:35:00,136
That means the same failure should not happen for

509
00:35:00,158 --> 00:35:03,610
the second time. That's the learning that they are talking about.

510
00:35:05,580 --> 00:35:08,904
One of the challenges that we see about root cause analysis

511
00:35:08,952 --> 00:35:12,236
is that the root cause is just the place where we decide we

512
00:35:12,258 --> 00:35:16,030
know enough to stop analyzing and trying to learn more.

513
00:35:17,120 --> 00:35:20,752
Sres don't stop there. Sre try to see. Okay, fine.

514
00:35:20,806 --> 00:35:24,640
Now we have understood the problem in the current

515
00:35:24,790 --> 00:35:28,290
scenario, what in future?

516
00:35:28,900 --> 00:35:30,960
What in a different scenario.

517
00:35:34,840 --> 00:35:38,084
So we have to see that what will

518
00:35:38,122 --> 00:35:41,364
happen in the future, even with our

519
00:35:41,402 --> 00:35:44,952
root cause, and continue to find out ways

520
00:35:45,006 --> 00:35:46,920
to make the system more reliable.

521
00:35:48,380 --> 00:35:51,924
So we have to move to think about the contributing

522
00:35:51,972 --> 00:35:55,432
factors if we know what happened, where things

523
00:35:55,486 --> 00:35:58,956
went wrong. Let's explore the system as a whole and

524
00:35:58,978 --> 00:36:02,332
all the events and conditions leading to the outage. Again,

525
00:36:02,386 --> 00:36:05,804
this is related to the point fixing. We are not looking

526
00:36:05,842 --> 00:36:09,472
at only point fixing the current problem, but all things

527
00:36:09,526 --> 00:36:13,008
that may lead to it, all things that this can cause

528
00:36:13,094 --> 00:36:16,656
in future. And as I

529
00:36:16,678 --> 00:36:20,080
said, it's always a problem of the system, not a human

530
00:36:20,150 --> 00:36:23,876
problem. SRE is not

531
00:36:23,898 --> 00:36:28,116
about only automation. This is again another kind

532
00:36:28,138 --> 00:36:32,116
of thing that I see. Many organizations are taking more and more

533
00:36:32,138 --> 00:36:35,784
software developers, because they have heard that SREs are

534
00:36:35,822 --> 00:36:39,400
developers. So they are taking

535
00:36:39,470 --> 00:36:42,920
in a lot of developers, and the only thing they sre doing is automating

536
00:36:43,500 --> 00:36:46,924
a lot of things. The point is we have to be

537
00:36:46,962 --> 00:36:50,364
very, very clear as to why we are

538
00:36:50,402 --> 00:36:51,180
automating.

539
00:36:53,120 --> 00:36:56,616
And that has to tie to the measurement.

540
00:36:56,808 --> 00:37:00,240
Do we really measure what we are automating?

541
00:37:00,580 --> 00:37:04,428
Our project is over successful the moment we have implemented

542
00:37:04,524 --> 00:37:08,272
something. No, that is the starting point. The value

543
00:37:08,326 --> 00:37:12,452
creation starts only when the users SRE using

544
00:37:12,586 --> 00:37:15,140
the product or service that you have created.

545
00:37:16,120 --> 00:37:21,476
If that is the case, then the

546
00:37:21,498 --> 00:37:25,496
value creation starts only when the implementation of

547
00:37:25,518 --> 00:37:28,984
automation is done. I've seen scenarios where people have

548
00:37:29,022 --> 00:37:32,984
automated and then when they start measuring, they have found

549
00:37:33,102 --> 00:37:37,096
that the automation has now created more problem

550
00:37:37,198 --> 00:37:40,876
and it is taking more time for them to do the work opposed to what

551
00:37:40,898 --> 00:37:44,140
it was earlier. We have to also understand

552
00:37:44,290 --> 00:37:47,516
that there is a constraint of resources, constraint of

553
00:37:47,538 --> 00:37:51,072
fund, constraints of time. So we need to

554
00:37:51,126 --> 00:37:54,412
prioritize what is most important and automate

555
00:37:54,476 --> 00:37:58,448
that SRE needs to do that prioritization based

556
00:37:58,534 --> 00:38:01,956
on facts and data, not on

557
00:38:01,978 --> 00:38:03,830
the basis of what we feel.

558
00:38:05,320 --> 00:38:09,316
It is also important that we should allow the people who

559
00:38:09,338 --> 00:38:12,880
are doing the work to decide on the automation to decide

560
00:38:12,960 --> 00:38:19,850
on the tools that is going to be used and

561
00:38:20,220 --> 00:38:23,796
for scaling along with the value stream

562
00:38:23,828 --> 00:38:25,690
team. Along with the product team,

563
00:38:26,400 --> 00:38:30,572
SREs can take the ownership of the platform,

564
00:38:30,706 --> 00:38:34,792
the entire CI CD pipeline and the release deployment

565
00:38:34,856 --> 00:38:38,508
up to production can be created as a platform

566
00:38:38,594 --> 00:38:42,320
and SRE can provide that platform as a service to the

567
00:38:42,390 --> 00:38:45,952
product teams to the value stream teams. That is

568
00:38:46,006 --> 00:38:48,560
the best combination for scaling.

569
00:38:49,300 --> 00:38:52,790
And why do we talk about SRE taking the

570
00:38:53,880 --> 00:38:58,212
responsibility of the platform? Because today what

571
00:38:58,266 --> 00:39:01,910
the developers are using the same tools is what the

572
00:39:02,280 --> 00:39:04,500
operations is maintaining.

573
00:39:05,340 --> 00:39:08,040
If developers are using kubernetes,

574
00:39:09,260 --> 00:39:12,788
production is also having kubernetes. If you are using dockers

575
00:39:12,884 --> 00:39:15,160
here also you are using dockers.

576
00:39:15,980 --> 00:39:20,184
The entire definition

577
00:39:20,232 --> 00:39:24,540
of done has changed. Definition of done has extended to production

578
00:39:24,880 --> 00:39:28,792
as per DevOps. The work is not complete until

579
00:39:28,866 --> 00:39:32,320
unless it is tested in production by actual

580
00:39:32,390 --> 00:39:35,868
users. So you use things like a b testing, blue green testing,

581
00:39:36,044 --> 00:39:39,552
canary testing, where is it done

582
00:39:39,686 --> 00:39:43,140
in production with actual delivery

583
00:39:45,880 --> 00:39:49,712
users. That is what sres are facilitating.

584
00:39:49,776 --> 00:39:53,300
So sres have to look at in entirety.

585
00:39:55,320 --> 00:39:58,756
So these are the kind of anti patterns

586
00:39:58,788 --> 00:40:02,344
that I have seen and hope this will help

587
00:40:02,382 --> 00:40:06,216
you to chart your path of SRE journey in

588
00:40:06,238 --> 00:40:08,910
a much better way. Thank you.

589
00:40:09,440 --> 00:40:13,212
And if you have any question, you can always get back

590
00:40:13,266 --> 00:40:17,260
on my email, on my Twitter handle and LinkedIn.

591
00:40:19,040 --> 00:40:22,776
And we as DevOps India Summit

592
00:40:22,808 --> 00:40:27,212
2022 have partnered with Conf fourty two and that

593
00:40:27,266 --> 00:40:31,684
event, that global event is coming up on 26th August 2000 and

594
00:40:31,842 --> 00:40:36,496
from 08:00 a.m. To 08:00 p.m. India time. It's a free registration.

595
00:40:36,688 --> 00:40:40,912
Join us also for more speakers

596
00:40:40,976 --> 00:40:44,870
speaking on various things. Thank you.

