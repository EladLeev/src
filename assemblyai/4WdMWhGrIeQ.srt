1
00:00:25,410 --> 00:00:28,342
You. Hi everyone,

2
00:00:28,476 --> 00:00:31,778
good morning, good afternoon, good evening. My name is Romansh

3
00:00:31,794 --> 00:00:34,822
Yadav. I welcome you all at Con 42.

4
00:00:34,956 --> 00:00:38,294
Thank you for joining. So today we will talk about

5
00:00:38,412 --> 00:00:41,510
attacking defending mobile apps in this session and

6
00:00:41,580 --> 00:00:45,074
below. This is our content for today's session.

7
00:00:45,202 --> 00:00:48,694
We will talk about Android introduction and basic. We will

8
00:00:48,732 --> 00:00:52,106
try to set up Android pen testing environment and we will do reverse

9
00:00:52,138 --> 00:00:55,562
engineering and runtime manipulation. We will also touch Android

10
00:00:55,626 --> 00:00:59,418
components, application components and security issue in Android.

11
00:00:59,514 --> 00:01:02,894
And in the last we will touch defensive tool and techniques

12
00:01:02,942 --> 00:01:06,850
for Android. So let's start with the Android Introduction Basic.

13
00:01:07,430 --> 00:01:11,874
As we know Android is an operating system and here

14
00:01:11,912 --> 00:01:15,774
is the architecture of Android. We have application layer,

15
00:01:15,822 --> 00:01:19,462
then we have application framework, then we have libraries and

16
00:01:19,516 --> 00:01:23,286
Android runtime, and then we have Linux kernel. So we will start from the

17
00:01:23,308 --> 00:01:27,554
Linux kernel. So Linux kernel provides some basic system functionality like

18
00:01:27,612 --> 00:01:31,274
process management, memory management, device management, right.

19
00:01:31,392 --> 00:01:35,782
Kernel also provide the user basic permission model, process isolation,

20
00:01:35,926 --> 00:01:39,046
right? And now we have libraries like we have webkit

21
00:01:39,078 --> 00:01:42,846
libraries, escalate libraries like we use. So these libraries support

22
00:01:42,948 --> 00:01:46,714
our application. Like Webkit libraries support web browsers,

23
00:01:46,762 --> 00:01:50,654
escalate library support, escalate database. So these

24
00:01:50,692 --> 00:01:54,450
are the supportive library that support our application. Now we have

25
00:01:54,520 --> 00:01:58,466
Android runtime, like Android runtime and we have

26
00:01:58,648 --> 00:02:02,766
core libraries and Dalwig virtual machine, right? So like Dalwig

27
00:02:02,798 --> 00:02:06,034
virtual machine which is specifically designed by Android open

28
00:02:06,072 --> 00:02:10,058
source project to execute applications written for Android.

29
00:02:10,254 --> 00:02:13,826
Each apps training in the Android device has its own Dalwick

30
00:02:13,858 --> 00:02:17,586
virtual machine and Android runtime is an alternative to Dalvig virtual

31
00:02:17,618 --> 00:02:21,242
machine which has been released with Android four as

32
00:02:21,296 --> 00:02:25,290
an experiment release. Like in Android Lollipop, it will be complete,

33
00:02:25,360 --> 00:02:29,126
replaced by Dalvik Virtual Machine. I mean art will replace Dalvig

34
00:02:29,158 --> 00:02:32,414
virtual machine in Android Lollipop. So the

35
00:02:32,452 --> 00:02:36,574
changes in art is like ahead of time. We call

36
00:02:36,612 --> 00:02:40,014
it arts ahead of time compilation. So basically there are

37
00:02:40,052 --> 00:02:43,914
two terms like one is Jet git,

38
00:02:43,962 --> 00:02:48,142
sorry, just in time compilation in which bytecode are compiled.

39
00:02:48,206 --> 00:02:52,194
Bytecode are compiled when users run the apps. But in

40
00:02:52,312 --> 00:02:55,734
AoT ahead of time compilation, Android apps will

41
00:02:55,772 --> 00:02:59,250
be compiled when user installed them on their device.

42
00:02:59,330 --> 00:03:03,186
Right. When we are installing the app that time whitecode

43
00:03:03,218 --> 00:03:07,046
compiled in AoT ahead of time compilation. Now application

44
00:03:07,148 --> 00:03:10,794
framework, right? Like application framework layer provide many high

45
00:03:10,832 --> 00:03:14,490
level services to the application in the form of Java classes

46
00:03:14,910 --> 00:03:18,966
like activity manager, window manager, content provider, content provider

47
00:03:18,998 --> 00:03:22,254
is used to share data with one app to other app,

48
00:03:22,292 --> 00:03:25,758
right? Notification Manager, broadcast, we will see here some

49
00:03:25,844 --> 00:03:30,014
broadcast receiver also here, right? And at

50
00:03:30,052 --> 00:03:33,506
the layer of application we have application all whatever we install

51
00:03:33,608 --> 00:03:36,334
the application that come on the application layer.

52
00:03:36,382 --> 00:03:40,158
So this is the Android architecture

53
00:03:40,254 --> 00:03:43,986
and we can see here different, different layer, right. And we

54
00:03:44,008 --> 00:03:48,130
will see in upcoming slides which layer

55
00:03:48,290 --> 00:03:51,782
used to do what kind of stuff. Right now

56
00:03:51,836 --> 00:03:54,438
this is some fundamental Android application.

57
00:03:54,524 --> 00:03:58,246
Fundamental Android apps are written in the Java programming language

58
00:03:58,358 --> 00:04:02,234
as we know. But nowadays like we can develop, we have

59
00:04:02,272 --> 00:04:05,670
some many multiplatform frameworks like Kotline,

60
00:04:05,750 --> 00:04:09,562
like Flutter. So we can develop multiplatform application within

61
00:04:09,616 --> 00:04:12,870
one framework, right? But at the back end at the basic,

62
00:04:12,950 --> 00:04:16,974
the part of Android is written in Java programming language. So this

63
00:04:17,012 --> 00:04:20,474
is the Android file system structure. We can see it's

64
00:04:20,522 --> 00:04:24,174
based on Linux so the file system strip iOS similar to

65
00:04:24,212 --> 00:04:27,554
Linux. We have root ATC and we can see sd card

66
00:04:27,592 --> 00:04:31,154
and external sd card. If we put any external sd card, sd card.

67
00:04:31,192 --> 00:04:35,246
So we will see the external sd card folder here. This is the Android

68
00:04:35,278 --> 00:04:38,566
permission model and sandboxing as we know that it is managed by

69
00:04:38,588 --> 00:04:42,114
the kernel Linux kernel. So Android assign a unique user

70
00:04:42,162 --> 00:04:45,462
id to each Android application. Suppose we install a app,

71
00:04:45,516 --> 00:04:49,658
one, app two. So every app will get a unique user id that is used

72
00:04:49,744 --> 00:04:52,986
because Android use the UID to set up a kernel level application

73
00:04:53,088 --> 00:04:56,460
sandbox. So if suppose here we can see data,

74
00:04:57,390 --> 00:05:01,114
this is a kind of sandbox that this

75
00:05:01,152 --> 00:05:04,666
app cannot access the data of app two or app two cannot

76
00:05:04,698 --> 00:05:08,122
access the data of app two. So app one. So this is related

77
00:05:08,186 --> 00:05:11,422
to the all sandboxing, right? This is the process of building

78
00:05:11,476 --> 00:05:15,222
apk. Like suppose we want to build an apk.

79
00:05:15,306 --> 00:05:19,026
Now we have a Java code. Then we convert the Java code into

80
00:05:19,048 --> 00:05:22,606
bytecode with the help of the Java compiler. Then we convert

81
00:05:22,638 --> 00:05:26,286
bytecode into the DeX code with the help of Dex compiler.

82
00:05:26,318 --> 00:05:29,862
Then we build the apk, right? So that apk we can

83
00:05:29,996 --> 00:05:33,794
install into our system, into our emulator

84
00:05:33,842 --> 00:05:37,634
or into a mobile operating system. This is the Android components we have activity

85
00:05:37,682 --> 00:05:41,030
activity is a screen. So we see login screen, vc,

86
00:05:41,110 --> 00:05:45,030
register screen, vc, whatever the screen is that we call activity

87
00:05:45,110 --> 00:05:48,438
services. Like suppose we are listening music in the background,

88
00:05:48,614 --> 00:05:51,726
we are doing some chatting, so the

89
00:05:51,748 --> 00:05:55,758
background service is called a service, music is called service. Then we

90
00:05:55,764 --> 00:05:59,870
have broadcast receiver. Like suppose we want to give a

91
00:05:59,940 --> 00:06:03,626
broadcast notification to each and every of that. The battery

92
00:06:03,658 --> 00:06:07,282
is down, we receive battery down, broadcast receiver. And so many

93
00:06:07,336 --> 00:06:10,734
broadcast receiver like notifications also comes into broadcast receiver,

94
00:06:10,782 --> 00:06:14,434
right? A content provider. We use content provider like we share

95
00:06:14,472 --> 00:06:18,262
data one data to other one data from

96
00:06:18,316 --> 00:06:22,440
one app to other apps. So we use content provider and

97
00:06:22,810 --> 00:06:26,226
we have intent also so intent bind individually component

98
00:06:26,258 --> 00:06:29,174
to each other at runtime. Suppose we are running two,

99
00:06:29,212 --> 00:06:33,218
three, four app and suppose we want to open a link and

100
00:06:33,244 --> 00:06:35,866
we see a link in the mobile app and we click on that will go

101
00:06:35,888 --> 00:06:39,322
to web browser. So that will happen

102
00:06:39,376 --> 00:06:42,734
with the help of intent. Okay, now let's see, let's set

103
00:06:42,772 --> 00:06:46,810
up the pen testing environment lab. So I would suggest

104
00:06:46,890 --> 00:06:50,746
if you are new so you can download directly mobile

105
00:06:50,778 --> 00:06:54,134
access. This is the operating system and this is a complete vm.

106
00:06:54,202 --> 00:06:57,902
It will come up with all the tools that require for Android

107
00:06:57,966 --> 00:07:01,666
and as well as iOS pen testing. And if

108
00:07:01,688 --> 00:07:05,666
you are like suppose you

109
00:07:05,688 --> 00:07:09,142
want to create lab for your own, you want to install each

110
00:07:09,196 --> 00:07:13,186
and every tool step by step, one by one. Then you can download Jenny

111
00:07:13,218 --> 00:07:16,466
motion, you can download apps, apps, iOS, a toolkit

112
00:07:16,498 --> 00:07:20,006
that has eight to ten, eight to ten tool for Android

113
00:07:20,038 --> 00:07:23,466
pen testing. And then you

114
00:07:23,488 --> 00:07:27,210
can install any custom image of Android iOS. And then

115
00:07:27,360 --> 00:07:31,142
you can install the ADB Android debug bridge.

116
00:07:31,206 --> 00:07:34,686
And then you can start with the Android pen testing. So I will show

117
00:07:34,708 --> 00:07:38,190
you. This is my Jenny motion here. You can see

118
00:07:38,260 --> 00:07:41,870
this is my Jenny motion here. And suppose I am running this

119
00:07:41,940 --> 00:07:45,586
emulator or I will close it and I will start again. As you

120
00:07:45,608 --> 00:07:49,374
can see it is starting. So Jenny motion

121
00:07:49,422 --> 00:07:52,754
need virtualbox. So you need to have virtualbox in your

122
00:07:52,872 --> 00:07:57,058
iOS and okay it is starting, it's almost started

123
00:07:57,144 --> 00:08:00,486
and you can do some configuration as well. So you want

124
00:08:00,508 --> 00:08:03,686
to take it on net or you want to right now

125
00:08:03,708 --> 00:08:07,174
we cannot edit it, but you can change the network as well. Bridge or

126
00:08:07,212 --> 00:08:10,826
Nat, whatever you want. Because the system

127
00:08:10,928 --> 00:08:15,386
what you are using should be on same network, right? Suppose now

128
00:08:15,488 --> 00:08:18,906
I have already installed the ADB. ADB is

129
00:08:18,928 --> 00:08:22,106
a Android debug bridge. So you can see we have so many

130
00:08:22,208 --> 00:08:25,966
options in ADB, we can do push, suppose we want to do some

131
00:08:25,988 --> 00:08:28,942
push some file to the Android emulator, we can do that.

132
00:08:28,996 --> 00:08:32,474
If we want to pull any file from Android emulator

133
00:08:32,522 --> 00:08:35,918
we can do that too. And then, okay, now there is a

134
00:08:35,924 --> 00:08:39,602
command to check if device is listed or not. Here you can see yes,

135
00:08:39,656 --> 00:08:42,814
device is listed and we can give a command and ADB shell.

136
00:08:42,862 --> 00:08:46,146
So now we are into the Android emulator. You can see who I

137
00:08:46,168 --> 00:08:49,574
am root, right? We can see all these files here.

138
00:08:49,612 --> 00:08:52,966
Now we will exit it from here. So this is all about

139
00:08:53,068 --> 00:08:56,598
setting up the Android pen testing lab because we have only

140
00:08:56,684 --> 00:08:59,866
40 minutes to complete this session. So that's why I

141
00:08:59,888 --> 00:09:04,074
am little bit going fast, right, so this is here.

142
00:09:04,192 --> 00:09:07,434
Now this is the mobile access, you can download it

143
00:09:07,472 --> 00:09:10,926
from Google, you will find it. So this is

144
00:09:11,028 --> 00:09:12,640
complete if I.

145
00:09:18,010 --> 00:09:18,760
Okay,

146
00:09:26,020 --> 00:09:29,920
yeah. So you can see the tools

147
00:09:30,580 --> 00:09:34,284
that already install in the mobile

148
00:09:34,332 --> 00:09:38,028
access Zdex leader GDGI Lockhead

149
00:09:38,044 --> 00:09:41,876
padcad whitecode viewer. It is a complete

150
00:09:41,978 --> 00:09:45,528
vm for mobile Pen testing. Like you can do Android and

151
00:09:45,534 --> 00:09:49,064
iOS as well. You can see here so many tools here,

152
00:09:49,102 --> 00:09:52,680
iOS John, Android, John, and all you can see here,

153
00:09:52,750 --> 00:09:56,532
right, bub suit and you can see Iogen

154
00:09:56,596 --> 00:09:59,048
passive suit is there for Android, iOS,

155
00:09:59,144 --> 00:10:00,910
MOFs is there for.

156
00:10:01,920 --> 00:10:05,150
So we are all set with our lab.

157
00:10:05,600 --> 00:10:09,632
If you face any problem then please message me.

158
00:10:09,766 --> 00:10:13,920
I will drop my email. So you can message

159
00:10:13,990 --> 00:10:17,632
me or you can email me right now.

160
00:10:17,686 --> 00:10:21,564
We will move forward, we will try to now deep

161
00:10:21,612 --> 00:10:25,376
into mobile pen testing approach. So there are two types of mobile

162
00:10:25,408 --> 00:10:29,204
pen testing approach. First, static pen testing and then

163
00:10:29,322 --> 00:10:33,056
dynamic pen testing. So static pen testing, we do static

164
00:10:33,088 --> 00:10:36,216
pen testing when app is not running. App is like

165
00:10:36,238 --> 00:10:39,944
in a rest mode. Suppose we get ApK and we

166
00:10:39,982 --> 00:10:43,496
are not going to install the apk. We have to just do some

167
00:10:43,518 --> 00:10:46,840
decompilation, decompilation signing, try to,

168
00:10:46,990 --> 00:10:50,232
try to dig into the application without running it on the emulator,

169
00:10:50,296 --> 00:10:53,384
right? So it's called like static pen testing.

170
00:10:53,432 --> 00:10:56,712
When we install the application, we try to intercept the traffic.

171
00:10:56,856 --> 00:11:00,540
We see the traffic in burp suit and then we try to

172
00:11:00,690 --> 00:11:04,432
do some access controlled issue, some token related issue,

173
00:11:04,566 --> 00:11:08,336
and we try to manipulate some data that, and sometimes we try to

174
00:11:08,358 --> 00:11:12,160
hook the app by using serial tool.

175
00:11:12,310 --> 00:11:15,916
We try to do some runtime manipulation that call dynamic

176
00:11:15,948 --> 00:11:19,460
that's come into the dynamic pen testing approach.

177
00:11:21,160 --> 00:11:25,244
Okay, now let's do some reverse engineering.

178
00:11:25,312 --> 00:11:28,996
So we will start with static

179
00:11:29,028 --> 00:11:32,724
pen testing. We have already an app, it's called Piva.

180
00:11:32,772 --> 00:11:36,140
So you guys can download it again.

181
00:11:36,210 --> 00:11:38,510
You will find it. It is a very good app.

182
00:11:39,120 --> 00:11:41,790
I also type the link,

183
00:11:43,280 --> 00:11:46,956
this one. This is a very good app for the

184
00:11:46,978 --> 00:11:50,524
beginners as well, right? Basically beginners can easily

185
00:11:50,572 --> 00:11:54,064
run it and it contains so many vulnerability as

186
00:11:54,102 --> 00:11:57,388
well. So like reverse engineering.

187
00:11:57,484 --> 00:12:01,284
Now, reverse engineering is a process where we try to

188
00:12:01,322 --> 00:12:04,464
extract the code from APK.

189
00:12:04,592 --> 00:12:10,722
So we will use the tool, APK tool for

190
00:12:10,776 --> 00:12:14,260
reverse engineering. So we can see here,

191
00:12:17,620 --> 00:12:20,370
it is already there. So I will remove it.

192
00:12:27,900 --> 00:12:28,650
Okay.

193
00:12:42,810 --> 00:12:46,842
So it will override it. No problem. So now APK tool

194
00:12:46,896 --> 00:12:49,654
is like you can see here, loading table resources,

195
00:12:49,702 --> 00:12:52,902
decoding Android fest file, then loading resource,

196
00:12:52,966 --> 00:12:56,426
then regular, then decoding file resource. So it

197
00:12:56,448 --> 00:13:01,034
will decompile this. Right now, if we go into this

198
00:13:01,072 --> 00:13:05,162
directory, we can see so many files, smallly original.

199
00:13:05,226 --> 00:13:08,750
We can see Android manifest file. Now after

200
00:13:08,820 --> 00:13:12,834
doing the decompile of the ApK. Our first job

201
00:13:12,952 --> 00:13:17,294
should be like understanding the Android manifest

202
00:13:17,342 --> 00:13:20,558
file. Now what is Android manifest file? Android manifest file

203
00:13:20,574 --> 00:13:24,546
iOS the central file of the complete

204
00:13:24,648 --> 00:13:28,162
Android application. So whatever Android application is using,

205
00:13:28,216 --> 00:13:31,382
how many activities are there, what kind of permission they are using.

206
00:13:31,436 --> 00:13:34,774
They're asking for the user how many broadcast receiver, how many

207
00:13:34,812 --> 00:13:39,426
content provider, all are mentioned inside the Android

208
00:13:39,458 --> 00:13:42,934
manifest file. If any activity is

209
00:13:42,972 --> 00:13:46,310
exported, is there any broadcast receiver or broadcast

210
00:13:47,370 --> 00:13:51,518
whatever they have exported? Everything is mentioned

211
00:13:51,604 --> 00:13:55,454
inside the Android Menson file. You can see

212
00:13:55,492 --> 00:13:58,640
here sorry get account,

213
00:13:59,090 --> 00:14:02,786
read profile, read contain and now you can see here

214
00:14:02,968 --> 00:14:06,590
write external storage permission. Read external storage permission,

215
00:14:06,750 --> 00:14:10,306
right. Cell phone so everything mentioned

216
00:14:10,408 --> 00:14:13,766
inside the Android mansource file and we will

217
00:14:13,788 --> 00:14:17,190
see here some backup. Yes, backup. Backup is true.

218
00:14:17,260 --> 00:14:20,950
So anyone can take user can take the backup,

219
00:14:21,370 --> 00:14:26,474
right? So after that we

220
00:14:26,512 --> 00:14:29,786
can go in assets, we can see

221
00:14:29,888 --> 00:14:32,620
assets. It is not any sensitive information.

222
00:14:35,150 --> 00:14:38,894
Json.com now the thing that

223
00:14:38,932 --> 00:14:43,246
we have to see is string. Also it

224
00:14:43,268 --> 00:14:53,674
will come in resource, I guess classes

225
00:14:53,722 --> 00:14:57,422
build ss excellent Java. So we can go step

226
00:14:57,476 --> 00:15:02,962
one by one by one and we can see and

227
00:15:03,016 --> 00:15:05,250
explore each and every file.

228
00:15:07,270 --> 00:15:10,626
We can see this string here value,

229
00:15:10,728 --> 00:15:14,290
value, right? Sometimes what happened,

230
00:15:14,360 --> 00:15:18,566
they mention some authorization inside the

231
00:15:18,588 --> 00:15:22,314
script. So iOS, the admin is yes or no. So that

232
00:15:22,352 --> 00:15:26,218
kind of stuff sometimes nowadays it's not happened, but sometimes they

233
00:15:26,224 --> 00:15:34,276
have mentioned in the side this string file and

234
00:15:34,298 --> 00:15:39,980
then you can see original again

235
00:15:40,050 --> 00:15:43,470
the file metanfo you can see certificate here.

236
00:15:44,240 --> 00:15:47,772
You can see the certificate, right?

237
00:15:47,826 --> 00:15:49,260
It's a signed certificate.

238
00:15:54,880 --> 00:15:58,236
Okay, so the point is like we can

239
00:15:58,258 --> 00:16:01,816
decompile the application, we can read the Android manifest

240
00:16:01,848 --> 00:16:05,880
file, we can read all the files. If we know the smally,

241
00:16:05,960 --> 00:16:10,208
if we understand the smally, we can also see the smally so

242
00:16:10,294 --> 00:16:14,032
that it will give us the idea that what kind of vulnerability we can find

243
00:16:14,086 --> 00:16:18,370
easily. What is the hanging fruits right now

244
00:16:19,540 --> 00:16:22,628
there iOS a different thing. Like suppose we want to tamper application.

245
00:16:22,714 --> 00:16:26,340
So suppose tampering is a process. When we change some data,

246
00:16:26,410 --> 00:16:30,176
like suppose we want to do backup is false,

247
00:16:30,208 --> 00:16:34,296
we want to backup is true, or we want to do some code

248
00:16:34,398 --> 00:16:37,800
change in smally files, then we have to

249
00:16:37,870 --> 00:16:41,528
write some small code inside the application, right? So whatever,

250
00:16:41,614 --> 00:16:45,036
we will change it and we will temper it. Then we have

251
00:16:45,058 --> 00:16:48,316
to again recompile it, resign it. Then again we can

252
00:16:48,338 --> 00:16:52,188
install it inside the emulator. So we

253
00:16:52,194 --> 00:16:56,556
have done the decompilation, right? Smallly code. Now there

254
00:16:56,578 --> 00:17:00,844
is a different tool, d two jdex

255
00:17:00,892 --> 00:17:04,112
two jar. So what this tool do?

256
00:17:04,246 --> 00:17:07,456
It will create a jar file and we can directly open that

257
00:17:07,478 --> 00:17:11,012
jar file into the, it is also a Java decompiler so

258
00:17:11,066 --> 00:17:14,564
it will create a jar file and then we can open

259
00:17:14,602 --> 00:17:18,870
jar file into jdgui. It's a very nice, we will also try this,

260
00:17:20,280 --> 00:17:23,976
okay, we will try here. So this

261
00:17:23,998 --> 00:17:28,104
is Java decompiler Jdgui and

262
00:17:28,302 --> 00:17:32,792
this is here we can see our

263
00:17:32,846 --> 00:17:37,516
application. Now we

264
00:17:37,538 --> 00:17:42,644
will try to dex

265
00:17:42,692 --> 00:17:46,404
to jar. Right now we will give the file

266
00:17:46,452 --> 00:17:47,050
name,

267
00:17:52,540 --> 00:17:53,290
okay,

268
00:17:57,770 --> 00:18:01,574
it's successful. Now we will try to open this jar file into

269
00:18:01,692 --> 00:18:05,350
Java decompiler. So we can

270
00:18:05,420 --> 00:18:11,418
go directly into this path here.

271
00:18:11,504 --> 00:18:14,858
We can open it so

272
00:18:15,024 --> 00:18:18,974
we can see here Android this is here all

273
00:18:19,012 --> 00:18:22,202
activity we can see about classes,

274
00:18:22,266 --> 00:18:26,350
botcard classes, build config. We can see here debug mode.

275
00:18:28,370 --> 00:18:31,950
So suppose we want to search anything. We can search

276
00:18:32,020 --> 00:18:35,870
it also we can see, okay, database created classes

277
00:18:35,950 --> 00:18:39,362
here. Suppose we want to search anything. We want to suppose search

278
00:18:39,416 --> 00:18:43,546
username, right? So we will enable it filled string,

279
00:18:43,598 --> 00:18:47,046
right? Yes, username. So we

280
00:18:47,068 --> 00:18:48,680
will see here authentication class.

281
00:18:51,490 --> 00:18:59,862
This is like username and

282
00:18:59,916 --> 00:19:04,804
this is username

283
00:19:04,852 --> 00:19:08,376
test. You can see hard coded, right? We can

284
00:19:08,398 --> 00:19:12,500
see password, hard coded here also very complicated

285
00:19:12,580 --> 00:19:15,944
password. You can see test users, right? So these are,

286
00:19:15,982 --> 00:19:19,612
you can see access. This is inside the

287
00:19:19,746 --> 00:19:23,550
application. So this is

288
00:19:24,000 --> 00:19:27,500
all about the decompilation.

289
00:19:28,500 --> 00:19:32,080
We have to move forward. So you can search anything,

290
00:19:32,230 --> 00:19:35,744
but you want to search password. You can

291
00:19:35,782 --> 00:19:39,410
search password. You will see here, okay, let me

292
00:19:41,720 --> 00:19:44,950
again. Password here

293
00:19:47,720 --> 00:19:50,420
and then you can see here password,

294
00:19:51,800 --> 00:19:55,956
you can see here, right? So suppose you want to search any API

295
00:19:55,988 --> 00:20:02,426
key, any inbuilt API key API.

296
00:20:02,538 --> 00:20:06,094
You can search API. So if

297
00:20:06,132 --> 00:20:09,714
there is any API key that you will find here, right?

298
00:20:09,832 --> 00:20:14,610
If you can search about keys token,

299
00:20:16,150 --> 00:20:21,142
these are some keyboards that you can search inside the

300
00:20:21,196 --> 00:20:24,166
application. Okay,

301
00:20:24,268 --> 00:20:27,926
now let's move to the next part as we

302
00:20:27,948 --> 00:20:31,590
see, okay, we have already see the Android Menson file service.

303
00:20:31,660 --> 00:20:35,566
Continue provide activity broadcast need to be mentioned in the Android menus

304
00:20:35,618 --> 00:20:39,594
file permission and exported services. Right now

305
00:20:39,792 --> 00:20:43,318
we will try to recompile the app. We already recompiled

306
00:20:43,334 --> 00:20:47,574
the app right now. We will try to rebuild

307
00:20:47,622 --> 00:20:51,150
it and resign it. And then we will try to again

308
00:20:51,220 --> 00:20:55,214
install this app, right? So, okay, it's very

309
00:20:55,252 --> 00:20:58,180
simple. We can do this with the help of APK tool.

310
00:20:59,430 --> 00:21:02,100
So now I'm going to change something.

311
00:21:02,950 --> 00:21:04,820
I will change very small,

312
00:21:06,390 --> 00:21:09,880
like suppose I want to make this,

313
00:21:10,250 --> 00:21:14,550
it's already true, but okay, let's make it false.

314
00:21:20,690 --> 00:21:27,660
Okay, make it debuggable false. Also right

315
00:21:28,210 --> 00:21:30,000
now we have made some changes.

316
00:21:39,830 --> 00:21:42,446
We have to give the folder name Piva.

317
00:21:42,638 --> 00:21:45,460
Now we will try to build it.

318
00:21:46,650 --> 00:21:50,390
So we will get APK inside this

319
00:21:50,460 --> 00:21:53,890
Piva folder. Build APK successful.

320
00:21:53,970 --> 00:21:58,498
Here we can see we will go to Piva

321
00:21:58,514 --> 00:22:02,202
folder, we will go to test destination and

322
00:22:02,256 --> 00:22:05,766
here you can see we got this apk

323
00:22:05,798 --> 00:22:09,066
bit. But this is not signed APK, right?

324
00:22:09,168 --> 00:22:13,034
So again we have to sign it with any Java signer,

325
00:22:13,082 --> 00:22:16,094
right? We have a signer. So what I will do it.

326
00:22:16,132 --> 00:22:17,600
I will copy this.

327
00:22:20,890 --> 00:22:25,074
First I want to change this name, right new

328
00:22:25,132 --> 00:22:30,280
one APK.

329
00:22:31,660 --> 00:22:34,984
Then I will copy it one,

330
00:22:35,022 --> 00:22:35,930
two, yeah.

331
00:22:48,520 --> 00:22:51,896
Okay now I want

332
00:22:51,918 --> 00:22:53,050
to copy this.

333
00:23:03,820 --> 00:23:07,240
Here we will find this one.

334
00:23:07,310 --> 00:23:11,064
So this is the new one, right? This iOS the new one.

335
00:23:11,182 --> 00:23:14,564
Now we already build

336
00:23:14,622 --> 00:23:18,044
our APK. Now we have to sign it. So we need a

337
00:23:18,082 --> 00:23:22,620
signer. We have already signed up so this is our signer. In this directory

338
00:23:24,900 --> 00:23:34,080
we will again go to this Java,

339
00:23:36,340 --> 00:23:41,100
Java, right and we need the file name so

340
00:23:41,270 --> 00:23:47,190
we can easily give the file name here.

341
00:23:53,560 --> 00:23:58,020
Okay jar

342
00:23:59,960 --> 00:24:01,610
sign jar sorry.

343
00:24:06,220 --> 00:24:10,072
Right now we will get the new

344
00:24:10,126 --> 00:24:12,760
signed apk at this path, same path.

345
00:24:19,060 --> 00:24:22,576
This one. This is the new signed one, right? So we will change

346
00:24:22,598 --> 00:24:30,152
iOS name hello

347
00:24:30,206 --> 00:24:34,170
new we'll make it hello new

348
00:24:34,540 --> 00:24:37,630
okay now we have a hello new, right?

349
00:24:39,200 --> 00:24:41,470
So now we are going to install this.

350
00:24:45,750 --> 00:24:48,660
First let me uninstall this one.

351
00:24:54,200 --> 00:24:57,972
Uninstall finish. Okay, right now

352
00:24:58,026 --> 00:25:01,930
this is uninstalled. Now what I will do, I will install new one

353
00:25:02,460 --> 00:25:06,600
Adb install hello

354
00:25:06,670 --> 00:25:10,364
new and okay we

355
00:25:10,402 --> 00:25:13,964
got the success. We can see here if the application has been

356
00:25:14,002 --> 00:25:19,436
installed. Let's check it. Okay this

357
00:25:19,458 --> 00:25:23,232
is there and we can even see their test and

358
00:25:23,286 --> 00:25:32,044
we can see the password is there, right we

359
00:25:32,082 --> 00:25:34,270
can see the password is here,

360
00:25:40,160 --> 00:25:41,500
very complicated.

361
00:25:44,000 --> 00:25:47,390
We can copy it and

362
00:25:51,670 --> 00:26:00,280
we can paste it here,

363
00:26:00,730 --> 00:26:04,054
right we have login and we can see there are

364
00:26:04,092 --> 00:26:07,430
so many okay this is stb ssl

365
00:26:07,770 --> 00:26:11,446
web uas vulnerability. So now after login inside

366
00:26:11,548 --> 00:26:15,670
the application let's go to about the project and

367
00:26:15,740 --> 00:26:19,994
try to understand the project. So here we can see list

368
00:26:20,032 --> 00:26:23,630
of vulnerability cover in this project. So there are

369
00:26:23,780 --> 00:26:27,406
so many vulnerabilities lists that this application will

370
00:26:27,428 --> 00:26:30,942
cover. Suppose like this, I mean these are

371
00:26:30,996 --> 00:26:35,498
not so risky vulnerabilities but it

372
00:26:35,604 --> 00:26:38,958
all depend on the application nature and behavior.

373
00:26:39,054 --> 00:26:43,220
Like uses of weak initialization vector possible man in the middle attack

374
00:26:44,390 --> 00:26:47,890
remote URL load in web view object desolation found

375
00:26:47,960 --> 00:26:52,146
right enable debug mode weak encryption hard coded encryption

376
00:26:52,178 --> 00:26:55,814
key as we've seen hard coded username and password dynamic load of code

377
00:26:55,852 --> 00:26:59,414
creation of world readable item file as sometimes what

378
00:26:59,452 --> 00:27:03,574
happened app create a world readable and item file inside the external

379
00:27:03,622 --> 00:27:07,910
storage, right? Or maybe internal storage use of uncreative

380
00:27:08,070 --> 00:27:11,494
app is communicating in ACET protocol weak hashing

381
00:27:11,542 --> 00:27:14,574
algorithm app is using MD four, Shaw one or MD five

382
00:27:14,692 --> 00:27:18,714
kind of algorithm that is weak app iOS creating predictable

383
00:27:18,842 --> 00:27:23,034
numbers generator function app is using suppose

384
00:27:23,082 --> 00:27:26,900
they are using just s random. So basically

385
00:27:27,430 --> 00:27:30,990
there are so many number of vulnerabilities

386
00:27:31,150 --> 00:27:35,278
you can find in this application and you can do your practice.

387
00:27:35,454 --> 00:27:39,158
It will be very helpful and it will be a very learning experience.

388
00:27:39,244 --> 00:27:42,950
You can see part traversal is there self signed ca enabled in webview clear

389
00:27:43,020 --> 00:27:46,710
test HTTP js

390
00:27:47,130 --> 00:27:50,754
temporary file creation is there displayed set pluginistic

391
00:27:50,802 --> 00:27:54,886
in webview untrusted ca accepted uses

392
00:27:54,918 --> 00:27:58,426
of ban API function. So you will get to learn so

393
00:27:58,448 --> 00:28:02,122
many things. Why just write some test

394
00:28:02,176 --> 00:28:06,480
cases in this application. Okay now

395
00:28:07,010 --> 00:28:12,570
we will move to our next Android

396
00:28:12,730 --> 00:28:16,538
runtime manipulation. So basically we will use the frida

397
00:28:16,634 --> 00:28:20,518
for doing the runtime manipulation. And frida is a world class dynamic distribution

398
00:28:20,554 --> 00:28:23,938
toolkit. It's very good. And if you want to set up

399
00:28:23,944 --> 00:28:27,954
the freeda so you can go to this blog and

400
00:28:27,992 --> 00:28:31,494
you can set up the freedom even he also

401
00:28:31,532 --> 00:28:35,302
shares some trick for bypassing the ssl pinning using

402
00:28:35,356 --> 00:28:39,174
frida or you can also bypass the root reduction. You can

403
00:28:39,212 --> 00:28:42,478
do so many things with frida even if your device

404
00:28:42,514 --> 00:28:46,698
is not rooted then you can use the frida gadgets. So without

405
00:28:46,784 --> 00:28:50,982
even rooted your device you can use the Freeda gadgets library

406
00:28:51,046 --> 00:28:54,510
and then you can do runtime manipulation. So I

407
00:28:54,580 --> 00:28:58,240
already installed the freedom and do one thing sorry.

408
00:28:58,610 --> 00:29:02,750
Make sure you have to match the server and

409
00:29:02,820 --> 00:29:06,618
client version same. So when you install the freedom

410
00:29:06,634 --> 00:29:10,306
server it should be

411
00:29:10,328 --> 00:29:16,322
same right inside your emulator and inside

412
00:29:16,376 --> 00:29:19,862
your operating system, your base operating system. So I

413
00:29:19,916 --> 00:29:23,622
already installed it. So whenever you are set then

414
00:29:23,676 --> 00:29:28,214
you can give this command frida psyphon u it

415
00:29:28,252 --> 00:29:31,862
will show you all these I already

416
00:29:31,996 --> 00:29:43,086
installed the feeder. Now it

417
00:29:43,108 --> 00:29:46,478
is saying that cedar is okay. So now we have to start the feeder

418
00:29:46,494 --> 00:29:53,254
server. This is the command in what

419
00:29:53,452 --> 00:29:56,760
happened? Let me watch it.

420
00:29:58,330 --> 00:30:01,798
So this is the command to start the freeda

421
00:30:01,814 --> 00:30:05,078
server inside my gen inside my emulator.

422
00:30:05,174 --> 00:30:08,970
So I will give this command

423
00:30:09,390 --> 00:30:12,330
and now the feeder has been started, right?

424
00:30:12,480 --> 00:30:16,346
If I try to give this command it

425
00:30:16,368 --> 00:30:19,966
will show all. Now feeder has started and

426
00:30:19,988 --> 00:30:23,338
we can see all the apps

427
00:30:23,434 --> 00:30:26,526
here with their package name. Suppose we are

428
00:30:26,548 --> 00:30:29,940
not able to see the st bridge, right? So because the app is

429
00:30:31,190 --> 00:30:34,386
we should be here.

430
00:30:34,488 --> 00:30:38,034
We can see here. This is the app that we are going to pen

431
00:30:38,072 --> 00:30:38,660
test.

432
00:30:42,170 --> 00:30:45,366
Suppose we want to hook this app. So simply we can

433
00:30:45,388 --> 00:30:49,736
run this command simply,

434
00:30:49,768 --> 00:30:55,300
we can run this command Freeda

435
00:30:59,180 --> 00:31:00,890
and then package name.

436
00:31:01,740 --> 00:31:05,176
And then the filter script is

437
00:31:05,198 --> 00:31:06,730
necessary, right.

438
00:31:09,440 --> 00:31:10,830
Package name,

439
00:31:12,960 --> 00:31:15,390
package name I have to, sorry,

440
00:31:16,880 --> 00:31:18,510
copy package name.

441
00:31:20,420 --> 00:31:23,090
Let's copy the package name where it is.

442
00:31:23,700 --> 00:31:26,610
Ht bridge this one.

443
00:31:34,830 --> 00:31:37,534
Okay, now this is the package name,

444
00:31:37,652 --> 00:31:40,826
right? So it's a command, this command,

445
00:31:40,858 --> 00:31:44,110
we have to run it with this script,

446
00:31:45,970 --> 00:31:51,822
no CdA package

447
00:31:51,886 --> 00:31:56,130
name. Hyphen F is also there for hosting.

448
00:31:59,020 --> 00:32:03,064
Then hyphen L for script pinning

449
00:32:03,112 --> 00:32:07,084
script now and then no

450
00:32:07,122 --> 00:32:13,784
pause. So it will, no pause, it will hook

451
00:32:13,832 --> 00:32:17,484
one time and then resuming

452
00:32:17,532 --> 00:32:20,610
main set. Process terminated. Okay,

453
00:32:24,420 --> 00:32:27,856
piva has a stop. So basically it creates some problem with

454
00:32:27,878 --> 00:32:31,396
the emulator, but when you will run it on your real device, it will not

455
00:32:31,418 --> 00:32:34,790
create problem, it will hook successfully and

456
00:32:35,480 --> 00:32:39,012
it will bypass whatever the script you will use for

457
00:32:39,066 --> 00:32:42,928
like pinning or do deduction or whatever the

458
00:32:42,954 --> 00:32:46,664
script you will use. So it will work. So this is the way, like we

459
00:32:46,702 --> 00:32:51,268
do with Frida, we work with frida, like this one, we give the commands

460
00:32:51,364 --> 00:32:54,670
with package name, we hook the application,

461
00:32:55,760 --> 00:32:56,510
right?

462
00:33:00,210 --> 00:33:03,758
And now we have application component security

463
00:33:03,844 --> 00:33:07,474
issue. So many like

464
00:33:07,512 --> 00:33:10,180
we have seen hard coded credential inside the,

465
00:33:10,630 --> 00:33:14,194
inside the device when we did

466
00:33:14,232 --> 00:33:15,810
the Java decompilation,

467
00:33:17,990 --> 00:33:21,142
this is also a vulnerability. Sometimes what happened?

468
00:33:21,196 --> 00:33:24,806
Developers store the data inside the mobile device. So we

469
00:33:24,828 --> 00:33:28,114
can also check if they are storing

470
00:33:28,162 --> 00:33:32,054
some sensitive information inside the mobile device.

471
00:33:32,102 --> 00:33:35,340
So we can go adb shell, we can see, okay,

472
00:33:35,710 --> 00:33:39,180
data, then again data

473
00:33:40,030 --> 00:33:44,862
and then we can package name here

474
00:33:44,916 --> 00:33:47,280
and now here we go shared information.

475
00:33:48,690 --> 00:33:52,590
We see, okay, we can get this file

476
00:33:55,790 --> 00:33:58,160
stand on nothing in this file, no problem.

477
00:33:59,410 --> 00:34:02,590
We can files

478
00:34:04,690 --> 00:34:06,030
block file,

479
00:34:11,630 --> 00:34:15,574
you can see here test and very complicated password.

480
00:34:15,702 --> 00:34:19,290
So this is the credential they are storing inside the device,

481
00:34:19,450 --> 00:34:22,906
right? So in that way we check if they are storing

482
00:34:22,938 --> 00:34:26,846
any hard, any credential or any sensitive information inside the mobile

483
00:34:26,878 --> 00:34:27,570
device.

484
00:34:30,700 --> 00:34:34,052
Other bugs like there are so many bugs like idol.

485
00:34:34,196 --> 00:34:37,428
We can test idol API vulnerability,

486
00:34:37,524 --> 00:34:41,048
we can test API vulnerabilities, access control issue, ox related vulnerability,

487
00:34:41,224 --> 00:34:44,430
jw token related vulnerability. So what we will do,

488
00:34:45,920 --> 00:34:49,710
we will try to do

489
00:34:50,160 --> 00:34:52,430
interception, no problem,

490
00:34:57,450 --> 00:34:59,080
we have fine,

491
00:35:03,920 --> 00:35:06,060
I'm going to add a proxy.

492
00:35:09,830 --> 00:35:16,026
Okay, 8090 I

493
00:35:16,048 --> 00:35:20,154
will proxy

494
00:35:20,202 --> 00:35:23,422
has started, right? Nice, right.

495
00:35:23,476 --> 00:35:27,026
So I have set

496
00:35:27,048 --> 00:35:30,770
up a proxy here. So for that you can also install

497
00:35:30,840 --> 00:35:34,622
the burp certificate for intercepting the HTTP request.

498
00:35:34,686 --> 00:35:39,490
So in that case you just type here burp httpp

499
00:35:43,200 --> 00:36:06,942
and you download certificate like here because

500
00:36:06,996 --> 00:36:10,100
it's already installed. But I will show you how to do that.

501
00:36:27,510 --> 00:36:37,124
Okay, maybe so

502
00:36:37,162 --> 00:36:41,392
here, if we click on this ca it will download started

503
00:36:41,466 --> 00:36:47,620
downloading. I don't know what iOS

504
00:36:47,690 --> 00:36:51,750
stopping but when you download it you can go to

505
00:36:56,800 --> 00:36:57,820
gallery.

506
00:37:02,520 --> 00:37:06,760
Gallery? Yeah this is downloads.

507
00:37:07,100 --> 00:37:09,850
No item here it is not downloaded actually.

508
00:37:11,340 --> 00:37:14,956
Okay, no problem. So I will try to

509
00:37:14,978 --> 00:37:18,492
do a restart of this sometime. It's create

510
00:37:18,546 --> 00:37:22,444
problem while doing it starting. So there is another way to

511
00:37:22,482 --> 00:37:26,192
push. Suppose we want to push a certificate or

512
00:37:26,246 --> 00:37:30,524
whatever we want to push so we can directly push

513
00:37:30,572 --> 00:37:34,000
from here. Adb push

514
00:37:37,650 --> 00:37:46,032
user I

515
00:37:46,086 --> 00:37:47,760
might having a certificate.

516
00:37:51,060 --> 00:37:54,636
You can see here I have a certificate. It is a del extension.

517
00:37:54,668 --> 00:37:55,410
No problem.

518
00:38:01,210 --> 00:38:05,382
We will try to push this certificate just

519
00:38:05,436 --> 00:38:07,500
for the demo sd card.

520
00:38:14,440 --> 00:38:18,020
Here we can see one file push. If we see this file.

521
00:38:26,420 --> 00:38:29,136
This is the file and that is already a certificate.

522
00:38:29,168 --> 00:38:32,644
Here I push before. And one

523
00:38:32,682 --> 00:38:36,132
thing, you can face some a problem when you try to install

524
00:38:36,186 --> 00:38:39,188
app. This is Jennymotion arm transaction.

525
00:38:39,364 --> 00:38:42,904
So sometime what happened? Like the

526
00:38:42,942 --> 00:38:46,404
app is not compatible with arm processor.

527
00:38:46,532 --> 00:38:50,120
So then you have to install this Jenny motion arm

528
00:38:50,560 --> 00:38:53,676
translation. So after installing it you have

529
00:38:53,698 --> 00:38:57,004
to just flush it and then you will be able

530
00:38:57,042 --> 00:38:59,470
to install any app, right.

531
00:39:01,680 --> 00:39:06,916
So I

532
00:39:06,938 --> 00:39:10,864
will show you how to intercept the traffic. I mean traffic

533
00:39:10,912 --> 00:39:14,470
is already coming, okay,

534
00:39:16,920 --> 00:39:21,156
this is my work. Suppose I want to intercept browser

535
00:39:21,188 --> 00:39:24,664
traffic. So here you can see I

536
00:39:24,702 --> 00:39:27,530
already installed the certificate. Now traffic is coming here.

537
00:39:27,980 --> 00:39:32,328
So I can see all the traffic. And I can found access controlled vulnerability,

538
00:39:32,504 --> 00:39:34,540
idol token related vulnerability,

539
00:39:36,960 --> 00:39:40,990
even I can open it. This app itself,

540
00:39:42,660 --> 00:39:46,130
this one, right.

541
00:39:51,790 --> 00:39:55,370
So this is SSL API.

542
00:39:55,790 --> 00:39:59,278
You want to try the API bypassing. So you can use that

543
00:39:59,364 --> 00:40:03,534
API and here test. Okay, now I will

544
00:40:03,652 --> 00:40:04,320
see,

545
00:40:10,810 --> 00:40:14,118
okay, it is not going to server, the traffic is not going to

546
00:40:14,124 --> 00:40:17,740
serve, it is checking internally I guess.

547
00:40:18,750 --> 00:40:21,210
But this is the only traffic going to server.

548
00:40:22,510 --> 00:40:29,486
Suppose we want to go here st bridge. Okay if

549
00:40:29,508 --> 00:40:32,660
you want to see this link three, it will go to there

550
00:40:33,030 --> 00:40:36,402
because we can also perform the cross site descripting inside

551
00:40:36,536 --> 00:40:40,462
a mobile device. That is the option. That is the vulnerability

552
00:40:40,526 --> 00:40:44,446
that inside the web view. If the GS

553
00:40:44,478 --> 00:40:47,894
is enabled inside the web view, then we can perform the cross site

554
00:40:47,932 --> 00:40:48,790
scripting,

555
00:40:51,430 --> 00:40:55,700
right? So you can see here access

556
00:40:56,410 --> 00:41:00,178
because the script is hosted at this URL.

557
00:41:00,274 --> 00:41:03,960
And if we are enabling that,

558
00:41:04,490 --> 00:41:08,306
we can load a remote URL inside the web view without

559
00:41:08,428 --> 00:41:14,986
any validation. So we can do access. Also we

560
00:41:15,008 --> 00:41:19,882
can go to, okay, no problem. So for

561
00:41:19,936 --> 00:41:23,466
that go to Piva,

562
00:41:23,578 --> 00:41:27,102
right. So now here you can see so many

563
00:41:27,156 --> 00:41:29,790
vulnerability. You can test it. So many vulnerability,

564
00:41:33,090 --> 00:41:35,810
so many vulnerabilities. So guys,

565
00:41:35,880 --> 00:41:39,406
okay, try each and every vulnerability,

566
00:41:39,518 --> 00:41:43,140
try to understand and try to replicate these,

567
00:41:44,310 --> 00:41:48,290
all the practical and whatever you find

568
00:41:48,440 --> 00:41:51,906
or whatever, you face any problem, then you

569
00:41:51,928 --> 00:41:55,426
guys can reach out to me anytime. And this is

570
00:41:55,448 --> 00:41:59,686
my email id. You romansh

571
00:41:59,718 --> 00:42:02,778
yadav@gmail.com so you guys can reach out to

572
00:42:02,784 --> 00:42:07,050
me and I can give you the suggestion or whatever where

573
00:42:07,120 --> 00:42:11,062
you are stuck in. So I can give you the advice

574
00:42:11,126 --> 00:42:14,474
or I will try to solve your problem. All right, guys,

575
00:42:14,592 --> 00:42:18,582
so that's all from my side. I'm glad you have joined

576
00:42:18,726 --> 00:42:21,834
me for today's session. Thank you very much.

