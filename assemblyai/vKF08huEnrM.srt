1
00:00:00,250 --> 00:00:04,830
Are youll an sre? A developer?

2
00:00:06,610 --> 00:00:10,474
A quality engineer who wants to tackle the challenge of improving

3
00:00:10,522 --> 00:00:14,026
reliability in your DevOps? You can enable your DevOps

4
00:00:14,058 --> 00:00:16,510
for reliability with chaos native.

5
00:00:16,930 --> 00:00:20,800
Create your free account at Chaos native Litmus Cloud

6
00:01:17,290 --> 00:01:21,282
hi everyone, welcome to my session today. I'm Andre

7
00:01:21,346 --> 00:01:24,374
and I'm super grateful to be part of this event and I'm currently saying hi

8
00:01:24,412 --> 00:01:28,034
from Barcelona, Spain. About myself as a professional,

9
00:01:28,082 --> 00:01:31,434
I've always enjoyed the creative and data driven way at looking

10
00:01:31,472 --> 00:01:35,306
at technology through my blogs and talks, and I hope to inspire many of

11
00:01:35,328 --> 00:01:38,634
you it professionals out there watching this to bring

12
00:01:38,672 --> 00:01:41,980
value in their organization in new, diverse and ingenious ways.

13
00:01:42,590 --> 00:01:46,030
Previously I was part of a platform team at Typeform that was called

14
00:01:46,100 --> 00:01:49,294
software engineering tools and infrastructure. Our main aim was

15
00:01:49,332 --> 00:01:52,622
to support the organization with processes, self built or existing market

16
00:01:52,676 --> 00:01:56,366
tools, standards, infrastructure metrics throughout

17
00:01:56,398 --> 00:02:00,194
the whole software delivery lifecycle that will finally lead to a more stable and

18
00:02:00,232 --> 00:02:03,746
reliable platform. Today, I'm going

19
00:02:03,768 --> 00:02:07,654
to share with you a story about scaling up in 2021.

20
00:02:07,692 --> 00:02:11,490
Things have considerably changed since the first time a Typeform

21
00:02:11,570 --> 00:02:15,318
has been created in 2013. Typeform is growing as a

22
00:02:15,324 --> 00:02:19,254
brand right now and you can imagine that also the platform behind

23
00:02:19,292 --> 00:02:23,226
it has grown to support what it is today. As our

24
00:02:23,248 --> 00:02:26,586
production started to mature, our user base to grow, and all of

25
00:02:26,608 --> 00:02:30,730
this not in just one specific part of the world, but in many,

26
00:02:30,880 --> 00:02:34,990
we realized that our platform is facing new challenges that we need to tackle

27
00:02:35,490 --> 00:02:39,310
if we want to continue to grow as a global brand.

28
00:02:40,290 --> 00:02:43,022
One of these challenges is pretty straightforward to guess.

29
00:02:43,156 --> 00:02:46,902
Basically your product, having your product available throughout

30
00:02:46,986 --> 00:02:50,942
different regions of the world. This is one problem you don't really notice

31
00:02:51,006 --> 00:02:54,638
until you start to have a huge number of customers or users in parts

32
00:02:54,654 --> 00:02:58,006
of the world you are not really expecting. You think your

33
00:02:58,028 --> 00:03:01,110
platform is up because your production monitoring system

34
00:03:01,180 --> 00:03:04,790
hit your data center, the same data center

35
00:03:04,860 --> 00:03:08,594
where your application is deployed. But it's

36
00:03:08,642 --> 00:03:12,630
not the case and these customers are opening support tickets

37
00:03:12,710 --> 00:03:16,838
which take a bit more time to understand and resolve by engineers.

38
00:03:17,014 --> 00:03:20,618
As a company that wants to grow and scale, we need to prepare our platform

39
00:03:20,704 --> 00:03:24,366
not just to be better reacting in this situation, but to

40
00:03:24,388 --> 00:03:28,506
be able to proactively tackle these problems if they occur.

41
00:03:28,698 --> 00:03:32,334
In this context, there are many improvements that you could bring to your platform

42
00:03:32,452 --> 00:03:35,954
and it was pretty clear for us that one of the things

43
00:03:35,992 --> 00:03:40,542
we needed to look at is, apart from our current spotlight,

44
00:03:40,606 --> 00:03:44,178
is availability in different parts of the world

45
00:03:44,344 --> 00:03:47,738
and of course have things coupled with our alerting

46
00:03:47,774 --> 00:03:51,154
system. So in case we do have a downtime, we can react

47
00:03:51,202 --> 00:03:52,950
and repair much faster.

48
00:03:54,090 --> 00:03:57,830
There are many tools out there that offer effortless or almost

49
00:03:57,900 --> 00:04:01,114
solution to this problem and most of them are right.

50
00:04:01,312 --> 00:04:05,206
Obviously each one of them comes with its own set of features

51
00:04:05,398 --> 00:04:09,482
that makes them unique, like integration, different set of locations that they offer,

52
00:04:09,616 --> 00:04:14,026
pricing rules and et cetera. Speaking strictly

53
00:04:14,058 --> 00:04:17,694
from a technical perspective, there is indeed a very low complexity of

54
00:04:17,732 --> 00:04:21,230
spinning any of these solutions up and I really love when

55
00:04:21,300 --> 00:04:24,514
technology is making us focus on

56
00:04:24,552 --> 00:04:27,858
what is the most meaningful solve problems.

57
00:04:28,024 --> 00:04:31,538
So if the challenge is not setting up the tool,

58
00:04:31,624 --> 00:04:35,166
where is the challenge? Well, the challenge

59
00:04:35,198 --> 00:04:38,806
is actually about all the rest of the things, but these tool

60
00:04:38,908 --> 00:04:41,110
as in everything in engineering,

61
00:04:42,570 --> 00:04:46,038
understanding what needs to be built and how it's going to be used before

62
00:04:46,124 --> 00:04:48,978
laying a finger on the implementation.

63
00:04:49,154 --> 00:04:53,402
Up next I will share you ten things you need to be asking yourself

64
00:04:53,536 --> 00:04:57,066
so you can build up your owns strategy of monitoring your

65
00:04:57,088 --> 00:05:00,454
platform from different locations, together with some tips and tricks

66
00:05:00,502 --> 00:05:04,126
from the lessons that I've learned, this first one is the

67
00:05:04,148 --> 00:05:07,550
most difficult from all of multiple locations of this world.

68
00:05:07,620 --> 00:05:10,958
Which ones to monitor? Obviously if you are not a

69
00:05:11,044 --> 00:05:14,482
teleco company or something similar, it is not really feasible to really

70
00:05:14,536 --> 00:05:17,890
monitor each tiny location from the globe.

71
00:05:19,270 --> 00:05:22,974
Look at what matters to your business. Things like top x location

72
00:05:23,022 --> 00:05:26,238
by user base, top x customer location by visits,

73
00:05:26,334 --> 00:05:29,494
top x location of customers by premium accounts should

74
00:05:29,532 --> 00:05:33,442
help you understand where you need to put your focus. Look at your slas

75
00:05:33,506 --> 00:05:37,238
and legal agreements. Do you need to provide something in a special

76
00:05:37,324 --> 00:05:41,226
location? Our approach at Typeform was to have a baseline of

77
00:05:41,248 --> 00:05:45,242
a mix of top location by visit with our top location by

78
00:05:45,296 --> 00:05:49,158
number of customers. So what does a location

79
00:05:49,254 --> 00:05:52,990
actually mean? Is it a city, a country, a region?

80
00:05:54,290 --> 00:05:57,514
It can be any of the options or any of the combination

81
00:05:57,562 --> 00:06:01,038
that I've just mentioned. And this depends mostly on how your business

82
00:06:01,124 --> 00:06:05,214
operates. Think that you areas a food delivery company with a strong presence

83
00:06:05,262 --> 00:06:07,300
in a metropolis or a big city.

84
00:06:07,830 --> 00:06:11,666
Monitoring those particular cities might be

85
00:06:11,768 --> 00:06:15,170
making more sense than monitoring whole regions or

86
00:06:15,240 --> 00:06:18,422
countries where if something fails in that big city,

87
00:06:18,476 --> 00:06:22,054
you might not get to notice it.

88
00:06:22,252 --> 00:06:26,166
We've settled for a mix between countries and regions, but we

89
00:06:26,188 --> 00:06:29,260
areas aware that this might change in the future.

90
00:06:30,110 --> 00:06:33,830
This question might appear before or after selecting multiple locations.

91
00:06:33,910 --> 00:06:37,738
So should the chosen location be treated all in

92
00:06:37,744 --> 00:06:41,194
these same way? Meaning should I trigger alerts, for example, in the same

93
00:06:41,232 --> 00:06:44,506
way for all of my locations? Ideally,

94
00:06:44,538 --> 00:06:48,234
yes. It's to treat all multiple locations the same way and alert

95
00:06:48,282 --> 00:06:51,710
the same way if your platform is down in Barcelona or in San Francisco.

96
00:06:52,050 --> 00:06:55,154
Realistically speaking, this goes a bit like any

97
00:06:55,192 --> 00:06:59,026
other production incident or bug. We want to fix everything, but where

98
00:06:59,048 --> 00:07:02,526
do we start? First, using your company's

99
00:07:02,638 --> 00:07:06,606
priority system can help you. At Typeform quarantine we are treating

100
00:07:06,638 --> 00:07:10,006
all of the locations in the same way because we have a very few set

101
00:07:10,028 --> 00:07:13,522
of them, but due to regional and countries mix,

102
00:07:13,666 --> 00:07:17,240
some locations are finally a bit more important than others.

103
00:07:18,010 --> 00:07:21,862
How frequent codes these monitors execute over these production instance

104
00:07:21,926 --> 00:07:25,866
of my platform looking at traffic is the best

105
00:07:25,968 --> 00:07:29,354
way to tackle this. A couple of users per minute might not give

106
00:07:29,392 --> 00:07:33,134
you enough reasons to monitor often, but as we're talking about

107
00:07:33,172 --> 00:07:36,574
scaling platforms here and that the chosen locations are with high

108
00:07:36,612 --> 00:07:39,886
traffic generally once per minute should be enough to

109
00:07:39,908 --> 00:07:43,166
start with. Granularity above the minute might

110
00:07:43,188 --> 00:07:47,106
make you unaware for much more time that you are down in a particular area

111
00:07:47,208 --> 00:07:50,434
and this is not convenient. Generally at Typeform we are

112
00:07:50,472 --> 00:07:53,170
trying even to go more granular than a minute,

113
00:07:53,590 --> 00:07:56,840
but if we execute each minute, we'll end up with around

114
00:07:57,370 --> 00:08:01,094
45,000 countries per month and almost half

115
00:08:01,132 --> 00:08:04,550
a million per year in the database of different things that

116
00:08:04,620 --> 00:08:08,374
we do know. Even the security rules might

117
00:08:08,412 --> 00:08:10,490
block so much activity.

118
00:08:11,710 --> 00:08:15,558
Yes, and that's a lot. The only way forward is to start flagging

119
00:08:15,574 --> 00:08:18,794
it so this doesn't interfere with other system in place

120
00:08:18,832 --> 00:08:22,586
at your company. This can be done via allow listing the ip,

121
00:08:22,698 --> 00:08:25,566
adding certain bypass headers, user agents,

122
00:08:25,668 --> 00:08:29,758
parameterized requests and so on at Typeform. The different system

123
00:08:29,844 --> 00:08:33,154
this might interfere with all have different requirements in this case.

124
00:08:33,192 --> 00:08:37,010
So the solutions is a mix of more of these

125
00:08:37,080 --> 00:08:41,294
aforementioned ways. Should this monitoring system create an alert

126
00:08:41,342 --> 00:08:44,900
each time a failure is generated? I'd say no,

127
00:08:45,430 --> 00:08:48,934
not really, and this is for a couple of reasons. One of the most

128
00:08:48,972 --> 00:08:52,406
important one is that the servers of the location of the tool you

129
00:08:52,428 --> 00:08:56,198
are using might not have availability in that moment.

130
00:08:56,284 --> 00:08:59,974
You are trying to reach your platform, but this doesn't mean that

131
00:09:00,012 --> 00:09:03,498
your users are affected by that or have problems

132
00:09:03,584 --> 00:09:07,146
accessing your website. This shouldn't create an alert as it would

133
00:09:07,168 --> 00:09:10,626
spam the engineers and the challenge, and they will challenge the robustness

134
00:09:10,678 --> 00:09:13,440
of the tool and usefulness of it.

135
00:09:14,450 --> 00:09:17,834
A good practice would be to trigger an alert if consecutive

136
00:09:17,882 --> 00:09:21,418
amount of failures is identified over that location.

137
00:09:21,594 --> 00:09:25,362
You could set up a retry in case of failure or wait

138
00:09:25,416 --> 00:09:29,058
for the next execution depending on the frequency of the monitor that

139
00:09:29,064 --> 00:09:32,100
you choose for your platform.

140
00:09:33,670 --> 00:09:37,250
Okay, we talk a lot about failures, but what

141
00:09:37,320 --> 00:09:40,840
are they? What should we consider a failure in this case?

142
00:09:41,450 --> 00:09:45,238
All these tools come with a default understanding of what a failure is,

143
00:09:45,324 --> 00:09:49,002
which is pretty standardized as far as I've seen between them,

144
00:09:49,136 --> 00:09:51,910
basically errors in HTTP requests,

145
00:09:51,990 --> 00:09:55,306
timeouts, everything around this area. Of course

146
00:09:55,408 --> 00:09:58,314
you can add your own failure criteria. For example,

147
00:09:58,432 --> 00:10:01,534
maybe you have some custom error codes that you want to remove or

148
00:10:01,572 --> 00:10:05,006
add on top of the default options. Youll want to lower the

149
00:10:05,028 --> 00:10:08,570
timeouts or figure out some latency

150
00:10:08,730 --> 00:10:12,138
thresholds. Assert something in these response.

151
00:10:12,234 --> 00:10:16,670
All of this depending also on your slas and general policy regarding

152
00:10:16,750 --> 00:10:20,146
performance at your company. If you're starting and you just want

153
00:10:20,168 --> 00:10:23,458
to explore how you could tweak this, I'd really recommend

154
00:10:23,544 --> 00:10:27,094
going with the default in the beginning and learn from

155
00:10:27,212 --> 00:10:31,186
how your system behaves before you go custom were

156
00:10:31,218 --> 00:10:34,710
talking a lot about failures, but who should react first?

157
00:10:34,780 --> 00:10:38,730
If there is an availability problem in a specific world area,

158
00:10:38,880 --> 00:10:42,630
who should fix it? Well, in an ideal DevOps

159
00:10:42,710 --> 00:10:46,650
environment it would be definitely the platform owning

160
00:10:47,390 --> 00:10:51,182
that particular part of your system, the team

161
00:10:51,236 --> 00:10:54,446
owning that particular part of the system.

162
00:10:54,628 --> 00:10:58,014
Realities in different engineering organizations makes this

163
00:10:58,052 --> 00:11:01,262
question to depend really on who has the access and

164
00:11:01,316 --> 00:11:05,102
knowledge to make those changes. This can be an SRE

165
00:11:05,166 --> 00:11:08,786
team ops incident management platform team.

166
00:11:08,888 --> 00:11:12,194
Nevertheless, it's critical to have somebody to react if

167
00:11:12,232 --> 00:11:15,570
this happens at Typhoon. At first our team was

168
00:11:15,640 --> 00:11:19,094
the one to be alerted so we could understand who is better

169
00:11:19,132 --> 00:11:22,374
to contact in case this failure is identified. We have

170
00:11:22,412 --> 00:11:26,246
tried out to have teams owning that part of the platform to

171
00:11:26,268 --> 00:11:28,714
be the ones to react first,

172
00:11:28,912 --> 00:11:32,554
but we have adapted to improve the

173
00:11:32,592 --> 00:11:35,050
reaction on these alerts.

174
00:11:35,950 --> 00:11:39,830
So what if there is a downtime in all of the areas

175
00:11:39,910 --> 00:11:43,070
because let's say a defect is introduced in production,

176
00:11:43,650 --> 00:11:47,870
isn't this going to trigger a huge quantity of redundant alerts?

177
00:11:48,610 --> 00:11:52,046
If you're going to go for a default setup, these monitors are

178
00:11:52,068 --> 00:11:55,386
going to fail and are going to trigger an alert that will

179
00:11:55,428 --> 00:11:58,962
be yet another alert in the clutter of alerts that your

180
00:11:59,016 --> 00:12:01,758
on call engineer needs to go for. What a nightmare.

181
00:12:01,854 --> 00:12:05,646
This is not ideal. This is a problem that generally appears

182
00:12:05,678 --> 00:12:09,574
on scaling engineering organizations. And luckily there is software out there that

183
00:12:09,612 --> 00:12:12,966
can help you with grouping alerts based on the root cause or

184
00:12:12,988 --> 00:12:16,550
affected area or even using AI. For example,

185
00:12:16,620 --> 00:12:19,674
I was reading about Moocsoft the other day and it

186
00:12:19,712 --> 00:12:23,286
looks like they are being able to group all of these alerts

187
00:12:23,318 --> 00:12:28,058
over there. Like a side note, nevertheless, starting small

188
00:12:28,224 --> 00:12:32,438
is better. Having the alerts for availvit in different world areas

189
00:12:32,614 --> 00:12:36,078
set up is a big step and grouping them with

190
00:12:36,164 --> 00:12:40,160
other potentially failing alerts is definitely another.

191
00:12:41,090 --> 00:12:45,198
Keep those separate. And what exactly should we monitor?

192
00:12:45,294 --> 00:12:49,678
Is it an endpoint? A complete user journey? All the endpoints

193
00:12:49,694 --> 00:12:52,738
you have exposed. For example, if I get

194
00:12:52,744 --> 00:12:56,386
a certain response action after hitting an endpoint or completing a

195
00:12:56,408 --> 00:13:00,198
journey, what is it that we should be looking for

196
00:13:00,284 --> 00:13:04,114
in these monitors? First of all, think about the purpose

197
00:13:04,162 --> 00:13:07,626
of this checking the availability of the system from different parts of

198
00:13:07,648 --> 00:13:11,526
the globe. Modern tech organizations already have some testing

199
00:13:11,558 --> 00:13:15,530
interaction going on which already tests some complete

200
00:13:15,600 --> 00:13:18,982
or partial user journeys in these UI

201
00:13:19,126 --> 00:13:22,830
check some response to APIs and et cetera.

202
00:13:23,330 --> 00:13:26,478
A good practice here is to keep it simple.

203
00:13:26,644 --> 00:13:30,430
The purpose is to check if a particular part of the platform is

204
00:13:30,500 --> 00:13:34,830
accessible from different regions. Think about

205
00:13:34,980 --> 00:13:38,418
what is the minimum that you can do to achieve that?

206
00:13:38,584 --> 00:13:41,682
And from my experience, most of the time a simple

207
00:13:41,736 --> 00:13:46,166
API call like a get or just a ping to an URL should

208
00:13:46,268 --> 00:13:49,106
just do the trick. Secondly,

209
00:13:49,218 --> 00:13:52,966
look at your architecture of your platform so you can choose

210
00:13:53,148 --> 00:13:56,934
what are the exact parts of it that should

211
00:13:56,972 --> 00:14:00,454
be hit by the monitors. In a monolithic architecture,

212
00:14:00,502 --> 00:14:04,310
one monitor doing a get in your main URLs

213
00:14:04,470 --> 00:14:07,654
should really do the trick. In a microservice architecture,

214
00:14:07,702 --> 00:14:11,646
things get a bit more complicated and it might not be

215
00:14:11,748 --> 00:14:16,058
so feasible to create monitors for each of the endpoints that you are exposing

216
00:14:16,234 --> 00:14:20,250
just because of the quantity of microservices and their rapid

217
00:14:20,330 --> 00:14:24,422
change that exists. So understanding

218
00:14:24,506 --> 00:14:27,378
how are those things deployed and where,

219
00:14:27,544 --> 00:14:30,850
what's the connection between them would allow you to understand

220
00:14:30,920 --> 00:14:34,322
the risk and reduce the quantity of monitors to a very

221
00:14:34,376 --> 00:14:37,906
few, but I would say powerful. That will allow you to avoid

222
00:14:37,938 --> 00:14:41,346
downtimes in different parts of the globe. To conclude

223
00:14:41,378 --> 00:14:45,106
my talk today, I'd like to stress out the following aspects.

224
00:14:45,298 --> 00:14:48,966
As a scaling organization, you need to look at things differently

225
00:14:48,998 --> 00:14:52,362
than before. So before jumping into

226
00:14:52,496 --> 00:14:55,946
setting up everything in any of the tools out there, look at the

227
00:14:55,968 --> 00:14:59,638
current needs of your company, checking the availability

228
00:14:59,734 --> 00:15:03,594
in different world areas today, but also from the perspective

229
00:15:03,642 --> 00:15:07,070
of near future. Although there are

230
00:15:07,140 --> 00:15:10,830
some best practices, the most important aspect is looking

231
00:15:10,980 --> 00:15:14,866
at the personalized context of your organization while designing the

232
00:15:14,888 --> 00:15:18,274
strategy for this thing. Choose a tool

233
00:15:18,312 --> 00:15:22,146
that can help you a bit more than just today. Last but

234
00:15:22,168 --> 00:15:25,234
not least, in a scaling organization, there are many things

235
00:15:25,272 --> 00:15:28,806
that can be done much better. So if you choose to monitor the

236
00:15:28,828 --> 00:15:32,194
availability of your platform from different world areas,

237
00:15:32,322 --> 00:15:35,894
start small and then figure out some of the

238
00:15:35,932 --> 00:15:39,074
details along the way. This will be much more impactful

239
00:15:39,122 --> 00:15:42,394
and we will keep you focused. If you want to reach

240
00:15:42,432 --> 00:15:45,626
out to me to help you set up this or just drop me

241
00:15:45,648 --> 00:15:49,546
a line and chat, feel free to add me on LinkedIn. Also do

242
00:15:49,568 --> 00:15:52,934
check out my blog and for my experiences and opinions regarding

243
00:15:52,982 --> 00:15:56,174
work in the software development industry. Last but

244
00:15:56,212 --> 00:15:59,386
not least, I like to hear what you love and hated about my session

245
00:15:59,418 --> 00:16:02,926
today, and I invite you to do it via the feedback form in

246
00:16:02,948 --> 00:16:06,778
the QR code that is on the screen powered

247
00:16:06,794 --> 00:16:10,254
by our new product at Typeform that is called video ask.

248
00:16:10,292 --> 00:16:13,758
I hope you enjoy it. Thanks for joining me today

249
00:16:13,844 --> 00:16:16,966
and enjoy the rest of the conference. See you

250
00:16:16,988 --> 00:16:17,060
around.

