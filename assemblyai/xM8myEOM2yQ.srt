1
00:00:00,730 --> 00:00:04,366
What if you could work with some of the world's most innovative companies,

2
00:00:04,548 --> 00:00:07,338
all from the comfort of a remote workplace?

3
00:00:07,514 --> 00:00:10,874
Andela has matched thousands of technologists across the globe

4
00:00:10,922 --> 00:00:14,922
to their next career adventure. We're empowering new talent

5
00:00:14,986 --> 00:00:18,714
worldwide, from sao paulo to Egypt and Lagos

6
00:00:18,762 --> 00:00:21,886
to Warsaw. Now the future of work is

7
00:00:21,908 --> 00:00:25,462
yours to create. Anytime, anywhere. The world

8
00:00:25,516 --> 00:00:29,190
is at your fingertips. This is andela.

9
00:01:13,270 --> 00:01:16,402
Hello everybody, and become to my talk today.

10
00:01:16,536 --> 00:01:19,794
I'm super excited to be here. I'm really, really excited

11
00:01:19,842 --> 00:01:22,760
to show you what I've been working on over the past couple of months.

12
00:01:23,130 --> 00:01:25,974
So without further ado, let's jump into it.

13
00:01:26,092 --> 00:01:28,738
Today my talk is called go to the Edge.

14
00:01:28,834 --> 00:01:32,886
And I'm going to be talking about Tinygo, essentially a version

15
00:01:32,918 --> 00:01:36,954
of Golang, but for IoT quick

16
00:01:36,992 --> 00:01:40,042
agenda. So I'm going to tell you a little bit about me, who I am,

17
00:01:40,096 --> 00:01:43,402
where I've come from, and what I do today, where I found

18
00:01:43,456 --> 00:01:46,714
Tinygo, what I do with Tinygo, and the projects

19
00:01:46,762 --> 00:01:50,046
that I create in Tinygo, with a little bit of a hands on to show

20
00:01:50,068 --> 00:01:51,600
you how I do that as well.

21
00:01:53,410 --> 00:01:56,466
So who am I? What do I do? So, my name is Liam Hampton and

22
00:01:56,488 --> 00:01:59,906
I'm a Microsoft regional cloud advocate here in the UK, based at

23
00:01:59,928 --> 00:02:03,390
the London reactor. I'm an open youre contributor

24
00:02:03,470 --> 00:02:07,294
and through that I have been a software engineer. Prior to this role

25
00:02:07,342 --> 00:02:10,598
as an advocate, I was working at IBM and I wrote a

26
00:02:10,604 --> 00:02:14,578
lot of golang, a lot of node, and I was technical blogging.

27
00:02:14,754 --> 00:02:18,054
I'm also an IoT enthusiast, hence why I'm doing this talk

28
00:02:18,092 --> 00:02:22,186
today. And I'm a public speaker. I have spoken at a number of conferences and

29
00:02:22,208 --> 00:02:25,900
meetups around the globe over the past couple of years.

30
00:02:27,150 --> 00:02:29,930
So how did I find Tinygo?

31
00:02:30,510 --> 00:02:33,834
Now that's a really interesting question, because I actually knew nothing

32
00:02:33,872 --> 00:02:37,806
about Iot about a year ago. That's a bit crazy if

33
00:02:37,828 --> 00:02:41,002
you think about it, somebody in tech not really knowing anything about IoT.

34
00:02:41,066 --> 00:02:44,610
All I thought it was was just smart tech and little sort of event

35
00:02:44,680 --> 00:02:48,194
driven boards, essentially. But I

36
00:02:48,232 --> 00:02:52,100
actually wanted to get into home and smart tech.

37
00:02:52,550 --> 00:02:56,306
Now, I didn't know how to do it. I'd never written c language, I've never

38
00:02:56,328 --> 00:03:00,038
written micropython. I just wanted to learn.

39
00:03:00,204 --> 00:03:03,714
So the best way to do that was I went and bought a whole bunch

40
00:03:03,762 --> 00:03:07,474
of these boards. I went and bought a number of arduinos.

41
00:03:07,602 --> 00:03:10,950
Pretty expensive for someone who knew nothing about

42
00:03:11,020 --> 00:03:14,266
them, whether I was even getting the right things, but I went and bought them

43
00:03:14,288 --> 00:03:18,554
nonetheless. And that kind of forced my hand into learning now,

44
00:03:18,592 --> 00:03:22,998
I didn't want to learn a new language, so I ended up like

45
00:03:23,024 --> 00:03:26,814
every other developer would, went onto Google and said, how do I put go on

46
00:03:26,852 --> 00:03:31,178
an Arduino? And lo and behold, I found something called Tinygo,

47
00:03:31,354 --> 00:03:35,086
which is essentially a subversion of go being

48
00:03:35,108 --> 00:03:37,954
a go developer. I was pretty familiar with this and I was kind of like,

49
00:03:37,992 --> 00:03:41,666
hallelujah, I have saved it. I am now able to do what I've wanted to

50
00:03:41,688 --> 00:03:45,410
do. So what is Tinygo now?

51
00:03:45,480 --> 00:03:49,486
Tinygo, if you go to the website, it is a go compiler for small places,

52
00:03:49,518 --> 00:03:52,994
and you're going to see this scattered everywhere. Whether it's on the GitHub repository,

53
00:03:53,042 --> 00:03:55,666
whether it's on the website, whether it's in people's blogs,

54
00:03:55,858 --> 00:03:59,510
it is a compiler for small places, it's still a go compiler.

55
00:04:00,250 --> 00:04:02,970
So like I said, if you go to the website, you'll be faced with something

56
00:04:03,040 --> 00:04:06,666
that looks a little bit like this, where you'll see the sort

57
00:04:06,688 --> 00:04:10,202
of landing page and you can see the boards, the documentation for it.

58
00:04:10,336 --> 00:04:14,142
You can even go to the GitHub because IoT is open youre like most

59
00:04:14,196 --> 00:04:17,870
things now, which is fantastic. And there's even quick getting

60
00:04:17,940 --> 00:04:21,534
started guides as well. So what

61
00:04:21,572 --> 00:04:25,326
is it? It is essentially what this slide

62
00:04:25,358 --> 00:04:28,718
shows you. You have a smaller compiler which comprises,

63
00:04:28,894 --> 00:04:32,914
sorry, excuse me is a smaller compiler which comprises of a number

64
00:04:32,952 --> 00:04:36,834
of libraries from the main language itself. So for

65
00:04:36,872 --> 00:04:40,518
example, you have got IoT, you have got the bytes package, you have

66
00:04:40,524 --> 00:04:44,162
got archive and zip, but you don't have things like HTML and template

67
00:04:44,226 --> 00:04:48,054
or the net package because you're not likely to use them with a microcontroller or

68
00:04:48,092 --> 00:04:51,930
webassembly or anything else that you're likely to build with Tinygo.

69
00:04:52,510 --> 00:04:55,930
So it is very compact, it is

70
00:04:56,000 --> 00:04:59,894
very quick, and it kind of just takes what you

71
00:04:59,952 --> 00:05:03,866
need from the main language. It uses

72
00:05:03,898 --> 00:05:07,406
the LLVM technologies. So what LLVM is,

73
00:05:07,428 --> 00:05:10,970
is a strategy to support static and dynamic compilation for languages.

74
00:05:11,050 --> 00:05:14,234
It is essentially a toolchain of technologies,

75
00:05:14,362 --> 00:05:17,874
modular and reusable. It's open youre and it

76
00:05:17,912 --> 00:05:21,586
kind of works a little bit like the diagram. So this is very overhead and

77
00:05:21,608 --> 00:05:24,354
very simplistic, but kind of get the gist of it.

78
00:05:24,472 --> 00:05:28,214
Language you type goes through LLVM, which then

79
00:05:28,252 --> 00:05:32,102
allows you to run it on an architecture x 86

80
00:05:32,156 --> 00:05:35,606
arm power pc, et cetera. If you

81
00:05:35,628 --> 00:05:39,354
want to read more about this, and I really sincerely hope you do really

82
00:05:39,392 --> 00:05:43,290
interesting read, you can go to the website llvm.org.

83
00:05:44,990 --> 00:05:49,034
So what is Tinygo used for itself? Where do you

84
00:05:49,072 --> 00:05:53,134
most commonly see it used, well, microcontrollers is

85
00:05:53,172 --> 00:05:57,306
the main use at the moment. It is anyway. And a microcontroller

86
00:05:57,338 --> 00:06:00,878
is something that looks a little bit like these. It's a board.

87
00:06:01,044 --> 00:06:04,674
It's like an input output board. So an arduino or

88
00:06:04,712 --> 00:06:08,626
an microbit or an artifruit playground or an

89
00:06:08,648 --> 00:06:11,794
x nine smartwatch, for example, something that you can code,

90
00:06:11,912 --> 00:06:15,522
something which will take in, you can manipulate with it,

91
00:06:15,576 --> 00:06:19,366
you can write a lot of programs for, is essentially a small board. And this

92
00:06:19,388 --> 00:06:22,838
is where tiny go really excels. Being a

93
00:06:22,844 --> 00:06:26,502
really small compiler, it is able to fit and execute or

94
00:06:26,556 --> 00:06:29,110
run code on these small chipsets.

95
00:06:30,410 --> 00:06:33,738
And with that being said, it supports over 70 boards now.

96
00:06:33,824 --> 00:06:37,498
And this is what I love about this technology or this project,

97
00:06:37,584 --> 00:06:40,794
should we say. It has got a fantastic community and with that

98
00:06:40,832 --> 00:06:44,762
you get fantastic support. So every single release something new is

99
00:06:44,816 --> 00:06:48,526
happening and the boards are growing. I think I started looking into this maybe about

100
00:06:48,548 --> 00:06:51,854
a year ago and maybe we were up to like 50 boards. We're now way

101
00:06:51,892 --> 00:06:55,170
above that, up to 70 plus boards, which is fantastic.

102
00:06:56,310 --> 00:06:59,010
The second use case is webassembly.

103
00:06:59,670 --> 00:07:03,394
Now, webassembly is essentially this diagram here

104
00:07:03,512 --> 00:07:06,786
where you can write your program in the code that you like, I.

105
00:07:06,808 --> 00:07:10,054
E. In this instance we're going to say Tinygo. You can pass it through a

106
00:07:10,092 --> 00:07:13,638
webassembly compiler, which will then change that

107
00:07:13,724 --> 00:07:17,694
and sort of manipulate the code to be interpreted by a web browser.

108
00:07:17,762 --> 00:07:21,254
And a web browser will interpret code as like HTML, Javascript,

109
00:07:21,382 --> 00:07:25,290
CSS, your standard sort of interpretations for web.

110
00:07:25,440 --> 00:07:29,740
However, wasm allows you to do that with different code.

111
00:07:30,430 --> 00:07:34,014
So let's take a dashboard. If I want to build a dashboard or something,

112
00:07:34,052 --> 00:07:37,146
I could write that in tinygo and it could then be interpreted

113
00:07:37,178 --> 00:07:40,030
by the web browser with a Wasm compiler.

114
00:07:41,570 --> 00:07:43,120
Thirdly, and finally,

115
00:07:45,590 --> 00:07:50,226
you may see people write small lightweight clis with

116
00:07:50,248 --> 00:07:53,346
tiny go. It's not so common now, but it definitely was about

117
00:07:53,368 --> 00:07:56,958
a year ago when I was looking into this. And a Cli is a command

118
00:07:56,974 --> 00:08:00,662
line interface, and it just allows you to have maybe

119
00:08:00,716 --> 00:08:04,566
lower level control at a system level if youre want to be sort of

120
00:08:04,588 --> 00:08:07,240
interacting with your host machine, for example.

121
00:08:09,050 --> 00:08:12,826
So where do I use tinygo? And this was kind of looping back

122
00:08:12,848 --> 00:08:16,298
to the beginning. Why did I buy all those Arduinos now? I had

123
00:08:16,304 --> 00:08:19,402
a number of problems in my home that I wanted to solve. One of them

124
00:08:19,456 --> 00:08:23,386
most, well, one of the bigger ones being dead plants.

125
00:08:23,498 --> 00:08:26,926
Now, I went away for a month with a

126
00:08:26,948 --> 00:08:29,966
trip and I came back and my plant looked a little bit like this.

127
00:08:30,068 --> 00:08:32,670
Wilted, dead, looking under the weather.

128
00:08:34,050 --> 00:08:37,666
Pretty far gone, really. And I always forgot to water them.

129
00:08:37,768 --> 00:08:41,074
So I wanted something which would tell me when I needed

130
00:08:41,112 --> 00:08:44,686
to water my plants. Therefore, I made a soil moisture

131
00:08:44,718 --> 00:08:47,858
sensor. So the sensor goes in the plant pot, takes a

132
00:08:47,864 --> 00:08:51,286
reading, sends it to the arduino, who then calculates it

133
00:08:51,388 --> 00:08:54,646
and sends it back to me for human readable output. And in this

134
00:08:54,668 --> 00:08:58,054
example, it is saying soil moisture is 71%.

135
00:08:58,172 --> 00:09:01,594
Fantastic. And for this plant, I think it needed to be around 50%

136
00:09:01,712 --> 00:09:05,194
or above. 50 is the ideal, which.

137
00:09:05,232 --> 00:09:08,794
So this is good. So the plant ended up looking, or still does

138
00:09:08,832 --> 00:09:11,866
look like this, nice and fresh. And it's behind me now. You can

139
00:09:11,888 --> 00:09:13,740
still see it poking behind my head.

140
00:09:14,690 --> 00:09:18,206
So that's just one example of where I use tiny go,

141
00:09:18,308 --> 00:09:21,646
really simple project, really small, but it allows me to get my foot in the

142
00:09:21,668 --> 00:09:25,614
door and build bigger and better things. The next

143
00:09:25,652 --> 00:09:29,266
step for this is to have it water itself. So, like I said, I want

144
00:09:29,288 --> 00:09:33,006
to build a dashboard. I would like to have a sort of a self watering

145
00:09:33,038 --> 00:09:36,194
pump. So if I was away, then I could log in and I could press

146
00:09:36,232 --> 00:09:39,906
a button, and it would be able to trigger the water pump

147
00:09:39,938 --> 00:09:43,638
for me and water the plant itself. So that's the next step for

148
00:09:43,644 --> 00:09:47,062
this one. Now, another one is a post

149
00:09:47,116 --> 00:09:50,298
notification. Now, this is the bane of my life. I do not live in the

150
00:09:50,304 --> 00:09:53,926
Burj Khalifa by any shot, but I do live in a block of flats,

151
00:09:54,038 --> 00:09:57,158
which are pretty tall, right? So for this sake,

152
00:09:57,254 --> 00:10:00,778
or for this, we're just going

153
00:10:00,784 --> 00:10:04,122
to pretend that I live in the top, right? And when the post

154
00:10:04,176 --> 00:10:07,646
comes, it's at the bottom. So every single day, I have to run up and

155
00:10:07,668 --> 00:10:11,006
down the stairs and I have to go and collect my post. And sometimes it

156
00:10:11,028 --> 00:10:14,526
isn't there. There's no standard time for my post delivery,

157
00:10:14,638 --> 00:10:17,090
which to me, is pretty annoying.

158
00:10:17,590 --> 00:10:20,946
So I want a post notification where the postie comes,

159
00:10:21,048 --> 00:10:25,026
drops the post off, lands in the letterbox, which would

160
00:10:25,048 --> 00:10:29,094
then trigger the Arduino to do something for me

161
00:10:29,212 --> 00:10:32,438
that would then tell me that I have some post in my

162
00:10:32,444 --> 00:10:35,910
letterbox, and then I can run down to the bottom and

163
00:10:35,980 --> 00:10:39,846
collect it. Now, that is a really simple sort

164
00:10:39,868 --> 00:10:43,818
of diagram here, and this is a really simple project to be building,

165
00:10:43,984 --> 00:10:47,418
but it's really fun and actually really useful for me.

166
00:10:47,584 --> 00:10:51,206
So I'm excited to get into phase two. And I say phase

167
00:10:51,238 --> 00:10:55,070
two because I've already created phase number one. Now, phase one

168
00:10:55,140 --> 00:10:58,526
is an Arduino, which is connected to a breadboard, like we can see on this

169
00:10:58,548 --> 00:11:02,314
diagram, it's got a couple of resistors, it's got a photoresistor

170
00:11:02,442 --> 00:11:06,782
to detect light in the environment, and a number of leds. So essentially

171
00:11:06,846 --> 00:11:10,210
a binary on off switch depending on

172
00:11:10,280 --> 00:11:13,714
the light in the environment. And I am

173
00:11:13,752 --> 00:11:17,586
going to show you how I have done that. To do

174
00:11:17,608 --> 00:11:20,694
that, I'm going to open up some code in a second.

175
00:11:20,732 --> 00:11:24,294
But the syntax is no different to go. So I want to stress it is

176
00:11:24,332 --> 00:11:27,958
exactly the same as what you would typically be writing if you're writing a

177
00:11:27,964 --> 00:11:31,718
Go program. I'm using an Arduino uno r three, so it doesn't

178
00:11:31,734 --> 00:11:35,270
have any wifi. So anything I do would need to be connected

179
00:11:35,430 --> 00:11:39,366
through a third party board or like a connector hat

180
00:11:39,398 --> 00:11:43,090
or something. I'm using visual studio code and the Tinygo

181
00:11:43,190 --> 00:11:46,686
vs code plugin. And the versions are here on the screen.

182
00:11:46,788 --> 00:11:50,394
I'm using Go version 1.17 and Tinygo version

183
00:11:50,442 --> 00:11:53,714
00:22 now, you can't have tinygo without go

184
00:11:53,752 --> 00:11:56,978
installed because it kind of piggybacks off of it. It cherry picks the

185
00:11:56,984 --> 00:12:00,482
libraries, remember? So I am

186
00:12:00,536 --> 00:12:03,780
going to hide my slides and get up some code,

187
00:12:04,550 --> 00:12:08,274
like so. So vs code is open and

188
00:12:08,392 --> 00:12:11,846
what I can do here. So before we get going into the code, I'm just

189
00:12:11,868 --> 00:12:15,186
going to show you the plugin that I'm using. So over here on the vs

190
00:12:15,218 --> 00:12:18,918
code marketplace, if I was to type in tiny go, you can

191
00:12:18,924 --> 00:12:22,506
see here, this is the plugin that I'm using, and it is installed and

192
00:12:22,528 --> 00:12:26,010
it is globally available for me, which is fantastic.

193
00:12:26,510 --> 00:12:29,626
And secondly, to use that, I then sort

194
00:12:29,648 --> 00:12:33,914
of jump down to the bottom. You can see I'm using go version 1.17.6

195
00:12:34,032 --> 00:12:37,594
and next to it we have tiny go, and it already says Arduino.

196
00:12:37,722 --> 00:12:40,094
But if I was to click on that, you can see a drop down of

197
00:12:40,132 --> 00:12:43,386
a number of boards that I can choose from. So there's

198
00:12:43,418 --> 00:12:47,182
a whole load of them in vs code or in this plugin which it supports.

199
00:12:47,246 --> 00:12:50,146
And all you do is you select the one that you're using and the one

200
00:12:50,168 --> 00:12:53,694
that you want to flash. Now let's

201
00:12:53,742 --> 00:12:57,522
run through some code. As you can see, it is really no different to

202
00:12:57,576 --> 00:13:01,010
go code. We have Iot, a package main, and some imports.

203
00:13:01,090 --> 00:13:04,870
But the timely thing that I need to make you aware of is

204
00:13:04,940 --> 00:13:08,598
this is using machine. This is the one library which is kind of detrimental

205
00:13:08,614 --> 00:13:12,300
to this project. Without it, Iot would just be regular go code.

206
00:13:12,830 --> 00:13:16,220
So here we can see in the function main

207
00:13:16,910 --> 00:13:20,506
we are initializing some analog pins. I have then got

208
00:13:20,528 --> 00:13:24,302
a light sensor and some leds which are here and

209
00:13:24,356 --> 00:13:28,074
I am sort of attributing them to the corresponding pins

210
00:13:28,122 --> 00:13:32,174
on the board. So the light sensor is in ADC zero and the

211
00:13:32,212 --> 00:13:35,620
led pins are in d seven, eight, nine and ten.

212
00:13:36,470 --> 00:13:39,518
After that I'm going to configure the leds as outputs.

213
00:13:39,614 --> 00:13:42,866
So it's going to loop around that slice and

214
00:13:42,888 --> 00:13:45,598
it's going to say hey, for every single LEd I'm going to make sure you're

215
00:13:45,614 --> 00:13:49,030
in output so you can emit some light when sort of an event happens,

216
00:13:49,100 --> 00:13:52,886
when it's triggered. After that I'm going

217
00:13:52,908 --> 00:13:56,258
to check the environment for the light in the room. So this is where I'm

218
00:13:56,274 --> 00:14:00,038
looking at the light sensor now. And I'm saying if

219
00:14:00,044 --> 00:14:03,194
there's over 8000, and I believe this might be nits, but whatever this

220
00:14:03,232 --> 00:14:07,482
sensor is actually measuring in, I just found 8000 to be perfect

221
00:14:07,536 --> 00:14:10,714
for my environment. It's going to say if there is enough

222
00:14:10,752 --> 00:14:14,266
light or if the light is over 8000, then make sure those leds are turned

223
00:14:14,298 --> 00:14:17,802
off. I. E set the LEd to false otherwise,

224
00:14:17,866 --> 00:14:21,390
or else set them to true. It's a real simple

225
00:14:21,460 --> 00:14:24,926
statement saying if, else, if it's greater than this,

226
00:14:25,028 --> 00:14:28,238
make sure they're off. If it's not, make sure they're on. And then I'm

227
00:14:28,254 --> 00:14:31,938
just going to do a timer. So I'm going to sleep for a couple of

228
00:14:32,024 --> 00:14:35,346
seconds or a second here. And this is just

229
00:14:35,368 --> 00:14:38,782
so that the sensor isn't completely overloading me with data

230
00:14:38,936 --> 00:14:42,742
every millisecond because without this it would just consistently run super fast,

231
00:14:42,796 --> 00:14:46,022
there'd be too much data and it would just not be good for me.

232
00:14:46,076 --> 00:14:49,500
I don't need that, it's not necessary for this project.

233
00:14:50,110 --> 00:14:54,042
So to flash it we need to find out what ports we're connected to.

234
00:14:54,096 --> 00:14:58,070
And to do that I am going to type in the command ls

235
00:14:58,230 --> 00:15:02,362
Devcustar and that's going to tell me where

236
00:15:02,496 --> 00:15:06,206
or all the ports that are connected to my machine. As we can see

237
00:15:06,228 --> 00:15:09,774
here, I've got the Bluetooth incoming port, I've got some headphones and

238
00:15:09,812 --> 00:15:13,418
I've got a USB modem. The USB modem is what the Arduino

239
00:15:13,434 --> 00:15:16,914
is connected to via a USB cable. And the next step

240
00:15:16,952 --> 00:15:20,242
is to flash it by using that port. So I need to connect

241
00:15:20,296 --> 00:15:24,542
to it. Now the command for that is Tinygo

242
00:15:24,606 --> 00:15:27,894
flash and then you have target and then the board name and in this case

243
00:15:27,932 --> 00:15:31,462
I'm saying Arduino. Then you have the port name or the port

244
00:15:31,516 --> 00:15:35,634
number. And in this case it is Devcu USB

245
00:15:35,682 --> 00:15:39,046
modem 11301. And as you can see,

246
00:15:39,068 --> 00:15:42,842
that corresponds to the port above. And then I'm just going to use

247
00:15:42,896 --> 00:15:46,602
or specify the file that I want to flash the board. And in this case

248
00:15:46,656 --> 00:15:49,802
it is conf 42 demo go.

249
00:15:49,936 --> 00:15:53,326
So if I press enter, that should flash the board for

250
00:15:53,348 --> 00:15:56,398
me. And it takes about a second or two

251
00:15:56,564 --> 00:15:59,502
Iot, doesn't take too long. There we are, it's done.

252
00:15:59,636 --> 00:16:03,870
Now if I was to hide this and show a different

253
00:16:03,940 --> 00:16:07,186
camera over here, you can see the leds are turned off.

254
00:16:07,288 --> 00:16:10,994
But if I was to cover up the sensor, they turn

255
00:16:11,032 --> 00:16:14,306
on. And that is essentially what this

256
00:16:14,328 --> 00:16:18,710
project is doing. It's on off for some leds.

257
00:16:19,130 --> 00:16:21,858
Now if we go back to my slides,

258
00:16:22,034 --> 00:16:26,118
we can see how that kind of correlates to

259
00:16:26,204 --> 00:16:30,034
the phase one of my project. Now imagine the postee

260
00:16:30,082 --> 00:16:33,162
wants to open up the letter box, puts the letter in.

261
00:16:33,216 --> 00:16:36,842
When they open up the letter box, some light is going to come in with

262
00:16:36,896 --> 00:16:40,814
the letter as well. And that would just be a triggering point for

263
00:16:40,852 --> 00:16:44,638
this project. So when there's post, send a

264
00:16:44,644 --> 00:16:48,558
trigger, send me a notification, whether that's via the cloud,

265
00:16:48,644 --> 00:16:52,974
through maybe Azure Iot hub or some

266
00:16:53,012 --> 00:16:56,960
pub sub event driven architecture that I'd like to build out with this,

267
00:16:57,270 --> 00:17:00,322
this is how it's correlating to what I want it to do.

268
00:17:00,376 --> 00:17:03,330
So this is a first pass. Again, this is phase number one,

269
00:17:03,400 --> 00:17:06,050
and I'm excited to take this a little bit further.

270
00:17:07,510 --> 00:17:10,626
So what are my coding projects now? I've actually got a number of things

271
00:17:10,648 --> 00:17:12,854
that I want to play with. One of them is in front of me,

272
00:17:12,892 --> 00:17:16,246
I've got a macro pad. So when I'm streaming I can sort

273
00:17:16,268 --> 00:17:19,798
of hook this up to obs or a

274
00:17:19,804 --> 00:17:23,002
different program and have some shortcuts while I'm coding or

275
00:17:23,056 --> 00:17:27,482
streaming or something like that. And that uses RP 200:40 board,

276
00:17:27,616 --> 00:17:31,178
so I believe that is actually a raspberry PI. And again,

277
00:17:31,344 --> 00:17:34,926
Tinygo supports that. If I was to look in vs code, I can see the

278
00:17:34,948 --> 00:17:38,574
board that I could flash and it is under that as well. The next one

279
00:17:38,612 --> 00:17:42,622
is a Lego wheel for GitHub notifications. I'm a sucker for always

280
00:17:42,676 --> 00:17:46,254
missing out on notifications. Whenever I get asked to do a pull request or review

281
00:17:46,292 --> 00:17:50,034
some code, I always miss it. I get the email, but it just always goes

282
00:17:50,072 --> 00:17:53,202
over my head. And I'm so busy with some certain

283
00:17:53,256 --> 00:17:56,802
things that I'm playing with at the moment sometimes don't get around to doing it.

284
00:17:56,856 --> 00:18:00,706
So I'd love a physical notification very much. If I saw a lego

285
00:18:00,738 --> 00:18:04,722
wheel moving on my desk, then I would know that I've got a GitHub notification

286
00:18:04,866 --> 00:18:08,214
and to go and check it out. I've done this before with text

287
00:18:08,252 --> 00:18:11,610
messages, but the text messages, I'm really good at ignoring those.

288
00:18:11,680 --> 00:18:15,994
So I thought, let's have something really obtrusive on

289
00:18:16,032 --> 00:18:19,766
my desk. So that's the second one, and the third one is a dashboard

290
00:18:19,798 --> 00:18:23,302
with some youre home sensors. I would love to be able to tell the moisture,

291
00:18:23,366 --> 00:18:27,214
the temperature, all these smart things that the average smart home has.

292
00:18:27,252 --> 00:18:31,054
Now I'd like to build that myself and build a dashboard with

293
00:18:31,092 --> 00:18:34,366
that. I can then hook all the other existing things up that I've got my

294
00:18:34,388 --> 00:18:37,954
post notification, my smart plant, all these kind of things and

295
00:18:37,992 --> 00:18:40,974
have a dashboard which is just sort of on my wall in my hallway,

296
00:18:41,022 --> 00:18:44,660
and I can see everything that's going on. And I'd love to do that.

297
00:18:46,070 --> 00:18:49,742
And if you want to give tinygo a go,

298
00:18:49,816 --> 00:18:53,810
you can as well, because there is a tinygo playground much like the go playground.

299
00:18:53,890 --> 00:18:57,382
All you have to do is go to play tinygo.org and

300
00:18:57,436 --> 00:19:00,962
you can use this as a sandbox or a simulator. You don't need any equipment.

301
00:19:01,026 --> 00:19:03,862
I just chose to go out and buy it myself because then I can learn

302
00:19:03,916 --> 00:19:06,998
it sort of hands on. That's how I learn. That's how I'd love to do

303
00:19:07,004 --> 00:19:10,526
it. But you can do this yourself through a web browser, really quick

304
00:19:10,548 --> 00:19:13,806
and simple and it's really, really fun. You can create some

305
00:19:13,828 --> 00:19:16,974
really cool projects in the playground, much like you can with the go

306
00:19:17,012 --> 00:19:20,574
playground. And with that, I'd like to say thank

307
00:19:20,612 --> 00:19:24,494
you very much for listening to my talk. It's an absolute pleasure and I

308
00:19:24,532 --> 00:19:28,302
can't wait to see where I'm going next with this. If you have any questions,

309
00:19:28,436 --> 00:19:31,870
please do feel free to reach out to me on social media,

310
00:19:32,020 --> 00:19:35,554
and I will always get back to you as soon as possible. My dms

311
00:19:35,682 --> 00:19:39,060
messages are always open. Thank you very much. Take care.

