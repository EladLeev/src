1
00:00:20,730 --> 00:00:24,574
Hi, welcome to comp 42 open source showcase. I'm Tom

2
00:00:24,612 --> 00:00:28,438
Payne. I'm an open source developer living in Zurich, and today I'm

3
00:00:28,444 --> 00:00:31,922
going to talk about Shamewa in ten minutes. What is Shamewa?

4
00:00:31,986 --> 00:00:35,250
It's a dot file manager. Firstly, what's a dot file?

5
00:00:35,330 --> 00:00:39,286
A dot files is a generic term for your personal configuration files. They're where

6
00:00:39,308 --> 00:00:42,934
you configuration and tune your tools like Git, your editor, your shell

7
00:00:42,982 --> 00:00:46,186
and so on. They're generally very personal. And if

8
00:00:46,208 --> 00:00:50,054
you invested time in configuring these tools, then you generally want to use your configurations

9
00:00:50,102 --> 00:00:53,802
on as many machines as possible. For example, you want to share config

10
00:00:53,866 --> 00:00:57,034
between your home laptop, home server, your work laptop

11
00:00:57,082 --> 00:01:00,606
and your work server. What makes

12
00:01:00,628 --> 00:01:03,678
shamewire particularly interesting? Well, it's extremely flexible.

13
00:01:03,854 --> 00:01:07,326
It runs everywhere. Linux, macOS, even Windows,

14
00:01:07,438 --> 00:01:10,660
Windows services for Linux, Termux, you name it,

15
00:01:11,030 --> 00:01:12,660
shamewire runs there.

16
00:01:14,470 --> 00:01:18,038
It supports all the sort of variations you might want

17
00:01:18,124 --> 00:01:21,320
from machine to machine in a very easy to use way.

18
00:01:21,770 --> 00:01:24,920
It's very secure. It has great support for

19
00:01:25,370 --> 00:01:29,398
maintaining secrets on different machines and making sure that secrets do not

20
00:01:29,404 --> 00:01:32,682
get checked out onto machines where they don't need to be. This is great.

21
00:01:32,736 --> 00:01:36,438
For example, it means that your home secrets don't get checked

22
00:01:36,454 --> 00:01:39,578
out on your work machine and your work secrets don't get checked out on your

23
00:01:39,584 --> 00:01:42,938
home machine. It's very cross platform, as I

24
00:01:42,944 --> 00:01:46,318
mentioned, very easy to install. Why should you

25
00:01:46,324 --> 00:01:49,806
use a dotfiles manager at all? Well, if you've invested the time in your

26
00:01:49,908 --> 00:01:53,374
creating your dot files, then you generally want to use those configuration as widely as

27
00:01:53,412 --> 00:01:57,246
possible. It's great backup if you lose access to

28
00:01:57,268 --> 00:02:01,038
your machine for whatever reason, hard disk failure, or if you want, you're setting

29
00:02:01,054 --> 00:02:03,986
up a new machine and you want to get your configuration up and running as

30
00:02:04,008 --> 00:02:07,158
quickly as possible. In a new machine you get all the advantages of

31
00:02:07,164 --> 00:02:10,726
version control, checking stuff into a git repo history,

32
00:02:10,828 --> 00:02:14,386
rollbacks, we're all very familiar with that. And finally, the careful

33
00:02:14,418 --> 00:02:17,898
management of secrets. So, enough intro,

34
00:02:17,984 --> 00:02:21,898
let's go straight into a little demo. This is

35
00:02:21,984 --> 00:02:25,286
a Mac mini I've just installed.

36
00:02:25,318 --> 00:02:29,254
It's completely empty. Apart from installing homebrew,

37
00:02:29,382 --> 00:02:32,814
the machine is virgin. Shaynoir is

38
00:02:32,852 --> 00:02:36,698
very easy to install. It's in homebrew. There are packages

39
00:02:36,794 --> 00:02:40,126
for every major Linux distribution, devs and rpms. There are pre

40
00:02:40,148 --> 00:02:43,410
built binaries, there's an online

41
00:02:43,480 --> 00:02:46,770
shell script install. It's very quick to get into your machine.

42
00:02:47,830 --> 00:02:56,162
Now I've already got files

43
00:02:56,226 --> 00:03:00,360
example. I have an example

44
00:03:02,410 --> 00:03:06,150
file repo here which I'll now check out onto

45
00:03:08,650 --> 00:03:10,010
disk machines.

46
00:03:17,290 --> 00:03:21,186
This will ask you for email, which I won't give right now. It's configurable.

47
00:03:21,218 --> 00:03:24,726
I'll explain that later. Okay, so Chainmar's checked out the git

48
00:03:24,758 --> 00:03:28,006
repo. We can actually see what it's

49
00:03:28,038 --> 00:03:31,338
shown. It's here in this dick example.

50
00:03:31,424 --> 00:03:35,274
There are just a couple of dot files and one

51
00:03:35,312 --> 00:03:38,558
directory. We can

52
00:03:38,564 --> 00:03:41,994
now apply those changes. We can see the changes that shamar

53
00:03:42,042 --> 00:03:45,594
would make. First it's going to create the git

54
00:03:45,642 --> 00:03:49,626
config and netrc shmire

55
00:03:49,658 --> 00:03:52,830
apply actually causes Shamar to write those files.

56
00:03:52,910 --> 00:03:56,226
It does so in a very robust fashion, and we'll see

57
00:03:56,248 --> 00:04:00,274
that there's no changes and indeed the

58
00:04:00,312 --> 00:04:03,746
doc files exist. That's not

59
00:04:03,768 --> 00:04:07,906
particularly interesting. Let's show allowing a dot file between multiple machines.

60
00:04:08,098 --> 00:04:12,530
Here is a little Linux box using the same dot file

61
00:04:12,690 --> 00:04:16,380
git repo let's say I'm going to

62
00:04:17,710 --> 00:04:21,114
have a Tmux config. I want to get

63
00:04:21,152 --> 00:04:22,780
Shimoir to add it.

64
00:04:26,670 --> 00:04:29,806
This has added it to the git repo, but not pushed it.

65
00:04:29,828 --> 00:04:33,486
Shimla can automatically create commits and push them for you,

66
00:04:33,508 --> 00:04:36,718
but I haven't done this. Just show more clearly what's happening here.

67
00:04:36,884 --> 00:04:41,346
We can add our dot file to

68
00:04:41,368 --> 00:04:51,090
our repo and

69
00:04:51,160 --> 00:04:58,486
push it there.

70
00:04:58,508 --> 00:05:02,134
It's off on GitHub. Back to my Mac

71
00:05:02,182 --> 00:05:06,010
now I can pull these changes in with the update,

72
00:05:10,030 --> 00:05:13,386
see what Saturn and Shmwire has pulled the changes and applied

73
00:05:13,418 --> 00:05:17,402
them. So it makes it very easy to share dot files between multiple machines

74
00:05:17,546 --> 00:05:20,658
that on its own is not particularly interesting. Let's look at a

75
00:05:20,664 --> 00:05:24,514
more interesting example. So the

76
00:05:24,552 --> 00:05:28,174
dot file repo contains a one to one mapping

77
00:05:28,222 --> 00:05:32,440
between dot files in your home directory and files in a repo. There's no extra

78
00:05:33,370 --> 00:05:37,046
configuration file there, it's just all of the

79
00:05:37,068 --> 00:05:41,042
attributes of the file, for example, private, their templates,

80
00:05:41,186 --> 00:05:44,060
et cetera, are stored in the files name.

81
00:05:44,830 --> 00:05:49,050
Git config is particularly interesting. The final file

82
00:05:50,110 --> 00:05:54,534
is gint

83
00:05:54,582 --> 00:05:55,370
config,

84
00:05:59,630 --> 00:06:03,230
but you look at the source file,

85
00:06:04,290 --> 00:06:07,994
it's actually a template, as indicated by the template

86
00:06:08,042 --> 00:06:11,602
suffix. And these

87
00:06:11,656 --> 00:06:15,300
curly brackets here indicate this is

88
00:06:15,990 --> 00:06:19,506
a template variable and

89
00:06:19,528 --> 00:06:22,846
we can switch based on those template variables.

90
00:06:22,958 --> 00:06:27,150
Email was prompted to me when I first inerted

91
00:06:27,310 --> 00:06:30,486
shame wa. But you can use whatever variables you want.

92
00:06:30,508 --> 00:06:33,974
You can define your own. And Shanewa provides

93
00:06:34,022 --> 00:06:37,974
a whole load of variables you can use to switch

94
00:06:38,022 --> 00:06:41,254
behavior from machine to machine, including architecture,

95
00:06:41,382 --> 00:06:46,974
operating system, et cetera, et cetera for

96
00:06:47,012 --> 00:06:51,610
secret management. So that's a basic template. Another example is secret

97
00:06:51,690 --> 00:06:55,386
management, an example file that might have a secret

98
00:06:55,498 --> 00:06:57,710
is netrc.

99
00:06:59,910 --> 00:07:03,634
This contains a password and it

100
00:07:03,672 --> 00:07:07,554
needs to be have

101
00:07:07,592 --> 00:07:12,066
private permissions. Only the user can runs it and the

102
00:07:12,088 --> 00:07:15,926
wis is represented with this private prefix in

103
00:07:15,948 --> 00:07:19,698
the source here, which means that Shimar creates the permissions correctly

104
00:07:19,874 --> 00:07:23,010
and it's a template as well. What's interesting is

105
00:07:23,180 --> 00:07:26,666
we want a password present on

106
00:07:26,688 --> 00:07:29,878
disk, but we don't want the password in our doc

107
00:07:29,894 --> 00:07:33,274
files repo because everyone can read that if we look

108
00:07:33,312 --> 00:07:36,650
at the actual sources.

109
00:07:36,730 --> 00:07:40,446
Actually it's also a template, but here I'm using a magic function

110
00:07:40,548 --> 00:07:44,362
secret which in this case decodes

111
00:07:44,426 --> 00:07:48,554
the secret. This magic function can also integrate

112
00:07:48,602 --> 00:07:52,034
with all different password managers. Personally I use last

113
00:07:52,072 --> 00:07:54,754
password equally. You can use one pass,

114
00:07:54,872 --> 00:07:58,500
keychain, goPass, whatever you want.

115
00:07:59,110 --> 00:08:02,578
This way the secrets are either encrypted

116
00:08:02,674 --> 00:08:06,642
or started in your password manager,

117
00:08:06,706 --> 00:08:10,454
and shamewire transparently retrieves them when need them, when they

118
00:08:10,492 --> 00:08:13,926
actually create the dock files on the list. So that's a quick

119
00:08:13,948 --> 00:08:17,270
example of showing config to machines

120
00:08:17,430 --> 00:08:20,886
Koopu differences from machine to machine, personal configuration variables

121
00:08:20,918 --> 00:08:24,410
and secret management running on both Linux and macOS.

122
00:08:24,750 --> 00:08:28,560
The shamewire has loads more to it. It's very

123
00:08:29,090 --> 00:08:32,846
nicely documented at shinwa IO with

124
00:08:32,868 --> 00:08:36,154
a full quick start how to reference guide,

125
00:08:36,202 --> 00:08:37,470
et cetera, et cetera.

126
00:08:39,330 --> 00:08:42,866
Why do I think you should use Chimoa, not any

127
00:08:42,888 --> 00:08:46,514
other file manager? Well, it's very widely used now. It's got over 2.6

128
00:08:46,552 --> 00:08:49,522
thousand stars on GitHub. It's easy to install,

129
00:08:49,576 --> 00:08:52,946
it runs everywhere. It creates real regular files on your home,

130
00:08:52,968 --> 00:08:56,626
in your home directory, not sim links into a central location like glue

131
00:08:56,658 --> 00:08:59,814
snow. That means it's very easy to move

132
00:08:59,852 --> 00:09:02,918
from machine to machines. If you choose not to use shamewire in the future,

133
00:09:03,004 --> 00:09:06,934
it's very easy to migrate away from it. Shamewire maintains

134
00:09:06,982 --> 00:09:11,046
a single source of truths, that single files which often template

135
00:09:11,158 --> 00:09:15,146
but it handles diverse perfumes very well, has great secret management and

136
00:09:15,168 --> 00:09:18,990
there's loads of extra functionality which you can read about in documentation.

137
00:09:21,890 --> 00:09:25,418
Under the hood, it's single binary, statically linked

138
00:09:25,594 --> 00:09:29,546
in crest platform. This means there are no external dependencies

139
00:09:29,578 --> 00:09:33,138
when you come to install it. In contrast with other dotfiles manager that might be

140
00:09:33,144 --> 00:09:36,446
written in scripting language like Python or Ruby,

141
00:09:36,638 --> 00:09:40,366
you'll need to install the language runtime first before you can use the dot file

142
00:09:40,398 --> 00:09:44,286
manager. Shamewire single binary, no depths runs

143
00:09:44,318 --> 00:09:47,474
everywhere, integrates very well with third party tools.

144
00:09:47,522 --> 00:09:51,714
By default you can use git use git for your repo,

145
00:09:51,762 --> 00:09:55,894
but it can be whatever you want. It uses GPG for encrypting

146
00:09:55,942 --> 00:09:59,194
files and the password manager's command line

147
00:09:59,232 --> 00:10:02,518
interfaces. It does atomic updates of files.

148
00:10:02,614 --> 00:10:06,122
It never writes a partial file. So even if your update process

149
00:10:06,176 --> 00:10:09,850
interrupted, you don't corrupt your. Doc files. There's a very transparent

150
00:10:09,930 --> 00:10:13,646
source format. You get a one to one correspondence between files in your

151
00:10:13,668 --> 00:10:16,430
source directory and files in your home directory.

152
00:10:17,010 --> 00:10:20,318
It's MIT licensed, very liberal, and it's written go.

153
00:10:20,404 --> 00:10:25,626
You can find it@GitHub.com gwpainshinoir

154
00:10:25,738 --> 00:10:29,518
and the main website itself is Shamewire. IO machines was

155
00:10:29,524 --> 00:10:32,630
written to scratch your personal it's been very useful for me.

156
00:10:32,700 --> 00:10:35,734
I hope it can be very useful to you too. Thank you.

