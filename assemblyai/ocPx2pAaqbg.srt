1
00:01:54,010 --> 00:01:57,438
My name is Ben Conrad and I have the job title of head of product

2
00:01:57,524 --> 00:02:01,082
at MDTP, which is the tax platform at HMRC,

3
00:02:01,146 --> 00:02:04,966
and we're going to spend a little bit of time today explaining what that

4
00:02:05,028 --> 00:02:08,226
is. I'm also joined here with Gerald.

5
00:02:08,338 --> 00:02:11,910
Hi, I'm an appsec snooper. Ben's brought me along

6
00:02:11,980 --> 00:02:15,814
to the platform to turn over stones, pull on strings and talk

7
00:02:15,852 --> 00:02:19,306
in cliches. So you might be thinking that

8
00:02:19,328 --> 00:02:23,162
this talk is going to be incredibly know

9
00:02:23,216 --> 00:02:26,634
how. We try and make sure that Scala services running

10
00:02:26,752 --> 00:02:30,422
at HMRC are secure. And in some ways

11
00:02:30,576 --> 00:02:34,222
it is. We're intending to broaden it out and cover

12
00:02:34,276 --> 00:02:36,830
things that you can use elsewhere.

13
00:02:37,330 --> 00:02:41,754
So Ben, we're here to talk about securing the multi

14
00:02:41,802 --> 00:02:45,306
channel digital tax platform to set some

15
00:02:45,348 --> 00:02:48,754
context. What is it? The headline is that it is

16
00:02:48,792 --> 00:02:52,846
a PaaS, a platform as a service. In an effort to reduce

17
00:02:52,878 --> 00:02:56,338
their postage costs and save on the brown envelopes that HMRC likes

18
00:02:56,354 --> 00:03:00,486
to send out, HMRC have been building digital services in

19
00:03:00,508 --> 00:03:04,038
line with the approach defined by the uk government digital service,

20
00:03:04,204 --> 00:03:07,090
which is broadly digital by default.

21
00:03:07,250 --> 00:03:10,586
And to make this easier, HMRC have what

22
00:03:10,608 --> 00:03:13,370
we call a multi channel digital tax platform.

23
00:03:13,520 --> 00:03:17,494
MDTP, or just the tax platform. The platform exists

24
00:03:17,542 --> 00:03:21,150
to make building and hosting digital services as

25
00:03:21,220 --> 00:03:24,542
easy as possible. MDTP is a platform, AWS, a service,

26
00:03:24,596 --> 00:03:28,474
as I say, and it's where the infrastructure, logging metrics,

27
00:03:28,522 --> 00:03:32,538
alerting CI CD pipelines, testing prototyping templates,

28
00:03:32,634 --> 00:03:36,926
everything that you need to build and develop a digital service is provided

29
00:03:37,038 --> 00:03:40,786
out of the box. And really importantly, nearly all

30
00:03:40,808 --> 00:03:44,674
of it is self service. So for me, one of the highlights working

31
00:03:44,712 --> 00:03:48,326
with you over the years was that relatively recently you told

32
00:03:48,348 --> 00:03:52,322
me about that MDTP had a vision statement.

33
00:03:52,466 --> 00:03:56,354
Now normally I associate vision statements with verbal

34
00:03:56,402 --> 00:03:59,754
gymnastics to make a company sound like everything to

35
00:03:59,792 --> 00:04:03,674
everyone without being offensive to anyone, which then gets

36
00:04:03,712 --> 00:04:07,114
used to align people on mandatory fund days.

37
00:04:07,232 --> 00:04:09,766
But this one I really liked.

38
00:04:09,958 --> 00:04:13,798
Simple, secures services for all. Let's go away

39
00:04:13,824 --> 00:04:17,454
and try to understand what that means. There's so much that you can get

40
00:04:17,492 --> 00:04:21,166
out of this simple statement, probably too much to go in

41
00:04:21,188 --> 00:04:23,460
here, but what does it mean for you?

42
00:04:23,910 --> 00:04:27,442
MDTP has been existence for the last eight,

43
00:04:27,496 --> 00:04:31,150
nine, maybe ten years, and we host nearly

44
00:04:31,310 --> 00:04:34,786
all of HMRC's customer facing digital services.

45
00:04:34,968 --> 00:04:38,226
As a platform. We provide this set of infrastructure and

46
00:04:38,248 --> 00:04:41,874
tools to allow people, developers to build, test and deploy

47
00:04:41,922 --> 00:04:44,966
services. But they have to be written in a certain way. They have to be

48
00:04:44,988 --> 00:04:48,198
written in Scala with the play framework. And we think we're

49
00:04:48,214 --> 00:04:52,310
pretty good at what we offer the platform is hosted in AWS,

50
00:04:52,390 --> 00:04:56,742
but the platform abstracts AWS services so that developers

51
00:04:56,806 --> 00:05:00,490
writing services to run on MDTP do not need

52
00:05:00,560 --> 00:05:03,790
any AWS credentials. And that's a really important point.

53
00:05:03,940 --> 00:05:08,074
They are not writing services to run in AWS

54
00:05:08,122 --> 00:05:11,454
or any other cloud provider. They are writing services to

55
00:05:11,492 --> 00:05:14,686
run on MDTP. And we could move the whole of

56
00:05:14,708 --> 00:05:18,178
MDTP to a different cloud provider. And although that would be a

57
00:05:18,184 --> 00:05:22,126
lot of work, the services running on MDTP hopefully

58
00:05:22,158 --> 00:05:25,414
wouldn't have to make any changes. And in fact, we have managed to do that

59
00:05:25,452 --> 00:05:29,202
in the past. We talk about MDTP being an opinionated

60
00:05:29,266 --> 00:05:32,786
platform. The opinions we hold define

61
00:05:32,898 --> 00:05:36,242
this paved road, this golden path, the bowling

62
00:05:36,306 --> 00:05:39,974
alley of success. And that's what we provide to our users.

63
00:05:40,022 --> 00:05:43,466
And the intention from that following it is that if

64
00:05:43,488 --> 00:05:47,034
you follow the pave road, we'll allow the teams to

65
00:05:47,072 --> 00:05:49,770
build services quickly and efficiently.

66
00:05:50,350 --> 00:05:54,186
Chat we're really trying to do is remove the complexity

67
00:05:54,298 --> 00:05:58,382
and in some ways remove a lot of the choices about which

68
00:05:58,436 --> 00:06:02,046
technology to use. And the payoff for this is that if you follow our

69
00:06:02,068 --> 00:06:06,190
opinions and you stay within those guardrails, then you can focus on solving

70
00:06:06,270 --> 00:06:09,666
business problems and deliver value to HMRC and to

71
00:06:09,688 --> 00:06:13,138
your users really quickly. Now,

72
00:06:13,224 --> 00:06:16,886
this talk is about security, the secure services

73
00:06:16,988 --> 00:06:20,178
bit of the statement, and specifically appsec.

74
00:06:20,354 --> 00:06:24,338
Yes, appsec. It is, I think, a little bit contentious

75
00:06:24,434 --> 00:06:27,938
that we have a platform security team and an

76
00:06:27,964 --> 00:06:32,410
application security team, and maybe we'll touch on why that split exists.

77
00:06:33,150 --> 00:06:36,826
Application security, which is say, we do differentiate from our

78
00:06:36,848 --> 00:06:39,850
platform security team who focus on the infrastructure.

79
00:06:40,350 --> 00:06:43,546
We've always taken responsibility for the securing of

80
00:06:43,568 --> 00:06:46,574
the platform itself, the infrastructure, the features that we build.

81
00:06:46,692 --> 00:06:49,966
However, I guess it should be clear that if you're just concentrating on

82
00:06:49,988 --> 00:06:52,874
the infrastructure, it's only one side of the coin.

83
00:06:53,002 --> 00:06:56,722
The platform itself can be hardened and you can hold it to be

84
00:06:56,776 --> 00:07:00,686
relatively secure, but that doesn't really count for a lot if the applications

85
00:07:00,718 --> 00:07:04,734
that we're hosting are riddled with vulnerabilities that are easy to exploit.

86
00:07:04,862 --> 00:07:08,678
I guess you'll forgive the analogy. If you make really

87
00:07:08,764 --> 00:07:12,258
thick, strong walls that will withstand all sorts of attacks,

88
00:07:12,354 --> 00:07:16,146
it's not actually very useful. If the windows and doors are left wide

89
00:07:16,178 --> 00:07:19,466
open, it's not going to provide that high level of

90
00:07:19,488 --> 00:07:23,466
protection. The services hosted on MDTP have

91
00:07:23,488 --> 00:07:27,066
always, and I hope always will have responsibility for

92
00:07:27,088 --> 00:07:30,598
their own security. However, because of the

93
00:07:30,624 --> 00:07:33,870
consistency and the way that all of these services

94
00:07:33,940 --> 00:07:37,150
are built using common tools and common technologies,

95
00:07:37,490 --> 00:07:41,326
we're able to effectively look for vulnerabilities not just in

96
00:07:41,348 --> 00:07:45,298
a single service, but across hundreds of services at a time.

97
00:07:45,464 --> 00:07:49,134
And we can also provide tooling that enables teams to proactively

98
00:07:49,182 --> 00:07:53,262
check for known vulnerabilities in their own code as part of an automated

99
00:07:53,326 --> 00:07:56,946
CI CD pipeline. It's also important to remember that security

100
00:07:57,048 --> 00:08:00,406
isn't a goal in its own right. It's something that always needs

101
00:08:00,428 --> 00:08:03,698
to be looked at in context. It's no good throwing lots

102
00:08:03,714 --> 00:08:06,966
of security tooling at the problem and then giving yourself a pat in

103
00:08:06,988 --> 00:08:11,110
the back and a tick in a box. We process payments

104
00:08:11,190 --> 00:08:14,362
of hundreds of billions of pounds a year, and we

105
00:08:14,416 --> 00:08:17,402
legitimately pay out many billions, even in years,

106
00:08:17,456 --> 00:08:20,774
without a global viral pandemic. The applications

107
00:08:20,822 --> 00:08:24,318
on the platform process the data for around 45 million individual

108
00:08:24,404 --> 00:08:27,326
UK taxpayers and about 5 million companies.

109
00:08:27,508 --> 00:08:30,714
And that data in itself is really valuable, and the UK

110
00:08:30,762 --> 00:08:34,210
government has got legal responsibilities to protect it.

111
00:08:34,360 --> 00:08:37,682
So the Appsec team are focused on looking at the security

112
00:08:37,816 --> 00:08:42,418
of the applications that we host. I guess this is who

113
00:08:42,504 --> 00:08:45,990
are we worried about, who are the threat actors?

114
00:08:46,330 --> 00:08:49,622
And in some ways this isn't that important,

115
00:08:49,756 --> 00:08:53,542
in that a number of different threat actors may

116
00:08:53,596 --> 00:08:57,502
actually be looking to exploit the same vulnerabilities.

117
00:08:57,586 --> 00:09:00,614
But it's always useful to sort of know your enemy,

118
00:09:00,662 --> 00:09:04,634
I suppose. So when

119
00:09:04,672 --> 00:09:07,050
we are doing a risk assessment,

120
00:09:08,350 --> 00:09:12,382
who are the threat actors that we're looking at? And rogue engineers is

121
00:09:12,436 --> 00:09:15,200
something that we know we could have.

122
00:09:16,370 --> 00:09:20,170
It's worth mentioning. It's not that we don't trust our engineers,

123
00:09:20,330 --> 00:09:24,270
but it's worth remembering that people can have their credentials stolen,

124
00:09:24,350 --> 00:09:26,850
they could be blackmailed, they could be exploited.

125
00:09:27,590 --> 00:09:31,554
Scriptkitties. So any

126
00:09:31,672 --> 00:09:34,420
sufficiently large system is going to be under attack.

127
00:09:35,590 --> 00:09:39,110
And we're not a WordPress site, but we get

128
00:09:39,180 --> 00:09:42,582
lots and lots and lots of requests which seem to believe that maybe

129
00:09:42,636 --> 00:09:46,070
we are, because people are just trying

130
00:09:46,140 --> 00:09:48,540
anything. It's so cheap to do that.

131
00:09:49,470 --> 00:09:52,730
Fraudsters, the garden variety fraudsters.

132
00:09:53,950 --> 00:09:58,058
It's important, I think, that security isn't a technical thing,

133
00:09:58,224 --> 00:10:02,014
or not solely technical. You're also thinking about

134
00:10:02,052 --> 00:10:05,886
how an information system can be abused to trick people out of

135
00:10:05,908 --> 00:10:09,566
money. So there's been a spate at

136
00:10:09,588 --> 00:10:13,490
the moment of people receiving

137
00:10:14,630 --> 00:10:18,226
text messages or communications, which then convince them to hand over

138
00:10:18,248 --> 00:10:22,062
their details so that fraudsters can claim tax free payments on their behalf,

139
00:10:22,206 --> 00:10:25,346
and often without the victim realizing

140
00:10:25,378 --> 00:10:28,360
that this has been a problem so far.

141
00:10:29,850 --> 00:10:33,030
Hackers. So it's important to remember that

142
00:10:33,100 --> 00:10:36,418
very often attackers will go for the low hanging fruit.

143
00:10:36,594 --> 00:10:39,986
It's not so much important chat. You have an unbreakable lock

144
00:10:40,018 --> 00:10:43,418
on your door. But you do need to remember to lock it,

145
00:10:43,504 --> 00:10:47,546
and you need to make sure that you are taking advantage of the

146
00:10:47,728 --> 00:10:50,830
tools that you do have to secure your systems.

147
00:10:51,170 --> 00:10:54,686
And finally, nation states. I think this is

148
00:10:54,708 --> 00:10:58,240
the one that's most difficult,

149
00:10:59,970 --> 00:11:03,458
and it's overkill to think that a nation state is going to attack us,

150
00:11:03,544 --> 00:11:07,250
but actually we are a UK government organization

151
00:11:08,630 --> 00:11:11,086
and we can't ignore the possibility.

152
00:11:11,278 --> 00:11:15,106
So, onto a bit more about the platform. We have

153
00:11:15,128 --> 00:11:18,966
a microservice architecture with a lot of services. There is over 1000

154
00:11:19,068 --> 00:11:22,566
microservices. The numbers fluctuate a bit. I think there have

155
00:11:22,588 --> 00:11:26,214
been around 200 new microservices created on MDTP so

156
00:11:26,252 --> 00:11:29,722
far this year, but not all of those will be running in production yet.

157
00:11:29,776 --> 00:11:33,802
And sometimes we get to decommission old services if they get replaced or

158
00:11:33,856 --> 00:11:37,082
are no longer

159
00:11:37,136 --> 00:11:40,378
needed. How you count teams is quite difficult,

160
00:11:40,464 --> 00:11:44,254
because quite often there is a one to one relationship between a team looking

161
00:11:44,292 --> 00:11:47,710
after a single service. But we also have live service

162
00:11:47,780 --> 00:11:50,878
teams who may look after 50 or so different services,

163
00:11:50,964 --> 00:11:54,786
and there are plenty that fall between those two extremes. And of

164
00:11:54,808 --> 00:11:58,530
course, the teams vary in size as well. So in total,

165
00:11:58,680 --> 00:12:02,660
it depends how you count them. I think there are about 340

166
00:12:03,110 --> 00:12:06,020
front end microservices on the platform.

167
00:12:06,630 --> 00:12:10,198
So there are a large number of digital services, which I

168
00:12:10,204 --> 00:12:13,474
think just, it really speaks to how inventive

169
00:12:13,522 --> 00:12:16,774
this country is at coming up with new taxes. The point

170
00:12:16,812 --> 00:12:20,154
is that we're operating at significant scale and quite

171
00:12:20,192 --> 00:12:24,026
a lot of changes to code. On this chart you

172
00:12:24,048 --> 00:12:27,286
can clearly see Christmas and to a lesser

173
00:12:27,318 --> 00:12:31,306
extent, Easter. And I think the last one is the

174
00:12:31,328 --> 00:12:35,422
late Queen's Jubilee, which was a lot of fun,

175
00:12:35,556 --> 00:12:38,974
no good for productivity. And each of these

176
00:12:39,012 --> 00:12:42,078
lines of code could be built into a new artifact, and then those will

177
00:12:42,084 --> 00:12:45,818
be tested through our pipelines. If a test fails, then the pipeline will

178
00:12:45,844 --> 00:12:49,518
fail and the artifact won't progress any further. This does create a challenge

179
00:12:49,534 --> 00:12:53,026
for HMRC, though, because things are constantly changing on the platform,

180
00:12:53,208 --> 00:12:57,006
and we want to know that we're not introducing security holes with those

181
00:12:57,048 --> 00:13:01,494
changes. But just before I move on, just to be really clear,

182
00:13:01,692 --> 00:13:05,158
the number of changes is not in itself a security problem.

183
00:13:05,324 --> 00:13:08,774
Indeed, it's very, very much the opposite. If we implemented a

184
00:13:08,812 --> 00:13:12,330
change freeze and set the whole platform in async for the next year,

185
00:13:12,480 --> 00:13:15,846
we would become far more vulnerable to security incidents,

186
00:13:15,878 --> 00:13:18,954
not less. A portion of these deployments will be

187
00:13:18,992 --> 00:13:22,538
to upgrade code to remove older versions with known security risks.

188
00:13:22,714 --> 00:13:26,954
But all of these changes will be improvements to services that HMRC

189
00:13:27,002 --> 00:13:30,878
make available. And the higher numbers, the better.

190
00:13:31,044 --> 00:13:34,338
I think that's quite enough context, and I hope I've not bored you all

191
00:13:34,344 --> 00:13:38,418
too much. So the question we've got remaining is

192
00:13:38,504 --> 00:13:42,622
how can we protect ourselves? Trust, but verify.

193
00:13:42,766 --> 00:13:46,410
I used to love using the Russian Prague tovare. No proverray,

194
00:13:46,510 --> 00:13:48,760
but I guess that's no longer cool.

195
00:13:49,770 --> 00:13:52,438
So we've got a number of different problems.

196
00:13:52,604 --> 00:13:55,974
Let's start with one, which is that we have all of these

197
00:13:56,012 --> 00:13:59,514
different microservices and they all have dependencies. And so

198
00:13:59,552 --> 00:14:03,274
that means that we have lots of dependencies, although not

199
00:14:03,312 --> 00:14:06,762
quite as many as there might be, because we have

200
00:14:06,896 --> 00:14:10,266
opinions and because we make sure

201
00:14:10,288 --> 00:14:13,070
that everything is written in scala with the play framework.

202
00:14:13,650 --> 00:14:17,614
But we may well have unsupported or vulnerable code

203
00:14:17,732 --> 00:14:21,166
running across our many services. So what can we do

204
00:14:21,188 --> 00:14:24,782
about that? So first sort of step

205
00:14:24,836 --> 00:14:28,446
at doing that is to introduce something called Bobby rules.

206
00:14:28,638 --> 00:14:31,986
Bobby is a tool that we've written that is used as part of the

207
00:14:32,008 --> 00:14:35,626
builds, and it fails if there are any dependencies

208
00:14:35,678 --> 00:14:39,286
that we don't like. So we can manually say don't use that.

209
00:14:39,388 --> 00:14:43,302
If you use it, you can't build. It's quite

210
00:14:43,356 --> 00:14:46,006
a severe tool,

211
00:14:46,188 --> 00:14:49,674
which is why we sort of tend to be quite careful in using

212
00:14:49,712 --> 00:14:53,434
it. We tend to announce to people that things

213
00:14:53,472 --> 00:14:56,794
will be deprecated and give them some time to

214
00:14:56,832 --> 00:14:59,914
update things. Because if we were to just say

215
00:14:59,952 --> 00:15:03,710
one day, oh, you can't use this, then we'll probably get inundated with

216
00:15:03,780 --> 00:15:07,182
calls saying oh no, we need an exemption because we have got special

217
00:15:07,236 --> 00:15:10,654
circumstances. It's a great tool as well,

218
00:15:10,692 --> 00:15:14,366
not only for sort of preventing vulnerabilities,

219
00:15:14,478 --> 00:15:17,774
sort of libraries, it's also great for enforcing

220
00:15:17,822 --> 00:15:21,694
platform upgrades, and we get quite a lot of reporting

221
00:15:21,822 --> 00:15:25,810
on it. We can see trends as to whether people

222
00:15:25,960 --> 00:15:29,382
actually look at it. One thing that we have done is

223
00:15:29,516 --> 00:15:33,462
we made it so that it can be bypassed. So if somebody needs

224
00:15:33,516 --> 00:15:36,550
to have the security fix for something unrelated,

225
00:15:38,090 --> 00:15:41,306
then they have to go and ask Ben whether they can do

226
00:15:41,328 --> 00:15:46,650
it. And the screen here is a screenshot from catalogue,

227
00:15:47,150 --> 00:15:50,246
so actually it's worth talking about the catalog briefly.

228
00:15:50,358 --> 00:15:54,206
It's an internal tool that we've developed in house, but it's now possible to use

229
00:15:54,228 --> 00:15:57,486
more generic alternatives off the shelf. As a tool. For us,

230
00:15:57,508 --> 00:16:00,766
it's something of a swiss army knife. It holds a vast trove of

231
00:16:00,788 --> 00:16:04,162
information about the application. Nearly all of that is

232
00:16:04,216 --> 00:16:08,420
automatically generated. So there aren't manual updates required to anything here.

233
00:16:09,190 --> 00:16:12,754
And we use it to basically keep an eye on the services, to make

234
00:16:12,792 --> 00:16:16,518
sure that they're all doing the right thing,

235
00:16:16,684 --> 00:16:20,514
and we use it to collaborate with the teams

236
00:16:20,562 --> 00:16:24,550
to facilitate that. They can upgrade the things without the least friction.

237
00:16:24,890 --> 00:16:28,374
So here's a second problem that we've got. We are

238
00:16:28,412 --> 00:16:31,882
big fans of coding in the open. It's really

239
00:16:31,936 --> 00:16:35,740
important. It's one of the GDS standards. We believe it makes things better.

240
00:16:36,270 --> 00:16:39,526
However, you do not want to be leaking secures onto

241
00:16:39,558 --> 00:16:43,278
the Internet. And that is something

242
00:16:43,364 --> 00:16:47,182
chat we know has happened before. So again, how can we stop

243
00:16:47,236 --> 00:16:51,310
ourselves doing that? So what we've come up with

244
00:16:51,380 --> 00:16:54,034
is what we termed a leak detection service.

245
00:16:54,152 --> 00:16:57,966
And essentially it keeps teams on the GitHub commits

246
00:16:57,998 --> 00:17:01,790
that are being done. And when it finds something that looks sensitive,

247
00:17:01,950 --> 00:17:05,938
it will alert the teams via slack alerts, but it'll also

248
00:17:06,024 --> 00:17:09,926
alert the security teams, which teams that we can sort of look

249
00:17:09,948 --> 00:17:13,574
at the bigger picture. Again, it's important that what we're doing

250
00:17:13,612 --> 00:17:17,062
here is to collaborate with teams themselves, with the service

251
00:17:17,116 --> 00:17:20,220
teams themselves, to help them to protect themselves.

252
00:17:20,990 --> 00:17:24,426
So I guess here's another problem. Again,

253
00:17:24,528 --> 00:17:27,690
going back to vulnerabilities, independencies maybe,

254
00:17:27,760 --> 00:17:30,790
but maybe something a bit different. A new vulnerability

255
00:17:30,870 --> 00:17:34,590
is found and the question is,

256
00:17:34,740 --> 00:17:37,840
how do we know whether we are vulnerabilities to it?

257
00:17:38,610 --> 00:17:41,914
So this is one of my favorite

258
00:17:41,962 --> 00:17:45,810
tools that we've developed on the platform, which is called the dependency Explorer.

259
00:17:46,150 --> 00:17:49,458
It allows you to search through all the dependencies of all

260
00:17:49,464 --> 00:17:53,394
the services. And this screenshot is why

261
00:17:53,512 --> 00:17:57,990
the log for shell vulnerabilities that took place at Christmas 2021

262
00:17:58,140 --> 00:18:01,080
was scary. For only about ten minutes,

263
00:18:01,450 --> 00:18:05,414
we got the notification that there's a problem in the log

264
00:18:05,452 --> 00:18:08,714
for J Core library. We had a look and

265
00:18:08,752 --> 00:18:11,180
we found that it wasn't used.

266
00:18:13,630 --> 00:18:17,242
Anyone not aware? The log for J vulnerability was quite

267
00:18:17,296 --> 00:18:20,830
scary because with specially crafted messages

268
00:18:21,170 --> 00:18:24,474
being logged, it could trigger information leakage

269
00:18:24,522 --> 00:18:27,390
and remote execution.

270
00:18:28,130 --> 00:18:31,626
The dependency explorer showed us that our services didn't

271
00:18:31,658 --> 00:18:35,246
have the dependency, so that was great, but it requires

272
00:18:35,278 --> 00:18:38,180
you to know what you're looking for.

273
00:18:38,550 --> 00:18:42,046
So this is one of our newer

274
00:18:42,078 --> 00:18:44,580
tools, which I know Jared wants to talk about.

275
00:18:44,950 --> 00:18:49,106
The problem we've got, I suppose, is that we do have an awful

276
00:18:49,138 --> 00:18:53,270
lot of code with a lot of dependencies and we've got vulnerabilities

277
00:18:53,850 --> 00:18:57,714
in some of them, but it's how do we know what we're vulnerable

278
00:18:57,762 --> 00:19:00,330
to and what we can safely ignore?

279
00:19:00,990 --> 00:19:04,554
So typically what happens here is

280
00:19:04,592 --> 00:19:08,182
that you get some tooling in and do some dependency

281
00:19:08,246 --> 00:19:12,038
analysis. In this case, we've actually got JFrog's x ray.

282
00:19:12,214 --> 00:19:16,006
The problem we've found with JFrog was that the x ray

283
00:19:16,038 --> 00:19:19,520
resource screens was horrible. If you look at the screen there,

284
00:19:20,450 --> 00:19:25,866
you can't really make out what's

285
00:19:25,898 --> 00:19:30,302
being said here. The columns are too small and

286
00:19:30,436 --> 00:19:34,046
we don't all have a bank of 42 inch monitors to

287
00:19:34,068 --> 00:19:37,910
be able to look at these reports. And looking through 140,000

288
00:19:37,980 --> 00:19:40,710
pages of reports, it's just impossible.

289
00:19:41,290 --> 00:19:44,630
But the information that's contained in

290
00:19:44,700 --> 00:19:48,154
x ray is obviously useful. But there is a problem

291
00:19:48,192 --> 00:19:52,394
with that as well, isn't there? Yes. So every

292
00:19:52,432 --> 00:19:56,006
vulnerability tends to have a CVSS score that stands

293
00:19:56,038 --> 00:19:59,642
for common vulnerability scoring system. And very often,

294
00:19:59,696 --> 00:20:02,510
and a lot of tools use that score.

295
00:20:03,250 --> 00:20:07,006
AWS a risk score. So you

296
00:20:07,028 --> 00:20:10,206
can set up policies that say if there's a risk of

297
00:20:10,228 --> 00:20:13,360
higher than eight, then don't allow it. If it's less than eight,

298
00:20:13,730 --> 00:20:17,038
it's not a problem. The problem with that approach is that it's

299
00:20:17,054 --> 00:20:20,562
not a risk score. Now we've actually gone through

300
00:20:20,616 --> 00:20:24,466
each of the cves that were flagged and we found chat. Some of

301
00:20:24,488 --> 00:20:28,222
the worst issues did not have the worst scores,

302
00:20:28,366 --> 00:20:31,574
and some of the worst secures that we found were not an issue at all.

303
00:20:31,612 --> 00:20:35,062
It always depends on context. And if there's one

304
00:20:35,116 --> 00:20:39,254
thing you take away from this talk, please don't go away and define policies

305
00:20:39,302 --> 00:20:44,090
that say anything less than eight can go through because it isn't secure.

306
00:20:44,990 --> 00:20:48,154
What we did do is as a first step,

307
00:20:48,272 --> 00:20:51,520
we evaluated all the dependencies and

308
00:20:52,530 --> 00:20:56,206
looked at the vulnerabilities chat were in them

309
00:20:56,388 --> 00:20:59,978
and then sort of aggregate them. And we actually used spreadsheets.

310
00:21:00,154 --> 00:21:03,490
So instead of 100,000 reports, we're looking at

311
00:21:03,560 --> 00:21:07,026
the individual cves. And then based on that,

312
00:21:07,128 --> 00:21:10,366
we looked at creating

313
00:21:10,478 --> 00:21:13,902
a prototype and then we created tickets

314
00:21:13,966 --> 00:21:17,414
to sort of say, well, how can we turn this into something

315
00:21:17,452 --> 00:21:20,246
that can be consumed by each of the services?

316
00:21:20,348 --> 00:21:23,654
We looked at the fact that we've got a

317
00:21:23,692 --> 00:21:27,080
huge number of things to process

318
00:21:27,530 --> 00:21:30,938
and we tried to be basically agile and sort

319
00:21:30,944 --> 00:21:34,378
of created an MVP and then sort of took it

320
00:21:34,384 --> 00:21:38,634
from there. The start off was just this very

321
00:21:38,672 --> 00:21:42,400
simple three by three board where we laid out what are the things

322
00:21:42,850 --> 00:21:46,030
that will be needed by different parts of the organization.

323
00:21:46,770 --> 00:21:49,674
And then in less than a month, we had an MVP.

324
00:21:49,722 --> 00:21:53,426
That allowed us to look at the

325
00:21:53,448 --> 00:21:57,102
problems, but more importantly allowed the service teams

326
00:21:57,166 --> 00:22:00,866
themselves to check what

327
00:22:01,048 --> 00:22:04,260
the vulnerability issues were.

328
00:22:04,630 --> 00:22:08,066
And we provided assessments by the Appsec team so

329
00:22:08,088 --> 00:22:11,750
that we didn't overload the service teams and saying,

330
00:22:11,820 --> 00:22:15,766
now you've got hundreds and hundreds of different reports to look at. And I

331
00:22:15,788 --> 00:22:19,020
think it looks better than x ray already. Okay,

332
00:22:19,630 --> 00:22:23,530
so it's all well and good finding problems in somebody else's code,

333
00:22:23,600 --> 00:22:27,206
but how can we find examples

334
00:22:27,238 --> 00:22:29,900
of maybe bad code in our own?

335
00:22:31,390 --> 00:22:35,422
Yeah, it's an interesting thing. And again, you can start really

336
00:22:35,556 --> 00:22:38,986
simple here. I mean, we've created what we've termed the risk

337
00:22:39,018 --> 00:22:42,846
ledger. It's just a set of spreadsheets that identify areas

338
00:22:42,878 --> 00:22:46,946
where risky code could live. As an example, we know that sometimes

339
00:22:47,048 --> 00:22:51,010
passing XML can be problematic. So we've identified

340
00:22:51,990 --> 00:22:54,820
all the places where XML passing is happening.

341
00:22:55,910 --> 00:22:59,046
We then use chat to create a sort of risk ledger to sort

342
00:22:59,068 --> 00:23:02,054
of say, okay, these are all the places that we want to check, which then

343
00:23:02,092 --> 00:23:05,990
allows us to sort of find the different patterns of usage

344
00:23:06,730 --> 00:23:10,186
that happen. Now again, you have to remember that this is an

345
00:23:10,208 --> 00:23:13,642
issue of scale. It's possible for somebody to remember

346
00:23:13,696 --> 00:23:17,674
this for 20 microservices but not for

347
00:23:17,712 --> 00:23:21,494
1000. And then what we're doing is we're sort of taking this

348
00:23:21,552 --> 00:23:25,630
risk ledger approach and now we're starting to build tooling around

349
00:23:25,700 --> 00:23:29,598
it. Yeah, I think we've recognized for some time that our success,

350
00:23:29,764 --> 00:23:34,190
our scale has created a problem, although it's also created opportunities.

351
00:23:34,610 --> 00:23:38,242
Our platform security team were our first attempt to really make

352
00:23:38,296 --> 00:23:41,550
security a first class citizen of MDTP.

353
00:23:41,710 --> 00:23:44,930
We wanted to start looking at the security of those things that we had direct

354
00:23:45,000 --> 00:23:48,678
ownership of. And in a way that was the easy part. Although I

355
00:23:48,684 --> 00:23:53,110
think we can agree that like love, security is a journey, not a destination.

356
00:23:53,690 --> 00:23:57,330
With application security, there are other challenges.

357
00:23:57,490 --> 00:24:00,938
Services on the platform are regularly reviewed from a security

358
00:24:01,024 --> 00:24:04,410
perspective, but not as often as we're making changes

359
00:24:04,480 --> 00:24:08,170
to them as the platform. We decided that

360
00:24:08,240 --> 00:24:12,330
we could do more and that's where the idea of a platform based application security

361
00:24:12,400 --> 00:24:15,994
team came from. The first remit is really to go and lift some rocks,

362
00:24:16,042 --> 00:24:19,326
pull on some threads and see what the problems are, as Gerald mentioned at the

363
00:24:19,348 --> 00:24:22,798
start, but then secondly, investigating what we can

364
00:24:22,804 --> 00:24:26,930
do to fix those problems and preferably at a platform level,

365
00:24:27,000 --> 00:24:30,434
at that scale level, so that we can protect all the services running

366
00:24:30,472 --> 00:24:34,082
on MDTP and not require individual changes

367
00:24:34,216 --> 00:24:37,718
across thousands of repositories. So I'd like to

368
00:24:37,724 --> 00:24:41,190
borrow here from team topologies, the service

369
00:24:41,260 --> 00:24:44,966
teams, the stream aligned teams and Appsec can be considered as

370
00:24:44,988 --> 00:24:48,946
an enabling team. Now if you look at this slide,

371
00:24:49,058 --> 00:24:52,618
my first attempt looked quite different. It was sort of like a

372
00:24:52,624 --> 00:24:56,246
hub and spoke with Appsec, sat at the center, but I felt

373
00:24:56,278 --> 00:25:00,066
it completely gave up the wrong message. Service teams aren't

374
00:25:00,118 --> 00:25:03,200
at the margins when it comes to talking about security.

375
00:25:04,370 --> 00:25:08,142
Security issues are always about context, and it's the

376
00:25:08,196 --> 00:25:11,550
service teams themselves that will have the context.

377
00:25:12,450 --> 00:25:15,598
So I've tried to sort of visualize this here with a sort of

378
00:25:15,684 --> 00:25:20,050
double robbery to say that Appsec can't function without

379
00:25:20,120 --> 00:25:23,300
the service teams and the service teams can't do all the security

380
00:25:23,830 --> 00:25:27,250
themselves. Right at the beginning I said that my title

381
00:25:27,330 --> 00:25:29,190
is an appsec snooper.

382
00:25:30,410 --> 00:25:34,294
It wouldn't be possible for me to review security

383
00:25:34,412 --> 00:25:38,570
services at the scale of MDTP, if we had 15

384
00:25:38,640 --> 00:25:42,726
different languages, it wouldn't be possible for Appsec

385
00:25:42,758 --> 00:25:46,698
to do something centrally if everyone did something different.

386
00:25:46,864 --> 00:25:50,454
And so that's where it becomes possible for a central

387
00:25:50,502 --> 00:25:55,194
Appsec team to sort of do some of the turning

388
00:25:55,242 --> 00:25:58,586
over of stones that otherwise wouldn't be possible, that service teams

389
00:25:58,618 --> 00:26:02,630
themselves wouldn't necessarily have the time for. Now, when Appsec finds

390
00:26:02,650 --> 00:26:06,114
something, we get in touch with the owning team and we just talk

391
00:26:06,152 --> 00:26:11,422
to them. It's not about blame, it's not about finger

392
00:26:11,486 --> 00:26:16,274
pointing, it's about collaboration to make services

393
00:26:16,392 --> 00:26:19,942
more secure. And the catalogue always

394
00:26:19,996 --> 00:26:23,462
allows us to find a slack channel that we can go and talk to.

395
00:26:23,596 --> 00:26:27,062
And the whole thing works both ways. When a service team

396
00:26:27,116 --> 00:26:30,326
finds an issue, they can feed it back to the central appsec

397
00:26:30,358 --> 00:26:32,890
teams, they can ask about best practices.

398
00:26:33,390 --> 00:26:37,114
And this is a great example as to how security

399
00:26:37,232 --> 00:26:40,682
works. It's about collaboration, it's about people, it's not about

400
00:26:40,736 --> 00:26:45,066
tools. But for the collaboration to work, we do need those tools.

401
00:26:45,178 --> 00:26:48,126
So this goes back to an important point that I think we've been trying to

402
00:26:48,148 --> 00:26:51,402
make all the way through, which is the paved road. The opinionated

403
00:26:51,466 --> 00:26:54,898
platform enables a certain amount of centralization when it

404
00:26:54,904 --> 00:26:58,690
comes to security, but those are the same benefits

405
00:26:58,840 --> 00:27:02,146
for developing services quickly. We know that we

406
00:27:02,168 --> 00:27:05,574
can allow or enable services to be built really

407
00:27:05,612 --> 00:27:09,160
quickly. We built some for Covid in about four weeks,

408
00:27:09,770 --> 00:27:13,570
but the platform supports both that speed

409
00:27:13,730 --> 00:27:16,934
and also security. So just

410
00:27:16,972 --> 00:27:20,442
on the conclusions here, the pave road

411
00:27:20,496 --> 00:27:23,946
is really important. It makes centralizing application

412
00:27:24,048 --> 00:27:27,018
security possible, and the tooling is really important.

413
00:27:27,104 --> 00:27:30,646
It allows the centralized teams to reach out to the service teams,

414
00:27:30,758 --> 00:27:34,110
it allows these findings to be distributed in a self service

415
00:27:34,180 --> 00:27:37,358
manner. And we're not just chasing people down. It's also,

416
00:27:37,444 --> 00:27:40,846
it really helps if you've got experienced engineers who know what

417
00:27:40,868 --> 00:27:44,442
they're doing. Yes, securing a complex

418
00:27:44,506 --> 00:27:47,870
system is very hard, but you don't have to do everything

419
00:27:47,940 --> 00:27:51,374
at once. And if

420
00:27:51,412 --> 00:27:55,382
you want to start with sort of creating an appsec team,

421
00:27:55,556 --> 00:27:59,266
I would personally recommend just starting by collecting

422
00:27:59,298 --> 00:28:02,822
that sort of threat intelligence. Find out

423
00:28:02,876 --> 00:28:06,694
which service writes files or which talks to a particular sensitive back

424
00:28:06,732 --> 00:28:10,614
end. Make a list, use a spreadsheet, aggregate it, script it, automate it,

425
00:28:10,652 --> 00:28:13,320
scale it, be agile about it.

426
00:28:15,290 --> 00:28:18,998
Thank you very much for coming to a talk. Thank you.

427
00:28:19,084 --> 00:28:19,460
Take care.

