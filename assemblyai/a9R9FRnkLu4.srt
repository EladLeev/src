1
00:00:27,650 --> 00:00:31,634
Hello, I'm Rafael and my talk is titled Mutation Testing

2
00:00:31,682 --> 00:00:35,154
with Pete. But first, a few words about myself. I am a cloud native

3
00:00:35,202 --> 00:00:38,326
team lead at Hazelcast before I worked at Google and

4
00:00:38,348 --> 00:00:41,846
CERN. I'm also an author of the book continuous delivery with Docker and

5
00:00:41,868 --> 00:00:45,442
Jenkins, and from time to time I do conference speaking and trainings,

6
00:00:45,506 --> 00:00:48,838
but on a daily basis. I'm a developer and I live in Krakow in

7
00:00:48,844 --> 00:00:52,846
Poland. A few words about Hazelcast Hazelcast is a distributed company

8
00:00:52,948 --> 00:00:56,142
and it is distributed in two meanings. First meaning is

9
00:00:56,196 --> 00:01:00,062
we are distributed company because we produce distributed software. But the second

10
00:01:00,116 --> 00:01:04,062
meaning is that we are distributed company because we all

11
00:01:04,116 --> 00:01:07,806
work remotely. We always work remotely. So I'm from Krakow,

12
00:01:07,838 --> 00:01:11,426
from Poland, but I'm the only one from Krakow. We have people all over the

13
00:01:11,448 --> 00:01:14,930
world. Our products are hazelcast in memory data grid,

14
00:01:15,430 --> 00:01:18,962
which is a library for distributed computation,

15
00:01:19,026 --> 00:01:23,394
for caching. Hazelcast jet is a library for stream processing, and hazelcast

16
00:01:23,442 --> 00:01:26,886
cloud is hazelcast, but as a service. So do you

17
00:01:26,908 --> 00:01:30,586
know why the NASA spacecraft burned in the atmosphere of

18
00:01:30,608 --> 00:01:34,166
Mars in 1999? And do you know that it is somehow

19
00:01:34,198 --> 00:01:37,990
related to the fact that even though mutation testing

20
00:01:38,070 --> 00:01:41,194
was discovered in 1971, it was not really

21
00:01:41,232 --> 00:01:44,638
used until 2012? So the answer to

22
00:01:44,724 --> 00:01:48,746
all of these questions, as well as the whole idea and the implementation

23
00:01:48,778 --> 00:01:52,122
of mutation testing, you will all find this in this presentation.

24
00:01:52,266 --> 00:01:56,142
But first, imagine the following scenario. So there are like two engineers

25
00:01:56,206 --> 00:01:59,554
discussing. I wrote code for the spacecraft. How do you know that it

26
00:01:59,592 --> 00:02:03,090
works? I just know, or I

27
00:02:03,160 --> 00:02:06,726
feel it. So NASA code, that is actually what happened in

28
00:02:06,748 --> 00:02:10,246
NASA. So the code of the NASA spacecraft, it was

29
00:02:10,268 --> 00:02:13,814
not tested. So in December 1998,

30
00:02:13,932 --> 00:02:17,314
NASA launched the climate orbiter spacecraft

31
00:02:17,362 --> 00:02:20,886
into the space. And this divide weighted almost half of

32
00:02:20,908 --> 00:02:24,234
a ton and was sent to the Mars. It takes around half a year,

33
00:02:24,272 --> 00:02:27,978
like six months, to go from Earth to Mars. And everything

34
00:02:28,064 --> 00:02:31,258
was fine until September 1999, when all of

35
00:02:31,264 --> 00:02:34,410
a sudden the contact with this device was lost.

36
00:02:34,490 --> 00:02:39,178
What happened? So there was a big in the code. So the ground computer calculated

37
00:02:39,274 --> 00:02:42,170
everything. In no metric system, they used pounds.

38
00:02:42,250 --> 00:02:45,726
However, the orbiter used metric system, and there

39
00:02:45,748 --> 00:02:49,074
was no conversion in between. So the speed of the orbiter was too

40
00:02:49,112 --> 00:02:52,526
fast, and the orbiter passed too quickly through the atmosphere

41
00:02:52,558 --> 00:02:56,086
of Mars and burned. So there was no people on board. So we can say,

42
00:02:56,188 --> 00:02:59,590
okay, shit happens, it's just money. But you know what?

43
00:02:59,660 --> 00:03:03,234
These NASA devices there are super expensive.

44
00:03:03,362 --> 00:03:06,918
So this one costed more than 300

45
00:03:07,004 --> 00:03:11,370
million of dollars. There's around 234

46
00:03:11,440 --> 00:03:15,494
Americans working all their lives for these orbiters.

47
00:03:15,542 --> 00:03:19,654
In case of Poland, it's even worse, you would need like 700 polish

48
00:03:19,702 --> 00:03:23,034
people working all their lives to get this money. And that is

49
00:03:23,072 --> 00:03:26,922
just because of the bug in the code. So how this conversation

50
00:03:26,986 --> 00:03:30,378
should look like. So I wrote code for the spacecraft.

51
00:03:30,474 --> 00:03:33,886
How do you know that it works? I wrote unit tests, but how do you

52
00:03:33,908 --> 00:03:35,680
know that your test works?

53
00:03:36,850 --> 00:03:39,986
But really. So we write code, and then

54
00:03:40,008 --> 00:03:43,106
we write test to test the code. And then we write test to test the

55
00:03:43,128 --> 00:03:45,858
test of the code, and write the tests of. To test the test of the

56
00:03:45,864 --> 00:03:48,982
code. And it just doesn't make sense. So, if we are not

57
00:03:49,036 --> 00:03:52,466
sure that our tests are good, so does testing

58
00:03:52,498 --> 00:03:56,278
make any sense at all? And actually, yes, there is a method of

59
00:03:56,364 --> 00:03:59,954
testing your tests without writing more tests. So imagine

60
00:04:00,002 --> 00:04:03,626
we have the following code. So just the simplest possible code.

61
00:04:03,728 --> 00:04:06,906
A plus b. So this could be a production code of, I don't know,

62
00:04:06,928 --> 00:04:10,886
some calculator. So we write unit test. How do we check that our unit

63
00:04:10,918 --> 00:04:14,734
test works? We could run test coverage. But what does

64
00:04:14,772 --> 00:04:17,950
the code coverage check? So, according to common sense,

65
00:04:18,020 --> 00:04:22,234
or according to the guru of the common sense, the Uncle Bob coverage

66
00:04:22,282 --> 00:04:25,986
does not prove that you have tested every line. All it proves is that you

67
00:04:26,008 --> 00:04:29,154
have executed every line. And that is a big difference.

68
00:04:29,272 --> 00:04:33,138
If you think about it like this return

69
00:04:33,224 --> 00:04:36,882
statement here, it would be perfectly covered with the test,

70
00:04:36,936 --> 00:04:39,798
without any assertion. Just imagine the following test.

71
00:04:39,884 --> 00:04:43,014
And we have a test like this, and we

72
00:04:43,052 --> 00:04:46,726
have a 100% coverage, but we haven't tested anything. So we need

73
00:04:46,748 --> 00:04:50,278
something better. We need something better than code coverage. And actually there's

74
00:04:50,294 --> 00:04:54,166
something better. It was discovered by Richard Limpton

75
00:04:54,198 --> 00:04:57,802
in 1971. So Richard Lipton, he asked like a

76
00:04:57,936 --> 00:05:00,858
more fundamental question. He asked like,

77
00:05:00,944 --> 00:05:04,326
why do we write tests? And he came to the conclusion that we

78
00:05:04,368 --> 00:05:07,246
write tests to detect bugs. So think.

79
00:05:07,268 --> 00:05:10,254
But it for a moment, if you are sure that your code does not have

80
00:05:10,292 --> 00:05:14,062
any bugs, then there is no reason to write tests. So the

81
00:05:14,116 --> 00:05:17,470
test is good when it catches bugs. So we could

82
00:05:17,540 --> 00:05:21,262
reverse this strategy and introduce artificial bugs,

83
00:05:21,326 --> 00:05:24,622
and check if our test detects these artificial bugs.

84
00:05:24,686 --> 00:05:27,890
And that's what Richard Limton suggested in his paper.

85
00:05:27,960 --> 00:05:31,634
He mentioned that if you want to know if a test suit has properly

86
00:05:31,682 --> 00:05:35,090
checked some code, introduce a bug, how to do it in practice.

87
00:05:35,170 --> 00:05:39,158
So let's go back to our example, simplest example possible. We have

88
00:05:39,244 --> 00:05:42,666
our statement a plus b. So how can we introduce a

89
00:05:42,688 --> 00:05:46,390
bug here? We could reverse the statement and change it to minus.

90
00:05:46,470 --> 00:05:49,818
That is clear, a bug, because we wanted to have a sum, but we actually

91
00:05:49,904 --> 00:05:53,534
have. We subtract the values. So what I did here actually I

92
00:05:53,572 --> 00:05:57,434
created a mutation of the production code with an artificial

93
00:05:57,482 --> 00:06:01,166
bug. And now we can check, okay, if our test suit fails on

94
00:06:01,188 --> 00:06:03,918
this bug. If yes, our tests are good. If no,

95
00:06:04,004 --> 00:06:07,986
our tests are useless. So you may ask, like, is it the whole idea

96
00:06:08,088 --> 00:06:11,362
behind the mutation testing? And actually, yes, that's the whole

97
00:06:11,416 --> 00:06:15,230
idea of the mutation testing. But before we go any further,

98
00:06:15,390 --> 00:06:18,598
let's set up the terminology we

99
00:06:18,604 --> 00:06:22,274
will use. So, this artificial big is called a mutation

100
00:06:22,322 --> 00:06:25,762
operation. Code with the artificial bug is called a mutant.

101
00:06:25,826 --> 00:06:29,186
When the test fails on a mutant, we say it killed

102
00:06:29,218 --> 00:06:32,454
the mutant. However, if the test succeeds,

103
00:06:32,502 --> 00:06:36,266
even if we introduce this big, even if create a mutant, we say that

104
00:06:36,368 --> 00:06:39,500
the mutant survived. So, coming back to our example,

105
00:06:40,510 --> 00:06:43,600
if the mutant is our mutant, a minus d

106
00:06:44,210 --> 00:06:47,642
is killed, then our tests are good. If it survives,

107
00:06:47,706 --> 00:06:50,766
our tests are bad. So in this case, like,

108
00:06:50,788 --> 00:06:54,362
killing is good. So if all the mutants are killed,

109
00:06:54,426 --> 00:06:57,794
our test suit is perfectly fine. Now, the first thing you can think about

110
00:06:57,832 --> 00:07:01,486
is that, okay, but my code is much more complex than just adding

111
00:07:01,518 --> 00:07:05,454
two numbers. And that is why we have a lot of different mutation operations.

112
00:07:05,582 --> 00:07:08,786
And there are so many of them that we even put them into categories.

113
00:07:08,898 --> 00:07:12,594
So, first thing, how you can mutate your production

114
00:07:12,642 --> 00:07:16,214
code is to do some math changes. So we change some

115
00:07:16,252 --> 00:07:19,682
plus to minus. We change multiply to divide

116
00:07:19,746 --> 00:07:23,462
minus to plus. So we change all the math operations.

117
00:07:23,606 --> 00:07:27,082
Second thing, we change the boundaries, so we had less than

118
00:07:27,216 --> 00:07:30,646
a, less than b. So we changed it to less or equal than b.

119
00:07:30,688 --> 00:07:34,218
We can also negate the statements, and we have some more complex

120
00:07:34,314 --> 00:07:38,474
mutation operations, like remove if statements, remove method

121
00:07:38,522 --> 00:07:41,850
calls, modify return statement, modify some constants,

122
00:07:41,930 --> 00:07:45,706
and there are even more. So now what do we do? We have our production

123
00:07:45,738 --> 00:07:48,862
code base, like the whole code base. We create a mutant,

124
00:07:48,926 --> 00:07:51,982
so we use mutation operation to generate a mutant.

125
00:07:52,046 --> 00:07:55,198
We actually create a lot of them because we have a lot of mutation operation.

126
00:07:55,294 --> 00:07:58,694
Our code is big, so we create a lot of mutants. And now, if all

127
00:07:58,732 --> 00:08:02,518
the mutants, if for every mutant, at least one tests

128
00:08:02,604 --> 00:08:06,166
fails, we killed the mutant, so it's all good. However, if there

129
00:08:06,188 --> 00:08:09,782
is at least one mutant that survived all our

130
00:08:09,836 --> 00:08:13,546
test scenarios, it means that we didn't cover this code by

131
00:08:13,568 --> 00:08:17,034
any test. So it is bad. So the next thing you can ask is like,

132
00:08:17,072 --> 00:08:19,702
but do I need to change the code on my own? And luckily,

133
00:08:19,766 --> 00:08:23,546
no. For Java, there is a very good library called pit.

134
00:08:23,658 --> 00:08:26,970
And apart from being a good library, it has this great logo,

135
00:08:27,050 --> 00:08:30,378
one of the best logo on my personal classification of logos

136
00:08:30,474 --> 00:08:33,726
that goes, trust after Docker. This logo of

137
00:08:33,748 --> 00:08:37,614
this bird is great. And you can use this tool, the speed mutation testing

138
00:08:37,662 --> 00:08:41,102
tool. You can use it from command line, you can integrate it with maven

139
00:08:41,166 --> 00:08:44,270
or gradle, or you can use it as plugin to intellij.

140
00:08:44,350 --> 00:08:48,406
I actually always use it with my intellij. Just click ok, check if

141
00:08:48,428 --> 00:08:51,302
my tests are good. So let's see our example again.

142
00:08:51,356 --> 00:08:55,206
So we have our calculator method. We have our test,

143
00:08:55,308 --> 00:08:58,674
which provides 100% coverage, but actually it tests

144
00:08:58,722 --> 00:09:01,786
nothing. So how does it look like in

145
00:09:01,808 --> 00:09:05,194
practice? So let's see a short demo. How to run

146
00:09:05,232 --> 00:09:08,518
the speed mutation testing on this simple example. So what we're

147
00:09:08,534 --> 00:09:12,118
going to do, we have just one class with the calculator.

148
00:09:12,214 --> 00:09:15,646
This is exactly what we've seen on the slide. The simplest possible code. And we

149
00:09:15,668 --> 00:09:19,630
have a unit test for this with our unit test provides 100%

150
00:09:19,700 --> 00:09:22,954
coverage. But that's nothing. We can run the tests.

151
00:09:23,002 --> 00:09:26,450
Obviously it passes. It will pass even though we had no production code.

152
00:09:26,520 --> 00:09:30,462
We can even check what is the test coverage

153
00:09:30,606 --> 00:09:34,094
of this. And yes, it's 100% class method

154
00:09:34,142 --> 00:09:37,414
line. Everything is perfect. So now we need to improve this

155
00:09:37,452 --> 00:09:40,914
process of checking our tests. So we will use the pit.

156
00:09:40,962 --> 00:09:44,850
I already have the pit plugin installed into my intellij,

157
00:09:44,930 --> 00:09:49,154
so I can run this edit configurations and

158
00:09:49,212 --> 00:09:53,254
then add a configuration for a pit mutation testing

159
00:09:53,302 --> 00:09:56,970
runner. So when I edit, I need to specify a few parameters.

160
00:09:57,710 --> 00:10:00,640
I can give it a name, but doesn't matter much.

161
00:10:01,250 --> 00:10:04,586
I can specify the target classes,

162
00:10:04,698 --> 00:10:08,286
the source directory, the report

163
00:10:08,388 --> 00:10:12,014
directory. So if you look closer, so it just specify where

164
00:10:12,052 --> 00:10:16,130
should be the pit report generated. And that's basically it.

165
00:10:16,200 --> 00:10:21,566
So if I click ok, I can run this mutation

166
00:10:21,598 --> 00:10:24,514
testing framework and see the results in the results here,

167
00:10:24,552 --> 00:10:28,134
it created two mutants automatically. And you see, they were

168
00:10:28,172 --> 00:10:31,382
generated, but they were not killed, which is

169
00:10:31,436 --> 00:10:34,626
obviously bad. So, coming back to the slides, so what we've

170
00:10:34,658 --> 00:10:38,614
seen, this is the result of our pit mutation

171
00:10:38,662 --> 00:10:42,410
testing. Obviously the mutant was generated because this

172
00:10:42,480 --> 00:10:46,294
plus was changed to minus, but it survived, meaning our tests

173
00:10:46,342 --> 00:10:50,286
are useless. How can we improve it? Obviously write some

174
00:10:50,308 --> 00:10:54,046
better unit tests. In our case, we can change it to

175
00:10:54,068 --> 00:10:57,246
the proper unit tests, like giving some ab

176
00:10:57,428 --> 00:11:00,858
values given when we summit,

177
00:11:00,954 --> 00:11:04,238
we should assert it to free. This looks like

178
00:11:04,244 --> 00:11:08,274
a valid unit test. And this, if we run it again, it will result in

179
00:11:08,312 --> 00:11:11,666
an output like this, meaning mutant was generated, but it

180
00:11:11,688 --> 00:11:15,298
was killed. Perfect. Our unit tests are great. Now do I

181
00:11:15,304 --> 00:11:18,934
need to read the console? So, I mean, the reading console is

182
00:11:18,972 --> 00:11:22,210
not the great way of presenting the test results.

183
00:11:22,290 --> 00:11:26,242
And luckily no pit provides a very nicely generated

184
00:11:26,306 --> 00:11:30,074
HTML report and let's see how we can use it.

185
00:11:30,192 --> 00:11:33,594
So let's continue with this demo with our corrected test. So if

186
00:11:33,632 --> 00:11:37,290
we go to our intellij, we have corrected

187
00:11:37,870 --> 00:11:41,210
our unit test and if we run

188
00:11:41,280 --> 00:11:44,618
again our pit test runner,

189
00:11:44,714 --> 00:11:48,462
we should see that, okay, mutants were killed, but apart from the

190
00:11:48,516 --> 00:11:52,094
fact that it was killed at the end of the log, we can

191
00:11:52,132 --> 00:11:55,626
see open report in a browser. So we can open here directly

192
00:11:55,658 --> 00:11:58,898
open from intellij, the report that was generated in the browser and in the

193
00:11:58,904 --> 00:12:02,130
browser we have a very nice report with the code

194
00:12:02,200 --> 00:12:05,442
coverage according to mutation testing. So it's way

195
00:12:05,496 --> 00:12:09,602
better code coverage than the standard code coverage. We can browse it by packages,

196
00:12:09,746 --> 00:12:13,526
by classes and we can see what happened with our code.

197
00:12:13,628 --> 00:12:17,346
So this is a perfectly well covered code according to mutation testing.

198
00:12:17,378 --> 00:12:21,420
We can even see that two mutants were created out of this line

199
00:12:22,270 --> 00:12:25,306
and all of them were killed. So this

200
00:12:25,328 --> 00:12:29,146
is the output you are looking for. Okay. But the next thing, when I

201
00:12:29,168 --> 00:12:32,654
first heard about mutation testing, I thought the

202
00:12:32,692 --> 00:12:35,680
idea is great, I buy it. However,

203
00:12:36,130 --> 00:12:39,774
it will never work for a bigger project because my project is way

204
00:12:39,812 --> 00:12:43,230
bigger than just one calculator class, how it's possible that it works.

205
00:12:43,300 --> 00:12:46,834
And what I tried here, what we actually tried in hazelcast was

206
00:12:46,872 --> 00:12:49,854
to try it and use it on one of our plugins,

207
00:12:49,902 --> 00:12:53,810
which is hazelcast Kubernetes plugin. It has around 5000

208
00:12:53,880 --> 00:12:57,842
lines of code, so it's still small, but it's like reasonable

209
00:12:57,906 --> 00:13:01,974
size. It has twelve classes, so not a very big code base,

210
00:13:02,172 --> 00:13:05,894
but already something that is useful. So let's see in the demo how

211
00:13:05,932 --> 00:13:09,858
to run the same pit framework

212
00:13:09,954 --> 00:13:14,054
on the hazelcast Kubernetes plugin. If you go to the hazelcast

213
00:13:14,102 --> 00:13:17,306
Kubernetes page, what we did is if

214
00:13:17,328 --> 00:13:20,666
you would like to run it from the gradle or from the maven, you need

215
00:13:20,688 --> 00:13:24,206
to add the dependencies to pit. So in

216
00:13:24,228 --> 00:13:27,514
maven we added this with the profile.

217
00:13:27,562 --> 00:13:30,686
So we have a pit test profile and it's enough to

218
00:13:30,708 --> 00:13:33,886
add this part. And that's everything you need to change in your

219
00:13:33,908 --> 00:13:37,554
project to actually automate it. So with this part we can see how

220
00:13:37,592 --> 00:13:41,186
it works. From the command line we can clone this project. If we

221
00:13:41,208 --> 00:13:44,946
clone this project, we can. Then let's code this.

222
00:13:45,048 --> 00:13:48,882
And then if we open this directory

223
00:13:48,946 --> 00:13:52,934
with the project we can run the command with pit test

224
00:13:53,052 --> 00:13:56,614
with our profile. Pit test tests, mutation coverage this

225
00:13:56,652 --> 00:13:59,754
command will generate for us the report. So actually

226
00:13:59,792 --> 00:14:03,546
it takes some time for the pit to generate it. So maybe I will

227
00:14:03,568 --> 00:14:05,340
not show it here,

228
00:14:06,110 --> 00:14:09,914
but let's see how we did

229
00:14:09,952 --> 00:14:13,386
it. So what we did with this Kubernetes plugin, we added

230
00:14:13,418 --> 00:14:16,766
a GitHub action which runs this. Every time you

231
00:14:16,788 --> 00:14:19,710
push to the master, this GitHub action is run.

232
00:14:19,780 --> 00:14:24,090
And we run exactly the same command with the pit mutation coverage

233
00:14:24,170 --> 00:14:27,902
in our GitHub action. But apart from that we also publish

234
00:14:27,966 --> 00:14:31,474
this result to the GitHub pages. So we always have

235
00:14:31,512 --> 00:14:35,010
in the GitHub pages our current result of the mutation test.

236
00:14:35,080 --> 00:14:38,566
That is actually great. You can always go to this GitHub page and see the

237
00:14:38,588 --> 00:14:42,390
results. And with this GitHub action we can see how it was run.

238
00:14:42,460 --> 00:14:45,846
It's actually great because after every push to the master we

239
00:14:45,868 --> 00:14:50,086
have pit results. We can have a look how it runs. So pit

240
00:14:50,118 --> 00:14:53,260
coverage, it took actually 2 minutes and a half

241
00:14:53,870 --> 00:14:57,414
for this GitHub action to execute all the tests,

242
00:14:57,462 --> 00:15:01,226
mutation, everything. You can see that there is some mutant killed and

243
00:15:01,248 --> 00:15:05,690
the results are automatically, the report is automatically

244
00:15:05,770 --> 00:15:08,986
published to the GitHub pages. So we always have at the GitHub pages

245
00:15:09,098 --> 00:15:12,766
current pit test coverage report. So we can open this and

246
00:15:12,788 --> 00:15:15,922
see where are the things that are not

247
00:15:15,976 --> 00:15:19,122
well covered with our tests. And if we look at the,

248
00:15:19,256 --> 00:15:22,834
for example, this class looks like not well

249
00:15:22,872 --> 00:15:26,102
covered. So we can see, okay, this line looks

250
00:15:26,156 --> 00:15:28,120
not covered, right?

251
00:15:29,770 --> 00:15:33,462
This looks like the whole method is actually not covered. We can see like

252
00:15:33,516 --> 00:15:36,550
what? So if we change it to return now,

253
00:15:36,620 --> 00:15:40,266
it's actually no test catches it. So it's really bad and

254
00:15:40,288 --> 00:15:43,398
so on and so on. So we have like a code coverage,

255
00:15:43,494 --> 00:15:46,778
but done way better than with the

256
00:15:46,864 --> 00:15:50,426
standard code coverage tool. So I guess I already convinced you

257
00:15:50,448 --> 00:15:54,622
to use it. I mean, it looks great. So the next question is like why

258
00:15:54,676 --> 00:15:58,586
NASA Engineers didn't use it in 1998. So Richard

259
00:15:58,618 --> 00:16:02,778
Limpton discovered this in 1971. The first like Java

260
00:16:02,954 --> 00:16:06,510
mutation testing framework was called I guess Jepster,

261
00:16:06,590 --> 00:16:10,402
and it was created in 2000 and the pit was

262
00:16:10,456 --> 00:16:13,506
in 2012. So actually why

263
00:16:13,608 --> 00:16:16,674
it took so many years from

264
00:16:16,712 --> 00:16:20,726
the idea to go to something that you can use on

265
00:16:20,748 --> 00:16:24,726
the code and you can use as a developer. And it happens that there

266
00:16:24,748 --> 00:16:28,662
were two reasons why it was not used, widely used

267
00:16:28,716 --> 00:16:32,294
for such a long time. And the first reason was the problem with equivalent

268
00:16:32,342 --> 00:16:35,930
mutants. So let's look at this code. So this is a good code,

269
00:16:36,000 --> 00:16:39,114
I mean it makes sense, this code, but now think

270
00:16:39,152 --> 00:16:42,026
about it like if we mutate the second line,

271
00:16:42,128 --> 00:16:45,626
this code is the same. Actually the semantic of changing

272
00:16:45,658 --> 00:16:49,070
this mutant is the same. So we create a mutant, but no

273
00:16:49,140 --> 00:16:52,526
test will kill this mutant. So we

274
00:16:52,548 --> 00:16:55,806
have a false negative and

275
00:16:55,828 --> 00:16:59,886
that is like problem. Actually, the pit didn't solve

276
00:16:59,918 --> 00:17:03,138
this problem because this problem is not easy to solve. How to

277
00:17:03,224 --> 00:17:07,462
eliminate these equivalent mutants. However, what Pete did is

278
00:17:07,516 --> 00:17:11,314
that the mutation that are highly

279
00:17:11,362 --> 00:17:14,690
probable to generate these equivalent mutants,

280
00:17:14,850 --> 00:17:18,326
they are disabled by default. You can still enable them, but we

281
00:17:18,348 --> 00:17:21,926
don't want to have false negatives

282
00:17:21,958 --> 00:17:26,042
here. But there was also a second problem, why mutation testing was not widely used.

283
00:17:26,176 --> 00:17:29,434
And that is because of the slow performance. Because think about it,

284
00:17:29,472 --> 00:17:32,998
like from our code base, we create a lot of

285
00:17:33,024 --> 00:17:37,134
mutants. I mean, we can change a lot of things, so it

286
00:17:37,172 --> 00:17:40,606
results in a lot of mutants. And now we have a lot of

287
00:17:40,628 --> 00:17:44,482
tests. So you can already guess the problem. So the problem

288
00:17:44,536 --> 00:17:48,306
here is that we need to check every combination test and

289
00:17:48,328 --> 00:17:51,618
it's super time consuming. So what pit actually did,

290
00:17:51,704 --> 00:17:55,146
and it was quite smart. Before running this mutation

291
00:17:55,198 --> 00:17:58,674
testing, they run the normal code coverage

292
00:17:58,802 --> 00:18:01,878
and see which test covers this part.

293
00:18:01,964 --> 00:18:05,158
So if we know that this test covered this code,

294
00:18:05,244 --> 00:18:09,274
then we don't need to run all the combination. It's enough if

295
00:18:09,312 --> 00:18:13,094
we run this test for the mutants related

296
00:18:13,142 --> 00:18:16,762
to this code and it actually speeded up the

297
00:18:16,816 --> 00:18:20,314
whole process very, very well. So we don't run all

298
00:18:20,352 --> 00:18:24,078
tests on all mutants, we just run the test that may

299
00:18:24,164 --> 00:18:26,858
kill the mutant for the given mutant.

300
00:18:26,954 --> 00:18:30,714
Okay, that's cool. Actually, I guess I already convinced

301
00:18:30,762 --> 00:18:34,350
you to use mutation testing. But you may ask, but what about my team?

302
00:18:34,500 --> 00:18:37,842
They are lazy, they will not use it. And let me tell you a story

303
00:18:37,896 --> 00:18:41,586
here. So I worked in the banking industry some time ago, and you

304
00:18:41,608 --> 00:18:45,234
can imagine, like banking industry is like NASA, it's like

305
00:18:45,272 --> 00:18:48,926
super important, big money. And our team was distributed

306
00:18:48,958 --> 00:18:52,726
across three locations. One was in us, the other was in Krakow in

307
00:18:52,748 --> 00:18:56,166
Poland, and the last one was in Hyderabad in India. And the story is that

308
00:18:56,188 --> 00:18:59,698
each team was quite independent. So each team developed their own

309
00:18:59,804 --> 00:19:03,466
part of the system, their own modules. And we

310
00:19:03,488 --> 00:19:06,826
wanted to have 100% code coverage because we wanted to

311
00:19:06,848 --> 00:19:10,742
have high quality. That was the most important, because banking industry

312
00:19:10,806 --> 00:19:13,982
compliance, you need to have code well

313
00:19:14,036 --> 00:19:17,242
covered. The system was constructed in a way that each module

314
00:19:17,306 --> 00:19:20,574
had some main class. And the main class, I call it

315
00:19:20,612 --> 00:19:24,494
main class paradox, because main class is difficult to test because you

316
00:19:24,612 --> 00:19:27,826
cannot create a simple unit test for the main class. Because if

317
00:19:27,848 --> 00:19:32,002
you create a unit test to run the main class, you're basically testing the whole

318
00:19:32,136 --> 00:19:35,746
module, not only the main class. So there was, no matter how I

319
00:19:35,768 --> 00:19:39,830
tried to tests it with unit test, I always could go to 95%

320
00:19:39,900 --> 00:19:43,926
code coverage, never 100%. And then if you don't know how to do something.

321
00:19:44,108 --> 00:19:48,022
If you see the problem, you see, okay, let's see how other teams do it.

322
00:19:48,076 --> 00:19:51,482
And then I check the code from the team

323
00:19:51,536 --> 00:19:55,210
from India. So I look at the code, I check all the code,

324
00:19:55,280 --> 00:19:58,890
check all their tests. And what I found is that I

325
00:19:58,960 --> 00:20:02,270
found, okay, for each test there was given when,

326
00:20:02,420 --> 00:20:06,062
but there was no assertion. So they started to create

327
00:20:06,116 --> 00:20:09,930
tests with no assertions because there was a requirement

328
00:20:10,010 --> 00:20:14,282
for 100% code coverage and they needed to fulfill

329
00:20:14,346 --> 00:20:16,962
it somehow. And I don't know, I don't know what to do with the people

330
00:20:17,016 --> 00:20:20,706
who write tests without assertion. Should we laugh on

331
00:20:20,728 --> 00:20:24,706
them or should we get angry? But the moral of the story is that the

332
00:20:24,728 --> 00:20:28,626
test coverage threshold doesn't make any sense, because if you do it for

333
00:20:28,648 --> 00:20:32,086
your project, people will try to work around it if

334
00:20:32,108 --> 00:20:35,478
they need to. But you still want to have some cold coverage. So luckily there

335
00:20:35,484 --> 00:20:39,334
is a better way. What you should do is put your pit framework into

336
00:20:39,372 --> 00:20:42,562
your continuous integration or continuous delivery pipeline

337
00:20:42,626 --> 00:20:46,074
and generate these reports of cold coverage. And once a week,

338
00:20:46,112 --> 00:20:49,546
or once every other week, have a meeting and look at this report.

339
00:20:49,648 --> 00:20:54,030
Not to have like a threshold, you need to have 100%

340
00:20:54,100 --> 00:20:57,806
code coverage, but rather look at this HTML report,

341
00:20:57,908 --> 00:21:01,246
because that is the way you

342
00:21:01,428 --> 00:21:05,070
have less technical depth and improve the quality of your code.

343
00:21:05,140 --> 00:21:09,134
So the last thing is like, but do people really use mutation testing?

344
00:21:09,182 --> 00:21:12,738
Is it like widely used in an industry? And actually, yes, there are a lot

345
00:21:12,744 --> 00:21:15,906
of companies. It is used in CERN, it was used in

346
00:21:15,928 --> 00:21:19,654
the Norway voting system. And more and more companies are

347
00:21:19,692 --> 00:21:23,046
introducing mutation testing to their pipelines because it

348
00:21:23,068 --> 00:21:26,422
just improves the code quality. It's just better measurement than code

349
00:21:26,476 --> 00:21:30,006
coverage. So test your tests because it

350
00:21:30,028 --> 00:21:33,142
gives you the freedom, like you can easier refactor the test,

351
00:21:33,196 --> 00:21:36,790
refactor the code. You can trust your, you know,

352
00:21:36,860 --> 00:21:39,902
some shit can happen, or you can lose a lot of money,

353
00:21:39,996 --> 00:21:43,722
or you can feel shame or had laughter or anger.

354
00:21:43,866 --> 00:21:46,010
Thank you for listening to this presentation.

